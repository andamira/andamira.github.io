searchState.loadedDescShard("devela", 9, "Calculates the offset from a pointer using wrapping …\nCalculates the offset from a pointer using wrapping …\nA windowed iterator over a slice in overlapping chunks (<code>N</code> …\nAn iterator over slice in (non-overlapping) chunks …\nAn iterator over slice in (non-overlapping) mutable chunks …\nAn iterator over a slice in (non-overlapping) chunks (…\nAn iterator over a slice in (non-overlapping) chunks (…\nAn iterator over a slice in (non-overlapping) mutable …\nAn iterator over a slice in (non-overlapping) mutable …\nHelper trait for <code>[T]::concat</code>.\nAn iterator over the escaped version of a byte slice.\nThe error type returned by <code>get_disjoint_mut</code>.\nAn index provided was out-of-bounds for the slice.\nImmutable slice iterator\nMutable slice iterator.\nHelper trait for <code>[T]::join</code>\nThe resulting type after concatenation\nThe resulting type after concatenation\nThe output type returned by methods.\nTwo indices provided were overlapping.\nAn iterator over a slice in (non-overlapping) chunks (…\nAn iterator over a slice in (non-overlapping) chunks (…\nAn iterator over a slice in (non-overlapping) mutable …\nAn iterator over a slice in (non-overlapping) mutable …\nAn iterator over subslices separated by elements that …\nAn iterator over the subslices of the vector which are …\nAn iterator over subslices separated by elements that …\nAn iterator over subslices separated by elements that …\nA helper trait used for indexing operations.\nAn iterator over subslices separated by elements that …\nAn iterator over subslices separated by elements that …\nAn iterator over the mutable subslices of the vector which …\nAn iterator over the mutable subslices of the vector which …\nAn iterator over subslices separated by elements that …\nAn iterator over subslices separated by elements that …\nAn iterator over overlapping subslices of length <code>size</code>.\nImplementation of <code>[T]::concat</code>\nConverts a reference to T into a slice of length 1 …\nForms a mutable slice from a pointer range.\nForms a slice from a pointer range.\nForms a slice from a pointer and a length.\nPerforms the same functionality as <code>from_raw_parts</code>, except …\nConverts a reference to T into a slice of length 1 …\nReturns a shared reference to the output at this location, …\nReturns a mutable reference to the output at this …\nReturns a pointer to the output at this location, without …\nReturns a mutable pointer to the output at this location, …\nReturns a shared reference to the output at this location, …\nReturns a mutable reference to the output at this …\nImplementation of <code>[T]::join</code>\nPerforms bounds checking of a range.\nPerforms bounds checking of a range without panicking.\nAn iterator over the bytes of a string slice.\nAn iterator over the <code>char</code>s of a string slice, and their …\nAn iterator over the <code>char</code>s of a string slice.\nAn iterator of <code>u16</code> over the string encoded as UTF-16.\nThe associated error which can be returned from parsing.\nThe return type of <code>str::escape_debug</code>.\nThe return type of <code>str::escape_default</code>.\nThe return type of <code>str::escape_unicode</code>.\nParse a value from a string\nAn iterator over the lines of a string, as string slices.\nCreated with the method <code>lines_any</code>.\nCreated with the method <code>match_indices</code>.\nCreated with the method <code>matches</code>.\nAn error returned when parsing a <code>bool</code> using <code>from_str</code> fails\nCreated with the method <code>rmatch_indices</code>.\nCreated with the method <code>rmatches</code>.\nCreated with the method <code>rsplit</code>.\nCreated with the method <code>rsplitn</code>.\nCreated with the method <code>rsplit_terminator</code>.\nCreated with the method <code>split</code>.\nAn iterator over the non-ASCII-whitespace substrings of a …\nAn iterator over the substrings of a string, terminated by …\nCreated with the method <code>splitn</code>.\nCreated with the method <code>split_terminator</code>.\nAn iterator over the non-whitespace substrings of a string,\nAn item returned by the <code>Utf8Chunks</code> iterator.\nAn iterator used to decode a slice of mostly UTF-8 bytes …\nErrors which can occur when attempting to interpret a …\nConverts a boxed slice of bytes to a boxed string slice …\nCreates a <code>&amp;str</code> from a pointer and a length.\nCreates a <code>&amp;mut str</code> from a pointer and a length.\nParses a string <code>s</code> to return a value of this type.\nConverts a slice of bytes to a string slice.\nConverts a mutable slice of bytes to a mutable string …\nConverts a slice of bytes to a string slice without …\nConverts a slice of bytes to a string slice without …\nThe string Pattern API.\nAssociated type for <code>&lt;&amp;[char; N] as Pattern&gt;::Searcher&lt;&#39;a&gt;</code>.\nAssociated type for <code>&lt;[char; N] as Pattern&gt;::Searcher&lt;&#39;a&gt;</code>.\nType returned by char types.\nAssociated type for <code>&lt;F as Pattern&gt;::Searcher&lt;&#39;a&gt;</code>.\nAssociated type for <code>&lt;char as Pattern&gt;::Searcher&lt;&#39;a&gt;</code>.\nAssociated type for <code>&lt;&amp;[char] as Pattern&gt;::Searcher&lt;&#39;a&gt;</code>.\nExpresses that every byte of the haystack has been …\nA marker trait to express that a <code>ReverseSearcher</code> can be …\nExpresses that a match of the pattern has been found at …\nA string pattern.\nExpresses that <code>haystack[a..b]</code> has been rejected as a …\nA reverse searcher for a string pattern.\nResult of calling <code>Searcher::next()</code> or …\nA searcher for a string pattern.\nAssociated searcher for this pattern\nAssociated type for <code>&lt;&amp;str as Pattern&gt;::Searcher&lt;&#39;a&gt;</code>.\nType returned by String and str types.\nResult of calling <code>Pattern::as_utf8_pattern()</code>. Can be used …\nGetter for the underlying string to be searched in\nConstructs the associated searcher from <code>self</code> and the …\nPerforms the next search step starting from the front.\nPerforms the next search step starting from the back.\nA draining iterator for <code>String</code>.\nA possible error value when converting a <code>String</code> from a …\nA possible error value when converting a <code>String</code> from a …\nAn iterator over the <code>char</code>s of a string.\nA type alias for <code>Infallible</code>.\nA UTF-8–encoded, growable string.\nA trait for converting a value to a <code>String</code>.\nConverts the given value to a <code>String</code>.\nA thread-safe reference-counting pointer. ‘Arc’ stands …\nA barrier enables multiple threads to synchronize the …\nA <code>BarrierWaitResult</code> is returned by <code>Barrier::wait()</code> when …\nA Condition Variable\nContains the error value\nContains the error value\n<code>Exclusive</code> provides only <em>mutable</em> access, also referred to …\nA value which is initialized on the first access.\nA type alias for the result of a lock method which can be …\nAn RAII mutex guard returned by <code>MutexGuard::map</code>, which can …\nRAII structure used to release the shared read access of a …\nRAII structure used to release the exclusive write access …\nA mutual exclusion primitive useful for protecting shared …\nAn RAII implementation of a “scoped lock” of a mutex. …\nInitialization value for static <code>Once</code> values.\nContains the success value\nContains the success value\nA low-level synchronization primitive for one-time global …\nA synchronization primitive which can nominally be written …\nState yielded to <code>Once::call_once_force()</code>’s closure …\nA type of error which can be returned whenever a lock is …\nThe lock could not be acquired because another thread …\nA re-entrant mutual exclusion lock\nAn RAII implementation of a “scoped lock” of a …\nA reader-writer lock\nRAII structure used to release the shared read access of a …\nRAII structure used to release the exclusive write access …\nAn enumeration of possible errors associated with a …\nA type alias for the result of a nonblocking locking …\nA uniquely owned <code>Arc</code>.\nA type indicating whether a timed wait on a condition …\n<code>Weak</code> is a version of <code>Arc</code> that holds a non-owning reference …\nThe lock could not be acquired at this time because the …\nAtomic types\nReturns a raw pointer to the underlying data.\nMakes a <code>MappedMutexGuard</code> for a component of the borrowed …\nMakes a <code>MappedRwLockReadGuard</code> for a component of the …\nMakes a <code>MappedRwLockWriteGuard</code> for a component of the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a mutable reference to the underlying data.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes this lock, returning the underlying data.\nAcquires the lock, blocking the current thread until it is …\nMakes a <code>MappedMutexGuard</code> for a component of the borrowed …\nMakes a <code>MappedRwLockReadGuard</code> for a component of the …\nMakes a <code>MappedRwLockWriteGuard</code> for a component of the …\nMulti-producer, multi-consumer FIFO queue communication …\nMulti-producer, single-consumer FIFO queue communication …\nCreates a new re-entrant lock in an unlocked state ready …\nNon-poisoning synchronous locks.\nSynchronization objects that employ poisoning.\nAn <code>AtomicBool</code> initialized to <code>false</code>.\nAn <code>AtomicIsize</code> initialized to <code>0</code>.\nAn <code>AtomicUsize</code> initialized to <code>0</code>.\nHas the effects of both <code>Acquire</code> and <code>Release</code> together: For …\nWhen coupled with a load, if the loaded value was written …\nA memory location which can be safely modified from …\nA boolean type which can be safely shared between threads.\nAn integer type which can be safely shared between threads.\nAn integer type which can be safely shared between threads.\nAn integer type which can be safely shared between threads.\nAn integer type which can be safely shared between threads.\nTemporary implementation detail.\nAn integer type which can be safely shared between threads.\nA marker trait for primitive types which can be modified …\nA raw pointer type which can be safely shared between …\nAn integer type which can be safely shared between threads.\nAn integer type which can be safely shared between threads.\nAn integer type which can be safely shared between threads.\nAn integer type which can be safely shared between threads.\nAn integer type which can be safely shared between threads.\nAtomic memory orderings\nNo ordering constraints, only atomic operations.\nWhen coupled with a store, all previous operations become …\nLike <code>Acquire</code>/<code>Release</code>/<code>AcqRel</code> (for load, store, and …\nA “compiler-only” atomic fence.\nAn atomic fence.\nSignals the processor that it is inside a busy-wait …\nThe message could not be sent because the channel is …\nThe <strong>channel</strong>’s sending half has become disconnected, and …\nThe <strong>channel</strong>’s sending half has become disconnected, and …\nThis <code>sync_channel</code>’s receiving half has disconnected, so …\nThis <strong>channel</strong> is currently empty, but the <strong>Sender</strong>(s) have …\nThe data could not be sent on the <code>sync_channel</code> because it …\nAn owning iterator over messages on a <code>Receiver</code>, created by …\nAn iterator over messages on a <code>Receiver</code>, created by <code>iter</code>.\nThe receiving half of Rust’s <code>channel</code> (or <code>sync_channel</code>) …\nAn error returned from the <code>recv</code> function on a <code>Receiver</code>.\nThis enumeration is the list of possible errors that made …\nAn error returned from the <code>Sender::send</code> or <code>SyncSender::send</code>\nAn error returned from the <code>send_timeout</code> method.\nThe sending-half of Rust’s synchronous <code>channel</code> type.\nThe message could not be sent because the channel is full …\nThis <strong>channel</strong> is currently empty, but the <strong>Sender</strong>(s) have …\nAn iterator that attempts to yield all pending values for …\nThis enumeration is the list of the possible reasons that …\nThis enumeration is the list of the possible error …\nIf the channel is bounded, returns its capacity.\nIf the channel is bounded, returns its capacity.\nCreates a new asynchronous channel, returning the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the channel is empty.\nReturns <code>true</code> if the channel is empty.\nReturns <code>true</code> if the channel is full.\nReturns <code>true</code> if the channel is full.\nReturns an iterator that will block waiting for messages, …\nReturns the number of messages in the channel.\nReturns the number of messages in the channel.\nAttempts to wait for a value on this receiver, returning …\nAttempts to wait for a value on this receiver, returning …\nAttempts to wait for a value on this receiver, returning …\nReturns <code>true</code> if senders belong to the same channel.\nReturns <code>true</code> if receivers belong to the same channel.\nAttempts to send a value on this channel, returning it …\nWaits for a message to be sent into the channel, but only …\nWaits for a message to be sent into the channel, but only …\nCreates a new synchronous, bounded channel.\nReturns an iterator that will attempt to yield all pending …\nAttempts to receive a message from the channel without …\nAttempts to send a message into the channel without …\nThe <strong>channel</strong>’s sending half has become disconnected, and …\nThe <strong>channel</strong>’s sending half has become disconnected, and …\nThis <code>sync_channel</code>’s receiving half has disconnected, so …\nThis <strong>channel</strong> is currently empty, but the <strong>Sender</strong>(s) have …\nThe data could not be sent on the <code>sync_channel</code> because it …\nAn owning iterator over messages on a <code>Receiver</code>, created by …\nAn iterator over messages on a <code>Receiver</code>, created by <code>iter</code>.\nThe receiving half of Rust’s <code>channel</code> (or <code>sync_channel</code>) …\nAn error returned from the <code>recv</code> function on a <code>Receiver</code>.\nThis enumeration is the list of possible errors that made …\nAn error returned from the <code>Sender::send</code> or <code>SyncSender::send</code>\nThe sending-half of Rust’s asynchronous <code>channel</code> type.\nThe sending-half of Rust’s synchronous <code>sync_channel</code> type.\nThis <strong>channel</strong> is currently empty, but the <strong>Sender</strong>(s) have …\nAn iterator that attempts to yield all pending values for …\nThis enumeration is the list of the possible reasons that …\nThis enumeration is the list of the possible error …\nCreates a new asynchronous channel, returning the …\nCreates a new synchronous, bounded channel.\nContains the error value\nAn RAII mutex guard returned by <code>MutexGuard::map</code>, which can …\nA mutual exclusion primitive useful for protecting shared …\nAn RAII implementation of a “scoped lock” of a mutex. …\nContains the success value\nA type alias for the result of a nonblocking locking …\nA lock could not be acquired at this time because the …\nReturns a raw pointer to the underlying data.\nCreates a <code>Mutex&lt;T&gt;</code>, with the <code>Default</code> value for T.\nMakes a <code>MappedMutexGuard</code> for a component of the borrowed …\nMakes a <code>MappedMutexGuard</code> for a component of the borrowed …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new mutex in an unlocked state ready for use. …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the contained value by cloning it.\nReturns a mutable reference to the underlying data.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes this mutex, returning the underlying data.\nAcquires a mutex, blocking the current thread until it is …\nMakes a <code>MappedMutexGuard</code> for a component of the borrowed …\nMakes a <code>MappedMutexGuard</code> for a component of the borrowed …\nCreates a new mutex in an unlocked state ready for use.\nReplaces the contained value with <code>value</code>, and returns the …\nSets the contained value.\nAttempts to acquire this lock.\nA Condition Variable\nContains the error value\nContains the error value\nA type alias for the result of a lock method which can be …\nAn RAII mutex guard returned by <code>MutexGuard::map</code>, which can …\nRAII structure used to release the shared read access of a …\nRAII structure used to release the exclusive write access …\nA mutual exclusion primitive useful for protecting shared …\nAn RAII implementation of a “scoped lock” of a mutex. …\nInitialization value for static <code>Once</code> values.\nContains the success value\nContains the success value\nA low-level synchronization primitive for one-time global …\nState yielded to <code>Once::call_once_force()</code>’s closure …\nA type of error which can be returned whenever a lock is …\nThe lock could not be acquired because another thread …\nA reader-writer lock\nRAII structure used to release the shared read access of a …\nRAII structure used to release the exclusive write access …\nAn enumeration of possible errors associated with a …\nA type alias for the result of a nonblocking locking …\nA type indicating whether a timed wait on a condition …\nThe lock could not be acquired at this time because the …\nThe context of an asynchronous task.\nA Builder used to construct a <code>Context</code> instance with …\nAn analogous trait to <code>Wake</code> but used to construct a …\nA <code>LocalWaker</code> is analogous to a <code>Waker</code>, but it does not …\nRepresents that a value is not ready yet.\nIndicates whether a value is available or if the current …\nA <code>RawWaker</code> allows the implementor of a task executor to …\nA virtual function pointer table (vtable) that specifies …\nRepresents that a value is immediately ready.\nThe implementation of waking a task on an executor.\nA <code>Waker</code> is a handle for waking up a task by notifying its …\nExtracts the successful type of a <code>Poll&lt;T&gt;</code>.\nWake this task.\nWake this task.\nAn error returned by <code>LocalKey::try_with</code>.\nThread factory, which can be used in order to configure …\nContains the error value\nAn owned permission to join on a thread (block on its …\nA thread local storage (TLS) key which owns its contents.\nContains the success value\nA specialized <code>Result</code> type for threads.\nA scope to spawn scoped threads in.\nAn owned permission to join on a scoped thread (block on …\nA handle to a thread.\nA unique identifier for a running thread.\nRegisters a function to run for every newly thread spawned.\nReturns an estimate of the default amount of parallelism a …\nGets a handle to the thread that invokes it.\nDetermines whether the current thread is unwinding because …\nBlocks unless or until the current thread’s token is …\nBlocks unless or until the current thread’s token is …\nUses <code>park_timeout</code>.\nCreates a scope for spawning scoped threads.\nPuts the current thread to sleep for at least the …\nUses <code>sleep</code>.\nPuts the current thread to sleep until the specified …\nSpawns a new thread, returning a <code>JoinHandle</code> for it.\nCooperatively gives up a timeslice to the OS scheduler.\nA <code>Duration</code> type to represent a span of time, typically …\nA measurement of a monotonically nondecreasing clock. …\nA measurement of the system clock, useful for talking to …\nAn error returned from the <code>duration_since</code> and <code>elapsed</code> …\nAn error which can be returned when converting a …\nAn anchor in time which can be used to create new …\nReturns the positive duration which represents how far …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe largest value that can be represented by this integer …\nThe smallest value that can be represented by this integer …\nThe largest value that can be represented by this integer …\nThe smallest value that can be represented by this integer …\nThe largest value that can be represented by this integer …\nThe smallest value that can be represented by this integer …\nThe largest value that can be represented by this integer …\nThe smallest value that can be represented by this integer …\nThe largest value that can be represented by this integer …\nThe smallest value that can be represented by this integer …\nUnwrap an unsafe binder into its underlying type.\nWrap a type into an unsafe binder.\nThe largest value that can be represented by this integer …\nThe smallest value that can be represented by this integer …\nA draining iterator for <code>Vec&lt;T&gt;</code>.\nAn iterator which uses a closure to determine if an …\nAn iterator that moves out of a vector.\nStructure wrapping a mutable reference to the last item in …\nA splicing iterator for <code>Vec</code>.\nA contiguous growable array type, written as <code>Vec&lt;T&gt;</code>, short …\nSlice methods that use <code>Box</code> and <code>Vec</code> from this crate.\nMemory allocation APIs\nThe <code>Box&lt;T&gt;</code> type for heap allocation.\nCreates a vector by copying a slice <code>n</code> times.\nCopies <code>self</code> into a new <code>Vec</code>.\nCopies <code>self</code> into a new <code>Vec</code> with an allocator.\nAllows turning a <code>Box&lt;T: Sized, A&gt;</code> into a <code>Box&lt;U: ?Sized, A&gt;</code> …\nA contiguous growable array type with heap-allocated …\nCreates a <code>Vec</code> containing the arguments.\nThe <code>AllocError</code> error indicates an allocation failure that …\nAn implementation of <code>Allocator</code> can allocate, grow, shrink, …\nThe global memory allocator.\nA memory allocator that can be registered as the standard …\nLayout of a block of memory.\nThe <code>LayoutError</code> is returned when the parameters given to …\nThe default memory allocator provided by the operating …\nAllocates memory with the global allocator.\nAllocates memory as described by the given <code>layout</code>.\nAllocates zero-initialized memory with the global …\nAttempts to allocate a block of memory.\nBehaves like <code>allocate</code>, but also ensures that the returned …\nCreates a “by reference” adapter for this instance of …\nDeallocates memory with the global allocator.\nDeallocates the block of memory at the given <code>ptr</code> pointer …\nDeallocates the memory referenced by <code>ptr</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nAttempts to extend the memory block.\nBehaves like <code>grow</code>, but also ensures that the new contents …\nSignals a memory allocation error.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReallocates memory with the global allocator.\nAttempts to shrink the memory block.\nA pointer type for heap allocation.\nReturns a reference to the underlying allocator.\nReturns a raw mutable pointer to the <code>Box</code>’s contents.\nReturns a raw pointer to the <code>Box</code>’s contents.\nConverts to <code>Box&lt;[T], A&gt;</code>.\nConverts to <code>Box&lt;T, A&gt;</code>.\nReturns a new box with a <code>clone()</code> of this box’s contents.\nCopies <code>source</code>’s contents into <code>self</code> without creating a …\nCreates a <code>Box&lt;T&gt;</code>, with the <code>Default</code> value for T.\nAttempt to downcast the box to a concrete type.\nAttempt to downcast the box to a concrete type.\nAttempt to downcast the box to a concrete type.\nDowncasts the box to a concrete type.\nDowncasts the box to a concrete type.\nDowncasts the box to a concrete type.\nExecutes the given command directly.\nConvert a vector into a boxed slice.\nConverts a <code>Box&lt;str&gt;</code> into a <code>Box&lt;[u8]&gt;</code>\nConverts a type of <code>Error</code> + <code>Send</code> + <code>Sync</code> into a box of dyn …\nReturns the argument unchanged.\nConverts a <code>&amp;str</code> into a <code>Box&lt;str&gt;</code>\nConverts a <code>&amp;CStr</code> into a <code>Box&lt;CStr&gt;</code>, by copying the contents …\nConverts a <code>&amp;[T]</code> into a <code>Box&lt;[T]&gt;</code>\nConverts a type of <code>Error</code> into a box of dyn <code>Error</code>.\nConverts a <code>[T; N]</code> into a <code>Box&lt;[T]&gt;</code>\nConverts a <code>T</code> into a <code>Box&lt;T&gt;</code>\nConstructs a box from a <code>NonNull</code> pointer.\nConstructs a box from a <code>NonNull</code> pointer in the given …\nConstructs a box from a raw pointer.\nConstructs a box from a raw pointer in the given allocator.\nCalls <code>U::from(self)</code>.\nConverts a <code>Box&lt;T&gt;</code> into a <code>Box&lt;[T]&gt;</code>\nConsumes the <code>Box</code>, returning the wrapped value.\nConsumes the <code>Box</code>, returning a wrapped <code>NonNull</code> pointer.\nConsumes the <code>Box</code>, returning a wrapped <code>NonNull</code> pointer and …\nConverts a <code>Box&lt;T&gt;</code> into a <code>Pin&lt;Box&lt;T&gt;&gt;</code>. If <code>T</code> does not …\nConsumes the <code>Box</code>, returning a wrapped raw pointer.\nConsumes the <code>Box</code>, returning a wrapped raw pointer and the …\nConverts <code>self</code> into a vector without clones or allocation.\nConsumes and leaks the <code>Box</code>, returning a mutable reference, …\nAllocates memory on the heap and then places <code>x</code> into it.\nAllocates memory in the given allocator then places <code>x</code> into …\nConstructs a new box with uninitialized contents.\nConstructs a new box with uninitialized contents in the …\nConstructs a new boxed slice with uninitialized contents.\nConstructs a new boxed slice with uninitialized contents …\nConstructs a new <code>Box</code> with uninitialized contents, with the …\nConstructs a new <code>Box</code> with uninitialized contents, with the …\nConstructs a new boxed slice with uninitialized contents, …\nConstructs a new boxed slice with uninitialized contents …\nConstructs a new <code>Pin&lt;Box&lt;T&gt;&gt;</code>. If <code>T</code> does not implement <code>Unpin</code>…\nConstructs a new <code>Pin&lt;Box&lt;T, A&gt;&gt;</code>. If <code>T</code> does not implement …\nQueues the given command for further execution.\nPerforms a set of actions within a synchronous update.\nAttempts to convert a <code>Box&lt;[T]&gt;</code> into a <code>Box&lt;[T; N]&gt;</code>.\nAllocates memory on the heap then places <code>x</code> into it, …\nAllocates memory in the given allocator then places <code>x</code> into …\nConstructs a new box with uninitialized contents on the …\nConstructs a new box with uninitialized contents in the …\nConstructs a new boxed slice with uninitialized contents. …\nConstructs a new boxed slice with uninitialized contents …\nConstructs a new <code>Box</code> with uninitialized contents, with the …\nConstructs a new <code>Box</code> with uninitialized contents, with the …\nConstructs a new boxed slice with uninitialized contents, …\nConstructs a new boxed slice with uninitialized contents …\nWrites the value and converts to <code>Box&lt;T, A&gt;</code>.\nThe memory allocator returned an error\nError due to the computed capacity exceeding the collection…\nThe error type for <code>try_reserve</code> methods.\nDetails of the allocation that caused a <code>TryReserveError</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nAlways evaluates to <code>TryReserveErrorKind::CapacityOverflow</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDetails about the allocation that caused the error\nThe layout of allocation request that failed\nA draining iterator for <code>Vec&lt;T&gt;</code>.\nA DeserializeSeed helper for implementing …\nAn iterator that moves out of a vector.\nA splicing iterator for <code>Vec</code>.\nA contiguous growable array type, written as <code>Vec&lt;T&gt;</code>, short …\nReturns a reference to the underlying allocator.\nReturns a reference to the underlying allocator.\nReturns a reference to the underlying allocator.\nMoves all the elements of <code>other</code> into <code>self</code>, leaving <code>other</code> …\nReturns an unsafe mutable pointer to the vector’s …\nReturns the remaining items of this iterator as a mutable …\nExtracts a mutable slice of the entire vector.\nReturns a raw pointer to the vector’s buffer, or a …\nReturns the remaining items of this iterator as a slice.\nReturns the remaining items of this iterator as a slice.\nExtracts a slice containing the entire vector.\nReturns the total number of elements the vector can hold …\nClears the vector, removing all values.\nRemoves consecutive repeated elements in the vector …\nRemoves all but the first of consecutive elements in the …\nRemoves all but the first of consecutive elements in the …\nCreates an empty <code>Vec&lt;T&gt;</code>.\nRemoves the specified range from the vector in bulk, …\nExecutes the given command directly.\nClones and appends all elements in a slice to the <code>Vec</code>.\nCopies elements from <code>src</code> range to the end of the vector.\nReturns the argument unchanged.\nReturns the argument unchanged.\nAllocate a <code>Vec&lt;u8&gt;</code> and fill it with a UTF-8 string.\nConvert a boxed slice into a vector by transferring …\nConvert a boxed array into a vector by transferring …\nAllocate a <code>Vec&lt;T&gt;</code> and fill it by cloning <code>s</code>’s items.\nReturns the argument unchanged.\nAllocate a <code>Vec&lt;T&gt;</code> and fill it by cloning <code>s</code>’s items.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a <code>Vec&lt;T&gt;</code> directly from a pointer, a capacity, and …\nCreates a <code>Vec&lt;T, A&gt;</code> directly from a pointer, a capacity, a …\nInserts an element at position <code>index</code> within the vector, …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts the vector into <code>Box&lt;[T]&gt;</code>.\nTakes a <code>Vec&lt;[T; N]&gt;</code> and flattens it into a <code>Vec&lt;T&gt;</code>.\nCreates a consuming iterator, that is, one that moves each …\nDecomposes a <code>Vec&lt;T&gt;</code> into its raw components.\nDecomposes a <code>Vec&lt;T&gt;</code> into its raw components.\nReturns <code>true</code> if the vector contains no elements.\nKeep unyielded elements in the source <code>Vec</code>.\nConsumes and leaks the <code>Vec</code>, returning a mutable reference …\nReturns the number of elements in the vector, also …\nConstructs a new, empty <code>Vec&lt;T&gt;</code>.\nConstructs a new, empty <code>Vec&lt;T, A&gt;</code>.\nRemoves the last element from a vector and returns it, or …\nAppends an element to the back of a collection.\nAppends an element if there is sufficient spare capacity, …\nQueues the given command for further execution.\nRemoves and returns the element at position <code>index</code> within …\nReserves capacity for at least <code>additional</code> more elements to …\nReserves the minimum capacity for at least <code>additional</code> more …\nResizes the <code>Vec</code> in-place so that <code>len</code> is equal to <code>new_len</code>.\nResizes the <code>Vec</code> in-place so that <code>len</code> is equal to <code>new_len</code>.\nRetains only the elements specified by the predicate.\nRetains only the elements specified by the predicate, …\nForces the length of the vector to <code>new_len</code>.\nShrinks the capacity of the vector with a lower bound.\nShrinks the capacity of the vector as much as possible.\nReturns the remaining spare capacity of the vector as a …\nCreates a splicing iterator that replaces the specified …\nReturns vector content as a slice of <code>T</code>, along with the …\nSplits the collection into two at the given index.\nRemoves an element from the vector and returns it.\nPerforms a set of actions within a synchronous update.\nShortens the vector, keeping the first <code>len</code> elements and …\nTries to reserve capacity for at least <code>additional</code> more …\nTries to reserve the minimum capacity for at least …\nConstructs a new, empty <code>Vec&lt;T&gt;</code> with at least the specified …\nConstructs a new, empty <code>Vec&lt;T, A&gt;</code> with at least the …\nHas the effects of both <code>Acquire</code> and <code>Release</code> together: For …\nWhen coupled with a load, if the loaded value was written …\nA generic atomic wrapper type which allows an object to be …\nAtomic memory orderings\nNo ordering constraints, only atomic operations.\nWhen coupled with a store, all previous operations become …\nLike <code>Acquire</code>/<code>Release</code>/<code>AcqRel</code> (for load, store, and …\nAn atomic fence.\nIndicates that the initial allocation failed.\nThe <code>AllocErr</code> error indicates an allocation failure that …\nAn error returned from <code>Bump::try_alloc_try_with</code>.\nAn arena to bump allocate into.\nAn iterator over each chunk of allocated memory that an …\nAn iterator over raw pointers to chunks of allocated …\nIndicates that the initializer failed with the contained …\nAllocate an object in this <code>Bump</code> and return an exclusive …\nAllocate space for an object with the given <code>Layout</code>.\n<code>Clone</code> a slice into this <code>Bump</code> and return an exclusive …\n<code>Copy</code> a slice into this <code>Bump</code> and return an exclusive …\nAllocates a new slice of size <code>len</code> slice into this <code>Bump</code> and …\nAllocates a new slice of size <code>len</code> into this <code>Bump</code> and …\nAllocates a new slice of size <code>len</code> slice into this <code>Bump</code> and …\nAllocates a new slice of size <code>len</code> slice into this <code>Bump</code> and …\nAllocates a new slice of size <code>len</code> into this <code>Bump</code> and …\nAllocates a new slice of size <code>len</code> slice into this <code>Bump</code> and …\nAllocates a new slice of size <code>len</code> into this <code>Bump</code> and …\n<code>Copy</code> a string slice into this <code>Bump</code> and return an exclusive …\nPre-allocates space for a <code>Result</code> in this <code>Bump</code>, initializes …\nPre-allocate space for an object in this <code>Bump</code>, initializes …\nCalculates the number of bytes currently allocated across …\nCalculates the number of bytes requested from the Rust …\nThe allocation limit for this arena in bytes.\nA pointer type for bump allocation.\nGets the remaining capacity in the current chunk (in …\nCollection types that allocate inside a <code>Bump</code> arena.\nLike the <code>format!</code> macro, but for creating …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns an iterator over each chunk of allocated memory …\nReturns an iterator over raw pointers to chunks of …\nGet this bump arena’s minimum alignment.\nConstruct a new arena to bump allocate into.\nReset this bump allocator.\nSet the allocation limit in bytes for this arena.\nTry to allocate an object in this <code>Bump</code> and return an …\nAttempts to allocate space for an object with the given …\nLike <code>alloc_slice_clone</code> but does not panic on failure.\nLike <code>alloc_slice_copy</code>, but does not panic in case of …\nLike <code>alloc_slice_fill_clone</code> but does not panic on failure.\nSame as <code>alloc_slice_fill_copy</code> but does not panic on …\nLike <code>alloc_slice_fill_default</code> but does not panic on …\nAllocates a new slice of size <code>iter.len()</code> slice into this …\nAllocates a new slice of size <code>len</code> into this <code>Bump</code> and …\nSame as <code>alloc_str</code> but does not panic on failure.\nTries to pre-allocates space for a <code>Result</code> in this <code>Bump</code>, …\nTries to pre-allocate space for an object in this <code>Bump</code>, …\nAttempt to construct a new arena to bump allocate into.\nAttempt to construct a new arena with the specified byte …\nCreate a new <code>Bump</code> that enforces a minimum alignment and …\nCreates a <code>Vec</code> containing the arguments.\nConstruct a new arena with the specified byte capacity to …\nCreate a new <code>Bump</code> that enforces a minimum alignment.\nCreate a new <code>Bump</code> that enforces a minimum alignment and …\nAn owned pointer to a bump-allocated <code>T</code> value, that runs …\nAttempt to downcast the box to a concrete type.\nAttempt to downcast the box to a concrete type.\nReturns the argument unchanged.\nCreates a value from an iterator. This method is an …\nConstructs a box from a raw pointer.\nCalls <code>U::from(self)</code>.\nConsumes the <code>Box</code>, returning the wrapped value.\nConsumes the <code>Box</code>, returning a wrapped raw pointer.\nConsumes and leaks the <code>Box</code>, returning a mutable reference, …\nAllocates memory on the heap and then places <code>x</code> into it.\nConstructs a new <code>Pin&lt;Box&lt;T&gt;&gt;</code>. If <code>T</code> does not implement <code>Unpin</code>…\nThe allocator type\nError due to the allocator (see the documentation for the …\nError due to the computed capacity exceeding the collection…\nExtension trait for iterators, in order to allow …\nAugments <code>AllocErr</code> with a <code>CapacityOverflow</code> variant.\nA trait for types that support being constructed from an …\nA UTF-8 encoded, growable string.\nA contiguous growable array type, written <code>Vec&lt;&#39;bump, T&gt;</code> …\nMoves all the elements of <code>other</code> into <code>Self</code>, leaving <code>other</code> …\nReturns a byte slice of this <code>String</code>’s contents.\nReturns an unsafe mutable pointer to the vector’s …\nExtracts a mutable slice of the entire vector.\nConverts a <code>String</code> into a mutable string slice.\nReturns a mutable reference to the contents of this <code>String</code>.\nReturns a raw pointer to the vector’s buffer, or a …\nExtracts a slice containing the entire vector.\nExtracts a string slice containing the entire <code>String</code>.\nReturns a shared reference to the allocator backing this …\nReturns a shared reference to the allocator backing this …\nReturns the number of elements the vector can hold without …\nReturns this <code>String</code>’s capacity, in bytes.\nClears the vector, removing all values.\nTruncates this <code>String</code>, removing all contents.\nCollect all items from an iterator, into a collection …\nRemoves consecutive repeated elements in the vector …\nRemoves all but the first of consecutive elements in the …\nRemoves all but the first of consecutive elements in the …\nCreates a draining iterator that removes the specified …\nCreates a draining iterator that removes the specified …\nCreates an iterator that removes the elements in the vector\nExecutes the given command directly.\nClones and appends all elements in a slice to the <code>Vec</code>.\nCopies all elements in the slice <code>other</code> and appends them to …\nFor each slice in <code>slices</code>, copies all elements in the slice …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nSimilar to <code>FromIterator::from_iter</code>, but with a given …\nConstruct a new <code>Vec</code> from the given iterator’s items.\nConstruct a new <code>String&lt;&#39;bump&gt;</code> from an iterator of <code>char</code>s.\nCreates a <code>Vec&lt;&#39;bump, T&gt;</code> directly from the raw components …\nCreates a new <code>String</code> from a length, capacity, and pointer.\nConstruct a new <code>String&lt;&#39;bump&gt;</code> from a string slice.\nDecode a UTF-16 encoded slice <code>v</code> into a <code>String</code>, returning …\nConverts a vector of bytes to a <code>String</code>.\nConverts a slice of bytes to a string, including invalid …\nConverts a vector of bytes to a <code>String</code> without checking …\nInserts an element at position <code>index</code> within the vector, …\nInserts a character into this <code>String</code> at a byte position.\nInserts a string slice into this <code>String</code> at a byte position.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts the vector into <code>Box&lt;[T]&gt;</code>.\nConverts the vector into <code>&amp;&#39;bump [T]</code>.\nConverts the vector into <code>&amp;&#39;bump mut [T]</code>.\nConvert this <code>String&lt;&#39;bump&gt;</code> into a <code>&amp;&#39;bump str</code>. This is …\nConverts a <code>String</code> into a byte vector.\nCreates a consuming iterator, that is, one that moves each …\nReturns <code>true</code> if the vector contains no elements.\nReturns <code>true</code> if this <code>String</code> has a length of zero.\nReturns the number of elements in the vector, also …\nReturns the length of this <code>String</code>, in bytes.\nConstructs a new, empty <code>Vec&lt;&#39;bump, T&gt;</code>.\nCreates a new empty <code>String</code>.\nRemoves the last element from a vector and returns it, or …\nRemoves the last character from the string buffer and …\nAppends an element to the back of a vector.\nAppends the given <code>char</code> to the end of this <code>String</code>.\nAppends a given string slice onto the end of this <code>String</code>.\nQueues the given command for further execution.\nRemoves and returns the element at position <code>index</code> within …\nRemoves a <code>char</code> from this <code>String</code> at a byte position and …\nRemoves the specified range in the string, and replaces it …\nReserves capacity for at least <code>additional</code> more elements to …\nEnsures that this <code>String</code>’s capacity is at least …\nReserves the minimum capacity for exactly <code>additional</code> more …\nEnsures that this <code>String</code>’s capacity is <code>additional</code> bytes …\nResizes the <code>Vec</code> in-place so that <code>len</code> is equal to <code>new_len</code>.\nRetains only the elements specified by the predicate.\nRetains only the characters specified by the predicate.\nRetains only the elements specified by the predicate.\nSets the length of a vector.\nShrinks the capacity of the vector as much as possible.\nShrinks the capacity of this <code>String</code> to match its length.\nCreates a splicing iterator that replaces the specified …\nSplits the collection into two at the given index.\nSplits the string into two at the given index.\nA UTF-8 encoded, growable string.\nRemoves an element from the vector and returns it.\nPerforms a set of actions within a synchronous update.\nShortens the vector, keeping the first <code>len</code> elements and …\nShortens this <code>String</code> to the specified length.\nAttempts to reserve capacity for at least <code>additional</code> more …\nAttempts to reserve the minimum capacity for exactly …\nA contiguous growable array type with heap-allocated …\nConstructs a new, empty <code>Vec&lt;&#39;bump, T&gt;</code> with the specified …\nCreates a new empty <code>String</code> with a particular capacity.\nA draining iterator for <code>String</code>.\nA possible error value when converting a <code>String</code> from a …\nA possible error value when converting a <code>String</code> from a …\nA UTF-8 encoded, growable string.\nReturns a slice of bytes that were attempted to convert to …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the bytes that were attempted to convert to a …\nFetch a <code>Utf8Error</code> to get more details about the conversion …\nA draining iterator for <code>Vec&lt;&#39;bump, T&gt;</code>.\nAn iterator produced by calling <code>Vec::drain_filter</code>.\nAn iterator that moves out of a vector.\nA splicing iterator for <code>Vec</code>.\nA contiguous growable array type, written <code>Vec&lt;&#39;bump, T&gt;</code> …\nReturns the remaining items of this iterator as a mutable …\nReturns the remaining items of this iterator as a slice.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMemory allocation APIs\nA module for working with borrowed data.\nThe <code>Box&lt;T&gt;</code> type for heap allocation.\nThe <code>ByteStr</code> and <code>ByteString</code> types and trait implementations.\nCollection types.\nUtilities related to FFI bindings.\nUtilities for formatting and printing <code>String</code>s.\nCreates a <code>String</code> using interpolation of runtime …\nSingle-threaded reference-counting pointers. ‘Rc’ …\nUtilities for the slice primitive type.\nUtilities for the <code>str</code> primitive type.\nA UTF-8–encoded, growable string.\nThread-safe reference-counting pointers.\nTypes and Traits for working with asynchronous tasks.\nA contiguous growable array type with heap-allocated …\nCreates a <code>Vec</code> containing the arguments.\nThe <code>AllocError</code> error indicates an allocation failure that …\nAn implementation of <code>Allocator</code> can allocate, grow, shrink, …\nThe global memory allocator.\nA memory allocator that can be registered as the standard …\nLayout of a block of memory.\nThe <code>LayoutError</code> is returned when the parameters given to …\nAllocates memory with the global allocator.\nAllocates memory as described by the given <code>layout</code>.\nAllocates zero-initialized memory with the global …\nAttempts to allocate a block of memory.\nDeallocates memory with the global allocator.\nDeallocates the block of memory at the given <code>ptr</code> pointer …\nDeallocates the memory referenced by <code>ptr</code>.\nSignals a memory allocation error.\nReallocates memory with the global allocator.\nA trait for borrowing data.\nA trait for mutably borrowing data.\nBorrowed data.\nA clone-on-write smart pointer.\nOwned data.\nThe resulting type after obtaining ownership.\nA generalization of <code>Clone</code> to borrowed data.\nImmutably borrows from an owned value.\nMutably borrows from an owned value.\nCreates owned data from borrowed data, usually by cloning.\nA pointer type that uniquely owns a heap allocation of …\nThinBox.\nConstructs a <code>Box&lt;T&gt;</code> by calling the <code>exchange_malloc</code> lang …\nA wrapper for <code>&amp;[u8]</code> representing a human-readable string …\nA wrapper for <code>Vec&lt;u8&gt;</code> representing a human-readable string …\nThe memory allocator returned an error\nAn ordered map based on a B-Tree.\nAn ordered set based on a B-Tree.\nA priority queue implemented with a binary heap.\nError due to the computed capacity exceeding the collection…\nA doubly-linked list with owned nodes.\nThe error type for <code>try_reserve</code> methods.\nDetails of the allocation that caused a <code>TryReserveError</code>\nA double-ended queue implemented with a growable ring …\nA priority queue implemented with a binary heap.\nAn ordered map based on a B-Tree.\nAn ordered set based on a B-Tree.\nA doubly-linked list with owned nodes.\nA double-ended queue (deque) implemented with a growable …\nThe layout of allocation request that failed\nA priority queue implemented with a binary heap.\nA draining iterator over the elements of a <code>BinaryHeap</code>.\nA draining iterator over the elements of a <code>BinaryHeap</code>.\nAn owning iterator over the elements of a <code>BinaryHeap</code>.\nAn iterator over the elements of a <code>BinaryHeap</code>.\nStructure wrapping a mutable reference to the greatest …\nAn ordered map based on a B-Tree.\nA cursor over a <code>BTreeMap</code>.\nA cursor over a <code>BTreeMap</code> with editing operations.\nA cursor over a <code>BTreeMap</code> with editing operations, and …\nA view into a single entry in a map, which may either be …\nAn iterator produced by calling <code>extract_if</code> on BTreeMap.\nAn owning iterator over the entries of a <code>BTreeMap</code>, sorted …\nAn owning iterator over the keys of a <code>BTreeMap</code>.\nAn owning iterator over the values of a <code>BTreeMap</code>.\nAn iterator over the entries of a <code>BTreeMap</code>.\nA mutable iterator over the entries of a <code>BTreeMap</code>.\nAn iterator over the keys of a <code>BTreeMap</code>.\nAn occupied entry.\nA view into an occupied entry in a <code>BTreeMap</code>. It is part of …\nThe error returned by <code>try_insert</code> when the key already …\nAn iterator over a sub-range of entries in a <code>BTreeMap</code>.\nA mutable iterator over a sub-range of entries in a …\nError type returned by <code>CursorMut::insert_before</code> and …\nA vacant entry.\nA view into a vacant entry in a <code>BTreeMap</code>. It is part of …\nAn iterator over the values of a <code>BTreeMap</code>.\nA mutable iterator over the values of a <code>BTreeMap</code>.\nThe entry in the map that was already occupied.\nThe value which was not inserted, because the entry was …\nAn ordered set based on a B-Tree.\nA cursor over a <code>BTreeSet</code>.\nA cursor over a <code>BTreeSet</code> with editing operations.\nA cursor over a <code>BTreeSet</code> with editing operations, and …\nA lazy iterator producing elements in the difference of …\nA view into a single entry in a set, which may either be …\nAn iterator produced by calling <code>extract_if</code> on BTreeSet.\nA lazy iterator producing elements in the intersection of …\nAn owning iterator over the items of a <code>BTreeSet</code> in …\nAn iterator over the items of a <code>BTreeSet</code>.\nAn occupied entry.\nA view into an occupied entry in a <code>BTreeSet</code>. It is part of …\nAn iterator over a sub-range of items in a <code>BTreeSet</code>.\nA lazy iterator producing elements in the symmetric …\nA lazy iterator producing elements in the union of <code>BTreeSet</code>…\nError type returned by <code>CursorMut::insert_before</code> and …\nA vacant entry.\nA view into a vacant entry in a <code>BTreeSet</code>. It is part of …\nA cursor over a <code>LinkedList</code>.\nA cursor over a <code>LinkedList</code> with editing operations.\nAn iterator produced by calling <code>extract_if</code> on LinkedList.\nAn owning iterator over the elements of a <code>LinkedList</code>.\nAn iterator over the elements of a <code>LinkedList</code>.\nA mutable iterator over the elements of a <code>LinkedList</code>.\nA doubly-linked list with owned nodes.\nA draining iterator over the elements of a <code>VecDeque</code>.\nAn owning iterator over the elements of a <code>VecDeque</code>.\nAn iterator over the elements of a <code>VecDeque</code>.\nA mutable iterator over the elements of a <code>VecDeque</code>.\nA double-ended queue implemented with a growable ring …\nA type representing an owned, C-compatible, nul-terminated …\nAn error indicating that a nul byte was not in the …\nAn error indicating invalid UTF-8 when converting a <code>CString</code>…\nAn error indicating that an interior nul byte was found.\n<code>CString</code> and its related types.\nA type representing an owned, C-compatible, nul-terminated …\nAn error indicating that a nul byte was not in the …\nAn error indicating invalid UTF-8 when converting a <code>CString</code>…\nAn error indicating that an interior nul byte was found.\nPossible alignments returned by <code>Formatter::align</code>\nThis structure represents a safely precompiled version of …\n<code>b</code> formatting.\nIndication that contents should be center-aligned.\n<code>?</code> formatting.\nDerive macro generating an impl of the trait <code>Debug</code>.\nSpecifies whether the <code>Debug</code> trait should use …\nA struct to help with <code>fmt::Debug</code> implementations.\nA struct to help with <code>fmt::Debug</code> implementations.\nA struct to help with <code>fmt::Debug</code> implementations.\nA struct to help with <code>fmt::Debug</code> implementations.\nA struct to help with <code>fmt::Debug</code> implementations.\nFormat trait for an empty format, <code>{}</code>.\nContains the error value\nThe error type which is returned from formatting a message …\nConfiguration for formatting.\nOptions for formatting.\nImplements <code>fmt::Debug</code> and <code>fmt::Display</code> using a function.\nIndication that contents should be left-aligned.\nUse lower-case hexadecimal integers for the <code>Debug</code> trait …\n<code>e</code> formatting.\n<code>x</code> formatting.\nRepresents the <code>-</code> flag.\n<code>o</code> formatting.\nContains the success value\nRepresents the <code>+</code> flag.\n<code>p</code> formatting.\nThe type returned by formatter methods.\nIndication that contents should be right-aligned.\nThe signedness of a <code>Formatter</code> (or of a <code>FormattingOptions</code>).\nUse upper-case hexadecimal integers for the <code>Debug</code> trait …\n<code>E</code> formatting.\n<code>X</code> formatting.\nA trait for writing or formatting into Unicode-accepting …\nFormats the value using the given formatter.\nFormats the value using the given formatter.\nFormats the value using the given formatter.\nFormats the value using the given formatter.\nFormats the value using the given formatter.\nFormats the value using the given formatter.\nFormats the value using the given formatter.\nFormats the value using the given formatter.\nFormats the value using the given formatter.\nTakes an <code>Arguments</code> struct and returns the resulting …\nCreates a type whose <code>fmt::Debug</code> and <code>fmt::Display</code> impls are …\nTakes an output stream and an <code>Arguments</code> struct that can be …\nWrites a string slice into this writer, returning whether …\nA single-threaded reference-counting pointer. ‘Rc’ …\nA uniquely owned <code>Rc</code>.\n<code>Weak</code> is a version of <code>Rc</code> that holds a non-owning reference …\nA windowed iterator over a slice in overlapping chunks (<code>N</code> …\nAn iterator over slice in (non-overlapping) chunks …\nAn iterator over slice in (non-overlapping) mutable chunks …\nAn iterator over a slice in (non-overlapping) chunks (…\nAn iterator over a slice in (non-overlapping) chunks (…\nAn iterator over a slice in (non-overlapping) mutable …\nAn iterator over a slice in (non-overlapping) mutable …\nHelper trait for <code>[T]::concat</code>.\nAn iterator over the escaped version of a byte slice.\nThe error type returned by <code>get_disjoint_mut</code>.\nAn index provided was out-of-bounds for the slice.\nImmutable slice iterator\nMutable slice iterator.\nHelper trait for <code>[T]::join</code>\nThe resulting type after concatenation\nThe resulting type after concatenation\nThe output type returned by methods.\nTwo indices provided were overlapping.\nAn iterator over a slice in (non-overlapping) chunks (…\nAn iterator over a slice in (non-overlapping) chunks (…\nAn iterator over a slice in (non-overlapping) mutable …\nAn iterator over a slice in (non-overlapping) mutable …\nAn iterator over subslices separated by elements that …\nAn iterator over the subslices of the vector which are …\nAn iterator over subslices separated by elements that …\nAn iterator over subslices separated by elements that …\nA helper trait used for indexing operations.\nAn iterator over subslices separated by elements that …\nAn iterator over subslices separated by elements that …\nAn iterator over the mutable subslices of the vector which …\nAn iterator over the mutable subslices of the vector which …\nAn iterator over subslices separated by elements that …\nAn iterator over subslices separated by elements that …\nAn iterator over overlapping subslices of length <code>size</code>.\nImplementation of <code>[T]::concat</code>\nConverts a reference to T into a slice of length 1 …\nForms a mutable slice from a pointer range.\nForms a slice from a pointer range.\nForms a slice from a pointer and a length.\nPerforms the same functionality as <code>from_raw_parts</code>, except …\nConverts a reference to T into a slice of length 1 …\nReturns a shared reference to the output at this location, …\nReturns a mutable reference to the output at this …\nReturns a pointer to the output at this location, without …\nReturns a mutable pointer to the output at this location, …\nReturns a shared reference to the output at this location, …\nReturns a mutable reference to the output at this …\nImplementation of <code>[T]::join</code>\nPerforms bounds checking of a range.\nPerforms bounds checking of a range without panicking.\nAn iterator over the bytes of a string slice.\nAn iterator over the <code>char</code>s of a string slice, and their …\nAn iterator over the <code>char</code>s of a string slice.\nAn iterator of <code>u16</code> over the string encoded as UTF-16.\nThe associated error which can be returned from parsing.\nThe return type of <code>str::escape_debug</code>.\nThe return type of <code>str::escape_default</code>.\nThe return type of <code>str::escape_unicode</code>.\nParse a value from a string\nAn iterator over the lines of a string, as string slices.\nCreated with the method <code>lines_any</code>.\nCreated with the method <code>match_indices</code>.\nCreated with the method <code>matches</code>.\nAn error returned when parsing a <code>bool</code> using <code>from_str</code> fails\nCreated with the method <code>rmatch_indices</code>.\nCreated with the method <code>rmatches</code>.\nCreated with the method <code>rsplit</code>.\nCreated with the method <code>rsplitn</code>.\nCreated with the method <code>rsplit_terminator</code>.\nCreated with the method <code>split</code>.\nAn iterator over the non-ASCII-whitespace substrings of a …\nAn iterator over the substrings of a string, terminated by …\nCreated with the method <code>splitn</code>.\nCreated with the method <code>split_terminator</code>.\nAn iterator over the non-whitespace substrings of a string,\nAn item returned by the <code>Utf8Chunks</code> iterator.\nAn iterator used to decode a slice of mostly UTF-8 bytes …\nErrors which can occur when attempting to interpret a …\nConverts a boxed slice of bytes to a boxed string slice …\nCreates a <code>&amp;str</code> from a pointer and a length.\nCreates a <code>&amp;mut str</code> from a pointer and a length.\nParses a string <code>s</code> to return a value of this type.\nConverts a slice of bytes to a string slice.\nConverts a mutable slice of bytes to a mutable string …\nConverts a slice of bytes to a string slice without …\nConverts a slice of bytes to a string slice without …\nThe string Pattern API.\nAssociated type for <code>&lt;&amp;[char; N] as Pattern&gt;::Searcher&lt;&#39;a&gt;</code>.\nAssociated type for <code>&lt;[char; N] as Pattern&gt;::Searcher&lt;&#39;a&gt;</code>.\nType returned by char types.\nAssociated type for <code>&lt;F as Pattern&gt;::Searcher&lt;&#39;a&gt;</code>.\nAssociated type for <code>&lt;char as Pattern&gt;::Searcher&lt;&#39;a&gt;</code>.\nAssociated type for <code>&lt;&amp;[char] as Pattern&gt;::Searcher&lt;&#39;a&gt;</code>.\nExpresses that every byte of the haystack has been …\nA marker trait to express that a <code>ReverseSearcher</code> can be …\nExpresses that a match of the pattern has been found at …\nA string pattern.\nExpresses that <code>haystack[a..b]</code> has been rejected as a …\nA reverse searcher for a string pattern.\nResult of calling <code>Searcher::next()</code> or …\nA searcher for a string pattern.\nAssociated searcher for this pattern\nAssociated type for <code>&lt;&amp;str as Pattern&gt;::Searcher&lt;&#39;a&gt;</code>.\nType returned by String and str types.\nResult of calling <code>Pattern::as_utf8_pattern()</code>. Can be used …\nGetter for the underlying string to be searched in\nConstructs the associated searcher from <code>self</code> and the …\nPerforms the next search step starting from the front.\nPerforms the next search step starting from the back.\nA draining iterator for <code>String</code>.\nA possible error value when converting a <code>String</code> from a …\nA possible error value when converting a <code>String</code> from a …\nAn iterator over the <code>char</code>s of a string.\nA type alias for <code>Infallible</code>.\nA UTF-8–encoded, growable string.\nA trait for converting a value to a <code>String</code>.\nConverts the given value to a <code>String</code>.\nA thread-safe reference-counting pointer. ‘Arc’ stands …\nA uniquely owned <code>Arc</code>.\n<code>Weak</code> is a version of <code>Arc</code> that holds a non-owning reference …\nAn analogous trait to <code>Wake</code> but used to construct a …\nThe implementation of waking a task on an executor.\nWake this task.\nWake this task.\nA draining iterator for <code>Vec&lt;T&gt;</code>.\nAn iterator which uses a closure to determine if an …\nAn iterator that moves out of a vector.\nStructure wrapping a mutable reference to the last item in …\nA splicing iterator for <code>Vec</code>.\nA contiguous growable array type, written as <code>Vec&lt;T&gt;</code>, short …\nFor this type of cast the alignments must be exactly the …\nMarker trait for “plain old data” types that are valid …\n<code>Self</code> <em>must</em> have the same layout as the specified <code>Bits</code> …\nAs <code>Box&lt;[u8]&gt;</code>, but remembers the original alignment.\nA marker trait that allows types that have some invalid …\nA trait indicating that:\nThe primitive integer type with an identical …\nThe upper <em>inclusive</em> bound for valid instances of this type.\nThe lower <em>inclusive</em> bound for valid instances of this type.\nMarker trait for “plain old data” types with no uninit …\nIf the element size of a slice changes, then the output …\nMarker trait for “plain old data”.\nThe things that can go wrong when casting between <code>Pod</code> data …\nTrait for types which are Pod when wrapped in Option.\nWhen casting an individual <code>T</code>, <code>&amp;T</code>, or <code>&amp;mut T</code> value the …\nYou tried to cast a reference into a reference to a type …\nA trait which indicates that a type is a …\nAn extension trait for <code>TransparentWrapper</code> and alloc types.\nTrait for types that can be safely created with <code>zeroed</code>.\nTrait for types which are Zeroable when wrapped in Option.\nStuff to boost things in the <code>alloc</code> crate.\nRe-interprets <code>Box&lt;T&gt;</code> as <code>BoxBytes</code>.\nRe-interprets <code>&amp;T</code> as <code>&amp;[u8]</code>.\nRe-interprets <code>&amp;mut T</code> as <code>&amp;mut [u8]</code>.\nCast <code>A</code> into <code>B</code>\nAs <code>try_cast_arc</code>, but unwraps for you.\nAs <code>try_cast_box</code>, but unwraps for you.\nCast <code>&amp;mut A</code> into <code>&amp;mut B</code>.\nAs <code>try_cast_rc</code>, but unwraps for you.\nCast <code>&amp;A</code> into <code>&amp;B</code>.\nCast <code>&amp;[A]</code> into <code>&amp;[B]</code>.\nAs <code>try_cast_slice_arc</code>, but unwraps for you.\nAs <code>try_cast_slice_box</code>, but unwraps for you.\nCast <code>&amp;mut [A]</code> into <code>&amp;mut [B]</code>.\nAs <code>try_cast_slice_rc</code>, but unwraps for you.\nAs <code>try_cast_vec</code>, but unwraps for you.\nChecked versions of the casting functions exposed in crate …\nFill all bytes of <code>slice</code> with zeroes (see <code>Zeroable</code>).\nReturns the argument unchanged.\nReturns the argument unchanged.\nRe-interprets <code>BoxBytes</code> as <code>Box&lt;T&gt;</code>.\nRe-interprets <code>&amp;[u8]</code> as <code>&amp;T</code>.\nRe-interprets <code>&amp;mut [u8]</code> as <code>&amp;mut T</code>.\nIf <code>value</code> is within the range for valid instances of this …\nConstructs a <code>BoxBytes</code> from its raw parts.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPerform the conversion from <code>C</code> into the underlying integral …\nDeconstructs a <code>BoxBytes</code> into its raw parts.\nIf this function returns true, then it must be valid to …\nReturns the original layout.\nCast <code>A</code> into <code>B</code> if infalliable, or fail to compile.\nConvert a <code>&amp;mut A</code> into <code>&amp;mut B</code> if infalliable, or fail to …\nConvert <code>&amp;A</code> into <code>&amp;B</code> if infalliable, or fail to compile.\nConvert <code>&amp;[A]</code> into <code>&amp;[B]</code> (possibly with a change in length) …\nConvert <code>&amp;mut [A]</code> into <code>&amp;mut [B]</code> (possibly with a change in …\nFind the offset in bytes of the given <code>$field</code> of <code>$Type</code>. …\nConvert the wrapper type into the inner type.\nConvert an <code>Arc</code> to the wrapper type into an <code>Arc</code> to the …\nConvert a box to the wrapper type into a box to the inner …\nConvert a mutable reference to the wrapper type into a …\nConvert an <code>Rc</code> to the wrapper type into an <code>Rc</code> to the inner …\nConvert a reference to the wrapper type into a reference …\nConvert a slice to the wrapped type into a slice to the …\nConvert a mutable slice to the wrapped type into a mutable …\nConvert a vec of the wrapper type into a vec of the inner …\nAs <code>align_to</code>, but safe because of the <code>Pod</code> bound.\nAs <code>align_to_mut</code>, but safe because of the <code>Pod</code> bound.\nThis “collects” a slice of pod data into a vec of a …\nReads the slice into a <code>T</code> value.\nTry to cast <code>A</code> into <code>B</code>.\nAttempts to cast the content type of a <code>Arc</code>.\nAttempts to cast the content type of a <code>Box</code>.\nTry to convert a <code>&amp;mut A</code> into <code>&amp;mut B</code>.\nAttempts to cast the content type of a <code>Rc</code>.\nTry to convert a <code>&amp;A</code> into <code>&amp;B</code>.\nTry to convert <code>&amp;[A]</code> into <code>&amp;[B]</code> (possibly with a change in …\nAttempts to cast the content type of a <code>Arc&lt;[T]&gt;</code>.\nAttempts to cast the content type of a <code>Box&lt;[T]&gt;</code>.\nTry to convert <code>&amp;mut [A]</code> into <code>&amp;mut [B]</code> (possibly with a …\nAttempts to cast the content type of a <code>Rc&lt;[T]&gt;</code>.\nAttempts to cast the content type of a <code>Vec</code>.\nRe-interprets <code>BoxBytes</code> as <code>Box&lt;T&gt;</code>.\nRe-interprets <code>&amp;[u8]</code> as <code>&amp;T</code>.\nRe-interprets <code>&amp;mut [u8]</code> as <code>&amp;mut T</code>.\nReads from the bytes as if they were a <code>T</code>.\nAllocates a <code>Box&lt;T&gt;</code> with all of the contents being zeroed …\nAllocates a <code>Box&lt;[T]&gt;</code> with all contents being zeroed out.\nAllocates a <code>Vec&lt;T&gt;</code> of length and capacity exactly equal to …\nConvert the inner type into the wrapper type.\nConvert an <code>Arc</code> to the inner type into an <code>Arc</code> to the …\nConvert a box to the inner type into a box to the wrapper …\nConvert a mutable reference to the inner type into a …\nConvert an <code>Rc</code> to the inner type into an <code>Rc</code> to the wrapper …\nConvert a reference to the inner type into a reference to …\nConvert a slice to the inner type into a slice to the …\nConvert a mutable slice to the inner type into a mutable …\nConvert a vec of the inner type into a vec of the wrapper …\nFill all bytes of <code>target</code> with zeroes (see <code>Zeroable</code>).\nCalls <code>zeroed</code>.\nAllocates a <code>Arc&lt;T&gt;</code> with all contents being zeroed out.\nAllocates a <code>Arc&lt;[T]&gt;</code> with all contents being zeroed out.\nAs <code>try_zeroed_box</code>, but unwraps for you.\nAllocates a <code>Rc&lt;T&gt;</code> with all contents being zeroed out.\nAllocates a <code>Rc&lt;[T]&gt;</code> with all contents being zeroed out.\nAs <code>try_zeroed_slice_box</code>, but unwraps for you.\nAs <code>try_zeroed_vec</code> but unwraps for you\nMemory allocation APIs\nUtilities for dynamic typing or type reflection.\nSIMD and vendor intrinsics module.\nUtilities for the array primitive type.\nOperations on ASCII strings and characters.\nAsserts that a boolean expression is <code>true</code> at runtime.\nAsserts that two expressions are equal to each other …\nUnstable module containing the unstable <code>assert_matches</code> …\nAsserts that two expressions are not equal to each other …\nChecks that the preconditions of an unsafe function are …\nComposable asynchronous iteration.\nUnstable module containing the unstable <code>autodiff</code> macro.\nUtilities for working with borrowed data.\nThe <code>ByteStr</code> type and trait implementations.\nShareable mutable containers.\nEvaluates boolean combinations of configuration flags at …\nSelects code at compile-time based on <code>cfg</code> predicates.\nUtilities for the <code>char</code> primitive type.\nThe <code>Clone</code> trait for types that cannot be ‘implicitly …\nUtilities for comparing and ordering values.\nExpands to the column number at which it was invoked.\nCauses compilation to fail with the given error message …\nConcatenates literals into a static string slice.\nConcatenates literals into a byte slice.\nSame as <code>format_args</code>, but can be used in some const …\nUnstable module containing the unstable contracts lang …\nTraits for conversions between types.\nAsserts that a boolean expression is <code>true</code> at runtime.\nAsserts that two expressions are equal to each other.\nAsserts that two expressions are not equal to each other.\nThe <code>Default</code> trait for types with a default value.\nInspects an environment variable at compile time.\nInterfaces for working with Errors.\nConstants for the <code>f128</code> quadruple-precision floating point …\nConstants for the <code>f16</code> half-precision floating point type.\nConstants for the <code>f32</code> single-precision floating point type.\nConstants for the <code>f64</code> double-precision floating point type.\nPlatform-specific types, as defined by C.\nExpands to the file name in which it was invoked.\nUtilities for formatting and printing strings.\nConstructs parameters for the other string-formatting …\nSame as <code>format_args</code>, but adds a newline in the end.\nAsynchronous basic functionality.\nGeneric hashing support.\nHints to compiler that affects how code should be emitted …\nRedundant constants module for the <code>i128</code> primitive type.\nRedundant constants module for the <code>i16</code> primitive type.\nRedundant constants module for the <code>i32</code> primitive type.\nRedundant constants module for the <code>i64</code> primitive type.\nRedundant constants module for the <code>i8</code> primitive type.\nParses a file as an expression or an item according to the …\nIncludes a file as a reference to a byte array.\nIncludes a UTF-8 encoded file as a string.\nCompiler intrinsics.\nTraits, helpers, and type definitions for core I/O …\nRedundant constants module for the <code>isize</code> primitive type.\nComposable external iteration.\nExpands to the line number on which it was invoked.\nPrints passed tokens into the standard output.\nPrimitive traits and types representing basic properties …\nReturns whether the given expression matches the provided …\nBasic functions for dealing with memory.\nExpands to a string that represents the current module …\nNetworking primitives for IP communication.\nNumeric traits and functions for the built-in numeric …\nOverloadable operators.\nOptional values.\nOptionally inspects an environment variable at compile …\nPanic support in the standard library.\nPanics the current thread.\nPanic support for core\nHelper module for exporting the <code>pattern_type</code> macro\nCreates a pattern type.\nTypes that pin data to a location in memory.\nThe core prelude\nThis module reexports the primitive types to allow usage …\nManually manage memory through raw pointers.\nRandom value generation.\nExperimental replacement range types\nError handling with the <code>Result</code> type.\nPortable SIMD module.\nSlice management and manipulation.\nString manipulation.\nStringifies its arguments.\nSynchronization primitives\nTypes and Traits for working with asynchronous tasks.\nTemporal quantification.\nIndicates unfinished code.\nEnables or disables tracing functionality used for …\nUnwraps a result or propagates its error.\nRedundant constants module for the <code>u128</code> primitive type.\nRedundant constants module for the <code>u16</code> primitive type.\nRedundant constants module for the <code>u32</code> primitive type.\nRedundant constants module for the <code>u64</code> primitive type.\nRedundant constants module for the <code>u8</code> primitive type.\nProvides the <code>assert_unsafe_precondition</code> macro as well as …\nIndicates unimplemented code by panicking with a message …\nIndicates unreachable code.\nOperators used to turn types into unsafe binders and back.\nRedundant constants module for the <code>usize</code> primitive type.\nWrites formatted data into a buffer.\nWrites formatted data into a buffer, with a newline …\nThe <code>AllocError</code> error indicates an allocation failure that …\nAn implementation of <code>Allocator</code> can allocate, grow, shrink, …\nA memory allocator that can be registered as the standard …\nLayout of a block of memory.\nThe <code>LayoutError</code> is returned when the parameters given to …\nAllocates memory as described by the given <code>layout</code>.\nAttempts to allocate a block of memory.\nDeallocates the block of memory at the given <code>ptr</code> pointer …\nDeallocates the memory referenced by <code>ptr</code>.\nA trait to emulate dynamic typing.\nA <code>TypeId</code> represents a globally unique identifier for a …\nGets the <code>TypeId</code> of <code>self</code>.\nReturns the name of a type as a string slice.\nReturns the type name of the pointed-to value as a string …\nInline assembly.\nCompiles to a target-specific software breakpoint …\nModule-level inline assembly.\nInline assembly used in combination with <code>#[naked]</code> …\nPlatform-specific intrinsics for the <code>x86_64</code> platform.\nResult of the <code>cpuid</code> instruction.\nEqual (ordered, non-signaling)\nEqual (ordered, signaling)\nEqual (unordered, non-signaling)\nEqual (unordered, signaling)\nFalse (ordered, non-signaling)\nFalse (ordered, signaling)\nGreater-than-or-equal (ordered, non-signaling)\nGreater-than-or-equal (ordered, signaling)\nGreater-than (ordered, non-signaling)\nGreater-than (ordered, signaling)\nLess-than-or-equal (ordered, non-signaling)\nLess-than-or-equal (ordered, signaling)\nLess-than (ordered, non-signaling)\nLess-than (ordered, signaling)\nNot-equal (ordered, non-signaling)\nNot-equal (ordered, signaling)\nNot-equal (unordered, non-signaling)\nNot-equal (unordered, signaling)\nNot-greater-than-or-equal (unordered, non-signaling)\nNot-greater-than-or-equal (unordered, signaling)\nNot-greater-than (unordered, non-signaling)\nNot-greater-than (unordered, signaling)\nNot-less-than-or-equal (unordered, non-signaling)\nNot-less-than-or-equal (unordered, signaling)\nNot-less-than (unordered, non-signaling)\nNot-less-than (unordered, signaling)\nOrdered (non-signaling)\nOrdered (signaling)\nTrue (unordered, non-signaling)\nTrue (unordered, signaling)\nUnordered (non-signaling)\nUnordered (signaling)\nThe <code>_MM_CMPINT_ENUM</code> type used to specify comparison …\nEqual\nFalse\nLess-than-or-equal\nLess-than\nNot-equal\nNot less-than-or-equal\nNot less-than\nTrue\nSee <code>_mm_setcsr</code>\nSee <code>_mm_setcsr</code>\nSee <code>_mm_setcsr</code>\nSee <code>_mm_setcsr</code>\nSee <code>_MM_GET_EXCEPTION_STATE</code>\nSee <code>_mm_setcsr</code>\nSee <code>_mm_setcsr</code>\nSee <code>_MM_GET_FLUSH_ZERO_MODE</code>\nSee <code>_mm_setcsr</code>\nSee <code>_mm_setcsr</code>\nround up and do not suppress exceptions\nuse MXCSR.RC; see <code>vendor::_MM_SET_ROUNDING_MODE</code>\nround down and do not suppress exceptions\nuse MXCSR.RC and suppress exceptions; see …\nround to nearest and do not suppress exceptions\nsuppress exceptions\ndo not suppress exceptions\nuse MXCSR.RC and do not suppress exceptions; see …\nround to nearest\nround down\nround up\ntruncate\ntruncate and do not suppress exceptions\nSee <code>_mm_setcsr</code>\nSee <code>_mm_setcsr</code>\nSee <code>_mm_setcsr</code>\nSee <code>_mm_setcsr</code>\nSee <code>_mm_prefetch</code>.\nSee <code>_mm_prefetch</code>.\nSee <code>_mm_prefetch</code>.\nSee <code>_mm_prefetch</code>.\nSee <code>_mm_prefetch</code>.\nSee <code>_mm_prefetch</code>.\nThe <code>MM_MANTISSA_NORM_ENUM</code> type used to specify mantissa …\nThe <code>MM_MANTISSA_SIGN_ENUM</code> type used to specify mantissa …\ninterval [1, 2)\ninterval [0.5, 1)\ninterval [0.5, 2)\ninterval [0.75, 1.5)\nDEST = NaN if sign(SRC) = 1\nsign = sign(SRC)\nsign = 0\nSee <code>_mm_setcsr</code>\nSee <code>_mm_setcsr</code>\nSee <code>_mm_setcsr</code>\nSee <code>_mm_setcsr</code>\nSee <code>_MM_GET_EXCEPTION_MASK</code>\nSee <code>_mm_setcsr</code>\nSee <code>_mm_setcsr</code>\nThe <code>MM_PERM_ENUM</code> type used to specify shuffle operations …\nSee <code>_mm_setcsr</code>\nSee <code>_MM_GET_ROUNDING_MODE</code>\nSee <code>_mm_setcsr</code>\nSee <code>_mm_setcsr</code>\nSee <code>_mm_setcsr</code>\nSee <code>_mm_setcsr</code>\nSee <code>_mm_setcsr</code>\nSee <code>_mm_setcsr</code>\nSee <code>_mm_setcsr</code>\nA utility function for creating masks to use with Intel …\nTranspose the 4x4 matrix formed by 4 rows of __m128 in …\n<strong>Mask only</strong>: return the bit mask\nFor each character in <code>a</code>, find if it is in <code>b</code> <em>(Default)</em>\nThe strings defined by <code>a</code> and <code>b</code> are equal\nSearch for the defined substring in the target\nFor each character in <code>a</code>, determine if …\n<strong>Index only</strong>: return the least significant bit <em>(Default)</em>\nNegates results only before the end of the string\nDo not negate results before the end of the string\n<strong>Index only</strong>: return the most significant bit\nNegates results\nDo not negate results <em>(Default)</em>\nString contains signed 8-bit characters\nString contains unsigned 16-bit characters\nString contains unsigned 8-bit characters <em>(Default)</em>\n<strong>Mask only</strong>: return the byte mask\nString contains unsigned 16-bit characters\nTransaction abort due to the transaction using too much …\nTransaction abort due to a memory conflict with another …\nTransaction abort due to a debug trap.\nTransaction explicitly aborted with xabort. The parameter …\nTransaction abort in a inner nested transaction.\nTransaction retry is possible.\nTransaction successfully started.\n<code>XFEATURE_ENABLED_MASK</code> for <code>XCR</code>\nSee <code>__cpuid_count</code>.\nReturns the result of the <code>cpuid</code> instruction for a given …\nReturns the highest-supported <code>leaf</code> (<code>EAX</code>) and sub-leaf (<code>ECX</code>…\n128-bit wide set of four <code>f32</code> types, x86-specific\n128-bit wide set of eight <code>u16</code> types, x86-specific\n128-bit wide set of two <code>f64</code> types, x86-specific\n128-bit wide set of 8 <code>f16</code> types, x86-specific\n128-bit wide integer vector type, x86-specific\n256-bit wide set of eight <code>f32</code> types, x86-specific\n256-bit wide set of 16 <code>u16</code> types, x86-specific\n256-bit wide set of four <code>f64</code> types, x86-specific\n256-bit wide set of 16 <code>f16</code> types, x86-specific\n256-bit wide integer vector type, x86-specific\n512-bit wide set of sixteen <code>f32</code> types, x86-specific\n512-bit wide set of 32 <code>u16</code> types, x86-specific\n512-bit wide set of eight <code>f64</code> types, x86-specific\n512-bit wide set of 32 <code>f16</code> types, x86-specific\n512-bit wide integer vector type, x86-specific\nThe <code>__mmask16</code> type used in AVX-512 intrinsics, a 16-bit …\nThe <code>__mmask32</code> type used in AVX-512 intrinsics, a 32-bit …\nThe <code>__mmask64</code> type used in AVX-512 intrinsics, a 64-bit …\nThe <code>__mmask8</code> type used in AVX-512 intrinsics, a 8-bit …\nReads the current value of the processor’s time-stamp …\nAdds unsigned 32-bit integers <code>a</code> and <code>b</code> with unsigned 8-bit …\nAdds unsigned 64-bit integers <code>a</code> and <code>b</code> with unsigned 8-bit …\nAdds unsigned 32-bit integers <code>a</code> and <code>b</code> with unsigned 8-bit …\nAdds unsigned 64-bit integers <code>a</code> and <code>b</code> with unsigned 8-bit …\nBitwise logical <code>AND</code> of inverted <code>a</code> with <code>b</code>.\nBitwise logical <code>AND</code> of inverted <code>a</code> with <code>b</code>.\nExtracts bits of <code>a</code> specified by <code>control</code> into the least …\nExtracts bits of <code>a</code> specified by <code>control</code> into the least …\nExtracts bits in range [<code>start</code>, <code>start</code> + <code>length</code>) from <code>a</code> into …\nExtracts bits in range [<code>start</code>, <code>start</code> + <code>length</code>) from <code>a</code> into …\nExtracts bits of <code>a</code> specified by <code>control</code> into the least …\nExtracts bits of <code>a</code> specified by <code>control</code> into the least …\nReturns the bit in position <code>b</code> of the memory addressed by <code>p</code>.\nReturns the bit in position <code>b</code> of the memory addressed by <code>p</code>.\nReturns the bit in position <code>b</code> of the memory addressed by <code>p</code>…\nReturns the bit in position <code>b</code> of the memory addressed by <code>p</code>…\nReturns the bit in position <code>b</code> of the memory addressed by <code>p</code>…\nReturns the bit in position <code>b</code> of the memory addressed by <code>p</code>…\nReturns the bit in position <code>b</code> of the memory addressed by <code>p</code>…\nReturns the bit in position <code>b</code> of the memory addressed by <code>p</code>…\nClears all bits below the least significant zero bit of <code>x</code>.\nClears all bits below the least significant zero bit of <code>x</code>.\nSets all bits of <code>x</code> to 1 except for the least significant …\nSets all bits of <code>x</code> to 1 except for the least significant …\nSets the least significant zero bit of <code>x</code> and clears all …\nSets the least significant zero bit of <code>x</code> and clears all …\nSets the least significant zero bit of <code>x</code> and clears all …\nSets the least significant zero bit of <code>x</code> and clears all …\nSets the least significant zero bit of <code>x</code>.\nSets the least significant zero bit of <code>x</code>.\nSets all bits of <code>x</code> below the least significant one.\nSets all bits of <code>x</code> below the least significant one.\nExtracts lowest set isolated bit.\nExtracts lowest set isolated bit.\nClears least significant bit and sets all other bits.\nClears least significant bit and sets all other bits.\nGets mask up to lowest set bit.\nGets mask up to lowest set bit.\nResets the lowest set bit of <code>x</code>.\nResets the lowest set bit of <code>x</code>.\nReturns an integer with the reversed byte order of x\nReturns an integer with the reversed byte order of x\nZeroes higher bits of <code>a</code> &gt;= <code>index</code>.\nZeroes higher bits of <code>a</code> &gt;= <code>index</code>.\nConvert 16-bit mask a into an integer value, and store the …\nConvert 32-bit mask a into an integer value, and store the …\nConvert 64-bit mask a into an integer value, and store the …\nConvert 8-bit mask a to a 32-bit integer value and store …\nConvert 32-bit integer value a to an 16-bit mask and store …\nConvert integer value a into an 32-bit mask, and store the …\nConvert 32-bit integer value a to an 8-bit mask and store …\nConvert integer value a into an 64-bit mask, and store the …\nRestores the <code>XMM</code>, <code>MMX</code>, <code>MXCSR</code>, and <code>x87</code> FPU registers from …\nRestores the <code>XMM</code>, <code>MMX</code>, <code>MXCSR</code>, and <code>x87</code> FPU registers from …\nSaves the <code>x87</code> FPU, <code>MMX</code> technology, <code>XMM</code>, and <code>MXCSR</code> …\nSaves the <code>x87</code> FPU, <code>MMX</code> technology, <code>XMM</code>, and <code>MXCSR</code> …\nAdd 16-bit masks a and b, and store the result in dst.\nAdd 32-bit masks in a and b, and store the result in k.\nAdd 64-bit masks in a and b, and store the result in k.\nAdd 8-bit masks a and b, and store the result in dst.\nCompute the bitwise AND of 16-bit masks a and b, and store …\nCompute the bitwise AND of 32-bit masks a and b, and store …\nCompute the bitwise AND of 64-bit masks a and b, and store …\nBitwise AND of 8-bit masks a and b, and store the result …\nCompute the bitwise NOT of 16-bit masks a and then AND …\nCompute the bitwise NOT of 32-bit masks a and then AND …\nCompute the bitwise NOT of 64-bit masks a and then AND …\nBitwise AND NOT of 8-bit masks a and b, and store the …\nCompute the bitwise NOT of 16-bit mask a, and store the …\nCompute the bitwise NOT of 32-bit mask a, and store the …\nCompute the bitwise NOT of 64-bit mask a, and store the …\nBitwise NOT of 8-bit mask a, and store the result in dst.\nCompute the bitwise OR of 16-bit masks a and b, and store …\nCompute the bitwise OR of 32-bit masks a and b, and store …\nCompute the bitwise OR of 64-bit masks a and b, and store …\nBitwise OR of 8-bit masks a and b, and store the result in …\nCompute the bitwise OR of 16-bit masks a and b. If the …\nCompute the bitwise OR of 32-bit masks a and b. If the …\nCompute the bitwise OR of 64-bit masks a and b. If the …\nCompute the bitwise OR of 8-bit masks a and b. If the …\nCompute the bitwise OR of 16-bit masks a and b. If the …\nCompute the bitwise OR of 32-bit masks a and b. If the …\nCompute the bitwise OR of 64-bit masks a and b. If the …\nCompute the bitwise OR of 8-bit masks a and b. If the …\nCompute the bitwise OR of 16-bit masks a and b. If the …\nCompute the bitwise OR of 32-bit masks a and b. If the …\nCompute the bitwise OR of 64-bit masks a and b. If the …\nCompute the bitwise OR of 8-bit masks a and b. If the …\nShift 16-bit mask a left by count bits while shifting in …\nShift the bits of 32-bit mask a left by count while …\nShift the bits of 64-bit mask a left by count while …\nShift 8-bit mask a left by count bits while shifting in …\nShift 16-bit mask a right by count bits while shifting in …\nShift the bits of 32-bit mask a right by count while …\nShift the bits of 64-bit mask a right by count while …\nShift 8-bit mask a right by count bits while shifting in …\nCompute the bitwise AND of 16-bit masks a and b, and if …\nCompute the bitwise AND of 32-bit masks a and b, and if …\nCompute the bitwise AND of 64-bit masks a and b, and if …\nCompute the bitwise AND of 8-bit masks a and b, and if the …\nCompute the bitwise NOT of 16-bit mask a and then AND with …\nCompute the bitwise NOT of 32-bit mask a and then AND with …\nCompute the bitwise NOT of 64-bit mask a and then AND with …\nCompute the bitwise NOT of 8-bit mask a and then AND with …\nCompute the bitwise AND of 16-bit masks a and  b, if the …\nCompute the bitwise AND of 32-bit masks a and  b, if the …\nCompute the bitwise AND of 64-bit masks a and  b, if the …\nCompute the bitwise AND of 8-bit masks a and  b, if the …\nCompute the bitwise XNOR of 16-bit masks a and b, and …\nCompute the bitwise XNOR of 32-bit masks a and b, and …\nCompute the bitwise XNOR of 64-bit masks a and b, and …\nBitwise XNOR of 8-bit masks a and b, and store the result …\nCompute the bitwise XOR of 16-bit masks a and b, and store …\nCompute the bitwise XOR of 32-bit masks a and b, and store …\nCompute the bitwise XOR of 64-bit masks a and b, and store …\nBitwise XOR of 8-bit masks a and b, and store the result …\nLoad 16-bit mask from memory\nLoad 32-bit mask from memory into k.\nLoad 64-bit mask from memory into k.\nLoad 8-bit mask from memory\nCounts the leading most significant zero bits.\nCounts the leading most significant zero bits.\nComputes the absolute values of packed 16-bit integers in <code>a</code>…\nComputes the absolute values of packed 32-bit integers in <code>a</code>…\nCompute the absolute value of packed signed 64-bit …\nComputes the absolute values of packed 8-bit integers in <code>a</code>.\nFinds the absolute value of each packed half-precision …\nAdds packed 16-bit integers in <code>a</code> and <code>b</code>.\nAdds packed 32-bit integers in <code>a</code> and <code>b</code>.\nAdds packed 64-bit integers in <code>a</code> and <code>b</code>.\nAdds packed 8-bit integers in <code>a</code> and <code>b</code>.\nAdds packed double-precision (64-bit) floating-point …\nAdd packed half-precision (16-bit) floating-point elements …\nAdds packed single-precision (32-bit) floating-point …\nAdds packed 16-bit integers in <code>a</code> and <code>b</code> using saturation.\nAdds packed 8-bit integers in <code>a</code> and <code>b</code> using saturation.\nAdds packed unsigned 16-bit integers in <code>a</code> and <code>b</code> using …\nAdds packed unsigned 8-bit integers in <code>a</code> and <code>b</code> using …\nAlternatively adds and subtracts packed double-precision …\nAlternatively adds and subtracts packed single-precision …\nPerforms one round of an AES decryption flow on each …\nPerforms the last round of an AES decryption flow on each …\nPerforms one round of an AES encryption flow on each …\nPerforms the last round of an AES encryption flow on each …\nConcatenate a and b into a 64-byte immediate result, shift …\nConcatenate a and b into a 64-byte immediate result, shift …\nConcatenates pairs of 16-byte blocks in <code>a</code> and <code>b</code> into a …\nComputes the bitwise AND of a packed double-precision …\nComputes the bitwise AND of packed single-precision …\nComputes the bitwise AND of 256 bits (representing integer …\nComputes the bitwise NOT of packed double-precision …\nComputes the bitwise NOT of packed single-precision …\nComputes the bitwise NOT of 256 bits (representing integer …\nAverages packed unsigned 16-bit integers in <code>a</code> and <code>b</code>.\nAverages packed unsigned 8-bit integers in <code>a</code> and <code>b</code>.\nConvert scalar BF16 (16-bit) floating point element stored …\nConvert scalar half-precision (16-bit) floating-point …\nConsiders the input <code>b</code> as packed 64-bit integers and <code>c</code> as …\nBlends packed 16-bit integers from <code>a</code> and <code>b</code> using control …\nBlends packed 32-bit integers from <code>a</code> and <code>b</code> using control …\nBlends packed double-precision (64-bit) floating-point …\nBlends packed single-precision (32-bit) floating-point …\nBlends packed 8-bit integers from <code>a</code> and <code>b</code> using <code>mask</code>.\nBlends packed double-precision (64-bit) floating-point …\nBlends packed single-precision (32-bit) floating-point …\nBroadcasts the lower 2 packed single-precision (32-bit) …\nBroadcast the 4 packed single-precision (32-bit) …\nBroadcasts the 2 packed double-precision (64-bit) …\nBroadcasts the lower 2 packed 32-bit integers from a to …\nBroadcast the 4 packed 32-bit integers from a to all …\nBroadcasts the 2 packed 64-bit integers from a to all …\nBroadcasts 128 bits from memory (composed of 2 packed …\nBroadcasts 128 bits from memory (composed of 4 packed …\nBroadcasts a double-precision (64-bit) floating-point …\nBroadcasts a single-precision (32-bit) floating-point …\nBroadcasts the low packed 8-bit integer from <code>a</code> to all …\nBroadcasts the low packed 32-bit integer from <code>a</code> to all …\nBroadcast the low 8-bits from input mask k to all 64-bit …\nBroadcast the low 16-bits from input mask k to all 32-bit …\nBroadcasts the low packed 64-bit integer from <code>a</code> to all …\nBroadcasts the low double-precision (64-bit) …\nBroadcasts 128 bits of integer data from a to all 128-bit …\nBroadcasts the low single-precision (32-bit) …\nBroadcasts the low packed 16-bit integer from a to all …\nShifts 128-bit lanes in <code>a</code> left by <code>imm8</code> bytes while …\nShifts 128-bit lanes in <code>a</code> right by <code>imm8</code> bytes while …\nCasts vector of type __m128d to type __m256d; the upper …\nCasts vector of type __m256d to type __m128d.\nCast vector of type <code>__m256d</code> to type <code>__m256h</code>. This …\nCast vector of type __m256d to type __m256.\nCasts vector of type __m256d to type __m256i.\nCast vector of type <code>__m128h</code> to type <code>__m256h</code>. The upper 8 …\nCast vector of type <code>__m256h</code> to type <code>__m128h</code>. This …\nCast vector of type <code>__m256h</code> to type <code>__m256d</code>. This …\nCast vector of type <code>__m256h</code> to type <code>__m256</code>. This intrinsic …\nCast vector of type <code>__m256h</code> to type <code>__m256i</code>. This …\nCasts vector of type __m128 to type __m256; the upper 128 …\nCasts vector of type __m256 to type __m128.\nCast vector of type __m256 to type __m256d.\nCast vector of type <code>__m256</code> to type <code>__m256h</code>. This intrinsic …\nCasts vector of type __m256 to type __m256i.\nCasts vector of type __m128i to type __m256i; the upper …\nCasts vector of type __m256i to type __m256d.\nCast vector of type <code>__m256i</code> to type <code>__m256h</code>. This …\nCasts vector of type __m256i to type __m256.\nCasts vector of type __m256i to type __m128i.\nRounds packed double-precision (64-bit) floating point …\nRounds packed single-precision (32-bit) floating point …\nPerforms a carry-less multiplication of two 64-bit …\nCompare packed signed 16-bit integers in a and b based on …\nCompare packed signed 32-bit integers in a and b based on …\nCompare packed signed 64-bit integers in a and b based on …\nCompare packed signed 8-bit integers in a and b based on …\nCompare packed unsigned 16-bit integers in a and b based …\nCompare packed unsigned 32-bit integers in a and b based …\nCompare packed unsigned 64-bit integers in a and b based …\nCompare packed unsigned 8-bit integers in a and b based on …\nCompares packed double-precision (64-bit) floating-point …\nCompare packed double-precision (64-bit) floating-point …\nCompare packed half-precision (16-bit) floating-point …\nCompares packed single-precision (32-bit) floating-point …\nCompare packed single-precision (32-bit) floating-point …\nCompares packed 16-bit integers in <code>a</code> and <code>b</code> for equality.\nCompare packed signed 16-bit integers in a and b for …\nCompares packed 32-bit integers in <code>a</code> and <code>b</code> for equality.\nCompare packed 32-bit integers in a and b for equality, …\nCompares packed 64-bit integers in <code>a</code> and <code>b</code> for equality.\nCompare packed 64-bit integers in a and b for equality, …\nCompares packed 8-bit integers in <code>a</code> and <code>b</code> for equality.\nCompare packed signed 8-bit integers in a and b for …\nCompare packed unsigned 16-bit integers in a and b for …\nCompare packed unsigned 32-bit integers in a and b for …\nCompare packed unsigned 64-bit integers in a and b for …\nCompare packed unsigned 8-bit integers in a and b for …\nCompare packed signed 16-bit integers in a and b for …\nCompare packed signed 32-bit integers in a and b for …\nCompare packed signed 64-bit integers in a and b for …\nCompare packed signed 8-bit integers in a and b for …\nCompare packed unsigned 16-bit integers in a and b for …\nCompare packed unsigned 32-bit integers in a and b for …\nCompare packed unsigned 64-bit integers in a and b for …\nCompare packed unsigned 8-bit integers in a and b for …\nCompares packed 16-bit integers in <code>a</code> and <code>b</code> for …\nCompare packed signed 16-bit integers in a and b for …\nCompares packed 32-bit integers in <code>a</code> and <code>b</code> for …\nCompare packed signed 32-bit integers in a and b for …\nCompares packed 64-bit integers in <code>a</code> and <code>b</code> for …\nCompare packed signed 64-bit integers in a and b for …\nCompares packed 8-bit integers in <code>a</code> and <code>b</code> for greater-than.\nCompare packed signed 8-bit integers in a and b for …\nCompare packed unsigned 16-bit integers in a and b for …\nCompare packed unsigned 32-bit integers in a and b for …\nCompare packed unsigned 64-bit integers in a and b for …\nCompare packed unsigned 8-bit integers in a and b for …\nCompare packed signed 16-bit integers in a and b for …\nCompare packed signed 32-bit integers in a and b for …\nCompare packed signed 64-bit integers in a and b for …\nCompare packed signed 8-bit integers in a and b for …\nCompare packed unsigned 16-bit integers in a and b for …\nCompare packed unsigned 32-bit integers in a and b for …\nCompare packed unsigned 64-bit integers in a and b for …\nCompare packed unsigned 8-bit integers in a and b for …\nCompare packed signed 16-bit integers in a and b for …\nCompare packed signed 32-bit integers in a and b for …\nCompare packed signed 64-bit integers in a and b for …\nCompare packed signed 8-bit integers in a and b for …\nCompare packed unsigned 16-bit integers in a and b for …\nCompare packed unsigned 32-bit integers in a and b for …\nCompare packed unsigned 64-bit integers in a and b for …\nCompare packed unsigned 8-bit integers in a and b for …\nCompare packed signed 16-bit integers in a and b for …\nCompare packed 32-bit integers in a and b for not-equal, …\nCompare packed signed 64-bit integers in a and b for …\nCompare packed signed 8-bit integers in a and b for …\nCompare packed unsigned 16-bit integers in a and b for …\nCompare packed unsigned 32-bit integers in a and b for …\nCompare packed unsigned 64-bit integers in a and b for …\nCompare packed unsigned 8-bit integers in a and b for …\nMultiply packed complex numbers in a by the complex …\nTest each 32-bit element of a for equality with all other …\nTest each 64-bit element of a for equality with all other …\nCompute the complex conjugates of complex numbers in a, …\nSign-extend 16-bit integers to 32-bit integers.\nSign-extend 16-bit integers to 64-bit integers.\nConvert packed 16-bit integers in a to packed 8-bit …\nConvert packed signed 16-bit integers in a to packed …\nConvert packed 32-bit integers in a to packed 16-bit …\nSign-extend 32-bit integers to 64-bit integers.\nConvert packed 32-bit integers in a to packed 8-bit …\nConverts packed 32-bit integers in <code>a</code> to packed …\nConvert packed signed 32-bit integers in a to packed …\nConverts packed 32-bit integers in <code>a</code> to packed …\nConvert packed 64-bit integers in a to packed 16-bit …\nConvert packed 64-bit integers in a to packed 32-bit …\nConvert packed 64-bit integers in a to packed 8-bit …\nConvert packed signed 64-bit integers in a to packed …\nConvert packed signed 64-bit integers in a to packed …\nConvert packed signed 64-bit integers in a to packed …\nSign-extend 8-bit integers to 16-bit integers.\nSign-extend 8-bit integers to 32-bit integers.\nSign-extend 8-bit integers to 64-bit integers.\nZeroes extend packed unsigned 16-bit integers in <code>a</code> to …\nZero-extend the lower four unsigned 16-bit integers in <code>a</code> …\nConvert packed unsigned 16-bit integers in a to packed …\nZero-extend unsigned 32-bit integers in <code>a</code> to 64-bit …\nConvert packed unsigned 32-bit integers in a to packed …\nConvert packed unsigned 32-bit integers in a to packed …\nConvert packed unsigned 64-bit integers in a to packed …\nConvert packed unsigned 64-bit integers in a to packed …\nConvert packed unsigned 64-bit integers in a to packed …\nZero-extend unsigned 8-bit integers in <code>a</code> to 16-bit …\nZero-extend the lower eight unsigned 8-bit integers in <code>a</code> …\nZero-extend the lower four unsigned 8-bit integers in <code>a</code> to …\nConvert packed single-precision (32-bit) floating-point …\nConvert packed BF16 (16-bit) floating-point even-indexed …\nConvert packed half-precision (16-bit) floating-point …\nConvert packed BF16 (16-bit) floating-point odd-indexed …\nConvert packed half-precision (16-bit) floating-point …\nConvert packed single precision (32-bit) floating-point …\nConvert packed single-precision (32-bit) floating-point …\nConverts packed BF16 (16-bit) floating-point elements in a …\nConverts packed double-precision (64-bit) floating-point …\nConvert packed double-precision (64-bit) floating-point …\nConvert packed double-precision (64-bit) floating-point …\nConvert packed double-precision (64-bit) floating-point …\nConvert packed double-precision (64-bit) floating-point …\nConverts packed double-precision (64-bit) floating-point …\nConvert packed half-precision (16-bit) floating-point …\nConvert packed half-precision (16-bit) floating-point …\nConvert packed half-precision (16-bit) floating-point …\nConvert packed half-precision (16-bit) floating-point …\nConvert packed half-precision (16-bit) floating-point …\nConvert packed half-precision (16-bit) floating-point …\nConvert packed half-precision (16-bit) floating-point …\nConverts the 8 x 16-bit half-precision float values in the …\nConverts packed single-precision (32-bit) floating-point …\nConvert packed single-precision (32-bit) floating-point …\nConvert packed single-precision (32-bit) floating-point …\nConvert packed single-precision (32-bit) floating-point …\nConverts packed single-precision (32-bit) floating-point …\nConverts the 8 x 32-bit float values in the 256-bit vector …\nReturns the first element of the input vector of …\nConvert packed signed 16-bit integers in a to packed 8-bit …\nConvert packed signed 32-bit integers in a to packed …\nConvert packed signed 32-bit integers in a to packed 8-bit …\nConvert packed signed 64-bit integers in a to packed …\nConvert packed signed 64-bit integers in a to packed …\nConvert packed signed 64-bit integers in a to packed 8-bit …\nCopy the lower half-precision (16-bit) floating-point …\nReturns the first element of the input vector of <code>[8 x i32]</code>.\nReturns the first element of the input vector of …\nConverts packed double-precision (64-bit) floating-point …\nConvert packed double-precision (64-bit) floating-point …\nConvert packed double-precision (64-bit) floating-point …\nConvert packed double-precision (64-bit) floating-point …\nConvert packed half-precision (16-bit) floating-point …\nConvert packed half-precision (16-bit) floating-point …\nConvert packed half-precision (16-bit) floating-point …\nConvert packed half-precision (16-bit) floating-point …\nConvert packed half-precision (16-bit) floating-point …\nConvert packed half-precision (16-bit) floating-point …\nConverts packed single-precision (32-bit) floating-point …\nConvert packed single-precision (32-bit) floating-point …\nConvert packed single-precision (32-bit) floating-point …\nConvert packed single-precision (32-bit) floating-point …\nConvert packed unsigned 16-bit integers in a to packed …\nConvert packed unsigned 32-bit integers in a to packed …\nConvert packed unsigned 32-bit integers in a to packed …\nConvert packed unsigned 64-bit integers in a to packed …\nConvert packed unsigned 64-bit integers in a to packed …\nConvert packed unsigned 64-bit integers in a to packed …\nConvert packed half-precision (16-bit) floating-point …\nConvert packed single-precision (32-bit) floating-point …\nCompute the sum of absolute differences (SADs) of …\nComputes the division of each of the 4 packed 64-bit …\nDivide packed half-precision (16-bit) floating-point …\nComputes the division of each of the 8 packed 32-bit …\nConditionally multiplies the packed single-precision …\nCompute dot-product of BF16 (16-bit) floating-point pairs …\nMultiply groups of 4 adjacent pairs of signed 8-bit …\nMultiply groups of 4 adjacent pairs of signed 8-bit …\nMultiply groups of 4 adjacent pairs of signed 8-bit …\nMultiply groups of 4 adjacent pairs of signed 8-bit …\nMultiply groups of 4 adjacent pairs of unsigned 8-bit …\nMultiply groups of 4 adjacent pairs of unsigned 8-bit …\nMultiply groups of 4 adjacent pairs of unsigned 8-bit …\nMultiply groups of 4 adjacent pairs of unsigned 8-bit …\nMultiply groups of 4 adjacent pairs of unsigned 8-bit …\nMultiply groups of 4 adjacent pairs of unsigned 8-bit …\nMultiply groups of 2 adjacent pairs of signed 16-bit …\nMultiply groups of 2 adjacent pairs of signed 16-bit …\nMultiply groups of 2 adjacent pairs of signed 16-bit …\nMultiply groups of 2 adjacent pairs of signed 16-bit …\nMultiply groups of 2 adjacent pairs of signed 16-bit …\nMultiply groups of 2 adjacent pairs of signed 16-bit …\nMultiply groups of 2 adjacent pairs of unsigned 16-bit …\nMultiply groups of 2 adjacent pairs of unsigned 16-bit …\nMultiply groups of 2 adjacent pairs of unsigned 16-bit …\nMultiply groups of 2 adjacent pairs of unsigned 16-bit …\nExtracts a 16-bit integer from <code>a</code>, selected with <code>INDEX</code>. …\nExtracts a 32-bit integer from <code>a</code>, selected with <code>INDEX</code>.\nExtracts a 64-bit integer from <code>a</code>, selected with <code>INDEX</code>.\nExtracts an 8-bit integer from <code>a</code>, selected with <code>INDEX</code>. …\nExtracts 128 bits (composed of 2 packed double-precision …\nExtracts 128 bits (composed of 4 packed single-precision …\nExtracts 128 bits (composed of integer data) from <code>a</code>, …\nExtract 128 bits (composed of 4 packed single-precision …\nExtracts 128 bits (composed of 2 packed double-precision …\nExtracts 128 bits (of integer data) from <code>a</code> selected with …\nExtract 128 bits (composed of 4 packed 32-bit integers) …\nExtracts 128 bits (composed of 2 packed 64-bit integers) …\nMultiply packed complex numbers in a by the complex …\nMultiply packed complex numbers in a by the complex …\nFix up packed double-precision (64-bit) floating-point …\nFix up packed single-precision (32-bit) floating-point …\nRounds packed double-precision (64-bit) floating point …\nRounds packed single-precision (32-bit) floating point …\nMultiply packed complex numbers in a and b, accumulate to …\nMultiplies packed double-precision (64-bit) floating-point …\nMultiply packed half-precision (16-bit) floating-point …\nMultiplies packed single-precision (32-bit) floating-point …\nMultiplies packed double-precision (64-bit) floating-point …\nMultiply packed half-precision (16-bit) floating-point …\nMultiplies packed single-precision (32-bit) floating-point …\nMultiplies packed double-precision (64-bit) floating-point …\nMultiply packed half-precision (16-bit) floating-point …\nMultiplies packed single-precision (32-bit) floating-point …\nMultiplies packed double-precision (64-bit) floating-point …\nMultiply packed half-precision (16-bit) floating-point …\nMultiplies packed single-precision (32-bit) floating-point …\nMultiply packed complex numbers in a and b, and store the …\nMultiplies packed double-precision (64-bit) floating-point …\nMultiply packed half-precision (16-bit) floating-point …\nMultiplies packed single-precision (32-bit) floating-point …\nMultiplies packed double-precision (64-bit) floating-point …\nMultiply packed half-precision (16-bit) floating-point …\nMultiplies packed single-precision (32-bit) floating-point …\nTest packed double-precision (64-bit) floating-point …\nTest packed half-precision (16-bit) floating-point …\nTest packed single-precision (32-bit) floating-point …\nConvert the exponent of each packed double-precision …\nConvert the exponent of each packed half-precision …\nConvert the exponent of each packed single-precision …\nNormalize the mantissas of packed double-precision …\nNormalize the mantissas of packed half-precision (16-bit) …\nNormalize the mantissas of packed single-precision …\nPerforms an affine transformation on the packed bytes in x.\nPerforms an affine transformation on the inverted packed …\nPerforms a multiplication in GF(2^8) on the packed bytes. …\nHorizontally adds adjacent pairs of 16-bit integers in <code>a</code> …\nHorizontally adds adjacent pairs of 32-bit integers in <code>a</code> …\nHorizontal addition of adjacent pairs in the two packed …\nHorizontal addition of adjacent pairs in the two packed …\nHorizontally adds adjacent pairs of 16-bit integers in <code>a</code> …\nHorizontally subtract adjacent pairs of 16-bit integers in …\nHorizontally subtract adjacent pairs of 32-bit integers in …\nHorizontal subtraction of adjacent pairs in the two packed …\nHorizontal subtraction of adjacent pairs in the two packed …\nHorizontally subtract adjacent pairs of 16-bit integers in …\nReturns values from <code>slice</code> at offsets determined by …\nReturns values from <code>slice</code> at offsets determined by …\nReturns values from <code>slice</code> at offsets determined by …\nReturns values from <code>slice</code> at offsets determined by …\nStores 8 32-bit integer elements from a to memory starting …\nScatter 64-bit integers from a into memory using 32-bit …\nStores 4 double-precision (64-bit) floating-point elements …\nStores 8 single-precision (32-bit) floating-point elements …\nReturns values from <code>slice</code> at offsets determined by …\nReturns values from <code>slice</code> at offsets determined by …\nReturns values from <code>slice</code> at offsets determined by …\nReturns values from <code>slice</code> at offsets determined by …\nStores 4 32-bit integer elements from a to memory starting …\nStores 4 64-bit integer elements from a to memory starting …\nStores 4 double-precision (64-bit) floating-point elements …\nStores 4 single-precision (32-bit) floating-point elements …\nCopies <code>a</code> to result, and inserts the 16-bit integer <code>i</code> into …\nCopies <code>a</code> to result, and inserts the 32-bit integer <code>i</code> into …\nCopies <code>a</code> to result, and insert the 64-bit integer <code>i</code> into …\nCopies <code>a</code> to result, and inserts the 8-bit integer <code>i</code> into …\nCopies <code>a</code> to result, then inserts 128 bits (composed of 2 …\nCopies <code>a</code> to result, then inserts 128 bits (composed of 4 …\nCopies <code>a</code> to result, then inserts 128 bits from <code>b</code> into …\nCopy a to dst, then insert 128 bits (composed of 4 packed …\nCopy a to dst, then insert 128 bits (composed of 2 packed …\nCopies <code>a</code> to <code>dst</code>, then insert 128 bits (of integer data) …\nCopy a to dst, then insert 128 bits (composed of 4 packed …\nCopy a to dst, then insert 128 bits (composed of 2 packed …\nLoads 256-bits of integer data from unaligned memory into …\nLoad 256-bits (composed of 8 packed 32-bit integers) from …\nLoad 256-bits (composed of 4 packed 64-bit integers) from …\nLoads 256-bits (composed of 4 packed double-precision …\nLoad 256-bits (composed of 16 packed half-precision …\nLoads 256-bits (composed of 8 packed single-precision …\nLoads 256-bits of integer data from memory into result. …\nLoads two 128-bit values (composed of 4 packed …\nLoads two 128-bit values (composed of 2 packed …\nLoads two 128-bit values (composed of integer data) from …\nLoad 256-bits (composed of 16 packed 16-bit integers) from …\nLoad 256-bits (composed of 8 packed 32-bit integers) from …\nLoad 256-bits (composed of 4 packed 64-bit integers) from …\nLoad 256-bits (composed of 32 packed 8-bit integers) from …\nLoads 256-bits (composed of 4 packed double-precision …\nLoad 256-bits (composed of 16 packed half-precision …\nLoads 256-bits (composed of 8 packed single-precision …\nLoads 256-bits of integer data from memory into result. …\nCounts the number of leading zero bits in each packed …\nCounts the number of leading zero bits in each packed …\nMultiply packed unsigned 52-bit integers in each 64-bit …\nMultiply packed unsigned 52-bit integers in each 64-bit …\nMultiply packed unsigned 52-bit integers in each 64-bit …\nMultiply packed unsigned 52-bit integers in each 64-bit …\nMultiplies packed signed 16-bit integers in <code>a</code> and <code>b</code>, …\nVertically multiplies each unsigned 8-bit integer from <code>a</code> …\nShuffle 16-bit integers in a and b across lanes using the …\nShuffle 32-bit integers in a and b across lanes using the …\nShuffle 64-bit integers in a and b across lanes using the …\nShuffle 8-bit integers in a and b across lanes using the …\nShuffle double-precision (64-bit) floating-point elements …\nShuffle single-precision (32-bit) floating-point elements …\nMultiply packed complex numbers in a by the complex …\nMultiply packed complex numbers in a and b, accumulate to …\nMultiply packed double-precision (64-bit) floating-point …\nMultiply packed half-precision (16-bit) floating-point …\nMultiply packed single-precision (32-bit) floating-point …\nMultiply packed single-precision (32-bit) floating-point …\nMultiply packed half-precision (16-bit) floating-point …\nMultiply packed single-precision (32-bit) floating-point …\nMultiply packed double-precision (64-bit) floating-point …\nMultiply packed half-precision (16-bit) floating-point …\nMultiply packed single-precision (32-bit) floating-point …\nMultiply packed double-precision (64-bit) floating-point …\nMultiply packed half-precision (16-bit) floating-point …\nMultiply packed single-precision (32-bit) floating-point …\nMultiply packed double-precision (64-bit) floating-point …\nMultiply packed half-precision (16-bit) floating-point …\nMultiply packed single-precision (32-bit) floating-point …\nMultiply packed double-precision (64-bit) floating-point …\nMultiply packed half-precision (16-bit) floating-point …\nMultiply packed single-precision (32-bit) floating-point …\nCompute the absolute value of packed signed 16-bit …\nCompute the absolute value of packed signed 32-bit …\nCompute the absolute value of packed signed 64-bit …\nCompute the absolute value of packed signed 8-bit integers …\nAdd packed 16-bit integers in a and b, and store the …\nAdd packed 32-bit integers in a and b, and store the …\nAdd packed 64-bit integers in a and b, and store the …\nAdd packed 8-bit integers in a and b, and store the …\nAdd packed double-precision (64-bit) floating-point …\nAdd packed half-precision (16-bit) floating-point elements …\nAdd packed single-precision (32-bit) floating-point …\nAdd packed signed 16-bit integers in a and b using …\nAdd packed signed 8-bit integers in a and b using …\nAdd packed unsigned 16-bit integers in a and b using …\nAdd packed unsigned 8-bit integers in a and b using …\nConcatenate a and b into a 64-byte immediate result, shift …\nConcatenate a and b into a 64-byte immediate result, shift …\nConcatenate pairs of 16-byte blocks in a and b into a …\nPerforms element-by-element bitwise AND between packed …\nCompute the bitwise AND of packed 64-bit integers in a and …\nCompute the bitwise AND of packed double-precision …\nCompute the bitwise AND of packed single-precision …\nCompute the bitwise NOT of packed 32-bit integers in a and …\nCompute the bitwise NOT of packed 64-bit integers in a and …\nCompute the bitwise NOT of packed double-precision …\nCompute the bitwise NOT of packed single-precision …\nAverage packed unsigned 16-bit integers in a and b, and …\nAverage packed unsigned 8-bit integers in a and b, and …\nConsiders the input <code>b</code> as packed 64-bit integers and <code>c</code> as …\nBlend packed 16-bit integers from a and b using control …\nBlend packed 32-bit integers from a and b using control …\nBlend packed 64-bit integers from a and b using control …\nBlend packed 8-bit integers from a and b using control …\nBlend packed double-precision (64-bit) floating-point …\nBlend packed half-precision (16-bit) floating-point …\nBlend packed single-precision (32-bit) floating-point …\nBroadcasts the lower 2 packed single-precision (32-bit) …\nBroadcast the 4 packed single-precision (32-bit) …\nBroadcasts the 2 packed double-precision (64-bit) …\nBroadcasts the lower 2 packed 32-bit integers from a to …\nBroadcast the 4 packed 32-bit integers from a to all …\nBroadcasts the 2 packed 64-bit integers from a to all …\nBroadcast the low packed 8-bit integer from a to all …\nBroadcast the low packed 32-bit integer from a to all …\nBroadcast the low packed 64-bit integer from a to all …\nBroadcast the low double-precision (64-bit) floating-point …\nBroadcast the low single-precision (32-bit) floating-point …\nBroadcast the low packed 16-bit integer from a to all …\nCompare packed signed 16-bit integers in a and b based on …\nCompare packed signed 32-bit integers in a and b based on …\nCompare packed signed 64-bit integers in a and b based on …\nCompare packed signed 8-bit integers in a and b based on …\nCompare packed unsigned 16-bit integers in a and b based …\nCompare packed unsigned 32-bit integers in a and b based …\nCompare packed unsigned 64-bit integers in a and b based …\nCompare packed unsigned 8-bit integers in a and b based on …\nCompare packed double-precision (64-bit) floating-point …\nCompare packed half-precision (16-bit) floating-point …\nCompare packed single-precision (32-bit) floating-point …\nCompare packed signed 16-bit integers in a and b for …\nCompare packed 32-bit integers in a and b for equality, …\nCompare packed 64-bit integers in a and b for equality, …\nCompare packed signed 8-bit integers in a and b for …\nCompare packed unsigned 16-bit integers in a and b for …\nCompare packed unsigned 32-bit integers in a and b for …\nCompare packed unsigned 64-bit integers in a and b for …\nCompare packed unsigned 8-bit integers in a and b for …\nCompare packed signed 16-bit integers in a and b for …\nCompare packed signed 32-bit integers in a and b for …\nCompare packed signed 64-bit integers in a and b for …\nCompare packed signed 8-bit integers in a and b for …\nCompare packed unsigned 16-bit integers in a and b for …\nCompare packed unsigned 32-bit integers in a and b for …\nCompare packed unsigned 64-bit integers in a and b for …\nCompare packed unsigned 8-bit integers in a and b for …\nCompare packed signed 16-bit integers in a and b for …\nCompare packed signed 32-bit integers in a and b for …\nCompare packed signed 64-bit integers in a and b for …\nCompare packed signed 8-bit integers in a and b for …\nCompare packed unsigned 16-bit integers in a and b for …\nCompare packed unsigned 32-bit integers in a and b for …\nCompare packed unsigned 64-bit integers in a and b for …\nCompare packed unsigned 8-bit integers in a and b for …\nCompare packed signed 16-bit integers in a and b for …\nCompare packed signed 32-bit integers in a and b for …\nCompare packed signed 64-bit integers in a and b for …\nCompare packed signed 8-bit integers in a and b for …\nCompare packed unsigned 16-bit integers in a and b for …\nCompare packed unsigned 32-bit integers in a and b for …\nCompare packed unsigned 64-bit integers in a and b for …\nCompare packed unsigned 8-bit integers in a and b for …\nCompare packed signed 16-bit integers in a and b for …\nCompare packed signed 32-bit integers in a and b for …\nCompare packed signed 64-bit integers in a and b for …\nCompare packed signed 8-bit integers in a and b for …\nCompare packed unsigned 16-bit integers in a and b for …\nCompare packed unsigned 32-bit integers in a and b for …\nCompare packed unsigned 64-bit integers in a and b for …\nCompare packed unsigned 8-bit integers in a and b for …\nCompare packed signed 16-bit integers in a and b for …\nCompare packed 32-bit integers in a and b for not-equal, …\nCompare packed signed 64-bit integers in a and b for …\nCompare packed signed 8-bit integers in a and b for …\nCompare packed unsigned 16-bit integers in a and b for …\nCompare packed unsigned 32-bit integers in a and b for …\nCompare packed unsigned 64-bit integers in a and b for …\nCompare packed unsigned 8-bit integers in a and b for …\nMultiply packed complex numbers in a by the complex …\nContiguously store the active 16-bit integers in a (those …\nContiguously store the active 32-bit integers in a (those …\nContiguously store the active 64-bit integers in a (those …\nContiguously store the active 8-bit integers in a (those …\nContiguously store the active double-precision (64-bit) …\nContiguously store the active single-precision (32-bit) …\nContiguously store the active 16-bit integers in a (those …\nContiguously store the active 32-bit integers in a (those …\nContiguously store the active 64-bit integers in a (those …\nContiguously store the active 8-bit integers in a (those …\nContiguously store the active double-precision (64-bit) …\nContiguously store the active single-precision (32-bit) …\nTest each 32-bit element of a for equality with all other …\nTest each 64-bit element of a for equality with all other …\nCompute the complex conjugates of complex numbers in a, …\nConvert packed single-precision (32-bit) floating-point …\nSign extend packed 16-bit integers in a to packed 32-bit …\nSign extend packed 16-bit integers in a to packed 64-bit …\nConvert packed 16-bit integers in a to packed 8-bit …\nConvert packed signed 16-bit integers in a to packed …\nConvert packed 16-bit integers in a to packed 8-bit …\nConvert packed 32-bit integers in a to packed 16-bit …\nSign extend packed 32-bit integers in a to packed 64-bit …\nConvert packed 32-bit integers in a to packed 8-bit …\nConvert packed signed 32-bit integers in a to packed …\nConvert packed signed 32-bit integers in a to packed …\nConvert packed signed 32-bit integers in a to packed …\nConvert packed 32-bit integers in a to packed 16-bit …\nConvert packed 32-bit integers in a to packed 8-bit …\nConvert packed 64-bit integers in a to packed 16-bit …\nConvert packed 64-bit integers in a to packed 32-bit …\nConvert packed 64-bit integers in a to packed 8-bit …\nConvert packed signed 64-bit integers in a to packed …\nConvert packed signed 64-bit integers in a to packed …\nConvert packed signed 64-bit integers in a to packed …\nConvert packed 64-bit integers in a to packed 16-bit …\nConvert packed 64-bit integers in a to packed 32-bit …\nConvert packed 64-bit integers in a to packed 8-bit …\nSign extend packed 8-bit integers in a to packed 16-bit …\nSign extend packed 8-bit integers in a to packed 32-bit …\nSign extend packed 8-bit integers in the low 4 bytes of a …\nZero extend packed unsigned 16-bit integers in a to packed …\nZero extend packed unsigned 16-bit integers in the low 8 …\nConvert packed unsigned 16-bit integers in a to packed …\nZero extend packed unsigned 32-bit integers in a to packed …\nConvert packed unsigned 32-bit integers in a to packed …\nConvert packed unsigned 32-bit integers in a to packed …\nConvert packed unsigned 64-bit integers in a to packed …\nConvert packed unsigned 64-bit integers in a to packed …\nConvert packed unsigned 64-bit integers in a to packed …\nZero extend packed unsigned 8-bit integers in a to packed …\nZero extend packed unsigned 8-bit integers in the low 8 …\nZero extend packed unsigned 8-bit integers in the low 4 …\nConvert packed single-precision (32-bit) floating-point …\nConvert packed single-precision (32-bit) floating-point …\nConverts packed BF16 (16-bit) floating-point elements in a …\nConvert packed double-precision (64-bit) floating-point …\nConvert packed double-precision (64-bit) floating-point …\nConvert packed double-precision (64-bit) floating-point …\nConvert packed double-precision (64-bit) floating-point …\nConvert packed double-precision (64-bit) floating-point …\nConvert packed double-precision (64-bit) floating-point …\nConvert packed half-precision (16-bit) floating-point …\nConvert packed half-precision (16-bit) floating-point …\nConvert packed half-precision (16-bit) floating-point …\nConvert packed half-precision (16-bit) floating-point …\nConvert packed half-precision (16-bit) floating-point …\nConvert packed half-precision (16-bit) floating-point …\nConvert packed half-precision (16-bit) floating-point …\nConvert packed half-precision (16-bit) floating-point …\nConvert packed single-precision (32-bit) floating-point …\nConvert packed single-precision (32-bit) floating-point …\nConvert packed single-precision (32-bit) floating-point …\nConvert packed single-precision (32-bit) floating-point …\nConvert packed single-precision (32-bit) floating-point …\nConvert packed signed 16-bit integers in a to packed 8-bit …\nConvert packed signed 16-bit integers in a to packed 8-bit …\nConvert packed signed 32-bit integers in a to packed …\nConvert packed signed 32-bit integers in a to packed 8-bit …\nConvert packed signed 32-bit integers in a to packed …\nConvert packed signed 32-bit integers in a to packed 8-bit …\nConvert packed signed 64-bit integers in a to packed …\nConvert packed signed 64-bit integers in a to packed …\nConvert packed signed 64-bit integers in a to packed 8-bit …\nConvert packed signed 64-bit integers in a to packed …\nConvert packed signed 64-bit integers in a to packed …\nConvert packed signed 64-bit integers in a to packed 8-bit …\nConvert packed double-precision (64-bit) floating-point …\nConvert packed double-precision (64-bit) floating-point …\nConvert packed double-precision (64-bit) floating-point …\nConvert packed double-precision (64-bit) floating-point …\nConvert packed half-precision (16-bit) floating-point …\nConvert packed half-precision (16-bit) floating-point …\nConvert packed half-precision (16-bit) floating-point …\nConvert packed half-precision (16-bit) floating-point …\nConvert packed half-precision (16-bit) floating-point …\nConvert packed half-precision (16-bit) floating-point …\nConvert packed single-precision (32-bit) floating-point …\nConvert packed single-precision (32-bit) floating-point …\nConvert packed double-precision (32-bit) floating-point …\nConvert packed single-precision (32-bit) floating-point …\nConvert packed unsigned 16-bit integers in a to packed …\nConvert packed unsigned 16-bit integers in a to packed …\nConvert packed unsigned 32-bit integers in a to packed …\nConvert packed unsigned 32-bit integers in a to packed …\nConvert packed unsigned 32-bit integers in a to packed …\nConvert packed unsigned 32-bit integers in a to packed …\nConvert packed unsigned 64-bit integers in a to packed …\nConvert packed unsigned 64-bit integers in a to packed …\nConvert packed unsigned 64-bit integers in a to packed …\nConvert packed unsigned 64-bit integers in a to packed …\nConvert packed unsigned 64-bit integers in a to packed …\nConvert packed unsigned 64-bit integers in a to packed …\nConvert packed half-precision (16-bit) floating-point …\nConvert packed single-precision (32-bit) floating-point …\nCompute the sum of absolute differences (SADs) of …\nDivide packed double-precision (64-bit) floating-point …\nDivide packed half-precision (16-bit) floating-point …\nDivide packed single-precision (32-bit) floating-point …\nCompute dot-product of BF16 (16-bit) floating-point pairs …\nMultiply groups of 4 adjacent pairs of unsigned 8-bit …\nMultiply groups of 4 adjacent pairs of unsigned 8-bit …\nMultiply groups of 2 adjacent pairs of signed 16-bit …\nMultiply groups of 2 adjacent pairs of signed 16-bit …\nLoad contiguous active 16-bit integers from a (those with …\nLoad contiguous active 32-bit integers from a (those with …\nLoad contiguous active 64-bit integers from a (those with …\nLoad contiguous active 8-bit integers from a (those with …\nLoad contiguous active double-precision (64-bit) …\nLoad contiguous active single-precision (32-bit) …\nLoad contiguous active 16-bit integers from unaligned …\nLoad contiguous active 32-bit integers from unaligned …\nLoad contiguous active 64-bit integers from unaligned …\nLoad contiguous active 8-bit integers from unaligned …\nLoad contiguous active double-precision (64-bit) …\nLoad contiguous active single-precision (32-bit) …\nExtract 128 bits (composed of 4 packed single-precision …\nExtracts 128 bits (composed of 2 packed double-precision …\nExtract 128 bits (composed of 4 packed 32-bit integers) …\nExtracts 128 bits (composed of 2 packed 64-bit integers) …\nMultiply packed complex numbers in a by the complex …\nMultiply packed complex numbers in a by the complex …\nFix up packed double-precision (64-bit) floating-point …\nFix up packed single-precision (32-bit) floating-point …\nMultiply packed complex numbers in a and b, accumulate to …\nMultiply packed double-precision (64-bit) floating-point …\nMultiply packed half-precision (16-bit) floating-point …\nMultiply packed single-precision (32-bit) floating-point …\nMultiply packed double-precision (64-bit) floating-point …\nMultiply packed half-precision (16-bit) floating-point …\nMultiply packed single-precision (32-bit) floating-point …\nMultiply packed double-precision (64-bit) floating-point …\nMultiply packed half-precision (16-bit) floating-point …\nMultiply packed single-precision (32-bit) floating-point …\nMultiply packed double-precision (64-bit) floating-point …\nMultiply packed half-precision (16-bit) floating-point …\nMultiply packed single-precision (32-bit) floating-point …\nMultiply packed complex numbers in a and b, and store the …\nMultiply packed double-precision (64-bit) floating-point …\nMultiply packed half-precision (16-bit) floating-point …\nMultiply packed single-precision (32-bit) floating-point …\nMultiply packed double-precision (64-bit) floating-point …\nMultiply packed half-precision (16-bit) floating-point …\nMultiply packed single-precision (32-bit) floating-point …\nTest packed double-precision (64-bit) floating-point …\nTest packed half-precision (16-bit) floating-point …\nTest packed single-precision (32-bit) floating-point …\nConvert the exponent of each packed double-precision …")