searchState.loadedDescShard("devela", 7, "Divide packed single-precision (32-bit) floating-point …\nDivide the lower double-precision (64-bit) floating-point …\nDivide the lower half-precision (16-bit) floating-point …\nDivide the lower single-precision (32-bit) floating-point …\nDivide the lower double-precision (64-bit) floating-point …\nDivide the lower half-precision (16-bit) floating-point …\nDivide the lower single-precision (32-bit) floating-point …\nCompute dot-product of BF16 (16-bit) floating-point pairs …\nMultiply groups of 4 adjacent pairs of unsigned 8-bit …\nMultiply groups of 4 adjacent pairs of unsigned 8-bit …\nMultiply groups of 2 adjacent pairs of signed 16-bit …\nMultiply groups of 2 adjacent pairs of signed 16-bit …\nLoad contiguous active 16-bit integers from a (those with …\nLoad contiguous active 32-bit integers from a (those with …\nLoad contiguous active 64-bit integers from a (those with …\nLoad contiguous active 8-bit integers from a (those with …\nLoad contiguous active double-precision (64-bit) …\nLoad contiguous active single-precision (32-bit) …\nLoad contiguous active 16-bit integers from unaligned …\nLoad contiguous active 32-bit integers from unaligned …\nLoad contiguous active 64-bit integers from unaligned …\nLoad contiguous active 8-bit integers from unaligned …\nLoad contiguous active double-precision (64-bit) …\nLoad contiguous active single-precision (32-bit) …\nMultiply packed complex numbers in a by the complex …\nMultiply the lower complex number in a by the complex …\nMultiply the lower complex number in a by the complex …\nMultiply packed complex numbers in a by the complex …\nMultiply the lower complex numbers in a by the complex …\nMultiply the lower complex numbers in a by the complex …\nFix up packed double-precision (64-bit) floating-point …\nFix up packed single-precision (32-bit) floating-point …\nFix up the lower double-precision (64-bit) floating-point …\nFix up the lower single-precision (32-bit) floating-point …\nFix up the lower double-precision (64-bit) floating-point …\nFix up the lower single-precision (32-bit) floating-point …\nMultiply packed complex numbers in a and b, accumulate to …\nMultiply packed double-precision (64-bit) floating-point …\nMultiply packed half-precision (16-bit) floating-point …\nMultiply packed single-precision (32-bit) floating-point …\nMultiply the lower complex numbers in a and b, accumulate …\nMultiply the lower double-precision (64-bit) …\nMultiply the lower half-precision (16-bit) floating-point …\nMultiply the lower single-precision (32-bit) …\nMultiply the lower complex numbers in a and b, accumulate …\nMultiply the lower double-precision (64-bit) …\nMultiply the lower half-precision (16-bit) floating-point …\nMultiply the lower single-precision (32-bit) …\nMultiply packed double-precision (64-bit) floating-point …\nMultiply packed half-precision (16-bit) floating-point …\nMultiply packed single-precision (32-bit) floating-point …\nMultiply packed double-precision (64-bit) floating-point …\nMultiply packed half-precision (16-bit) floating-point …\nMultiply packed single-precision (32-bit) floating-point …\nMultiply the lower double-precision (64-bit) …\nMultiply the lower half-precision (16-bit) floating-point …\nMultiply the lower single-precision (32-bit) …\nMultiply the lower double-precision (64-bit) …\nMultiply the lower half-precision (16-bit) floating-point …\nMultiply the lower single-precision (32-bit) …\nMultiply packed double-precision (64-bit) floating-point …\nMultiply packed half-precision (16-bit) floating-point …\nMultiply packed single-precision (32-bit) floating-point …\nMultiply packed complex numbers in a and b, and store the …\nMultiply the lower complex numbers in a and b, and store …\nMultiply the lower complex numbers in a and b, and store …\nMultiply packed double-precision (64-bit) floating-point …\nMultiply packed half-precision (16-bit) floating-point …\nMultiply packed single-precision (32-bit) floating-point …\nMultiply the lower double-precision (64-bit) …\nMultiply the lower half-precision (16-bit) floating-point …\nMultiply the lower single-precision (32-bit) …\nMultiply the lower double-precision (64-bit) …\nMultiply the lower half-precision (16-bit) floating-point …\nMultiply the lower single-precision (32-bit) …\nMultiply packed double-precision (64-bit) floating-point …\nMultiply packed half-precision (16-bit) floating-point …\nMultiply packed single-precision (32-bit) floating-point …\nMultiply the lower double-precision (64-bit) …\nMultiply the lower half-precision (16-bit) floating-point …\nMultiply the lower single-precision (32-bit) …\nMultiply the lower double-precision (64-bit) …\nMultiply the lower half-precision (16-bit) floating-point …\nMultiply the lower single-precision (32-bit) …\nTest packed double-precision (64-bit) floating-point …\nTest packed half-precision (16-bit) floating-point …\nTest packed single-precision (32-bit) floating-point …\nTest the lower double-precision (64-bit) floating-point …\nTest the lower half-precision (16-bit) floating-point …\nTest the lower single-precision (32-bit) floating-point …\nConvert the exponent of each packed double-precision …\nConvert the exponent of each packed half-precision …\nConvert the exponent of each packed single-precision …\nConvert the exponent of the lower double-precision …\nConvert the exponent of the lower half-precision (16-bit) …\nConvert the exponent of the lower single-precision …\nConvert the exponent of the lower double-precision …\nConvert the exponent of the lower half-precision (16-bit) …\nConvert the exponent of the lower single-precision …\nNormalize the mantissas of packed double-precision …\nNormalize the mantissas of packed half-precision (16-bit) …\nNormalize the mantissas of packed single-precision …\nNormalize the mantissas of the lower double-precision …\nNormalize the mantissas of the lower half-precision …\nNormalize the mantissas of the lower single-precision …\nNormalize the mantissas of the lower double-precision …\nNormalize the mantissas of the lower half-precision …\nNormalize the mantissas of the lower single-precision …\nPerforms an affine transformation on the packed bytes in x.\nPerforms an affine transformation on the inverted packed …\nPerforms a multiplication in GF(2^8) on the packed bytes. …\nReturns values from <code>slice</code> at offsets determined by …\nReturns values from <code>slice</code> at offsets determined by …\nReturns values from <code>slice</code> at offsets determined by …\nReturns values from <code>slice</code> at offsets determined by …\nStores 4 32-bit integer elements from a to memory starting …\nStores 2 64-bit integer elements from a to memory starting …\nStores 2 double-precision (64-bit) floating-point elements …\nStores 4 single-precision (32-bit) floating-point elements …\nReturns values from <code>slice</code> at offsets determined by …\nReturns values from <code>slice</code> at offsets determined by …\nReturns values from <code>slice</code> at offsets determined by …\nReturns values from <code>slice</code> at offsets determined by …\nStores 2 32-bit integer elements from a to memory starting …\nStores 2 64-bit integer elements from a to memory starting …\nStores 2 double-precision (64-bit) floating-point elements …\nStores 2 single-precision (32-bit) floating-point elements …\nLoad packed 32-bit integers from memory into dst using …\nLoad packed 64-bit integers from memory into dst using …\nLoad packed double-precision (64-bit) floating-point …\nLoad packed single-precision (32-bit) floating-point …\nLoad a double-precision (64-bit) floating-point element …\nLoad a half-precision (16-bit) floating-point element from …\nLoad a single-precision (32-bit) floating-point element …\nLoad packed 16-bit integers from memory into dst using …\nLoad packed 32-bit integers from memory into dst using …\nLoad packed 64-bit integers from memory into dst using …\nLoad packed 8-bit integers from memory into dst using …\nLoad packed double-precision (64-bit) floating-point …\nLoad packed single-precision (32-bit) floating-point …\nCounts the number of leading zero bits in each packed …\nCounts the number of leading zero bits in each packed …\nMultiply packed unsigned 52-bit integers in each 64-bit …\nMultiply packed unsigned 52-bit integers in each 64-bit …\nMultiply packed signed 16-bit integers in a and b, …\nMultiply packed unsigned 8-bit integers in a by packed …\nCompare packed signed 16-bit integers in a and b, and …\nCompare packed signed 32-bit integers in a and b, and …\nCompare packed signed 64-bit integers in a and b, and …\nCompare packed signed 8-bit integers in a and b, and store …\nCompare packed unsigned 16-bit integers in a and b, and …\nCompare packed unsigned 32-bit integers in a and b, and …\nCompare packed unsigned 64-bit integers in a and b, and …\nCompare packed unsigned 8-bit integers in a and b, and …\nCompare packed double-precision (64-bit) floating-point …\nCompare packed half-precision (16-bit) floating-point …\nCompare packed single-precision (32-bit) floating-point …\nCompare the lower double-precision (64-bit) floating-point …\nCompare the lower half-precision (16-bit) floating-point …\nCompare the lower single-precision (32-bit) floating-point …\nCompare the lower double-precision (64-bit) floating-point …\nCompare the lower half-precision (16-bit) floating-point …\nCompare the lower single-precision (32-bit) floating-point …\nCompare packed signed 16-bit integers in a and b, and …\nCompare packed signed 32-bit integers in a and b, and …\nCompare packed signed 64-bit integers in a and b, and …\nCompare packed signed 8-bit integers in a and b, and store …\nCompare packed unsigned 16-bit integers in a and b, and …\nCompare packed unsigned 32-bit integers in a and b, and …\nCompare packed unsigned 64-bit integers in a and b, and …\nCompare packed unsigned 8-bit integers in a and b, and …\nCompare packed double-precision (64-bit) floating-point …\nCompare packed half-precision (16-bit) floating-point …\nCompare packed single-precision (32-bit) floating-point …\nCompare the lower double-precision (64-bit) floating-point …\nCompare the lower half-precision (16-bit) floating-point …\nCompare the lower single-precision (32-bit) floating-point …\nCompare the lower double-precision (64-bit) floating-point …\nCompare the lower half-precision (16-bit) floating-point …\nCompare the lower single-precision (32-bit) floating-point …\nMove packed 16-bit integers from a into dst using …\nMove packed 32-bit integers from a to dst using writemask …\nMove packed 64-bit integers from a to dst using writemask …\nMove packed 8-bit integers from a into dst using writemask …\nMove packed double-precision (64-bit) floating-point …\nMove packed single-precision (32-bit) floating-point …\nMove the lower double-precision (64-bit) floating-point …\nMove the lower half-precision (16-bit) floating-point …\nMove the lower single-precision (32-bit) floating-point …\nDuplicate even-indexed double-precision (64-bit) …\nDuplicate odd-indexed single-precision (32-bit) …\nDuplicate even-indexed single-precision (32-bit) …\nMultiply the low signed 32-bit integers from each packed …\nMultiply the low unsigned 32-bit integers from each packed …\nMultiply packed complex numbers in a and b, and store the …\nMultiply packed double-precision (64-bit) floating-point …\nMultiply packed half-precision (16-bit) floating-point …\nMultiply packed single-precision (32-bit) floating-point …\nMultiply the lower complex numbers in a and b, and store …\nMultiply the lower double-precision (64-bit) …\nMultiply the lower half-precision (16-bit) floating-point …\nMultiply the lower single-precision (32-bit) …\nMultiply the lower complex numbers in a and b, and store …\nMultiply the lower double-precision (64-bit) …\nMultiply the lower half-precision (16-bit) floating-point …\nMultiply the lower single-precision (32-bit) …\nMultiply the packed signed 16-bit integers in a and b, …\nMultiply the packed unsigned 16-bit integers in a and b, …\nMultiply packed signed 16-bit integers in a and b, …\nMultiply the packed 16-bit integers in a and b, producing …\nMultiply the packed 32-bit integers in a and b, producing …\nMultiply packed 64-bit integers in <code>a</code> and <code>b</code>, producing …\nFor each 64-bit element in b, select 8 unaligned bytes …\nCompute the bitwise OR of packed 32-bit integers in a and …\nCompute the bitwise OR of packed 64-bit integers in a and …\nCompute the bitwise OR of packed double-precision (64-bit) …\nCompute the bitwise OR of packed single-precision (32-bit) …\nConvert packed signed 16-bit integers from a and b to …\nConvert packed signed 32-bit integers from a and b to …\nConvert packed signed 16-bit integers from a and b to …\nConvert packed signed 32-bit integers from a and b to …\nShuffle double-precision (64-bit) floating-point elements …\nShuffle single-precision (32-bit) floating-point elements …\nShuffle double-precision (64-bit) floating-point elements …\nShuffle single-precision (32-bit) floating-point elements …\nShuffle 16-bit integers in a and b across lanes using the …\nShuffle 32-bit integers in a and b across lanes using the …\nShuffle 64-bit integers in a and b across lanes using the …\nShuffle 8-bit integers in a and b across lanes using the …\nShuffle double-precision (64-bit) floating-point elements …\nShuffle single-precision (32-bit) floating-point elements …\nShuffle 16-bit integers in a across lanes using the …\nShuffle 8-bit integers in a across lanes using the …\nFor each packed 16-bit integer maps the value to the …\nFor each packed 32-bit integer maps the value to the …\nFor each packed 64-bit integer maps the value to the …\nFor each packed 8-bit integer maps the value to the number …\nCalculate the max, min, absolute max, or absolute min …\nCalculate the max, min, absolute max, or absolute min …\nCalculate the max, min, absolute max, or absolute min …\nCalculate the max, min, absolute max, or absolute min …\nCalculate the max, min, absolute max, or absolute min …\nCalculate the max, min, absolute max, or absolute min …\nCompute the approximate reciprocal of packed …\nCompute the approximate reciprocal of packed …\nCompute the approximate reciprocal of the lower …\nCompute the approximate reciprocal of the lower …\nCompute the approximate reciprocal of packed 16-bit …\nCompute the approximate reciprocal of the lower …\nReduce the packed 16-bit integers in a by addition using …\nReduce the packed 8-bit integers in a by addition using …\nReduce the packed 16-bit integers in a by bitwise AND …\nReduce the packed 8-bit integers in a by bitwise AND using …\nReduce the packed 16-bit integers in a by maximum using …\nReduce the packed 8-bit integers in a by maximum using …\nReduce the packed unsigned 16-bit integers in a by maximum …\nReduce the packed unsigned 8-bit integers in a by maximum …\nReduce the packed 16-bit integers in a by minimum using …\nReduce the packed 8-bit integers in a by minimum using …\nReduce the packed unsigned 16-bit integers in a by minimum …\nReduce the packed unsigned 8-bit integers in a by minimum …\nReduce the packed 16-bit integers in a by multiplication …\nReduce the packed 8-bit integers in a by multiplication …\nReduce the packed 16-bit integers in a by bitwise OR using …\nReduce the packed 8-bit integers in a by bitwise OR using …\nExtract the reduced argument of packed double-precision …\nExtract the reduced argument of packed half-precision …\nExtract the reduced argument of packed single-precision …\nExtract the reduced argument of the lower double-precision …\nExtract the reduced argument of the lower half-precision …\nExtract the reduced argument of the lower single-precision …\nExtract the reduced argument of the lower double-precision …\nExtract the reduced argument of the lower half-precision …\nExtract the reduced argument of the lower single-precision …\nRotate the bits in each packed 32-bit integer in a to the …\nRotate the bits in each packed 64-bit integer in a to the …\nRotate the bits in each packed 32-bit integer in a to the …\nRotate the bits in each packed 64-bit integer in a to the …\nRotate the bits in each packed 32-bit integer in a to the …\nRotate the bits in each packed 64-bit integer in a to the …\nRotate the bits in each packed 32-bit integer in a to the …\nRotate the bits in each packed 64-bit integer in a to the …\nRound packed double-precision (64-bit) floating-point …\nRound packed half-precision (16-bit) floating-point …\nRound packed single-precision (32-bit) floating-point …\nRound the lower double-precision (64-bit) floating-point …\nRound the lower half-precision (16-bit) floating-point …\nRound the lower single-precision (32-bit) floating-point …\nRound the lower double-precision (64-bit) floating-point …\nRound the lower half-precision (16-bit) floating-point …\nRound the lower single-precision (32-bit) floating-point …\nCompute the approximate reciprocal square root of packed …\nCompute the approximate reciprocal square root of packed …\nCompute the approximate reciprocal square root of the …\nCompute the approximate reciprocal square root of the …\nCompute the approximate reciprocal square root of packed …\nCompute the approximate reciprocal square root of the …\nScale the packed double-precision (64-bit) floating-point …\nScale the packed half-precision (16-bit) floating-point …\nScale the packed single-precision (32-bit) floating-point …\nScale the packed double-precision (64-bit) floating-point …\nScale the packed single-precision (32-bit) floating-point …\nScale the packed single-precision (32-bit) floating-point …\nScale the packed double-precision (64-bit) floating-point …\nScale the packed single-precision (32-bit) floating-point …\nScale the packed single-precision (32-bit) floating-point …\nBroadcast 16-bit integer a to all elements of dst using …\nBroadcast 32-bit integer a to all elements of dst using …\nBroadcast 64-bit integer a to all elements of dst using …\nBroadcast 8-bit integer a to all elements of dst using …\nConcatenate packed 16-bit integers in a and b producing an …\nConcatenate packed 32-bit integers in a and b producing an …\nConcatenate packed 64-bit integers in a and b producing an …\nConcatenate packed 16-bit integers in a and b producing an …\nConcatenate packed 32-bit integers in a and b producing an …\nConcatenate packed 64-bit integers in a and b producing an …\nConcatenate packed 16-bit integers in b and a producing an …\nConcatenate packed 32-bit integers in b and a producing an …\nConcatenate packed 64-bit integers in b and a producing an …\nConcatenate packed 16-bit integers in b and a producing an …\nConcatenate packed 32-bit integers in b and a producing an …\nConcatenate packed 64-bit integers in b and a producing an …\nShuffle 32-bit integers in a within 128-bit lanes using …\nShuffle 8-bit integers in a within 128-bit lanes using the …\nShuffle double-precision (64-bit) floating-point elements …\nShuffle single-precision (32-bit) floating-point elements …\nShuffle 16-bit integers in the high 64 bits of 128-bit …\nShuffle 16-bit integers in the low 64 bits of 128-bit …\nShift packed 16-bit integers in a left by count while …\nShift packed 32-bit integers in a left by count while …\nShift packed 64-bit integers in a left by count while …\nShift packed 16-bit integers in a left by imm8 while …\nShift packed 32-bit integers in a left by imm8 while …\nShift packed 64-bit integers in a left by imm8 while …\nShift packed 16-bit integers in a left by the amount …\nShift packed 32-bit integers in a left by the amount …\nShift packed 64-bit integers in a left by the amount …\nCompute the square root of packed double-precision …\nCompute the square root of packed half-precision (16-bit) …\nCompute the square root of packed single-precision …\nCompute the square root of the lower double-precision …\nCompute the square root of the lower half-precision …\nCompute the square root of the lower single-precision …\nCompute the square root of the lower double-precision …\nCompute the square root of the lower half-precision …\nCompute the square root of the lower single-precision …\nShift packed 16-bit integers in a right by count while …\nShift packed 32-bit integers in a right by count while …\nShift packed 64-bit integers in a right by count while …\nShift packed 16-bit integers in a right by imm8 while …\nShift packed 32-bit integers in a right by imm8 while …\nShift packed 64-bit integers in a right by imm8 while …\nShift packed 16-bit integers in a right by the amount …\nShift packed 32-bit integers in a right by the amount …\nShift packed 64-bit integers in a right by the amount …\nShift packed 16-bit integers in a right by count while …\nShift packed 32-bit integers in a right by count while …\nShift packed 64-bit integers in a right by count while …\nShift packed 16-bit integers in a right by imm8 while …\nShift packed 32-bit integers in a right by imm8 while …\nShift packed 64-bit integers in a right by imm8 while …\nShift packed 16-bit integers in a right by the amount …\nShift packed 32-bit integers in a right by the amount …\nShift packed 64-bit integers in a right by the amount …\nStore packed 32-bit integers from a into memory using …\nStore packed 64-bit integers from a into memory using …\nStore packed double-precision (64-bit) floating-point …\nStore packed single-precision (32-bit) floating-point …\nStore a double-precision (64-bit) floating-point element …\nStore the lower half-precision (16-bit) floating-point …\nStore a single-precision (32-bit) floating-point element …\nStore packed 16-bit integers from a into memory using …\nStore packed 32-bit integers from a into memory using …\nStore packed 64-bit integers from a into memory using …\nStore packed 8-bit integers from a into memory using …\nStore packed double-precision (64-bit) floating-point …\nStore packed single-precision (32-bit) floating-point …\nSubtract packed 16-bit integers in b from packed 16-bit …\nSubtract packed 32-bit integers in b from packed 32-bit …\nSubtract packed 64-bit integers in b from packed 64-bit …\nSubtract packed 8-bit integers in b from packed 8-bit …\nSubtract packed double-precision (64-bit) floating-point …\nSubtract packed half-precision (16-bit) floating-point …\nSubtract packed single-precision (32-bit) floating-point …\nSubtract the lower double-precision (64-bit) …\nSubtract the lower half-precision (16-bit) floating-point …\nSubtract the lower single-precision (32-bit) …\nSubtract the lower double-precision (64-bit) …\nSubtract the lower half-precision (16-bit) floating-point …\nSubtract the lower single-precision (32-bit) …\nSubtract packed signed 16-bit integers in b from packed …\nSubtract packed signed 8-bit integers in b from packed …\nSubtract packed unsigned 16-bit integers in b from packed …\nSubtract packed unsigned 8-bit integers in b from packed …\nBitwise ternary logic that provides the capability to …\nBitwise ternary logic that provides the capability to …\nCompute the bitwise AND of packed 16-bit integers in a and …\nCompute the bitwise AND of packed 32-bit integers in a and …\nCompute the bitwise AND of packed 64-bit integers in a and …\nCompute the bitwise AND of packed 8-bit integers in a and …\nCompute the bitwise NAND of packed 16-bit integers in a …\nCompute the bitwise NAND of packed 32-bit integers in a …\nCompute the bitwise NAND of packed 64-bit integers in a …\nCompute the bitwise NAND of packed 8-bit integers in a and …\nUnpack and interleave 16-bit integers from the high half …\nUnpack and interleave 32-bit integers from the high half …\nUnpack and interleave 64-bit integers from the high half …\nUnpack and interleave 8-bit integers from the high half of …\nUnpack and interleave double-precision (64-bit) …\nUnpack and interleave single-precision (32-bit) …\nUnpack and interleave 16-bit integers from the low half of …\nUnpack and interleave 32-bit integers from the low half of …\nUnpack and interleave 64-bit integers from the low half of …\nUnpack and interleave 8-bit integers from the low half of …\nUnpack and interleave double-precision (64-bit) …\nUnpack and interleave single-precision (32-bit) …\nCompute the bitwise XOR of packed 32-bit integers in a and …\nCompute the bitwise XOR of packed 64-bit integers in a and …\nCompute the bitwise XOR of packed double-precision …\nCompute the bitwise XOR of packed single-precision …\nLoads packed 32-bit integers from memory pointed by …\nLoads packed 64-bit integers from memory pointed by …\nLoads packed double-precision (64-bit) floating-point …\nLoads packed single-precision (32-bit) floating-point …\nConditionally store 8-bit integer elements from <code>a</code> into …\nStores packed 32-bit integers from <code>a</code> into memory pointed …\nStores packed 64-bit integers from <code>a</code> into memory pointed …\nStores packed double-precision (64-bit) floating-point …\nStores packed single-precision (32-bit) floating-point …\nCompute the absolute value of packed signed 16-bit …\nCompute the absolute value of packed signed 32-bit …\nCompute the absolute value of packed signed 64-bit …\nCompute the absolute value of packed signed 8-bit integers …\nAdd packed 16-bit integers in a and b, and store the …\nAdd packed 32-bit integers in a and b, and store the …\nAdd packed 64-bit integers in a and b, and store the …\nAdd packed 8-bit integers in a and b, and store the …\nAdd packed double-precision (64-bit) floating-point …\nAdd packed half-precision (16-bit) floating-point elements …\nAdd packed single-precision (32-bit) floating-point …\nAdd the lower double-precision (64-bit) floating-point …\nAdd the lower half-precision (16-bit) floating-point …\nAdd the lower single-precision (32-bit) floating-point …\nAdd the lower double-precision (64-bit) floating-point …\nAdd the lower half-precision (16-bit) floating-point …\nAdd the lower single-precision (32-bit) floating-point …\nAdd packed signed 16-bit integers in a and b using …\nAdd packed signed 8-bit integers in a and b using …\nAdd packed unsigned 16-bit integers in a and b using …\nAdd packed unsigned 8-bit integers in a and b using …\nConcatenate a and b into a 32-byte immediate result, shift …\nConcatenate a and b into a 32-byte immediate result, shift …\nConcatenate pairs of 16-byte blocks in a and b into a …\nCompute the bitwise AND of packed 32-bit integers in a and …\nCompute the bitwise AND of packed 64-bit integers in a and …\nCompute the bitwise AND of packed double-precision …\nCompute the bitwise AND of packed single-precision …\nCompute the bitwise NOT of packed 32-bit integers in a and …\nCompute the bitwise NOT of packed 64-bit integers in a and …\nCompute the bitwise NOT of packed double-precision …\nCompute the bitwise NOT of packed single-precision …\nAverage packed unsigned 16-bit integers in a and b, and …\nAverage packed unsigned 8-bit integers in a and b, and …\nBroadcasts the lower 2 packed 32-bit integers from a to …\nBroadcast the low packed 8-bit integer from a to all …\nBroadcast the low packed 32-bit integer from a to all …\nBroadcast the low packed 64-bit integer from a to all …\nBroadcast the low single-precision (32-bit) floating-point …\nBroadcast the low packed 16-bit integer from a to all …\nMultiply packed complex numbers in a by the complex …\nMultiply the lower complex numbers in a by the complex …\nMultiply the lower complex numbers in a by the complex …\nContiguously store the active 16-bit integers in a (those …\nContiguously store the active 32-bit integers in a (those …\nContiguously store the active 64-bit integers in a (those …\nContiguously store the active 8-bit integers in a (those …\nContiguously store the active double-precision (64-bit) …\nContiguously store the active single-precision (32-bit) …\nTest each 32-bit element of a for equality with all other …\nTest each 64-bit element of a for equality with all other …\nCompute the complex conjugates of complex numbers in a, …\nConvert packed single-precision (32-bit) floating-point …\nConvert the lower double-precision (64-bit) floating-point …\nConvert the lower double-precision (64-bit) floating-point …\nConvert the lower half-precision (16-bit) floating-point …\nConvert the lower half-precision (16-bit) floating-point …\nConvert the lower single-precision (32-bit) floating-point …\nConvert the lower single-precision (32-bit) floating-point …\nSign extend packed 16-bit integers in a to packed 32-bit …\nSign extend packed 16-bit integers in a to packed 64-bit …\nConvert packed 16-bit integers in a to packed 8-bit …\nConvert packed signed 16-bit integers in a to packed …\nConvert packed 32-bit integers in a to packed 16-bit …\nSign extend packed 32-bit integers in a to packed 64-bit …\nConvert packed 32-bit integers in a to packed 8-bit …\nConvert packed signed 32-bit integers in a to packed …\nConvert packed signed 32-bit integers in a to packed …\nConvert packed signed 32-bit integers in a to packed …\nConvert packed 64-bit integers in a to packed 16-bit …\nConvert packed 64-bit integers in a to packed 32-bit …\nConvert packed 64-bit integers in a to packed 8-bit …\nConvert packed signed 64-bit integers in a to packed …\nConvert packed signed 64-bit integers in a to packed …\nConvert packed signed 64-bit integers in a to packed …\nSign extend packed 8-bit integers in a to packed 16-bit …\nSign extend packed 8-bit integers in a to packed 32-bit …\nSign extend packed 8-bit integers in the low 2 bytes of a …\nZero extend packed unsigned 16-bit integers in a to packed …\nZero extend packed unsigned 16-bit integers in the low 4 …\nConvert packed unsigned 16-bit integers in a to packed …\nZero extend packed unsigned 32-bit integers in a to packed …\nConvert packed unsigned 32-bit integers in a to packed …\nConvert packed unsigned 32-bit integers in a to packed …\nConvert packed unsigned 64-bit integers in a to packed …\nConvert packed unsigned 64-bit integers in a to packed …\nConvert packed unsigned 64-bit integers in a to packed …\nZero extend packed unsigned 8-bit integers in a to packed …\nZero extend packed unsigned 8-bit integers in th elow 4 …\nZero extend packed unsigned 8-bit integers in the low 2 …\nConvert packed single-precision (32-bit) floating-point …\nConverts packed single-precision (32-bit) floating-point …\nConverts packed BF16 (16-bit) floating-point elements in a …\nConvert packed double-precision (64-bit) floating-point …\nConvert packed double-precision (64-bit) floating-point …\nConvert packed double-precision (64-bit) floating-point …\nConvert packed double-precision (64-bit) floating-point …\nConvert packed double-precision (64-bit) floating-point …\nConvert packed double-precision (64-bit) floating-point …\nConvert packed half-precision (16-bit) floating-point …\nConvert packed half-precision (16-bit) floating-point …\nConvert packed half-precision (16-bit) floating-point …\nConvert packed half-precision (16-bit) floating-point …\nConvert packed half-precision (16-bit) floating-point …\nConvert packed half-precision (16-bit) floating-point …\nConvert packed half-precision (16-bit) floating-point …\nConvert packed half-precision (16-bit) floating-point …\nConvert packed single-precision (32-bit) floating-point …\nConvert packed single-precision (32-bit) floating-point …\nConvert packed single-precision (32-bit) floating-point …\nConvert packed single-precision (32-bit) floating-point …\nConvert packed single-precision (32-bit) floating-point …\nConvert the lower double-precision (64-bit) floating-point …\nConvert the lower double-precision (64-bit) floating-point …\nConvert packed signed 16-bit integers in a to packed 8-bit …\nConvert packed signed 32-bit integers in a to packed …\nConvert packed signed 32-bit integers in a to packed 8-bit …\nConvert packed signed 64-bit integers in a to packed …\nConvert packed signed 64-bit integers in a to packed …\nConvert packed signed 64-bit integers in a to packed 8-bit …\nConvert the lower half-precision (16-bit) floating-point …\nConvert the lower half-precision (16-bit) floating-point …\nConvert the lower single-precision (32-bit) floating-point …\nConvert the lower single-precision (32-bit) floating-point …\nConvert packed double-precision (64-bit) floating-point …\nConvert packed double-precision (64-bit) floating-point …\nConvert packed double-precision (64-bit) floating-point …\nConvert packed double-precision (64-bit) floating-point …\nConvert packed half-precision (16-bit) floating-point …\nConvert packed half-precision (16-bit) floating-point …\nConvert packed half-precision (16-bit) floating-point …\nConvert packed half-precision (16-bit) floating-point …\nConvert packed half-precision (16-bit) floating-point …\nConvert packed half-precision (16-bit) floating-point …\nConvert packed single-precision (32-bit) floating-point …\nConvert packed single-precision (32-bit) floating-point …\nConvert packed double-precision (32-bit) floating-point …\nConvert packed single-precision (32-bit) floating-point …\nConvert packed unsigned 16-bit integers in a to packed …\nConvert packed unsigned 32-bit integers in a to packed …\nConvert packed unsigned 32-bit integers in a to packed …\nConvert packed unsigned 64-bit integers in a to packed …\nConvert packed unsigned 64-bit integers in a to packed …\nConvert packed unsigned 64-bit integers in a to packed …\nConvert packed half-precision (16-bit) floating-point …\nConvert packed single-precision (32-bit) floating-point …\nCompute the sum of absolute differences (SADs) of …\nDivide packed double-precision (64-bit) floating-point …\nDivide packed half-precision (16-bit) floating-point …\nDivide packed single-precision (32-bit) floating-point …\nDivide the lower double-precision (64-bit) floating-point …\nDivide the lower half-precision (16-bit) floating-point …\nDivide the lower single-precision (32-bit) floating-point …\nDivide the lower double-precision (64-bit) floating-point …\nDivide the lower half-precision (16-bit) floating-point …\nDivide the lower single-precision (32-bit) floating-point …\nCompute dot-product of BF16 (16-bit) floating-point pairs …\nMultiply groups of 4 adjacent pairs of unsigned 8-bit …\nMultiply groups of 4 adjacent pairs of unsigned 8-bit …\nMultiply groups of 2 adjacent pairs of signed 16-bit …\nMultiply groups of 2 adjacent pairs of signed 16-bit …\nLoad contiguous active 16-bit integers from a (those with …\nLoad contiguous active 32-bit integers from a (those with …\nLoad contiguous active 64-bit integers from a (those with …\nLoad contiguous active 8-bit integers from a (those with …\nLoad contiguous active double-precision (64-bit) …\nLoad contiguous active single-precision (32-bit) …\nLoad contiguous active 16-bit integers from unaligned …\nLoad contiguous active 32-bit integers from unaligned …\nLoad contiguous active 64-bit integers from unaligned …\nLoad contiguous active 8-bit integers from unaligned …\nLoad contiguous active double-precision (64-bit) …\nLoad contiguous active single-precision (32-bit) …\nMultiply packed complex numbers in a by the complex …\nMultiply the lower complex number in a by the complex …\nMultiply the lower complex number in a by the complex …\nMultiply packed complex numbers in a by the complex …\nMultiply the lower complex numbers in a by the complex …\nMultiply the lower complex numbers in a by the complex …\nFix up packed double-precision (64-bit) floating-point …\nFix up packed single-precision (32-bit) floating-point …\nFix up the lower double-precision (64-bit) floating-point …\nFix up the lower single-precision (32-bit) floating-point …\nFix up the lower double-precision (64-bit) floating-point …\nFix up the lower single-precision (32-bit) floating-point …\nMultiply packed complex numbers in a and b, accumulate to …\nMultiply packed double-precision (64-bit) floating-point …\nMultiply packed half-precision (16-bit) floating-point …\nMultiply packed single-precision (32-bit) floating-point …\nMultiply the lower complex numbers in a and b, accumulate …\nMultiply the lower double-precision (64-bit) …\nMultiply the lower half-precision (16-bit) floating-point …\nMultiply the lower single-precision (32-bit) …\nMultiply the lower complex numbers in a and b, accumulate …\nMultiply the lower double-precision (64-bit) …\nMultiply the lower half-precision (16-bit) floating-point …\nMultiply the lower single-precision (32-bit) …\nMultiply packed double-precision (64-bit) floating-point …\nMultiply packed half-precision (16-bit) floating-point …\nMultiply packed single-precision (32-bit) floating-point …\nMultiply packed double-precision (64-bit) floating-point …\nMultiply packed half-precision (16-bit) floating-point …\nMultiply packed single-precision (32-bit) floating-point …\nMultiply the lower double-precision (64-bit) …\nMultiply the lower half-precision (16-bit) floating-point …\nMultiply the lower single-precision (32-bit) …\nMultiply the lower double-precision (64-bit) …\nMultiply the lower half-precision (16-bit) floating-point …\nMultiply the lower single-precision (32-bit) …\nMultiply packed double-precision (64-bit) floating-point …\nMultiply packed half-precision (16-bit) floating-point …\nMultiply packed single-precision (32-bit) floating-point …\nMultiply packed complex numbers in a and b, and store the …\nMultiply the lower complex numbers in a and b, and store …\nMultiply the lower complex numbers in a and b, and store …\nMultiply packed double-precision (64-bit) floating-point …\nMultiply packed half-precision (16-bit) floating-point …\nMultiply packed single-precision (32-bit) floating-point …\nMultiply the lower double-precision (64-bit) …\nMultiply the lower half-precision (16-bit) floating-point …\nMultiply the lower single-precision (32-bit) …\nMultiply the lower double-precision (64-bit) …\nMultiply the lower half-precision (16-bit) floating-point …\nMultiply the lower single-precision (32-bit) …\nMultiply packed double-precision (64-bit) floating-point …\nMultiply packed half-precision (16-bit) floating-point …\nMultiply packed single-precision (32-bit) floating-point …\nMultiply the lower double-precision (64-bit) …\nMultiply the lower half-precision (16-bit) floating-point …\nMultiply the lower single-precision (32-bit) …\nMultiply the lower double-precision (64-bit) …\nMultiply the lower half-precision (16-bit) floating-point …\nMultiply the lower single-precision (32-bit) …\nConvert the exponent of each packed double-precision …\nConvert the exponent of each packed half-precision …\nConvert the exponent of each packed single-precision …\nConvert the exponent of the lower double-precision …\nConvert the exponent of the lower half-precision (16-bit) …\nConvert the exponent of the lower single-precision …\nConvert the exponent of the lower double-precision …\nConvert the exponent of the lower half-precision (16-bit) …\nConvert the exponent of the lower single-precision …\nNormalize the mantissas of packed double-precision …\nNormalize the mantissas of packed half-precision (16-bit) …\nNormalize the mantissas of packed single-precision …\nNormalize the mantissas of the lower double-precision …\nNormalize the mantissas of the lower half-precision …\nNormalize the mantissas of the lower single-precision …\nNormalize the mantissas of the lower double-precision …\nNormalize the mantissas of the lower half-precision …\nNormalize the mantissas of the lower single-precision …\nPerforms an affine transformation on the packed bytes in x.\nPerforms an affine transformation on the inverted packed …\nPerforms a multiplication in GF(2^8) on the packed bytes. …\nLoad packed 32-bit integers from memory into dst using …\nLoad packed 64-bit integers from memory into dst using …\nLoad packed double-precision (64-bit) floating-point …\nLoad packed single-precision (32-bit) floating-point …\nLoad a double-precision (64-bit) floating-point element …\nLoad a half-precision (16-bit) floating-point element from …\nLoad a single-precision (32-bit) floating-point element …\nLoad packed 16-bit integers from memory into dst using …\nLoad packed 32-bit integers from memory into dst using …\nLoad packed 64-bit integers from memory into dst using …\nLoad packed 8-bit integers from memory into dst using …\nLoad packed double-precision (64-bit) floating-point …\nLoad packed single-precision (32-bit) floating-point …\nCounts the number of leading zero bits in each packed …\nCounts the number of leading zero bits in each packed …\nMultiply packed unsigned 52-bit integers in each 64-bit …\nMultiply packed unsigned 52-bit integers in each 64-bit …\nMultiply packed signed 16-bit integers in a and b, …\nMultiply packed unsigned 8-bit integers in a by packed …\nCompare packed signed 16-bit integers in a and b, and …\nCompare packed signed 32-bit integers in a and b, and …\nCompare packed signed 64-bit integers in a and b, and …\nCompare packed signed 8-bit integers in a and b, and store …\nCompare packed unsigned 16-bit integers in a and b, and …\nCompare packed unsigned 32-bit integers in a and b, and …\nCompare packed unsigned 64-bit integers in a and b, and …\nCompare packed unsigned 8-bit integers in a and b, and …\nCompare packed double-precision (64-bit) floating-point …\nCompare packed half-precision (16-bit) floating-point …\nCompare packed single-precision (32-bit) floating-point …\nCompare the lower double-precision (64-bit) floating-point …\nCompare the lower half-precision (16-bit) floating-point …\nCompare the lower single-precision (32-bit) floating-point …\nCompare the lower double-precision (64-bit) floating-point …\nCompare the lower half-precision (16-bit) floating-point …\nCompare the lower single-precision (32-bit) floating-point …\nCompare packed signed 16-bit integers in a and b, and …\nCompare packed signed 32-bit integers in a and b, and …\nCompare packed signed 64-bit integers in a and b, and …\nCompare packed signed 8-bit integers in a and b, and store …\nCompare packed unsigned 16-bit integers in a and b, and …\nCompare packed unsigned 32-bit integers in a and b, and …\nCompare packed unsigned 64-bit integers in a and b, and …\nCompare packed unsigned 8-bit integers in a and b, and …\nCompare packed double-precision (64-bit) floating-point …\nCompare packed half-precision (16-bit) floating-point …\nCompare packed single-precision (32-bit) floating-point …\nCompare the lower double-precision (64-bit) floating-point …\nCompare the lower half-precision (16-bit) floating-point …\nCompare the lower single-precision (32-bit) floating-point …\nCompare the lower double-precision (64-bit) floating-point …\nCompare the lower half-precision (16-bit) floating-point …\nCompare the lower single-precision (32-bit) floating-point …\nMove packed 16-bit integers from a into dst using zeromask …\nMove packed 32-bit integers from a into dst using zeromask …\nMove packed 64-bit integers from a into dst using zeromask …\nMove packed 8-bit integers from a into dst using zeromask …\nMove packed double-precision (64-bit) floating-point …\nMove packed single-precision (32-bit) floating-point …\nMove the lower double-precision (64-bit) floating-point …\nMove the lower half-precision (16-bit) floating-point …\nMove the lower single-precision (32-bit) floating-point …\nDuplicate even-indexed double-precision (64-bit) …\nDuplicate odd-indexed single-precision (32-bit) …\nDuplicate even-indexed single-precision (32-bit) …\nMultiply the low signed 32-bit integers from each packed …\nMultiply the low unsigned 32-bit integers from each packed …\nMultiply packed complex numbers in a and b, and store the …\nMultiply packed double-precision (64-bit) floating-point …\nMultiply packed half-precision (16-bit) floating-point …\nMultiply packed single-precision (32-bit) floating-point …\nMultiply the lower complex numbers in a and b, and store …\nMultiply the lower double-precision (64-bit) …\nMultiply the lower half-precision (16-bit) floating-point …\nMultiply the lower single-precision (32-bit) …\nMultiply the lower complex numbers in a and b, and store …\nMultiply the lower double-precision (64-bit) …\nMultiply the lower half-precision (16-bit) floating-point …\nMultiply the lower single-precision (32-bit) …\nMultiply the packed signed 16-bit integers in a and b, …\nMultiply the packed unsigned 16-bit integers in a and b, …\nMultiply packed signed 16-bit integers in a and b, …\nMultiply the packed 16-bit integers in a and b, producing …\nMultiply the packed 32-bit integers in a and b, producing …\nMultiply packed 64-bit integers in <code>a</code> and <code>b</code>, producing …\nFor each 64-bit element in b, select 8 unaligned bytes …\nCompute the bitwise OR of packed 32-bit integers in a and …\nCompute the bitwise OR of packed 64-bit integers in a and …\nCompute the bitwise OR of packed double-precision (64-bit) …\nCompute the bitwise OR of packed single-precision (32-bit) …\nConvert packed signed 16-bit integers from a and b to …\nConvert packed signed 32-bit integers from a and b to …\nConvert packed signed 16-bit integers from a and b to …\nConvert packed signed 32-bit integers from a and b to …\nShuffle double-precision (64-bit) floating-point elements …\nShuffle single-precision (32-bit) floating-point elements …\nShuffle double-precision (64-bit) floating-point elements …\nShuffle single-precision (32-bit) floating-point elements …\nShuffle 16-bit integers in a and b across lanes using the …\nShuffle 32-bit integers in a and b across lanes using the …\nShuffle 64-bit integers in a and b across lanes using the …\nShuffle 8-bit integers in a and b across lanes using the …\nShuffle double-precision (64-bit) floating-point elements …\nShuffle single-precision (32-bit) floating-point elements …\nShuffle 16-bit integers in a across lanes using the …\nShuffle 8-bit integers in a across lanes using the …\nFor each packed 16-bit integer maps the value to the …\nFor each packed 32-bit integer maps the value to the …\nFor each packed 64-bit integer maps the value to the …\nFor each packed 8-bit integer maps the value to the number …\nCalculate the max, min, absolute max, or absolute min …\nCalculate the max, min, absolute max, or absolute min …\nCalculate the max, min, absolute max, or absolute min …\nCalculate the max, min, absolute max, or absolute min …\nCalculate the max, min, absolute max, or absolute min …\nCalculate the max, min, absolute max, or absolute min …\nCompute the approximate reciprocal of packed …\nCompute the approximate reciprocal of packed …\nCompute the approximate reciprocal of the lower …\nCompute the approximate reciprocal of the lower …\nCompute the approximate reciprocal of packed 16-bit …\nCompute the approximate reciprocal of the lower …\nExtract the reduced argument of packed double-precision …\nExtract the reduced argument of packed half-precision …\nExtract the reduced argument of packed single-precision …\nExtract the reduced argument of the lower double-precision …\nExtract the reduced argument of the lower half-precision …\nExtract the reduced argument of the lower single-precision …\nExtract the reduced argument of the lower double-precision …\nExtract the reduced argument of the lower half-precision …\nExtract the reduced argument of the lower single-precision …\nRotate the bits in each packed 32-bit integer in a to the …\nRotate the bits in each packed 64-bit integer in a to the …\nRotate the bits in each packed 32-bit integer in a to the …\nRotate the bits in each packed 64-bit integer in a to the …\nRotate the bits in each packed 32-bit integer in a to the …\nRotate the bits in each packed 64-bit integer in a to the …\nRotate the bits in each packed 32-bit integer in a to the …\nRotate the bits in each packed 64-bit integer in a to the …\nRound packed double-precision (64-bit) floating-point …\nRound packed half-precision (16-bit) floating-point …\nRound packed single-precision (32-bit) floating-point …\nRound the lower double-precision (64-bit) floating-point …\nRound the lower half-precision (16-bit) floating-point …\nRound the lower single-precision (32-bit) floating-point …\nRound the lower double-precision (64-bit) floating-point …\nRound the lower half-precision (16-bit) floating-point …\nRound the lower single-precision (32-bit) floating-point …\nCompute the approximate reciprocal square root of packed …\nCompute the approximate reciprocal square root of packed …\nCompute the approximate reciprocal square root of the …\nCompute the approximate reciprocal square root of the …\nCompute the approximate reciprocal square root of packed …\nCompute the approximate reciprocal square root of the …\nScale the packed double-precision (64-bit) floating-point …\nScale the packed half-precision (16-bit) floating-point …\nScale the packed single-precision (32-bit) floating-point …\nScale the packed double-precision (64-bit) floating-point …\nScale the packed single-precision (32-bit) floating-point …\nScale the packed single-precision (32-bit) floating-point …\nScale the packed double-precision (64-bit) floating-point …\nScale the packed single-precision (32-bit) floating-point …\nScale the packed single-precision (32-bit) floating-point …\nBroadcast the low packed 16-bit integer from a to all …\nBroadcast 32-bit integer a to all elements of dst using …\nBroadcast 64-bit integer a to all elements of dst using …\nBroadcast 8-bit integer a to all elements of dst using …\nConcatenate packed 16-bit integers in a and b producing an …\nConcatenate packed 32-bit integers in a and b producing an …\nConcatenate packed 64-bit integers in a and b producing an …\nConcatenate packed 16-bit integers in a and b producing an …\nConcatenate packed 32-bit integers in a and b producing an …\nConcatenate packed 64-bit integers in a and b producing an …\nConcatenate packed 16-bit integers in b and a producing an …\nConcatenate packed 32-bit integers in b and a producing an …\nConcatenate packed 64-bit integers in b and a producing an …\nConcatenate packed 16-bit integers in b and a producing an …\nConcatenate packed 32-bit integers in b and a producing an …\nConcatenate packed 64-bit integers in b and a producing an …\nShuffle 32-bit integers in a within 128-bit lanes using …\nShuffle packed 8-bit integers in a according to shuffle …\nShuffle double-precision (64-bit) floating-point elements …\nShuffle single-precision (32-bit) floating-point elements …\nShuffle 16-bit integers in the high 64 bits of 128-bit …\nShuffle 16-bit integers in the low 64 bits of 128-bit …\nShift packed 16-bit integers in a left by count while …\nShift packed 32-bit integers in a left by count while …\nShift packed 64-bit integers in a left by count while …\nShift packed 16-bit integers in a left by imm8 while …\nShift packed 32-bit integers in a left by imm8 while …\nShift packed 64-bit integers in a left by imm8 while …\nShift packed 16-bit integers in a left by the amount …\nShift packed 32-bit integers in a left by the amount …\nShift packed 64-bit integers in a left by the amount …\nCompute the square root of packed double-precision …\nCompute the square root of packed half-precision (16-bit) …\nCompute the square root of packed single-precision …\nCompute the square root of the lower double-precision …\nCompute the square root of the lower half-precision …\nCompute the square root of the lower single-precision …\nCompute the square root of the lower double-precision …\nCompute the square root of the lower half-precision …\nCompute the square root of the lower single-precision …\nShift packed 16-bit integers in a right by count while …\nShift packed 32-bit integers in a right by count while …\nShift packed 64-bit integers in a right by count while …\nShift packed 16-bit integers in a right by imm8 while …\nShift packed 32-bit integers in a right by imm8 while …\nShift packed 64-bit integers in a right by imm8 while …\nShift packed 16-bit integers in a right by the amount …\nShift packed 32-bit integers in a right by the amount …\nShift packed 64-bit integers in a right by the amount …\nShift packed 16-bit integers in a right by count while …\nShift packed 32-bit integers in a right by count while …\nShift packed 64-bit integers in a right by count while …\nShift packed 16-bit integers in a right by imm8 while …\nShift packed 32-bit integers in a right by imm8 while …\nShift packed 64-bit integers in a right by imm8 while …\nShift packed 16-bit integers in a right by the amount …\nShift packed 32-bit integers in a right by the amount …\nShift packed 64-bit integers in a right by the amount …\nSubtract packed 16-bit integers in b from packed 16-bit …\nSubtract packed 32-bit integers in b from packed 32-bit …\nSubtract packed 64-bit integers in b from packed 64-bit …\nSubtract packed 8-bit integers in b from packed 8-bit …\nSubtract packed double-precision (64-bit) floating-point …\nSubtract packed half-precision (16-bit) floating-point …\nSubtract packed single-precision (32-bit) floating-point …\nSubtract the lower double-precision (64-bit) …\nSubtract the lower half-precision (16-bit) floating-point …\nSubtract the lower single-precision (32-bit) …\nSubtract the lower double-precision (64-bit) …\nSubtract the lower half-precision (16-bit) floating-point …\nSubtract the lower single-precision (32-bit) …\nSubtract packed signed 16-bit integers in b from packed …\nSubtract packed signed 8-bit integers in b from packed …\nSubtract packed unsigned 16-bit integers in b from packed …\nSubtract packed unsigned 8-bit integers in b from packed …\nBitwise ternary logic that provides the capability to …\nBitwise ternary logic that provides the capability to …\nUnpack and interleave 16-bit integers from the high half …\nUnpack and interleave 32-bit integers from the high half …\nUnpack and interleave 64-bit integers from the high half …\nUnpack and interleave 8-bit integers from the high half of …\nUnpack and interleave double-precision (64-bit) …\nUnpack and interleave single-precision (32-bit) …\nUnpack and interleave 16-bit integers from the low half of …\nUnpack and interleave 32-bit integers from the low half of …\nUnpack and interleave 64-bit integers from the low half of …\nUnpack and interleave 8-bit integers from the low half of …\nUnpack and interleave double-precision (64-bit) …\nUnpack and interleave single-precision (32-bit) …\nCompute the bitwise XOR of packed 32-bit integers in a and …\nCompute the bitwise XOR of packed 64-bit integers in a and …\nCompute the bitwise XOR of packed double-precision …\nCompute the bitwise XOR of packed single-precision …\nCompares packed 16-bit integers in <code>a</code> and <code>b</code>, and returns …\nCompares packed 32-bit integers in <code>a</code> and <code>b</code>, and returns …\nCompare packed signed 64-bit integers in a and b, and …\nCompares packed 8-bit integers in <code>a</code> and <code>b</code> and returns …\nCompares packed unsigned 16-bit integers in <code>a</code> and <code>b</code>, and …\nCompares packed unsigned 32-bit integers in <code>a</code> and <code>b</code>, and …\nCompare packed unsigned 64-bit integers in a and b, and …\nCompares packed unsigned 8-bit integers in <code>a</code> and <code>b</code>, and …\nReturns a new vector with the maximum values from …\nCompare packed half-precision (16-bit) floating-point …\nCompares packed single-precision (32-bit) floating-point …\nCompare the lower double-precision (64-bit) floating-point …\nCompare the lower half-precision (16-bit) floating-point …\nCompare the lower single-precision (32-bit) floating-point …\nReturns a new vector with the low element of <code>a</code> replaced by …\nCompare the lower half-precision (16-bit) floating-point …\nCompares the first single-precision (32-bit) …\nPerforms a serializing operation on all load-from-memory …\nCompares packed 16-bit integers in <code>a</code> and <code>b</code>, and returns …\nCompares packed 32-bit integers in <code>a</code> and <code>b</code>, and returns …\nCompare packed signed 64-bit integers in a and b, and …\nCompares packed 8-bit integers in <code>a</code> and <code>b</code> and returns …\nCompares packed unsigned 16-bit integers in <code>a</code> and <code>b</code>, and …\nCompares packed unsigned 32-bit integers in <code>a</code> and <code>b</code>, and …\nCompare packed unsigned 64-bit integers in a and b, and …\nCompares packed unsigned 8-bit integers in <code>a</code> and <code>b</code>, and …\nReturns a new vector with the minimum values from …\nCompare packed half-precision (16-bit) floating-point …\nCompares packed single-precision (32-bit) floating-point …\nCompare the lower double-precision (64-bit) floating-point …\nCompare the lower half-precision (16-bit) floating-point …\nCompare the lower single-precision (32-bit) floating-point …\nReturns a new vector with the low element of <code>a</code> replaced by …\nCompare the lower half-precision (16-bit) floating-point …\nCompares the first single-precision (32-bit) …\nFinds the minimum unsigned 16-bit element in the 128-bit __…\nLoads 4 32-bit integer elements from memory starting at …\nLoads 2 64-bit integer elements from memory starting at …\nLoads 2 double-precision (64-bit) floating-point elements …\nLoads 4 single-precision (32-bit) floating-point elements …\nLoads 2 32-bit integer elements from memory starting at …\nLoads 2 64-bit integer elements from memory starting at …\nLoads 2 double-precision (64-bit) floating-point elements …\nLoads 2 single-precision (32-bit) floating-point elements …\nReturns a vector where the low element is extracted from <code>a</code> …\nConstructs a 128-bit floating-point vector of <code>[2 x double]</code>…\nMove the lower half-precision (16-bit) floating-point …\nReturns a <code>__m128</code> with the first component from <code>b</code> and the …\nDuplicate the low double-precision (64-bit) floating-point …\nDuplicate odd-indexed single-precision (32-bit) …\nCombine higher half of <code>a</code> and <code>b</code>. The higher half of <code>b</code> …\nDuplicate even-indexed single-precision (32-bit) …\nCombine lower half of <code>a</code> and <code>b</code>. The lower half of <code>b</code> …\nReturns a mask of the most significant bit of each element …\nReturns a mask of the most significant bit of each element …\nReturns a mask of the most significant bit of each element …\nSet each bit of mask register k based on the most …\nSet each bit of mask register k based on the most …\nSet each bit of mask register k based on the most …\nSet each bit of mask register k based on the most …\nSet each packed 16-bit integer in dst to all ones or all …\nSet each packed 32-bit integer in dst to all ones or all …\nSet each packed 64-bit integer in dst to all ones or all …\nSet each packed 8-bit integer in dst to all ones or all …\nSubtracts 8-bit unsigned integer values and computes the …\nMultiplies the low 32-bit integers from each packed 64-bit …\nMultiplies the low unsigned 32-bit integers from each …\nMultiply packed complex numbers in a and b, and store the …\nMultiplies packed double-precision (64-bit) floating-point …\nMultiply packed half-precision (16-bit) floating-point …\nMultiplies packed single-precision (32-bit) floating-point …\nMultiply the lower complex numbers in a and b, and store …\nMultiply the lower double-precision (64-bit) …\nMultiply the lower half-precision (16-bit) floating-point …\nMultiply the lower single-precision (32-bit) …\nMultiply the lower complex numbers in a and b, and store …\nReturns a new vector with the low element of <code>a</code> replaced by …\nMultiply the lower half-precision (16-bit) floating-point …\nMultiplies the first component of <code>a</code> and <code>b</code>, the other …\nMultiplies the packed 16-bit integers in <code>a</code> and <code>b</code>.\nMultiplies the packed unsigned 16-bit integers in <code>a</code> and <code>b</code>.\nMultiplies packed 16-bit signed integer values, truncate …\nMultiplies the packed 16-bit integers in <code>a</code> and <code>b</code>.\nMultiplies the packed 32-bit integers in <code>a</code> and <code>b</code>, …\nMultiply packed 64-bit integers in <code>a</code> and <code>b</code>, producing …\nFor each 64-bit element in b, select 8 unaligned bytes …\nCompute the bitwise OR of packed 32-bit integers in a and …\nCompute the bitwise OR of packed 64-bit integers in a and …\nComputes the bitwise OR of <code>a</code> and <code>b</code>.\nBitwise OR of packed single-precision (32-bit) …\nComputes the bitwise OR of 128 bits (representing integer …\nConverts packed 16-bit integers from <code>a</code> and <code>b</code> to packed …\nConverts packed 32-bit integers from <code>a</code> and <code>b</code> to packed …\nConverts packed 16-bit integers from <code>a</code> and <code>b</code> to packed …\nConverts packed 32-bit integers from <code>a</code> and <code>b</code> to packed …\nProvides a hint to the processor that the code sequence is …\nShuffles double-precision (64-bit) floating-point elements …\nShuffles single-precision (32-bit) floating-point elements …\nShuffles double-precision (64-bit) floating-point elements …\nShuffles single-precision (32-bit) floating-point elements …\nShuffle 16-bit integers in a and b across lanes using the …\nShuffle 32-bit integers in a and b across lanes using the …\nShuffle 64-bit integers in a and b across lanes using the …\nShuffle 8-bit integers in a and b across lanes using the …\nShuffle double-precision (64-bit) floating-point elements …\nShuffle half-precision (16-bit) floating-point elements in …\nShuffle single-precision (32-bit) floating-point elements …\nShuffle 16-bit integers in a across lanes using the …\nShuffle 8-bit integers in a across lanes using the …\nShuffle half-precision (16-bit) floating-point elements in …\nFor each packed 16-bit integer maps the value to the …\nFor each packed 32-bit integer maps the value to the …\nFor each packed 64-bit integer maps the value to the …\nFor each packed 8-bit integer maps the value to the number …\nFetch the cache line that contains address <code>p</code> using the …\nCalculate the max, min, absolute max, or absolute min …\nCalculate the max, min, absolute max, or absolute min …\nCalculate the max, min, absolute max, or absolute min …\nCalculate the max, min, absolute max, or absolute min …\nCompute the approximate reciprocal of packed …\nCompute the approximate reciprocal of packed …\nCompute the approximate reciprocal of the lower …\nCompute the approximate reciprocal of the lower …\nCompute the approximate reciprocal of packed 16-bit …\nReturns the approximate reciprocal of packed …\nCompute the approximate reciprocal of the lower …\nReturns the approximate reciprocal of the first …\nReduce the packed 16-bit integers in a by addition. …\nReduce the packed 8-bit integers in a by addition. Returns …\nReduce the packed half-precision (16-bit) floating-point …\nReduce the packed 16-bit integers in a by bitwise AND. …\nReduce the packed 8-bit integers in a by bitwise AND. …\nReduce the packed 16-bit integers in a by maximum. Returns …\nReduce the packed 8-bit integers in a by maximum. Returns …\nReduce the packed unsigned 16-bit integers in a by …\nReduce the packed unsigned 8-bit integers in a by maximum. …\nReduce the packed half-precision (16-bit) floating-point …\nReduce the packed 16-bit integers in a by minimum. Returns …\nReduce the packed 8-bit integers in a by minimum. Returns …\nReduce the packed unsigned 16-bit integers in a by …\nReduce the packed unsigned 8-bit integers in a by minimum. …\nReduce the packed half-precision (16-bit) floating-point …\nReduce the packed 16-bit integers in a by multiplication. …\nReduce the packed 8-bit integers in a by multiplication. …\nReduce the packed half-precision (16-bit) floating-point …\nReduce the packed 16-bit integers in a by bitwise OR. …\nReduce the packed 8-bit integers in a by bitwise OR. …\nExtract the reduced argument of packed double-precision …\nExtract the reduced argument of packed half-precision …\nExtract the reduced argument of packed single-precision …\nExtract the reduced argument of the lower double-precision …\nExtract the reduced argument of the lower half-precision …\nExtract the reduced argument of the lower single-precision …\nExtract the reduced argument of the lower double-precision …\nExtract the reduced argument of the lower half-precision …\nExtract the reduced argument of the lower single-precision …\nRotate the bits in each packed 32-bit integer in a to the …\nRotate the bits in each packed 64-bit integer in a to the …\nRotate the bits in each packed 32-bit integer in a to the …\nRotate the bits in each packed 64-bit integer in a to the …\nRotate the bits in each packed 32-bit integer in a to the …\nRotate the bits in each packed 64-bit integer in a to the …\nRotate the bits in each packed 32-bit integer in a to the …\nRotate the bits in each packed 64-bit integer in a to the …\nRound the packed double-precision (64-bit) floating-point …\nRound the packed single-precision (32-bit) floating-point …\nRound the lower double-precision (64-bit) floating-point …\nRound the lower single-precision (32-bit) floating-point …\nRound packed double-precision (64-bit) floating-point …\nRound packed half-precision (16-bit) floating-point …\nRound packed single-precision (32-bit) floating-point …\nRound the lower double-precision (64-bit) floating-point …\nRound the lower half-precision (16-bit) floating-point …\nRound the lower single-precision (32-bit) floating-point …\nRound the lower double-precision (64-bit) floating-point …\nRound the lower half-precision (16-bit) floating-point …\nRound the lower single-precision (32-bit) floating-point …\nCompute the approximate reciprocal square root of packed …\nCompute the approximate reciprocal square root of packed …\nCompute the approximate reciprocal square root of the …\nCompute the approximate reciprocal square root of the …\nCompute the approximate reciprocal square root of packed …\nReturns the approximate reciprocal square root of packed …\nCompute the approximate reciprocal square root of the …\nReturns the approximate reciprocal square root of the …\nSum the absolute differences of packed unsigned 8-bit …\nScale the packed double-precision (64-bit) floating-point …\nScale the packed half-precision (16-bit) floating-point …\nScale the packed single-precision (32-bit) floating-point …\nScale the packed double-precision (64-bit) floating-point …\nScale the packed single-precision (32-bit) floating-point …\nScale the packed single-precision (32-bit) floating-point …\nScale the packed double-precision (64-bit) floating-point …\nScale the packed single-precision (32-bit) floating-point …\nScale the packed single-precision (32-bit) floating-point …\nBroadcasts 16-bit integer <code>a</code> to all elements.\nBroadcasts 32-bit integer <code>a</code> to all elements.\nBroadcasts 64-bit integer <code>a</code> to all elements.\nBroadcasts 8-bit integer <code>a</code> to all elements.\nBroadcasts double-precision (64-bit) floating-point value …\nBroadcast the half-precision (16-bit) floating-point value …\nConstruct a <code>__m128</code> with all element set to <code>a</code>.\nSets packed 16-bit integers with the supplied values.\nSets packed 32-bit integers with the supplied values.\nSets packed 64-bit integers with the supplied values, from …\nSets packed 8-bit integers with the supplied values.\nSets packed double-precision (64-bit) floating-point …\nBroadcasts double-precision (64-bit) floating-point value …\nSet packed half-precision (16-bit) floating-point elements …\nConstruct a <code>__m128</code> from four floating point values highest …\nAlias for <code>_mm_set1_ps</code>\nCopies double-precision (64-bit) floating-point element <code>a</code> …\nCopy half-precision (16-bit) floating-point elements from …\nConstruct a <code>__m128</code> with the lowest element set to <code>a</code> and …\nSets the MXCSR register with the 32-bit unsigned integer …\nSets packed 16-bit integers with the supplied values in …\nSets packed 32-bit integers with the supplied values in …\nSets packed 8-bit integers with the supplied values in …\nSets packed double-precision (64-bit) floating-point …\nSet packed half-precision (16-bit) floating-point elements …\nConstruct a <code>__m128</code> from four floating point values lowest …\nReturns packed double-precision (64-bit) floating-point …\nReturn vector of type __m128h with all elements set to …\nConstruct a <code>__m128</code> with all elements initialized to zero.\nReturns a vector with all elements set to zero.\nPerforms a serializing operation on all non-temporal (“…\nPerforms an intermediate calculation for the next four …\nPerforms the final calculation for the next four SHA1 …\nCalculate SHA1 state variable E after four rounds of …\nPerforms four rounds of SHA1 operation using an initial …\nPerforms an intermediate calculation for the next four …\nPerforms the final calculation for the next four SHA256 …\nPerforms 2 rounds of SHA256 operation using an initial …\nConcatenate packed 16-bit integers in a and b producing an …\nConcatenate packed 32-bit integers in a and b producing an …\nConcatenate packed 64-bit integers in a and b producing an …\nConcatenate packed 16-bit integers in a and b producing an …\nConcatenate packed 32-bit integers in a and b producing an …\nConcatenate packed 64-bit integers in a and b producing an …\nConcatenate packed 16-bit integers in b and a producing an …\nConcatenate packed 32-bit integers in b and a producing an …\nConcatenate packed 64-bit integers in b and a producing an …\nConcatenate packed 16-bit integers in b and a producing an …\nConcatenate packed 32-bit integers in b and a producing an …\nConcatenate packed 64-bit integers in b and a producing an …\nShuffles 32-bit integers in <code>a</code> using the control in <code>IMM8</code>.\nShuffles bytes from <code>a</code> according to the content of <code>b</code>.\nConstructs a 128-bit floating-point vector of <code>[2 x double]</code> …\nShuffles packed single-precision (32-bit) floating-point …\nShuffles 16-bit integers in the high 64 bits of <code>a</code> using …\nShuffles 16-bit integers in the low 64 bits of <code>a</code> using the …\nNegates packed 16-bit integers in <code>a</code> when the corresponding …\nNegates packed 32-bit integers in <code>a</code> when the corresponding …\nNegates packed 8-bit integers in <code>a</code> when the corresponding …\nShifts packed 16-bit integers in <code>a</code> left by <code>count</code> while …\nShifts packed 32-bit integers in <code>a</code> left by <code>count</code> while …\nShifts packed 64-bit integers in <code>a</code> left by <code>count</code> while …\nShifts packed 16-bit integers in <code>a</code> left by <code>IMM8</code> while …\nShifts packed 32-bit integers in <code>a</code> left by <code>IMM8</code> while …\nShifts packed 64-bit integers in <code>a</code> left by <code>IMM8</code> while …\nShifts <code>a</code> left by <code>IMM8</code> bytes while shifting in zeros.\nShift packed 16-bit integers in a left by the amount …\nShifts packed 32-bit integers in <code>a</code> left by the amount …\nShifts packed 64-bit integers in <code>a</code> left by the amount …\nThis is one of the two SM3 message scheduling intrinsics. …\nThis is one of the two SM3 message scheduling intrinsics. …\nThe intrinsic performs two rounds of SM3 operation using …\nThis intrinsic performs four rounds of SM4 key expansion. …\nThis intrinsic performs four rounds of SM4 encryption. The …\nReturns a new vector with the square root of each of the …\nCompute the square root of packed half-precision (16-bit) …\nReturns the square root of packed single-precision …\nCompute the square root of the lower double-precision …\nCompute the square root of the lower half-precision …\nCompute the square root of the lower single-precision …\nReturns a new vector with the low element of <code>a</code> replaced by …\nCompute the square root of the lower half-precision …\nReturns the square root of the first single-precision …\nShifts packed 16-bit integers in <code>a</code> right by <code>count</code> while …\nShifts packed 32-bit integers in <code>a</code> right by <code>count</code> while …\nShift packed 64-bit integers in a right by count while …\nShifts packed 16-bit integers in <code>a</code> right by <code>IMM8</code> while …\nShifts packed 32-bit integers in <code>a</code> right by <code>IMM8</code> while …\nShift packed 64-bit integers in a right by imm8 while …\nShift packed 16-bit integers in a right by the amount …\nShifts packed 32-bit integers in <code>a</code> right by the amount …\nShift packed 64-bit integers in a right by the amount …\nShifts packed 16-bit integers in <code>a</code> right by <code>count</code> while …\nShifts packed 32-bit integers in <code>a</code> right by <code>count</code> while …\nShifts packed 64-bit integers in <code>a</code> right by <code>count</code> while …\nShifts packed 16-bit integers in <code>a</code> right by <code>IMM8</code> while …\nShifts packed 32-bit integers in <code>a</code> right by <code>IMM8</code> while …\nShifts packed 64-bit integers in <code>a</code> right by <code>IMM8</code> while …\nShifts <code>a</code> right by <code>IMM8</code> bytes while shifting in zeros.\nShift packed 16-bit integers in a right by the amount …\nShifts packed 32-bit integers in <code>a</code> right by the amount …\nShifts packed 64-bit integers in <code>a</code> right by the amount …\nStores the lower double-precision (64-bit) floating-point …\nStores the lowest 32 bit float of <code>a</code> repeated four times …\nStore 128-bits (composed of 4 packed 32-bit integers) from …\nStore 128-bits (composed of 2 packed 64-bit integers) from …\nStores 128-bits (composed of 2 packed double-precision …\nStores the lower double-precision (64-bit) floating-point …\nStore 128-bits (composed of 8 packed half-precision …\nStores four 32-bit floats into <em>aligned</em> memory.\nAlias for <code>_mm_store1_ps</code>\nStores the lower 64 bits of a 128-bit vector of …\nStore the lower half-precision (16-bit) floating-point …\nStores 128-bits of integer data from <code>a</code> into memory.\nStores the lowest 32 bit float of <code>a</code> into memory.\nStores the upper 64 bits of a 128-bit vector of …\nStores the lower 64-bit integer <code>a</code> to a memory location.\nStores the lower 64 bits of a 128-bit vector of …\nStores 2 double-precision (64-bit) floating-point elements …\nStores four 32-bit floats into <em>aligned</em> memory in reverse …\nStore 128-bits (composed of 8 packed 16-bit integers) from …\nStore 128-bits (composed of 4 packed 32-bit integers) from …\nStore 128-bits (composed of 2 packed 64-bit integers) from …\nStore 128-bits (composed of 16 packed 8-bit integers) from …\nStores 128-bits (composed of 2 packed double-precision …\nStore 128-bits (composed of 8 packed half-precision …\nStores four 32-bit floats into memory. There are no …\nStores 128-bits of integer data from <code>a</code> into memory.\nStore 16-bit integer from the first element of a into …\nStore 32-bit integer from the first element of a into …\nStore 64-bit integer from the first element of a into …\nLoad 128-bits of integer data from memory into dst. …\nStores a 128-bit floating point vector of <code>[2 x double]</code> to …\nStores <code>a</code> into the memory at <code>mem_addr</code> using a non-temporal …\nNon-temporal store of <code>a.0</code> into <code>p</code>.\nStores a 128-bit integer vector to a 128-bit aligned …\nStores a 32-bit integer value in the specified memory …\nStores a 64-bit integer value in the specified memory …\nNon-temporal store of <code>a.0</code> into <code>p</code>.\nSubtracts packed 16-bit integers in <code>b</code> from packed 16-bit …\nSubtract packed 32-bit integers in <code>b</code> from packed 32-bit …\nSubtract packed 64-bit integers in <code>b</code> from packed 64-bit …\nSubtracts packed 8-bit integers in <code>b</code> from packed 8-bit …\nSubtract packed double-precision (64-bit) floating-point …\nSubtract packed half-precision (16-bit) floating-point …\nSubtracts packed single-precision (32-bit) floating-point …\nSubtract the lower double-precision (64-bit) …\nSubtract the lower half-precision (16-bit) floating-point …\nSubtract the lower single-precision (32-bit) …\nReturns a new vector with the low element of <code>a</code> replaced by …\nSubtract the lower half-precision (16-bit) floating-point …\nSubtracts the first component of <code>b</code> from <code>a</code>, the other …\nSubtract packed 16-bit integers in <code>b</code> from packed 16-bit …\nSubtract packed 8-bit integers in <code>b</code> from packed 8-bit …\nSubtract packed unsigned 16-bit integers in <code>b</code> from packed …\nSubtract packed unsigned 8-bit integers in <code>b</code> from packed …\nBitwise ternary logic that provides the capability to …\nBitwise ternary logic that provides the capability to …\nTests whether the specified bits in <code>a</code> 128-bit integer …\nTests whether the specified bits in a 128-bit integer …\nCompute the bitwise AND of packed 16-bit integers in a and …\nCompute the bitwise AND of packed 32-bit integers in a and …\nCompute the bitwise AND of packed 64-bit integers in a and …\nCompute the bitwise AND of packed 8-bit integers in a and …\nTests whether the specified bits in a 128-bit integer …\nComputes the bitwise AND of 128 bits (representing …\nComputes the bitwise AND of 128 bits (representing …\nTests whether the specified bits in a 128-bit integer …\nCompute the bitwise NAND of packed 16-bit integers in a …\nCompute the bitwise NAND of packed 32-bit integers in a …\nCompute the bitwise NAND of packed 64-bit integers in a …\nCompute the bitwise NAND of packed 8-bit integers in a and …\nComputes the bitwise AND of 128 bits (representing …\nComputes the bitwise AND of 128 bits (representing …\nTests whether the specified bits in a 128-bit integer …\nComputes the bitwise AND of 128 bits (representing …\nComputes the bitwise AND of 128 bits (representing …\nTests whether the specified bits in a 128-bit integer …\nCounts the number of trailing least significant zero bits.\nCounts the number of trailing least significant zero bits.\nCompares the lower element of <code>a</code> and <code>b</code> for equality.\nCompare the lower half-precision (16-bit) floating-point …\nCompares two 32-bit floats from the low-order bits of <code>a</code> …\nCompares the lower element of <code>a</code> and <code>b</code> for …\nCompare the lower half-precision (16-bit) floating-point …\nCompares two 32-bit floats from the low-order bits of <code>a</code> …\nCompares the lower element of <code>a</code> and <code>b</code> for greater-than.\nCompare the lower half-precision (16-bit) floating-point …\nCompares two 32-bit floats from the low-order bits of <code>a</code> …\nCompares the lower element of <code>a</code> and <code>b</code> for …\nCompare the lower half-precision (16-bit) floating-point …\nCompares two 32-bit floats from the low-order bits of <code>a</code> …\nCompares the lower element of <code>a</code> and <code>b</code> for less-than.\nCompare the lower half-precision (16-bit) floating-point …\nCompares two 32-bit floats from the low-order bits of <code>a</code> …\nCompares the lower element of <code>a</code> and <code>b</code> for not-equal.\nCompare the lower half-precision (16-bit) floating-point …\nCompares two 32-bit floats from the low-order bits of <code>a</code> …\nReturns vector of type __m128d with indeterminate …\nReturn vector of type <code>__m128h</code> with indetermination …\nReturns vector of type __m128 with indeterminate …\nReturns vector of type __m128i with indeterminate …\nUnpacks and interleave 16-bit integers from the high half …\nUnpacks and interleave 32-bit integers from the high half …\nUnpacks and interleave 64-bit integers from the high half …\nUnpacks and interleave 8-bit integers from the high half …\nThe resulting <code>__m128d</code> element is composed by the low-order …\nUnpacks and interleave single-precision (32-bit) …\nUnpacks and interleave 16-bit integers from the low half …\nUnpacks and interleave 32-bit integers from the low half …\nUnpacks and interleave 64-bit integers from the low half …\nUnpacks and interleave 8-bit integers from the low half of …\nThe resulting <code>__m128d</code> element is composed by the …\nUnpacks and interleave single-precision (32-bit) …\nCompute the bitwise XOR of packed 32-bit integers in a and …\nCompute the bitwise XOR of packed 64-bit integers in a and …\nComputes the bitwise XOR of <code>a</code> and <code>b</code>.\nBitwise exclusive OR of packed single-precision (32-bit) …\nComputes the bitwise XOR of 128 bits (representing integer …\nUnsigned multiply without affecting flags.\nUnsigned multiply without affecting flags.\nScatter contiguous low order bits of <code>a</code> to the result at …\nScatter contiguous low order bits of <code>a</code> to the result at …\nGathers the bits of <code>x</code> specified by the <code>mask</code> into the …\nGathers the bits of <code>x</code> specified by the <code>mask</code> into the …\nCounts the bits that are set.\nCounts the bits that are set.\nRead a hardware generated 16-bit random value and store …\nRead a hardware generated 32-bit random value and store …\nRead a hardware generated 64-bit random value and store …\nRead a 16-bit NIST SP800-90B and SP800-90C compliant …\nRead a 32-bit NIST SP800-90B and SP800-90C compliant …\nRead a 64-bit NIST SP800-90B and SP800-90C compliant …\nReads the current value of the processor’s time-stamp …\nStore 16-bit mask to memory\nStore 32-bit mask from a into memory.\nStore 64-bit mask from a into memory.\nStore 8-bit mask to memory\nAdds unsigned 32-bit integers <code>a</code> and <code>b</code> with unsigned 8-bit …\nAdds unsigned 64-bit integers <code>a</code> and <code>b</code> with unsigned 8-bit …\nClears all bits below the least significant zero of <code>x</code> and …\nClears all bits below the least significant zero of <code>x</code> and …\nPerform matrix multiplication of two tiles containing …\nPerform matrix multiplication of two tiles containing …\nCompute dot-product of BF16 (16-bit) floating-point pairs …\nCompute dot-product of bytes in tiles with a …\nCompute dot-product of bytes in tiles with a …\nCompute dot-product of bytes in tiles with a …\nCompute dot-product of bytes in tiles with a …\nCompute dot-product of FP16 (16-bit) floating-point pairs …\nLoad tile configuration from a 64-byte memory location …\nLoad tile rows from memory specifieid by base address and …\nRelease the tile configuration to return to the init …\nStores the current tile configuration to a 64-byte memory …\nStore the tile specified by src to memory specifieid by …\nLoad tile rows from memory specifieid by base address and …\nZero the tile specified by tdest.\nCounts the number of trailing least significant zero bits.\nCounts the number of trailing least significant zero bits.\nCounts the number of trailing least significant zero bits.\nSets all bits below the least significant one of <code>x</code> and …\nSets all bits below the least significant one of <code>x</code> and …\nForces a restricted transactional memory (RTM) region to …\nRetrieves the parameter passed to <code>_xabort</code> when <code>_xbegin</code>’s …\nSpecifies the start of a restricted transactional memory …\nSpecifies the end of a restricted transactional memory …\nReads the contents of the extended control register <code>XCR</code> …\nPerforms a full or partial restore of the enabled …\nPerforms a full or partial restore of the enabled …\nPerforms a full or partial restore of the enabled …\nPerforms a full or partial restore of the enabled …\nPerforms a full or partial save of the enabled processor …\nPerforms a full or partial save of the enabled processor …\nPerforms a full or partial save of the enabled processor …\nPerforms a full or partial save of the enabled processor …\nPerforms a full or partial save of the enabled processor …\nPerforms a full or partial save of the enabled processor …\nPerforms a full or partial save of the enabled processor …\nPerforms a full or partial save of the enabled processor …\nCopies 64-bits from <code>val</code> to the extended control register (…\nQueries whether the processor is executing in a …\nThe BFloat16 type used in AVX-512 intrinsics.\nCompares and exchange 16 bytes (128 bits) of data …\nEAX register.\nEBX register.\nECX register.\nEDX register.\nA by-value array iterator.\nThe error type returned when a conversion from a slice to …\nCreates an array where each element is produced by calling …\nConverts a mutable reference to <code>T</code> into a mutable reference …\nConverts a reference to <code>T</code> into a reference to an array of …\nCreates an array of type <code>[T; N]</code> by repeatedly cloning a …\nCreates an array <code>[T; N]</code> where each fallible array element <code>T</code>…\nU+0006\nU+0026\nU+0027\nExtension methods for ASCII-subset only operations.\nU+002A\nU+0008\nU+0007\nU+0018\nU+0041\nU+0042\nU+0043\nU+0044\nU+0045\nU+0046\nU+0047\nU+0048\nU+0049\nU+004A\nU+004B\nU+004C\nU+004D\nU+004E\nU+004F\nU+0050\nU+0051\nU+0052\nU+0053\nU+0054\nU+0055\nU+0056\nU+0057\nU+0058\nU+0059\nU+005A\nU+000D\nOne of the 128 Unicode characters from U+0000 through …\nU+0009\nU+005E\nU+003A\nU+002C\nU+0040\nU+0010\nU+007F\nU+0014\nU+0011\nU+0013\nU+0012\nU+0030\nU+0031\nU+0032\nU+0033\nU+0034\nU+0035\nU+0036\nU+0037\nU+0038\nU+0039\nU+0024\nU+0019\nU+0003\nU+0004\nU+0017\nU+0005\nU+003D\nU+001B\nAn iterator over the escaped version of a byte.\nU+0021\nU+000C\nU+002E\nU+0060\nU+003E\nU+002D\nU+001C\nU+001F\nU+001D\nU+001E\nU+007B\nU+0028\nU+005B\nU+003C\nU+000A\nU+000B\nU+005F\nU+0015\nU+0000 (The default variant)\nU+0023\nContainer type for copied ASCII characters.\nU+0025\nU+002B\nU+003F\nU+0022\nU+005C\nU+007D\nU+0029\nU+005D\nU+003B\nU+000F\nU+000E\nU+0061\nU+0062\nU+0063\nU+0064\nU+0065\nU+0066\nU+0067\nU+0068\nU+0069\nU+006A\nU+006B\nU+006C\nU+006D\nU+006E\nU+006F\nU+0070\nU+0071\nU+0072\nU+0073\nU+0074\nU+0075\nU+0076\nU+0077\nU+0078\nU+0079\nU+007A\nU+002F\nU+0020\nU+0001\nU+0002\nU+001A\nU+0016\nU+007E\nU+007C\nChecks that two values are an ASCII case-insensitive match.\nReturns an iterator that produces an escaped version of a …\nChecks if the value is within the ASCII range.\nConverts this type to its ASCII lower case equivalent …\nConverts this type to its ASCII upper case equivalent …\nMakes a copy of the value in its ASCII lower case …\nMakes a copy of the value in its ASCII upper case …\nAsserts that an expression matches the provided pattern.\nAsserts that an expression matches the provided pattern.\nA trait for dealing with asynchronous iterators.\nAn async iterator that was created from iterator.\nThe type of the resulting iterator\nConverts something into an async iterator\nThe type of items yielded by the async iterator.\nThe type of the item yielded by the iterator\nConverts an iterator into an async iterator.\nConverts <code>self</code> into an async iterator\nAttempts to pull out the next value of this async …\nReturns the bounds on the remaining length of the async …\nReturns the bounds on the remaining length of the async …\nThis macro uses forward-mode automatic differentiation to …\nThis macro uses reverse-mode automatic differentiation to …\nA captured OS thread stack backtrace.\nA single frame of a backtrace.\nThe current status of a backtrace, indicating whether it …\nA backtrace has been captured and the <code>Backtrace</code> should …\nCapturing a backtrace has been disabled through either the …\nCapturing a backtrace is not supported, likely because it…\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA trait for borrowing data.\nA trait for mutably borrowing data.\nBorrowed data.\nA clone-on-write smart pointer.\nOwned data.\nThe resulting type after obtaining ownership.\nA generalization of <code>Clone</code> to borrowed data.\nImmutably borrows from an owned value.\nMutably borrows from an owned value.\nCreates owned data from borrowed data, usually by cloning.\nA pointer type that uniquely owns a heap allocation of …\nThinBox.\nConstructs a <code>Box&lt;T&gt;</code> by calling the <code>exchange_malloc</code> lang …\nA wrapper for <code>&amp;[u8]</code> representing a human-readable string …\nA wrapper for <code>Vec&lt;u8&gt;</code> representing a human-readable string …\nAn error returned by <code>RefCell::try_borrow</code>.\nAn error returned by <code>RefCell::try_borrow_mut</code>.\nA mutable memory location.\nA value which is initialized on the first access.\nA cell which can nominally be written to only once.\nWraps a borrowed reference to a value in a <code>RefCell</code> box. A …\nA mutable memory location with dynamically checked borrow …\nA wrapper type for a mutably borrowed value from a …\n<code>UnsafeCell</code>, but <code>Sync</code>.\nThe core primitive for interior mutability in Rust.\nThe error type returned when a conversion from <code>u32</code> to <code>char</code> …\nAn iterator that decodes UTF-16 encoded code points from …\nAn error that can be returned when decoding UTF-16 code …\nAn iterator that yields the literal escape code of a <code>char</code>.\nAn iterator that yields the literal escape code of a <code>char</code>.\nReturns an iterator that yields the hexadecimal Unicode …\nThe highest valid code point a <code>char</code> can have, <code>&#39;\\u{10FFFF}&#39;</code>…\nThe maximum number of two-byte units required to encode a …\nThe maximum number of bytes required to encode a <code>char</code> to …\nAn error which can be returned when parsing a char.\n<code>U+FFFD REPLACEMENT CHARACTER</code> (�) is used in Unicode to …\nReturns an iterator that yields the lowercase equivalent …\nReturns an iterator that yields the uppercase equivalent …\nThe error type returned when a checked char conversion …\nThe version of Unicode that the Unicode parts of <code>char</code> and …\nCreates an iterator over the UTF-16 encoded code points in …\nConverts a digit in the given radix to a <code>char</code>. Use …\nConverts a <code>u32</code> to a <code>char</code>. Use <code>char::from_u32</code> instead.\nConverts a <code>u32</code> to a <code>char</code>, ignoring validity. Use …\nA common trait that allows explicit creation of a …\nDerive macro generating an impl of the trait <code>Clone</code>.\nA generalization of <code>Clone</code> to dynamically-sized types …\nTrait for objects whose <code>Clone</code> impl is lightweight (e.g. …\nReturns a duplicate of the value.\nPerforms copy-assignment from <code>self</code> to <code>dest</code>.\nTrait for comparisons corresponding to equivalence …\nDerive macro generating an impl of the trait <code>Eq</code>.\nAn ordering where a compared value is equal to another.\nAn ordering where a compared value is greater than another.\nAn ordering where a compared value is less than another.\nTrait for types that form a total order.\nDerive macro generating an impl of the trait <code>Ord</code>. The …\nAn <code>Ordering</code> is the result of a comparison between two …\nTrait for comparisons using the equality operator.\nDerive macro generating an impl of the trait <code>PartialEq</code>. …\nTrait for types that form a partial order.\nDerive macro generating an impl of the trait <code>PartialOrd</code>. …\nA helper struct for reverse ordering.\nThis method returns an <code>Ordering</code> between <code>self</code> and <code>other</code>.\nTests for <code>self</code> and <code>other</code> values to be equal, and is used …\nCompares and returns the maximum of two values.\nReturns the maximum of two values with respect to the …\nReturns the element that gives the maximum value from the …\nCompares and returns the minimum of two values.\nReturns the minimum of two values with respect to the …\nReturns the element that gives the minimum value from the …\nCompares and sorts two values, returning minimum and …\nReturns minimum and maximum values with respect to the …\nReturns minimum and maximum values with respect to the …\nThis method returns an ordering between <code>self</code> and <code>other</code> …\nThe memory allocator returned an error\nAn ordered map based on a B-Tree.\nAn ordered set based on a B-Tree.\nA priority queue implemented with a binary heap.\nAn endpoint of a range of keys.\nError due to the computed capacity exceeding the collection…\nAn exclusive bound.\nA hash map implemented with quadratic probing and SIMD …\nA hash set implemented as a <code>HashMap</code> where the value is <code>()</code>.\nAn inclusive bound.\nA doubly-linked list with owned nodes.\nThe error type for <code>try_reserve</code> methods.\nDetails of the allocation that caused a <code>TryReserveError</code>\nAn infinite endpoint. Indicates that there is no bound in …\nA double-ended queue implemented with a growable ring …\nA priority queue implemented with a binary heap.\nReturns the intersection of <code>self</code> and <code>rhs</code> as a new …\nReturns the union of <code>self</code> and <code>rhs</code> as a new <code>HashSet&lt;T, S&gt;</code>.\nReturns the symmetric difference of <code>self</code> and <code>rhs</code> as a new …\nAn ordered map based on a B-Tree.\nAn ordered set based on a B-Tree.\nReturns the number of elements the map can hold without …\nReturns the number of elements the set can hold without …\nClears the map, removing all key-value pairs. Keeps the …\nClears the set, removing all values.\nOverwrites the contents of <code>self</code> with a clone of the …\nReturns <code>true</code> if the set contains a value.\nReturns <code>true</code> if the map contains a value for the specified …\nCreates an empty <code>HashMap&lt;K, V, S&gt;</code>, with the <code>Default</code> value …\nCreates an empty <code>HashSet&lt;T, S&gt;</code> with the <code>Default</code> value for …\nVisits the values representing the difference, i.e., the …\nClears the map, returning all key-value pairs as an …\nClears the set, returning all elements as an iterator. …\nGets the given key’s corresponding entry in the map for …\nGets the given value’s corresponding entry in the set …\nCreates an iterator which uses a closure to determine if …\nCreates an iterator which uses a closure to determine if …\nConverts a <code>[(K, V); N]</code> into a <code>HashMap&lt;K, V&gt;</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts a <code>[T; N]</code> into a <code>HashSet&lt;T&gt;</code>.\nConstructs a <code>HashMap&lt;K, V&gt;</code> from an iterator of key-value …\nReturns a reference to the value corresponding to the key.\nReturns a reference to the value in the set, if any, that …\nAttempts to get mutable references to <code>N</code> values in the map …\nAttempts to get mutable references to <code>N</code> values in the map …\nReturns the key-value pair corresponding to the supplied …\nReturns a mutable reference to the value corresponding to …\nInserts the given <code>value</code> into the set if it is not present, …\nInserts a value computed from <code>f</code> into the set if the given …\nA hash map implemented with quadratic probing and SIMD …\nA hash set implemented as a <code>HashMap</code> where the value is <code>()</code>.\nReturns a reference to the map’s <code>BuildHasher</code>.\nReturns a reference to the set’s <code>BuildHasher</code>.\nReturns a reference to the value corresponding to the …\nInserts a key-value pair into the map.\nAdds a value to the set.\nVisits the values representing the intersection, i.e., the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a consuming iterator, that is, one that moves each …\nCreates a consuming iterator, that is, one that moves each …\nCreates a consuming iterator visiting all the keys in …\nCreates a consuming iterator visiting all the values in …\nReturns <code>true</code> if <code>self</code> has no elements in common with <code>other</code>. …\nReturns <code>true</code> if the map contains no elements.\nReturns <code>true</code> if the set contains no elements.\nReturns <code>true</code> if the set is a subset of another, i.e., <code>other</code>…\nReturns <code>true</code> if the set is a superset of another, i.e., …\nAn iterator visiting all key-value pairs in arbitrary …\nAn iterator visiting all elements in arbitrary order. The …\nAn iterator visiting all key-value pairs in arbitrary …\nAn iterator visiting all keys in arbitrary order. The …\nReturns the number of elements in the map.\nReturns the number of elements in the set.\nA doubly-linked list with owned nodes.\nCreates an empty <code>HashMap</code>.\nCreates an empty <code>HashSet</code>.\nRemoves a key from the map, returning the value at the key …\nRemoves a value from the set. Returns whether the value was\nRemoves a key from the map, returning the stored key and …\nAdds a value to the set, replacing the existing value, if …\nReserves capacity for at least <code>additional</code> more elements to …\nReserves capacity for at least <code>additional</code> more elements to …\nRetains only the elements specified by the predicate.\nRetains only the elements specified by the predicate.\nShrinks the capacity of the map with a lower limit. It …\nShrinks the capacity of the set with a lower limit. It …\nShrinks the capacity of the map as much as possible. It …\nShrinks the capacity of the set as much as possible. It …\nReturns the difference of <code>self</code> and <code>rhs</code> as a new …\nVisits the values representing the symmetric difference, …\nRemoves and returns the value in the set, if any, that is …\nTries to insert a key-value pair into the map, and returns …\nTries to reserve capacity for at least <code>additional</code> more …\nTries to reserve capacity for at least <code>additional</code> more …\nVisits the values representing the union, i.e., all the …\nAn iterator visiting all values in arbitrary order. The …\nAn iterator visiting all values mutably in arbitrary order.\nA double-ended queue (deque) implemented with a growable …\nCreates an empty <code>HashMap</code> with at least the specified …\nCreates an empty <code>HashSet</code> with at least the specified …\nCreates an empty <code>HashMap</code> with at least the specified …\nCreates an empty <code>HashSet</code> with at least the specified …\nCreates an empty <code>HashMap</code> which will use the given hash …\nCreates a new empty hash set which will use the given …\nThe layout of allocation request that failed\nA priority queue implemented with a binary heap.\nA draining iterator over the elements of a <code>BinaryHeap</code>.\nA draining iterator over the elements of a <code>BinaryHeap</code>.\nAn owning iterator over the elements of a <code>BinaryHeap</code>.\nAn iterator over the elements of a <code>BinaryHeap</code>.\nStructure wrapping a mutable reference to the greatest …\nAn ordered map based on a B-Tree.\nA cursor over a <code>BTreeMap</code>.\nA cursor over a <code>BTreeMap</code> with editing operations.\nA cursor over a <code>BTreeMap</code> with editing operations, and …\nA view into a single entry in a map, which may either be …\nAn iterator produced by calling <code>extract_if</code> on BTreeMap.\nAn owning iterator over the entries of a <code>BTreeMap</code>, sorted …\nAn owning iterator over the keys of a <code>BTreeMap</code>.\nAn owning iterator over the values of a <code>BTreeMap</code>.\nAn iterator over the entries of a <code>BTreeMap</code>.\nA mutable iterator over the entries of a <code>BTreeMap</code>.\nAn iterator over the keys of a <code>BTreeMap</code>.\nAn occupied entry.\nA view into an occupied entry in a <code>BTreeMap</code>. It is part of …\nThe error returned by <code>try_insert</code> when the key already …\nAn iterator over a sub-range of entries in a <code>BTreeMap</code>.\nA mutable iterator over a sub-range of entries in a …\nError type returned by <code>CursorMut::insert_before</code> and …\nA vacant entry.\nA view into a vacant entry in a <code>BTreeMap</code>. It is part of …\nAn iterator over the values of a <code>BTreeMap</code>.\nA mutable iterator over the values of a <code>BTreeMap</code>.\nThe entry in the map that was already occupied.\nThe value which was not inserted, because the entry was …\nAn ordered set based on a B-Tree.\nA cursor over a <code>BTreeSet</code>.\nA cursor over a <code>BTreeSet</code> with editing operations.\nA cursor over a <code>BTreeSet</code> with editing operations, and …\nA lazy iterator producing elements in the difference of …\nA view into a single entry in a set, which may either be …\nAn iterator produced by calling <code>extract_if</code> on BTreeSet.\nA lazy iterator producing elements in the intersection of …\nAn owning iterator over the items of a <code>BTreeSet</code> in …\nAn iterator over the items of a <code>BTreeSet</code>.\nAn occupied entry.\nA view into an occupied entry in a <code>BTreeSet</code>. It is part of …\nAn iterator over a sub-range of items in a <code>BTreeSet</code>.\nA lazy iterator producing elements in the symmetric …\nA lazy iterator producing elements in the union of <code>BTreeSet</code>…\nError type returned by <code>CursorMut::insert_before</code> and …\nA vacant entry.\nA view into a vacant entry in a <code>BTreeSet</code>. It is part of …\nThe default <code>Hasher</code> used by <code>RandomState</code>.\nA draining iterator over the entries of a <code>HashMap</code>.\nA view into a single entry in a map, which may either be …\nA draining, filtering iterator over the entries of a …\nA hash map implemented with quadratic probing and SIMD …\nAn owning iterator over the entries of a <code>HashMap</code>.\nAn owning iterator over the keys of a <code>HashMap</code>.\nAn owning iterator over the values of a <code>HashMap</code>.\nAn iterator over the entries of a <code>HashMap</code>.\nA mutable iterator over the entries of a <code>HashMap</code>.\nAn iterator over the keys of a <code>HashMap</code>.\nAn occupied entry.\nA view into an occupied entry in a <code>HashMap</code>. It is part of …\nThe error returned by <code>try_insert</code> when the key already …\n<code>RandomState</code> is the default state for <code>HashMap</code> types.\nA vacant entry.\nA view into a vacant entry in a <code>HashMap</code>. It is part of the …\nAn iterator over the values of a <code>HashMap</code>.\nA mutable iterator over the values of a <code>HashMap</code>.\nProvides in-place mutable access to an occupied entry …\nThe entry in the map that was already occupied.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets a reference to the value in the entry.\nGets a mutable reference to the value in the entry.\nSets the value of the entry, and returns the entry’s old …\nSets the value of the entry with the <code>VacantEntry</code>’s key, …\nSets the value of the entry, and returns an <code>OccupiedEntry</code>.\nSets the value of the entry with the <code>VacantEntry</code>’s key, …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTake ownership of the key.\nConverts the <code>OccupiedEntry</code> into a mutable reference to the …\nReturns a reference to this entry’s key.\nGets a reference to the key in the entry.\nGets a reference to the key that would be used when …\nEnsures a value is in the entry by inserting the default …\nEnsures a value is in the entry by inserting the default …\nEnsures a value is in the entry by inserting the result of …\nEnsures a value is in the entry by inserting, if empty, …\nTakes the value out of the entry, and returns it.\nTake the ownership of the key and value from the map.\nThe value which was not inserted, because the entry was …\nA lazy iterator producing elements in the difference of …\nA draining iterator over the items of a <code>HashSet</code>.\nA view into a single entry in a set, which may either be …\nA draining, filtering iterator over the items of a <code>HashSet</code>.\nA hash set implemented as a <code>HashMap</code> where the value is <code>()</code>.\nA lazy iterator producing elements in the intersection of …\nAn owning iterator over the items of a <code>HashSet</code>.\nAn iterator over the items of a <code>HashSet</code>.\nAn occupied entry.\nA view into an occupied entry in a <code>HashSet</code>. It is part of …\nA lazy iterator producing elements in the symmetric …\nA lazy iterator producing elements in the union of <code>HashSet</code>…\nA vacant entry.\nA view into a vacant entry in a <code>HashSet</code>. It is part of the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a reference to this entry’s value.\nGets a reference to the value in the entry.\nGets a reference to the value that would be used when …\nSets the value of the entry, and returns an OccupiedEntry.\nSets the value of the entry with the VacantEntry’s value.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTake ownership of the value.\nEnsures a value is in the entry by inserting if it was …\nTakes the value out of the entry, and returns it. Keeps …\nA cursor over a <code>LinkedList</code>.\nA cursor over a <code>LinkedList</code> with editing operations.\nAn iterator produced by calling <code>extract_if</code> on LinkedList.\nAn owning iterator over the elements of a <code>LinkedList</code>.\nAn iterator over the elements of a <code>LinkedList</code>.\nA mutable iterator over the elements of a <code>LinkedList</code>.\nA doubly-linked list with owned nodes.\nA draining iterator over the elements of a <code>VecDeque</code>.\nAn owning iterator over the elements of a <code>VecDeque</code>.\nAn iterator over the elements of a <code>VecDeque</code>.\nA mutable iterator over the elements of a <code>VecDeque</code>.\nA double-ended queue implemented with a growable ring …\nUsed to do a cheap mutable-to-mutable reference conversion.\nUsed to do a cheap reference-to-reference conversion.\nThe type returned in the event of a conversion error.\nThe type returned in the event of a conversion error.\nSupporting trait for inherent methods of <code>f32</code> and <code>f64</code> such …\nUsed to do value-to-value conversions while consuming the …\nThe error type for errors that can never happen.\nA value-to-value conversion that consumes the input value. …\nSimple and safe type conversions that may fail in a …\nAn attempted conversion that consumes <code>self</code>, which may or …\nConverts this type into a mutable reference of the …\nConverts this type into a shared reference of the (usually …\nConverts to this type from the input type.\nThe identity function.\nConverts this type into the (usually inferred) input type.\nPerforms the conversion.\nPerforms the conversion.\nA trait for giving a type a useful default value.\nDerive macro generating an impl of the trait <code>Default</code>.\nReturns the “default value” for a type.\nAn iterator over the arguments of a process, yielding a …\nAn iterator over the arguments of a process, yielding an …\nThe error type for operations on the <code>PATH</code> variable. …\nThe specified environment variable was not present in the …\nThe specified environment variable was found, but it did …\nAn iterator that splits an environment variable into paths …\nThe error type for operations interacting with environment …\nAn iterator over a snapshot of the environment variables …\nAn iterator over a snapshot of the environment variables …\nReturns the arguments that this program was started with …\nReturns the arguments that this program was started with …\nConstants associated with the current target\nReturns the current working directory as a <code>PathBuf</code>.\nReturns the full filesystem path of the current running …\nReturns the path of the current user’s home directory if …\nJoins a collection of <code>Path</code>s appropriately for the <code>PATH</code> …\nRemoves an environment variable from the environment of …\nChanges the current working directory to the specified …\nSets the environment variable <code>key</code> to the value <code>value</code> for …\nParses input according to platform conventions for the <code>PATH</code>\nReturns the path of a temporary directory.\nFetches the environment variable <code>key</code> from the current …\nFetches the environment variable <code>key</code> from the current …\nReturns an iterator of (variable, value) pairs of strings, …\nReturns an iterator of (variable, value) pairs of OS …\nA string describing the architecture of the CPU that is …\nSpecifies the file extension, if any, used for shared …\nSpecifies the filename prefix, if any, used for shared …\nSpecifies the filename suffix, if any, used for shared …\nSpecifies the file extension, if any, used for executable …\nSpecifies the filename suffix, if any, used for executable …\nA string describing the family of the operating system. An …\nA string describing the specific operating system in use. …\n<code>Error</code> is a trait representing the basic expectations for …\nAn error reporter that prints an error and its sources.\n<code>Request</code> supports generic, type-driven access to data. Its …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates a new <code>Report</code> from an input error.\nEnable pretty-printing the report across multiple lines.\nRequests a reference of type <code>T</code> from the given <code>impl Error</code>.\nRequests a value of type <code>T</code> from the given <code>impl Error</code>.\nDisplay backtrace if available when using pretty output …\nBasic mathematical constants.\nEuler’s number (e)\nThe Euler-Mascheroni constant (γ)\n1/π\n1/sqrt(2)\n1/sqrt(2π)\n1/sqrt(3)\n1/sqrt(π)\n2/π\n2/sqrt(π)\nπ/2\nπ/3\nπ/4\nπ/6\nπ/8\nln(10)\nln(2)\nlog10(2)\nlog10(e)\nlog2(10)\nlog2(e)\nThe golden ratio (φ)\nArchimedes’ constant (π)\nsqrt(2)\nsqrt(3)\nThe full circle constant (τ)\nBasic mathematical constants.\nEuler’s number (e)\nThe Euler-Mascheroni constant (γ)\n1/π\n1/sqrt(2)\n1/sqrt(2π)\n1/sqrt(3)\n1/sqrt(π)\n2/π\n2/sqrt(π)\nπ/2\nπ/3\nπ/4\nπ/6\nπ/8\nln(10)\nln(2)\nlog10(2)\nlog10(e)\nlog2(10)\nlog2(e)\nThe golden ratio (φ)\nArchimedes’ constant (π)\nsqrt(2)\nsqrt(3)\nThe full circle constant (τ)\nApproximate number of significant digits in base 10. Use …\nMachine epsilon value for <code>f32</code>. Use <code>f32::EPSILON</code> instead.\nInfinity (∞). Use <code>f32::INFINITY</code> instead.\nNumber of significant digits in base 2. Use …\nLargest finite <code>f32</code> value. Use <code>f32::MAX</code> instead.\nMaximum possible power of 10 exponent. Use <code>f32::MAX_10_EXP</code> …\nMaximum possible power of 2 exponent. Use <code>f32::MAX_EXP</code> …\nSmallest finite <code>f32</code> value. Use <code>f32::MIN</code> instead.\nMinimum possible normal power of 10 exponent. Use …\nOne greater than the minimum possible normal power of 2 …\nSmallest positive normal <code>f32</code> value. Use <code>f32::MIN_POSITIVE</code> …\nNot a Number (NaN). Use <code>f32::NAN</code> instead.\nNegative infinity (−∞). Use <code>f32::NEG_INFINITY</code> instead.\nThe radix or base of the internal representation of <code>f32</code>. …\nBasic mathematical constants.\nEuler’s number (e)\nThe Euler-Mascheroni constant (γ)\n1/π\n1/sqrt(2)\n1/sqrt(2π)\n1/sqrt(3)\n1/sqrt(π)\n2/π\n2/sqrt(π)\nπ/2\nπ/3\nπ/4\nπ/6\nπ/8\nln(10)\nln(2)\nlog10(2)\nlog10(e)\nlog2(10)\nlog2(e)\nThe golden ratio (φ)\nArchimedes’ constant (π)\nsqrt(2)\nsqrt(3)\nThe full circle constant (τ)\nApproximate number of significant digits in base 10. Use …\nMachine epsilon value for <code>f64</code>. Use <code>f64::EPSILON</code> instead.\nInfinity (∞). Use <code>f64::INFINITY</code> instead.\nNumber of significant digits in base 2. Use …\nLargest finite <code>f64</code> value. Use <code>f64::MAX</code> instead.\nMaximum possible power of 10 exponent. Use <code>f64::MAX_10_EXP</code> …\nMaximum possible power of 2 exponent. Use <code>f64::MAX_EXP</code> …\nSmallest finite <code>f64</code> value. Use <code>f64::MIN</code> instead.\nMinimum possible normal power of 10 exponent. Use …\nOne greater than the minimum possible normal power of 2 …\nSmallest positive normal <code>f64</code> value. Use <code>f64::MIN_POSITIVE</code> …\nNot a Number (NaN). Use <code>f64::NAN</code> instead.\nNegative infinity (−∞). Use <code>f64::NEG_INFINITY</code> instead.\nThe radix or base of the internal representation of <code>f64</code>. …\nBasic mathematical constants.\nEuler’s number (e)\nThe Euler-Mascheroni constant (γ)\n1/π\n1/sqrt(2)\n1/sqrt(2π)\n1/sqrt(3)\n1/sqrt(π)\n2/π\n2/sqrt(π)\nπ/2\nπ/3\nπ/4\nπ/6\nπ/8\nln(10)\nln(2)\nlog10(2)\nlog10(e)\nlog2(10)\nlog2(e)\nThe golden ratio (φ)\nArchimedes’ constant (π)\nsqrt(2)\nsqrt(3)\nThe full circle constant (τ)\nRepresentation of a borrowed C string.\nA type representing an owned, C-compatible, nul-terminated …\nAn error indicating that no nul byte was present.\nAn error indicating that a nul byte was not in the …\nAn error indicating that a nul byte was not in the …\nData provided contains an interior nul byte at byte …\nAn error indicating invalid UTF-8 when converting a <code>CString</code>…\nData provided is not nul terminated.\nAn error indicating that an interior nul byte was found.\nBorrowed reference to an OS string (see <code>OsString</code>).\nA type that can represent owned, mutable platform-native …\nTrait which permits the allowed types to be used with …\nA wrapper for a <code>va_list</code>\nx86_64 ABI implementation of a <code>va_list</code>.\nEquivalent to C’s <code>char</code> type.\nEquivalent to C’s <code>double</code> type.\nEquivalent to C’s <code>float</code> type.\nEquivalent to C’s <code>signed int</code> (<code>int</code>) type.\nEquivalent to C’s <code>signed long</code> (<code>long</code>) type.\nEquivalent to C’s <code>signed long long</code> (<code>long long</code>) type.\nEquivalent to C’s <code>ptrdiff_t</code> type, from <code>stddef.h</code> (or …\nEquivalent to C’s <code>signed char</code> type.\nEquivalent to C’s <code>signed short</code> (<code>short</code>) type.\nEquivalent to C’s <code>size_t</code> type, from <code>stddef.h</code> (or <code>cstddef</code> …\nEquivalent to C’s <code>ssize_t</code> (on POSIX) or <code>SSIZE_T</code> (on …\n<code>CStr</code>, <code>CString</code>, and related types.\nEquivalent to C’s <code>unsigned char</code> type.\nEquivalent to C’s <code>unsigned int</code> type.\nEquivalent to C’s <code>unsigned long</code> type.\nEquivalent to C’s <code>unsigned long long</code> type.\nEquivalent to C’s <code>unsigned short</code> type.\nEquivalent to C’s <code>void</code> type when used as a pointer.\nThe <code>OsStr</code> and <code>OsString</code> types and associated utilities.\nThe position of the interior nul byte.\nRepresentation of a borrowed C string.\nA type representing an owned, C-compatible, nul-terminated …\nAn error indicating that no nul byte was present.\nAn error indicating that a nul byte was not in the …\nAn error indicating that a nul byte was not in the …\nData provided contains an interior nul byte at byte …\nAn error indicating invalid UTF-8 when converting a <code>CString</code>…\nData provided is not nul terminated.\nAn error indicating that an interior nul byte was found.\nThe position of the interior nul byte.\nHelper struct for safely printing an <code>OsStr</code> with <code>format!</code> …\nBorrowed reference to an OS string (see <code>OsString</code>).\nA type that can represent owned, mutable platform-native …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nPossible alignments returned by <code>Formatter::align</code>\nThis structure represents a safely precompiled version of …\n<code>b</code> formatting.\nIndication that contents should be center-aligned.\n<code>?</code> formatting.\nDerive macro generating an impl of the trait <code>Debug</code>.\nSpecifies whether the <code>Debug</code> trait should use …\nA struct to help with <code>fmt::Debug</code> implementations.\nA struct to help with <code>fmt::Debug</code> implementations.\nA struct to help with <code>fmt::Debug</code> implementations.\nA struct to help with <code>fmt::Debug</code> implementations.\nA struct to help with <code>fmt::Debug</code> implementations.\nFormat trait for an empty format, <code>{}</code>.\nContains the error value\nThe error type which is returned from formatting a message …\nConfiguration for formatting.\nOptions for formatting.\nImplements <code>fmt::Debug</code> and <code>fmt::Display</code> using a function.\nIndication that contents should be left-aligned.\nUse lower-case hexadecimal integers for the <code>Debug</code> trait …\n<code>e</code> formatting.\n<code>x</code> formatting.\nRepresents the <code>-</code> flag.\n<code>o</code> formatting.\nContains the success value\nRepresents the <code>+</code> flag.\n<code>p</code> formatting.\nThe type returned by formatter methods.\nIndication that contents should be right-aligned.\nThe signedness of a <code>Formatter</code> (or of a <code>FormattingOptions</code>).\nUse upper-case hexadecimal integers for the <code>Debug</code> trait …\n<code>E</code> formatting.\n<code>X</code> formatting.\nA trait for writing or formatting into Unicode-accepting …\nFormats the value using the given formatter.\nFormats the value using the given formatter.\nFormats the value using the given formatter.\nFormats the value using the given formatter.\nFormats the value using the given formatter.\nFormats the value using the given formatter.\nFormats the value using the given formatter.\nFormats the value using the given formatter.\nFormats the value using the given formatter.\nTakes an <code>Arguments</code> struct and returns the resulting …\nCreates a type whose <code>fmt::Debug</code> and <code>fmt::Display</code> impls are …\nTakes an output stream and an <code>Arguments</code> struct that can be …\nWrites a string slice into this writer, returning whether …\nA builder used to create directories in various manners.\nEntries returned by the <code>ReadDir</code> iterator.\nThe lock could not be acquired due to an I/O error on the …\nAn object providing access to an open file on the …\nRepresentation of the various timestamps on a file.\nA structure representing a type of file with accessors for …\nMetadata information about a file.\nOptions and flags which can be used to configure how a …\nRepresentation of the various permissions on a file.\nIterator over the entries in a directory.\nAn enumeration of possible errors which can occur while …\nThe lock could not be acquired at this time because it is …\nReturns the canonical, absolute form of a path with all …\nCopies the contents of one file to another. This function …\nCreates a new, empty directory at the provided path\nRecursively create a directory and all of its parent …\nReturns <code>Ok(true)</code> if the path points at an existing entity.\nReturns the argument unchanged.\nCreates a new hard link on the filesystem.\nCalls <code>U::from(self)</code>.\nGiven a path, queries the file system to get information …\nReads the entire contents of a file into a bytes vector.\nReturns an iterator over the entries within a directory.\nReads a symbolic link, returning the file that the link …\nReads the entire contents of a file into a string.\nRemoves an empty directory.\nRemoves a directory at this path, after removing all its …\nRemoves a file from the filesystem.\nRenames a file or directory to a new name, replacing the …\nChanges the permissions found on a file or a directory.\nCreates a new symbolic link on the filesystem.\nQueries the metadata about a file without following …\nWrites a slice as the entire contents of a file.\nAsync version of Drop trait.\nA future represents an asynchronous computation, commonly …\nConversion into a <code>Future</code>.\nWhich kind of future are we turning this into?\nThe type of value produced on completion.\nThe output that the future will produce on completion.\nCreates a future which never resolves, representing a …\nA Future that wraps a function returning <code>Poll</code>.\nA future that is immediately ready with a value.\nAsync drop.\nExecutes the async destructor for this type.\nCreates a future from a value.\nPolls multiple futures simultaneously, returning a tuple …\nCreates a future which never resolves, representing a …\nAttempts to resolve the future to a final value, …\nCreates a future that wraps a function returning <code>Poll</code>.\nCreates a future that is immediately ready with a value.\nA trait for creating instances of <code>Hasher</code>.\nUsed to create a default <code>BuildHasher</code> instance for types …\nThe default <code>Hasher</code> used by <code>RandomState</code>.\nA hashable type.\nDerive macro generating an impl of the trait <code>Hash</code>.\nA trait for hashing an arbitrary stream of bytes.\nType of the hasher that will be created.\n<code>RandomState</code> is the default state for <code>HashMap</code> types.\nAn implementation of SipHash 2-4.\nCreates a new hasher.\nCreates a new <code>DefaultHasher</code> using <code>new</code>. See its …\nReturns the hash value for the values written so far.\nReturns the argument unchanged.\nFeeds this value into the given <code>Hasher</code>.\nCalls <code>U::from(self)</code>.\nCreates a new <code>DefaultHasher</code>.\nWrites some data into this <code>Hasher</code>.\nMakes a <em>soundness</em> promise to the compiler that <code>cond</code> holds.\nAn identity function that <em><strong>hints</strong></em> to the compiler to be …\nHints to the compiler that given path is cold, i.e., …\nHints to the compiler that a branch condition is likely to …\nAn identity function that causes an <code>unused_must_use</code> …\nReturns either <code>true_val</code> or <code>false_val</code> depending on the …\nEmits a machine instruction to signal the processor that …\nHints to the compiler that a branch condition is unlikely …\nInforms the compiler that the site which is calling this …\nThe largest value that can be represented by this integer …\nThe smallest value that can be represented by this integer …\nThe largest value that can be represented by this integer …\nThe smallest value that can be represented by this integer …\nThe largest value that can be represented by this integer …\nThe smallest value that can be represented by this integer …\nThe largest value that can be represented by this integer …\nThe smallest value that can be represented by this integer …\nThe largest value that can be represented by this integer …\nThe smallest value that can be represented by this integer …\nA type for atomic ordering parameters for intrinsics. This …\nAborts the execution of the process.\nPerforms checked integer addition.\nLowers in MIR to <code>Rvalue::Aggregate</code> with …\nThe minimum alignment of a type.\nThe required alignment of the referenced value.\nCalculates the offset from a pointer, potentially wrapping.\nA guard for unsafe functions that cannot ever be executed …\nA guard for <code>std::mem::uninitialized</code>. This will statically …\nA guard for unsafe functions that cannot ever be executed …\nInforms the optimizer that a condition is always true. If …\nBitwise and with the current value, returning the previous …\nStores a value if the current value is the same as the <code>old</code> …\nStores a value if the current value is the same as the <code>old</code> …\nAn atomic fence.\nLoads the current value of the pointer. <code>T</code> must be an …\nMaximum with the current value using a signed comparison. <code>T</code>…\nMinimum with the current value using a signed comparison. <code>T</code>…\nBitwise nand with the current value, returning the …\nBitwise or with the current value, returning the previous …\nAn atomic fence for synchronization within a single thread.\nStores the value at the specified memory location. <code>T</code> must …\nMaximum with the current value using an unsigned …\nMinimum with the current value using an unsigned …\nAdds to the current value, returning the previous value. <code>T</code> …\nStores the value at the specified memory location, …\nBitwise xor with the current value, returning the previous …\nSubtract from the current value, returning the previous …\nReverses the bits in an integer type <code>T</code>.\nSee documentation of <code>std::hint::black_box</code> for details.\nExecutes a breakpoint trap, for inspection by a debugger.\nReverses the bytes in an integer type <code>T</code>.\nGets a reference to a static <code>Location</code> indicating where it …\nPerforms full-width multiplication and addition with a …\nRust’s “try catch” construct for unwinding. Invokes …\nReturns the smallest integer greater than or equal to an …\nReturns the smallest integer greater than or equal to an …\nReturns the smallest integer greater than or equal to an …\nReturns the smallest integer greater than or equal to an …\nHints to the compiler that current code path is cold.\nLexicographically compare <code>[left, left + bytes)</code> and …\nAllocates a block of memory at compile time. At runtime, …\nDeallocates a memory which allocated by …\nSelects which function to call depending on the context.\nCheck if the post-condition <code>cond</code> has been met.\nCheck if the pre-condition <code>cond</code> has been met.\nReturns whether we should perform contract-checking at …\nThis is an accidentally-stable alias to <code>ptr::copy</code>; use …\nThis is an accidentally-stable alias to …\nCopies the sign from <code>y</code> to <code>x</code> for <code>f128</code> values.\nCopies the sign from <code>y</code> to <code>x</code> for <code>f16</code> values.\nCopies the sign from <code>y</code> to <code>x</code> for <code>f32</code> values.\nCopies the sign from <code>y</code> to <code>x</code> for <code>f64</code> values.\nReturns the cosine of an <code>f128</code>.\nReturns the cosine of an <code>f16</code>.\nReturns the cosine of an <code>f32</code>.\nReturns the cosine of an <code>f64</code>.\nReturns the number of leading unset bits (zeroes) in an …\nLike <code>ctlz</code>, but extra-unsafe as it returns <code>undef</code> when given …\nReturns the number of bits set in an integer type <code>T</code>\nReturns the number of trailing unset bits (zeroes) in an …\nLike <code>cttz</code>, but extra-unsafe as it returns <code>undef</code> when given …\nReturns the value of the discriminant for the variant in …\nCombine two values which have no bits in common.\nPerforms an exact division, resulting in undefined …\nReturns 2 raised to the power of an <code>f128</code>.\nReturns 2 raised to the power of an <code>f16</code>.\nReturns 2 raised to the power of an <code>f32</code>.\nReturns 2 raised to the power of an <code>f64</code>.\nReturns the exponential of an <code>f128</code>.\nReturns the exponential of an <code>f16</code>.\nReturns the exponential of an <code>f32</code>.\nReturns the exponential of an <code>f64</code>.\nReturns the absolute value of an <code>f128</code>.\nReturns the absolute value of an <code>f16</code>.\nReturns the absolute value of an <code>f32</code>.\nReturns the absolute value of an <code>f64</code>.\nFloat addition that allows optimizations based on …\nFloat addition that allows optimizations based on …\nFloat division that allows optimizations based on …\nFloat division that allows optimizations based on …\nConverts with LLVM’s fptoui/fptosi, which may return …\nReturns the largest integer less than or equal to an <code>f128</code>.\nReturns the largest integer less than or equal to an <code>f16</code>.\nReturns the largest integer less than or equal to an <code>f32</code>.\nReturns the largest integer less than or equal to an <code>f64</code>.\nReturns <code>a * b + c</code> for <code>f128</code> values.\nReturns <code>a * b + c</code> for <code>f16</code> values.\nReturns <code>a * b + c</code> for <code>f32</code> values.\nReturns <code>a * b + c</code> for <code>f64</code> values.\nFloat multiplication that allows optimizations based on …\nFloat multiplication that allows optimizations based on …\nReturns <code>a * b + c</code> for <code>f128</code> values, non-deterministically …\nReturns <code>a * b + c</code> for <code>f16</code> values, non-deterministically …\nReturns <code>a * b + c</code> for <code>f32</code> values, non-deterministically …\nReturns <code>a * b + c</code> for <code>f64</code> values, non-deterministically …")