searchState.loadedDescShard("devela", 18, "Hardware Coordination Feedback Capability\nHardware cache coherency across encryption domains …\nHas Hardware P-state control?\nHas Hardware assert supported?\nHWP. HWP base registers (IA32_PM_ENABLE[bit 0], …\nHWP Activity Window. IA32_HWP_REQUEST[bits 41:32] is …\nHWP Capabilities. Highest Performance change is supported …\nHWP Energy Performance Preference. IA32_HWP_REQUEST[bits …\nFast access mode for the IA32_HWP_REQUEST MSR is supported …\nHWP Notification. IA32_HWP_INTERRUPT MSR is supported if …\nHWP Package Level Request. IA32_HWP_REQUEST_PKG MSR is …\nHWP PECI override is supported if set.\nA value of 1 indicates the indicates the presence of a …\nInstruction based sampling.\nIgnoring Idle Logical Processor HWP request is supported …\nInstruction Retired Counter MSR available if set.\nWBINVD/WBNOINVD are interruptible if set.\nIs Invariant TSC available?\nSupports INVD execution prevention after BIOS Done.\nINVLPGB and TLBSYNC instruction supported if set.\nINVLPGB support for invalidating guest nested translations …\nINVPCID. If 1, supports INVPCID instruction for system …\nIf true, Indicates support of IP Filtering, TraceStop …\nSupports L2 Cache Allocation.\nSupports L3 Cache Allocation.\nSupports L3 Cache Intel RDT Monitoring.\nSupports 57-bit linear addresses and five-level paging if …\nIs LAHF/SAHF available in 64-bit mode?\nSupports Linear Address Masking.\nIndicates support for LBR Virtualization.\nReports whether the response of the delay values is linear.\nIf true, Generated packets which contain IP payloads have …\nSupports local bandwidth monitoring.\nLightweight profiling support\nIs LZCNT available?\nMachine Check Architecture. A value of 1 indicates the …\nIs MCA overflow recovery available?\nMachine Check Exception. Exception 18 is defined for …\nMCOMMIT instruction supported if set.\nSupports Memory Bandwidth Allocation.\nMisaligned SSE mode. See “Misaligned Access Support …\nIntel MMX Technology. The processor supports the Intel MMX …\nAMD extensions to MMX instructions.\nMONITOR/MWAIT. A value of 1 indicates the processor …\nSupport for MWAITX and MONITORX instructions.\nA value of 1 indicates that the processor supports MOVBE …\nMOVU (Move Unaligned) SSE instructions are efficient more …\nMPX. Supports Intel Memory Protection Extensions if 1.\nModel Specific Registers RDMSR and WRMSR Instructions. The …\nSupports RDMSRLIST and WRMSRLIST Instructions and the …\nIf true, Indicates support of MTC timing packet and …\nMemory Type Range Registers. MTRRs are supported. The …\nNB performance counter extensions support.\nNested paging supported if set.\nIndicates support for NRIP save on #VMEXIT if set.\nSupports occupancy monitoring.\nOS has set CR4.PKE to enable protection keys (and the …\nIndicates OS-visible workaround support\nA value of 1 indicates that the OS has enabled …\nPhysical Address Extension. Physical addresses greater …\nThe Page Flush MSR is available if set.\nPage Attribute Table. Page Attribute Table is supported. …\nIndicates support for the pause intercept filter if set.\nIndicates support for the PAUSE filter cycle count …\nPending Break Enable. The processor supports the use of …\nProcess-context identifiers. A value of 1 indicates that …\nPCLMULQDQ. A value of 1 indicates the processor supports …\nPerfmon and Debug Capability: A value of 1 indicates the …\nProcessor performance counter extensions support.\nSupport for L3 performance counter extension.\nPerformance time-stamp counter.\nPage Global Bit. The global bit is supported in …\nSupports protection keys for user-mode pages.\nPLN. Power limit notification controls are supported if …\nA value of 1 indicates that the processor supports the …\nSupport of Power Event Trace. Writes can set IA32_RTIT_CTL…\nHas Processor power reporting interface?\nSupports PREFETCHI\nIs PREFETCHW available?\nHas PREFETCHWT1 (Intel® Xeon Phi™ only).\nDisallowing IBS use by the host supported if set.\nSupports Intel Processor Trace.\nPage Size Extension. Large pages of size 4 MByte are …\n36-Bit Page Size Extension. 4-MByte pages addressing …\nProcessor Serial Number. The processor supports the 96-bit …\nPTM. Package thermal management is supported if set.\nIndicates support of PTWRITE. Writes can set IA32_RTIT_CTL…\nRDPID and IA32_TSC_AUX are available.\nRDPRU instruction supported if set.\nA value of 1 indicates that processor supports RDRAND …\nSupports RDSEED.\nSupports Intel Resource Director Technology (RDT) …\nSupports Intel Resource Director Technology (RDT) …\nCheck support for rdtscp instruction.\nSupports Enhanced REP MOVSB/STOSB if 1.\nFP Error Pointers Restored by XRSTOR if set.\nRestricted Injection supported if set.\nHas Read-only effective frequency interface?\nIf true, Indicates that IA32_RTIT_CTL.CR3Filter can be set …\nRTM\nSecure Encrypted Virtualization is supported if set.\nSEV Encrypted State is supported if set.\nSEV Secure Nested Paging supported if set.\nSupports Intel® Software Guard Extensions (Intel® SGX …\nHas SGX1 support.\nHas SGX2 support.\nSupports SGX Launch Configuration.\nSupports SHA Instructions.\nIf true, Indicates support of Single-Range Output scheme.\nSKINIT and STGI are supported.\nSMAP. Supports Supervisor-Mode Access Prevention (and the …\nSecure Memory Encryption is supported if set.\nSMEP. Supports Supervisor-Mode Execution Prevention if 1.\nSafer Mode Extensions. A value of 1 indicates that the …\nSPEC_CTRL virtualization supported if set.\nSelf Snoop. The processor supports the management of …\nSSE. The processor supports the SSE extensions.\nSSE2. The processor supports the SSE2 extensions.\nStreaming SIMD Extensions 3 (SSE3). A value of 1 indicates …\nA value of 1 indicates that the processor supports SSE4.1.\nA value of 1 indicates that the processor supports SSE4.2.\nXTRQ, INSERTQ, MOVNTSS, and MOVNTSD instruction support.\nSVM supervisor shadow stack restrictions if set.\nA value of 1 indicates the presence of the Supplemental …\nHas Software uncorrectable error containment and recovery …\nSecure virtual machine supported.\nIndicates support for SVM-Lock if set.\nAre fast system calls available.\nSYSENTER and SYSEXIT Instructions. The SYSENTER and …\nTrailing bit manipulation instruction support.\nHas THERMTRIP?\nSupport for INVLPGB/TLBSYNC hypervisor enable in VMCB and …\nThermal Monitor. The processor implements the thermal …\nHardware thermal control (HTC)?\nThermal Monitor 2. A value of 1 indicates whether the …\nIndicates the following MSRs are supported: …\nIf true, Tracing can be enabled with IA32_RTIT_CTL.ToPA = …\nIf true, ToPA tables can hold any number of output …\nTopology extensions support.\nSupports total bandwidth monitoring.\nIf true, Indicates support of output to Trace Transport …\nIs Temperature Sensor available?\nTime Stamp Counter. The RDTSC instruction is supported, …\nIA32_TSC_ADJUST MSR is supported if 1.\nA value of 1 indicates that the processors local APIC …\nIndicates support for MSR TSC ratio (MSR <code>0xC000_0104</code>) if …\nIntel Turbo Boost Technology Available (see description of …\nIntel® Turbo Boost Max Technology 3.0 available.\nSupports UIRET_UIF\nSupports user-mode instruction prevention if 1.\nEFER.LMSLE is unsupported if set.\nVAES\nIndicates support for VMCB clean bits if set.\nVirtual 8086 Mode Enhancements. Virtual 8086 mode …\nVM Permission Levels supported if set.\nVMSAVE and VMLOAD virtualization supported if set.\nVirtual Machine Extensions. A value of 1 indicates that …\nVoltage ID control.\nVPCLMULQDQ\nVirtual Transparent Encryption supported if set.\nWAITPKG\nWBNOINVD instruction supported if set.\nWatchdog timer support.\nA value of 1 indicates that the processor supports x2APIC …\nSupports XGETBV with ECX = 1 if set.\nExtended operation support.\nA value of 1 indicates that the processor supports the …\nSupports XSAVEC and the compacted form of XRSTOR if set.\nCPU has xsaveopt feature.\nSupports XSAVES/XRSTORS and IA32_XSS if set.\nHighest COS number supported for this Leaf.\nHighest COS number supported for this Leaf.\nHighest COS number supported for this Leaf.\nSupport for HDC in IA32_XSS.\nSupport for PT in IA32_XSS.\nL1 instruction cache associativity.\nL1 instruction cache line size in bytes.\nL1 instruction cache lines per tag.\nL1 instruction cache size in KB\nReturns the identity of the <code>Hypervisor</code>.\nInitial APIC ID\nSupports treating interrupts as break-event for MWAIT, …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMaximum page count for INVLPGB instruction.\nBranch instruction retired event not available if 1.\nBranch mispredict retired event not available if 1.\nLast-level cache reference event not available if 1.\nReturns true when the compacted format of an XSAVE area is …\nCore cycle event not available if 1.\nFully associative structure\nFully Associative cache\nTrue if the bit n (corresponding to the sub-leaf index) is …\nTrue if bit n is supported in XCR0.\nCache Inclusiveness (Bit 1) False: Cache is not inclusive …\nInstruction retired event not available if 1.\nLast-level cache misses event not available if 1.\nReference cycles event not available if 1.\nSelf Initializing cache level (does not need SW …\nWrite-Back Invalidate/Invalidate (Bit 0) False: …\nBit-granular map of isolation/contention of allocation …\nBit-granular map of isolation/contention of allocation …\nIterator over extended state enumeration levels &gt;= 2.\nIterator over SGX sub-leafs.\nInstruction TLB associativity for 2-MB and 4-MB pages.\nL2 Instruction TLB associativity for 2-MB and 4-MB pages.\nInstruction TLB number of entries for 2-MB and 4-MB pages.\nL2 Instruction TLB number of entries for 2-MB and 4-MB …\nInstruction TLB associativity for 4K pages.\nL2 Instruction TLB associativity for 4K pages.\nInstruction TLB number of entries for 4K pages.\nL2 Instruction TLB number of entries for 4K pages.\nL1 Instruction TLB associativity for 1-GB pages.\nL1 Instruction TLB number of entries for 1-GB pages.\nL2 Instruction TLB associativity for 1-GB pages.\nL2 Instruction TLB number of entries for 1-GB pages.\nL2 Cache Allocation Information.\nL2 Associativity field\nL2 Cache Line size in bytes\nL2 cache lines per tag.\nCache size in KB.\nL3 Cache Allocation Information.\nL3 Cache Monitoring.\nL2 Associativity field\nL2 Cache Line size in bytes\nL2 cache lines per tag.\nSpecifies the L3 cache size range\nLargest monitor-line size in bytes (default is processor’…\nCache Level (starts at 1)\nLevel number.\nLinear Address Bits\nThe value of MAWAU used by the BNDLDX and BNDSTX …\nMaximum number of addressable IDs for logical processors …\nMaximum number of addressable IDs for logical processors …\nMaximum number of addressable IDs for processor cores in …\nThe maximum supported enclave size in 64-bit mode is …\nThe maximum supported enclave size in non-64-bit mode is …\nNumber of encrypted guests supported simultaneouslys\nReports the maximum MBA throttling value supported for the …\nMaximum number of addressable IDs for logical processors …\nThe maximum ECX value recognized by RDPRU.\nThe size of the <code>apic_id_size</code> field determines the maximum …\nMaximum range (zero-based) of RMID of L3.\nMemory Bandwidth Allocation Information.\nMinimum ASID value for an SEV enabled, SEV-ES disabled …\nBit vector of supported extended SGX features.\nUses Rust’s <code>cpuid</code> function from the <code>arch</code> module.\nCreate a new <code>CpuId</code> instance.\nIterate over all SoC vendor specific attributes.\nIterate over all cache information.\nIterate over all cache info subleafs for this CPU.\nIterate over each sub-leaf with an address translation …\nNode ID\nNodes per processor\nAn unsigned integer which is the nominal frequency of the …\nNumber as retrieved from cpuid\nNumber of physical threads in the processor.\nNumber of general-purpose performance monitoring counter …\nAn unsigned integer which is the numerator of the …\nThe offset in bytes of this extended state components save …\nPartitioning (0: Soft partitioning between the logical …\nPerformance time-stamp counter size (in bits).\nPhysical Address Bits\nPhysical Address bit reduction\nThe physical address of the base of the EPC section\nPhysical Line partitions (Bits 21-12)\nReturns package type on AMD.\nProcessor Base Frequency (in MHz).\nMaximum Frequency (in MHz).\nNumber of logical processors at this level type. The …\nReturns which register this specific extended subleaf …\nSVM revision number.\nMaximum range (zero-based) of RMID within this physical …\nReports the valid bits of SECS.ATTRIBUTES[127:0] that …\nCombination of bits 00-31 and 32-63 of 96 bit processor …\n96 bit processor serial number.\nBits 00-31 of 96 bit processor serial number.\nBits 32-63 of 96 bit processor serial number.\nBits 64-96 of 96 bit processor serial number.\nNumber of Sets.\nNumber of Sets (Bits 31-00)\nNumber of bits to shift right on x2APIC ID to get a unique …\nThe size in bytes (from the offset specified in EBX) of …\nSize of the corresponding EPC section within the Processor …\nSmallest monitor-line size in bytes (default is processor…\nVersion Information: Stepping ID\nNumber of available address space identifiers (ASID).\nNumber of C0 sub C-states supported using MWAIT (Bits 03 - …\nNumber of C1 sub C-states supported using MWAIT (Bits 07 - …\nNumber of C2 sub C-states supported using MWAIT (Bits 11 - …\nNumber of C3 sub C-states supported using MWAIT (Bits 15 - …\nNumber of C4 sub C-states supported using MWAIT (Bits 19 - …\nNumber of C5 sub C-states supported using MWAIT (Bits 23 - …\nNumber of C6 sub C-states supported using MWAIT (Bits 27 - …\nNumber of C7 sub C-states supported using MWAIT (Bits 31 - …\nBitmap of supported Cycle Threshold value encodings (Bits …\nBitmap of supported MTC period encodings (Bit 31:16).\nBitmap of supported Configurable PSB frequency encodings …\nThreads per core\n“TSC frequency” = “core crystal clock frequency” * …\nTSC frequency in kHz.\nCache type\nVersion ID of architectural performance monitoring. (Bits …\nWays of associativity.\nSee <code>CpuId::with_cpuid_reader</code>.\nReturn new CpuId struct with custom reader function.\nx2APIC ID\nx2APIC ID the current logical processor. (Bits 31-00)\nSupport for AVX512 OPMASK in XCR0.\nSupport for AVX512 ZMM Hi16 in XCR0.\nSupport for AVX512 ZMM Hi256 XCR0.\nSupport for AVX 256-bit in XCR0.\nSupport for legacy x87 in XCR0.\nSupport for MPX BNDCSR in XCR0.\nSupport for MPX BNDREGS in XCR0.\nSupport for PKRU in XCR0.\nSupport for SSE 128-bit in XCR0.\nMaximum size (bytes, from the beginning of the …\nMaximum size (bytes, from the beginning of the …\nThe size in bytes of the XSAVE area containing all states …\nThe native reader uses the cpuid instruction to read the …\nProvides context to a closure called by <code>broadcast</code>.\nWork was found and executed.\nProvides the calling context to a closure called by …\nNo available work was found.\nRepresents a fork-join scope which can be used to spawn …\nRepresents a fork-join scope which can be used to spawn …\nThread builder used for customization via …\nRepresents a user created thread-pool.\nError when initializing a thread pool.\nUsed to create a new <code>ThreadPool</code> or to configure the global …\nResult of <code>yield_now()</code> or <code>yield_local()</code>.\nParallel iterator types for arrays (<code>[T; N]</code>)\n<strong>(DEPRECATED)</strong> Suggest to worker threads that they execute …\nExecutes <code>op</code> within every thread in the current threadpool. …\nExecutes <code>op</code> within every thread in the threadpool. Any …\nCreates a new <code>ThreadPool</code> initialized using this …\nInitializes the global thread pool. This initialization is …\nCreates a scoped <code>ThreadPool</code> initialized using this …\nParallel iterator types for standard collections\nReturns the number of threads in the current registry. If …\nReturns the (current) number of threads in the thread pool.\nReturns true if the current worker thread currently has “…\nIf called from a Rayon worker thread, returns the index of …\nIf called from a Rayon worker thread in this thread-pool, …\nSets a callback to be invoked on thread exit.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a “fork-join” scope <code>s</code> and invokes the closure …\nCreates a scope that spawns work into this thread-pool.\nCreates a “fork-join” scope <code>s</code> with FIFO order, and …\nCreates a scope that spawns work into this thread-pool in …\nOur index amongst the broadcast threads (ranges from …\nGets the index of this thread in the pool, within …\nExecutes <code>op</code> within the threadpool. Any attempts to use <code>join</code>…\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTraits for writing parallel programs using an …\nTakes two closures and <em>potentially</em> runs them in parallel. …\nExecute <code>oper_a</code> and <code>oper_b</code> in the thread-pool and return …\nIdentical to <code>join</code>, except that the closures have a …\nReturns the maximum number of threads that Rayon supports …\nReturns <code>true</code> if the closure was called from a different …\nGets the string that was specified by …\nDeprecated in favor of <code>ThreadPoolBuilder::build</code>.\nCreates and returns a valid rayon thread pool builder, but …\nThe number of threads receiving the broadcast in the …\nSets the number of threads to be used in the rayon …\nParallel iterator types for options\nNormally, whenever Rayon catches a panic, it tries to …\nThe rayon prelude imports the various <code>ParallelIterator</code> …\nParallel iterator types for ranges, the type for values …\nParallel iterator types for inclusive ranges, the type for …\nParallel iterator types for results\nExecutes the main loop for this thread. This will not …\nCreates a “fork-join” scope <code>s</code> and invokes the closure …\nCreates a scope that executes within this thread-pool. …\nCreates a “fork-join” scope <code>s</code> with FIFO order, and …\nCreates a scope that executes within this thread-pool. …\nParallel iterator types for slices\nPuts the task into the Rayon threadpool’s job queue in …\nSpawns a job into the fork-join scope <code>self</code>. This job will …\nSpawns an asynchronous task in this thread-pool. This task …\nSpawns an asynchronous task on every thread in this …\nSpawns a job into every thread of the fork-join scope <code>self</code>…\nSpawns a job into every thread of the fork-join scope <code>self</code>…\nSpawns an asynchronous task on every thread in this …\nFires off a task into the Rayon threadpool in the “static…\nSpawns a job into the fork-join scope <code>self</code>. This job will …\nSpawns an asynchronous task in this thread-pool. This task …\nSets a custom function for spawning threads.\nGets the value that was specified by …\nSets the stack size of the worker threads\nSets a callback to be invoked on thread start.\nParallel iterator types for strings\nThis module contains the parallel iterator types for owned …\nSets a closure which takes a thread index and returns the …\nUse the current thread as one of the threads in the pool.\nParallel iterator types for vectors (<code>Vec&lt;T&gt;</code>)\nCooperatively yields execution to local Rayon work.\nCooperatively yields execution to local Rayon work.\nCooperatively yields execution to Rayon.\nCooperatively yields execution to Rayon.\nParallel iterator that moves out of an array.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThis module contains the parallel iterator types for heaps …\nThis module contains the parallel iterator types for …\nThis module contains the parallel iterator types for …\nThis module contains the parallel iterator types for hash …\nThis module contains the parallel iterator types for hash …\nThis module contains the parallel iterator types for …\nThis module contains the parallel iterator types for …\nDraining parallel iterator that moves out of a binary heap,\nParallel iterator over a binary heap\nParallel iterator over an immutable reference to a binary …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nParallel iterator over a B-Tree map\nParallel iterator over an immutable reference to a B-Tree …\nParallel iterator over a mutable reference to a B-Tree map\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nParallel iterator over a B-Tree set\nParallel iterator over an immutable reference to a B-Tree …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDraining parallel iterator that moves out of a hash map, …\nParallel iterator over a hash map\nParallel iterator over an immutable reference to a hash map\nParallel iterator over a mutable reference to a hash map\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDraining parallel iterator that moves out of a hash set, …\nParallel iterator over a hash set\nParallel iterator over an immutable reference to a hash set\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nParallel iterator over a linked list\nParallel iterator over an immutable reference to a linked …\nParallel iterator over a mutable reference to a linked list\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDraining parallel iterator that moves a range out of a …\nParallel iterator over a double-ended queue\nParallel iterator over an immutable reference to a …\nParallel iterator over a mutable reference to a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n<code>Chain</code> is an iterator that joins <code>b</code> after <code>a</code> in one …\n<code>Chunks</code> is an iterator that groups elements of an …\n<code>Cloned</code> is an iterator that clones the elements of an …\n<code>Copied</code> is an iterator that copies the elements of an …\nThe enum <code>Either</code> with variants <code>Left</code> and <code>Right</code> is a general …\nIterator adaptor for the <code>empty()</code> function.\n<code>Enumerate</code> is an iterator that returns the current count …\n<code>ExponentialBlocks</code> is a parallel iterator that consumes …\n<code>Filter</code> takes a predicate <code>filter_op</code> and filters out …\n<code>FilterMap</code> creates an iterator that uses <code>filter_op</code> to both …\n<code>FlatMap</code> maps each element to a parallel iterator, then …\n<code>FlatMapIter</code> maps each element to a serial iterator, then …\n<code>Flatten</code> turns each element to a parallel iterator, then …\n<code>FlattenIter</code> turns each element to a serial iterator, then …\n<code>Fold</code> is an iterator that applies a function over an …\n<code>FoldChunks</code> is an iterator that groups elements of an …\n<code>FoldChunksWith</code> is an iterator that groups elements of an …\n<code>FoldWith</code> is an iterator that applies a function over an …\n<code>FromParallelIterator</code> implements the creation of a …\nAn iterator that supports “random access” to its data, …\n<code>Inspect</code> is an iterator that calls a function with a …\n<code>Interleave</code> is an iterator that interleaves elements of …\n<code>InterleaveShortest</code> is an iterator that works similarly to …\n<code>Intersperse</code> is an iterator that inserts a particular item …\n<code>IntoParallelIterator</code> implements the conversion to a …\n<code>IntoParallelRefIterator</code> implements the conversion to a …\n<code>IntoParallelRefMutIterator</code> implements the conversion to a …\nThe type of item that the parallel iterator will produce.\nThe type of item that the parallel iterator will produce. …\nThe type of item that will be produced; this is typically …\nThe type of item that this parallel iterator produces. For …\nThe type of item that the parallel iterator will produce. …\nThe type of item that the parallel iterator will produce. …\nThe parallel iterator type that will be created.\nThe type of the parallel iterator that will be returned.\nThe type of iterator that will be created.\nThe draining parallel iterator type that will be created.\nThe draining parallel iterator type that will be created.\n<code>IterBridge</code> is a parallel iterator that wraps a sequential …\nA value of type <code>L</code>.\n<code>Map</code> is an iterator that transforms the elements of an …\n<code>MapInit</code> is an iterator that transforms the elements of an …\n<code>MapWith</code> is an iterator that transforms the elements of an …\n<code>MaxLen</code> is an iterator that imposes a maximum length on …\n<code>MinLen</code> is an iterator that imposes a minimum length on …\n<code>MultiZip</code> is an iterator that zips up a tuple of parallel …\nIterator adaptor for the <code>once()</code> function.\n<code>PanicFuse</code> is an adaptor that wraps an iterator with a fuse …\nConversion trait to convert an <code>Iterator</code> to a …\n<code>ParallelDrainFull</code> creates a parallel iterator that moves …\n<code>ParallelDrainRange</code> creates a parallel iterator that moves …\n<code>ParallelExtend</code> extends an existing collection with items …\nParallel version of the standard iterator trait.\n<code>Positions</code> takes a predicate <code>predicate</code> and filters out …\nIterator adaptor for the <code>repeat()</code> function.\nIterator adaptor for the <code>repeatn()</code> function.\n<code>Rev</code> is an iterator that produces elements in reverse …\nA value of type <code>R</code>.\n<code>Skip</code> is an iterator that skips over the first <code>n</code> elements. …\n<code>SkipAny</code> is an iterator that skips over <code>n</code> elements from …\n<code>SkipAnyWhile</code> is an iterator that skips over elements from …\n<code>Split</code> is a parallel iterator using arbitrary data and a …\n<code>StepBy</code> is an iterator that skips <code>n</code> elements between each …\n<code>Take</code> is an iterator that iterates over the first <code>n</code> …\n<code>TakeAny</code> is an iterator that iterates over <code>n</code> elements from …\n<code>TakeAnyWhile</code> is an iterator that iterates over elements …\n<code>TryFold</code> is an iterator that applies a function over an …\n<code>TryFoldWith</code> is an iterator that applies a function over an …\n<code>UniformBlocks</code> is a parallel iterator that consumes itself …\n<code>Update</code> is an iterator that mutates the elements of an …\nParallelIterator for arbitrary tree-shaped patterns. …\nParallelIterator for arbitrary tree-shaped patterns. …\nParallelIterator for arbitrary tree-shaped patterns. …\n<code>WhileSome</code> is an iterator that yields the <code>Some</code> elements of …\n<code>Zip</code> is an iterator that zips up <code>a</code> and <code>b</code> into a single …\nAn <code>IndexedParallelIterator</code> that iterates over two parallel …\nTests that every item in the parallel iterator matches the …\nTests that every item in the parallel iterator matches the …\nSearches for <strong>some</strong> item in the parallel iterator that …\nSearches for <strong>some</strong> item in the parallel iterator that …\nDivides an iterator into sequential blocks of …\nDivides an iterator into sequential blocks of …\nDivides an iterator into sequential blocks of the given …\nDivides an iterator into sequential blocks of the given …\nTakes two iterators and creates a new iterator over both.\nTakes two iterators and creates a new iterator over both.\nSplits an iterator up into fixed-size chunks.\nSplits an iterator up into fixed-size chunks.\nCreates an iterator which clones all of its elements.  …\nCreates an iterator which clones all of its elements.  …\nLexicographically compares the elements of this …\nLexicographically compares the elements of this …\nCreates a fresh collection containing all the elements …\nCreates a fresh collection containing all the elements …\nCollects the results of the iterator into the specified …\nCollects the results of the iterator into the specified …\nCollects this iterator into a linked list of vectors.\nCollects this iterator into a linked list of vectors.\nCreates an iterator which copies all of its elements.  …\nCreates an iterator which copies all of its elements.  …\nCounts the number of items in this parallel iterator.\nCounts the number of items in this parallel iterator.\nInternal method used to define the behavior of this …\nInternal method used to define the behavior of this …\nCreates a parallel iterator that produces nothing.\nYields an index along with each item.\nYields an index along with each item.\nDetermines if the elements of this <code>ParallelIterator</code> are …\nDetermines if the elements of this <code>ParallelIterator</code> are …\nApplies <code>filter_op</code> to each item of this iterator, producing …\nApplies <code>filter_op</code> to each item of this iterator, producing …\nApplies <code>filter_op</code> to each item of this iterator to get an …\nApplies <code>filter_op</code> to each item of this iterator to get an …\nSearches for <strong>some</strong> item in the parallel iterator that …\nSearches for <strong>some</strong> item in the parallel iterator that …\nSearches for the sequentially <strong>first</strong> item in the parallel …\nSearches for the sequentially <strong>first</strong> item in the parallel …\nSearches for the sequentially <strong>last</strong> item in the parallel …\nSearches for the sequentially <strong>last</strong> item in the parallel …\nApplies the given predicate to the items in the parallel …\nApplies the given predicate to the items in the parallel …\nApplies the given predicate to the items in the parallel …\nApplies the given predicate to the items in the parallel …\nApplies the given predicate to the items in the parallel …\nApplies the given predicate to the items in the parallel …\nApplies <code>map_op</code> to each item of this iterator to get nested …\nApplies <code>map_op</code> to each item of this iterator to get nested …\nApplies <code>map_op</code> to each item of this iterator to get nested …\nApplies <code>map_op</code> to each item of this iterator to get nested …\nAn adaptor that flattens parallel-iterable <code>Item</code>s into one …\nAn adaptor that flattens parallel-iterable <code>Item</code>s into one …\nAn adaptor that flattens serial-iterable <code>Item</code>s into one …\nAn adaptor that flattens serial-iterable <code>Item</code>s into one …\nParallel fold is similar to sequential fold except that the\nParallel fold is similar to sequential fold except that the\nSplits an iterator into fixed-size chunks, performing a …\nSplits an iterator into fixed-size chunks, performing a …\nSplits an iterator into fixed-size chunks, performing a …\nSplits an iterator into fixed-size chunks, performing a …\nApplies <code>fold_op</code> to the given <code>init</code> value with each item of …\nApplies <code>fold_op</code> to the given <code>init</code> value with each item of …\nExecutes <code>OP</code> on each item produced by the iterator, in …\nExecutes <code>OP</code> on each item produced by the iterator, in …\nExecutes <code>OP</code> on a value returned by <code>init</code> with each item …\nExecutes <code>OP</code> on a value returned by <code>init</code> with each item …\nExecutes <code>OP</code> on the given <code>init</code> value with each item …\nExecutes <code>OP</code> on the given <code>init</code> value with each item …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates an instance of the collection from the parallel …\nDetermines if the elements of this <code>ParallelIterator</code> are …\nDetermines if the elements of this <code>ParallelIterator</code> are …\nDetermines if the elements of this <code>ParallelIterator</code> are …\nDetermines if the elements of this <code>ParallelIterator</code> are …\nApplies <code>inspect_op</code> to a reference to each item of this …\nApplies <code>inspect_op</code> to a reference to each item of this …\nInterleaves elements of this iterator and the other given …\nInterleaves elements of this iterator and the other given …\nInterleaves elements of this iterator and the other given …\nInterleaves elements of this iterator and the other given …\nIntersperses clones of an element between items of this …\nIntersperses clones of an element between items of this …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts <code>self</code> into a parallel iterator.\nDetermines if the elements of this <code>ParallelIterator</code> are …\nDetermines if the elements of this <code>ParallelIterator</code> are …\nProduces an exact count of how many items this iterator …\nDetermines if the elements of this <code>ParallelIterator</code> are …\nDetermines if the elements of this <code>ParallelIterator</code> are …\nApplies <code>map_op</code> to each item of this iterator, producing a …\nApplies <code>map_op</code> to each item of this iterator, producing a …\nApplies <code>map_op</code> to a value returned by <code>init</code> with each item …\nApplies <code>map_op</code> to a value returned by <code>init</code> with each item …\nApplies <code>map_op</code> to the given <code>init</code> value with each item of …\nApplies <code>map_op</code> to the given <code>init</code> value with each item of …\nComputes the maximum of all the items in the iterator. If …\nComputes the maximum of all the items in the iterator. If …\nComputes the maximum of all the items in the iterator with …\nComputes the maximum of all the items in the iterator with …\nComputes the item that yields the maximum value for the …\nComputes the item that yields the maximum value for the …\nComputes the minimum of all the items in the iterator. If …\nComputes the minimum of all the items in the iterator. If …\nComputes the minimum of all the items in the iterator with …\nComputes the minimum of all the items in the iterator with …\nComputes the item that yields the minimum value for the …\nComputes the item that yields the minimum value for the …\nDetermines if the elements of this <code>ParallelIterator</code> are …\nDetermines if the elements of this <code>ParallelIterator</code> are …\nCreates a parallel iterator that produces an element …\nInternal method used to define the behavior of this …\nInternal method used to define the behavior of this …\nWraps an iterator with a fuse in case of panics, to halt …\nWraps an iterator with a fuse in case of panics, to halt …\nCreates a bridge from this type to a <code>ParallelIterator</code>.\nReturns a draining parallel iterator over an entire …\nReturns a draining parallel iterator over a range of the …\nExtends an instance of the collection with the elements …\nConverts <code>self</code> into a parallel iterator.\nCreates the parallel iterator from <code>self</code>.\nLexicographically compares the elements of this …\nLexicographically compares the elements of this …\nPartitions the items of a parallel iterator into a pair of …\nPartitions the items of a parallel iterator into a pair of …\nPartitions and maps the items of a parallel iterator into …\nPartitions and maps the items of a parallel iterator into …\nTraits and functions used to implement parallel iteration. …\nSearches for <strong>some</strong> item in the parallel iterator that …\nSearches for <strong>some</strong> item in the parallel iterator that …\nSearches for the sequentially <strong>first</strong> item in the parallel …\nSearches for the sequentially <strong>first</strong> item in the parallel …\nSearches for the sequentially <strong>last</strong> item in the parallel …\nSearches for the sequentially <strong>last</strong> item in the parallel …\nSearches for items in the parallel iterator that match the …\nSearches for items in the parallel iterator that match the …\nMultiplies all the items in the iterator.\nMultiplies all the items in the iterator.\nReduces the items in the iterator into one item using <code>op</code>. …\nReduces the items in the iterator into one item using <code>op</code>. …\nReduces the items in the iterator into one item using <code>op</code>. …\nReduces the items in the iterator into one item using <code>op</code>. …\nCreates a parallel iterator that endlessly repeats <code>elt</code> (by …\nCreates a parallel iterator that produces <code>n</code> repeats of <code>elt</code> …\nProduces a new iterator with the elements of this iterator …\nProduces a new iterator with the elements of this iterator …\nCreates an iterator that skips the first <code>n</code> elements.\nCreates an iterator that skips the first <code>n</code> elements.\nCreates an iterator that skips <code>n</code> elements from <em>anywhere</em> in …\nCreates an iterator that skips <code>n</code> elements from <em>anywhere</em> in …\nCreates an iterator that skips elements from <em>anywhere</em> in …\nCreates an iterator that skips elements from <em>anywhere</em> in …\nThe <code>split</code> function takes arbitrary data and a closure that …\nCreates an iterator that steps by the given amount\nCreates an iterator that steps by the given amount\nSums up the items in the iterator.\nSums up the items in the iterator.\nCreates an iterator that yields the first <code>n</code> elements.\nCreates an iterator that yields the first <code>n</code> elements.\nTakes only <code>n</code> repeats of the element, similar to the general\nCreates an iterator that yields <code>n</code> elements from <em>anywhere</em> …\nCreates an iterator that yields <code>n</code> elements from <em>anywhere</em> …\nCreates an iterator that takes elements from <em>anywhere</em> in …\nCreates an iterator that takes elements from <em>anywhere</em> in …\nPerforms a fallible parallel fold.\nPerforms a fallible parallel fold.\nPerforms a fallible parallel fold with a cloneable <code>init</code> …\nPerforms a fallible parallel fold with a cloneable <code>init</code> …\nExecutes a fallible <code>OP</code> on each item produced by the …\nExecutes a fallible <code>OP</code> on each item produced by the …\nExecutes a fallible <code>OP</code> on a value returned by <code>init</code> with …\nExecutes a fallible <code>OP</code> on a value returned by <code>init</code> with …\nExecutes a fallible <code>OP</code> on the given <code>init</code> value with each …\nExecutes a fallible <code>OP</code> on the given <code>init</code> value with each …\nReduces the items in the iterator into one item using a …\nReduces the items in the iterator into one item using a …\nReduces the items in the iterator into one item using a …\nReduces the items in the iterator into one item using a …\nUnzips the items of a parallel iterator into a pair of …\nUnzips the items of a parallel iterator into a pair of …\nUnzips the results of the iterator into the specified …\nUnzips the results of the iterator into the specified …\nMutates each item of this iterator before yielding it.\nMutates each item of this iterator before yielding it.\nCreate a tree like parallel iterator from an initial root …\nCreate a tree like postfix parallel iterator from an …\nCreate a tree-like prefix parallel iterator from an …\nCreates an iterator over the <code>Some</code> items of this iterator, …\nCreates an iterator over the <code>Some</code> items of this iterator, …\nSets the maximum length of iterators desired to process in …\nSets the maximum length of iterators desired to process in …\nSets the minimum length of iterators desired to process in …\nSets the minimum length of iterators desired to process in …\nInternal method used to define the behavior of this …\nIterates over tuples <code>(A, B)</code>, where the items <code>A</code> are from …\nIterates over tuples <code>(A, B)</code>, where the items <code>A</code> are from …\nIterates tuples, repeating the element with items from …\nThe same as <code>Zip</code>, but requires that both iterators have the …\nThe same as <code>Zip</code>, but requires that both iterators have the …\nA consumer is effectively a generalized “fold” …\nThe <code>Folder</code> trait encapsulates the standard fold operation. …\nThe type of folder that this consumer can be converted …\nThe type of iterator we will become.\nThe type of item that will be produced by this producer …\nThe type of item returned by this producer.\nThe type of value returned by this callback. Analogous to …\nA <code>Producer</code> is effectively a “splittable <code>IntoIterator</code>”. …\nThe <code>ProducerCallback</code> trait is a kind of generic closure, …\nThe reducer is the final step of a <code>Consumer</code> – after a …\nThe type of reducer that is produced if this consumer is …\nThe type of result that this consumer will ultimately …\nThe type of result that will ultimately be produced by the …\nA stateless consumer can be freely copied. These consumers …\nA variant on <code>Producer</code> which does not know its exact length …\nThis helper function is used to “connect” a parallel …\nThis helper function is used to “connect” a producer …\nA variant of <code>bridge_producer_consumer</code> where the producer …\nInvokes the callback with the given producer as argument. …\nFinish consuming items, produce final result.\nConsume next item and return new sequential state.\nConsume items from the iterator until full, and return new …\nIterate the producer, feeding each element to <code>folder</code>, and …\nIterate the producer, feeding each element to <code>folder</code>, and …\nHint whether this <code>Consumer</code> would like to stop processing …\nHint whether this <code>Folder</code> would like to stop processing …\nConvert the consumer into a folder that can consume items …\nConvert <code>self</code> into an iterator; at this point, no more …\nThe maximum number of items that we will process …\nThe minimum number of items that we will process …\nReduce two final results into one; this is executed after a\nSplit midway into a new producer if possible, otherwise …\nSplit into two producers; one produces items <code>0..index</code>, the …\nDivide the consumer into two consumers, one processing …\nSplits off a “left” consumer and returns it. The <code>self</code> …\nCreates a reducer that can be used to combine the results …\nA parallel iterator over the value in <code>Some</code> variant of an …\nA parallel iterator over a reference to the <code>Some</code> variant …\nA parallel iterator over a mutable reference to the <code>Some</code> …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n<code>FromParallelIterator</code> implements the creation of a …\nAn iterator that supports “random access” to its data, …\n<code>IntoParallelIterator</code> implements the conversion to a …\n<code>IntoParallelRefIterator</code> implements the conversion to a …\n<code>IntoParallelRefMutIterator</code> implements the conversion to a …\nThe type of item that the parallel iterator will produce.\nThe type of item that the parallel iterator will produce. …\nThe type of item that will be produced; this is typically …\nThe type of item that this parallel iterator produces. For …\nThe type of item that the parallel iterator will produce. …\nThe type of item that the parallel iterator will produce. …\nThe parallel iterator type that will be created.\nThe type of the parallel iterator that will be returned.\nThe type of iterator that will be created.\nThe draining parallel iterator type that will be created.\nThe draining parallel iterator type that will be created.\nConversion trait to convert an <code>Iterator</code> to a …\n<code>ParallelDrainFull</code> creates a parallel iterator that moves …\n<code>ParallelDrainRange</code> creates a parallel iterator that moves …\n<code>ParallelExtend</code> extends an existing collection with items …\nParallel version of the standard iterator trait.\nParallel extensions for slices.\nParallel extensions for mutable slices.\nParallel extensions for strings.\nReturns a plain slice, which is used to implement the rest …\nReturns a plain mutable slice, which is used to implement …\nReturns a plain string slice, which is used to implement …\nInternal method used to define the behavior of this …\nInternal method used to define the behavior of this …\nCreates an instance of the collection from the parallel …\nConverts <code>self</code> into a parallel iterator.\nProduces an exact count of how many items this iterator …\nCreates a bridge from this type to a <code>ParallelIterator</code>.\nReturns a parallel iterator over the bytes of a string.\nReturns a parallel iterator over the bytes of a string.\nReturns a parallel iterator over the characters of a …\nReturns a parallel iterator over the characters of a …\nReturns a parallel iterator over the characters of a …\nReturns a parallel iterator over the characters of a …\nReturns a parallel iterator over the slice producing …\nReturns a parallel iterator over the slice producing …\nReturns a parallel iterator over the slice producing …\nReturns a parallel iterator over the slice producing …\nReturns a parallel iterator over at most <code>chunk_size</code> …\nReturns a parallel iterator over at most <code>chunk_size</code> …\nReturns a parallel iterator over <code>chunk_size</code> elements of …\nReturns a parallel iterator over <code>chunk_size</code> elements of …\nReturns a parallel iterator over <code>chunk_size</code> elements of …\nReturns a parallel iterator over <code>chunk_size</code> elements of …\nReturns a parallel iterator over at most <code>chunk_size</code> …\nReturns a parallel iterator over at most <code>chunk_size</code> …\nReturns a draining parallel iterator over an entire …\nReturns a draining parallel iterator over a range of the …\nReturns a parallel iterator over a string encoded as …\nReturns a parallel iterator over a string encoded as …\nExtends an instance of the collection with the elements …\nConverts <code>self</code> into a parallel iterator.\nCreates the parallel iterator from <code>self</code>.\nReturns a parallel iterator over the lines of a string, …\nReturns a parallel iterator over the lines of a string, …\nReturns a parallel iterator over substrings that match a …\nReturns a parallel iterator over substrings that match a …\nReturns a parallel iterator over substrings that match a …\nReturns a parallel iterator over substrings that match a …\nReturns a parallel iterator over at most <code>chunk_size</code> …\nReturns a parallel iterator over at most <code>chunk_size</code> …\nReturns a parallel iterator over <code>chunk_size</code> elements of …\nReturns a parallel iterator over <code>chunk_size</code> elements of …\nReturns a parallel iterator over <code>chunk_size</code> elements of …\nReturns a parallel iterator over <code>chunk_size</code> elements of …\nReturns a parallel iterator over at most <code>chunk_size</code> …\nReturns a parallel iterator over at most <code>chunk_size</code> …\nSorts the slice in parallel.\nSorts the slice in parallel.\nSorts the slice in parallel with a comparator function.\nSorts the slice in parallel with a comparator function.\nSorts the slice in parallel with a key extraction function.\nSorts the slice in parallel with a key extraction function.\nSorts the slice in parallel with a key extraction function.\nSorts the slice in parallel with a key extraction function.\nSorts the slice in parallel, but might not preserve the …\nSorts the slice in parallel, but might not preserve the …\nSorts the slice in parallel with a comparator function, …\nSorts the slice in parallel with a comparator function, …\nSorts the slice in parallel with a key extraction …\nSorts the slice in parallel with a key extraction …\nReturns a parallel iterator over subslices separated by …\nReturns a parallel iterator over subslices separated by …\nReturns a parallel iterator over substrings separated by a …\nReturns a parallel iterator over substrings separated by a …\nReturns a parallel iterator over the sub-slices of a …\nReturns a parallel iterator over the sub-slices of a …\nReturns a parallel iterator over subslices separated by …\nReturns a parallel iterator over subslices separated by …\nReturns a parallel iterator over substrings separated by a …\nReturns a parallel iterator over substrings separated by a …\nReturns a parallel iterator over mutable subslices …\nReturns a parallel iterator over mutable subslices …\nReturns a parallel iterator over mutable subslices …\nReturns a parallel iterator over mutable subslices …\nReturns a parallel iterator over substrings terminated by a\nReturns a parallel iterator over substrings terminated by a\nReturns a parallel iterator over the sub-slices of a …\nReturns a parallel iterator over the sub-slices of a …\nReturns a parallel iterator over all contiguous windows of …\nReturns a parallel iterator over all contiguous windows of …\nInternal method used to define the behavior of this …\nParallel iterator over a range, implemented for all …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nParallel iterator over an inclusive range, implemented for …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nParallel iterator over a result\nParallel iterator over an immutable reference to a result\nParallel iterator over a mutable reference to a result\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nParallel iterator over slice in (non-overlapping) chunks …\nParallel iterator over slice in (non-overlapping) mutable …\nParallel iterator over immutable non-overlapping chunks of …\nParallel iterator over immutable non-overlapping chunks of …\nParallel iterator over mutable non-overlapping chunks of a …\nParallel iterator over mutable non-overlapping chunks of a …\nParallel iterator over immutable items in a slice\nParallel iterator over mutable items in a slice\nParallel extensions for slices.\nParallel extensions for mutable slices.\nParallel iterator over immutable non-overlapping chunks of …\nParallel iterator over immutable non-overlapping chunks of …\nParallel iterator over mutable non-overlapping chunks of a …\nParallel iterator over mutable non-overlapping chunks of a …\nParallel iterator over slices separated by a predicate\nParallel iterator over slices separated by a predicate, …\nParallel iterator over mutable slices separated by a …\nParallel iterator over mutable slices separated by a …\nParallel iterator over immutable overlapping windows of a …\nReturns a plain slice, which is used to implement the rest …\nReturns a plain mutable slice, which is used to implement …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn the remainder of the original slice that is not …\nReturn the remainder of the original slice that is not …\nReturn the remainder of the original slice that is not …\nReturn the remainder of the original slice that is not …\nReturn the remainder of the original slice that is not …\nReturn the remainder of the original slice that is not …\nReturn the remainder of the original slice that is not …\nReturn the remainder of the original slice that is not …\nParallel iterator over the bytes of a string\nParallel iterator over the characters of a string, with …\nParallel iterator over the characters of a string\nParallel iterator over a string encoded as UTF-16\nParallel iterator over lines in a string\nParallel iterator over substrings that match a pattern, …\nParallel iterator over substrings that match a pattern\nParallel extensions for strings.\nParallel iterator over substrings separated by a pattern\nParallel iterator over substrings separated by ASCII …\nParallel iterator over substrings separated by a pattern\nParallel iterator over substrings separated by a …\nParallel iterator over substrings separated by whitespace\nReturns a plain string slice, which is used to implement …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDraining parallel iterator that moves a range of …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDraining parallel iterator that moves a range out of a …\nParallel iterator that moves out of a vector.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA low level representation of the byte offsets of each …\nAn iterator over all non-overlapping capture matches in a …\nAn iterator over the names of all capture groups in a …\nRepresents the capture groups for a single match.\nAn error that occurred during parsing or compiling a …\nRepresents a single match of a regex in a haystack.\nAn iterator over all non-overlapping matches in a haystack.\nA helper type for forcing literal string replacement.\nA compiled regular expression for searching Unicode …\nA configurable builder for a <code>Regex</code>.\nA trait for types that can be used to replace matches in a …\nA by-reference adaptor for a <code>Replacer</code>.\nAn iterator over all substrings delimited by a regex match.\nAn iterator over at most <code>N</code> substrings delimited by a regex …\nAn iterator over all group matches in a <code>Captures</code> value.\nReturns the original string of this regex.\nReturns the substring of the haystack that matched.\nCompiles the pattern given to <code>RegexBuilder::new</code> with the …\nReturns a type that implements <code>Replacer</code>, but that borrows …\nReturns a fresh allocated set of capture locations that can\nReturns an iterator over the capture names in this regex.\nThis routine searches for the first match of this regex in …\nReturns the same as <code>Regex::captures</code>, but starts the search …\nReturns an iterator that yields successive non-overlapping …\nReturns the number of captures groups in this regex.\nThis is like <code>Regex::captures</code>, but writes the byte offsets …\nReturns the same as <code>Regex::captures_read</code>, but starts the …\nThis configures whether to enable ASCII case insensitive …\nThis configures CRLF mode for the entire pattern.\nThis configures dot-matches-new-line mode for the entire …\nReturns the byte offset of the end of the match in the …\nEscapes all regular expression meta characters in <code>pattern</code>.\nExpands all instances of <code>$ref</code> in <code>replacement</code> to the …\nThis is a convenience routine for extracting the substrings\nThis routine searches for the first match of this regex in …\nReturns the same as <code>Regex::find</code>, but starts the search at …\nReturns an iterator that yields successive non-overlapping …\nShows the original regular expression.\nShows the original regular expression.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nAttempts to parse a string into a regular expression\nReturns the <code>Match</code> associated with the capture group at …\nReturns the start and end byte offsets of the capture …\nThis configures verbose mode for the entire pattern.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if and only if this match has a length of …\nReturns true if and only if there is a match for the regex …\nReturns the same as <code>Regex::is_match</code>, but starts the search …\nReturns an iterator over all capture groups. This includes …\nReturns the total number of capture groups. This includes …\nReturns the length, in bytes, of this match.\nReturns the total number of capture groups (even if they …\nThis configures multi-line mode for the entire pattern.\nReturns the <code>Match</code> associated with the capture group named …\nSet the nesting limit for this parser.\nCompiles a regular expression. Once compiled, it can be …\nCreate a new builder with a default configuration for the …\nReturn a fixed unchanging replacement string.\nReturns the range over the starting and ending byte …\nReplaces the leftmost-first match in the given haystack …\nReplaces all non-overlapping matches in the haystack with …\nAppends possibly empty data to <code>dst</code> to replace the current …\nReplaces at most <code>limit</code> non-overlapping matches in the …\nReturns the end byte offset of the first match in the …\nReturns the same as <code>Regex::shortest_match</code>, but starts the …\nSets the approximate size limit, in bytes, of the compiled …\nReturns an iterator of substrings of the haystack given, …\nReturns an iterator of at most <code>limit</code> substrings of the …\nReturns the byte offset of the start of the match in the …\nReturns the total number of capturing groups that appear …\nThis configures swap-greed mode for the entire pattern.\nAttempts to parse a string into a regular expression\nAttempts to parse a string into a regular expression\nNumber of channels in a stream.\nSource of audio samples decoded from an input stream. See …\nRepresents value of a single sample. Silence corresponds …\nStream sample rate (a frame rate or samples per second per …\nHandle to a device that outputs sounds.\nA source of samples.\nA sink that allows changing the position of the source and …\nAmplifies the sound by the given value.\nAmplifies the sound logarithmically by the given value.\nNormalized amplification in <code>[0.0, 1.0]</code> range. This method …\nAppends a sound to the queue of sounds to play.\nAppends a sound to the queue of sounds to play.\nApplies automatic gain control to the sound.\nA simple source of samples coming from a buffer.\nStores the source in a buffer in addition to returning it. …\nReturns a builder for creating a new decoder with …\nReturns the number of channels. Channels are always …\nRemoves all currently loaded <code>Source</code>s from the <code>Sink</code>, and …\nRemoves all currently loaded <code>Source</code>s from the <code>SpatialSink</code> …\nBuilds a new <code>Sink</code>, beginning playback on a stream.\nBuilds a new <code>SpatialSink</code>.\nThis module contains functions that convert from one PCM …\nReturns the number of samples before the current span …\nDecodes audio samples from various audio file formats.\nDelays the sound by a certain duration.\nDestroys the sink without stopping the sounds that are …\nDestroys the sink without stopping the sounds that are …\nApplies a distortion effect to the sound.\nReturns true if this sink has no more sounds to play.\nReturns true if this sink has no more sounds to play.\nFades in the sound.\nFades out the sound.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the position of the sound that’s being played.\nReturns the position of the sound that’s being played.\nApplies a high-pass filter to the source.\nApplies a high-pass filter to the source while allowing …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGets if a sink is paused\nGets if a sound is paused\nReturns the number of sounds currently in the queue.\nReturns the number of sounds currently in the queue.\nApplies limiting to prevent audio peaks from exceeding a …\nApplies a linear gain ramp to the sound.\nApplies a low-pass filter to the source. <strong>Warning</strong>: Probably …\nApplies a low-pass filter to the source while allowing the …\nMath utilities for audio processing.\nMixes this source with another one.\nMixer that plays multiple sounds at the same time.\nBuilds a new <code>Sink</code>.\nBuilds a new decoder with default settings.\nBuilds a new looped decoder with default settings.\nMakes the sound pausable.\nPauses playback of this sink.\nPauses playback of this sink.\nCalls the <code>access</code> closure on <code>Self</code> the first time the source …\nResumes playback of a paused sink.\nResumes playback of a paused sound.\nQueue that plays sounds one after the other.\nRepeats this source forever.\nAdds a basic reverb effect.\nReturns the rate at which the source should be played. In …\nSets the position of the sound emitter in 3 dimensional …\nSets the position of the left ear in 3 dimensional space.\nSets the position of the right ear in 3 dimensional space.\nChanges the play speed of the sound. Does not adjust the …\nChanges the speed of the sound.\nChanges the volume of the sound.\nChanges the volume of the sound.\nImmediately skips a certain duration of this source.\nSkips to the next <code>Source</code> in the <code>Sink</code>\nAdds a method <code>Skippable::skip</code> for skipping this source. …\nSleeps the current thread until the sound ends.\nSleeps the current thread until the sound ends.\nSources of sound and various filters.\nGets the speed of the sound.\nChanges the play speed of the sound. Does not adjust the …\nChanges the play speed of the sound. Does not adjust the …\nA simple source of samples coming from a static buffer.\nStops the sink by emptying the queue.\nStops the sink by emptying the queue.\nMakes the sound stoppable.\nMixes this sound fading out with another sound fading in …\nTakes a certain duration of this source and then stops.\nReturns the total duration of this source, if known.\nStart tracking the elapsed duration since the start of the …\nAttempts to seek to a given position in the current source.\nAttempts to seek to a given position in the current source.\nAttempts to seek to a given position in the current source.\nGets the volume of the sound.\nThe value <code>1.0</code> is the “normal” volume (unfiltered …\nA buffer of samples treated as a source.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nBuilds a new <code>SamplesBuffer</code>.\nThis jumps in memory till the sample for <code>pos</code>.\nIterator that converts from a certain channel count to …\nIterator that converts from a certain sample rate to …\nConverts the samples data type to <code>O</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet mutable access to the iterator\nget mutable access to the iterator\nget mutable access to the iterator\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDestroys this iterator and returns the underlying iterator.\nDestroys this iterator and returns the underlying iterator.\nDestroys this iterator and returns the underlying iterator.\nInitializes the iterator.\nBuilds a new converter.\nCreate new sample rate converter.\nThe stream contained malformed data and could not be …\nSource of audio samples decoded from an input stream. See …\nBuilder for configuring and creating a decoder.\nErrors that can occur when creating a decoder.\nAn IO error occurred while reading, writing, or seeking …\nA default or user-defined limit was reached while decoding …\nSource of audio samples from decoding a file that never …\nNo streams were found by the decoder.\nThe demuxer or decoder needs to be reset before continuing.\nAudio decoder configuration settings. Support for these …\nThe format of the data has not been recognized.\nCreates a new decoder with previously configured settings.\nCreates a new looped decoder with previously configured …\nBuilder pattern for configuring and constructing decoders.\nReturns the number of channels in the audio stream.\nReturns the current span length of the underlying decoder.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new decoder builder with default settings.\nReturns the next sample in the audio stream.\nReturns the sample rate of the audio stream.\nReturns the size hint for this iterator.\nSymphonia decoders types\nReturns the total duration of this audio source.\nAttempts to seek to a specific position in the audio …\nSets the byte length of the stream. This is required for:\nEnables or disables coarse seeking. This is disabled by …\nSets the input data source to decode.\nEnables or disables gapless playback. This is enabled by …\nSets a format hint for the decoder.\nSets a mime type hint for the decoder.\nConfigure whether the data supports random access seeking. …\nBuilder for configuring and creating a decoder.\nAudio decoder configuration settings. Support for these …\nAccurate seeking is not supported\nDemuxer failed to seek\nThe decoder does not support random access seeking\nError returned when the try_seek implementation of the …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nConverts decibels to linear amplitude scale.\nConverts linear amplitude scale to decibels.\nThe input of the mixer.\nThe output of the mixer. Implements <code>Source</code>.\nAdds a new source to mix to the existing ones.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBuilds a new mixer.\nThe input of the queue.\nThe output of the queue. Implements <code>Source</code>.\nAdds a new source to the end of the queue.\nAdds a new source to the end of the queue.\nRemoves all the sounds from the queue. Returns the number …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBuilds a new queue. It consists of an input and an output.\nSets whether the queue stays alive if there’s no more …\nOnly seeks within the current source.\nFilter that modifies each sample by a given value.\nAutomatic Gain Control filter for maintaining consistent …\nThis applies an audio filter, it can be a high or low pass …\nIterator that at the same time extracts data from the …\nCombines channels in input into a single mono source, then …\nGenerate a sine wave with an instantaneous frequency that …\nMixes one sound fading out with another sound fading in …\nA source that delays the given source by a certain amount.\nFilter that applies a distortion effect to the source.\nWhen the inner source is empty this decrements a …\nAn empty source.\nAn empty source that executes a callback function\nFilter that modifies raises the volume from silence over a …\nFilter that modifies lowers the volume to silence over a …\nInternal type used by <code>from_factory</code>.\nA source that chains sources provided by an iterator.\nWaveform functions.\nGenerator function.\nA source filter that applies audio limiting to prevent …\nConfiguration settings for audio limiting.\nFilter that adds a linear gain ramp to the source over a …\nFilter that modifies each sample by a given value.\nOne of the underlying sources does not support seeking\nAny other error probably in a custom Source\nWraps a source and makes it pausable by calling …\nCalls a function on a source every time a period elapsed.\nA source that repeats the given source.\nA rising sawtooth wave.\nAn infinite source that produces a sawtooth wave.\nOccurs when <code>try_seek</code> fails because the underlying decoder …\nAn infinite source that produces one of a selection of …\nA sinusoidal waveform.\nAn infinite source that produces a sine.\nA source that skips specified duration of the given source …\nWrap the source in a skippable. It allows ending the …\nA source of samples.\nA simple spatial audio source. The underlying source is …\nFilter that modifies each sample by a given value.\nA square wave, rising edge at t=0.\nAn infinite source that produces a square wave.\nThis is the same as <code>Skippable</code> see its docs\nThe symphonia decoder ran into an issue\nA source that truncates the given source to a certain …\nTracks the elapsed duration since the start of the …\nA triangle waveform.\nAn infinite source that produces a triangle wave.\nAn iterator that reads from a <code>Source</code> and converts the …\nAn source that produces samples with value zero (silence). …\nAmplifies the sound by the given value.\nAmplifies the sound logarithmically by the given value.\nNormalized amplification in <code>[0.0, 1.0]</code> range. This method …\nTime to respond to level increases\nApplies automatic gain control to the sound.\nCreates settings optimized for broadcast and streaming …\nStores the source in a buffer in addition to returning it. …\nReturns the number of channels. Channels are always …\nConvenience function to create a new <code>Chirp</code> source.\nRemove any filter set.\nReturns the number of samples before the current span …\nDelays the sound by a certain duration.\nApplies a distortion effect to the sound.\nCreates settings optimized for dynamic content like music …\nFades in the sound.\nFades out the sound.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nBuilds a source that chains sources built from a factory.\nBuilds a source that chains sources provided by an …\nCreates settings optimized for gaming and interactive …\nReturns the position of the underlying source relative to …\nApplies a high-pass filter to the source.\nApplies a high-pass filter to the source while allowing …\nReturns a mutable reference to the inner source.\nReturns a reference to the inner source.\nReturns a reference to the inner source.\nReturns a reference to the inner source.\nReturns a reference to the inner source.\nReturns a reference to the inner source.\nReturns a reference to the inner source.\nReturns a reference to the inner source.\nReturns a reference to the inner source.\nReturns a reference to the inner audio source.\nReturns a reference to the innner source.\nReturns a reference to the inner source.\nReturns a reference to the inner source.\nReturns a reference to the inner source.\nReturns a reference to the inner source.\nReturns a reference to the inner source.\nReturns a reference to the inner source.\nReturns a reference to the inner source.\nReturns a reference to the inner source.\nReturns the inner source.\nReturns a mutable reference to the inner source.\nReturns a mutable reference to the inner source.\nReturns a mutable reference to the inner source.\nReturns a mutable reference to the inner source.\nReturns a mutable reference to the inner source.\nReturns a mutable reference to the inner source.\nReturns a mutable reference to the inner source.\nReturns a mutable reference to the inner source.\nReturns a mutable reference to the inner audio source.\nReturns a mutable reference to the inner source.\nReturns a mutable reference to the inner source.\nReturns a mutable reference to the inner source.\nReturns a mutable reference to the inner source.\nReturns a mutable reference to the inner source.\nReturns a mutable reference to the inner source.\nReturns a mutable reference to the inner source.\nReturns a mutable reference to the inner source.\nReturns a mutable reference to the inner source.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the inner source.\nReturns the inner source.\nReturns the inner source.\nReturns the inner source.\nReturns the inner source.\nReturns the inner source.\nReturns the inner source.\nReturns the inner source.\nConsumes the limiter and returns the inner audio source.\nReturns the inner source.\nReturns the inner source.\nReturns the inner source.\nReturns the inner source.\nReturns the inner source.\nReturns the inner source.\nReturns the inner source.\nReturns the inner source.\nReturns the inner source.\nIndicates if the data source is in a paused state.\nRange over which limiting gradually increases (dB).\nApplies limiting to prevent audio peaks from exceeding a …\nApplies a linear gain ramp to the sound.\nCreates settings optimized for live performance and …\nApplies a low-pass filter to the source. <strong>Warning</strong>: Probably …\nApplies a low-pass filter to the source while allowing the …\nCreates settings optimized for mastering and final audio …\nMixes this source with another one.\nCreate an empty source that executes a callback function. …\nWrap the input source and make it mono. Play that mono …\nWhen the inner source is empty the AtomicUsize passed in …\nAn empty source that immediately ends without ever …\nCreates new limit settings with default values.\nThe frequency of the sine.\nCreate a new <code>SignalGenerator</code> object that generates an …\nThe frequency of the sine.\nBuilds a new <code>SpatialSink</code>, beginning playback on a stream.\nThe frequency of the sine.\nThe frequency of the sine.\nWrap a <code>Source</code> and lazily convert its samples to a specific …\nCreate a new source that never ends and produces total …\nCreate a new source that never ends and produces total …\nProvides the next limited sample.\nMakes the sound pausable.\nCalls the <code>access</code> closure on <code>Self</code> the first time the source …\nTime to recover after level decreases\nRepeats this source forever.\nAdds a basic reverb effect.\nReturns the rate at which the source should be played. In …\nEnable or disable AGC processing.\nModifies the amplification factor.\nModifies the speed factor.\nMake the truncated source end with a FadeOut. The fadeout …\nModifies the distortion gain.\nModifies the amplification factor logarithmically.\nSets whether the filter applies.\nSets the position of the emitter and ears in the 3D world.\nModifies the distortion threshold.\nSets the volume for a given channel number. Will panic if …\nProvides size hints from the inner limiter.\nSkips the current source\nImmediately skips a certain duration of this source.\nAdds a method <code>Skippable::skip</code> for skipping this source. …\nWill the source remain playing at its position before the …\nChanges the play speed of the sound. Does not adjust the …\nStops the sound.\nMakes the sound stoppable.\nMixes this sound fading out with another sound fading in …\nTakes a certain duration of this source and then stops.\nLevel where limiting begins (dBFS, must be negative).\nModifies this filter so that it becomes a high-pass filter\nSame as to_high_pass but allows the q value (bandwidth) to …\nModifies this filter so that it becomes a low-pass filter.\nSame as to_low_pass but allows the q value (bandwidth) to …\nReturns the total duration of this source, if known.\nStart tracking the elapsed duration since the start of the …\nCan not support seek, in the end state we lose the …\nAttempts to seek to a given position in the current source.\nPos is seen from the perspective of the api user.\nWill only attempt a seek if both underlying sources …\nSets the attack time - how quickly the limiter responds to …\nCreate a new <code>SignalGenerator</code> object that generates an …\nSets the knee width - range over which limiting gradually …\nSets the release time - how quickly the limiter recovers …\nSets the threshold level where limiting begins.\nThe source that did not support seek\nA buffer of samples treated as a source.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nBuilds a new <code>StaticSamplesBuffer</code>.\nReturn the bitwise mask of matches.\nMatches when <em>any</em> haystack character equals <em>any</em> needle …\nMatches when a character position in the needle is equal …\nMatches when the complete needle string is a substring …\nReturn the index of the first match found.\nstring segment elements are i16 values\nstring segment elements are i8 values\nReturn the index of the last match found.\nInterprets consecutive pairs of characters in the needle …\nstring segment elements are u16 values\nstring segment elements are u8 values\nReturn the lanewise mask of matches.\nLanewise absolute value with lanes as <code>i16</code>.\nAbsolute value of <code>i16</code> lanes.\nLanewise absolute value with lanes as <code>i32</code>.\nAbsolute value of <code>i32</code> lanes.\nLanewise absolute value with lanes as <code>i8</code>.\nAbsolute value of <code>i8</code> lanes.\nAdd two <code>u32</code> with a carry value.\nAdd two <code>u64</code> with a carry value.\nAdd horizontal pairs of <code>i16</code> values, pack the outputs as <code>a</code> …\nHorizontal <code>a + b</code> with lanes as <code>i16</code>.\nAdd horizontal pairs of <code>i32</code> values, pack the outputs as <code>a</code> …\nHorizontal <code>a + b</code> with lanes as <code>i32</code>.\nAdd each lane horizontally, pack the outputs as <code>a</code> then <code>b</code>.\nAdd each lane horizontally, pack the outputs as <code>a</code> then <code>b</code>.\nAdd adjacent <code>f32</code> lanes.\nAdd adjacent <code>f64</code> lanes.\nAdd horizontal pairs of <code>i16</code> values, saturating, pack the …\nHorizontal saturating <code>a + b</code> with lanes as <code>i16</code>.\nLanewise <code>a + b</code> with lanes as <code>i16</code>.\nLanewise <code>a + b</code> with lanes as <code>i16</code>.\nLanewise <code>a + b</code> with lanes as <code>i32</code>.\nLanewise <code>a + b</code> with lanes as <code>i32</code>.\nLanewise <code>a + b</code> with lanes as <code>i64</code>.\nLanewise <code>a + b</code> with lanes as <code>i64</code>.\nLanewise <code>a + b</code> with lanes as <code>i8</code>.\nLanewise <code>a + b</code> with lanes as <code>i8</code>.\nLanewise <code>a + b</code>.\nLow lane <code>a + b</code>, other lanes unchanged.\nLanewise <code>a + b</code>.\nLowest lane <code>a + b</code>, high lane unchanged.\nLanewise <code>a + b</code> with <code>f32</code> lanes.\nLanewise <code>a + b</code> with <code>f64</code> lanes.\nLanewise saturating <code>a + b</code> with lanes as <code>i16</code>.\nLanewise saturating <code>a + b</code> with lanes as <code>i16</code>.\nLanewise saturating <code>a + b</code> with lanes as <code>i8</code>.\nLanewise saturating <code>a + b</code> with lanes as <code>i8</code>.\nLanewise saturating <code>a + b</code> with lanes as <code>u16</code>.\nLanewise saturating <code>a + b</code> with lanes as <code>u16</code>.\nLanewise saturating <code>a + b</code> with lanes as <code>u8</code>.\nLanewise saturating <code>a + b</code> with lanes as <code>u8</code>.\nAlternately, from the top, add a lane and then subtract a …\nAdd the high lane and subtract the low lane.\nAlternately, from the top, add <code>f32</code> then sub <code>f32</code>.\nAlternately, from the top, add <code>f64</code> then sub <code>f64</code>.\nPerform the last round of an AES decryption flow on <code>a</code> …\nPerform one round of an AES decryption flow on <code>a</code> using the …\nPerform the last round of an AES encryption flow on <code>a</code> …\nPerform one round of an AES encryption flow on <code>a</code> using the …\nPerform the InvMixColumns transform on <code>a</code>.\nAssist in expanding an AES cipher key.\nLanewise average of the <code>u16</code> values.\nAverage <code>u16</code> lanes.\nLanewise average of the <code>u8</code> values.\nAverage <code>u8</code> lanes.\nExtract a span of bits from the <code>u32</code>, control value style.\nExtract a span of bits from the <code>u64</code>, control value style.\nExtract a span of bits from the <code>u32</code>, start and len style.\nExtract a span of bits from the <code>u64</code>, start and len style.\nGets the mask of all bits up to and including the lowest …\nGets the mask of all bits up to and including the lowest …\nResets (clears) the lowest set bit.\nResets (clears) the lowest set bit.\nGets the <em>value</em> of the lowest set bit in a <code>u32</code>.\nGets the <em>value</em> of the lowest set bit in a <code>u64</code>.\nZero out all high bits in a <code>u32</code> starting at the index …\nZero out all high bits in a <code>u64</code> starting at the index …\nBitwise <code>a &amp; b</code>.\nBitwise <code>a &amp; b</code>.\nBitwise <code>a &amp; b</code>.\nBitwise <code>a &amp; b</code>.\nBitwise <code>a &amp; b</code>.\nBitwise <code>a &amp; b</code>.\nBitwise <code>(!a) &amp; b</code>.\nBitwise <code>(!a) &amp; b</code>.\nBitwise <code>(!a) &amp; b</code>.\nBitwise <code>(!a) &amp; b</code>.\nBitwise <code>(!a) &amp; b</code>.\nBitwise <code>(!a) &amp; b</code>.\nBitwise <code>(!a) &amp; b</code> for <code>u32</code>\nBitwise <code>(!a) &amp; b</code> for <code>u64</code>\nBitwise <code>a | b</code>.\nBitwise <code>a | b</code>.\nBitwise <code>a | b</code>.\nBitwise <code>a | b</code>.\nBitwise <code>a | b</code>.\nBitwise <code>a | b</code>\nBitwise <code>a ^ b</code>.\nBitwise <code>a ^ b</code>.\nBitwise <code>a ^ b</code>.\nBitwise <code>a ^ b</code>.\nBitwise <code>a ^ b</code>.\nBitwise <code>a ^ b</code>.\nBlends the <code>i16</code> lanes according to the immediate mask.\nBlends the <code>i16</code> lanes according to the immediate value.\nBlends the <code>i32</code> lanes in <code>a</code> and <code>b</code> into a single value.\nBlends the <code>i32</code> lanes according to the immediate value.\nBlends the lanes according to the immediate mask.\nBlends the <code>i16</code> lanes according to the immediate mask.\nBlends the <code>f32</code> lanes according to the immediate mask.\nBlends the <code>f64</code> lanes according to the immediate mask.\nBlend the <code>i8</code> lanes according to a runtime varying mask.\nBlend <code>i8</code> lanes according to a runtime varying mask.\nBlend the lanes according to a runtime varying mask.\nBlend the lanes according to a runtime varying mask.\nBlend the lanes according to a runtime varying mask.\nBlend the lanes according to a runtime varying mask.\nShifts all bits in the entire register left by a number of …\nShifts each <code>u128</code> lane left by a number of <strong>bytes</strong>.\nShifts all bits in the entire register right by a number …\nShifts each <code>u128</code> lane right by a number of <strong>bytes</strong>.\nSwap the bytes of the given 32-bit value.\nSwap the bytes of the given 64-bit value.\nBit-preserving cast to <code>m128</code> from <code>m128d</code>\nBit-preserving cast to <code>m128</code> from <code>m128i</code>\nBit-preserving cast to <code>m128</code> from <code>m256</code>.\nBit-preserving cast to <code>m128d</code> from <code>m128</code>\nBit-preserving cast to <code>m128d</code> from <code>m128i</code>\nBit-preserving cast to <code>m128d</code> from <code>m256d</code>.\nBit-preserving cast to <code>m128i</code> from <code>m128</code>\nBit-preserving cast to <code>m128i</code> from <code>m128d</code>\nBit-preserving cast to <code>m128i</code> from <code>m256i</code>.\nBit-preserving cast to <code>m256</code> from <code>m256d</code>.\nBit-preserving cast to <code>m256</code> from <code>m256i</code>.\nBit-preserving cast to <code>m256i</code> from <code>m256</code>.\nBit-preserving cast to <code>m256d</code> from <code>m256i</code>.\nBit-preserving cast to <code>m256i</code> from <code>m256</code>.\nBit-preserving cast to <code>m256i</code> from <code>m256d</code>.\nRound each lane to a whole number, towards positive …\nRound the low lane of <code>b</code> toward positive infinity, other …\nRound each lane to a whole number, towards positive …\nRound the low lane of <code>b</code> toward positive infinity, high …\nRound <code>f32</code> lanes towards positive infinity.\nRound <code>f64</code> lanes towards positive infinity.\nLow lane equality.\nLow lane <code>f64</code> equal to.\nLanewise <code>a == b</code> with lanes as <code>i16</code>.\nCompare <code>i16</code> lanes for equality, mask output.\nLanewise <code>a == b</code> with lanes as <code>i32</code>.\nCompare <code>i32</code> lanes for equality, mask output.\nLanewise <code>a == b</code> with lanes as <code>i64</code>.\nCompare <code>i64</code> lanes for equality, mask output.\nLanewise <code>a == b</code> with lanes as <code>i8</code>.\nCompare <code>i8</code> lanes for equality, mask output.\nLanewise <code>a == b</code>.\nLow lane <code>a == b</code>, other lanes unchanged.\nLanewise <code>a == b</code>, mask output.\nLow lane <code>a == b</code>, other lanes unchanged.\nLow lane greater than or equal to.\nLow lane <code>f64</code> greater than or equal to.\nLanewise <code>a &gt;= b</code>.\nLow lane <code>a &gt;= b</code>, other lanes unchanged.\nLanewise <code>a &gt;= b</code>.\nLow lane <code>a &gt;= b</code>, other lanes unchanged.\nLow lane greater than.\nLow lane <code>f64</code> greater than.\nLanewise <code>a &gt; b</code> with lanes as <code>i16</code>.\nCompare <code>i16</code> lanes for <code>a &gt; b</code>, mask output.\nLanewise <code>a &gt; b</code> with lanes as <code>i32</code>.\nCompare <code>i32</code> lanes for <code>a &gt; b</code>, mask output.\nLanewise <code>a &gt; b</code> with lanes as <code>i64</code>.\nCompare <code>i64</code> lanes for <code>a &gt; b</code>, mask output.\nLanewise <code>a &gt; b</code> with lanes as <code>i8</code>.\nCompare <code>i8</code> lanes for <code>a &gt; b</code>, mask output.\nLanewise <code>a &gt; b</code>.\nLow lane <code>a &gt; b</code>, other lanes unchanged.\nLanewise <code>a &gt; b</code>.\nLow lane <code>a &gt; b</code>, other lanes unchanged.\nLow lane less than or equal to.\nLow lane <code>f64</code> less than or equal to.\nLanewise <code>a &lt;= b</code>.\nLow lane <code>a &lt;= b</code>, other lanes unchanged.\nLanewise <code>a &lt;= b</code>.\nLow lane <code>a &lt;= b</code>, other lanes unchanged.\nLow lane less than.\nLow lane <code>f64</code> less than.\nLanewise <code>a &lt; b</code> with lanes as <code>i16</code>.\nLanewise <code>a &lt; b</code> with lanes as <code>i32</code>.\nLanewise <code>a &lt; b</code> with lanes as <code>i8</code>.\nLanewise <code>a &lt; b</code>.\nLow lane <code>a &lt; b</code>, other lanes unchanged.\nLanewise <code>a &lt; b</code>.\nLow lane <code>a &lt; b</code>, other lane unchanged.\nLow lane not equal to.\nLow lane <code>f64</code> less than.\nLanewise <code>a != b</code>.\nLow lane <code>a != b</code>, other lanes unchanged.\nLanewise <code>a != b</code>.\nLow lane <code>a != b</code>, other lane unchanged.\nLanewise <code>!(a &gt;= b)</code>.\nLow lane <code>!(a &gt;= b)</code>, other lanes unchanged.\nLanewise <code>!(a &gt;= b)</code>.\nLow lane <code>!(a &gt;= b)</code>, other lane unchanged.\nLanewise <code>!(a &gt; b)</code>.\nLow lane <code>!(a &gt; b)</code>, other lanes unchanged.\nLanewise <code>!(a &gt; b)</code>.\nLow lane <code>!(a &gt; b)</code>, other lane unchanged.\nLanewise <code>!(a &lt;= b)</code>.\nLow lane <code>!(a &lt;= b)</code>, other lanes unchanged.\nLanewise <code>!(a &lt;= b)</code>.\nLow lane <code>!(a &lt;= b)</code>, other lane unchanged.\nLanewise <code>!(a &lt; b)</code>.\nLow lane <code>!(a &lt; b)</code>, other lanes unchanged.\nLanewise <code>!(a &lt; b)</code>.\nLow lane <code>!(a &lt; b)</code>, other lane unchanged.\nTurns a comparison operator token to the correct constant …\nCompare <code>f32</code> lanes according to the operation specified, …\nCompare <code>f32</code> lanes according to the operation specified, …\nCompare <code>f64</code> lanes according to the operation specified, …\nCompare <code>f64</code> lanes according to the operation specified, …\nCompare <code>f32</code> lanes according to the operation specified, …\nCompare <code>f64</code> lanes according to the operation specified, …\nLanewise <code>(!a.is_nan()) &amp; (!b.is_nan())</code>.\nLow lane <code>(!a.is_nan()) &amp; (!b.is_nan())</code>, other lanes …\nLanewise <code>(!a.is_nan()) &amp; (!b.is_nan())</code>.\nLow lane <code>(!a.is_nan()) &amp; (!b.is_nan())</code>, other lane …\nLanewise <code>a.is_nan() | b.is_nan()</code>.\nLow lane <code>a.is_nan() | b.is_nan()</code>, other lanes unchanged.\nLanewise <code>a.is_nan() | b.is_nan()</code>.\nLow lane <code>a.is_nan() | b.is_nan()</code>, other lane unchanged.\nCounts <code>$a</code> as the high bytes and <code>$b</code> as the low bytes then …\nWorks like <code>combined_byte_shr_imm_m128i</code>, but twice as wide.\nConvert <code>i32</code> to <code>f32</code> and replace the low lane of the input.\nConvert <code>i32</code> to <code>f64</code> and replace the low lane of the input.\nConvert <code>i64</code> to <code>f32</code> and replace the low lane of the input.\nConvert <code>i64</code> to <code>f64</code> and replace the low lane of the input.\nConverts the lower <code>f32</code> to <code>f64</code> and replace the low lane of …\nConverts the low <code>f64</code> to <code>f32</code> and replaces the low lane of …\nConvert the lowest <code>f32</code> lane to a single <code>f32</code>.\nConvert the lowest <code>f64</code> lane to a single <code>f64</code>.\nConvert the lower two <code>i64</code> lanes to two <code>i32</code> lanes.\nConvert the lower eight <code>i8</code> lanes to eight <code>i16</code> lanes.\nConvert <code>i8</code> values to <code>i16</code> values.\nConvert lower 4 <code>u8</code> values to <code>i16</code> values.\nConvert lower 8 <code>u8</code> values to <code>i16</code> values.\nConvert <code>u8</code> values to <code>i16</code> values.\nConvert the lowest <code>i32</code> lane to a single <code>i32</code>.\nConvert the lower four <code>i16</code> lanes to four <code>i32</code> lanes.\nConvert the lower four <code>i8</code> lanes to four <code>i32</code> lanes.\nRounds the <code>f32</code> lanes to <code>i32</code> lanes.\nRounds the two <code>f64</code> lanes to the low two <code>i32</code> lanes.\nConvert <code>f64</code> lanes to be <code>i32</code> lanes.\nConvert <code>i16</code> values to <code>i32</code> values.\nConvert the lower 8 <code>i8</code> values to <code>i32</code> values.\nConvert <code>f32</code> lanes to be <code>i32</code> lanes.\nConvert <code>u16</code> values to <code>i32</code> values.\nConvert the lower two <code>i32</code> lanes to two <code>i64</code> lanes.\nConvert the lower two <code>i8</code> lanes to two <code>i64</code> lanes.\nConvert <code>i32</code> values to <code>i64</code> values.\nConvert <code>i16</code> values to <code>i64</code> values.\nConvert the lower 4 <code>i8</code> values to <code>i64</code> values.\nConvert <code>u16</code> values to <code>i64</code> values.\nConvert <code>u32</code> values to <code>i64</code> values.\nRounds the four <code>i32</code> lanes to four <code>f32</code> lanes.\nRounds the two <code>f64</code> lanes to the low two <code>f32</code> lanes.\nConvert <code>f64</code> lanes to be <code>f32</code> lanes.\nRounds the lower two <code>i32</code> lanes to two <code>f64</code> lanes.\nRounds the two <code>f64</code> lanes to the low two <code>f32</code> lanes.\nConvert <code>i32</code> lanes to be <code>f32</code> lanes.\nConvert <code>i32</code> lanes to be <code>f64</code> lanes.\nConvert <code>f32</code> lanes to be <code>f64</code> lanes.\nConvert the lower eight <code>u8</code> lanes to eight <code>u16</code> lanes.\nConvert the lower four <code>u16</code> lanes to four <code>u32</code> lanes.\nConvert the lower four <code>u8</code> lanes to four <code>u32</code> lanes.\nConvert the lower two <code>u16</code> lanes to two <code>u64</code> lanes.\nConvert the lower two <code>u32</code> lanes to two <code>u64</code> lanes.\nConvert the lower two <code>u8</code> lanes to two <code>u64</code> lanes.\nConvert <code>f64</code> lanes to <code>i32</code> lanes with truncation.\nConvert <code>f32</code> lanes to <code>i32</code> lanes with truncation.\nCopy the low <code>i64</code> lane to a new register, upper bits 0.\nCopies the <code>a</code> value and replaces the low lane with the low <code>b</code>…\nAccumulates the <code>u16</code> into a running CRC32 value.\nAccumulates the <code>u32</code> into a running CRC32 value.\nAccumulates the <code>u64</code> into a running CRC32 value.\nAccumulates the <code>u8</code> into a running CRC32 value.\nLanewise <code>a / b</code>.\nLow lane <code>a / b</code>, other lanes unchanged.\nLanewise <code>a / b</code>.\nLowest lane <code>a / b</code>, high lane unchanged.\nLanewise <code>a / b</code> with <code>f32</code>.\nLanewise <code>a / b</code> with <code>f64</code>.\nPerforms a dot product of two <code>m128</code> registers.\nPerforms a dot product of two <code>m128d</code> registers.\nThis works like <code>dot_product_m128</code>, but twice as wide.\nDuplicate the odd lanes to the even lanes.\nDuplicate the even-indexed lanes to the odd lanes.\nCopy the low lane of the input to both lanes of the output.\nDuplicate the odd lanes to the even lanes.\nDuplicate the odd-indexed lanes to the even lanes.\nDuplicate the odd-indexed lanes to the even lanes.\nGets the <code>f32</code> lane requested. Returns as an <code>i32</code> bit pattern.\nGets an <code>i16</code> value out of an <code>m128i</code>, returns as <code>i32</code>.\nGets an <code>i16</code> value out of an <code>m256i</code>, returns as <code>i32</code>.\nExtracts an <code>i32</code> lane from <code>m256i</code>\nGets the <code>i32</code> lane requested. Only the lowest 2 bits are …\nExtracts an <code>i64</code> lane from <code>m256i</code>\nGets the <code>i64</code> lane requested. Only the lowest bit is …\nGets the <code>i8</code> lane requested. Only the lowest 4 bits are …\nGets an <code>i8</code> value out of an <code>m256i</code>, returns as <code>i32</code>.\nExtracts an <code>m128</code> from <code>m256</code>\nExtracts an <code>m128d</code> from <code>m256d</code>\nExtracts an <code>m128i</code> from <code>m256i</code>\nGets an <code>m128i</code> value out of an <code>m256i</code>.\nRound each lane to a whole number, towards negative …\nRound the low lane of <code>b</code> toward negative infinity, other …\nRound each lane to a whole number, towards negative …\nRound the low lane of <code>b</code> toward negative infinity, high …\nRound <code>f32</code> lanes towards negative infinity.\nRound <code>f64</code> lanes towards negative infinity.\nDebug formats each float.\nLowerHex formats each float’s bit pattern (via …\nBinary formats each float’s bit pattern (via <code>f32::to_bits</code>…\nDisplay formats each float, and leaves the type name off …\nUpperExp formats each float.\nUpperHex formats each float’s bit pattern (via …\nOctal formats each float’s bit pattern (via <code>f32::to_bits</code>…\nLowerExp formats each float.\nDisplay formats each double, and leaves the type name off …\nDebug formats each double.\nOctal formats each double’s bit pattern (via <code>f64::to_bits</code>…\nLowerHex formats each double’s bit pattern (via …\nBinary formats each double’s bit pattern (via …\nLowerExp formats each double.\nUpperHex formats each double’s bit pattern (via …\nUpperExp formats each double.\nLowerHex formats each <code>i32</code>.\nDisplay formats each <code>i32</code>, and leaves the type name off of …\nUpperExp formats each <code>i32</code>.\nDebug formats each <code>i32</code>.\nUpperHex formats each <code>i32</code>.\nLowerExp formats each <code>i32</code>.\nBinary formats each <code>i32</code>.\nOctal formats each <code>i32</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nTransmutes an array into <code>m512</code>.\nTransmutes an array into <code>m512d</code>.\nTransmutes an array into <code>m512i</code>.\nConverts from the bit patterns of these floats (<code>[u32;16]</code>).\nConverts from the bit patterns of these doubles (<code>[u64;8]</code>).\nConverts from the bit patterns of these doubles (<code>[u64;8]</code>).\nLanewise fused <code>(a * b) + c</code>\nLow lane fused <code>(a * b) + c</code>, other lanes unchanged\nLanewise fused <code>(a * b) + c</code>\nLow lane fused <code>(a * b) + c</code>, other lanes unchanged\nLanewise fused <code>(a * b) + c</code>\nLanewise fused <code>(a * b) + c</code>\nLanewise fused <code>(a * b) addsub c</code> (adds odd lanes and …\nLanewise fused <code>(a * b) addsub c</code> (adds odd lanes and …\nLanewise fused <code>(a * b) addsub c</code> (adds odd lanes and …\nLanewise fused <code>(a * b) addsub c</code> (adds odd lanes and …\nLanewise fused <code>-(a * b) + c</code>\nLow lane <code>-(a * b) + c</code>, other lanes unchanged.\nLanewise fused <code>-(a * b) + c</code>\nLow lane <code>-(a * b) + c</code>, other lanes unchanged.\nLanewise fused <code>-(a * b) + c</code>\nLanewise fused <code>-(a * b) + c</code>\nLanewise fused <code>-(a * b) - c</code>\nLow lane fused <code>-(a * b) - c</code>, other lanes unchanged.\nLanewise fused <code>-(a * b) - c</code>\nLow lane fused <code>-(a * b) - c</code>, other lanes unchanged.\nLanewise fused <code>-(a * b) - c</code>\nLanewise fused <code>-(a * b) - c</code>\nLanewise fused <code>(a * b) - c</code>\nLow lane fused <code>(a * b) - c</code>, other lanes unchanged.\nLanewise fused <code>(a * b) - c</code>\nLow lane fused <code>(a * b) - c</code>, other lanes unchanged.\nLanewise fused <code>(a * b) - c</code>\nLanewise fused <code>(a * b) - c</code>\nLanewise fused <code>(a * b) subadd c</code> (subtracts odd lanes and …\nLanewise fused <code>(a * b) subadd c</code> (subtracts odd lanes and …\nLanewise fused <code>(a * b) subadd c</code> (subtracts odd lanes and …\nLanewise fused <code>(a * b) subadd c</code> (subtracts odd lanes and …\nGets the low lane as an individual <code>f32</code> value.\nGets the lower lane as an <code>f64</code> value.\nConverts the low lane to <code>i32</code> and extracts as an individual …\nConverts the lower lane to an <code>i32</code> value.\nConverts the lower lane to an <code>i32</code> value.\nConverts the low lane to <code>i64</code> and extracts as an individual …\nConverts the lower lane to an <code>i64</code> value.\nConverts the lower lane to an <code>i64</code> value.\nInserts a lane from <code>$b</code> into <code>$a</code>, optionally at a new …\nInserts the low 16 bits of an <code>i32</code> value into an <code>m128i</code>.\nInserts an <code>i16</code> to <code>m256i</code>\nInserts a new value for the <code>i32</code> lane specified.\nInserts an <code>i32</code> to <code>m256i</code>\nInserts a new value for the <code>i64</code> lane specified.\nInserts an <code>i64</code> to <code>m256i</code>\nInserts a new value for the <code>i64</code> lane specified.\nInserts an <code>i8</code> to <code>m256i</code>\nInserts an <code>m128</code> to <code>m256</code>\nInserts an <code>m128d</code> to <code>m256d</code>\nInserts an <code>m128i</code> to an <code>m256i</code> at the high or low position.\nSlowly inserts an <code>m128i</code> to <code>m256i</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCount the leading zeroes in a <code>u32</code>.\nCount the leading zeroes in a <code>u64</code>.\nLoads the <code>f32</code> reference into the low lane of the register.\nLoads the <code>f32</code> reference into all lanes of a register.\nLoad an <code>f32</code> and splat it to all lanes of an <code>m256d</code>\nLoads the reference into the low lane of the register.\nLoads the <code>f64</code> reference into all lanes of a register.\nLoad an <code>f64</code> and splat it to all lanes of an <code>m256d</code>\nLoads the low <code>i64</code> into a register.\nLoads the reference into a register.\nLoad an <code>m128</code> and splat it to the lower and upper half of …\nLoads the reference into a register.\nLoad an <code>m128d</code> and splat it to the lower and upper half of …\nLoads the reference into a register.\nLoad data from memory into a register.\nLoad data from memory into a register.\nLoad data from memory into a register.\nLoads the reference given and zeroes any <code>i32</code> lanes not in …\nLoads the reference given and zeroes any <code>i32</code> lanes not in …\nLoads the reference given and zeroes any <code>i64</code> lanes not in …\nLoads the reference given and zeroes any <code>i64</code> lanes not in …\nLoad data from memory into a register according to a mask.\nLoad data from memory into a register according to a mask.\nLoad data from memory into a register according to a mask.\nLoad data from memory into a register according to a mask.\nLoads the reference into a register, replacing the high …\nLoads the reference into a register, replacing the low …\nLoads the reference into a register with reversed order.\nLoads the reference into a register with reversed order.\nLoad data from memory into a register.\nLoad data from memory into a register.\nLoad data from memory into a register.\nLoads the reference into a register.\nLoads the reference into a register.\nLoads the reference into a register.\nLoad data from memory into a register.\nLoad data from memory into a register.\nLoad data from memory into a register.\nThe data for a 128-bit SSE register of four <code>f32</code> lanes.\nThe data for a 128-bit SSE register of two <code>f64</code> values.\nThe data for a 128-bit SSE register of integer data.\nThe data for a 256-bit AVX register of eight <code>f32</code> lanes.\nThe data for a 256-bit AVX register of four <code>f64</code> values.\nThe data for a 256-bit AVX register of integer data.\nThe data for a 512-bit AVX-512 register of sixteen <code>f32</code> …\nThe data for a 512-bit AVX-512 register of eight <code>f64</code> …\nThe data for a 512-bit AVX-512 register of integer data.\nLanewise <code>max(a, b)</code> with lanes as <code>i16</code>.\nLanewise <code>max(a, b)</code> with lanes as <code>i16</code>.\nLanewise <code>max(a, b)</code> with lanes as <code>i32</code>.\nLanewise <code>max(a, b)</code> with lanes as <code>i32</code>.\nLanewise <code>max(a, b)</code> with lanes as <code>i8</code>.\nLanewise <code>max(a, b)</code> with lanes as <code>i8</code>.\nLanewise <code>max(a, b)</code>.\nLow lane <code>max(a, b)</code>, other lanes unchanged.\nLanewise <code>max(a, b)</code>.\nLow lane <code>max(a, b)</code>, other lanes unchanged.\nLanewise <code>max(a, b)</code>.\nLanewise <code>max(a, b)</code>.\nLanewise <code>max(a, b)</code> with lanes as <code>u16</code>.\nLanewise <code>max(a, b)</code> with lanes as <code>u16</code>.\nLanewise <code>max(a, b)</code> with lanes as <code>u32</code>.\nLanewise <code>max(a, b)</code> with lanes as <code>u32</code>.\nLanewise <code>max(a, b)</code> with lanes as <code>u8</code>.\nLanewise <code>max(a, b)</code> with lanes as <code>u8</code>.\nLanewise <code>min(a, b)</code> with lanes as <code>i16</code>.\nLanewise <code>min(a, b)</code> with lanes as <code>i16</code>.\nLanewise <code>min(a, b)</code> with lanes as <code>i32</code>.\nLanewise <code>min(a, b)</code> with lanes as <code>i32</code>.\nLanewise <code>min(a, b)</code> with lanes as <code>i8</code>.\nLanewise <code>min(a, b)</code> with lanes as <code>i8</code>.\nLanewise <code>min(a, b)</code>.\nLow lane <code>min(a, b)</code>, other lanes unchanged.\nLanewise <code>min(a, b)</code>.\nLow lane <code>min(a, b)</code>, other lanes unchanged.\nLanewise <code>min(a, b)</code>.\nLanewise <code>min(a, b)</code>.\nMin <code>u16</code> value, position, and other lanes zeroed.\nLanewise <code>min(a, b)</code> with lanes as <code>u16</code>.\nLanewise <code>min(a, b)</code> with lanes as <code>u16</code>.\nLanewise <code>min(a, b)</code> with lanes as <code>u32</code>.\nLanewise <code>min(a, b)</code> with lanes as <code>u32</code>.\nLanewise <code>min(a, b)</code> with lanes as <code>u8</code>.\nLanewise <code>min(a, b)</code> with lanes as <code>u8</code>.\nMove the high lanes of <code>b</code> to the low lanes of <code>a</code>, other …\nMove the low lanes of <code>b</code> to the high lanes of <code>a</code>, other …\nMove the low lane of <code>b</code> to <code>a</code>, other lanes unchanged.\nGathers the <code>i8</code> sign bit of each lane.\nCreate an <code>i32</code> mask of each sign bit in the <code>i8</code> lanes.\nGathers the sign bit of each lane.\nGathers the sign bit of each lane.\nCollects the sign bit of each lane into a 4-bit value.\nCollects the sign bit of each lane into a 4-bit value.\nLanewise <code>a * b</code> with 32-bit lanes.\nMultiply two <code>u32</code>, outputting the low bits and storing the …\nMultiply two <code>u64</code>, outputting the low bits and storing the …\nMultiply <code>i16</code> lanes producing <code>i32</code> values, horizontal add …\nMultiply <code>i16</code> lanes producing <code>i32</code> values, horizontal add …\nLanewise <code>a * b</code> with lanes as <code>i16</code>, keep the high bits of …\nMultiply the <code>i16</code> lanes and keep the high half of each …\nLanewise <code>a * b</code> with lanes as <code>i16</code>, keep the low bits of the …\nMultiply the <code>i16</code> lanes and keep the low half of each …\nMultiply <code>i16</code> lanes into <code>i32</code> intermediates, keep the high …\nMultiply <code>i16</code> lanes into <code>i32</code> intermediates, keep the high …\nMultiply the <code>i32</code> lanes and keep the low half of each …\nPerforms a “carryless” multiplication of two <code>i64</code> …\nMultiply the lower <code>i32</code> within each <code>i64</code> lane, <code>i64</code> output.\nLanewise <code>a * b</code>.\nLow lane <code>a * b</code>, other lanes unchanged.\nLanewise <code>a * b</code>.\nLowest lane <code>a * b</code>, high lane unchanged.\nLanewise <code>a * b</code> with <code>f32</code> lanes.\nLanewise <code>a * b</code> with <code>f64</code> lanes.\nLanewise <code>a * b</code> with lanes as <code>u16</code>, keep the high bits of …\nMultiply the <code>u16</code> lanes and keep the high half of each …\nMultiply the lower <code>u32</code> within each <code>u64</code> lane, <code>u64</code> output.\nThis is dumb and weird.\nThis is dumb and weird.\nMultiplies the odd <code>i32</code> lanes and gives the widened (<code>i64</code>) …\nMultiplies the odd <code>u32</code> lanes and gives the widened (<code>u64</code>) …\nComputes eight <code>u16</code> “sum of absolute difference” values …\nComputes eight <code>u16</code> “sum of absolute difference” values …\nAn explanation of the crate’s naming conventions.\nSaturating convert <code>i16</code> to <code>i8</code>, and pack the values.\nSaturating convert <code>i16</code> to <code>i8</code>, and pack the values.\nSaturating convert <code>i16</code> to <code>u8</code>, and pack the values.\nSaturating convert <code>i16</code> to <code>u8</code>, and pack the values.\nSaturating convert <code>i32</code> to <code>i16</code>, and pack the values.\nSaturating convert <code>i32</code> to <code>i16</code>, and pack the values.\nSaturating convert <code>i32</code> to <code>u16</code>, and pack the values.\nSaturating convert <code>i32</code> to <code>u16</code>, and pack the values.\nShuffle 128 bits of floating point data at a time from <code>$a</code> …\nShuffle 128 bits of floating point data at a time from <code>a</code> …\n<em>Slowly</em> swizzle 128 bits of integer data from <code>a</code> and <code>b</code> using …\nShuffle the <code>f32</code> lanes from <code>a</code> using an immediate control …\nShuffle the <code>f64</code> lanes in <code>a</code> using an immediate control …\nShuffle the <code>f32</code> lanes in <code>a</code> using an immediate control …\nShuffle the <code>f64</code> lanes from <code>a</code> together using an immediate …\nCount the number of bits set within an <code>i32</code>\nCount the number of bits set within an <code>i64</code>\nDeposit contiguous low bits from a <code>u32</code> according to a mask.\nDeposit contiguous low bits from a <code>u64</code> according to a mask.\nExtract bits from a <code>u32</code> according to a mask.\nExtract bits from a <code>u64</code> according to a mask.\nFetches the cache line containing <code>addr</code> into all levels of …\nFetches into L2 and higher, anticipating write\nFetch data using the non-temporal access (NTA) hint. It …\nFetches the cache line containing <code>addr</code> into all levels of …\nFetches into L2 and higher.\nFetches into L3 and higher or an implementation-specific …\nTry to obtain a random <code>u16</code> from the hardware RNG.\nTry to obtain a random <code>u32</code> from the hardware RNG.\nTry to obtain a random <code>u64</code> from the hardware RNG.\nTry to obtain a random <code>u16</code> from the hardware RNG.\nTry to obtain a random <code>u32</code> from the hardware RNG.\nTry to obtain a random <code>u64</code> from the hardware RNG.\nReads the CPU’s timestamp counter value.\nReads the CPU’s timestamp counter value and store the …\nLanewise <code>1.0 / a</code> approximation.\nLow lane <code>1.0 / a</code> approximation, other lanes unchanged.\nReciprocal of <code>f32</code> lanes.\nLanewise <code>1.0 / sqrt(a)</code> approximation.\nLow lane <code>1.0 / sqrt(a)</code> approximation, other lanes …\nReciprocal of <code>f32</code> lanes.\nRounds each lane in the style specified.\nRounds <code>$b</code> low as specified, other lanes use <code>$a</code>.\nRounds each lane in the style specified.\nRounds <code>$b</code> low as specified, keeps <code>$a</code> high.\nRounds each lane in the style specified.\nRounds each lane in the style specified.\nTurns a round operator token to the correct constant value.\nSearch for <code>needle</code> in `haystack, with explicit string …\nSearch for <code>needle</code> in `haystack, with explicit string …\nSearch for <code>needle</code> in `haystack, with implicit string …\nSearch for <code>needle</code> in `haystack, with implicit string …\nSets the args into an <code>m128i</code>, first arg is the high lane.\nSet <code>i16</code> args into an <code>m256i</code> lane.\nSets the args into an <code>m128i</code>, first arg is the high lane.\nSet an <code>i32</code> as the low 32-bit lane of an <code>m128i</code>, other lanes …\nSet <code>i32</code> args into an <code>m256i</code> lane.\nSets the args into an <code>m128i</code>, first arg is the high lane.\nSet an <code>i64</code> as the low 64-bit lane of an <code>m128i</code>, other lanes …\nSet <code>i64</code> args into an <code>m256i</code> lane.\nSets the args into an <code>m128i</code>, first arg is the high lane.\nSet <code>i8</code> args into an <code>m256i</code> lane.\nSets the args into an <code>m128</code>, first arg is the high lane.\nSet <code>m128</code> args into an <code>m256</code>.\nSets the args into an <code>m128</code>, first arg is the high lane.\nSets the args into an <code>m128d</code>, first arg is the high lane.\nSet <code>m128d</code> args into an <code>m256d</code>.\nSets the args into the low lane of a <code>m128d</code>.\nSet <code>m128i</code> args into an <code>m256i</code>.\nSet <code>f32</code> args into an <code>m256</code> lane.\nSet <code>f64</code> args into an <code>m256d</code> lane.\nSets the args into an <code>m128i</code>, first arg is the low lane.\nSet <code>i16</code> args into an <code>m256i</code> lane.\nSets the args into an <code>m128i</code>, first arg is the low lane.\nSet <code>i32</code> args into an <code>m256i</code> lane.\nSet <code>i64</code> args into an <code>m256i</code> lane.\nSets the args into an <code>m128i</code>, first arg is the low lane.\nSet <code>i8</code> args into an <code>m256i</code> lane.\nSets the args into an <code>m128</code>, first arg is the low lane.\nSet <code>m128</code> args into an <code>m256</code>.\nSets the args into an <code>m128d</code>, first arg is the low lane.\nSet <code>m128d</code> args into an <code>m256d</code>.\nSet <code>m128i</code> args into an <code>m256i</code>.\nSet <code>f32</code> args into an <code>m256</code> lane.\nSet <code>f64</code> args into an <code>m256d</code> lane.\nSplats the <code>i16</code> to all lanes of the <code>m128i</code>.\nSets the lowest <code>i16</code> lane of an <code>m128i</code> as all lanes of an …\nSplat an <code>i16</code> arg into an <code>m256i</code> lane.\nSplats the <code>i32</code> to all lanes of the <code>m128i</code>.\nSets the lowest <code>i32</code> lane of an <code>m128i</code> as all lanes of an …\nSplat an <code>i32</code> arg into an <code>m256i</code> lane.\nSplats the <code>i64</code> to both lanes of the <code>m128i</code>.\nSets the lowest <code>i64</code> lane of an <code>m128i</code> as all lanes of an …\nSplat an <code>i64</code> arg into an <code>m256i</code> lane.\nSplats the <code>i8</code> to all lanes of the <code>m128i</code>.\nSets the lowest <code>i8</code> lane of an <code>m128i</code> as all lanes of an …\nSplat an <code>i8</code> arg into an <code>m256i</code> lane.\nSplats the value to all lanes.\nSets the lowest lane of an <code>m128</code> as all lanes of an <code>m256</code>.\nSplats the args into both lanes of the <code>m128d</code>.\nSets the lowest lane of an <code>m128d</code> as all lanes of an <code>m256d</code>.\nSplat an <code>f32</code> arg into an <code>m256</code> lane.\nSplat an <code>f64</code> arg into an <code>m256d</code> lane.\nShift all <code>u16</code> lanes to the left by the <code>count</code> in the lower …\nLanewise <code>u16</code> shift left by the lower <code>u64</code> lane of <code>count</code>.\nShift all <code>u32</code> lanes to the left by the <code>count</code> in the lower …\nShift all <code>u32</code> lanes left by the lower <code>u64</code> lane of <code>count</code>.\nShift all <code>u64</code> lanes to the left by the <code>count</code> in the lower …\nShift all <code>u64</code> lanes left by the lower <code>u64</code> lane of <code>count</code>.\nShift <code>u32</code> values to the left by <code>count</code> bits.\nLanewise <code>u32</code> shift left by the matching <code>i32</code> lane in <code>count</code>.\nShift <code>u64</code> values to the left by <code>count</code> bits.\nLanewise <code>u64</code> shift left by the matching <code>u64</code> lane in <code>count</code>.\nShifts all <code>u16</code> lanes left by an immediate.\nShifts all <code>u16</code> lanes left by an immediate.\nShifts all <code>u32</code> lanes left by an immediate.\nShifts all <code>u32</code> lanes left by an immediate.\nShifts both <code>u64</code> lanes left by an immediate.\nShifts all <code>u64</code> lanes left by an immediate.\nShift each <code>i16</code> lane to the right by the <code>count</code> in the lower …\nLanewise <code>i16</code> shift right by the lower <code>i64</code> lane of <code>count</code>.\nShift each <code>i32</code> lane to the right by the <code>count</code> in the lower …\nLanewise <code>i32</code> shift right by the lower <code>i64</code> lane of <code>count</code>.\nShift each <code>u16</code> lane to the right by the <code>count</code> in the lower …\nLanewise <code>u16</code> shift right by the lower <code>u64</code> lane of <code>count</code>.\nShift each <code>u32</code> lane to the right by the <code>count</code> in the lower …\nLanewise <code>u32</code> shift right by the lower <code>u64</code> lane of <code>count</code>.\nShift each <code>u64</code> lane to the right by the <code>count</code> in the lower …\nLanewise <code>u64</code> shift right by the lower <code>u64</code> lane of <code>count</code>.\nShift <code>i32</code> values to the right by <code>count</code> bits.\nLanewise <code>i32</code> shift right by the matching <code>i32</code> lane in <code>count</code>.\nShift <code>u32</code> values to the left by <code>count</code> bits.\nLanewise <code>u32</code> shift right by the matching <code>u32</code> lane in <code>count</code>.\nShift <code>u64</code> values to the left by <code>count</code> bits.\nLanewise <code>u64</code> shift right by the matching <code>i64</code> lane in <code>count</code>.\nShifts all <code>i16</code> lanes right by an immediate.\nShifts all <code>i16</code> lanes left by an immediate.\nShifts all <code>i32</code> lanes right by an immediate.\nShifts all <code>i32</code> lanes left by an immediate.\nShifts all <code>u16</code> lanes right by an immediate.\nShifts all <code>u16</code> lanes right by an immediate.\nShifts all <code>u32</code> lanes right by an immediate.\nShifts all <code>u32</code> lanes right by an immediate.\nShifts both <code>u64</code> lanes right by an immediate.\nShifts all <code>u64</code> lanes right by an immediate.\nShuffle the <code>f32</code> lanes from <code>$a</code> and <code>$b</code> together using an …\nShuffle the <code>f64</code> lanes from <code>$a</code> and <code>$b</code> together using an …\nShuffle 128 bits of integer data from <code>$a</code> and <code>$b</code> using an …\nShuffle the <code>i32</code> lanes in <code>$a</code> using an immediate control …\nShuffle the <code>f64</code> lanes from <code>$a</code> using an immediate control …\nShuffle the high <code>i16</code> lanes in <code>$a</code> using an immediate …\nShuffle the high <code>i16</code> lanes in <code>$a</code> using an immediate …\nShuffle the low <code>i16</code> lanes in <code>$a</code> using an immediate control …\nShuffle the low <code>i16</code> lanes in <code>$a</code> using an immediate control …\nShuffle the <code>i32</code> lanes in <code>a</code> using an immediate control …\nShuffle the <code>f64</code> lanes in <code>$a</code> using an immediate control …\nShuffle <code>f32</code> values in <code>a</code> using <code>i32</code> values in <code>v</code>.\nShuffle <code>f32</code> values in <code>a</code> using <code>i32</code> values in <code>v</code>.\nShuffle <code>f64</code> lanes in <code>a</code> using <strong>bit 1</strong> of the <code>i64</code> lanes in <code>v</code>\nShuffle <code>f64</code> lanes in <code>a</code> using <strong>bit 1</strong> of the <code>i64</code> lanes in <code>v</code>.\nShuffle <code>f32</code> lanes in <code>a</code> using <code>i32</code> values in <code>v</code>.\nShuffle <code>i32</code> lanes in <code>a</code> using <code>i32</code> values in <code>v</code>.\nShuffle <code>i8</code> lanes in <code>a</code> using <code>i8</code> values in <code>v</code>.\nShuffle <code>i8</code> lanes in <code>a</code> using <code>i8</code> values in <code>v</code>.\nShuffle the <code>f32</code> lanes from <code>a</code> and <code>b</code> together using an …\nShuffle the <code>f64</code> lanes from <code>a</code> and <code>b</code> together using an …\nApplies the sign of <code>i16</code> values in <code>b</code> to the values in <code>a</code>.\nLanewise <code>a * signum(b)</code> with lanes as <code>i16</code>\nApplies the sign of <code>i32</code> values in <code>b</code> to the values in <code>a</code>.\nLanewise <code>a * signum(b)</code> with lanes as <code>i32</code>\nApplies the sign of <code>i8</code> values in <code>b</code> to the values in <code>a</code>.\nLanewise <code>a * signum(b)</code> with lanes as <code>i8</code>\nSplat the lowest 16-bit lane across the entire 128 bits.\nSplat the lowest 32-bit lane across the entire 128 bits.\nSplat the lowest 64-bit lane across the entire 128 bits.\nSplat the lowest 8-bit lane across the entire 128 bits.\nSplat the lowest <code>f32</code> across all four lanes.\nSplat the lower <code>f64</code> across both lanes of <code>m128d</code>.\nSplat the 128-bits across 256-bits.\nLanewise <code>sqrt(a)</code>.\nLow lane <code>sqrt(a)</code>, other lanes unchanged.\nLanewise <code>sqrt(a)</code>.\nLow lane <code>sqrt(b)</code>, upper lane is unchanged from <code>a</code>.\nLanewise <code>sqrt</code> on <code>f32</code> lanes.\nLanewise <code>sqrt</code> on <code>f64</code> lanes.\nStores the high lane value to the reference given.\nStores the value to the reference given.\nStores the value to the reference given.\nStores the low lane value to the reference given.\nStores the value to the reference given.\nStores the low lane value to the reference given.\nStores the value to the reference given.\nStore data from a register into memory.\nStore data from a register into memory.\nStore data from a register into memory.\nStores the <code>i32</code> masked lanes given to the reference.\nStores the <code>i32</code> masked lanes given to the reference.\nStores the <code>i32</code> masked lanes given to the reference.\nStores the <code>i32</code> masked lanes given to the reference.\nStore data from a register into memory according to a mask.\nStore data from a register into memory according to a mask.")