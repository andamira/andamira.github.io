searchState.loadedDescShard("devela", 28, "Returns a copy of the third dimension <code>z</code>.\nReturns an exclusive reference to the third dimension <code>z</code>.\nReturns an exclusive reference to the third dimension <code>z</code>.\nReturns an exclusive reference to the third dimension <code>z</code>.\nReturns a shared reference to the third dimension <code>z</code>.\nReturns a shared reference to the third dimension <code>z</code>.\nReturns a shared reference to the third dimension <code>z</code>.\nZero extend an <code>m128</code> to <code>m256</code>\nZero extend an <code>m128d</code> to <code>m256d</code>\nZero extend an <code>m128i</code> to <code>m256i</code>\nReturns the value of type <code>T</code> represented by the all-zero ‚Ä¶\nReturns a new instance contrcuted from zeroes.\nReturns a new instance contrcuted from zeroes.\nCreates a new <code>MaybeUninit&lt;T&gt;</code> in an uninitialized state, ‚Ä¶\nAll lanes zero.\nBoth lanes zero.\nAll lanes zero.\nA zeroed <code>m256</code>\nA zeroed <code>m256d</code>\nA zeroed <code>m256i</code>\nConverts the arguments to iterators and zips them.\n‚ÄòZips up‚Äô two iterators into a single iterator of ‚Ä¶\n‚ÄòZips up‚Äô two iterators into a single iterator of ‚Ä¶\n‚ÄòZips up‚Äô two iterators into a single iterator of ‚Ä¶\n‚ÄòZips up‚Äô two iterators into a single iterator of ‚Ä¶\n‚ÄòZips up‚Äô two iterators into a single iterator of ‚Ä¶\n‚ÄòZips up‚Äô two iterators into a single iterator of ‚Ä¶\n‚ÄòZips up‚Äô two iterators into a single iterator of ‚Ä¶\n‚ÄòZips up‚Äô two iterators into a single iterator of ‚Ä¶\nZips <code>self</code> with another <code>Option</code>.\nCreate an iterator which iterates over both this and the ‚Ä¶\nCreate an iterator which iterates over both this and the ‚Ä¶\nCreate an iterator which iterates over both this and the ‚Ä¶\nCreate an iterator which iterates over both this and the ‚Ä¶\nZips <code>self</code> and another <code>Option</code> with function <code>f</code>.\nReturns the secondary zodiac symbol, associated to the end ‚Ä¶\nReturns the secondary zodiac name, associated to the end ‚Ä¶\nReturns the main zodiac symbol, associated to the start of ‚Ä¶\nReturns the main zodiac name, associated to the start of ‚Ä¶\nThe length of the error in bytes, if known.\nThe index in the given string up to which valid UTF-8 was ‚Ä¶\n<code>core</code> A trait to emulate dynamic typing.\n<code>core</code> Used to do a cheap mutable-to-mutable reference ‚Ä¶\n<code>core</code> Used to do a cheap reference-to-reference conversion.\n<code>core</code> A common trait that allows explicit creation of a ‚Ä¶\n<code>core</code> Derive macro generating an impl of the trait <code>Clone</code>.\nA trait for giving a type a useful default value in ‚Ä¶\nReturns the compile-time ‚Äúdefault value‚Äù for a type.\n<code>core</code> A trait for giving a type a useful default value.\n<code>core</code> Derive macro generating an impl of the trait <code>Default</code>.\nThe type returned in the event of a conversion error.\nThe type returned in the event of a conversion error.\nüåê Extension trait providing convenience methods for <code>T:</code>‚Ä¶\n<code>core</code> Used to do value-to-value conversions while consuming ‚Ä¶\nüö© <code>core</code> The error type for errors that can never happen.\n<code>core</code> A value-to-value conversion that consumes the input ‚Ä¶\nA general-purpose RAII guard that executes a callback on ‚Ä¶\n<code>core</code> Simple and safe type conversions that may fail in a ‚Ä¶\n<code>core</code> An attempted conversion that consumes self, which may ‚Ä¶\n<code>core</code> Represents a globally unique identifier for a type.\n<code>core</code> Returns the name of a type as a string slice.\nUpcasts <code>Box&lt;self&gt;</code> as <code>Box&lt;dyn Any&gt;</code>.\nUpcasts <code>Box&lt;self&gt;</code> as <code>Box&lt;dyn Any&gt;</code>.\nUpcasts <code>Box&lt;self&gt;</code> as <code>Box&lt;dyn Any&gt;</code>.\nUpcasts <code>&amp;mut self</code> as <code>&amp;mut dyn Any</code>.\nUpcasts <code>&amp;mut self</code> as <code>&amp;mut dyn Any</code>.\nUpcasts <code>&amp;mut self</code> as <code>&amp;mut dyn Any</code>.\nUpcasts <code>&amp;self</code> as <code>&amp;dyn Any</code>.\nUpcasts <code>&amp;self</code> as <code>&amp;dyn Any</code>.\nUpcasts <code>&amp;self</code> as <code>&amp;dyn Any</code>.\nConverts this type into a mutable reference of the ‚Ä¶\nConverts this type into a shared reference of the (usually ‚Ä¶\nReturns a duplicate of the value.\nPerforms copy-assignment from <code>source</code>.\nPerforms copy-assignment from <code>source</code>.\nPerforms copy-assignment from <code>source</code>.\nPerforms copy-assignment from <code>source</code>.\nPerforms copy-assignment from <code>source</code>.\nPerforms copy-assignment from <code>source</code>.\nPerforms copy-assignment from <code>source</code>.\nPerforms copy-assignment from <code>source</code>.\nPerforms copy-assignment from <code>source</code>.\nPerforms copy-assignment from <code>source</code>.\nPerforms copy-assignment from <code>source</code>.\nPerforms copy-assignment from <code>source</code>.\nPerforms copy-assignment from <code>source</code>.\nPerforms copy-assignment from <code>source</code>.\nPerforms copy-assignment from <code>source</code>.\nPerforms copy-assignment from <code>source</code>.\nPerforms copy-assignment from <code>source</code>.\nPerforms copy-assignment from <code>source</code>.\nPerforms copy-assignment from <code>source</code>.\nPerforms copy-assignment from <code>source</code>.\nPerforms copy-assignment from <code>source</code>.\nReturns the ‚Äúdefault value‚Äù for a type.\nDismisses the callback for a boolean state guard.\nForwards to the method defined on the type <code>Any</code>.\nReturns some mutable reference to the inner value if it is ‚Ä¶\nForwards to the method defined on the type <code>dyn Any</code>.\nReturns some exclusive reference to the inner value if it ‚Ä¶\nReturns some exclusive reference to the inner value if it ‚Ä¶\nReturns some exclusive reference to the inner value if it ‚Ä¶\nReturns a mutable reference to the inner value as type ‚Ä¶\nForwards to the method defined on the type <code>dyn Any</code>.\nForwards to the method defined on the type <code>Any</code>.\nForwards to the method defined on the type <code>Any</code>.\nReturns some reference to the inner value if it is of type ‚Ä¶\nForwards to the method defined on the type <code>dyn Any</code>.\nReturns some shared reference to the inner value if it is ‚Ä¶\nReturns some shared reference to the inner value if it is ‚Ä¶\nReturns some shared reference to the inner value if it is ‚Ä¶\nForwards to the method defined on the type <code>dyn Any</code>.\nForwards to the method defined on the type <code>Any</code>.\nReturns a reference to the inner value as type <code>dyn T</code>.\nOn drop, invokes the callback with the guarded value and a ‚Ä¶\nErrors, backtraces, structured handling.\nConverts to this type from the input type.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\n‚àÖ <code>core</code> The identity function. Just returns back its ‚Ä¶\nConverts this type into the (usually inferred) input type.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIntrospection.\nForwards to the method defined on the type <code>Any</code>.\nReturns <code>true</code> if the inner type is the same as <code>T</code>.\nForwards to the method defined on the type <code>dyn Any</code>.\nMarker types, traits and macros.\nConstructs a scope guard with a boolean state (defaulting ‚Ä¶\nReturns the <code>TypeId</code> of the generic type parameter.\nOverloadable operators.\nPanic hooks, unwinding, abort strategies.\nStructured resolution and parameterized outcome-based ‚Ä¶\nUpdates the current state.\nPerforms the conversion.\nPerforms the conversion.\nReturns a deterministic hash of the <code>TypeId</code> of <code>Self</code>.\nReturns a deterministic hash of the <code>TypeId</code> of <code>Self</code>.\nReturns a deterministic hash of the <code>TypeId</code> of <code>Self</code>.\nReturns a deterministic hash of the <code>TypeId</code> of <code>Self</code> using a ‚Ä¶\nReturns a deterministic hash of the <code>TypeId</code> of <code>Self</code> using a ‚Ä¶\nReturns a deterministic hash of the <code>TypeId</code> of <code>Self</code> using a ‚Ä¶\nGets the <code>TypeId</code> of <code>self</code>.\nReturns the <code>TypeId</code> of <code>Self</code>.\nReturns the <code>TypeId</code> of <code>Self</code>.\nReturns the <code>TypeId</code> of <code>Self</code>.\nReturns <code>true</code> if <code>Self</code> is of type <code>T</code>.\nReturns <code>true</code> if <code>Self</code> is of type <code>T</code>.\nReturns <code>true</code> if <code>Self</code> is of type <code>T</code>.\nReturns the type name of <code>self</code>.\nReturns the type name of <code>self</code>.\nReturns the type name of <code>self</code>.\nReturns the <code>TypeId</code> of <code>self</code>.\nReturns the <code>TypeId</code> of <code>self</code>.\nReturns the <code>TypeId</code> of <code>self</code>.\nUtility macros and hint functions.\nCreates a scope guard with a custom state.\nA socket address could not be bound because the address is ‚Ä¶\nA nonexistent interface was requested or the requested ‚Ä¶\nüö©+ The root error type, aggregating all module-specific ‚Ä¶\nüö©+ The kind of root error type, aggregating all ‚Ä¶\n‚öñÔ∏è The root result type, aggregating all ‚Ä¶\nAn entity already exists, often a file.\nProgram argument list too long.\n<code>std</code> A captured OS thread stack backtrace.\n<code>std</code> The current status of a backtrace.\nThe operation failed because a pipe was closed.\nA backtrace has been captured and the <code>Backtrace</code> should ‚Ä¶\nThe connection was aborted (terminated) by the remote ‚Ä¶\nThe connection was refused by the remote server.\nThe connection was reset by the remote server.\nCross-device or cross-filesystem (hard) link or rename.\nA data-related error.\nA data-related error.\nüö©+ A data-related composite error.\nüö©+ An error composite of <code>NotEnoughElements</code> + ‚Ä¶\nüö© The value has surpassed the bounds of the ‚Ä¶\nThe value has surpassed the bounds of the representable ‚Ä¶\nThe value has surpassed the bounds of the representable ‚Ä¶\nThe value has surpassed the bounds of the representable ‚Ä¶\n‚öñÔ∏è A data-related result.\nDeadlock (avoided).\nA non-empty directory was specified where an empty ‚Ä¶\nCapturing a backtrace has been disabled through either the ‚Ä¶\nüö© The requested element has not been found.\nThe requested element has not been found.\nThe requested element has not been found.\nThere are not enough elements for the operation.\nContains the error value\nContains the error value\nContains the error value\nContains the error value\nContains the error value\nContains the error value\nContains the error value\n<code>core</code> A trait representing the basic expectations for error ‚Ä¶\nExecutable file is busy.\nExtension trait providing additional methods for <code>T:</code><code>Error</code>.\nüö© A failed conversion between two error types.\nFile larger than allowed or supported.\nLoop in the filesystem or IO subsystem; often, too many ‚Ä¶\nA <code>core::fmt::Error</code>.\nThe remote host is not reachable.\nüö©+ An image-related error.\n‚öñÔ∏è An image-related result.\nThe operation was partially successful and needs to be ‚Ä¶\nThe given bounds are not compatible.\nüö© The given index is out of bounds.\nThe given index is out of bounds.\nThe given index is out of bounds.\nThis operation was interrupted.\nAn invalid value was received for the given type or ‚Ä¶\nüö© The given axis has an invalid length.\nThe given axis has an invalid length.\nAn invalid given character was found.\nData not valid for the operation were encountered.\nA filename was invalid.\nInvalid image size, with an optional width and height.\nA parameter was incorrect.\nInvalid magic number\nInvalid pixel value.\nInvalid Utf-8 found while interpreting a byte sequence.\nAn I/O-related error.\nAn I/O error.\nüö©+ <code>?std</code> Error type for [<code>IoRead</code>], [<code>IoWrite</code>], [<code>IoSeek</code>] ‚Ä¶\nAn <code>I/O</code> error.\nüö©+ <code>?std</code> A list specifying general categories of I/O ‚Ä¶\n‚öñÔ∏è <code>?std</code> A specialized <code>Result</code> type for I/O operations.\nThe filesystem object is, unexpectedly, a directory.\nüö© The key already exists.\nThe key already exists.\nRepresents the specific kind of error, if applicable.\nüö©+ An error composite of <code>DataOverflow</code> + <code>IndexOutOfBounds</code>‚Ä¶\nüö© The given capacity did not match the required ‚Ä¶\nThe given capacity did not match the required constraints.\nThe given capacity did not match the required constraints.\nThe given capacity did not match the required constraints.\nüö© The dimensions given did not match the elements ‚Ä¶\nThe dimensions given did not match the elements provided.\nüö© The given indices does not match the expected order.\nThe given indices does not match the expected order.\nThe given indices does not match the expected order.\nThe provided values are not compatible in size.\nThe system‚Äôs networking is down.\nThe network containing the remote host is not reachable.\nAn inverse doesn‚Äôt exist.\nüö© The node is empty.\nThe node is empty.\nüö© The link is not set.\nThe link is not set.\nüö© The link is not unique.\nThe link is not unique.\nA non-negative value is required.\nA non-zero value is required.\nA filesystem object is, unexpectedly, not a directory.\nüö©+ An error composite of <code>NotImplemented</code> + <code>NotSupported</code>.\nThe network operation failed because it was not connected ‚Ä¶\nüö© There are not enough elements for the operation.\nThere are not enough elements for the operation.\nüö© There is not enough free space for the operation.\nThere is not enough free space for the operation.\nThere is not enough free space for the operation.\nAn entity was not found, often a file.\nüö© The requested functionality is not implemented.\nThe requested numerical functionality is not implemented.\nThe requested functionality is not implemented.\nThe requested functionality is not implemented.\nSeek on unseekable file.\nüö© The requested functionality is not supported by this ‚Ä¶\nThe requested numerical functionality is not supported.\nThe requested functionality is not supported by this type.\nThe requested functionality is not supported by this type.\nA numeric-related error.\nA numeric-related error.\nùüô üö©+ A numeric-related error.\nùüô ‚öñÔ∏è A numeric-related result.\nContains the success value\nContains the success value\nContains the success value\nContains the success value\nContains the success value\nContains the success value\nContains the success value\nOther static error.\nOther static error.\nA custom error that does not fall under any other I/O ‚Ä¶\nAn operation could not be completed, because it failed to ‚Ä¶\nAn arithmetic overflow error, with an optional associated ‚Ä¶\nüö©+ An error composite of <code>NotEnoughSpace</code> + <code>PartiallyAdded</code>‚Ä¶\nüö© The operation could only add a subset of the elements.\nThe operation could only add a subset of the elements.\nThe operation could only add a subset of the elements.\nThe operation lacked the necessary privileges to complete.\nA positive value is required.\nFilesystem quota or some other kind of quota was exceeded.\nThe filesystem or storage medium is read-only, but a write ‚Ä¶\nResource is busy.\nThere is not enough free space for the operation.\nStale network file handle.\nThe underlying storage (typically, a filesystem) is full.\nReturned from the <code>duration_since</code> and <code>elapsed</code> methods on ‚Ä¶\nüïò üö© Returned from the <code>duration_since</code> and <code>elapsed</code> ‚Ä¶\nA text-related error.\nA text-related error.\nüö©+ A text-related composite error.\n‚öñÔ∏è A text-related result.\nA time-related error.\nA time error.\nüö©+ üïò A time-related composite error.\nüïò ‚öñÔ∏è A time-related result.\nThe I/O operation‚Äôs timeout expired, causing it to be ‚Ä¶\nüö© The operation has exceeded the allowed execution time.\nToo many (hard) links to the same filesystem object.\nAn error returned when an operation could not be completed ‚Ä¶\nUnspecified error.\nCapturing a backtrace is not supported, likely because it‚Ä¶\nThis operation is unsupported on this platform.\nThe operation needs to block to complete, but the blocking ‚Ä¶\nAn error returned when an operation could not be completed ‚Ä¶\n<code>core</code> Causes compilation to fail with the given error ‚Ä¶\nChecks if two errors are equivalent based on their kind or ‚Ä¶\nReturns the kind of the error, if applicable.\n<em>const</em> version of <code>From&lt;ElementNotFound&gt; for TextError</code>.\n<em>const</em> version of <code>From&lt;InvalidChar&gt; for TextError</code>.\n<em>const</em> version of <code>From&lt;InvalidUtf8&gt; for TextError</code>.\n<em>const</em> version of <code>From&lt;MismatchedCapacity&gt; for TextError</code>.\nProvides type-based access to context intended for error ‚Ä¶\nProvides type-based access to context intended for error ‚Ä¶\nProvides type-based access to context intended for error ‚Ä¶\nProvides type-based access to context intended for error ‚Ä¶\nProvides type-based access to context intended for error ‚Ä¶\nReturns the lower-level source of this error, if any.\nReturns the lower-level source of this error, if any.\nReturns the lower-level source of this error, if any.\nReturns the lower-level source of this error, if any.\nReturns the lower-level source of this error, if any.\nThe length of the error in bytes, if known.\nThe index in the given string up to which valid UTF-8 was ‚Ä¶\nIntrospection core trait\nA type representing the kind of <code>Self</code>.\nReturns the kind/type of the implementing value.\n<code>core</code> Types whose values can be duplicated simply by ‚Ä¶\n<code>core</code> Derive macro generating an impl of the trait <code>Copy</code>.\n<code>core</code> Zero-sized type used to mark things that ‚Äúact like‚Ä¶\n<code>core</code> A marker type which does not implement <code>Unpin</code>.\n<code>core</code> Types that can be transferred across thread ‚Ä¶\n<code>core</code> Types with a constant size known at compile time.\n<code>core</code> Types for which it is safe to share references ‚Ä¶\nThe inner type that serves as the unique identifier for ‚Ä¶\nA newtype-based ID that associates a resource with its ‚Ä¶\nRepresents an association between a resource and its inner ‚Ä¶\n<code>core</code> Types that do not require any pinning guarantees.\nDefines zero-cost, zero-sized, generic <em>marker</em> IDs.\nDefines zero-cost, zero-sized, type-safe <em>resource</em> IDs.\n<code>core</code> The addition operator <code>+</code>.\n<code>core</code> The addition assignment operator <code>+=</code>.\n<code>core</code> The bitwise AND operator <code>&amp;</code>.\n<code>core</code> The bitwise AND assignment operator <code>&amp;=</code>.\n<code>core</code> The bitwise OR operator <code>|</code>.\n<code>core</code> The bitwise OR assignment operator <code>|=</code>.\n<code>core</code> The bitwise XOR operator <code>^</code>.\n<code>core</code> The bitwise XOR assignment operator <code>^=</code>.\nüìè <code>core</code> An endpoint of a range of keys.\nExit the operation without running subsequent phases.\nMove on to the next phase of the operation as normal.\n<code>core</code> Used to tell an operation whether it should exit ‚Ä¶\n<code>core</code> Used for immutable dereferencing operations, like <code>*v</code>.\n<code>core</code> Used for mutable dereferencing operations, like in ‚Ä¶\n<code>core</code> The division operator <code>/</code>.\n<code>core</code> The division assignment operator <code>/=</code>.\n<code>core</code> Custom code within the destructor.\nAn exclusive bound.\n<code>core</code> The version of the call operator that takes an ‚Ä¶\n<code>core</code> The version of the call operator that takes a mutable ‚Ä¶\n<code>core</code> The version of the call operator that takes a ‚Ä¶\nAn inclusive bound.\n<code>core</code> Used for indexing operations (<code>container[index]</code>) in ‚Ä¶\n<code>core</code> Used for indexing operations (<code>container[index]</code>) in ‚Ä¶\n<code>core</code> The multiplication operator <code>*</code>.\n<code>core</code> The multiplication assignment operator <code>*=</code>.\n<code>core</code> The unary negation operator <code>-</code>.\n<code>core</code> The unary logical negation operator <code>!</code>.\nThe resulting type after applying the <code>+</code> operator.\nThe resulting type after applying the <code>-</code> operator.\nThe resulting type after applying the <code>-</code> operator.\nThe resulting type after applying the <code>!</code> operator.\nThe returned type after the call operator is used.\nThe resulting type after applying the <code>*</code> operator.\nThe resulting type after applying the <code>/</code> operator.\nThe resulting type after applying the <code>%</code> operator.\nThe resulting type after applying the <code>&amp;</code> operator.\nThe resulting type after applying the <code>|</code> operator.\nThe resulting type after applying the <code>^</code> operator.\nThe returned type after indexing.\nüìè <code>core</code> A range bounded inclusively below and ‚Ä¶\n<code>core</code> Implemented by Rust‚Äôs built-in range types\nüìè <code>core</code> A range only bounded inclusively below (<code>start..</code>).\nüìè <code>core</code> An unbounded range (<code>..</code>).\nüìè <code>core</code> A range bounded inclusively below and above (‚Ä¶\nüìè <code>core</code> A range only bounded exclusively above (<code>..end</code>).\nüìè <code>core</code> A range only bounded inclusively above (<code>..=end</code>).\n<code>core</code> The remainder operator <code>%</code>.\n<code>core</code> The remainder assignment operator <code>%=</code>.\n<code>core</code> The subtraction operator <code>-</code>.\n<code>core</code> The subtraction assignment operator <code>-=</code>.\nThe resulting type after dereferencing.\nAn infinite endpoint. Indicates that there is no bound in ‚Ä¶\nPerforms the <code>+</code> operation.\nPerforms the <code>+=</code> operation.\nPerforms the <code>&amp;</code> operation.\nPerforms the <code>&amp;=</code> operation.\nPerforms the <code>|</code> operation.\nPerforms the <code>|=</code> operation.\nPerforms the <code>^</code> operation.\nPerforms the <code>^=</code> operation.\nPerforms the call operation.\nPerforms the call operation.\nPerforms the call operation.\nReturns <code>true</code> if <code>item</code> is contained in the range.\nReturns <code>true</code> if <code>item</code> is contained in the range.\nReturns <code>true</code> if <code>item</code> is contained in the range.\nReturns <code>true</code> if <code>item</code> is contained in the range.\nReturns <code>true</code> if <code>item</code> is contained in the range.\nDereferences the value.\nMutably dereferences the value.\nPerforms the <code>/</code> operation.\nPerforms the <code>/=</code> operation.\nExecutes the destructor for this type.\nThe upper bound of the range (exclusive).\nThe upper bound of the range (exclusive).\nThe upper bound of the range (inclusive)\nEnd index bound.\nPerforms the indexing (<code>container[index]</code>) operation.\nPerforms the mutable indexing (<code>container[index]</code>) operation.\nReturns <code>true</code> if the range contains no items. One-sided ‚Ä¶\nReturns <code>true</code> if the range contains no items. One-sided ‚Ä¶\nReturns <code>true</code> if the range contains no items. One-sided ‚Ä¶\nReturns <code>true</code> if the range contains no items. One-sided ‚Ä¶\nReturns <code>true</code> if the range contains no items. One-sided ‚Ä¶\nPerforms the <code>*</code> operation.\nPerforms the <code>*=</code> operation.\nPerforms the unary <code>-</code> operation.\nPerforms the unary <code>!</code> operation.\nPerforms the <code>%</code> operation.\nPerforms the <code>%=</code> operation.\nThe lower bound of the range (inclusive).\nThe lower bound of the range (inclusive).\nStart index bound.\nPerforms the <code>-</code> operation.\nPerforms the <code>-=</code> operation.\nüåê Panic-related operations.\n<code>core</code> A simple wrapper around a type to assert that it is ‚Ä¶\n<code>std</code> Passed to <code>std::panic::set_hook</code> in <code>std</code>, where panics ‚Ä¶\n<code>core</code> Passed to <code>#[panic_handler]</code> in <code>no_std</code>, always carrying ‚Ä¶\n<code>core</code> A struct containing information about the location of ‚Ä¶\n<code>core</code> A marker trait which represents a shared reference ‚Ä¶\n<code>core</code> A marker trait which represents ‚Äúpanic safe‚Äù ‚Ä¶\n<code>core</code> Panics the current thread.\nSets a panic handler based on the chosen strategy.\n<code>core</code> Indicates unfinished code.\n<code>core</code> Indicates unimplemented code.\n<code>core</code> Indicates unreachable code.\nAllows chaining transformations by passing values through ‚Ä¶\nContains the error value\n‚öñÔ∏è Extension trait providing additional methods for ‚Ä¶\n‚öñÔ∏è Extension trait providing additional methods for ‚Ä¶\n‚öñÔ∏è Extension trait providing additional methods for ‚Ä¶\nAllows attaching operations or side effects to a value ‚Ä¶\n‚öñÔ∏è Represents a mismatch between an expected <code>need</code> and ‚Ä¶\nNo value.\nNo value.\nContains the success value\n‚öñÔ∏è An optional result type that combines success, ‚Ä¶\n‚öóÔ∏è <code>core</code> A type that represents an optional value.\nüñπ The type returned from <code>ExtOption::fmt_or_empty</code>.\nüñπ The type returned from <code>ExtOption::fmt_or</code>.\nüñπ The type returned from <code>ExtOption::fmt_or_else</code>.\nüîÑ <code>core</code> An iterator over the value in <code>Some</code> variant of an ‚Ä¶\nüîÑ <code>core</code> An iterator over a reference to the <code>Some</code> variant ‚Ä¶\nüîÑ <code>core</code> An iterator over a mutable reference to the <code>Some</code> ‚Ä¶\n‚öñÔ∏è A return type encapsulating an owned <strong>state</strong> <code>S</code> and a ‚Ä¶\n‚öñÔ∏è <code>core</code> A type that represents either success (<code>Ok</code>) or ‚Ä¶\nüîÑ <code>core</code> An iterator over the value in <code>Ok</code> variant of a ‚Ä¶\nüîÑ <code>core</code> An iterator over a reference to the <code>Ok</code> variant ‚Ä¶\nüîÑ <code>core</code> An iterator over a mutable reference to the <code>Ok</code> ‚Ä¶\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\n‚öñÔ∏è A value with associated quantification.\nChain a function which takes the parameter by value.\nChain a function which takes the parameter by exclusive ‚Ä¶\nChain a function which takes the parameter by shared ‚Ä¶\nReturns <code>true</code> if the option is a <code>Some</code> value containing the ‚Ä¶\nReturns <code>true</code> if the result is an <code>Ok</code> value containing the ‚Ä¶\nReturns <code>true</code> if the result is an <code>Err</code> value containing the ‚Ä¶\nFormat some value, or an alternative if it‚Äôs <code>None</code>.\nFormat some value, or run an alternative closure if it‚Äôs ‚Ä¶\nFormat some value, or display an empty string if it‚Äôs ‚Ä¶\nInformation about something that was obtained, observed, ‚Ä¶\nApplies a function which takes the parameter by exclusive ‚Ä¶\nApplies a function which takes the parameter by shared ‚Ä¶\nContextual static information about the mismatch.\nApplies a function to the <code>Err</code> value inside ‚Ä¶\nApplies a function to the <code>Ok</code> value inside ‚Ä¶\nInformation about something that was needed, expected or ‚Ä¶\nProvides a default error if the <code>Option</code> is <code>None</code>.\nThe quantification of the value.\nMerges <code>self</code> with another <code>Option</code>.\nThe <code>state</code> after the operation.\n‚öñÔ∏è Wraps the given <code>OptRes</code> <code>value</code> in a <code>Some</code><code>(</code><code>Err</code><code>(error))</code>.\n‚öñÔ∏è Wraps the given <code>OptRes</code> <code>value</code> in a <code>Some</code><code>(</code><code>Ok</code><code>(value))</code>.\nTransposes <code>Option&lt;Result&lt;T, E&gt;&gt;</code> into <code>Result&lt;Option&lt;T&gt;, E&gt;</code>.\n‚öñÔ∏è An unwrapper macro that works in compile-time.\nUnwraps the result if the <code>Option</code> is <code>Some</code>, otherwise calls ‚Ä¶\nThe <code>value</code> resulting from the operation.\nThe main value.\nA helper for constructing macro constants.\n<code>core</code> Asserts that a boolean expression is true at runtime.\nAsserts the approximate equality of a series of ‚Ä¶\n<code>core</code> Asserts that two expressions are equal to each other.\nAsserts the equality of a series of expressions.\n<code>core</code> Asserts that two expressions are not equal to each ‚Ä¶\n<code>core</code> Makes a <em>soundness</em> promise to the compiler that the ‚Ä¶\n<code>core</code> Hints the compiler to be maximally pessimistic about ‚Ä¶\nCaptures the first token from a list of inputs.\nCaptures the last token from a list of inputs.\nCaptures all the tokens except the first one, as a tuple.\n<em><code>c</code>ustomizable <code>dbg!</code></em> macro.\n<code>core</code> Evaluates boolean combinations of configuration flags ‚Ä¶\nA macro for defining <code>#[cfg]</code> if-else statements.\nA for loop that is usable in <em>compile-time</em> contexts.\n<code>devela_macros</code> Evaluates to either a <code>true</code> of <code>false</code> literal ‚Ä¶\n<code>devela_macros</code> Returns the first non-empty argument.\n<code>core</code> Expands to the column number at which it was invoked.\n<code>core</code> Expands to the file name at which it was invoked.\n<code>core</code> Expands to the line number at which it was invoked.\n<code>core</code> Expands to a string representing the current module ‚Ä¶\n<code>devela_macros</code> Conditionally compiles the thing it is ‚Ä¶\n<code>devela_macros</code> Conditionally compiles the given attributes ‚Ä¶\n<code>core</code> Concatenates literals into a static string slice.\nAsserts various comparisons on constants.\n<code>core</code> Asserts that a boolean expression is true at runtime.\n<code>core</code> Asserts that two expressions are equal to each other.\n<code>core</code> Asserts that two expressions are not equal to each ‚Ä¶\nConfigures a feature as deprecated, warning if it is ‚Ä¶\n<code>devela_macros</code> Generates a unit-only enum with variants ‚Ä¶\nDefines an enum and an associated type set of its variants.\n<code>devela_macros</code> Generates an expression for accessing a ‚Ä¶\nDefines a constant for every given identifier with a value ‚Ä¶\n<code>devela_macros</code> Returns the total number of identifiers in ‚Ä¶\n<code>devela_macros</code> Returns the numbers of both <em>total</em> and <em>unique</em> ‚Ä¶\n<code>devela_macros</code> Returns the number of <em>unique</em> identifiers in ‚Ä¶\nRenamed to <code>is</code>.\nA helper macro to concisely implement a few common utility ‚Ä¶\n<code>core</code> Parses a file as an expression or an item according ‚Ä¶\n<code>core</code> Includes a file as a reference to a byte array.\nIncludes a Rust source file relative to the project‚Äôs ‚Ä¶\nùêì <code>core</code> Includes a UTF-8 encoded file as a string.\nConditional evaluation.\nGroups <em><code>items</code></em> together and expands them as if they were ‚Ä¶\nHelper for using optionally implemented traits, like ‚Ä¶\nDeclares a module by including a Rust source file relative ‚Ä¶\n<code>paste</code> Allows to paste identifiers together.\n<em><code>s</code>kip <code>f</code>ormatting</em> macro.\n<code>core</code> Signals the processor that it is running in a ‚Ä¶\n<code>core</code> Stringifies its arguments.\n<code>core</code> Informs the compiler that the current calling site is ‚Ä¶\nUnrolls the given for loop.\nüì¶ An abstract <em>collection</em> data type.\nThe element type of the collection.\n‚àÖ Represents the absence of some data.\nüåê Provides sorting methods for arrays and slices of <code>T</code>, ‚Ä¶\nSorts a slice using bubble sort.\nAbstractions for encoding and decoding data. codec::{hash} \nReturns the reserved capacity for elements in the ‚Ä¶\nReturns the reserved capacity for elements in the ‚Ä¶\nReturns the reserved capacity for elements in the ‚Ä¶\nReturns <code>true</code> if the collection contains the given <code>element</code>.\nReturns <code>true</code> if the collection contains the given <code>element</code>.\nReturns <code>true</code> if the collection contains the given <code>element</code>.\nCounts the number of times a given <code>element</code> appears in the ‚Ä¶\nCounts the number of times a given <code>element</code> appears in the ‚Ä¶\nCounts the number of times a given <code>element</code> appears in the ‚Ä¶\nReturns <code>true</code> if the collection is empty, <code>false</code> if it‚Äôs ‚Ä¶\nReturns <code>true</code> if the collection is empty, <code>false</code> if it‚Äôs ‚Ä¶\nReturns <code>true</code> if the collection is empty, <code>false</code> if it‚Äôs ‚Ä¶\nReturns <code>true</code> if the collection is full, <code>false</code> if it‚Äôs ‚Ä¶\nReturns <code>true</code> if the collection is full, <code>false</code> if it‚Äôs ‚Ä¶\nReturns <code>true</code> if the collection is full, <code>false</code> if it‚Äôs ‚Ä¶\nReturns the current number of elements in the collection.\nReturns the current number of elements in the collection.\nReturns the current number of elements in the collection.\nSorts a slice using counting sort, and returns the ordered ‚Ä¶\nSorts a slice using counting sort, and writes the ‚Ä¶\n‚ö†Ô∏è Dynamically-sized types stored without need of heap ‚Ä¶\nReturns the argument unchanged.\nSorts a slice using insertion sort.\nCalls <code>U::from(self)</code>.\nComposable external iteration.\nImplementations of key-based storage.\nImplementations of sequential collections. list::{array, ‚Ä¶\nSorts a <code>slice</code> using merge sort.\nSorts a <code>slice</code> using quick sort with the Three way ‚Ä¶\nSorts a <code>slice</code> using quick sort with the Hoare partition ‚Ä¶\nSorts a <code>slice</code> using quick sort with the Lomuto partition ‚Ä¶\nSorts a slice using selection sort.\nSorts a slice using shaker sort.\nTabular and heterogeneous data processing.\nAbstractions for uniquely identifying data.\nA compile-time configurable radix-based encoding scheme.\n<code>Base16</code> standard encoding (hex), with linear search. ‚Ä¶\n<code>Base32</code> standard encoding, using LUT decoding. ‚Ä¶\n<code>Base32</code> <code>Crockford</code> encoding. Case-insensitive, remaps <code>O ‚Üí 0</code>‚Ä¶\n<code>Base32Hex</code> uses RFC 4648 hex-encoding (<code>0-9 A-V</code> instead of ‚Ä¶\n<code>Base32</code> encoding with padding (<code>=</code>) enabled, using LUT ‚Ä¶\n<code>Base64</code> standard encoding, using LUT decoding. ‚Ä¶\n<code>Base64</code> encoding with padding (<code>=</code>) enabled, using LUT ‚Ä¶\nBinary-based, optimized for machine processing.\nProvides bitwise operations on <code>T</code>.\nüåê Provides constant bitwise operations on <code>T</code>.\nEncodes and decodes a number in big-endian order.\nEncodes and decodes a sequence of flags as a single byte.\nEncodes and decodes conditionally.\nEncodes and decodes an iterator as a sequence with an ‚Ä¶\nEncodes and decodes a number in little-endian order.\nA dummy writer that counts bytes instead of actually ‚Ä¶\nEncodes and decodes a length prefixed value (TLV).\nThe type of compression applied to data.\nThe <code>Crockford</code> <code>Base32</code> encoding, case-insensitive, remaps ‚Ä¶\nA type that can be decoded from an I/O reader.\nA type that can be encoded into an I/O writer.\nA type that can compute the size of its encoded form ‚Ä¶\nThe primary mode for data encoding.\nThe inner type for the bit representation.\nCompression that retains all original data.\nCompression that sacrifices some data accuracy for reduced ‚Ä¶\nThe type produced when decoding.\nThe <code>RFC 4648</code> standard encoding, used in <code>Base16</code>, <code>Base32</code>, ‚Ä¶\nThe <code>RFC 4648</code> hexadecimal-variant encoding, used in <code>Base32</code>.\nText-based and intended to be human-readable.\nCounts the number of 1s in <code>bits</code> from the <code>[start..=end]</code> ‚Ä¶\nCounts the number of 1s in <code>bits</code> from the <code>[start..=end]</code> ‚Ä¶\nCounts the number of 0s in <code>bits</code> from the <code>[start..=end]</code> ‚Ä¶\nCounts the number of 0s in <code>bits</code> from the <code>[start..=end]</code> ‚Ä¶\nFinds the index of the first 1 in <code>bits</code> from the ‚Ä¶\nFinds the index of the first 1 in <code>bits</code> from the ‚Ä¶\nFinds the index of the first 0 in <code>bits</code> from the ‚Ä¶\nFinds the index of the first 0 in <code>bits</code> from the ‚Ä¶\nFinds the index of the last 1 in <code>bits</code> from the ‚Ä¶\nFinds the index of the last 1 in <code>bits</code> from the ‚Ä¶\nFinds the index of the last 0 in <code>bits</code> from the ‚Ä¶\nFinds the index of the last 0 in <code>bits</code> from the ‚Ä¶\nFlips the bits in <code>self</code> from the <code>[start..=end]</code> checked ‚Ä¶\nFlips the bits in <code>self</code> from the <code>[start..=end]</code> range.\nGets the bits in <code>self</code> from the <code>[start..=end]</code> checked range.\nGets the bits in <code>self</code> from the <code>[start..=end]</code> range.\nGets the rightwards shifted bits in <code>self</code> from the ‚Ä¶\nGets the rightwards shifted bits in <code>self</code> from the ‚Ä¶\nReturns a bitmask of ones from the <code>[start..=end]</code> checked ‚Ä¶\nReturns a bitmask of ones from the <code>[start..=end]</code> range.\nReverses the order of the bits in <code>self</code> from the ‚Ä¶\nReverses the order of the bits in <code>self</code> from the ‚Ä¶\nSets the bits in <code>self</code> to 1 from the <code>[start..=end]</code> checked ‚Ä¶\nSets the given checked <code>value</code> into the bits from the ‚Ä¶\nSets the bits in <code>self</code> to 1 from the <code>[start..=end]</code> range.\nSets the given <code>value</code> into the bits from the <code>[start..=end]</code> ‚Ä¶\nSets the given <code>value</code> into the bits from the <code>[start..=end]</code> ‚Ä¶\nUnsets the bits in <code>self</code> to 0 from the <code>[start..=end]</code> ‚Ä¶\nUnsets the bits in <code>self</code> to 0 from the <code>[start..=end]</code> range.\nCreates a custom bit field struct.\nCryptographic primitives for encryption, authentication, ‚Ä¶\nDecodes <code>Self</code> from the given <code>reader</code>, returning the decoded ‚Ä¶\nEncodes <code>self</code> into the given <code>writer</code>, returning the bytes ‚Ä¶\nComputes the size of <code>self</code> when encoded.\nGeneric hashing support.\n<code>core</code> A hashable type.\n<code>core</code> Derive macro generating an impl of the trait <code>Hash</code>.\n<code>core</code> A trait for hashing an arbitrary stream of bytes.\nType of the hasher that will be created.\n<code>core</code> A trait for creating instances of <code>Hasher</code>.\n<code>core</code> Create a default [<code>HasherBuild</code>] instance for <code>T:</code><code>Hasher</code><code>+</code>‚Ä¶\nA builder for default Fnv hashers.\nA builder for default Fx hashers.\nA Fowler‚ÄìNoll‚ÄìVo hasher, implemented for u32, u64, u128‚Ä¶\nA hashing algorithm used in the Rustc compiler, ‚Ä¶\nA fast 64-bit non-cryptographic hash algorithm.\n<code>std</code> The default state for [<code>HashMapStd</code>][crate::HashMapStd].\nCreates a new hasher.\nReturns the hash value for the values written so far.\nFeeds this value into the given <code>Hasher</code>.\nCalculates the hash of a single value.\nCalculates the hash of a single value.\nCalculates the hash of a single value.\nFeeds a slice of this type into the given <code>Hasher</code>.\nFeeds a slice of this type into the given <code>Hasher</code>.\nFeeds a slice of this type into the given <code>Hasher</code>.\nWrites some data into this <code>Hasher</code>.\nWrites a single <code>i128</code> into this hasher.\nWrites a single <code>i128</code> into this hasher.\nWrites a single <code>i128</code> into this hasher.\nWrites a single <code>i16</code> into this hasher.\nWrites a single <code>i16</code> into this hasher.\nWrites a single <code>i16</code> into this hasher.\nWrites a single <code>i32</code> into this hasher.\nWrites a single <code>i32</code> into this hasher.\nWrites a single <code>i32</code> into this hasher.\nWrites a single <code>i64</code> into this hasher.\nWrites a single <code>i64</code> into this hasher.\nWrites a single <code>i64</code> into this hasher.\nWrites a single <code>i8</code> into this hasher.\nWrites a single <code>i8</code> into this hasher.\nWrites a single <code>i8</code> into this hasher.\nWrites a single <code>isize</code> into this hasher.\nWrites a single <code>isize</code> into this hasher.\nWrites a single <code>isize</code> into this hasher.\nWrites a length prefix into this hasher, as part of being ‚Ä¶\nWrites a length prefix into this hasher, as part of being ‚Ä¶\nWrites a length prefix into this hasher, as part of being ‚Ä¶\nWrites a single <code>str</code> into this hasher.\nWrites a single <code>str</code> into this hasher.\nWrites a single <code>str</code> into this hasher.\nWrites a single <code>u128</code> into this hasher.\nWrites a single <code>u128</code> into this hasher.\nWrites a single <code>u128</code> into this hasher.\nWrites a single <code>u16</code> into this hasher.\nWrites a single <code>u16</code> into this hasher.\nWrites a single <code>u16</code> into this hasher.\nWrites a single <code>u32</code> into this hasher.\nWrites a single <code>u32</code> into this hasher.\nWrites a single <code>u32</code> into this hasher.\nWrites a single <code>u64</code> into this hasher.\nWrites a single <code>u64</code> into this hasher.\nWrites a single <code>u64</code> into this hasher.\nWrites a single <code>u8</code> into this hasher.\nWrites a single <code>u8</code> into this hasher.\nWrites a single <code>u8</code> into this hasher.\nWrites a single <code>usize</code> into this hasher.\nWrites a single <code>usize</code> into this hasher.\nWrites a single <code>usize</code> into this hasher.\nüì¶ A static array for storing DSTs.\nüì¶ A statically allocated buffer for storing DSTs with ‚Ä¶\nüì¶ Represents the backing buffer for storing dynamically ‚Ä¶\nüì¶ A statically allocated FIFO queue of DSTs.\nüîÑ An iterator over the elements of a <code>DstQueue</code>.\nüîÑ A mutable iterator over the elements of a <code>DstQueue</code>.\nHandle returned by <code>DstQueue::pop</code> (does the actual pop on ‚Ä¶\nüì¶ A statically allocated FIFO queue of DSTs with ‚Ä¶\nüì¶ A statically allocated LIFO stack of DSTs.\nüîÑ An iterator over the elements of a <code>DstStack</code>.\nüîÑ A mutable iterator over the elements of a <code>DstStack</code>.\nüì¶ A statically allocated LIFO stack of DSTs with ‚Ä¶\nüì¶ A statically allocated DST value.\nüì¶ A statically allocated DST value with pointer ‚Ä¶\nüì¶ A dynamically allocated buffer for storing DSTs with ‚Ä¶\nInner type of the buffer\nGet the buffer slice as an exclusive reference.\nGet the buffer slice as shared reference.\nExtend the buffer (fallible).\nConvert a byte count to a word count (rounding up).\nWhich kind of iterator are we turning this into?\nThe type of the elements being iterated over.\nThe type of the elements being iterated over.\nüåê üîÑ Iterator-related namespaced operations.\nüîÑ <code>core</code> An iterator that links two iterators together, ‚Ä¶\nüîÑ <code>core</code> An iterator that clones the elements of an ‚Ä¶\nüîÑ <code>core</code> An iterator that copies the elements of an ‚Ä¶\nüîÑ <code>core</code> An iterator that repeats endlessly.\nüîÑ <code>core</code> An iterator that yields nothing.\nüîÑ <code>core</code> An iterator that yields the current count and ‚Ä¶\nüîÑ <code>core</code> An iterator that filters the elements of <code>iter</code> ‚Ä¶\nüîÑ <code>core</code> An iterator that uses <code>f</code> to both filter and map ‚Ä¶\nüîÑ <code>core</code> An iterator that maps each element to an ‚Ä¶\nüîÑ <code>core</code> An iterator that flattens one level of nesting ‚Ä¶\nüîÑ <code>core</code> Creates an iterator where each iteration calls ‚Ä¶\nüîÑ <code>core</code> An iterator where each iteration calls a closure ‚Ä¶\nüîÑ <code>core</code> An iterator that yields <code>None</code> forever after the ‚Ä¶\nüîÑ <code>core</code> An iterator that calls a fn with a reference to ‚Ä¶\nüîÑ <code>core</code> An iterator that maps the values of iter with <code>f</code>.\nüîÑ <code>core</code> An iterator that only accepts elements while ‚Ä¶\nüîÑ <code>core</code> An iterator that yields an element exactly once.\nüîÑ <code>core</code> An iterator that yields a single element <code>A</code> by ‚Ä¶\nüîÑ <code>core</code> An iterator with a <code>peek()</code> that returns an ‚Ä¶\nüîÑ <code>core</code> An iterator that repeats an element endlessly.\nüîÑ <code>core</code> An iterator that repeats an element an exact ‚Ä¶\nüîÑ <code>core</code> An iterator that endlessly repeats <code>A</code> by calling ‚Ä¶\nüîÑ <code>core</code> A double-ended iterator with the direction ‚Ä¶\nüîÑ <code>core</code> An iterator to maintain state while iterating ‚Ä¶\nüîÑ <code>core</code> An iterator that skips over <code>n</code> elements of <code>iter</code>.\nüîÑ <code>core</code> An iterator that rejects elements while <code>predicate</code>‚Ä¶\nüîÑ <code>core</code> An iterator for stepping iterators by a custom ‚Ä¶\nüîÑ <code>core</code> An iterator where each successive item is ‚Ä¶\nüîÑ <code>core</code> An iterator that only iterates over the first <code>n</code> ‚Ä¶\nüîÑ <code>core</code> An iterator that only accepts elements while ‚Ä¶\nüîÑ <code>core</code> An iterator that iterates two other iterators ‚Ä¶\nüîÑ <code>core</code> A trait for dealing with iterators.\nüîÑ <code>core</code> An iterator able to yield elements from both ‚Ä¶\nüîÑ <code>core</code> An iterator that knows its exact length.\nüîÑ <code>core</code> Extend a collection with the contents of an ‚Ä¶\nüîÑ <code>core</code> Conversion from an <code>Iterator</code>.\nüîÑ <code>core</code> An iterator that always continues to yield <code>None</code> ‚Ä¶\nüîÑ <code>core</code> Conversion into an <code>Iterator</code>.\nüîÑ <code>itertools</code> An iterator that can be unzipped into ‚Ä¶\nüîÑ <code>itertools</code> An iterator that allows peeking at an ‚Ä¶\nüîÑ <code>core</code> Represents types that can be created by ‚Ä¶\nüîÑ <code>core</code> Represents types that can be created by summing ‚Ä¶\nüîÑ <code>itertools</code> An <code>Iterator</code> blanket impl providing extra ‚Ä¶\nAdvances the iterator from the back by <code>n</code> elements.\nAdvances the iterator from the back by <code>n</code> elements.\nAdvances the iterator from the back by <code>n</code> elements.\nAdvances the iterator from the back by <code>n</code> elements.\nAdvances the iterator from the back by <code>n</code> elements.\nAdvances the iterator from the back by <code>n</code> elements.\nAdvances the iterator from the back by <code>n</code> elements.\nAdvances the iterator from the back by <code>n</code> elements.\nAdvances the iterator from the back by <code>n</code> elements.\nAdvances the iterator from the back by <code>n</code> elements.\nAdvances the iterator from the back by <code>n</code> elements.\nAdvances the iterator from the back by <code>n</code> elements.\nAdvances the iterator from the back by <code>n</code> elements.\nAdvances the iterator from the back by <code>n</code> elements.\nAdvances the iterator by <code>n</code> elements.\nAdvances the iterator by <code>n</code> elements.\nAdvances the iterator by <code>n</code> elements.\nAdvances the iterator by <code>n</code> elements.\nAdvances the iterator by <code>n</code> elements.\nAdvances the iterator by <code>n</code> elements.\nAdvances the iterator by <code>n</code> elements.\nAdvances the iterator by <code>n</code> elements.\nAdvances the iterator by <code>n</code> elements.\nAdvances the iterator by <code>n</code> elements.\nAdvances the iterator by <code>n</code> elements.\nAdvances the iterator by <code>n</code> elements.\nAdvances the iterator by <code>n</code> elements.\nAdvances the iterator by <code>n</code> elements.\nTests if every element of the iterator matches a predicate.\nTests if every element of the iterator matches a predicate.\nTests if every element of the iterator matches a predicate.\nTests if every element of the iterator matches a predicate.\nTests if every element of the iterator matches a predicate.\nTests if every element of the iterator matches a predicate.\nTests if every element of the iterator matches a predicate.\nTests if every element of the iterator matches a predicate.\nTests if every element of the iterator matches a predicate.\nTests if every element of the iterator matches a predicate.\nTests if every element of the iterator matches a predicate.\nTests if every element of the iterator matches a predicate.\nTests if every element of the iterator matches a predicate.\nTests if every element of the iterator matches a predicate.\nCheck whether all elements compare equal.\nCheck whether all elements compare equal.\nIf there are elements and they are all equal, return a ‚Ä¶\nIf there are elements and they are all equal, return a ‚Ä¶\nCheck whether all elements are unique (non equal).\nCheck whether all elements are unique (non equal).\nTests if any element of the iterator matches a predicate.\nTests if any element of the iterator matches a predicate.\nTests if any element of the iterator matches a predicate.\nTests if any element of the iterator matches a predicate.\nTests if any element of the iterator matches a predicate.\nTests if any element of the iterator matches a predicate.\nTests if any element of the iterator matches a predicate.\nTests if any element of the iterator matches a predicate.\nTests if any element of the iterator matches a predicate.\nTests if any element of the iterator matches a predicate.\nTests if any element of the iterator matches a predicate.\nTests if any element of the iterator matches a predicate.\nTests if any element of the iterator matches a predicate.\nTests if any element of the iterator matches a predicate.\nReturns an iterator over <code>N</code> elements of the iterator at a ‚Ä¶\nReturns an iterator over <code>N</code> elements of the iterator at a ‚Ä¶\nReturns an iterator over <code>N</code> elements of the iterator at a ‚Ä¶\nReturns an iterator over <code>N</code> elements of the iterator at a ‚Ä¶\nReturns an iterator over <code>N</code> elements of the iterator at a ‚Ä¶\nReturns an iterator over <code>N</code> elements of the iterator at a ‚Ä¶\nReturns an iterator over <code>N</code> elements of the iterator at a ‚Ä¶\nReturns an iterator over <code>N</code> elements of the iterator at a ‚Ä¶\nReturns an iterator over <code>N</code> elements of the iterator at a ‚Ä¶\nReturns an iterator over <code>N</code> elements of the iterator at a ‚Ä¶\nReturns an iterator over <code>N</code> elements of the iterator at a ‚Ä¶\nReturns an iterator over <code>N</code> elements of the iterator at a ‚Ä¶\nReturns an iterator over <code>N</code> elements of the iterator at a ‚Ä¶\nReturns an iterator over <code>N</code> elements of the iterator at a ‚Ä¶\nReturn an iterator adaptor that iterates over the ‚Ä¶\nReturn an iterator adaptor that iterates over the ‚Ä¶\nIf the iterator yields no elements, <code>Ok(None)</code> will be ‚Ä¶\nIf the iterator yields no elements, <code>Ok(None)</code> will be ‚Ä¶\nA ‚Äúmeta iterator adaptor‚Äù. Its closure receives a ‚Ä¶\nA ‚Äúmeta iterator adaptor‚Äù. Its closure receives a ‚Ä¶\nCreates a ‚Äúby reference‚Äù adapter for this instance of ‚Ä¶\nCreates a ‚Äúby reference‚Äù adapter for this instance of ‚Ä¶\nCreates a ‚Äúby reference‚Äù adapter for this instance of ‚Ä¶\nCreates a ‚Äúby reference‚Äù adapter for this instance of ‚Ä¶\nCreates a ‚Äúby reference‚Äù adapter for this instance of ‚Ä¶\nCreates a ‚Äúby reference‚Äù adapter for this instance of ‚Ä¶\nCreates a ‚Äúby reference‚Äù adapter for this instance of ‚Ä¶\nCreates a ‚Äúby reference‚Äù adapter for this instance of ‚Ä¶\nCreates a ‚Äúby reference‚Äù adapter for this instance of ‚Ä¶\nCreates a ‚Äúby reference‚Äù adapter for this instance of ‚Ä¶\nCreates a ‚Äúby reference‚Äù adapter for this instance of ‚Ä¶\nCreates a ‚Äúby reference‚Äù adapter for this instance of ‚Ä¶\nCreates a ‚Äúby reference‚Äù adapter for this instance of ‚Ä¶\nCreates a ‚Äúby reference‚Äù adapter for this instance of ‚Ä¶\nReturn an iterator adaptor that iterates over the ‚Ä¶\nReturn an iterator adaptor that iterates over the ‚Ä¶\nTakes two iterators and creates a new iterator over both ‚Ä¶\nTakes two iterators and creates a new iterator over both ‚Ä¶\nTakes two iterators and creates a new iterator over both ‚Ä¶\nTakes two iterators and creates a new iterator over both ‚Ä¶\nTakes two iterators and creates a new iterator over both ‚Ä¶\nTakes two iterators and creates a new iterator over both ‚Ä¶\nTakes two iterators and creates a new iterator over both ‚Ä¶\nTakes two iterators and creates a new iterator over both ‚Ä¶\nTakes two iterators and creates a new iterator over both ‚Ä¶\nTakes two iterators and creates a new iterator over both ‚Ä¶\nTakes two iterators and creates a new iterator over both ‚Ä¶\nTakes two iterators and creates a new iterator over both ‚Ä¶\nTakes two iterators and creates a new iterator over both ‚Ä¶\nTakes two iterators and creates a new iterator over both ‚Ä¶\nReturn an <em>iterable</em> that can group iterator elements. ‚Ä¶\nReturn an <em>iterable</em> that can group iterator elements. ‚Ä¶\nReturn an <em>iterable</em> that can chunk the iterator.\nReturn an <em>iterable</em> that can chunk the iterator.\nReturn an iterator over all windows, wrapping back to the ‚Ä¶\nReturn an iterator over all windows, wrapping back to the ‚Ä¶\nCreates an iterator which <code>clone</code>s all of its elements.\nCreates an iterator which <code>clone</code>s all of its elements.\nCreates an iterator which <code>clone</code>s all of its elements.\nCreates an iterator which <code>clone</code>s all of its elements.\nCreates an iterator which <code>clone</code>s all of its elements.\nCreates an iterator which <code>clone</code>s all of its elements.\nCreates an iterator which <code>clone</code>s all of its elements.\nCreates an iterator which <code>clone</code>s all of its elements.\nCreates an iterator which <code>clone</code>s all of its elements.\nCreates an iterator which <code>clone</code>s all of its elements.\nCreates an iterator which <code>clone</code>s all of its elements.\nCreates an iterator which <code>clone</code>s all of its elements.\nCreates an iterator which <code>clone</code>s all of its elements.\nCreates an iterator which <code>clone</code>s all of its elements.\nLexicographically compares the elements of this <code>Iterator</code> ‚Ä¶\nLexicographically compares the elements of this <code>Iterator</code> ‚Ä¶\nLexicographically compares the elements of this <code>Iterator</code> ‚Ä¶\nLexicographically compares the elements of this <code>Iterator</code> ‚Ä¶\nLexicographically compares the elements of this <code>Iterator</code> ‚Ä¶\nLexicographically compares the elements of this <code>Iterator</code> ‚Ä¶\nLexicographically compares the elements of this <code>Iterator</code> ‚Ä¶\nLexicographically compares the elements of this <code>Iterator</code> ‚Ä¶\nLexicographically compares the elements of this <code>Iterator</code> ‚Ä¶\nLexicographically compares the elements of this <code>Iterator</code> ‚Ä¶\nLexicographically compares the elements of this <code>Iterator</code> ‚Ä¶\nLexicographically compares the elements of this <code>Iterator</code> ‚Ä¶\nLexicographically compares the elements of this <code>Iterator</code> ‚Ä¶\nLexicographically compares the elements of this <code>Iterator</code> ‚Ä¶\nLexicographically compares the elements of this <code>Iterator</code> ‚Ä¶\nLexicographically compares the elements of this <code>Iterator</code> ‚Ä¶\nLexicographically compares the elements of this <code>Iterator</code> ‚Ä¶\nLexicographically compares the elements of this <code>Iterator</code> ‚Ä¶\nLexicographically compares the elements of this <code>Iterator</code> ‚Ä¶\nLexicographically compares the elements of this <code>Iterator</code> ‚Ä¶\nLexicographically compares the elements of this <code>Iterator</code> ‚Ä¶\nLexicographically compares the elements of this <code>Iterator</code> ‚Ä¶\nLexicographically compares the elements of this <code>Iterator</code> ‚Ä¶\nLexicographically compares the elements of this <code>Iterator</code> ‚Ä¶\nLexicographically compares the elements of this <code>Iterator</code> ‚Ä¶\nLexicographically compares the elements of this <code>Iterator</code> ‚Ä¶\nLexicographically compares the elements of this <code>Iterator</code> ‚Ä¶\nLexicographically compares the elements of this <code>Iterator</code> ‚Ä¶\nReturn an iterator adaptor that uses the passed-in closure ‚Ä¶\nReturn an iterator adaptor that uses the passed-in closure ‚Ä¶\nTransforms an iterator into a collection.\nTransforms an iterator into a collection.\nTransforms an iterator into a collection.\nTransforms an iterator into a collection.\nTransforms an iterator into a collection.\nTransforms an iterator into a collection.\nTransforms an iterator into a collection.\nTransforms an iterator into a collection.\nTransforms an iterator into a collection.\nTransforms an iterator into a collection.\nTransforms an iterator into a collection.\nTransforms an iterator into a collection.\nTransforms an iterator into a collection.\nTransforms an iterator into a collection.\nCollects all items from the iterator into an array of a ‚Ä¶\nCollects all items from the iterator into an array of a ‚Ä¶\nCollects all the items from an iterator into a collection.\nCollects all the items from an iterator into a collection.\nCollects all the items from an iterator into a collection.\nCollects all the items from an iterator into a collection.\nCollects all the items from an iterator into a collection.\nCollects all the items from an iterator into a collection.\nCollects all the items from an iterator into a collection.\nCollects all the items from an iterator into a collection.\nCollects all the items from an iterator into a collection.\nCollects all the items from an iterator into a collection.\nCollects all the items from an iterator into a collection.\nCollects all the items from an iterator into a collection.\nCollects all the items from an iterator into a collection.\nCollects all the items from an iterator into a collection.\nCollects all items from the iterator into a tuple of a ‚Ä¶\nCollects all items from the iterator into a tuple of a ‚Ä¶\n<code>.collect_vec()</code> is simply a type specialization of ‚Ä¶\n<code>.collect_vec()</code> is simply a type specialization of ‚Ä¶\nReturn an iterator adaptor that iterates over the <code>k</code>-length ‚Ä¶\nReturn an iterator adaptor that iterates over the <code>k</code>-length ‚Ä¶\nReturn an iterator that iterates over the <code>k</code>-length ‚Ä¶\nReturn an iterator that iterates over the <code>k</code>-length ‚Ä¶\nCombine all an iterator‚Äôs elements into one element by ‚Ä¶\nCombine all an iterator‚Äôs elements into one element by ‚Ä¶\nReturns <code>true</code> if the given item is present in this iterator.\nReturns <code>true</code> if the given item is present in this iterator.\nCreates an iterator which copies all of its elements.\nCreates an iterator which copies all of its elements.\nCreates an iterator which copies all of its elements.\nCreates an iterator which copies all of its elements.\nCreates an iterator which copies all of its elements.\nCreates an iterator which copies all of its elements.\nCreates an iterator which copies all of its elements.\nCreates an iterator which copies all of its elements.\nCreates an iterator which copies all of its elements.\nCreates an iterator which copies all of its elements.\nCreates an iterator which copies all of its elements.\nCreates an iterator which copies all of its elements.\nCreates an iterator which copies all of its elements.\nCreates an iterator which copies all of its elements.\nConsumes the iterator, counting the number of iterations ‚Ä¶\nConsumes the iterator, counting the number of iterations ‚Ä¶\nConsumes the iterator, counting the number of iterations ‚Ä¶\nConsumes the iterator, counting the number of iterations ‚Ä¶\nConsumes the iterator, counting the number of iterations ‚Ä¶\nConsumes the iterator, counting the number of iterations ‚Ä¶\nConsumes the iterator, counting the number of iterations ‚Ä¶\nConsumes the iterator, counting the number of iterations ‚Ä¶\nConsumes the iterator, counting the number of iterations ‚Ä¶\nConsumes the iterator, counting the number of iterations ‚Ä¶\nConsumes the iterator, counting the number of iterations ‚Ä¶\nConsumes the iterator, counting the number of iterations ‚Ä¶\nConsumes the iterator, counting the number of iterations ‚Ä¶\nConsumes the iterator, counting the number of iterations ‚Ä¶\nCollect the items in this iterator and return a <code>HashMap</code> ‚Ä¶\nCollect the items in this iterator and return a <code>HashMap</code> ‚Ä¶\nCollect the items in this iterator and return a <code>HashMap</code> ‚Ä¶\nCollect the items in this iterator and return a <code>HashMap</code> ‚Ä¶\nRepeats an iterator endlessly.\nRepeats an iterator endlessly.\nRepeats an iterator endlessly.\nRepeats an iterator endlessly.\nRepeats an iterator endlessly.\nRepeats an iterator endlessly.\nRepeats an iterator endlessly.\nRepeats an iterator endlessly.\nRepeats an iterator endlessly.\nRepeats an iterator endlessly.\nRepeats an iterator endlessly.\nRepeats an iterator endlessly.\nRepeats an iterator endlessly.\nRepeats an iterator endlessly.\nRemove duplicates from sections of consecutive identical ‚Ä¶\nRemove duplicates from sections of consecutive identical ‚Ä¶\nRemove duplicates from sections of consecutive identical ‚Ä¶\nRemove duplicates from sections of consecutive identical ‚Ä¶\nRemove duplicates from sections of consecutive identical ‚Ä¶\nRemove duplicates from sections of consecutive identical ‚Ä¶\nRemove duplicates from sections of consecutive identical ‚Ä¶\nRemove duplicates from sections of consecutive identical ‚Ä¶\nConsume the first <code>n</code> elements from the iterator eagerly, ‚Ä¶\nConsume the first <code>n</code> elements from the iterator eagerly, ‚Ä¶\nConsume the last <code>n</code> elements from the iterator eagerly, and ‚Ä¶\nConsume the last <code>n</code> elements from the iterator eagerly, and ‚Ä¶\nReturn an iterator adaptor that produces elements that ‚Ä¶\nReturn an iterator adaptor that produces elements that ‚Ä¶\nReturn an iterator adaptor that produces elements that ‚Ä¶\nReturn an iterator adaptor that produces elements that ‚Ä¶\nCreates an iterator which gives the current iteration ‚Ä¶\nCreates an iterator which gives the current iteration ‚Ä¶\nCreates an iterator which gives the current iteration ‚Ä¶\nCreates an iterator which gives the current iteration ‚Ä¶\nCreates an iterator which gives the current iteration ‚Ä¶\nCreates an iterator which gives the current iteration ‚Ä¶\nCreates an iterator which gives the current iteration ‚Ä¶\nCreates an iterator which gives the current iteration ‚Ä¶\nCreates an iterator which gives the current iteration ‚Ä¶\nCreates an iterator which gives the current iteration ‚Ä¶\nCreates an iterator which gives the current iteration ‚Ä¶\nCreates an iterator which gives the current iteration ‚Ä¶\nCreates an iterator which gives the current iteration ‚Ä¶\nCreates an iterator which gives the current iteration ‚Ä¶\nDetermines if the elements of this <code>Iterator</code> are equal to ‚Ä¶\nDetermines if the elements of this <code>Iterator</code> are equal to ‚Ä¶\nDetermines if the elements of this <code>Iterator</code> are equal to ‚Ä¶\nDetermines if the elements of this <code>Iterator</code> are equal to ‚Ä¶\nDetermines if the elements of this <code>Iterator</code> are equal to ‚Ä¶\nDetermines if the elements of this <code>Iterator</code> are equal to ‚Ä¶\nDetermines if the elements of this <code>Iterator</code> are equal to ‚Ä¶\nDetermines if the elements of this <code>Iterator</code> are equal to ‚Ä¶\nDetermines if the elements of this <code>Iterator</code> are equal to ‚Ä¶\nDetermines if the elements of this <code>Iterator</code> are equal to ‚Ä¶\nDetermines if the elements of this <code>Iterator</code> are equal to ‚Ä¶\nDetermines if the elements of this <code>Iterator</code> are equal to ‚Ä¶\nDetermines if the elements of this <code>Iterator</code> are equal to ‚Ä¶\nDetermines if the elements of this <code>Iterator</code> are equal to ‚Ä¶\nDetermines if the elements of this <code>Iterator</code> are equal to ‚Ä¶\nDetermines if the elements of this <code>Iterator</code> are equal to ‚Ä¶\nDetermines if the elements of this <code>Iterator</code> are equal to ‚Ä¶\nDetermines if the elements of this <code>Iterator</code> are equal to ‚Ä¶\nDetermines if the elements of this <code>Iterator</code> are equal to ‚Ä¶\nDetermines if the elements of this <code>Iterator</code> are equal to ‚Ä¶\nDetermines if the elements of this <code>Iterator</code> are equal to ‚Ä¶\nDetermines if the elements of this <code>Iterator</code> are equal to ‚Ä¶\nDetermines if the elements of this <code>Iterator</code> are equal to ‚Ä¶\nDetermines if the elements of this <code>Iterator</code> are equal to ‚Ä¶\nDetermines if the elements of this <code>Iterator</code> are equal to ‚Ä¶\nDetermines if the elements of this <code>Iterator</code> are equal to ‚Ä¶\nDetermines if the elements of this <code>Iterator</code> are equal to ‚Ä¶\nDetermines if the elements of this <code>Iterator</code> are equal to ‚Ä¶\nIf the iterator yields exactly one element, that element ‚Ä¶\nIf the iterator yields exactly one element, that element ‚Ä¶\nExtends a collection with the contents of an iterator.\nExtends a collection with exactly one element.\nExtends a collection with exactly one element.\nExtends a collection with exactly one element.\nExtends a collection with exactly one element.\nExtends a collection with exactly one element.\nExtends a collection with exactly one element.\nExtends a collection with exactly one element.\nExtends a collection with exactly one element.\nExtends a collection with exactly one element.\nExtends a collection with exactly one element.\nExtends a collection with exactly one element.\nExtends a collection with exactly one element.\nExtends a collection with exactly one element.\nExtends a collection with exactly one element.\nReserves capacity in a collection for the given number of ‚Ä¶\nReserves capacity in a collection for the given number of ‚Ä¶\nReserves capacity in a collection for the given number of ‚Ä¶\nReserves capacity in a collection for the given number of ‚Ä¶\nReserves capacity in a collection for the given number of ‚Ä¶\nReserves capacity in a collection for the given number of ‚Ä¶\nReserves capacity in a collection for the given number of ‚Ä¶\nReserves capacity in a collection for the given number of ‚Ä¶\nReserves capacity in a collection for the given number of ‚Ä¶\nReserves capacity in a collection for the given number of ‚Ä¶\nReserves capacity in a collection for the given number of ‚Ä¶\nReserves capacity in a collection for the given number of ‚Ä¶\nReserves capacity in a collection for the given number of ‚Ä¶\nReserves capacity in a collection for the given number of ‚Ä¶\nCreates an iterator which uses a closure to determine if ‚Ä¶\nCreates an iterator which uses a closure to determine if ‚Ä¶\nCreates an iterator which uses a closure to determine if ‚Ä¶\nCreates an iterator which uses a closure to determine if ‚Ä¶\nCreates an iterator which uses a closure to determine if ‚Ä¶\nCreates an iterator which uses a closure to determine if ‚Ä¶\nCreates an iterator which uses a closure to determine if ‚Ä¶\nCreates an iterator which uses a closure to determine if ‚Ä¶\nCreates an iterator which uses a closure to determine if ‚Ä¶\nCreates an iterator which uses a closure to determine if ‚Ä¶\nCreates an iterator which uses a closure to determine if ‚Ä¶\nCreates an iterator which uses a closure to determine if ‚Ä¶\nCreates an iterator which uses a closure to determine if ‚Ä¶\nCreates an iterator which uses a closure to determine if ‚Ä¶\nCreates an iterator that both filters and maps.\nCreates an iterator that both filters and maps.\nCreates an iterator that both filters and maps.\nCreates an iterator that both filters and maps.\nCreates an iterator that both filters and maps.\nCreates an iterator that both filters and maps.\nCreates an iterator that both filters and maps.\nCreates an iterator that both filters and maps.\nCreates an iterator that both filters and maps.\nCreates an iterator that both filters and maps.\nCreates an iterator that both filters and maps.\nCreates an iterator that both filters and maps.\nCreates an iterator that both filters and maps.\nCreates an iterator that both filters and maps.\nReturn an iterator adaptor that filters and transforms ‚Ä¶\nReturn an iterator adaptor that filters and transforms ‚Ä¶\nReturn an iterator adaptor that filters every <code>Result::Ok</code> ‚Ä¶\nReturn an iterator adaptor that filters every <code>Result::Ok</code> ‚Ä¶\nSearches for an element of an iterator that satisfies a ‚Ä¶\nSearches for an element of an iterator that satisfies a ‚Ä¶\nSearches for an element of an iterator that satisfies a ‚Ä¶\nSearches for an element of an iterator that satisfies a ‚Ä¶\nSearches for an element of an iterator that satisfies a ‚Ä¶\nSearches for an element of an iterator that satisfies a ‚Ä¶\nSearches for an element of an iterator that satisfies a ‚Ä¶\nSearches for an element of an iterator that satisfies a ‚Ä¶\nSearches for an element of an iterator that satisfies a ‚Ä¶\nSearches for an element of an iterator that satisfies a ‚Ä¶\nSearches for an element of an iterator that satisfies a ‚Ä¶\nSearches for an element of an iterator that satisfies a ‚Ä¶\nSearches for an element of an iterator that satisfies a ‚Ä¶\nSearches for an element of an iterator that satisfies a ‚Ä¶\nApplies function to the elements of iterator and returns ‚Ä¶\nApplies function to the elements of iterator and returns ‚Ä¶\nApplies function to the elements of iterator and returns ‚Ä¶\nApplies function to the elements of iterator and returns ‚Ä¶\nApplies function to the elements of iterator and returns ‚Ä¶\nApplies function to the elements of iterator and returns ‚Ä¶\nApplies function to the elements of iterator and returns ‚Ä¶\nApplies function to the elements of iterator and returns ‚Ä¶\nApplies function to the elements of iterator and returns ‚Ä¶\nApplies function to the elements of iterator and returns ‚Ä¶\nApplies function to the elements of iterator and returns ‚Ä¶\nApplies function to the elements of iterator and returns ‚Ä¶\nApplies function to the elements of iterator and returns ‚Ä¶\nApplies function to the elements of iterator and returns ‚Ä¶\nFind the value of the first element satisfying a predicate ‚Ä¶\nFind the value of the first element satisfying a predicate ‚Ä¶\nFind the value of the first element satisfying a predicate ‚Ä¶\nFind the value of the first element satisfying a predicate ‚Ä¶\nFind the position and value of the first element ‚Ä¶\nFind the position and value of the first element ‚Ä¶\nCreates an iterator that works like map, but flattens ‚Ä¶\nCreates an iterator that works like map, but flattens ‚Ä¶\nCreates an iterator that works like map, but flattens ‚Ä¶\nCreates an iterator that works like map, but flattens ‚Ä¶\nCreates an iterator that works like map, but flattens ‚Ä¶\nCreates an iterator that works like map, but flattens ‚Ä¶\nCreates an iterator that works like map, but flattens ‚Ä¶\nCreates an iterator that works like map, but flattens ‚Ä¶\nCreates an iterator that works like map, but flattens ‚Ä¶\nCreates an iterator that works like map, but flattens ‚Ä¶\nCreates an iterator that works like map, but flattens ‚Ä¶\nCreates an iterator that works like map, but flattens ‚Ä¶\nCreates an iterator that works like map, but flattens ‚Ä¶\nCreates an iterator that works like map, but flattens ‚Ä¶\nCreates an iterator that flattens nested structure.\nCreates an iterator that flattens nested structure.\nCreates an iterator that flattens nested structure.\nCreates an iterator that flattens nested structure.\nCreates an iterator that flattens nested structure.\nCreates an iterator that flattens nested structure.\nCreates an iterator that flattens nested structure.\nCreates an iterator that flattens nested structure.\nCreates an iterator that flattens nested structure.\nCreates an iterator that flattens nested structure.\nCreates an iterator that flattens nested structure.\nCreates an iterator that flattens nested structure.\nCreates an iterator that flattens nested structure.\nCreates an iterator that flattens nested structure.\nReturn an iterator adaptor that flattens every <code>Result::Ok</code> ‚Ä¶\nReturn an iterator adaptor that flattens every <code>Result::Ok</code> ‚Ä¶\nFolds every element into an accumulator by applying an ‚Ä¶\nFolds every element into an accumulator by applying an ‚Ä¶\nFolds every element into an accumulator by applying an ‚Ä¶\nFolds every element into an accumulator by applying an ‚Ä¶\nFolds every element into an accumulator by applying an ‚Ä¶\nFolds every element into an accumulator by applying an ‚Ä¶\nFolds every element into an accumulator by applying an ‚Ä¶\nFolds every element into an accumulator by applying an ‚Ä¶\nFolds every element into an accumulator by applying an ‚Ä¶\nFolds every element into an accumulator by applying an ‚Ä¶\nFolds every element into an accumulator by applying an ‚Ä¶\nFolds every element into an accumulator by applying an ‚Ä¶\nFolds every element into an accumulator by applying an ‚Ä¶\nFolds every element into an accumulator by applying an ‚Ä¶\nAccumulator of the elements in the iterator.\nAccumulator of the elements in the iterator.\nFold <code>Result</code> values from an iterator.\nFold <code>Result</code> values from an iterator.\nFold <code>Option</code> values from an iterator.\nFold <code>Option</code> values from an iterator.\nAn iterator method that applies a function, producing a ‚Ä¶\nAn iterator method that applies a function, producing a ‚Ä¶\nCalls a closure on each element of an iterator.\nCalls a closure on each element of an iterator.\nCalls a closure on each element of an iterator.\nCalls a closure on each element of an iterator.\nCalls a closure on each element of an iterator.\nCalls a closure on each element of an iterator.\nCalls a closure on each element of an iterator.\nCalls a closure on each element of an iterator.\nCalls a closure on each element of an iterator.\nCalls a closure on each element of an iterator.\nCalls a closure on each element of an iterator.\nCalls a closure on each element of an iterator.\nCalls a closure on each element of an iterator.\nCalls a closure on each element of an iterator.\nFormat all iterator elements, separated by <code>sep</code>.\nFormat all iterator elements, separated by <code>sep</code>.\nFormat all iterator elements, separated by <code>sep</code>.\nFormat all iterator elements, separated by <code>sep</code>.\nCreates a value from an iterator.\nCreates an iterator which ends after the first <code>None</code>.\nCreates an iterator which ends after the first <code>None</code>.\nCreates an iterator which ends after the first <code>None</code>.\nCreates an iterator which ends after the first <code>None</code>.\nCreates an iterator which ends after the first <code>None</code>.\nCreates an iterator which ends after the first <code>None</code>.\nCreates an iterator which ends after the first <code>None</code>.\nCreates an iterator which ends after the first <code>None</code>.\nCreates an iterator which ends after the first <code>None</code>.\nCreates an iterator which ends after the first <code>None</code>.\nCreates an iterator which ends after the first <code>None</code>.\nCreates an iterator which ends after the first <code>None</code>.\nCreates an iterator which ends after the first <code>None</code>.\nCreates an iterator which ends after the first <code>None</code>.\nDetermines if the elements of this <code>Iterator</code> are ‚Ä¶\nDetermines if the elements of this <code>Iterator</code> are ‚Ä¶\nDetermines if the elements of this <code>Iterator</code> are ‚Ä¶\nDetermines if the elements of this <code>Iterator</code> are ‚Ä¶\nDetermines if the elements of this <code>Iterator</code> are ‚Ä¶\nDetermines if the elements of this <code>Iterator</code> are ‚Ä¶\nDetermines if the elements of this <code>Iterator</code> are ‚Ä¶\nDetermines if the elements of this <code>Iterator</code> are ‚Ä¶\nDetermines if the elements of this <code>Iterator</code> are ‚Ä¶\nDetermines if the elements of this <code>Iterator</code> are ‚Ä¶\nDetermines if the elements of this <code>Iterator</code> are ‚Ä¶\nDetermines if the elements of this <code>Iterator</code> are ‚Ä¶\nDetermines if the elements of this <code>Iterator</code> are ‚Ä¶\nDetermines if the elements of this <code>Iterator</code> are ‚Ä¶\nReturns an iterator over a subsection of the iterator.\nReturns an iterator over a subsection of the iterator.\nSee <code>.chunk_by()</code>.\nSee <code>.chunk_by()</code>.\nDetermines if the elements of this <code>Iterator</code> are ‚Ä¶\nDetermines if the elements of this <code>Iterator</code> are ‚Ä¶\nDetermines if the elements of this <code>Iterator</code> are ‚Ä¶\nDetermines if the elements of this <code>Iterator</code> are ‚Ä¶\nDetermines if the elements of this <code>Iterator</code> are ‚Ä¶\nDetermines if the elements of this <code>Iterator</code> are ‚Ä¶\nDetermines if the elements of this <code>Iterator</code> are ‚Ä¶\nDetermines if the elements of this <code>Iterator</code> are ‚Ä¶\nDetermines if the elements of this <code>Iterator</code> are ‚Ä¶\nDetermines if the elements of this <code>Iterator</code> are ‚Ä¶\nDetermines if the elements of this <code>Iterator</code> are ‚Ä¶\nDetermines if the elements of this <code>Iterator</code> are ‚Ä¶\nDetermines if the elements of this <code>Iterator</code> are ‚Ä¶\nDetermines if the elements of this <code>Iterator</code> are ‚Ä¶\nDoes something with each element of an iterator, passing ‚Ä¶\nDoes something with each element of an iterator, passing ‚Ä¶\nDoes something with each element of an iterator, passing ‚Ä¶\nDoes something with each element of an iterator, passing ‚Ä¶\nDoes something with each element of an iterator, passing ‚Ä¶\nDoes something with each element of an iterator, passing ‚Ä¶\nDoes something with each element of an iterator, passing ‚Ä¶\nDoes something with each element of an iterator, passing ‚Ä¶\nDoes something with each element of an iterator, passing ‚Ä¶\nDoes something with each element of an iterator, passing ‚Ä¶\nDoes something with each element of an iterator, passing ‚Ä¶\nDoes something with each element of an iterator, passing ‚Ä¶\nDoes something with each element of an iterator, passing ‚Ä¶\nDoes something with each element of an iterator, passing ‚Ä¶\nAlternate elements from two iterators until both have run ‚Ä¶\nAlternate elements from two iterators until both have run ‚Ä¶\nAlternate elements from two iterators until at least one ‚Ä¶\nAlternate elements from two iterators until at least one ‚Ä¶\nAn iterator adaptor to insert a particular value between ‚Ä¶\nAn iterator adaptor to insert a particular value between ‚Ä¶\nCreates a new iterator which places a copy of <code>separator</code> ‚Ä¶\nCreates a new iterator which places a copy of <code>separator</code> ‚Ä¶\nCreates a new iterator which places a copy of <code>separator</code> ‚Ä¶\nCreates a new iterator which places a copy of <code>separator</code> ‚Ä¶\nCreates a new iterator which places a copy of <code>separator</code> ‚Ä¶\nCreates a new iterator which places a copy of <code>separator</code> ‚Ä¶\nCreates a new iterator which places a copy of <code>separator</code> ‚Ä¶\nCreates a new iterator which places a copy of <code>separator</code> ‚Ä¶\nCreates a new iterator which places a copy of <code>separator</code> ‚Ä¶\nCreates a new iterator which places a copy of <code>separator</code> ‚Ä¶\nCreates a new iterator which places a copy of <code>separator</code> ‚Ä¶\nCreates a new iterator which places a copy of <code>separator</code> ‚Ä¶\nCreates a new iterator which places a copy of <code>separator</code> ‚Ä¶\nCreates a new iterator which places a copy of <code>separator</code> ‚Ä¶\nAn iterator adaptor to insert a particular value created ‚Ä¶\nAn iterator adaptor to insert a particular value created ‚Ä¶\nCreates a new iterator which places an item generated by ‚Ä¶\nCreates a new iterator which places an item generated by ‚Ä¶\nCreates a new iterator which places an item generated by ‚Ä¶\nCreates a new iterator which places an item generated by ‚Ä¶\nCreates a new iterator which places an item generated by ‚Ä¶\nCreates a new iterator which places an item generated by ‚Ä¶\nCreates a new iterator which places an item generated by ‚Ä¶\nCreates a new iterator which places an item generated by ‚Ä¶\nCreates a new iterator which places an item generated by ‚Ä¶\nCreates a new iterator which places an item generated by ‚Ä¶\nCreates a new iterator which places an item generated by ‚Ä¶\nCreates a new iterator which places an item generated by ‚Ä¶\nCreates a new iterator which places an item generated by ‚Ä¶\nCreates a new iterator which places an item generated by ‚Ä¶\nReturn a <code>HashMap</code> of keys mapped to <code>Vec</code>s of values. Keys ‚Ä¶\nReturn a <code>HashMap</code> of keys mapped to <code>Vec</code>s of values. Keys ‚Ä¶\nReturn a <code>HashMap</code> of keys mapped to <code>Vec</code>s of values. The key ‚Ä¶\nReturn a <code>HashMap</code> of keys mapped to <code>Vec</code>s of values. The key ‚Ä¶\nConstructs a <code>GroupingMap</code> to be used later with one of the ‚Ä¶\nConstructs a <code>GroupingMap</code> to be used later with one of the ‚Ä¶\nConstructs a <code>GroupingMap</code> to be used later with one of the ‚Ä¶\nConstructs a <code>GroupingMap</code> to be used later with one of the ‚Ä¶\nCreates an iterator from a value.\nReturns <code>true</code> if the iterator is empty.\nReturns <code>true</code> if the iterator is empty.\nReturns <code>true</code> if the iterator is empty.\nReturns <code>true</code> if the iterator is empty.\nReturns <code>true</code> if the iterator is empty.\nReturns <code>true</code> if the iterator is empty.\nReturns <code>true</code> if the iterator is empty.\nReturns <code>true</code> if the iterator is empty.\nReturns <code>true</code> if the iterator is empty.\nReturns <code>true</code> if the iterator is empty.\nReturns <code>true</code> if the iterator is empty.\nReturns <code>true</code> if the iterator is empty.\nReturns <code>true</code> if the iterator is empty.\nReturns <code>true</code> if the iterator is empty.\nChecks if the elements of this iterator are partitioned ‚Ä¶\nChecks if the elements of this iterator are partitioned ‚Ä¶\nChecks if the elements of this iterator are partitioned ‚Ä¶\nChecks if the elements of this iterator are partitioned ‚Ä¶\nChecks if the elements of this iterator are partitioned ‚Ä¶\nChecks if the elements of this iterator are partitioned ‚Ä¶\nChecks if the elements of this iterator are partitioned ‚Ä¶\nChecks if the elements of this iterator are partitioned ‚Ä¶\nChecks if the elements of this iterator are partitioned ‚Ä¶\nChecks if the elements of this iterator are partitioned ‚Ä¶\nChecks if the elements of this iterator are partitioned ‚Ä¶\nChecks if the elements of this iterator are partitioned ‚Ä¶\nChecks if the elements of this iterator are partitioned ‚Ä¶\nChecks if the elements of this iterator are partitioned ‚Ä¶\nChecks if the elements of this iterator are sorted.\nChecks if the elements of this iterator are sorted.\nChecks if the elements of this iterator are sorted.\nChecks if the elements of this iterator are sorted.\nChecks if the elements of this iterator are sorted.\nChecks if the elements of this iterator are sorted.\nChecks if the elements of this iterator are sorted.\nChecks if the elements of this iterator are sorted.\nChecks if the elements of this iterator are sorted.\nChecks if the elements of this iterator are sorted.\nChecks if the elements of this iterator are sorted.\nChecks if the elements of this iterator are sorted.\nChecks if the elements of this iterator are sorted.\nChecks if the elements of this iterator are sorted.\nChecks if the elements of this iterator are sorted using ‚Ä¶\nChecks if the elements of this iterator are sorted using ‚Ä¶\nChecks if the elements of this iterator are sorted using ‚Ä¶\nChecks if the elements of this iterator are sorted using ‚Ä¶\nChecks if the elements of this iterator are sorted using ‚Ä¶\nChecks if the elements of this iterator are sorted using ‚Ä¶\nChecks if the elements of this iterator are sorted using ‚Ä¶\nChecks if the elements of this iterator are sorted using ‚Ä¶\nChecks if the elements of this iterator are sorted using ‚Ä¶\nChecks if the elements of this iterator are sorted using ‚Ä¶\nChecks if the elements of this iterator are sorted using ‚Ä¶\nChecks if the elements of this iterator are sorted using ‚Ä¶\nChecks if the elements of this iterator are sorted using ‚Ä¶\nChecks if the elements of this iterator are sorted using ‚Ä¶\nChecks if the elements of this iterator are sorted using ‚Ä¶\nChecks if the elements of this iterator are sorted using ‚Ä¶\nChecks if the elements of this iterator are sorted using ‚Ä¶\nChecks if the elements of this iterator are sorted using ‚Ä¶\nChecks if the elements of this iterator are sorted using ‚Ä¶\nChecks if the elements of this iterator are sorted using ‚Ä¶\nChecks if the elements of this iterator are sorted using ‚Ä¶\nChecks if the elements of this iterator are sorted using ‚Ä¶\nChecks if the elements of this iterator are sorted using ‚Ä¶\nChecks if the elements of this iterator are sorted using ‚Ä¶\nChecks if the elements of this iterator are sorted using ‚Ä¶\nChecks if the elements of this iterator are sorted using ‚Ä¶\nChecks if the elements of this iterator are sorted using ‚Ä¶\nChecks if the elements of this iterator are sorted using ‚Ä¶\n<code>core</code> Creates an iterator where each iteration calls the ‚Ä¶\nCombine all iterator elements into one <code>String</code>, separated ‚Ä¶\nCombine all iterator elements into one <code>String</code>, separated ‚Ä¶\nSort the k largest elements into a new iterator, in ‚Ä¶\nSort the k largest elements into a new iterator, in ‚Ä¶\nSort the k largest elements into a new iterator using the ‚Ä¶\nSort the k largest elements into a new iterator using the ‚Ä¶\nReturn the elements producing the k largest outputs of the ‚Ä¶\nReturn the elements producing the k largest outputs of the ‚Ä¶\nSort the k largest elements into a new iterator, in ‚Ä¶\nSort the k largest elements into a new iterator, in ‚Ä¶\nSort the k largest elements into a new iterator using the ‚Ä¶\nSort the k largest elements into a new iterator using the ‚Ä¶\nReturn the elements producing the k largest outputs of the ‚Ä¶\nReturn the elements producing the k largest outputs of the ‚Ä¶\nSort the k smallest elements into a new iterator, in ‚Ä¶\nSort the k smallest elements into a new iterator, in ‚Ä¶\nSort the k smallest elements into a new iterator using the ‚Ä¶\nSort the k smallest elements into a new iterator using the ‚Ä¶\nReturn the elements producing the k smallest outputs of ‚Ä¶\nReturn the elements producing the k smallest outputs of ‚Ä¶\nSort the k smallest elements into a new iterator, in ‚Ä¶\nSort the k smallest elements into a new iterator, in ‚Ä¶\nSort the k smallest elements into a new iterator using the ‚Ä¶\nSort the k smallest elements into a new iterator using the ‚Ä¶\nReturn the elements producing the k smallest outputs of ‚Ä¶\nReturn the elements producing the k smallest outputs of ‚Ä¶\nReturn an iterator adaptor that flattens an iterator of ‚Ä¶\nReturn an iterator adaptor that flattens an iterator of ‚Ä¶\nReturn an iterator adaptor that flattens an iterator of ‚Ä¶\nReturn an iterator adaptor that flattens an iterator of ‚Ä¶\nConsumes the iterator, returning the last element.\nConsumes the iterator, returning the last element.\nConsumes the iterator, returning the last element.\nConsumes the iterator, returning the last element.\nConsumes the iterator, returning the last element.\nConsumes the iterator, returning the last element.\nConsumes the iterator, returning the last element.\nConsumes the iterator, returning the last element.\nConsumes the iterator, returning the last element.\nConsumes the iterator, returning the last element.\nConsumes the iterator, returning the last element.\nConsumes the iterator, returning the last element.\nConsumes the iterator, returning the last element.\nConsumes the iterator, returning the last element.\nDetermines if the elements of this <code>Iterator</code> are ‚Ä¶\nDetermines if the elements of this <code>Iterator</code> are ‚Ä¶\nDetermines if the elements of this <code>Iterator</code> are ‚Ä¶\nDetermines if the elements of this <code>Iterator</code> are ‚Ä¶\nDetermines if the elements of this <code>Iterator</code> are ‚Ä¶\nDetermines if the elements of this <code>Iterator</code> are ‚Ä¶\nDetermines if the elements of this <code>Iterator</code> are ‚Ä¶\nDetermines if the elements of this <code>Iterator</code> are ‚Ä¶\nDetermines if the elements of this <code>Iterator</code> are ‚Ä¶\nDetermines if the elements of this <code>Iterator</code> are ‚Ä¶\nDetermines if the elements of this <code>Iterator</code> are ‚Ä¶\nDetermines if the elements of this <code>Iterator</code> are ‚Ä¶\nDetermines if the elements of this <code>Iterator</code> are ‚Ä¶\nDetermines if the elements of this <code>Iterator</code> are ‚Ä¶\nReturns the exact remaining length of the iterator.\nReturns the exact remaining length of the iterator.\nReturns the exact remaining length of the iterator.\nReturns the exact remaining length of the iterator.\nReturns the exact remaining length of the iterator.\nReturns the exact remaining length of the iterator.\nReturns the exact remaining length of the iterator.\nReturns the exact remaining length of the iterator.\nReturns the exact remaining length of the iterator.\nReturns the exact remaining length of the iterator.\nReturns the exact remaining length of the iterator.\nReturns the exact remaining length of the iterator.\nReturns the exact remaining length of the iterator.\nReturns the exact remaining length of the iterator.\nDetermines if the elements of this <code>Iterator</code> are ‚Ä¶\nDetermines if the elements of this <code>Iterator</code> are ‚Ä¶\nDetermines if the elements of this <code>Iterator</code> are ‚Ä¶\nDetermines if the elements of this <code>Iterator</code> are ‚Ä¶\nDetermines if the elements of this <code>Iterator</code> are ‚Ä¶\nDetermines if the elements of this <code>Iterator</code> are ‚Ä¶\nDetermines if the elements of this <code>Iterator</code> are ‚Ä¶\nDetermines if the elements of this <code>Iterator</code> are ‚Ä¶\nDetermines if the elements of this <code>Iterator</code> are ‚Ä¶\nDetermines if the elements of this <code>Iterator</code> are ‚Ä¶\nDetermines if the elements of this <code>Iterator</code> are ‚Ä¶\nDetermines if the elements of this <code>Iterator</code> are ‚Ä¶\nDetermines if the elements of this <code>Iterator</code> are ‚Ä¶\nDetermines if the elements of this <code>Iterator</code> are ‚Ä¶\nTakes a closure and creates an iterator which calls that ‚Ä¶\nTakes a closure and creates an iterator which calls that ‚Ä¶\nTakes a closure and creates an iterator which calls that ‚Ä¶\nTakes a closure and creates an iterator which calls that ‚Ä¶\nTakes a closure and creates an iterator which calls that ‚Ä¶\nTakes a closure and creates an iterator which calls that ‚Ä¶\nTakes a closure and creates an iterator which calls that ‚Ä¶\nTakes a closure and creates an iterator which calls that ‚Ä¶\nTakes a closure and creates an iterator which calls that ‚Ä¶\nTakes a closure and creates an iterator which calls that ‚Ä¶\nTakes a closure and creates an iterator which calls that ‚Ä¶\nTakes a closure and creates an iterator which calls that ‚Ä¶\nTakes a closure and creates an iterator which calls that ‚Ä¶\nTakes a closure and creates an iterator which calls that ‚Ä¶\nConvert each item of the iterator using the <code>Into</code> trait.\nConvert each item of the iterator using the <code>Into</code> trait.\nReturn an iterator adaptor that applies the provided ‚Ä¶\nReturn an iterator adaptor that applies the provided ‚Ä¶\nCreates an iterator that both yields elements based on a ‚Ä¶\nCreates an iterator that both yields elements based on a ‚Ä¶\nCreates an iterator that both yields elements based on a ‚Ä¶\nCreates an iterator that both yields elements based on a ‚Ä¶\nCreates an iterator that both yields elements based on a ‚Ä¶\nCreates an iterator that both yields elements based on a ‚Ä¶\nCreates an iterator that both yields elements based on a ‚Ä¶\nCreates an iterator that both yields elements based on a ‚Ä¶\nCreates an iterator that both yields elements based on a ‚Ä¶\nCreates an iterator that both yields elements based on a ‚Ä¶\nCreates an iterator that both yields elements based on a ‚Ä¶\nCreates an iterator that both yields elements based on a ‚Ä¶\nCreates an iterator that both yields elements based on a ‚Ä¶\nCreates an iterator that both yields elements based on a ‚Ä¶\nCalls the given function <code>f</code> for each contiguous window of ‚Ä¶\nCalls the given function <code>f</code> for each contiguous window of ‚Ä¶\nCalls the given function <code>f</code> for each contiguous window of ‚Ä¶\nCalls the given function <code>f</code> for each contiguous window of ‚Ä¶\nCalls the given function <code>f</code> for each contiguous window of ‚Ä¶\nCalls the given function <code>f</code> for each contiguous window of ‚Ä¶\nCalls the given function <code>f</code> for each contiguous window of ‚Ä¶\nCalls the given function <code>f</code> for each contiguous window of ‚Ä¶\nCalls the given function <code>f</code> for each contiguous window of ‚Ä¶\nCalls the given function <code>f</code> for each contiguous window of ‚Ä¶\nCalls the given function <code>f</code> for each contiguous window of ‚Ä¶\nCalls the given function <code>f</code> for each contiguous window of ‚Ä¶\nCalls the given function <code>f</code> for each contiguous window of ‚Ä¶\nCalls the given function <code>f</code> for each contiguous window of ‚Ä¶\nReturns the maximum element of an iterator.\nReturns the maximum element of an iterator.\nReturns the maximum element of an iterator.\nReturns the maximum element of an iterator.\nReturns the maximum element of an iterator.\nReturns the maximum element of an iterator.\nReturns the maximum element of an iterator.\nReturns the maximum element of an iterator.\nReturns the maximum element of an iterator.\nReturns the maximum element of an iterator.\nReturns the maximum element of an iterator.\nReturns the maximum element of an iterator.\nReturns the maximum element of an iterator.\nReturns the maximum element of an iterator.\nReturns the element that gives the maximum value with ‚Ä¶\nReturns the element that gives the maximum value with ‚Ä¶\nReturns the element that gives the maximum value with ‚Ä¶\nReturns the element that gives the maximum value with ‚Ä¶\nReturns the element that gives the maximum value with ‚Ä¶\nReturns the element that gives the maximum value with ‚Ä¶\nReturns the element that gives the maximum value with ‚Ä¶\nReturns the element that gives the maximum value with ‚Ä¶\nReturns the element that gives the maximum value with ‚Ä¶\nReturns the element that gives the maximum value with ‚Ä¶\nReturns the element that gives the maximum value with ‚Ä¶\nReturns the element that gives the maximum value with ‚Ä¶\nReturns the element that gives the maximum value with ‚Ä¶\nReturns the element that gives the maximum value with ‚Ä¶\nReturns the element that gives the maximum value from the ‚Ä¶\nReturns the element that gives the maximum value from the ‚Ä¶\nReturns the element that gives the maximum value from the ‚Ä¶\nReturns the element that gives the maximum value from the ‚Ä¶\nReturns the element that gives the maximum value from the ‚Ä¶\nReturns the element that gives the maximum value from the ‚Ä¶\nReturns the element that gives the maximum value from the ‚Ä¶\nReturns the element that gives the maximum value from the ‚Ä¶\nReturns the element that gives the maximum value from the ‚Ä¶\nReturns the element that gives the maximum value from the ‚Ä¶\nReturns the element that gives the maximum value from the ‚Ä¶\nReturns the element that gives the maximum value from the ‚Ä¶\nReturns the element that gives the maximum value from the ‚Ä¶\nReturns the element that gives the maximum value from the ‚Ä¶\nReturn all maximum elements of an iterator.\nReturn all maximum elements of an iterator.\nReturn all maximum elements of an iterator, as determined ‚Ä¶\nReturn all maximum elements of an iterator, as determined ‚Ä¶\nReturn all maximum elements of an iterator, as determined ‚Ä¶\nReturn all maximum elements of an iterator, as determined ‚Ä¶\nReturn an iterator adaptor that merges the two base ‚Ä¶\nReturn an iterator adaptor that merges the two base ‚Ä¶\nReturn an iterator adaptor that merges the two base ‚Ä¶\nReturn an iterator adaptor that merges the two base ‚Ä¶\nCreate an iterator that merges items from both this and ‚Ä¶\nCreate an iterator that merges items from both this and ‚Ä¶\nReturns the minimum element of an iterator.\nReturns the minimum element of an iterator.\nReturns the minimum element of an iterator.\nReturns the minimum element of an iterator.\nReturns the minimum element of an iterator.\nReturns the minimum element of an iterator.\nReturns the minimum element of an iterator.\nReturns the minimum element of an iterator.\nReturns the minimum element of an iterator.\nReturns the minimum element of an iterator.\nReturns the minimum element of an iterator.\nReturns the minimum element of an iterator.\nReturns the minimum element of an iterator.\nReturns the minimum element of an iterator.\nReturns the element that gives the minimum value with ‚Ä¶\nReturns the element that gives the minimum value with ‚Ä¶\nReturns the element that gives the minimum value with ‚Ä¶\nReturns the element that gives the minimum value with ‚Ä¶\nReturns the element that gives the minimum value with ‚Ä¶\nReturns the element that gives the minimum value with ‚Ä¶\nReturns the element that gives the minimum value with ‚Ä¶\nReturns the element that gives the minimum value with ‚Ä¶\nReturns the element that gives the minimum value with ‚Ä¶\nReturns the element that gives the minimum value with ‚Ä¶\nReturns the element that gives the minimum value with ‚Ä¶\nReturns the element that gives the minimum value with ‚Ä¶\nReturns the element that gives the minimum value with ‚Ä¶\nReturns the element that gives the minimum value with ‚Ä¶\nReturns the element that gives the minimum value from the ‚Ä¶\nReturns the element that gives the minimum value from the ‚Ä¶\nReturns the element that gives the minimum value from the ‚Ä¶\nReturns the element that gives the minimum value from the ‚Ä¶\nReturns the element that gives the minimum value from the ‚Ä¶\nReturns the element that gives the minimum value from the ‚Ä¶\nReturns the element that gives the minimum value from the ‚Ä¶\nReturns the element that gives the minimum value from the ‚Ä¶\nReturns the element that gives the minimum value from the ‚Ä¶\nReturns the element that gives the minimum value from the ‚Ä¶\nReturns the element that gives the minimum value from the ‚Ä¶\nReturns the element that gives the minimum value from the ‚Ä¶\nReturns the element that gives the minimum value from the ‚Ä¶\nReturns the element that gives the minimum value from the ‚Ä¶\nReturn all minimum elements of an iterator.\nReturn all minimum elements of an iterator.\nReturn all minimum elements of an iterator, as determined ‚Ä¶\nReturn all minimum elements of an iterator, as determined ‚Ä¶\nReturn all minimum elements of an iterator, as determined ‚Ä¶\nReturn all minimum elements of an iterator, as determined ‚Ä¶\nReturn the minimum and maximum elements in the iterator.\nReturn the minimum and maximum elements in the iterator.\nReturn the minimum and maximum element of an iterator, as ‚Ä¶\nReturn the minimum and maximum element of an iterator, as ‚Ä¶\nReturn the minimum and maximum element of an iterator, as ‚Ä¶\nReturn the minimum and maximum element of an iterator, as ‚Ä¶\nReturn an iterator adaptor that iterates over the ‚Ä¶\nReturn an iterator adaptor that iterates over the ‚Ä¶\nAn iterator adaptor that allows the user to peek at ‚Ä¶\nAn iterator adaptor that allows the user to peek at ‚Ä¶\nUnzip this iterator into multiple collections.\nConverts an iterator of tuples into a tuple of containers.\nConverts an iterator of tuples into a tuple of containers.\nDetermines if the elements of this <code>Iterator</code> are not equal ‚Ä¶\nDetermines if the elements of this <code>Iterator</code> are not equal ‚Ä¶\nDetermines if the elements of this <code>Iterator</code> are not equal ‚Ä¶\nDetermines if the elements of this <code>Iterator</code> are not equal ‚Ä¶\nDetermines if the elements of this <code>Iterator</code> are not equal ‚Ä¶\nDetermines if the elements of this <code>Iterator</code> are not equal ‚Ä¶\nDetermines if the elements of this <code>Iterator</code> are not equal ‚Ä¶\nDetermines if the elements of this <code>Iterator</code> are not equal ‚Ä¶\nDetermines if the elements of this <code>Iterator</code> are not equal ‚Ä¶\nDetermines if the elements of this <code>Iterator</code> are not equal ‚Ä¶\nDetermines if the elements of this <code>Iterator</code> are not equal ‚Ä¶\nDetermines if the elements of this <code>Iterator</code> are not equal ‚Ä¶\nDetermines if the elements of this <code>Iterator</code> are not equal ‚Ä¶\nDetermines if the elements of this <code>Iterator</code> are not equal ‚Ä¶\nAdvances the iterator and returns the next value.\nAdvances the iterator and returns the next items grouped ‚Ä¶\nAdvances the iterator and returns the next items grouped ‚Ä¶\nRemoves and returns an element from the end of the ‚Ä¶\nAdvances the iterator and returns an array containing the ‚Ä¶\nAdvances the iterator and returns an array containing the ‚Ä¶\nAdvances the iterator and returns an array containing the ‚Ä¶\nAdvances the iterator and returns an array containing the ‚Ä¶\nAdvances the iterator and returns an array containing the ‚Ä¶\nAdvances the iterator and returns an array containing the ‚Ä¶\nAdvances the iterator and returns an array containing the ‚Ä¶\nAdvances the iterator and returns an array containing the ‚Ä¶\nAdvances the iterator and returns an array containing the ‚Ä¶\nAdvances the iterator and returns an array containing the ‚Ä¶\nAdvances the iterator and returns an array containing the ‚Ä¶\nAdvances the iterator and returns an array containing the ‚Ä¶\nAdvances the iterator and returns an array containing the ‚Ä¶\nAdvances the iterator and returns an array containing the ‚Ä¶\nAdvances the iterator and returns the next items grouped ‚Ä¶\nAdvances the iterator and returns the next items grouped ‚Ä¶\nReturns the <code>n</code>th element of the iterator.\nReturns the <code>n</code>th element of the iterator.\nReturns the <code>n</code>th element of the iterator.\nReturns the <code>n</code>th element of the iterator.\nReturns the <code>n</code>th element of the iterator.\nReturns the <code>n</code>th element of the iterator.\nReturns the <code>n</code>th element of the iterator.\nReturns the <code>n</code>th element of the iterator.\nReturns the <code>n</code>th element of the iterator.\nReturns the <code>n</code>th element of the iterator.\nReturns the <code>n</code>th element of the iterator.\nReturns the <code>n</code>th element of the iterator.\nReturns the <code>n</code>th element of the iterator.\nReturns the <code>n</code>th element of the iterator.\nReturns the <code>n</code>th element from the end of the iterator.\nReturns the <code>n</code>th element from the end of the iterator.\nReturns the <code>n</code>th element from the end of the iterator.\nReturns the <code>n</code>th element from the end of the iterator.\nReturns the <code>n</code>th element from the end of the iterator.\nReturns the <code>n</code>th element from the end of the iterator.\nReturns the <code>n</code>th element from the end of the iterator.\nReturns the <code>n</code>th element from the end of the iterator.\nReturns the <code>n</code>th element from the end of the iterator.\nReturns the <code>n</code>th element from the end of the iterator.\nReturns the <code>n</code>th element from the end of the iterator.\nReturns the <code>n</code>th element from the end of the iterator.\nReturns the <code>n</code>th element from the end of the iterator.\nReturns the <code>n</code>th element from the end of the iterator.\nReturn an iterator adaptor that pads the sequence to a ‚Ä¶\nReturn an iterator adaptor that pads the sequence to a ‚Ä¶\nLexicographically compares the <code>PartialOrd</code> elements of this ‚Ä¶\nLexicographically compares the <code>PartialOrd</code> elements of this ‚Ä¶\nLexicographically compares the <code>PartialOrd</code> elements of this ‚Ä¶\nLexicographically compares the <code>PartialOrd</code> elements of this ‚Ä¶\nLexicographically compares the <code>PartialOrd</code> elements of this ‚Ä¶\nLexicographically compares the <code>PartialOrd</code> elements of this ‚Ä¶\nLexicographically compares the <code>PartialOrd</code> elements of this ‚Ä¶\nLexicographically compares the <code>PartialOrd</code> elements of this ‚Ä¶\nLexicographically compares the <code>PartialOrd</code> elements of this ‚Ä¶\nLexicographically compares the <code>PartialOrd</code> elements of this ‚Ä¶\nLexicographically compares the <code>PartialOrd</code> elements of this ‚Ä¶\nLexicographically compares the <code>PartialOrd</code> elements of this ‚Ä¶\nLexicographically compares the <code>PartialOrd</code> elements of this ‚Ä¶\nLexicographically compares the <code>PartialOrd</code> elements of this ‚Ä¶\nLexicographically compares the elements of this <code>Iterator</code> ‚Ä¶\nLexicographically compares the elements of this <code>Iterator</code> ‚Ä¶\nLexicographically compares the elements of this <code>Iterator</code> ‚Ä¶\nLexicographically compares the elements of this <code>Iterator</code> ‚Ä¶\nLexicographically compares the elements of this <code>Iterator</code> ‚Ä¶\nLexicographically compares the elements of this <code>Iterator</code> ‚Ä¶\nLexicographically compares the elements of this <code>Iterator</code> ‚Ä¶\nLexicographically compares the elements of this <code>Iterator</code> ‚Ä¶\nLexicographically compares the elements of this <code>Iterator</code> ‚Ä¶\nLexicographically compares the elements of this <code>Iterator</code> ‚Ä¶\nLexicographically compares the elements of this <code>Iterator</code> ‚Ä¶\nLexicographically compares the elements of this <code>Iterator</code> ‚Ä¶\nLexicographically compares the elements of this <code>Iterator</code> ‚Ä¶\nLexicographically compares the elements of this <code>Iterator</code> ‚Ä¶\nConsumes an iterator, creating two collections from it.\nConsumes an iterator, creating two collections from it.\nConsumes an iterator, creating two collections from it.\nConsumes an iterator, creating two collections from it.\nConsumes an iterator, creating two collections from it.\nConsumes an iterator, creating two collections from it.\nConsumes an iterator, creating two collections from it.\nConsumes an iterator, creating two collections from it.\nConsumes an iterator, creating two collections from it.\nConsumes an iterator, creating two collections from it.\nConsumes an iterator, creating two collections from it.\nConsumes an iterator, creating two collections from it.\nConsumes an iterator, creating two collections from it.\nConsumes an iterator, creating two collections from it.\nReorders the elements of this iterator <em>in-place</em> according ‚Ä¶\nReorders the elements of this iterator <em>in-place</em> according ‚Ä¶\nReorders the elements of this iterator <em>in-place</em> according ‚Ä¶\nReorders the elements of this iterator <em>in-place</em> according ‚Ä¶\nReorders the elements of this iterator <em>in-place</em> according ‚Ä¶\nReorders the elements of this iterator <em>in-place</em> according ‚Ä¶\nReorders the elements of this iterator <em>in-place</em> according ‚Ä¶\nReorders the elements of this iterator <em>in-place</em> according ‚Ä¶\nReorders the elements of this iterator <em>in-place</em> according ‚Ä¶\nReorders the elements of this iterator <em>in-place</em> according ‚Ä¶\nReorders the elements of this iterator <em>in-place</em> according ‚Ä¶\nReorders the elements of this iterator <em>in-place</em> according ‚Ä¶\nReorders the elements of this iterator <em>in-place</em> according ‚Ä¶\nReorders the elements of this iterator <em>in-place</em> according ‚Ä¶\nCollect all iterator elements into one of two partitions. ‚Ä¶\nCollect all iterator elements into one of two partitions. ‚Ä¶\nPartition a sequence of <code>Result</code>s into one list of all the <code>Ok</code>‚Ä¶\nPartition a sequence of <code>Result</code>s into one list of all the <code>Ok</code>‚Ä¶\nCreates an iterator which can use the <code>peek</code> and <code>peek_mut</code> ‚Ä¶\nCreates an iterator which can use the <code>peek</code> and <code>peek_mut</code> ‚Ä¶\nCreates an iterator which can use the <code>peek</code> and <code>peek_mut</code> ‚Ä¶\nCreates an iterator which can use the <code>peek</code> and <code>peek_mut</code> ‚Ä¶\nCreates an iterator which can use the <code>peek</code> and <code>peek_mut</code> ‚Ä¶\nCreates an iterator which can use the <code>peek</code> and <code>peek_mut</code> ‚Ä¶\nCreates an iterator which can use the <code>peek</code> and <code>peek_mut</code> ‚Ä¶\nCreates an iterator which can use the <code>peek</code> and <code>peek_mut</code> ‚Ä¶\nCreates an iterator which can use the <code>peek</code> and <code>peek_mut</code> ‚Ä¶\nCreates an iterator which can use the <code>peek</code> and <code>peek_mut</code> ‚Ä¶\nCreates an iterator which can use the <code>peek</code> and <code>peek_mut</code> ‚Ä¶\nCreates an iterator which can use the <code>peek</code> and <code>peek_mut</code> ‚Ä¶\nCreates an iterator which can use the <code>peek</code> and <code>peek_mut</code> ‚Ä¶\nCreates an iterator which can use the <code>peek</code> and <code>peek_mut</code> ‚Ä¶\nPass a reference to the next iterator element to the ‚Ä¶\nReturn an iterator adaptor that borrows from this iterator ‚Ä¶\nReturn an iterator adaptor that borrows from this iterator ‚Ä¶\nReturn an iterator adaptor that iterates over all ‚Ä¶\nReturn an iterator adaptor that iterates over all ‚Ä¶\nSearches for an element in an iterator, returning its ‚Ä¶\nSearches for an element in an iterator, returning its ‚Ä¶\nSearches for an element in an iterator, returning its ‚Ä¶\nSearches for an element in an iterator, returning its ‚Ä¶\nSearches for an element in an iterator, returning its ‚Ä¶\nSearches for an element in an iterator, returning its ‚Ä¶\nSearches for an element in an iterator, returning its ‚Ä¶\nSearches for an element in an iterator, returning its ‚Ä¶\nSearches for an element in an iterator, returning its ‚Ä¶\nSearches for an element in an iterator, returning its ‚Ä¶\nSearches for an element in an iterator, returning its ‚Ä¶\nSearches for an element in an iterator, returning its ‚Ä¶\nSearches for an element in an iterator, returning its ‚Ä¶\nSearches for an element in an iterator, returning its ‚Ä¶\nReturn the position of the maximum element in the iterator.\nReturn the position of the maximum element in the iterator.\nReturn the position of the maximum element in the ‚Ä¶\nReturn the position of the maximum element in the ‚Ä¶\nReturn the position of the maximum element in the ‚Ä¶\nReturn the position of the maximum element in the ‚Ä¶\nReturn the position of the minimum element in the iterator.\nReturn the position of the minimum element in the iterator.\nReturn the position of the minimum element in the ‚Ä¶\nReturn the position of the minimum element in the ‚Ä¶\nReturn the position of the minimum element in the ‚Ä¶\nReturn the position of the minimum element in the ‚Ä¶\nReturn the positions of the minimum and maximum elements in\nReturn the positions of the minimum and maximum elements in\nReturn the postions of the minimum and maximum elements of ‚Ä¶\nReturn the postions of the minimum and maximum elements of ‚Ä¶\nReturn the postions of the minimum and maximum elements of ‚Ä¶\nReturn the postions of the minimum and maximum elements of ‚Ä¶\nReturn an iterator adaptor that yields the indices of all ‚Ä¶\nReturn an iterator adaptor that yields the indices of all ‚Ä¶\nReturn an iterator that iterates through the powerset of ‚Ä¶\nReturn an iterator that iterates through the powerset of ‚Ä¶\n‚ÄúLift‚Äù a function of the values of the current ‚Ä¶\n‚ÄúLift‚Äù a function of the values of the current ‚Ä¶\nTakes an iterator and generates <code>Self</code> from the elements by ‚Ä¶\nIterates over the entire iterator, multiplying all the ‚Ä¶\nIterates over the entire iterator, multiplying all the ‚Ä¶\nIterates over the entire iterator, multiplying all the ‚Ä¶\nIterates over the entire iterator, multiplying all the ‚Ä¶\nIterates over the entire iterator, multiplying all the ‚Ä¶\nIterates over the entire iterator, multiplying all the ‚Ä¶\nIterates over the entire iterator, multiplying all the ‚Ä¶\nIterates over the entire iterator, multiplying all the ‚Ä¶\nIterates over the entire iterator, multiplying all the ‚Ä¶\nIterates over the entire iterator, multiplying all the ‚Ä¶\nIterates over the entire iterator, multiplying all the ‚Ä¶\nIterates over the entire iterator, multiplying all the ‚Ä¶\nIterates over the entire iterator, multiplying all the ‚Ä¶\nIterates over the entire iterator, multiplying all the ‚Ä¶\nIterate over the entire iterator and multiply all the ‚Ä¶\nIterate over the entire iterator and multiply all the ‚Ä¶\nReduces the elements to a single one, by repeatedly ‚Ä¶\nReduces the elements to a single one, by repeatedly ‚Ä¶\nReduces the elements to a single one, by repeatedly ‚Ä¶\nReduces the elements to a single one, by repeatedly ‚Ä¶\nReduces the elements to a single one, by repeatedly ‚Ä¶\nReduces the elements to a single one, by repeatedly ‚Ä¶\nReduces the elements to a single one, by repeatedly ‚Ä¶\nReduces the elements to a single one, by repeatedly ‚Ä¶\nReduces the elements to a single one, by repeatedly ‚Ä¶\nReduces the elements to a single one, by repeatedly ‚Ä¶\nReduces the elements to a single one, by repeatedly ‚Ä¶\nReduces the elements to a single one, by repeatedly ‚Ä¶\nReduces the elements to a single one, by repeatedly ‚Ä¶\nReduces the elements to a single one, by repeatedly ‚Ä¶\nReverses an iterator‚Äôs direction.\nReverses an iterator‚Äôs direction.\nReverses an iterator‚Äôs direction.\nReverses an iterator‚Äôs direction.\nReverses an iterator‚Äôs direction.\nReverses an iterator‚Äôs direction.\nReverses an iterator‚Äôs direction.\nReverses an iterator‚Äôs direction.\nReverses an iterator‚Äôs direction.\nReverses an iterator‚Äôs direction.\nReverses an iterator‚Äôs direction.\nReverses an iterator‚Äôs direction.\nReverses an iterator‚Äôs direction.\nReverses an iterator‚Äôs direction.\nSearches for an element of an iterator from the back that ‚Ä¶\nSearches for an element of an iterator from the back that ‚Ä¶\nSearches for an element of an iterator from the back that ‚Ä¶\nSearches for an element of an iterator from the back that ‚Ä¶\nSearches for an element of an iterator from the back that ‚Ä¶\nSearches for an element of an iterator from the back that ‚Ä¶\nSearches for an element of an iterator from the back that ‚Ä¶\nSearches for an element of an iterator from the back that ‚Ä¶\nSearches for an element of an iterator from the back that ‚Ä¶\nSearches for an element of an iterator from the back that ‚Ä¶\nSearches for an element of an iterator from the back that ‚Ä¶\nSearches for an element of an iterator from the back that ‚Ä¶\nSearches for an element of an iterator from the back that ‚Ä¶\nSearches for an element of an iterator from the back that ‚Ä¶\nAn iterator method that reduces the iterator‚Äôs elements ‚Ä¶\nAn iterator method that reduces the iterator‚Äôs elements ‚Ä¶\nAn iterator method that reduces the iterator‚Äôs elements ‚Ä¶\nAn iterator method that reduces the iterator‚Äôs elements ‚Ä¶\nAn iterator method that reduces the iterator‚Äôs elements ‚Ä¶\nAn iterator method that reduces the iterator‚Äôs elements ‚Ä¶\nAn iterator method that reduces the iterator‚Äôs elements ‚Ä¶\nAn iterator method that reduces the iterator‚Äôs elements ‚Ä¶\nAn iterator method that reduces the iterator‚Äôs elements ‚Ä¶\nAn iterator method that reduces the iterator‚Äôs elements ‚Ä¶\nAn iterator method that reduces the iterator‚Äôs elements ‚Ä¶\nAn iterator method that reduces the iterator‚Äôs elements ‚Ä¶\nAn iterator method that reduces the iterator‚Äôs elements ‚Ä¶\nAn iterator method that reduces the iterator‚Äôs elements ‚Ä¶\nSearches for an element in an iterator from the right, ‚Ä¶\nSearches for an element in an iterator from the right, ‚Ä¶\nSearches for an element in an iterator from the right, ‚Ä¶\nSearches for an element in an iterator from the right, ‚Ä¶\nSearches for an element in an iterator from the right, ‚Ä¶\nSearches for an element in an iterator from the right, ‚Ä¶\nSearches for an element in an iterator from the right, ‚Ä¶\nSearches for an element in an iterator from the right, ‚Ä¶\nSearches for an element in an iterator from the right, ‚Ä¶\nSearches for an element in an iterator from the right, ‚Ä¶\nSearches for an element in an iterator from the right, ‚Ä¶\nSearches for an element in an iterator from the right, ‚Ä¶\nSearches for an element in an iterator from the right, ‚Ä¶\nSearches for an element in an iterator from the right, ‚Ä¶\nAn iterator adapter which, like <code>fold</code>, holds internal ‚Ä¶\nAn iterator adapter which, like <code>fold</code>, holds internal ‚Ä¶\nAn iterator adapter which, like <code>fold</code>, holds internal ‚Ä¶\nAn iterator adapter which, like <code>fold</code>, holds internal ‚Ä¶\nAn iterator adapter which, like <code>fold</code>, holds internal ‚Ä¶\nAn iterator adapter which, like <code>fold</code>, holds internal ‚Ä¶\nAn iterator adapter which, like <code>fold</code>, holds internal ‚Ä¶\nAn iterator adapter which, like <code>fold</code>, holds internal ‚Ä¶\nAn iterator adapter which, like <code>fold</code>, holds internal ‚Ä¶\nAn iterator adapter which, like <code>fold</code>, holds internal ‚Ä¶\nAn iterator adapter which, like <code>fold</code>, holds internal ‚Ä¶\nAn iterator adapter which, like <code>fold</code>, holds internal ‚Ä¶\nAn iterator adapter which, like <code>fold</code>, holds internal ‚Ä¶\nAn iterator adapter which, like <code>fold</code>, holds internal ‚Ä¶\nAssign to each reference in <code>self</code> from the <code>from</code> iterator, ‚Ä¶\nAssign to each reference in <code>self</code> from the <code>from</code> iterator, ‚Ä¶\nReturns the bounds on the remaining length of the iterator.\nReturns the bounds on the remaining length of the iterator.\nReturns the bounds on the remaining length of the iterator.\nReturns the bounds on the remaining length of the iterator.\nReturns the bounds on the remaining length of the iterator.\nReturns the bounds on the remaining length of the iterator.\nReturns the bounds on the remaining length of the iterator.\nReturns the bounds on the remaining length of the iterator.\nReturns the bounds on the remaining length of the iterator.\nReturns the bounds on the remaining length of the iterator.\nReturns the bounds on the remaining length of the iterator.\nReturns the bounds on the remaining length of the iterator.\nReturns the bounds on the remaining length of the iterator.\nReturns the bounds on the remaining length of the iterator.\nCreates an iterator that skips the first <code>n</code> elements.\nCreates an iterator that skips the first <code>n</code> elements.\nCreates an iterator that skips the first <code>n</code> elements.\nCreates an iterator that skips the first <code>n</code> elements.\nCreates an iterator that skips the first <code>n</code> elements.\nCreates an iterator that skips the first <code>n</code> elements.\nCreates an iterator that skips the first <code>n</code> elements.\nCreates an iterator that skips the first <code>n</code> elements.\nCreates an iterator that skips the first <code>n</code> elements.\nCreates an iterator that skips the first <code>n</code> elements.\nCreates an iterator that skips the first <code>n</code> elements.\nCreates an iterator that skips the first <code>n</code> elements.\nCreates an iterator that skips the first <code>n</code> elements.\nCreates an iterator that skips the first <code>n</code> elements.\nCreates an iterator that <code>skip</code>s elements based on a ‚Ä¶\nCreates an iterator that <code>skip</code>s elements based on a ‚Ä¶\nCreates an iterator that <code>skip</code>s elements based on a ‚Ä¶\nCreates an iterator that <code>skip</code>s elements based on a ‚Ä¶\nCreates an iterator that <code>skip</code>s elements based on a ‚Ä¶\nCreates an iterator that <code>skip</code>s elements based on a ‚Ä¶\nCreates an iterator that <code>skip</code>s elements based on a ‚Ä¶\nCreates an iterator that <code>skip</code>s elements based on a ‚Ä¶\nCreates an iterator that <code>skip</code>s elements based on a ‚Ä¶\nCreates an iterator that <code>skip</code>s elements based on a ‚Ä¶\nCreates an iterator that <code>skip</code>s elements based on a ‚Ä¶\nCreates an iterator that <code>skip</code>s elements based on a ‚Ä¶\nCreates an iterator that <code>skip</code>s elements based on a ‚Ä¶\nCreates an iterator that <code>skip</code>s elements based on a ‚Ä¶\nSort all iterator elements into a new iterator in ‚Ä¶\nSort all iterator elements into a new iterator in ‚Ä¶\nSort all iterator elements into a new iterator in ‚Ä¶\nSort all iterator elements into a new iterator in ‚Ä¶\nSort all iterator elements into a new iterator in ‚Ä¶\nSort all iterator elements into a new iterator in ‚Ä¶\nSort all iterator elements into a new iterator in ‚Ä¶\nSort all iterator elements into a new iterator in ‚Ä¶\nSort all iterator elements into a new iterator in ‚Ä¶\nSort all iterator elements into a new iterator in ‚Ä¶\nSort all iterator elements into a new iterator in ‚Ä¶\nSort all iterator elements into a new iterator in ‚Ä¶\nSort all iterator elements into a new iterator in ‚Ä¶\nSort all iterator elements into a new iterator in ‚Ä¶\nCreates an iterator starting at the same point, but ‚Ä¶\nCreates an iterator starting at the same point, but ‚Ä¶\nCreates an iterator starting at the same point, but ‚Ä¶\nCreates an iterator starting at the same point, but ‚Ä¶\nCreates an iterator starting at the same point, but ‚Ä¶\nCreates an iterator starting at the same point, but ‚Ä¶\nCreates an iterator starting at the same point, but ‚Ä¶\nCreates an iterator starting at the same point, but ‚Ä¶\nCreates an iterator starting at the same point, but ‚Ä¶\nCreates an iterator starting at the same point, but ‚Ä¶\nCreates an iterator starting at the same point, but ‚Ä¶\nCreates an iterator starting at the same point, but ‚Ä¶\nCreates an iterator starting at the same point, but ‚Ä¶\nCreates an iterator starting at the same point, but ‚Ä¶\nTakes an iterator and generates <code>Self</code> from the elements by ‚Ä¶\nSums the elements of an iterator.\nSums the elements of an iterator.\nSums the elements of an iterator.\nSums the elements of an iterator.\nSums the elements of an iterator.\nSums the elements of an iterator.\nSums the elements of an iterator.\nSums the elements of an iterator.\nSums the elements of an iterator.\nSums the elements of an iterator.\nSums the elements of an iterator.\nSums the elements of an iterator.\nSums the elements of an iterator.\nSums the elements of an iterator.\nIterate over the entire iterator and add all the elements.\nIterate over the entire iterator and add all the elements.\nConsumes the iterator and return an iterator of the last <code>n</code> ‚Ä¶\nConsumes the iterator and return an iterator of the last <code>n</code> ‚Ä¶\nCreates an iterator that yields the first <code>n</code> elements, or ‚Ä¶\nCreates an iterator that yields the first <code>n</code> elements, or ‚Ä¶\nCreates an iterator that yields the first <code>n</code> elements, or ‚Ä¶\nCreates an iterator that yields the first <code>n</code> elements, or ‚Ä¶\nCreates an iterator that yields the first <code>n</code> elements, or ‚Ä¶\nCreates an iterator that yields the first <code>n</code> elements, or ‚Ä¶\nCreates an iterator that yields the first <code>n</code> elements, or ‚Ä¶\nCreates an iterator that yields the first <code>n</code> elements, or ‚Ä¶\nCreates an iterator that yields the first <code>n</code> elements, or ‚Ä¶\nCreates an iterator that yields the first <code>n</code> elements, or ‚Ä¶\nCreates an iterator that yields the first <code>n</code> elements, or ‚Ä¶\nCreates an iterator that yields the first <code>n</code> elements, or ‚Ä¶\nCreates an iterator that yields the first <code>n</code> elements, or ‚Ä¶\nCreates an iterator that yields the first <code>n</code> elements, or ‚Ä¶\nCreates an iterator that yields elements based on a ‚Ä¶\nCreates an iterator that yields elements based on a ‚Ä¶\nCreates an iterator that yields elements based on a ‚Ä¶\nCreates an iterator that yields elements based on a ‚Ä¶\nCreates an iterator that yields elements based on a ‚Ä¶\nCreates an iterator that yields elements based on a ‚Ä¶\nCreates an iterator that yields elements based on a ‚Ä¶\nCreates an iterator that yields elements based on a ‚Ä¶\nCreates an iterator that yields elements based on a ‚Ä¶\nCreates an iterator that yields elements based on a ‚Ä¶\nCreates an iterator that yields elements based on a ‚Ä¶\nCreates an iterator that yields elements based on a ‚Ä¶\nCreates an iterator that yields elements based on a ‚Ä¶\nCreates an iterator that yields elements based on a ‚Ä¶\nReturns an iterator adaptor that consumes elements while ‚Ä¶\nReturns an iterator adaptor that consumes elements while ‚Ä¶\nReturn an iterator adaptor that borrows from a <code>Clone</code>-able ‚Ä¶\nReturn an iterator adaptor that borrows from a <code>Clone</code>-able ‚Ä¶\nSplit into an iterator pair that both yield all elements ‚Ä¶\nSplit into an iterator pair that both yield all elements ‚Ä¶\nSee <code>.tree_reduce()</code>.\nSee <code>.tree_reduce()</code>.\nAccumulate the elements in the iterator in a tree-like ‚Ä¶\nAccumulate the elements in the iterator in a tree-like ‚Ä¶\n<code>.try_collect()</code> is more convenient way of writing ‚Ä¶\n<code>.try_collect()</code> is more convenient way of writing ‚Ä¶\nFallibly transforms an iterator into a collection, short ‚Ä¶\nFallibly transforms an iterator into a collection, short ‚Ä¶\nFallibly transforms an iterator into a collection, short ‚Ä¶\nFallibly transforms an iterator into a collection, short ‚Ä¶\nFallibly transforms an iterator into a collection, short ‚Ä¶\nFallibly transforms an iterator into a collection, short ‚Ä¶\nFallibly transforms an iterator into a collection, short ‚Ä¶\nFallibly transforms an iterator into a collection, short ‚Ä¶\nFallibly transforms an iterator into a collection, short ‚Ä¶\nFallibly transforms an iterator into a collection, short ‚Ä¶\nFallibly transforms an iterator into a collection, short ‚Ä¶\nFallibly transforms an iterator into a collection, short ‚Ä¶\nFallibly transforms an iterator into a collection, short ‚Ä¶\nFallibly transforms an iterator into a collection, short ‚Ä¶\nApplies function to the elements of iterator and returns ‚Ä¶\nApplies function to the elements of iterator and returns ‚Ä¶\nApplies function to the elements of iterator and returns ‚Ä¶\nApplies function to the elements of iterator and returns ‚Ä¶\nApplies function to the elements of iterator and returns ‚Ä¶\nApplies function to the elements of iterator and returns ‚Ä¶\nApplies function to the elements of iterator and returns ‚Ä¶\nApplies function to the elements of iterator and returns ‚Ä¶\nApplies function to the elements of iterator and returns ‚Ä¶\nApplies function to the elements of iterator and returns ‚Ä¶\nApplies function to the elements of iterator and returns ‚Ä¶\nApplies function to the elements of iterator and returns ‚Ä¶\nApplies function to the elements of iterator and returns ‚Ä¶\nApplies function to the elements of iterator and returns ‚Ä¶\nAn iterator method that applies a function as long as it ‚Ä¶\nAn iterator method that applies a function as long as it ‚Ä¶\nAn iterator method that applies a function as long as it ‚Ä¶\nAn iterator method that applies a function as long as it ‚Ä¶\nAn iterator method that applies a function as long as it ‚Ä¶\nAn iterator method that applies a function as long as it ‚Ä¶\nAn iterator method that applies a function as long as it ‚Ä¶\nAn iterator method that applies a function as long as it ‚Ä¶\nAn iterator method that applies a function as long as it ‚Ä¶\nAn iterator method that applies a function as long as it ‚Ä¶\nAn iterator method that applies a function as long as it ‚Ä¶\nAn iterator method that applies a function as long as it ‚Ä¶\nAn iterator method that applies a function as long as it ‚Ä¶\nAn iterator method that applies a function as long as it ‚Ä¶\nAn iterator method that applies a fallible function to ‚Ä¶\nAn iterator method that applies a fallible function to ‚Ä¶\nAn iterator method that applies a fallible function to ‚Ä¶\nAn iterator method that applies a fallible function to ‚Ä¶\nAn iterator method that applies a fallible function to ‚Ä¶\nAn iterator method that applies a fallible function to ‚Ä¶\nAn iterator method that applies a fallible function to ‚Ä¶\nAn iterator method that applies a fallible function to ‚Ä¶\nAn iterator method that applies a fallible function to ‚Ä¶\nAn iterator method that applies a fallible function to ‚Ä¶\nAn iterator method that applies a fallible function to ‚Ä¶\nAn iterator method that applies a fallible function to ‚Ä¶\nAn iterator method that applies a fallible function to ‚Ä¶\nAn iterator method that applies a fallible function to ‚Ä¶\nReturns the length of the iterator if one exists. ‚Ä¶\nReturns the length of the iterator if one exists. ‚Ä¶\nReduces the elements to a single one by repeatedly ‚Ä¶\nReduces the elements to a single one by repeatedly ‚Ä¶\nReduces the elements to a single one by repeatedly ‚Ä¶\nReduces the elements to a single one by repeatedly ‚Ä¶\nReduces the elements to a single one by repeatedly ‚Ä¶\nReduces the elements to a single one by repeatedly ‚Ä¶\nReduces the elements to a single one by repeatedly ‚Ä¶\nReduces the elements to a single one by repeatedly ‚Ä¶\nReduces the elements to a single one by repeatedly ‚Ä¶\nReduces the elements to a single one by repeatedly ‚Ä¶\nReduces the elements to a single one by repeatedly ‚Ä¶\nReduces the elements to a single one by repeatedly ‚Ä¶\nReduces the elements to a single one by repeatedly ‚Ä¶\nReduces the elements to a single one by repeatedly ‚Ä¶\nThis is the reverse version of <code>Iterator::try_fold()</code>: it ‚Ä¶\nThis is the reverse version of <code>Iterator::try_fold()</code>: it ‚Ä¶\nThis is the reverse version of <code>Iterator::try_fold()</code>: it ‚Ä¶\nThis is the reverse version of <code>Iterator::try_fold()</code>: it ‚Ä¶\nThis is the reverse version of <code>Iterator::try_fold()</code>: it ‚Ä¶\nThis is the reverse version of <code>Iterator::try_fold()</code>: it ‚Ä¶\nThis is the reverse version of <code>Iterator::try_fold()</code>: it ‚Ä¶\nThis is the reverse version of <code>Iterator::try_fold()</code>: it ‚Ä¶\nThis is the reverse version of <code>Iterator::try_fold()</code>: it ‚Ä¶\nThis is the reverse version of <code>Iterator::try_fold()</code>: it ‚Ä¶\nThis is the reverse version of <code>Iterator::try_fold()</code>: it ‚Ä¶\nThis is the reverse version of <code>Iterator::try_fold()</code>: it ‚Ä¶\nThis is the reverse version of <code>Iterator::try_fold()</code>: it ‚Ä¶\nThis is the reverse version of <code>Iterator::try_fold()</code>: it ‚Ä¶\nReturn an iterator adaptor that iterates over the ‚Ä¶\nReturn an iterator adaptor that iterates over the ‚Ä¶\nReturn an iterator over all contiguous windows producing ‚Ä¶\nReturn an iterator over all contiguous windows producing ‚Ä¶\nReturn an iterator that groups the items in tuples of a ‚Ä¶\nReturn an iterator that groups the items in tuples of a ‚Ä¶\nReturn an iterator adaptor that filters out elements that ‚Ä¶")