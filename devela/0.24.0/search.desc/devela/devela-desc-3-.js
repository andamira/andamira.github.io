searchState.loadedDescShard("devela", 3, "Calls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRaw transmutation to <code>u16</code>\nA by-value array iterator.\nThe error type returned when a conversion from a slice to …\nReturns the argument unchanged.\nCreates an array where each element is produced by calling …\nConverts a mutable reference to <code>T</code> into a mutable reference …\nConverts a reference to <code>T</code> into a reference to an array of …\nCalls <code>U::from(self)</code>.\nCreates an array of type <code>[T; N]</code> by repeatedly cloning a …\nCreates an array <code>[T; N]</code> where each fallible array element <code>T</code>…\nU+0006\nU+0026\nU+0027\nU+002A\nU+0008\nU+0007\nU+0018\nU+0041\nU+0042\nU+0043\nU+0044\nU+0045\nU+0046\nU+0047\nU+0048\nU+0049\nU+004A\nU+004B\nU+004C\nU+004D\nU+004E\nU+004F\nU+0050\nU+0051\nU+0052\nU+0053\nU+0054\nU+0055\nU+0056\nU+0057\nU+0058\nU+0059\nU+005A\nU+000D\nOne of the 128 Unicode characters from U+0000 through …\nU+0009\nU+005E\nU+003A\nU+002C\nU+0040\nU+0010\nU+007F\nU+0014\nU+0011\nU+0013\nU+0012\nU+0030\nU+0031\nU+0032\nU+0033\nU+0034\nU+0035\nU+0036\nU+0037\nU+0038\nU+0039\nU+0024\nU+0019\nU+0003\nU+0004\nU+0017\nU+0005\nU+003D\nU+001B\nAn iterator over the escaped version of a byte.\nU+0021\nU+000C\nU+002E\nU+0060\nU+003E\nU+002D\nU+001C\nU+001F\nU+001D\nU+001E\nU+007B\nU+0028\nU+005B\nU+003C\nU+000A\nU+000B\nU+005F\nThe character with the highest ASCII code.\nThe character with the lowest ASCII code.\nU+0015\nU+0000 (The default variant)\nU+0023\nU+0025\nU+002B\nU+003F\nU+0022\nU+005C\nU+007D\nU+0029\nU+005D\nU+003B\nU+000F\nU+000E\nU+0061\nU+0062\nU+0063\nU+0064\nU+0065\nU+0066\nU+0067\nU+0068\nU+0069\nU+006A\nU+006B\nU+006C\nU+006D\nU+006E\nU+006F\nU+0070\nU+0071\nU+0072\nU+0073\nU+0074\nU+0075\nU+0076\nU+0077\nU+0078\nU+0079\nU+007A\nU+002F\nU+0020\nU+0001\nU+0002\nU+001A\nU+0016\nU+007E\nU+007C\nViews this ASCII character as a one-code-unit UTF-8 <code>str</code>.\nReturns the default value of <code>Null</code>\nWhen passed the <em>number</em> <code>0</code>, <code>1</code>, …, <code>9</code>, returns the <em>character</em> …\nWhen passed the <em>number</em> <code>0</code>, <code>1</code>, …, <code>9</code>, returns the <em>character</em> …\nChecks that two values are a case-insensitive match.\nReturns an iterator that produces an escaped version of a …\nReturns an iterator that produces an escaped version of a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates an ASCII character from the byte <code>b</code>, or returns <code>None</code>…\nCreates an ASCII character from the byte <code>b</code>, without …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the value is an alphabetic character:\nChecks if the value is an alphanumeric character:\nChecks if the value is a control character: 0x00 NUL ..= …\nChecks if the value is a decimal digit: 0x30 ‘0’ ..= …\nChecks if the value is a graphic character: 0x21 ‘!’ …\nChecks if the value is a hexadecimal digit:\nChecks if the value is a lowercase character: 0x61 ‘a’ …\nChecks if the value is an octal digit: 0x30 ‘0’ ..= …\nChecks if the value is a punctuation character:\nChecks if the value is an uppercase character: 0x41 ‘A’…\nChecks if the value is a whitespace character: 0x20 SPACE, …\nConverts this value to its lower case equivalent in-place.\nConverts this value to its upper case equivalent in-place.\nGets this ASCII character as a <code>char</code> Unicode Scalar Value.\nMakes a copy of the value in its lower case equivalent.\nGets this ASCII character as a byte.\nMakes a copy of the value in its upper case equivalent.\nAsserts that an expression matches the provided pattern.\nAsserts that an expression matches the provided pattern.\nA trait for dealing with asynchronous iterators.\nAn async iterator that was created from iterator.\nThe type of the resulting iterator\nConverts something into an async iterator\nThe type of items yielded by the async iterator.\nThe type of the item yielded by the iterator\nReturns the argument unchanged.\nConverts an iterator into an async iterator.\nCalls <code>U::from(self)</code>.\nConverts <code>self</code> into an async iterator\nAttempts to pull out the next value of this async …\nReturns the bounds on the remaining length of the async …\nThis macro uses forward-mode automatic differentiation to …\nThis macro uses reverse-mode automatic differentiation to …\nA trait for borrowing data.\nA trait for mutably borrowing data.\nImmutably borrows from an owned value.\nMutably borrows from an owned value.\nA wrapper for <code>&amp;[u8]</code> representing a human-readable string …\nCreates a <code>ByteStr</code> slice from anything that can be …\nAn error returned by <code>RefCell::try_borrow</code>.\nAn error returned by <code>RefCell::try_borrow_mut</code>.\nA mutable memory location.\nA value which is initialized on the first access.\nA cell which can nominally be written to only once.\nWraps a borrowed reference to a value in a <code>RefCell</code> box. A …\nA mutable memory location with dynamically checked borrow …\nA wrapper type for a mutably borrowed value from a …\n<code>UnsafeCell</code>, but <code>Sync</code>.\nThe core primitive for interior mutability in Rust.\nCreates an <code>SyncUnsafeCell</code>, with the <code>Default</code> value for T.\nCreates a new <code>SyncUnsafeCell&lt;T&gt;</code> containing the given value.\nReturns the argument unchanged.\nGets a mutable pointer to the wrapped value.\nReturns a mutable reference to the underlying data.\nCalls <code>U::from(self)</code>.\nUnwraps the value, consuming the cell.\nConstructs a new instance of <code>SyncUnsafeCell</code> which will …\nGets a mutable pointer to the wrapped value.\nThe error type returned when a conversion from <code>u32</code> to <code>char</code> …\nAn iterator that decodes UTF-16 encoded code points from …\nAn error that can be returned when decoding UTF-16 code …\nAn iterator that yields the literal escape code of a <code>char</code>.\nAn iterator that yields the literal escape code of a <code>char</code>.\nReturns an iterator that yields the hexadecimal Unicode …\nThe highest valid code point a <code>char</code> can have, <code>&#39;\\u{10FFFF}&#39;</code>…\nThe maximum number of two-byte units required to encode a …\nThe maximum number of bytes required to encode a <code>char</code> to …\nAn error which can be returned when parsing a char.\n<code>U+FFFD REPLACEMENT CHARACTER</code> (�) is used in Unicode to …\nReturns an iterator that yields the lowercase equivalent …\nReturns an iterator that yields the uppercase equivalent …\nThe error type returned when a checked char conversion …\nThe version of Unicode that the Unicode parts of <code>char</code> and …\nCreates an iterator over the UTF-16 encoded code points in …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts a digit in the given radix to a <code>char</code>. Use …\nConverts a <code>u32</code> to a <code>char</code>. Use <code>char::from_u32</code> instead.\nConverts a <code>u32</code> to a <code>char</code>, ignoring validity. Use …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the unpaired surrogate which caused this error.\nA common trait that allows explicit creation of a …\nDerive macro generating an impl of the trait <code>Clone</code>.\nA generalization of <code>Clone</code> to dynamically-sized types …\nTrait for objects whose <code>Clone</code> impl is lightweight (e.g. …\nReturns a duplicate of the value.\nPerforms copy-assignment from <code>self</code> to <code>dest</code>.\nTrait for comparisons corresponding to equivalence …\nDerive macro generating an impl of the trait <code>Eq</code>.\nAn ordering where a compared value is equal to another.\nAn ordering where a compared value is greater than another.\nAn ordering where a compared value is less than another.\nTrait for types that form a total order.\nDerive macro generating an impl of the trait <code>Ord</code>. The …\nAn <code>Ordering</code> is the result of a comparison between two …\nTrait for comparisons using the equality operator.\nDerive macro generating an impl of the trait <code>PartialEq</code>. …\nTrait for types that form a partial order.\nDerive macro generating an impl of the trait <code>PartialOrd</code>. …\nA helper struct for reverse ordering.\nThis method returns an <code>Ordering</code> between <code>self</code> and <code>other</code>.\nTests for <code>self</code> and <code>other</code> values to be equal, and is used …\nCompares and returns the maximum of two values.\nReturns the maximum of two values with respect to the …\nReturns the element that gives the maximum value from the …\nCompares and returns the minimum of two values.\nReturns the minimum of two values with respect to the …\nReturns the element that gives the minimum value from the …\nCompares and sorts two values, returning minimum and …\nReturns minimum and maximum values with respect to the …\nReturns minimum and maximum values with respect to the …\nThis method returns an ordering between <code>self</code> and <code>other</code> …\nThis is an identity function used as part of the …\nAttribute macro applied to a function to give it a …\nAttribute macro applied to a function to give it a …\nUsed to do a cheap mutable-to-mutable reference conversion.\nUsed to do a cheap reference-to-reference conversion.\nThe type returned in the event of a conversion error.\nThe type returned in the event of a conversion error.\nSupporting trait for inherent methods of <code>f32</code> and <code>f64</code> such …\nUsed to do value-to-value conversions while consuming the …\nThe error type for errors that can never happen.\nA value-to-value conversion that consumes the input value. …\nSimple and safe type conversions that may fail in a …\nAn attempted conversion that consumes <code>self</code>, which may or …\nConverts this type into a mutable reference of the …\nConverts this type into a shared reference of the (usually …\nConverts to this type from the input type.\nThe identity function.\nConverts this type into the (usually inferred) input type.\nPerforms the conversion.\nPerforms the conversion.\nA trait for giving a type a useful default value.\nDerive macro generating an impl of the trait <code>Default</code>.\nReturns the “default value” for a type.\n<code>Error</code> is a trait representing the basic expectations for …\n<code>Request</code> supports generic, type-driven access to data. Its …\nAn iterator over an <code>Error</code> and its sources.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nProvides a reference. The referee type must be bounded by …\nProvides a reference computed using a closure. The referee …\nProvides a value or other type with only static lifetimes.\nProvides a value or other type with only static lifetimes …\nRequests a reference of type <code>T</code> from the given <code>impl Error</code>.\nRequests a value of type <code>T</code> from the given <code>impl Error</code>.\nChecks if the <code>Request</code> would be satisfied if provided with a\nChecks if the <code>Request</code> would be satisfied if provided with a\nBasic mathematical constants.\nEuler’s number (e)\nThe Euler-Mascheroni constant (γ)\n1/π\n1/sqrt(2)\n1/sqrt(2π)\n1/sqrt(3)\n1/sqrt(π)\n2/π\n2/sqrt(π)\nπ/2\nπ/3\nπ/4\nπ/6\nπ/8\nln(10)\nln(2)\nlog10(2)\nlog10(e)\nlog2(10)\nlog2(e)\nThe golden ratio (φ)\nArchimedes’ constant (π)\nsqrt(2)\nsqrt(3)\nThe full circle constant (τ)\nBasic mathematical constants.\nEuler’s number (e)\nThe Euler-Mascheroni constant (γ)\n1/π\n1/sqrt(2)\n1/sqrt(2π)\n1/sqrt(3)\n1/sqrt(π)\n2/π\n2/sqrt(π)\nπ/2\nπ/3\nπ/4\nπ/6\nπ/8\nln(10)\nln(2)\nlog10(2)\nlog10(e)\nlog2(10)\nlog2(e)\nThe golden ratio (φ)\nArchimedes’ constant (π)\nsqrt(2)\nsqrt(3)\nThe full circle constant (τ)\nApproximate number of significant digits in base 10. Use …\nMachine epsilon value for <code>f32</code>. Use <code>f32::EPSILON</code> instead.\nInfinity (∞). Use <code>f32::INFINITY</code> instead.\nNumber of significant digits in base 2. Use …\nLargest finite <code>f32</code> value. Use <code>f32::MAX</code> instead.\nMaximum possible power of 10 exponent. Use <code>f32::MAX_10_EXP</code> …\nMaximum possible power of 2 exponent. Use <code>f32::MAX_EXP</code> …\nSmallest finite <code>f32</code> value. Use <code>f32::MIN</code> instead.\nMinimum possible normal power of 10 exponent. Use …\nOne greater than the minimum possible normal power of 2 …\nSmallest positive normal <code>f32</code> value. Use <code>f32::MIN_POSITIVE</code> …\nNot a Number (NaN). Use <code>f32::NAN</code> instead.\nNegative infinity (−∞). Use <code>f32::NEG_INFINITY</code> instead.\nThe radix or base of the internal representation of <code>f32</code>. …\nBasic mathematical constants.\nExperimental implementations of floating point functions …\nEuler’s number (e)\nThe Euler-Mascheroni constant (γ)\n1/π\n1/sqrt(2)\n1/sqrt(2π)\n1/sqrt(3)\n1/sqrt(π)\n2/π\n2/sqrt(π)\nπ/2\nπ/3\nπ/4\nπ/6\nπ/8\nln(10)\nln(2)\nlog10(2)\nlog10(e)\nlog2(10)\nlog2(e)\nThe golden ratio (φ)\nArchimedes’ constant (π)\nsqrt(2)\nsqrt(3)\nThe full circle constant (τ)\nExperimental version of <code>abs_sub</code> in <code>core</code>. See <code>f32::abs_sub</code> …\nExperimental version of <code>cbrt</code> in <code>core</code>. See <code>f32::cbrt</code> for …\nExperimental version of <code>ceil</code> in <code>core</code>. See <code>f32::ceil</code> for …\nExperimental version of <code>div_euclid</code> in <code>core</code>. See …\nExperimental version of <code>floor</code> in <code>core</code>. See <code>f32::floor</code> for …\nExperimental version of <code>fract</code> in <code>core</code>. See <code>f32::fract</code> for …\nExperimental version of <code>mul_add</code> in <code>core</code>. See <code>f32::mul_add</code> …\nExperimental version of <code>powi</code> in <code>core</code>. See <code>f32::powi</code> for …\nExperimental version of <code>rem_euclid</code> in <code>core</code>. See …\nExperimental version of <code>round</code> in <code>core</code>. See <code>f32::round</code> for …\nExperimental version of <code>round_ties_even</code> in <code>core</code>. See …\nExperimental version of <code>sqrt</code> in <code>core</code>. See <code>f32::sqrt</code> for …\nExperimental version of <code>trunc</code> in <code>core</code>. See <code>f32::trunc</code> for …\nApproximate number of significant digits in base 10. Use …\nMachine epsilon value for <code>f64</code>. Use <code>f64::EPSILON</code> instead.\nInfinity (∞). Use <code>f64::INFINITY</code> instead.\nNumber of significant digits in base 2. Use …\nLargest finite <code>f64</code> value. Use <code>f64::MAX</code> instead.\nMaximum possible power of 10 exponent. Use <code>f64::MAX_10_EXP</code> …\nMaximum possible power of 2 exponent. Use <code>f64::MAX_EXP</code> …\nSmallest finite <code>f64</code> value. Use <code>f64::MIN</code> instead.\nMinimum possible normal power of 10 exponent. Use …\nOne greater than the minimum possible normal power of 2 …\nSmallest positive normal <code>f64</code> value. Use <code>f64::MIN_POSITIVE</code> …\nNot a Number (NaN). Use <code>f64::NAN</code> instead.\nNegative infinity (−∞). Use <code>f64::NEG_INFINITY</code> instead.\nThe radix or base of the internal representation of <code>f64</code>. …\nBasic mathematical constants.\nExperimental implementations of floating point functions …\nEuler’s number (e)\nThe Euler-Mascheroni constant (γ)\n1/π\n1/sqrt(2)\n1/sqrt(2π)\n1/sqrt(3)\n1/sqrt(π)\n2/π\n2/sqrt(π)\nπ/2\nπ/3\nπ/4\nπ/6\nπ/8\nln(10)\nln(2)\nlog10(2)\nlog10(e)\nlog2(10)\nlog2(e)\nThe golden ratio (φ)\nArchimedes’ constant (π)\nsqrt(2)\nsqrt(3)\nThe full circle constant (τ)\nExperimental version of <code>abs_sub</code> in <code>core</code>. See <code>f64::abs_sub</code> …\nExperimental version of <code>cbrt</code> in <code>core</code>. See <code>f64::cbrt</code> for …\nExperimental version of <code>ceil</code> in <code>core</code>. See <code>f64::ceil</code> for …\nExperimental version of <code>div_euclid</code> in <code>core</code>. See …\nExperimental version of <code>floor</code> in <code>core</code>. See <code>f64::floor</code> for …\nExperimental version of <code>fract</code> in <code>core</code>. See <code>f64::fract</code> for …\nExperimental version of <code>mul_add</code> in <code>core</code>. See <code>f64::mul_add</code> …\nExperimental version of <code>powi</code> in <code>core</code>. See <code>f64::powi</code> for …\nExperimental version of <code>rem_euclid</code> in <code>core</code>. See …\nExperimental version of <code>round</code> in <code>core</code>. See <code>f64::round</code> for …\nExperimental version of <code>round_ties_even</code> in <code>core</code>. See …\nExperimental version of <code>sqrt</code> in <code>core</code>. See <code>f64::sqrt</code> for …\nExperimental version of <code>trunc</code> in <code>core</code>. See <code>f64::trunc</code> for …\nRepresentation of a borrowed C string.\nAn error indicating that no nul byte was present.\nAn error indicating that a nul byte was not in the …\nData provided contains an interior nul byte at byte …\nData provided is not nul terminated.\nTrait which permits the allowed types to be used with …\nA wrapper for a <code>va_list</code>\nx86_64 ABI implementation of a <code>va_list</code>.\nAdvance to the next arg.\nConverts a <code>VaListImpl</code> into a <code>VaList</code> that is …\nEquivalent to C’s <code>char</code> type.\nEquivalent to C’s <code>double</code> type.\nEquivalent to C’s <code>float</code> type.\nEquivalent to C’s <code>signed int</code> (<code>int</code>) type.\nEquivalent to C’s <code>signed long</code> (<code>long</code>) type.\nEquivalent to C’s <code>signed long long</code> (<code>long long</code>) type.\nEquivalent to C’s <code>ptrdiff_t</code> type, from <code>stddef.h</code> (or …\nEquivalent to C’s <code>signed char</code> type.\nEquivalent to C’s <code>signed short</code> (<code>short</code>) type.\nEquivalent to C’s <code>size_t</code> type, from <code>stddef.h</code> (or <code>cstddef</code> …\nEquivalent to C’s <code>ssize_t</code> (on POSIX) or <code>SSIZE_T</code> (on …\n<code>CStr</code> and its related types.\nEquivalent to C’s <code>unsigned char</code> type.\nEquivalent to C’s <code>unsigned int</code> type.\nEquivalent to C’s <code>unsigned long</code> type.\nEquivalent to C’s <code>unsigned long long</code> type.\nEquivalent to C’s <code>unsigned short</code> type.\nEquivalent to C’s <code>void</code> type when used as a pointer.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nC’s “variable arguments”\nCopies the <code>va_list</code> at the current location.\nThe position of the interior nul byte.\nAn iterator over the bytes of a <code>CStr</code>, without the nul …\nRepresentation of a borrowed C string.\nAn error indicating that no nul byte was present.\nAn error indicating that a nul byte was not in the …\nData provided contains an interior nul byte at byte …\nData provided is not nul terminated.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe position of the interior nul byte.\nTrait which permits the allowed types to be used with …\nA wrapper for a <code>va_list</code>\nx86_64 ABI implementation of a <code>va_list</code>.\nPossible alignments returned by <code>Formatter::align</code>\nThis structure represents a safely precompiled version of …\nMaximum number of digits in decimal base of the …\n<code>b</code> formatting.\nIndication that contents should be center-aligned.\n<code>?</code> formatting.\nDerive macro generating an impl of the trait <code>Debug</code>.\nSpecifies whether the <code>Debug</code> trait should use …\nA struct to help with <code>fmt::Debug</code> implementations.\nA struct to help with <code>fmt::Debug</code> implementations.\nA struct to help with <code>fmt::Debug</code> implementations.\nA struct to help with <code>fmt::Debug</code> implementations.\nA struct to help with <code>fmt::Debug</code> implementations.\nFormat trait for an empty format, <code>{}</code>.\nContains the error value\nThe error type which is returned from formatting a message …\nConfiguration for formatting.\nOptions for formatting.\nImplements <code>fmt::Debug</code> and <code>fmt::Display</code> using a function.\nIndication that contents should be left-aligned.\nUse lower-case hexadecimal integers for the <code>Debug</code> trait …\n<code>e</code> formatting.\n<code>x</code> formatting.\nRepresents the <code>-</code> flag.\nA buffer wrapper of which the internal size is based on …\nTrait used to describe the maximum number of digits in …\n<code>o</code> formatting.\nContains the success value\nRepresents the <code>+</code> flag.\n<code>p</code> formatting.\nThe type returned by formatter methods.\nIndication that contents should be right-aligned.\nThe signedness of a <code>Formatter</code> (or of a <code>FormattingOptions</code>).\nUse upper-case hexadecimal integers for the <code>Debug</code> trait …\n<code>E</code> formatting.\n<code>X</code> formatting.\nA trait for writing or formatting into Unicode-accepting …\nSets or removes the alignment.\nSets or unsets the <code>#</code> flag.\nReturns the length of the internal buffer.\nCreates a <code>Formatter</code> that writes its output to the given …\nSpecifies whether the <code>Debug</code> trait should use …\nSame as <code>FormattingOptions::new()</code>.\nSets the fill character.\nFormats the value using the given formatter.\nFormats the value using the given formatter.\nFormats the value using the given formatter.\nFormats the value using the given formatter.\nFormats the value using the given formatter.\nFormats the value using the given formatter.\nFormats the value using the given formatter.\nFormats the value using the given formatter.\nFormats the value using the given formatter.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a type whose <code>fmt::Debug</code> and <code>fmt::Display</code> impls are …\nReturns the current alignment.\nReturns the current <code>#</code> flag.\nReturns the current precision.\nReturns the current fill character.\nReturns the current precision.\nReturns the current sign (the <code>+</code> or the <code>-</code> flag).\nReturns the current <code>0</code> flag.\nReturns the current width.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInitializes internal buffer.\nConstruct a new <code>FormatterBuilder</code> with the supplied <code>Write</code> …\nSets or removes the precision.\nSets or removes the sign (the <code>+</code> or the <code>-</code> flag).\nSets or unsets the <code>0</code> flag.\nSets or removes the width.\nTakes an output stream and an <code>Arguments</code> struct that can be …\nWrites a string slice into this writer, returning whether …\nAsync version of Drop trait.\nA future represents an asynchronous computation, commonly …\nConversion into a <code>Future</code>.\nWhich kind of future are we turning this into?\nThe type of value produced on completion.\nThe output that the future will produce on completion.\nCreates a future which never resolves, representing a …\nA Future that wraps a function returning <code>Poll</code>.\nA future that is immediately ready with a value.\nAsync drop.\nExecutes the async destructor for this type.\nCreates a future from a value.\nPolls multiple futures simultaneously, returning a tuple …\nCreates a future which never resolves, representing a …\nAttempts to resolve the future to a final value, …\nCreates a future that wraps a function returning <code>Poll</code>.\nCreates a future that is immediately ready with a value.\nA trait for creating instances of <code>Hasher</code>.\nUsed to create a default <code>BuildHasher</code> instance for types …\nA hashable type.\nDerive macro generating an impl of the trait <code>Hash</code>.\nA trait for hashing an arbitrary stream of bytes.\nType of the hasher that will be created.\nAn implementation of SipHash 2-4.\nCreates a new hasher.\nReturns the hash value for the values written so far.\nReturns the argument unchanged.\nFeeds this value into the given <code>Hasher</code>.\nCalls <code>U::from(self)</code>.\nCreates a new <code>SipHasher</code> with the two initial keys set to 0.\nCreates a <code>SipHasher</code> that is keyed off the provided keys.\nWrites some data into this <code>Hasher</code>.\nMakes a <em>soundness</em> promise to the compiler that <code>cond</code> holds.\nAn identity function that <em><strong>hints</strong></em> to the compiler to be …\nHints to the compiler that given path is cold, i.e., …\nHints to the compiler that a branch condition is likely to …\nAn identity function that causes an <code>unused_must_use</code> …\nReturns either <code>true_val</code> or <code>false_val</code> depending on the …\nEmits a machine instruction to signal the processor that …\nHints to the compiler that a branch condition is unlikely …\nInforms the compiler that the site which is calling this …\nThe largest value that can be represented by this integer …\nThe smallest value that can be represented by this integer …\nThe largest value that can be represented by this integer …\nThe smallest value that can be represented by this integer …\nThe largest value that can be represented by this integer …\nThe smallest value that can be represented by this integer …\nThe largest value that can be represented by this integer …\nThe smallest value that can be represented by this integer …\nThe largest value that can be represented by this integer …\nThe smallest value that can be represented by this integer …\nA type for atomic ordering parameters for intrinsics. This …\nAborts the execution of the process.\nPerforms checked integer addition.\nLowers in MIR to <code>Rvalue::Aggregate</code> with …\nThe minimum alignment of a type.\nThe required alignment of the referenced value.\nCalculates the offset from a pointer, potentially wrapping.\nA guard for unsafe functions that cannot ever be executed …\nA guard for <code>std::mem::uninitialized</code>. This will statically …\nA guard for unsafe functions that cannot ever be executed …\nInforms the optimizer that a condition is always true. If …\nBitwise and with the current value, returning the previous …\nStores a value if the current value is the same as the <code>old</code> …\nStores a value if the current value is the same as the <code>old</code> …\nAn atomic fence.\nLoads the current value of the pointer. <code>T</code> must be an …\nMaximum with the current value using a signed comparison. <code>T</code>…\nMinimum with the current value using a signed comparison. <code>T</code>…\nBitwise nand with the current value, returning the …\nBitwise or with the current value, returning the previous …\nAn atomic fence for synchronization within a single thread.\nStores the value at the specified memory location. <code>T</code> must …\nMaximum with the current value using an unsigned …\nMinimum with the current value using an unsigned …\nAdds to the current value, returning the previous value. <code>T</code> …\nStores the value at the specified memory location, …\nBitwise xor with the current value, returning the previous …\nSubtract from the current value, returning the previous …\nReverses the bits in an integer type <code>T</code>.\nSee documentation of <code>std::hint::black_box</code> for details.\nExecutes a breakpoint trap, for inspection by a debugger.\nReverses the bytes in an integer type <code>T</code>.\nGets a reference to a static <code>Location</code> indicating where it …\nPerforms full-width multiplication and addition with a …\nRust’s “try catch” construct for unwinding. Invokes …\nReturns the smallest integer greater than or equal to an …\nReturns the smallest integer greater than or equal to an …\nReturns the smallest integer greater than or equal to an …\nReturns the smallest integer greater than or equal to an …\nHints to the compiler that current code path is cold.\nLexicographically compare <code>[left, left + bytes)</code> and …\nAllocates a block of memory at compile time. At runtime, …\nDeallocates a memory which allocated by …\nSelects which function to call depending on the context.\nCheck if the post-condition <code>cond</code> has been met.\nCheck if the pre-condition <code>cond</code> has been met.\nReturns whether we should perform contract-checking at …\nThis is an accidentally-stable alias to <code>ptr::copy</code>; use …\nThis is an accidentally-stable alias to …\nCopies the sign from <code>y</code> to <code>x</code> for <code>f128</code> values.\nCopies the sign from <code>y</code> to <code>x</code> for <code>f16</code> values.\nCopies the sign from <code>y</code> to <code>x</code> for <code>f32</code> values.\nCopies the sign from <code>y</code> to <code>x</code> for <code>f64</code> values.\nReturns the cosine of an <code>f128</code>.\nReturns the cosine of an <code>f16</code>.\nReturns the cosine of an <code>f32</code>.\nReturns the cosine of an <code>f64</code>.\nReturns the number of leading unset bits (zeroes) in an …\nLike <code>ctlz</code>, but extra-unsafe as it returns <code>undef</code> when given …\nReturns the number of bits set in an integer type <code>T</code>\nReturns the number of trailing unset bits (zeroes) in an …\nLike <code>cttz</code>, but extra-unsafe as it returns <code>undef</code> when given …\nReturns the value of the discriminant for the variant in …\nCombine two values which have no bits in common.\nPerforms an exact division, resulting in undefined …\nReturns 2 raised to the power of an <code>f128</code>.\nReturns 2 raised to the power of an <code>f16</code>.\nReturns 2 raised to the power of an <code>f32</code>.\nReturns 2 raised to the power of an <code>f64</code>.\nReturns the exponential of an <code>f128</code>.\nReturns the exponential of an <code>f16</code>.\nReturns the exponential of an <code>f32</code>.\nReturns the exponential of an <code>f64</code>.\nReturns the absolute value of an <code>f128</code>.\nReturns the absolute value of an <code>f16</code>.\nReturns the absolute value of an <code>f32</code>.\nReturns the absolute value of an <code>f64</code>.\nFloat addition that allows optimizations based on …\nFloat addition that allows optimizations based on …\nFloat division that allows optimizations based on …\nFloat division that allows optimizations based on …\nConverts with LLVM’s fptoui/fptosi, which may return …\nReturns the largest integer less than or equal to an <code>f128</code>.\nReturns the largest integer less than or equal to an <code>f16</code>.\nReturns the largest integer less than or equal to an <code>f32</code>.\nReturns the largest integer less than or equal to an <code>f64</code>.\nReturns <code>a * b + c</code> for <code>f128</code> values.\nReturns <code>a * b + c</code> for <code>f16</code> values.\nReturns <code>a * b + c</code> for <code>f32</code> values.\nReturns <code>a * b + c</code> for <code>f64</code> values.\nFloat multiplication that allows optimizations based on …\nFloat multiplication that allows optimizations based on …\nReturns <code>a * b + c</code> for <code>f128</code> values, non-deterministically …\nReturns <code>a * b + c</code> for <code>f16</code> values, non-deterministically …\nReturns <code>a * b + c</code> for <code>f32</code> values, non-deterministically …\nReturns <code>a * b + c</code> for <code>f64</code> values, non-deterministically …\nMoves a value out of scope without running drop glue.\nFloat remainder that allows optimizations based on …\nFloat remainder that allows optimizations based on …\nReturns the argument unchanged.\nFloat subtraction that allows optimizations based on …\nFloat subtraction that allows optimizations based on …\nCalls <code>U::from(self)</code>.\nReturns whether the argument’s value is statically known …\nHints to the compiler that branch condition is likely to …\nReturns the base 10 logarithm of an <code>f128</code>.\nReturns the base 10 logarithm of an <code>f16</code>.\nReturns the base 10 logarithm of an <code>f32</code>.\nReturns the base 10 logarithm of an <code>f64</code>.\nReturns the base 2 logarithm of an <code>f128</code>.\nReturns the base 2 logarithm of an <code>f16</code>.\nReturns the base 2 logarithm of an <code>f32</code>.\nReturns the base 2 logarithm of an <code>f64</code>.\nReturns the natural logarithm of an <code>f128</code>.\nReturns the natural logarithm of an <code>f16</code>.\nReturns the natural logarithm of an <code>f32</code>.\nReturns the natural logarithm of an <code>f64</code>.\nReturns the maximum (IEEE 754-2019 maximum) of two <code>f128</code> …\nReturns the maximum (IEEE 754-2019 maximum) of two <code>f16</code> …\nReturns the maximum (IEEE 754-2019 maximum) of two <code>f32</code> …\nReturns the maximum (IEEE 754-2019 maximum) of two <code>f64</code> …\nReturns the maximum (IEEE 754-2008 maxNum) of two <code>f128</code> …\nReturns the maximum (IEEE 754-2008 maxNum) of two <code>f16</code> …\nReturns the maximum (IEEE 754-2008 maxNum) of two <code>f32</code> …\nReturns the maximum (IEEE 754-2008 maxNum) of two <code>f64</code> …\nReturns the minimum (IEEE 754-2019 minimum) of two <code>f128</code> …\nReturns the minimum (IEEE 754-2019 minimum) of two <code>f16</code> …\nReturns the minimum (IEEE 754-2019 minimum) of two <code>f32</code> …\nReturns the minimum (IEEE 754-2019 minimum) of two <code>f64</code> …\nReturns the minimum (IEEE 754-2008 minNum) of two <code>f128</code> …\nReturns the minimum (IEEE 754-2008 minNum) of two <code>f16</code> …\nReturns the minimum (IEEE 754-2008 minNum) of two <code>f32</code> …\nReturns the minimum (IEEE 754-2008 minNum) of two <code>f64</code> …\nRustc internal tooling for hand-writing MIR.\nPerforms checked integer multiplication\nReturns <code>true</code> if the actual type given as <code>T</code> requires drop …\nEmits a <code>nontemporal</code> store, which gives a hint to the CPU …\nCalculates the offset from a pointer.\nRaises an <code>f128</code> to an <code>f128</code> power.\nRaises an <code>f16</code> to an <code>f16</code> power.\nRaises an <code>f32</code> to an <code>f32</code> power.\nRaises an <code>f64</code> to an <code>f64</code> power.\nRaises an <code>f128</code> to an integer power.\nRaises an <code>f16</code> to an integer power.\nRaises an <code>f32</code> to an integer power.\nRaises an <code>f64</code> to an integer power.\nThe <code>prefetch</code> intrinsic is a hint to the code generator to …\nThe <code>prefetch</code> intrinsic is a hint to the code generator to …\nThe <code>prefetch</code> intrinsic is a hint to the code generator to …\nThe <code>prefetch</code> intrinsic is a hint to the code generator to …\nSee documentation of <code>&lt;*const T&gt;::guaranteed_eq</code> for details.\nMasks out bits of the pointer according to a mask.\nLowers in MIR to <code>Rvalue::UnaryOp</code> with <code>UnOp::PtrMetadata</code>.\nSee documentation of <code>&lt;*const T&gt;::offset_from</code> for details.\nSee documentation of <code>&lt;*const T&gt;::offset_from_unsigned</code> for …\nDetermines whether the raw bytes of the two values are …\nThis is an implementation detail of <code>crate::ptr::read</code> and …\nPerforms rotate left.\nPerforms rotate right.\nReturns the nearest integer to an <code>f128</code>. Rounds half-way …\nReturns the nearest integer to an <code>f16</code>. Rounds half-way …\nReturns the nearest integer to an <code>f32</code>. Rounds half-way …\nReturns the nearest integer to an <code>f64</code>. Rounds half-way …\nReturns the nearest integer to an <code>f128</code>. Rounds half-way …\nReturns the nearest integer to an <code>f16</code>. Rounds half-way …\nReturns the nearest integer to an <code>f32</code>. Rounds half-way …\nReturns the nearest integer to an <code>f64</code>. Rounds half-way …\nMagic intrinsic that derives its meaning from attributes …\nComputes <code>a + b</code>, saturating at numeric bounds.\nComputes <code>a - b</code>, saturating at numeric bounds.\nReturns either <code>true_val</code> or <code>false_val</code> depending on …\nSIMD compiler intrinsics.\nReturns the sine of an <code>f128</code>.\nReturns the sine of an <code>f16</code>.\nReturns the sine of an <code>f32</code>.\nReturns the sine of an <code>f64</code>.\nThe size of a type in bytes.\nThe size of the referenced value in bytes.\nProjects to the <code>index</code>-th element of <code>slice_ptr</code>, as the same …\nReturns the square root of an <code>f128</code>\nReturns the square root of an <code>f16</code>\nReturns the square root of an <code>f32</code>\nReturns the square root of an <code>f64</code>\nPerforms checked integer subtraction\nDoes a three-way comparison between the two arguments, …\nReinterprets the bits of a value of one type as another …\nLike <code>transmute</code>, but even less checked at compile-time: …\nReturns the integer part of an <code>f128</code>.\nReturns the integer part of an <code>f16</code>.\nReturns the integer part of an <code>f32</code>.\nReturns the integer part of an <code>f64</code>.\nGets an identifier which is globally unique to the …\nTests (at compile-time) if two <code>crate::any::TypeId</code> …\nGets a static string slice containing the name of a type.\nNon-overlapping <em>typed</em> swap of a single value.\nReturns whether we should perform some UB-checking at …\nPerforms a volatile load from the <code>src</code> pointer The pointer …\nPerforms a volatile store to the <code>dst</code> pointer. The pointer …\nReturns the result of an unchecked addition, resulting in …\nPerforms an unchecked division, resulting in undefined …\nReturns the result of an unchecked multiplication, …\nReturns the remainder of an unchecked division, resulting …\nPerforms an unchecked left shift, resulting in undefined …\nPerforms an unchecked right shift, resulting in undefined …\nReturns the result of an unchecked subtraction, resulting …\nHints to the compiler that branch condition is likely to …\nInforms the optimizer that this point in the code is not …\nLoads an argument of type <code>T</code> from the <code>va_list</code> <code>ap</code> and …\nCopies the current location of arglist <code>src</code> to the arglist …\nDestroy the arglist <code>ap</code> after initialization with <code>va_start</code> …\nReturns the number of variants of the type <code>T</code> cast to a …\nEquivalent to the appropriate <code>llvm.memmove.p0i8.0i8.*</code> …\nEquivalent to the appropriate <code>llvm.memcpy.p0i8.0i8.*</code> …\nPerforms a volatile load from the <code>src</code> pointer.\nEquivalent to the appropriate <code>llvm.memset.p0i8.*</code> …\nPerforms a volatile store to the <code>dst</code> pointer.\nThe intrinsic will return the alignment stored in that …\nThe intrinsic will return the size stored in that vtable.\nReturns (a + b) mod 2N, where N is the width of T in bits.\nReturns (a * b) mod 2N, where N is the width of T in bits.\nReturns (a - b) mod 2N, where N is the width of T in bits.\nThis is an accidentally-stable alias to <code>ptr::write_bytes</code>; …\nThis is an implementation detail of <code>crate::ptr::write</code> and …\nSee <code>super::disjoint_bitor</code>; we just need the trait …\nUnwinding is just not possible given the ABI of this …\nType representing basic blocks.\nCall a function.\nEmits a <code>CastKind::PtrToPtr</code> cast.\nEmits a <code>CastKind::Transmute</code> cast.\nA basic block that lies on an unwind path.\nGets the discriminant of a place.\nDrop the contents of a place.\nAccess the field with the given index of some place.\nWe were already cleaning up for an ongoing unwind, and a …\nA non-cleanup basic block.\nCall a function.\nAn unwind action that continues execution in a given basic …\nAn unwind action that continues unwinding.\nA terminator that resumes the unwinding.\nAn unwind action that terminates the execution.\nThe reason we are terminating the process during unwinding.\nAn unwind action that triggers undefined behavior.\nAdds a variant projection with the given index to the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMacro for generating custom MIR.\nHelper macro that allows you to treat a value expression …\nAdds two simd vectors elementwise.\n“And“s vectors elementwise.\nCalculates the offset from a pointer vector elementwise, …\nNumerically casts a vector, elementwise.\nTruncates an integer vector to a bitmask.\nReverses bits of each element.\nSwaps bytes of each element.\nNumerically casts a vector, elementwise.\nCasts a vector of pointers.\nRounds up each element to the next highest integer-valued …\nCounts the leading zeros of each element.\nCounts the number of ones in each element.\nCounts the trailing zeros of each element.\nDivides <code>lhs</code> by <code>rhs</code> elementwise.\nTests elementwise equality of two vectors.\nExposes a vector of pointers as a vector of addresses.\nExtracts an element from a vector.\nExtracts an element from a vector.\nReturns absolute value of a vector, elementwise.\n<code>T</code> must be a vector of floats.\n<code>T</code> must be a vector of floats.\n<code>T</code> must be a vector of floats.\n<code>T</code> must be a vector of floats.\n<code>T</code> must be a vector of floats.\n<code>T</code> must be a vector of floats.\nRounds down each element to the next lowest integer-valued …\nComputes <code>(x*y) + z</code> for each element, but without any …\nReturns the maximum of two vectors, elementwise.\nReturns the minimum of two vectors, elementwise.\n<code>T</code> must be a vector of floats.\nTakes the square root of each element.\nFunnel Shifts vector left elementwise, with UB on overflow.\nFunnel Shifts vector right elementwise, with UB on …\nReads a vector of pointers.\nTests if <code>x</code> is greater than or equal to <code>y</code>, elementwise.\nTests if <code>x</code> is greater than <code>y</code>, elementwise.\nInserts an element into a vector, returning the updated …\nInserts an element into a vector, returning the updated …\nTests if <code>x</code> is less than or equal to <code>y</code>, elementwise.\nTests if <code>x</code> is less than <code>y</code>, elementwise.\nReads a vector of pointers.\nWrites to a vector of pointers.\nMultiplies two simd vectors elementwise.\nTests elementwise inequality equality of two vectors.\nNegates a vector elementwise.\n“Ors” vectors elementwise.\nAdds elements within a vector from left to right.\nAdds elements within a vector in arbitrary order. May also …\nChecks if all mask values are true.\nLogical “and“s all elements together.\nChecks if any mask value is true.\nReturns the maximum element of a vector.\nReturns the minimum element of a vector.\nMultiplies elements within a vector from left to right.\nMultiplies elements within a vector in arbitrary order. …\nLogical “ors” all elements together.\nLogical “exclusive ors” all elements together.\nComputes <code>(x*y) + z</code> for each element, non-deterministically …\nReturns remainder of two vectors elementwise.\nRounds each element to the closest integer-valued float. …\nRounds each element to the closest integer-valued float. …\nAdds two simd vectors elementwise, with saturation.\nSubtracts two simd vectors elementwise, with saturation.\nWrites to a vector of pointers.\nSelects elements from a mask.\nSelects elements from a bitmask.\nShifts vector left elementwise, with UB on overflow.\nShifts vector right elementwise, with UB on overflow.\nShuffles two vectors by const indices.\nSubtracts <code>rhs</code> from <code>lhs</code> elementwise.\nReturns the integer part of each element as an …\nCreates a vector of pointers from a vector of addresses.\n“Exclusive ors” vectors elementwise.\nA borrowed byte buffer which is incrementally filled and …\nA writeable view of the unfilled portion of a <code>BorrowedBuf</code>.\nAdvances the cursor by asserting that <code>n</code> bytes have been …\nAdvances the cursor by asserting that <code>n</code> bytes have been …\nAppends data to the cursor, advancing position within its …\nReturns a mutable reference to the whole cursor.\nReturns the total capacity of the buffer.\nReturns the available space in the cursor.\nClears the buffer, resetting the filled region to empty.\nInitializes all bytes in the cursor.\nExecutes the given command directly.\nReturns a shared reference to the filled portion of the …\nReturns a mutable reference to the filled portion of the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the length of the initialized part of the buffer.\nReturns a mutable reference to the initialized portion of …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns a shared reference to the filled portion of the …\nReturns a mutable reference to the filled portion of the …\nReturns the length of the filled part of the buffer.\nQueues the given command for further execution.\nReborrows this cursor by cloning it with a smaller …\nAsserts that the first <code>n</code> bytes of the buffer are …\nAsserts that the first <code>n</code> unfilled bytes of the cursor are …\nPerforms a set of actions within a synchronous update.\nReturns a cursor over the unfilled part of the buffer.\nRuns the given closure with a <code>BorrowedBuf</code> containing the …\nReturns the number of bytes written to the <code>BorrowedBuf</code> …\nThe largest value that can be represented by this integer …\nThe smallest value that can be represented by this integer …\nAn iterator over <code>N</code> elements of the iterator at a time.\nLike <code>Iterator::by_ref</code>, but requiring <code>Sized</code> so it can …\nAn iterator that links two iterators together, in a chain.\nAn iterator that clones the elements of an underlying …\nAn iterator that copies the elements of an underlying …\nAn iterator that repeats endlessly.\nAn iterator able to yield elements from both ends.\nAn iterator that yields nothing.\nAn iterator that yields the current count and the element …\nAn iterator that knows its exact length.\nExtend a collection with the contents of an iterator.\nAn iterator that filters the elements of <code>iter</code> with …\nAn iterator that uses <code>f</code> to both filter and map elements …\nAn iterator that maps each element to an iterator, and …\nAn iterator that flattens one level of nesting in an …\nAn iterator over the values yielded by an underlying …\nAn iterator where each iteration calls the provided …\nConversion from an <code>Iterator</code>.\nAn iterator that yields <code>None</code> forever after the underlying …\nAn iterator that always continues to yield <code>None</code> when …\nAn iterator that calls a function with a reference to each …\nAn iterator adapter that places a separator between all …\nAn iterator adapter that places a separator between all …\nWhich kind of iterator are we turning this into?\nConversion into an <code>Iterator</code>.\nThe type of the elements being iterated over.\nThe type of the elements being iterated over.\nA trait for dealing with iterators.\nAn iterator that maps the values of <code>iter</code> with <code>f</code>.\nAn iterator that only accepts elements while <code>predicate</code> …\nAn iterator over the mapped windows of another iterator.\nAn iterator that yields an element exactly once.\nAn iterator that yields a single element of type <code>A</code> by …\nAn iterator with a <code>peek()</code> that returns an optional …\nTrait to represent types that can be created by …\nAn iterator that repeats an element endlessly.\nAn iterator that repeats an element an exact number of …\nAn iterator that repeats elements of type <code>A</code> endlessly by …\nA double-ended iterator with the direction inverted.\nAn iterator to maintain state while iterating another …\nAn iterator that skips over <code>n</code> elements of <code>iter</code>.\nAn iterator that rejects elements while <code>predicate</code> returns …\nObjects that have a notion of <em>successor</em> and <em>predecessor</em> …\nAn iterator for stepping iterators by a custom amount.\nAn iterator which, starting from an initial item, computes …\nTrait to represent types that can be created by summing up …\nAn iterator that only iterates over the first <code>n</code> iterations …\nAn iterator that only accepts elements while <code>predicate</code> …\nAn iterator that reports an accurate length using …\nA type that upholds all invariants of <code>Step</code>.\nAn iterator that iterates two other iterators …\nReturns the value that would be obtained by taking the …\nReturns the value that would be obtained by taking the …\nReturns the value that would be obtained by taking the …\nReturns the value that would be obtained by taking the …\nReturns the value that would be obtained by taking the …\nConverts the arguments to iterators and links them …\nCreates an iterator that yields nothing.\nExtends a collection with the contents of an iterator.\nReturns the value that would be obtained by taking the …\nReturns the value that would be obtained by taking the …\nReturns the value that would be obtained by taking the …\nReturns the value that would be obtained by taking the …\nReturns the value that would be obtained by taking the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new iterator where each iteration calls the …\nCreates an iterator with the provided closure …\nCreates a value from an iterator.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates an iterator from a value.\nReturns an iterator over the remaining elements of the …\nCreates a new closure that returns an iterator where each …\nAdvances the iterator and returns the next value.\nRemoves and returns an element from the end of the …\nCreates an iterator that yields an element exactly once.\nCreates an iterator that lazily generates a value exactly …\nTakes an iterator and generates <code>Self</code> from the elements by …\nCreates a new iterator that endlessly repeats a single …\nCreates a new iterator that repeats a single element a …\nCreates a new iterator that repeats elements of type <code>A</code> …\nReturns the bounds on the number of <em>successor</em> steps …\nCreates an iterator which, starting from an initial item, …\nTakes an iterator and generates <code>Self</code> from the elements by …\nConverts the arguments to iterators and zips them.\nDerive macro that makes a smart pointer usable with trait …\nDerive macro generating an impl of the trait <code>ConstParamTy</code>.\nA marker for types which can be used as types of <code>const</code> …\nTypes whose values can be duplicated simply by copying …\nDerive macro generating an impl of the trait <code>Copy</code>.\nA marker for types that can be dropped.\nThe type of the discriminant, which must satisfy the trait …\nCompiler-internal trait used to indicate the type of enum …\nA common trait implemented by all function pointers.\nUsed to determine whether a type contains any <code>UnsafeCell</code> …\nTypes with a size that can be determined from pointer …\nZero-sized type used to mark a type parameter as …\nZero-sized type used to mark a lifetime as contravariant.\nZero-sized type used to mark a type parameter as covariant.\nZero-sized type used to mark a lifetime as covariant.\nZero-sized type used to mark things that “act like” …\nZero-sized type used to mark a type parameter as invariant.\nZero-sized type used to mark a lifetime as invariant.\nA marker type which does not implement <code>Unpin</code>.\nTypes that may or may not have a size.\nTypes that can be transferred across thread boundaries.\nTypes with a constant size known at compile time.\nRequired trait for constants used in pattern matches.\nTypes for which it is safe to share references between …\nA marker for tuple types.\nTypes that do not require any pinning guarantees.\nTypes that can be “unsized” to a dynamically-sized …\nA marker for types which can be used as types of <code>const</code> …\nDerive macro generating an impl of the trait <code>ConstParamTy</code>.\nA marker trait for phantom variance types.\nReturns the address of the function pointer.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstructs a new instance of the variance marker.\nConstructs a new instance of the variance marker.\nConstructs a new instance of the variance marker.\nConstructs a new instance of the variance marker.\nConstructs a new instance of the variance marker.\nConstructs a new instance of the variance marker.\nConstruct a variance marker; equivalent to <code>Default::default</code>…\nWith this, <code>TransmuteFrom</code> assumes only that you have …\nConfigurable proof assumptions of <code>TransmuteFrom</code>.\nOpaque type representing the discriminant of an enum.\nWrap a value and run a closure when dropped.\nWith this, <code>TransmuteFrom</code> assumes only that you have …\nA wrapper to inhibit the compiler from automatically …\nA wrapper type to construct uninitialized instances of <code>T</code>.\nWith this, <code>TransmuteFrom</code> does not assume you have ensured …\nWith this, <code>TransmuteFrom</code> assumes only that you have …\nMarks that <code>Src</code> is transmutable into <code>Self</code>.\nWith this, <code>TransmuteFrom</code> assumes only that you have …\nReturns the ABI-required minimum alignment of a type in …\nReturns the ABI-required minimum alignment of the type of …\nReturns the ABI-required minimum alignment of the type of …\nWhen <code>false</code>, <code>TransmuteFrom</code> is not implemented for …\nCombine the assumptions of <code>self</code> and <code>other_assumptions</code>.\nRemove <code>other_assumptions</code> the obligations of <code>self</code>; e.g.:\nBitwise-copies a value.\nReturns a value uniquely identifying the enum variant in <code>v</code>.\nDisposes of a value.\nTakes ownership and “forgets” about the value <strong>without </strong>…\nLike <code>forget</code>, but also accepts unsized values.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes the <code>DropGuard</code>, returning the wrapped value.\nWhen <code>false</code>, <code>TransmuteFrom</code> is not implemented for …\nReturns the ABI-required minimum alignment of a type in …\nReturns the ABI-required minimum alignment of the type of …\nReturns <code>true</code> if dropping values of type <code>T</code> matters.\nCreate a new instance of <code>DropGuard</code>.\nExpands to the offset in bytes of a field from the …\nMoves <code>src</code> into the referenced <code>dest</code>, returning the previous …\nWhen <code>false</code>, <code>TransmuteFrom</code> is not implemented for …\nReturns the size of a type in bytes.\nReturns the size of the pointed-to value in bytes.\nReturns the size of the pointed-to value in bytes.\nSwaps the values at two mutable locations, without …\nReplaces <code>dest</code> with the default value of <code>T</code>, returning the …\nReinterprets the bits of a value of one type as another …\nTransmutes a <code>Src</code> value into a <code>Self</code>.\nInterprets <code>src</code> as having type <code>&amp;Dst</code>, and then reads <code>src</code> …\nBypasses Rust’s normal memory-initialization checks by …\nWhen <code>false</code>, <code>TransmuteFrom</code> is not implemented for …\nReturns the number of variants in the enum type <code>T</code>.\nReturns the value of type <code>T</code> represented by the all-zero …\nAn error which can be returned when parsing an IP address …\nAdmin-Local scope.\nGlobal scope.\nInterface-Local scope.\nAn IP address, either IPv4 or IPv6.\nAn IPv4 address.\nAn IPv6 address.\nScope of an IPv6 multicast address as defined in IETF RFC …\nLink-Local scope.\nOrganization-Local scope.\nRealm-Local scope.\nSite-Local scope.\nAn internet socket address, either IPv4 or IPv6.\nAn IPv4 socket address.\nAn IPv6 socket address.\nAn IPv4 address.\nAn IPv4 socket address.\nAn IPv6 address.\nAn IPv6 socket address.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nValue being parsed is empty.\nA classification of floating point numbers.\nPositive or negative infinity, which often results from …\nEnum to store the various types of errors that can cause …\nContains an invalid digit in its context.\nNaN (not a number): this value results from calculations …\nInteger is too small to store in target integer type.\nA value that is known not to equal zero.\nAn <code>i128</code> that is known not to equal zero.\nAn <code>i16</code> that is known not to equal zero.\nAn <code>i32</code> that is known not to equal zero.\nAn <code>i64</code> that is known not to equal zero.\nAn <code>i8</code> that is known not to equal zero.\nAn <code>isize</code> that is known not to equal zero.\nA <code>u128</code> that is known not to equal zero.\nA <code>u16</code> that is known not to equal zero.\nA <code>u32</code> that is known not to equal zero.\nA <code>u64</code> that is known not to equal zero.\nA <code>u8</code> that is known not to equal zero.\nA <code>usize</code> that is known not to equal zero.\nA regular floating point number, not any of the …\nAn error which can be returned when parsing a float.\nAn error which can be returned when parsing an integer.\nInteger is too large to store in target integer type.\nProvides intentionally-saturating arithmetic on <code>T</code>.\n“Subnormal” or “denormal” floating point …\nThe error type returned when a checked integral type …\nProvides intentionally-wrapped arithmetic on <code>T</code>.\nValue was Zero\nPositive or negative zero.\nA marker trait for primitive types which can be zero.\nThe addition operator <code>+</code>.\nThe addition assignment operator <code>+=</code>.\nAn async-aware version of the <code>Fn</code> trait.\nAn async-aware version of the <code>FnMut</code> trait.\nAn async-aware version of the <code>FnOnce</code> trait.\nThe bitwise AND operator <code>&amp;</code>.\nThe bitwise AND assignment operator <code>&amp;=</code>.\nThe bitwise OR operator <code>|</code>.\nThe bitwise OR assignment operator <code>|=</code>.\nThe bitwise XOR operator <code>^</code>.\nThe bitwise XOR assignment operator <code>^=</code>.\nAn endpoint of a range of keys.\nExit the operation without running subsequent phases.\nFuture returned by <code>AsyncFnOnce::async_call_once</code>.\nFuture returned by <code>AsyncFnMut::async_call_mut</code> and …\nTrait that indicates that this is a pointer or a wrapper …\nThe coroutine completed with a return value.\nMove on to the next phase of the operation as normal.\nUsed to tell an operation whether it should exit early or …\nThe trait implemented by builtin coroutine types.\nThe result of a coroutine resumption.\nUsed for immutable dereferencing operations, like <code>*v</code>.\nUsed for mutable dereferencing operations, like in <code>*v = 1;</code>.\nPerma-unstable marker trait. Indicates that the type has a …\n<code>DispatchFromDyn</code> is used in the implementation of …\nThe division operator <code>/</code>.\nThe division assignment operator <code>/=</code>.\nCustom code within the destructor.\nThe range is bounded exclusively from above and is …\nThe range is bounded inclusively from above and is …\nAn exclusive bound.\nThe version of the call operator that takes an immutable …\nThe version of the call operator that takes a mutable …\nThe version of the call operator that takes a by-value …\nUsed to specify which residuals can be converted into …\nAn inclusive bound.\nUsed for indexing operations (<code>container[index]</code>) in …\nUsed for indexing operations (<code>container[index]</code>) in mutable …\nUsed to convert a range into start and end bounds, …\nThe multiplication operator <code>*</code>.\nThe multiplication assignment operator <code>*=</code>.\nThe unary negation operator <code>-</code>.\nThe unary logical negation operator <code>!</code>.\n<code>OneSidedRange</code> is implemented for built-in range types that …\nAn internal helper for <code>split_off</code> functions indicating …\nThe resulting type after applying the <code>+</code> operator.\nThe resulting type after applying the <code>-</code> operator.\nThe resulting type after applying the <code>-</code> operator.\nOutput type of the called closure’s future.\nThe resulting type after applying the <code>!</code> operator.\nThe returned type after the call operator is used.\nThe type of the value produced by <code>?</code> when <em>not</em> …\nThe resulting type after applying the <code>*</code> operator.\nThe resulting type after applying the <code>/</code> operator.\nThe resulting type after applying the <code>%</code> operator.\nThe resulting type after applying the <code>&amp;</code> operator.\nThe resulting type after applying the <code>|</code> operator.\nThe resulting type after applying the <code>^</code> operator.\nThe resulting type after applying the <code>&lt;&lt;</code> operator.\nThe resulting type after applying the <code>&gt;&gt;</code> operator.\nThe returned type after indexing.\nA (half-open) range bounded inclusively below and …\n<code>RangeBounds</code> is implemented by Rust’s built-in range …\nA range only bounded inclusively below (<code>start..</code>).\nAn unbounded range (<code>..</code>).\nA range bounded inclusively below and above (<code>start..=end</code>).\nA range only bounded exclusively above (<code>..end</code>).\nA range only bounded inclusively above (<code>..=end</code>).\nIndicates that a struct can be used as a method receiver. …\nThe remainder operator <code>%</code>.\nThe remainder assignment operator <code>%=</code>.\nAllows retrieving the canonical type implementing <code>Try</code> that …\nThe type of the value passed to <code>FromResidual::from_residual</code>\nThe type of value this coroutine returns.\nThe left shift operator <code>&lt;&lt;</code>. Note that because this trait …\nThe left shift assignment operator <code>&lt;&lt;=</code>.\nThe right shift operator <code>&gt;&gt;</code>. Note that because this trait …\nThe right shift assignment operator <code>&gt;&gt;=</code>.\nThe range is bounded inclusively from below and is …\nThe subtraction operator <code>-</code>.\nThe subtraction assignment operator <code>-=</code>.\nThe resulting type after dereferencing.\nThe target type on which the method may be called.\nThe <code>?</code> operator and <code>try {}</code> blocks.\nThe “return” type of this meta-function.\nAn infinite endpoint. Indicates that there is no bound in …\nImplement <code>FromResidual&lt;Yeet&lt;T&gt;&gt;</code> on your type to enable …\nThe type of value this coroutine yields.\nThe coroutine suspended with a value.\nPerforms the <code>+</code> operation.\nPerforms the <code>+=</code> operation.\nCall the <code>AsyncFn</code>, returning a future which may borrow from …\nCall the <code>AsyncFnMut</code>, returning a future which may borrow …\nCall the <code>AsyncFnOnce</code>, returning a future which may move …\nPerforms the <code>&amp;</code> operation.\nPerforms the <code>&amp;=</code> operation.\nPerforms the <code>|</code> operation.\nPerforms the <code>|=</code> operation.\nPerforms the <code>^</code> operation.\nPerforms the <code>^=</code> operation.\nAn internal-only helper function for <code>split_off</code> and …\nUsed in <code>?</code> to decide whether the operator should produce a …\nPerforms the call operation.\nPerforms the call operation.\nPerforms the call operation.\nDereferences the value.\nMutably dereferences the value.\nPerforms the <code>/</code> operation.\nPerforms the <code>/=</code> operation.\nExecutes the destructor for this type.\nThe upper bound of the range (exclusive).\nThe upper bound of the range (exclusive).\nThe upper bound of the range (inclusive)\nEnd index bound.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstructs the type from its <code>Output</code> type.\nConstructs the type from a compatible <code>Residual</code> type.\nPerforms the indexing (<code>container[index]</code>) operation.\nPerforms the mutable indexing (<code>container[index]</code>) operation.\nCompute the intersection of  <code>self</code> and <code>other</code>.\nCompute the intersection of  <code>self</code> and <code>other</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert this range into the start and end bounds. Returns …\nPerforms the <code>*</code> operation.\nPerforms the <code>*=</code> operation.\nPerforms the unary <code>-</code> operation.\nPerforms the unary <code>!</code> operation.\nPerforms the <code>%</code> operation.\nPerforms the <code>%=</code> operation.\nResumes the execution of this coroutine.\nPerforms the <code>&lt;&lt;</code> operation.\nPerforms the <code>&lt;&lt;=</code> operation.\nPerforms the <code>&gt;&gt;</code> operation.\nPerforms the <code>&gt;&gt;=</code> operation.\nThe lower bound of the range (inclusive).\nThe lower bound of the range (inclusive).\nStart index bound.\nPerforms the <code>-</code> operation.\nPerforms the <code>-=</code> operation.\nAn iterator over the value in <code>Some</code> variant of an <code>Option</code>.\nAn iterator over a reference to the <code>Some</code> variant of an …\nAn iterator over a mutable reference to the <code>Some</code> variant …\nNo value.\nThe <code>Option</code> type. See the module level documentation for …\nSome value of type <code>T</code>.\nA simple wrapper around a type to assert that it is unwind …\nA struct containing information about the location of a …\nA struct providing information about a panic.\nA message that was given to the <code>panic!()</code> macro.\nA marker trait representing types where a shared reference …\nA marker trait which represents “panic safe” types in …\nInvokes a closure, aborting if the closure unwinds.\nGets the formatted message, if it has no arguments to be …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThis function is used instead of panic_fmt in const eval.\nThe underlying implementation of core’s <code>panic!</code> macro …\nThe entry point for panicking with a formatted message.\nLike <code>panic</code>, but without unwinding and track_caller to …\nLike <code>panic_fmt</code>, but for non-unwinding panics.\nLike <code>panic_nounwind</code>, but also inhibits showing a backtrace.\nThis exists solely for the 2015 edition <code>panic!</code> macro to …\nThis is a panic called with a message that’s a result of …\nThis is a panic called with a message that’s a result of …\nThis is a panic called with a message that’s a result of …\nThis is a panic called with a message that’s a result of …\nThis is a panic called with a message that’s a result of …\nThis is a panic called with a message that’s a result of …\nThis is a panic called with a message that’s a result of …\nThis is a panic called with a message that’s a result of …\nThis is a panic called with a message that’s a result of …\nThis is a panic called with a message that’s a result of …\nThis is a panic called with a message that’s a result of …\nThis is a panic called with a message that’s a result of …\nThis is a panic called with a message that’s a result of …\nThis is a panic called with a message that’s a result of …\nThis is a panic called with a message that’s a result of …\nThis is a panic called with a message that’s a result of …\nThis is a panic called with a message that’s a result of …\nThis is a panic called with a message that’s a result of …\nThis is a panic called with a message that’s a result of …\nThis is a panic called with a message that’s a result of …\nThis is a panic called with a message that’s a result of …\nThis is a panic called with a message that’s a result of …\nTrait version of the inherent <code>MIN</code> assoc const.\nTrait version of the inherent <code>MIN</code> assoc const.\nA trait implemented for integer types and <code>char</code>. Useful in …\nA compile-time helper to subtract 1 for exclusive ranges.\nA pointer which pins its pointee in place.\nTrait that indicates that this is a pointer or a wrapper …\nThis type provides a way to entirely opt-out of typical …\nCreates an <code>UnsafePinned</code>, with the <code>Default</code> value for T.\nCreates a new <code>UnsafePinned&lt;T&gt;</code> containing the given value.\nReturns the argument unchanged.\nGet mutable access to the contents of a shared <code>UnsafePinned</code>…\nGet read-write access to the contents of a pinned …\nGet read-write access to the contents of an <code>UnsafePinned</code>.\nCalls <code>U::from(self)</code>.\nUnwraps the value, consuming this <code>UnsafePinned</code>.\nConstructs a new instance of <code>UnsafePinned</code> which will wrap …\nConstructs a Pin&lt;&amp;mut T&gt;, by pinning a <code>value: T</code> locally.\nGets an immutable pointer to the wrapped value.\nGets a mutable pointer to the wrapped value.\nThe 2015 version of the core prelude.\nThe 2018 version of the core prelude.\nThe 2021 version of the core prelude.\nThe 2024 version of the core prelude.\nThe first version of the core prelude.\nUsed to do a cheap mutable-to-mutable reference conversion.\nUsed to do a cheap reference-to-reference conversion.\nAn async-aware version of the <code>Fn</code> trait.\nAn async-aware version of the <code>FnMut</code> trait.\nAn async-aware version of the <code>FnOnce</code> trait.\nFuture returned by <code>AsyncFnOnce::async_call_once</code>.\nFuture returned by <code>AsyncFnMut::async_call_mut</code> and …\nA common trait that allows explicit creation of a …\nDerive macro generating an impl of the trait <code>Clone</code>.\nTypes whose values can be duplicated simply by copying …\nDerive macro generating an impl of the trait <code>Copy</code>.\nDerive macro generating an impl of the trait <code>Debug</code>.\nA trait for giving a type a useful default value.\nDerive macro generating an impl of the trait <code>Default</code>.\nAn iterator able to yield elements from both ends.\nCustom code within the destructor.\nTrait for comparisons corresponding to equivalence …\nDerive macro generating an impl of the trait <code>Eq</code>.\nContains the error value\nAn iterator that knows its exact length.\nExtend a collection with the contents of an iterator.\nThe version of the call operator that takes an immutable …\nThe version of the call operator that takes a mutable …\nThe version of the call operator that takes a by-value …\nUsed to do value-to-value conversions while consuming the …\nDerive macro generating an impl of the trait <code>Hash</code>.\nA value-to-value conversion that consumes the input value. …\nWhich kind of iterator are we turning this into?\nConversion into an <code>Iterator</code>.\nThe type of the elements being iterated over.\nThe type of the elements being iterated over.\nA trait for dealing with iterators.\nNo value.\nContains the success value\nThe <code>Option</code> type. See the module level documentation for …\nTrait for types that form a total order.\nDerive macro generating an impl of the trait <code>Ord</code>. The …\nOutput type of the called closure’s future.\nThe returned type after the call operator is used.\nTrait for comparisons using the equality operator.\nDerive macro generating an impl of the trait <code>PartialEq</code>. …\nTrait for types that form a partial order.\nDerive macro generating an impl of the trait <code>PartialOrd</code>. …\n<code>Result</code> is a type that represents either success (<code>Ok</code>) or …\nTypes that can be transferred across thread boundaries.\nTypes with a constant size known at compile time.\nSome value of type <code>T</code>.\nTypes for which it is safe to share references between …\nTypes that do not require any pinning guarantees.\nReturns the ABI-required minimum alignment of a type in …\nReturns the ABI-required minimum alignment of the type of …\nAttribute macro applied to a function to register it as a …\nConverts this type into a mutable reference of the …\nConverts this type into a shared reference of the (usually …\nAsserts that a boolean expression is <code>true</code> at runtime.\nCall the <code>AsyncFn</code>, returning a future which may borrow from …\nCall the <code>AsyncFnMut</code>, returning a future which may borrow …\nCall the <code>AsyncFnOnce</code>, returning a future which may move …\nAttribute macro applied to a function to turn it into a …\nPerforms the call operation.\nPerforms the call operation.\nPerforms the call operation.\nEvaluates boolean combinations of configuration flags at …\nKeeps the item it’s applied to if the passed path is …\nExpands all <code>#[cfg]</code> and <code>#[cfg_attr]</code> attributes in the code …\nReturns a duplicate of the value.\nThis method returns an <code>Ordering</code> between <code>self</code> and <code>other</code>.\nExpands to the column number at which it was invoked.\nCauses compilation to fail with the given error message …\nConcatenates literals into a static string slice.\nConcatenates literals into a byte slice.\nReturns the “default value” for a type.\nProvide a list of type aliases and other …\nUnstable placeholder for deref patterns.\nAttribute macro used to apply derive macros.\nAttribute macro used to apply derive macros for …\nDisposes of a value.\nExecutes the destructor for this type.\nInspects an environment variable at compile time.\nTests for <code>self</code> and <code>other</code> values to be equal, and is used …\nExtends a collection with the contents of an iterator.\nExpands to the file name in which it was invoked.\nConstructs parameters for the other string-formatting …\nSame as <code>format_args</code>, but adds a newline in the end.\nConverts to this type from the input type.\nAttribute macro applied to a static to register it as a …\nParses a file as an expression or an item according to the …\nIncludes a file as a reference to a byte array.\nIncludes a UTF-8 encoded file as a string.\nConverts this type into the (usually inferred) input type.\nCreates an iterator from a value.\nExpands to the line number on which it was invoked.\nPrints passed tokens into the standard output.\nExpands to a string that represents the current module …\nAdvances the iterator and returns the next value.\nRemoves and returns an element from the end of the …\nOptionally inspects an environment variable at compile …\nThis method returns an ordering between <code>self</code> and <code>other</code> …\nReturns the size of a type in bytes.\nReturns the size of the pointed-to value in bytes.\nStringifies its arguments.\nAttribute macro applied to a function to turn it into a …\nAn implementation detail of the <code>#[test]</code> and <code>#[bench]</code> …\nEnables or disables tracing functionality used for …\nUnstable placeholder for type ascription.\nUsed to do a cheap mutable-to-mutable reference conversion.\nUsed to do a cheap reference-to-reference conversion.\nAn async-aware version of the <code>Fn</code> trait.\nAn async-aware version of the <code>FnMut</code> trait.\nAn async-aware version of the <code>FnOnce</code> trait.\nFuture returned by <code>AsyncFnOnce::async_call_once</code>.\nFuture returned by <code>AsyncFnMut::async_call_mut</code> and …\nA common trait that allows explicit creation of a …\nDerive macro generating an impl of the trait <code>Clone</code>.\nTypes whose values can be duplicated simply by copying …\nDerive macro generating an impl of the trait <code>Copy</code>.\nDerive macro generating an impl of the trait <code>Debug</code>.\nA trait for giving a type a useful default value.\nDerive macro generating an impl of the trait <code>Default</code>.\nAn iterator able to yield elements from both ends.\nCustom code within the destructor.\nTrait for comparisons corresponding to equivalence …\nDerive macro generating an impl of the trait <code>Eq</code>.\nContains the error value\nAn iterator that knows its exact length.\nExtend a collection with the contents of an iterator.\nThe version of the call operator that takes an immutable …\nThe version of the call operator that takes a mutable …\nThe version of the call operator that takes a by-value …\nUsed to do value-to-value conversions while consuming the …\nDerive macro generating an impl of the trait <code>Hash</code>.\nA value-to-value conversion that consumes the input value. …\nWhich kind of iterator are we turning this into?\nConversion into an <code>Iterator</code>.\nThe type of the elements being iterated over.\nThe type of the elements being iterated over.\nA trait for dealing with iterators.\nNo value.\nContains the success value\nThe <code>Option</code> type. See the module level documentation for …\nTrait for types that form a total order.\nDerive macro generating an impl of the trait <code>Ord</code>. The …\nOutput type of the called closure’s future.\nThe returned type after the call operator is used.\nTrait for comparisons using the equality operator.\nDerive macro generating an impl of the trait <code>PartialEq</code>. …\nTrait for types that form a partial order.\nDerive macro generating an impl of the trait <code>PartialOrd</code>. …\n<code>Result</code> is a type that represents either success (<code>Ok</code>) or …\nTypes that can be transferred across thread boundaries.\nTypes with a constant size known at compile time.\nSome value of type <code>T</code>.\nTypes for which it is safe to share references between …\nTypes that do not require any pinning guarantees.\nReturns the ABI-required minimum alignment of a type in …\nReturns the ABI-required minimum alignment of the type of …\nAttribute macro applied to a function to register it as a …\nConverts this type into a mutable reference of the …\nConverts this type into a shared reference of the (usually …\nAsserts that a boolean expression is <code>true</code> at runtime.\nCall the <code>AsyncFn</code>, returning a future which may borrow from …\nCall the <code>AsyncFnMut</code>, returning a future which may borrow …\nCall the <code>AsyncFnOnce</code>, returning a future which may move …\nAttribute macro applied to a function to turn it into a …\nPerforms the call operation.\nPerforms the call operation.\nPerforms the call operation.\nEvaluates boolean combinations of configuration flags at …\nKeeps the item it’s applied to if the passed path is …\nExpands all <code>#[cfg]</code> and <code>#[cfg_attr]</code> attributes in the code …\nReturns a duplicate of the value.\nThis method returns an <code>Ordering</code> between <code>self</code> and <code>other</code>.\nExpands to the column number at which it was invoked.\nCauses compilation to fail with the given error message …\nConcatenates literals into a static string slice.\nConcatenates literals into a byte slice.\nReturns the “default value” for a type.\nProvide a list of type aliases and other …\nUnstable placeholder for deref patterns.\nAttribute macro used to apply derive macros.\nAttribute macro used to apply derive macros for …\nDisposes of a value.\nExecutes the destructor for this type.\nInspects an environment variable at compile time.\nTests for <code>self</code> and <code>other</code> values to be equal, and is used …\nExtends a collection with the contents of an iterator.\nExpands to the file name in which it was invoked.\nConstructs parameters for the other string-formatting …\nSame as <code>format_args</code>, but adds a newline in the end.\nConverts to this type from the input type.\nAttribute macro applied to a static to register it as a …\nParses a file as an expression or an item according to the …\nIncludes a file as a reference to a byte array.\nIncludes a UTF-8 encoded file as a string.\nConverts this type into the (usually inferred) input type.\nCreates an iterator from a value.\nExpands to the line number on which it was invoked.\nPrints passed tokens into the standard output.\nExpands to a string that represents the current module …\nAdvances the iterator and returns the next value.\nRemoves and returns an element from the end of the …\nOptionally inspects an environment variable at compile …\nThis method returns an ordering between <code>self</code> and <code>other</code> …\nReturns the size of a type in bytes.\nReturns the size of the pointed-to value in bytes.\nStringifies its arguments.\nAttribute macro applied to a function to turn it into a …\nAn implementation detail of the <code>#[test]</code> and <code>#[bench]</code> …\nEnables or disables tracing functionality used for …\nUnstable placeholder for type ascription.\nUsed to do a cheap mutable-to-mutable reference conversion.\nUsed to do a cheap reference-to-reference conversion.\nAn async-aware version of the <code>Fn</code> trait.\nAn async-aware version of the <code>FnMut</code> trait.\nAn async-aware version of the <code>FnOnce</code> trait.\nFuture returned by <code>AsyncFnOnce::async_call_once</code>.\nFuture returned by <code>AsyncFnMut::async_call_mut</code> and …\nA common trait that allows explicit creation of a …\nDerive macro generating an impl of the trait <code>Clone</code>.\nTypes whose values can be duplicated simply by copying …\nDerive macro generating an impl of the trait <code>Copy</code>.\nDerive macro generating an impl of the trait <code>Debug</code>.\nA trait for giving a type a useful default value.\nDerive macro generating an impl of the trait <code>Default</code>.\nAn iterator able to yield elements from both ends.\nCustom code within the destructor.\nTrait for comparisons corresponding to equivalence …\nDerive macro generating an impl of the trait <code>Eq</code>.\nContains the error value\nThe type returned in the event of a conversion error.\nThe type returned in the event of a conversion error.\nAn iterator that knows its exact length.\nExtend a collection with the contents of an iterator.\nThe version of the call operator that takes an immutable …\nThe version of the call operator that takes a mutable …\nThe version of the call operator that takes a by-value …\nUsed to do value-to-value conversions while consuming the …\nConversion from an <code>Iterator</code>.\nDerive macro generating an impl of the trait <code>Hash</code>.\nA value-to-value conversion that consumes the input value. …\nWhich kind of iterator are we turning this into?\nConversion into an <code>Iterator</code>.\nThe type of the elements being iterated over.\nThe type of the elements being iterated over.\nA trait for dealing with iterators.\nNo value.\nContains the success value\nThe <code>Option</code> type. See the module level documentation for …\nTrait for types that form a total order.\nDerive macro generating an impl of the trait <code>Ord</code>. The …\nOutput type of the called closure’s future.\nThe returned type after the call operator is used.\nTrait for comparisons using the equality operator.\nDerive macro generating an impl of the trait <code>PartialEq</code>. …\nTrait for types that form a partial order.\nDerive macro generating an impl of the trait <code>PartialOrd</code>. …\n<code>Result</code> is a type that represents either success (<code>Ok</code>) or …\nTypes that can be transferred across thread boundaries.\nTypes with a constant size known at compile time.\nSome value of type <code>T</code>.\nTypes for which it is safe to share references between …\nSimple and safe type conversions that may fail in a …\nAn attempted conversion that consumes <code>self</code>, which may or …\nTypes that do not require any pinning guarantees.\nReturns the ABI-required minimum alignment of a type in …\nReturns the ABI-required minimum alignment of the type of …\nAttribute macro applied to a function to register it as a …\nConverts this type into a mutable reference of the …\nConverts this type into a shared reference of the (usually …\nAsserts that a boolean expression is <code>true</code> at runtime.\nCall the <code>AsyncFn</code>, returning a future which may borrow from …\nCall the <code>AsyncFnMut</code>, returning a future which may borrow …\nCall the <code>AsyncFnOnce</code>, returning a future which may move …\nAttribute macro applied to a function to turn it into a …\nPerforms the call operation.\nPerforms the call operation.\nPerforms the call operation.\nEvaluates boolean combinations of configuration flags at …\nKeeps the item it’s applied to if the passed path is …\nExpands all <code>#[cfg]</code> and <code>#[cfg_attr]</code> attributes in the code …\nReturns a duplicate of the value.\nThis method returns an <code>Ordering</code> between <code>self</code> and <code>other</code>.\nExpands to the column number at which it was invoked.\nCauses compilation to fail with the given error message …\nConcatenates literals into a static string slice.\nConcatenates literals into a byte slice.\nReturns the “default value” for a type.\nProvide a list of type aliases and other …\nUnstable placeholder for deref patterns.\nAttribute macro used to apply derive macros.\nAttribute macro used to apply derive macros for …\nDisposes of a value.\nExecutes the destructor for this type.\nInspects an environment variable at compile time.\nTests for <code>self</code> and <code>other</code> values to be equal, and is used …\nExtends a collection with the contents of an iterator.\nExpands to the file name in which it was invoked.\nConstructs parameters for the other string-formatting …\nSame as <code>format_args</code>, but adds a newline in the end.\nConverts to this type from the input type.\nCreates a value from an iterator.\nAttribute macro applied to a static to register it as a …\nParses a file as an expression or an item according to the …\nIncludes a file as a reference to a byte array.\nIncludes a UTF-8 encoded file as a string.\nConverts this type into the (usually inferred) input type.\nCreates an iterator from a value.\nExpands to the line number on which it was invoked.\nPrints passed tokens into the standard output.\nExpands to a string that represents the current module …\nAdvances the iterator and returns the next value.\nRemoves and returns an element from the end of the …\nOptionally inspects an environment variable at compile …\nThis method returns an ordering between <code>self</code> and <code>other</code> …\nReturns the size of a type in bytes.\nReturns the size of the pointed-to value in bytes.\nStringifies its arguments.\nAttribute macro applied to a function to turn it into a …\nAn implementation detail of the <code>#[test]</code> and <code>#[bench]</code> …\nEnables or disables tracing functionality used for …\nPerforms the conversion.\nPerforms the conversion.\nUnstable placeholder for type ascription.\nUsed to do a cheap mutable-to-mutable reference conversion.\nUsed to do a cheap reference-to-reference conversion.\nAn async-aware version of the <code>Fn</code> trait.\nAn async-aware version of the <code>FnMut</code> trait.\nAn async-aware version of the <code>FnOnce</code> trait.\nFuture returned by <code>AsyncFnOnce::async_call_once</code>.\nFuture returned by <code>AsyncFnMut::async_call_mut</code> and …\nA common trait that allows explicit creation of a …\nDerive macro generating an impl of the trait <code>Clone</code>.\nTypes whose values can be duplicated simply by copying …\nDerive macro generating an impl of the trait <code>Copy</code>.\nDerive macro generating an impl of the trait <code>Debug</code>.\nA trait for giving a type a useful default value.\nDerive macro generating an impl of the trait <code>Default</code>.\nAn iterator able to yield elements from both ends.\nCustom code within the destructor.\nTrait for comparisons corresponding to equivalence …\nDerive macro generating an impl of the trait <code>Eq</code>.\nContains the error value\nThe type returned in the event of a conversion error.\nThe type returned in the event of a conversion error.\nAn iterator that knows its exact length.\nExtend a collection with the contents of an iterator.\nThe version of the call operator that takes an immutable …\nThe version of the call operator that takes a mutable …\nThe version of the call operator that takes a by-value …\nUsed to do value-to-value conversions while consuming the …\nConversion from an <code>Iterator</code>.\nA future represents an asynchronous computation, commonly …\nDerive macro generating an impl of the trait <code>Hash</code>.\nA value-to-value conversion that consumes the input value. …\nConversion into a <code>Future</code>.\nWhich kind of future are we turning this into?\nWhich kind of iterator are we turning this into?\nConversion into an <code>Iterator</code>.\nThe type of the elements being iterated over.\nThe type of the elements being iterated over.\nA trait for dealing with iterators.\nNo value.\nContains the success value\nThe <code>Option</code> type. See the module level documentation for …\nTrait for types that form a total order.\nDerive macro generating an impl of the trait <code>Ord</code>. The …\nOutput type of the called closure’s future.\nThe returned type after the call operator is used.\nThe type of value produced on completion.\nThe output that the future will produce on completion.\nTrait for comparisons using the equality operator.\nDerive macro generating an impl of the trait <code>PartialEq</code>. …\nTrait for types that form a partial order.\nDerive macro generating an impl of the trait <code>PartialOrd</code>. …\n<code>Result</code> is a type that represents either success (<code>Ok</code>) or …\nTypes that can be transferred across thread boundaries.\nTypes with a constant size known at compile time.\nSome value of type <code>T</code>.\nTypes for which it is safe to share references between …\nSimple and safe type conversions that may fail in a …\nAn attempted conversion that consumes <code>self</code>, which may or …\nTypes that do not require any pinning guarantees.\nReturns the ABI-required minimum alignment of a type in …\nReturns the ABI-required minimum alignment of the type of …\nAttribute macro applied to a function to register it as a …\nConverts this type into a mutable reference of the …\nConverts this type into a shared reference of the (usually …\nAsserts that a boolean expression is <code>true</code> at runtime.\nCall the <code>AsyncFn</code>, returning a future which may borrow from …\nCall the <code>AsyncFnMut</code>, returning a future which may borrow …\nCall the <code>AsyncFnOnce</code>, returning a future which may move …\nAttribute macro applied to a function to turn it into a …\nPerforms the call operation.\nPerforms the call operation.\nPerforms the call operation.\nEvaluates boolean combinations of configuration flags at …\nKeeps the item it’s applied to if the passed path is …\nExpands all <code>#[cfg]</code> and <code>#[cfg_attr]</code> attributes in the code …\nReturns a duplicate of the value.\nThis method returns an <code>Ordering</code> between <code>self</code> and <code>other</code>.\nExpands to the column number at which it was invoked.\nCauses compilation to fail with the given error message …\nConcatenates literals into a static string slice.\nConcatenates literals into a byte slice.\nReturns the “default value” for a type.\nProvide a list of type aliases and other …\nUnstable placeholder for deref patterns.\nAttribute macro used to apply derive macros.\nAttribute macro used to apply derive macros for …\nDisposes of a value.\nExecutes the destructor for this type.\nInspects an environment variable at compile time.\nTests for <code>self</code> and <code>other</code> values to be equal, and is used …\nExtends a collection with the contents of an iterator.\nExpands to the file name in which it was invoked.\nConstructs parameters for the other string-formatting …\nSame as <code>format_args</code>, but adds a newline in the end.\nConverts to this type from the input type.\nCreates a value from an iterator.\nAttribute macro applied to a static to register it as a …\nParses a file as an expression or an item according to the …\nIncludes a file as a reference to a byte array.\nIncludes a UTF-8 encoded file as a string.\nConverts this type into the (usually inferred) input type.\nCreates a future from a value.\nCreates an iterator from a value.\nExpands to the line number on which it was invoked.\nPrints passed tokens into the standard output.\nExpands to a string that represents the current module …\nAdvances the iterator and returns the next value.\nRemoves and returns an element from the end of the …\nOptionally inspects an environment variable at compile …\nThis method returns an ordering between <code>self</code> and <code>other</code> …\nAttempts to resolve the future to a final value, …\nReturns the size of a type in bytes.\nReturns the size of the pointed-to value in bytes.\nStringifies its arguments.\nAttribute macro applied to a function to turn it into a …\nAn implementation detail of the <code>#[test]</code> and <code>#[bench]</code> …\nEnables or disables tracing functionality used for …\nPerforms the conversion.\nPerforms the conversion.\nUnstable placeholder for type ascription.\nUsed to do a cheap mutable-to-mutable reference conversion.\nUsed to do a cheap reference-to-reference conversion.\nAn async-aware version of the <code>Fn</code> trait.\nAn async-aware version of the <code>FnMut</code> trait.\nAn async-aware version of the <code>FnOnce</code> trait.\nFuture returned by <code>AsyncFnOnce::async_call_once</code>.\nFuture returned by <code>AsyncFnMut::async_call_mut</code> and …\nA common trait that allows explicit creation of a …\nDerive macro generating an impl of the trait <code>Clone</code>.\nTypes whose values can be duplicated simply by copying …\nDerive macro generating an impl of the trait <code>Copy</code>.\nDerive macro generating an impl of the trait <code>Debug</code>.\nA trait for giving a type a useful default value.\nDerive macro generating an impl of the trait <code>Default</code>.\nAn iterator able to yield elements from both ends.\nCustom code within the destructor.\nTrait for comparisons corresponding to equivalence …\nDerive macro generating an impl of the trait <code>Eq</code>.\nContains the error value\nAn iterator that knows its exact length.\nExtend a collection with the contents of an iterator.\nThe version of the call operator that takes an immutable …\nThe version of the call operator that takes a mutable …\nThe version of the call operator that takes a by-value …\nUsed to do value-to-value conversions while consuming the …\nDerive macro generating an impl of the trait <code>Hash</code>.\nA value-to-value conversion that consumes the input value. …\nWhich kind of iterator are we turning this into?\nConversion into an <code>Iterator</code>.\nThe type of the elements being iterated over.\nThe type of the elements being iterated over.\nA trait for dealing with iterators.\nNo value.\nContains the success value\nThe <code>Option</code> type. See the module level documentation for …\nTrait for types that form a total order.\nDerive macro generating an impl of the trait <code>Ord</code>. The …\nOutput type of the called closure’s future.\nThe returned type after the call operator is used.\nTrait for comparisons using the equality operator.\nDerive macro generating an impl of the trait <code>PartialEq</code>. …\nTrait for types that form a partial order.\nDerive macro generating an impl of the trait <code>PartialOrd</code>. …\n<code>Result</code> is a type that represents either success (<code>Ok</code>) or …\nTypes that can be transferred across thread boundaries.\nTypes with a constant size known at compile time.\nSome value of type <code>T</code>.\nTypes for which it is safe to share references between …\nTypes that do not require any pinning guarantees.\nReturns the ABI-required minimum alignment of a type in …\nReturns the ABI-required minimum alignment of the type of …\nAttribute macro applied to a function to register it as a …\nConverts this type into a mutable reference of the …\nConverts this type into a shared reference of the (usually …\nAsserts that a boolean expression is <code>true</code> at runtime.\nCall the <code>AsyncFn</code>, returning a future which may borrow from …\nCall the <code>AsyncFnMut</code>, returning a future which may borrow …\nCall the <code>AsyncFnOnce</code>, returning a future which may move …\nAttribute macro applied to a function to turn it into a …\nPerforms the call operation.\nPerforms the call operation.\nPerforms the call operation.\nEvaluates boolean combinations of configuration flags at …\nKeeps the item it’s applied to if the passed path is …\nExpands all <code>#[cfg]</code> and <code>#[cfg_attr]</code> attributes in the code …\nReturns a duplicate of the value.\nThis method returns an <code>Ordering</code> between <code>self</code> and <code>other</code>.\nExpands to the column number at which it was invoked.\nCauses compilation to fail with the given error message …\nConcatenates literals into a static string slice.\nConcatenates literals into a byte slice.\nReturns the “default value” for a type.\nProvide a list of type aliases and other …\nUnstable placeholder for deref patterns.\nAttribute macro used to apply derive macros.\nAttribute macro used to apply derive macros for …\nDisposes of a value.\nExecutes the destructor for this type.\nInspects an environment variable at compile time.\nTests for <code>self</code> and <code>other</code> values to be equal, and is used …\nExtends a collection with the contents of an iterator.\nExpands to the file name in which it was invoked.\nConstructs parameters for the other string-formatting …\nSame as <code>format_args</code>, but adds a newline in the end.\nConverts to this type from the input type.\nAttribute macro applied to a static to register it as a …\nParses a file as an expression or an item according to the …\nIncludes a file as a reference to a byte array.\nIncludes a UTF-8 encoded file as a string.\nConverts this type into the (usually inferred) input type.\nCreates an iterator from a value.\nExpands to the line number on which it was invoked.\nPrints passed tokens into the standard output.\nExpands to a string that represents the current module …\nAdvances the iterator and returns the next value.\nRemoves and returns an element from the end of the …\nOptionally inspects an environment variable at compile …\nThis method returns an ordering between <code>self</code> and <code>other</code> …\nReturns the size of a type in bytes.\nReturns the size of the pointed-to value in bytes.\nStringifies its arguments.\nAttribute macro applied to a function to turn it into a …\nAn implementation detail of the <code>#[test]</code> and <code>#[bench]</code> …\nEnables or disables tracing functionality used for …\nUnstable placeholder for type ascription.\nA type storing a <code>usize</code> which is a power of two, and thus …\nThe metadata for a <code>Dyn = dyn SomeTrait</code> trait object type.\nThe smallest possible alignment, 1.\nThe type for metadata in pointers and references to <code>Self</code>.\n<code>*mut T</code> but non-zero and covariant.\nProvides the pointer metadata type of any pointed-to type.\nPointers to types implementing this trait alias are …\nCompares the <em>addresses</em> of the two pointers for equality, …\nCreates a <code>const</code> raw pointer to a place, without creating …\nCreates a <code>mut</code> raw pointer to a place, without creating an …\nReturns the alignment of the type associated with this …\nReturns the alignment as a NonZero&lt;usize&gt;.\nReturns the alignment as a <code>usize</code>.\nCopies <code>count * size_of::&lt;T&gt;()</code> bytes from <code>src</code> to <code>dst</code>. The …\nCopies <code>count * size_of::&lt;T&gt;()</code> bytes from <code>src</code> to <code>dst</code>. The …\nCreates a new pointer that is dangling, but non-null and …\nCreates a new pointer that is dangling, but non-null and …\nExecutes the destructor (if any) of the pointed-to value.\nCompares raw pointers for equality.\nCompares the <em>addresses</em> of the two function pointers for …\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts a mutable reference to a raw pointer.\nForms a (possibly-wide) raw pointer from a data pointer …\nPerforms the same functionality as <code>from_raw_parts</code>, except …\nConverts a reference to a raw pointer.\nHash a raw pointer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the size and alignment together as a <code>Layout</code>\nReturns the base-2 logarithm of the alignment.\nReturns a bit mask that can be used to match this …\nExtracts the metadata component of a pointer.\nCreates an <code>Alignment</code> from a <code>usize</code>, or returns <code>None</code> if it’…\nCreates an <code>Alignment</code> from a power-of-two <code>usize</code>.\nCreates a null raw pointer.\nCreates a null mutable raw pointer.\nReturns the alignment for a type.\nReads the value from <code>src</code> without moving it. This leaves the\nReads the value from <code>src</code> without moving it. This leaves the\nPerforms a volatile read of the value from <code>src</code> without …\nMoves <code>src</code> into the pointed <code>dst</code>, returning the previous <code>dst</code> …\nReturns the size of the type associated with this vtable.\nForms a raw slice from a pointer and a length.\nForms a raw mutable slice from a pointer and a length.\nSwaps the values at two mutable locations of the same …\nSwaps <code>count * size_of::&lt;T&gt;()</code> bytes between the two regions …\nConverts an address back to a pointer, picking up some …\nConverts an address back to a mutable pointer, picking up …\nCreates a pointer with the given address and no provenance.\nCreates a pointer with the given address and no provenance.\nOverwrites a memory location with the given value without …\nSets <code>count * size_of::&lt;T&gt;()</code> bytes of memory starting at <code>dst</code>…\nOverwrites a memory location with the given value without …\nPerforms a volatile write of a memory location with the …\nA trait representing a distribution of random values for a …\nA source of randomness.\nFills <code>bytes</code> with random bytes.\nSamples a random value from the distribution, using the …\nAn endpoint of a range of keys.\nAn exclusive bound.\nAn inclusive bound.\nUsed to convert a range into start and end bounds, …\nBy-value <code>Range</code> iterator.\nBy-value <code>RangeFrom</code> iterator.\nBy-value <code>RangeInclusive</code> iterator.\n<code>OneSidedRange</code> is implemented for built-in range types that …\nA (half-open) range bounded inclusively below and …\n<code>RangeBounds</code> is implemented by Rust’s built-in range …\nA range only bounded inclusively below (<code>start..</code>).\nAn unbounded range (<code>..</code>).\nA range bounded inclusively below and above (<code>start..=end</code>).\nA range only bounded exclusively above (<code>..end</code>).\nA range only bounded inclusively above (<code>..=end</code>).\nObjects that have a notion of <em>successor</em> and <em>predecessor</em> …\nAn infinite endpoint. Indicates that there is no bound in …\nReturns the value that would be obtained by taking the …\nAn internal-only helper function for <code>split_off</code> and …\nReturns <code>true</code> if <code>item</code> is contained in the range.\nReturns <code>true</code> if <code>item</code> is contained in the range.\nReturns <code>true</code> if <code>item</code> is contained in the range.\nThe upper bound of the range (exclusive).\nThe upper bound of the range (inclusive)\nThe upper bound of the range (exclusive).\nThe upper bound of the range (inclusive).\nEnd index bound.\nReturns the value that would be obtained by taking the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert this range into the start and end bounds. Returns …\nReturns <code>true</code> if the range contains no items.\nReturns <code>true</code> if the range contains no items.\nCreates an iterator over the elements within this range.\nCreates an iterator over the elements within this range.\nCreates an iterator over the elements within this range.\nLegacy range types\nReturns the remainder of the range being iterated over.\nReturns the remainder of the range being iterated over.\nReturns the remainder of the range being iterated over.\nThe lower bound of the range (inclusive).\nThe lower bound of the range (inclusive).\nThe lower bound of the range (inclusive).\nStart index bound.\nReturns the bounds on the number of <em>successor</em> steps …\nA (half-open) range bounded inclusively below and …\nA range only bounded inclusively below (<code>start..</code>).\nA range bounded inclusively below and above (<code>start..=end</code>).\nThe upper bound of the range (exclusive).\nThe lower bound of the range (inclusive).\nThe lower bound of the range (inclusive).\nContains the error value\nAn iterator over the value in a <code>Ok</code> variant of a <code>Result</code>.\nAn iterator over a reference to the <code>Ok</code> variant of a <code>Result</code>.\nAn iterator over a mutable reference to the <code>Ok</code> variant of …\nContains the success value\n<code>Result</code> is a type that represents either success (<code>Ok</code>) or …\nThe number of bytes in a bitmask with this many lanes.\nThis type, reinterpreted as bytes.\nMap from the elements of the input vector to the output …\nNumber of elements in this vector.\nSpecifies the number of lanes in a SIMD vector as a type.\nA SIMD vector mask for <code>N</code> elements of width specified by …\nThe mask element type corresponding to this element type.\nMarker trait for types that may be used as SIMD mask …\nA SIMD vector with the shape of <code>[T; N]</code> but the operations …\nSupporting trait for <code>Simd::cast</code>.  Typically doesn’t need …\nMarker trait for types that may be used as SIMD vector …\nStatically guarantees that a lane count is marked as …\nCreates a vector from the elements of another vector.\nConverts SIMD vectors to vectors of bytes\nReturns true if all elements are set, or false otherwise.\nReturns true if any element is set, or false otherwise.\nReturns an array reference containing the entire SIMD …\nReturns a mutable array reference containing the entire …\nConverts the mask to a mask of any other element size.\nTraits for comparing and ordering vectors.\nCreates a new vector from the elements of <code>first</code> and <code>second</code>.\nCreates a new mask from the elements of <code>first</code> and <code>second</code>.\nWrites a SIMD vector to the first <code>N</code> elements of a slice.\nDeinterleave two masks.\nDeinterleave two vectors.\nExtract a vector from another vector.\nExtract a vector from another vector.\nA SIMD vector with one element of type <code>f32</code>.\nA SIMD vector with 16 elements of type <code>f32</code>.\nA SIMD vector with two elements of type <code>f32</code>.\nA SIMD vector with 32 elements of type <code>f32</code>.\nA SIMD vector with four elements of type <code>f32</code>.\nA SIMD vector with 64 elements of type <code>f32</code>.\nA SIMD vector with eight elements of type <code>f32</code>.\nA SIMD vector with one element of type <code>f64</code>.\nA SIMD vector with 16 elements of type <code>f64</code>.\nA SIMD vector with two elements of type <code>f64</code>.\nA SIMD vector with 32 elements of type <code>f64</code>.\nA SIMD vector with four elements of type <code>f64</code>.\nA SIMD vector with 64 elements of type <code>f64</code>.\nA SIMD vector with eight elements of type <code>f64</code>.\nFinds the index of the first set element.\nA <code>Simd&lt;T, N&gt;</code> has a debug format like the one for <code>[T]</code>:\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts an array of bools to a SIMD mask.\nConverts an array to a SIMD vector.\nCreates an integer value from its representation as a byte …\nCreates a mask from a bitmask.\nConverts a vector of integers to a mask, where 0 …\nConverts a vector of integers to a mask, where 0 …\nCreates an integer value from its representation as a byte …\nCreates a native endian integer value from its memory …\nConverts a slice to a SIMD vector containing <code>slice[..N]</code>.\nReads from potentially discontiguous indices in <code>slice</code> to …\nReads from indices in <code>slice</code> to construct a SIMD vector. If …\nReads elementwise from pointers into a SIMD vector.\nReads from indices in <code>slice</code> to construct a SIMD vector. …\nConditionally read elementwise from pointers into a SIMD …\nReads from indices in <code>slice</code> to construct a SIMD vector. …\nA SIMD vector with one element of type <code>i16</code>.\nA SIMD vector with 16 elements of type <code>i16</code>.\nA SIMD vector with two elements of type <code>i16</code>.\nA SIMD vector with 32 elements of type <code>i16</code>.\nA SIMD vector with four elements of type <code>i16</code>.\nA SIMD vector with 64 elements of type <code>i16</code>.\nA SIMD vector with eight elements of type <code>i16</code>.\nA SIMD vector with one element of type <code>i32</code>.\nA SIMD vector with 16 elements of type <code>i32</code>.\nA SIMD vector with two elements of type <code>i32</code>.\nA SIMD vector with 32 elements of type <code>i32</code>.\nA SIMD vector with four elements of type <code>i32</code>.\nA SIMD vector with 64 elements of type <code>i32</code>.\nA SIMD vector with eight elements of type <code>i32</code>.\nA SIMD vector with one element of type <code>i64</code>.\nA SIMD vector with 16 elements of type <code>i64</code>.\nA SIMD vector with two elements of type <code>i64</code>.\nA SIMD vector with 32 elements of type <code>i64</code>.\nA SIMD vector with four elements of type <code>i64</code>.\nA SIMD vector with 64 elements of type <code>i64</code>.\nA SIMD vector with eight elements of type <code>i64</code>.\nA SIMD vector with one element of type <code>i8</code>.\nA SIMD vector with 16 elements of type <code>i8</code>.\nA SIMD vector with two elements of type <code>i8</code>.\nA SIMD vector with 32 elements of type <code>i8</code>.\nA SIMD vector with four elements of type <code>i8</code>.\nA SIMD vector with 64 elements of type <code>i8</code>.\nA SIMD vector with eight elements of type <code>i8</code>.\nInterleave two masks.\nInterleave two vectors.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA SIMD vector with one element of type <code>isize</code>.\nA SIMD vector with 16 elements of type <code>isize</code>.\nA SIMD vector with two elements of type <code>isize</code>.\nA SIMD vector with 32 elements of type <code>isize</code>.\nA SIMD vector with four elements of type <code>isize</code>.\nA SIMD vector with 64 elements of type <code>isize</code>.\nA SIMD vector with eight elements of type <code>isize</code>.\nReturns the number of elements in this SIMD vector.\nReads contiguous elements from <code>slice</code>. Elements are read so …\nReads contiguous elements from <code>slice</code>. Elements are read so …\nReads contiguous elements from <code>slice</code>. Each element is read …\nReads contiguous elements from <code>slice</code>. Each element is read …\nReads contiguous elements starting at <code>ptr</code>. Each element is …\nReads contiguous elements from <code>slice</code>. Each element is read …\nA SIMD mask with one element for vectors with 16-bit …\nA SIMD mask with 16 elements for vectors with 16-bit …\nA SIMD mask with two elements for vectors with 16-bit …\nA SIMD mask with 32 elements for vectors with 16-bit …\nA SIMD mask with four elements for vectors with 16-bit …\nA SIMD mask with 64 elements for vectors with 16-bit …\nA SIMD mask with eight elements for vectors with 16-bit …\nA SIMD mask with one element for vectors with 32-bit …\nA SIMD mask with 16 elements for vectors with 32-bit …\nA SIMD mask with two elements for vectors with 32-bit …\nA SIMD mask with 32 elements for vectors with 32-bit …\nA SIMD mask with four elements for vectors with 32-bit …\nA SIMD mask with 64 elements for vectors with 32-bit …\nA SIMD mask with eight elements for vectors with 32-bit …\nA SIMD mask with one element for vectors with 64-bit …\nA SIMD mask with 16 elements for vectors with 64-bit …\nA SIMD mask with two elements for vectors with 64-bit …\nA SIMD mask with 32 elements for vectors with 64-bit …\nA SIMD mask with four elements for vectors with 64-bit …\nA SIMD mask with 64 elements for vectors with 64-bit …\nA SIMD mask with eight elements for vectors with 64-bit …\nA SIMD mask with one element for vectors with 8-bit …\nA SIMD mask with 16 elements for vectors with 8-bit …\nA SIMD mask with two elements for vectors with 8-bit …\nA SIMD mask with 32 elements for vectors with 8-bit …\nA SIMD mask with four elements for vectors with 8-bit …\nA SIMD mask with 64 elements for vectors with 8-bit …\nA SIMD mask with eight elements for vectors with 8-bit …\nA SIMD mask with one element for vectors with …\nA SIMD mask with 16 elements for vectors with …\nA SIMD mask with two elements for vectors with …\nA SIMD mask with 32 elements for vectors with …\nA SIMD mask with four elements for vectors with …\nA SIMD mask with 64 elements for vectors with …\nA SIMD mask with eight elements for vectors with …\nTraits for vectors with numeric elements.\nThe portable SIMD prelude.\nTraits for vectors of pointers.\nResize a mask.\nResize a vector.\nReverse the order of the elements in the mask.\nReverse the order of the elements in the vector.\nRotates the mask such that the first <code>OFFSET</code> elements of …\nRotates the vector such that the first <code>OFFSET</code> elements of …\nRotates the mask such that the first <code>self.len() - OFFSET</code> …\nRotates the vector such that the first <code>self.len() - OFFSET</code> …\nWrites the values in a SIMD vector to potentially …\nWrites pointers elementwise into a SIMD vector.\nWrites values from a SIMD vector to multiple potentially …\nConditionally write pointers elementwise into a SIMD …\nWrites values from a SIMD vector to multiple potentially …\nChoose elements from two vectors.\nChoose elements from two masks.\nSets the value of the specified element.\nSets the value of the specified element.\nShifts the mask elements to the left by <code>OFFSET</code>, filling in …\nShifts the vector elements to the left by <code>OFFSET</code>, filling …\nShifts the mask elements to the right by <code>OFFSET</code>, filling …\nShifts the vector elements to the right by <code>OFFSET</code>, filling …\nConstructs a new SIMD vector by copying elements from …\nConstructs a mask by setting all elements to the given …\nConstructs a new SIMD vector with all elements set to the …\nConditionally write contiguous elements to <code>slice</code>. The …\nConditionally write contiguous elements starting from <code>ptr</code>. …\nConditionally write contiguous elements to <code>slice</code>. The …\nCreates a new vector from the elements of <code>vector</code>.\nSwizzle a vector of bytes according to the index vector. …\nCreates a new mask from the elements of <code>mask</code>.\nTests the value of the specified element.\nTests the value of the specified element.\nConverts a SIMD mask to an array of bools.\nConverts a SIMD vector to an array.\nReturns the memory representation of this integer as a …\nCreates a bitmask from a mask.\nConverts the mask to a vector of integers, where 0 …\nReturns the memory representation of this integer as a …\nReturns the memory representation of this integer as a …\nA SIMD vector with one element of type <code>u16</code>.\nA SIMD vector with 16 elements of type <code>u16</code>.\nA SIMD vector with two elements of type <code>u16</code>.\nA SIMD vector with 32 elements of type <code>u16</code>.\nA SIMD vector with four elements of type <code>u16</code>.\nA SIMD vector with 64 elements of type <code>u16</code>.\nA SIMD vector with eight elements of type <code>u16</code>.\nA SIMD vector with one element of type <code>u32</code>.\nA SIMD vector with 16 elements of type <code>u32</code>.\nA SIMD vector with two elements of type <code>u32</code>.\nA SIMD vector with 32 elements of type <code>u32</code>.\nA SIMD vector with four elements of type <code>u32</code>.\nA SIMD vector with 64 elements of type <code>u32</code>.\nA SIMD vector with eight elements of type <code>u32</code>.\nA SIMD vector with one element of type <code>u64</code>.\nA SIMD vector with 16 elements of type <code>u64</code>.\nA SIMD vector with two elements of type <code>u64</code>.\nA SIMD vector with 32 elements of type <code>u64</code>.\nA SIMD vector with four elements of type <code>u64</code>.\nA SIMD vector with 64 elements of type <code>u64</code>.\nA SIMD vector with eight elements of type <code>u64</code>.\nA SIMD vector with one element of type <code>u8</code>.\nA SIMD vector with 16 elements of type <code>u8</code>.\nA SIMD vector with two elements of type <code>u8</code>.\nA SIMD vector with 32 elements of type <code>u8</code>.\nA SIMD vector with four elements of type <code>u8</code>.\nA SIMD vector with 64 elements of type <code>u8</code>.\nA SIMD vector with eight elements of type <code>u8</code>.\nA SIMD vector with one element of type <code>usize</code>.\nA SIMD vector with 16 elements of type <code>usize</code>.\nA SIMD vector with two elements of type <code>usize</code>.\nA SIMD vector with 32 elements of type <code>usize</code>.\nA SIMD vector with four elements of type <code>usize</code>.\nA SIMD vector with 64 elements of type <code>usize</code>.\nA SIMD vector with eight elements of type <code>usize</code>.\nThe mask type returned by each comparison.\nParallel <code>Ord</code>.\nParallel <code>PartialEq</code>.\nParallel <code>PartialOrd</code>.\nRestrict each element to a certain interval.\nTest if each element is equal to the corresponding element …\nTest if each element is greater than or equal to the …\nTest if each element is greater than the corresponding …\nTest if each element is less than or equal to the …\nTest if each element is less than the corresponding …\nReturns the element-wise maximum with <code>other</code>.\nReturns the element-wise minimum with <code>other</code>.\nTest if each element is not equal to the corresponding …\nBit representation of this SIMD vector type.\nA SIMD vector with a different element type.\nA SIMD vector with a different element type.\nA SIMD vector with a different element type.\nMask type used for manipulating this SIMD vector type.\nMask type used for manipulating this SIMD vector type.\nScalar type contained by this SIMD vector type.\nScalar type contained by this SIMD vector type.\nScalar type contained by this SIMD vector type.\nOperations on SIMD vectors of floats.\nOperations on SIMD vectors of signed integers.\nOperations on SIMD vectors of unsigned integers.\nA SIMD vector of unsigned integers with the same element …\nProduces a vector where every element has the absolute …\nLanewise absolute value, implemented in Rust. Every …\nLanewise absolute difference. Every element becomes the …\nLanewise absolute difference. Every element becomes the …\nPerforms elementwise conversion of this vector’s …\nPerforms elementwise conversion of this vector’s …\nPerforms elementwise conversion of this vector’s …\nReturns each element with the magnitude of <code>self</code> and the …\nReturns the number of ones in the binary representation of …\nReturns the number of ones in the binary representation of …\nReturns the number of zeros in the binary representation …\nReturns the number of zeros in the binary representation …\nRaw transmutation from an unsigned integer vector type …\nReturns true for each element if its value is neither …\nReturns true for each element if its value is positive …\nReturns true for each element if its value is <code>NaN</code>.\nReturns true for each negative element and false if it is …\nReturns true for each element if its value is neither …\nReturns true for each positive element and false if it is …\nReturns true for each element if it has a negative sign, …\nReturns true for each element if it has a positive sign, …\nReturns true for each element if its value is subnormal.\nReturns the number of leading ones in the binary …\nReturns the number of leading ones in the binary …\nReturns the number of leading zeros in the binary …\nReturns the number of leading zeros in the binary …\nTakes the reciprocal (inverse) of each element, <code>1/x</code>.\nReturns the cumulative bitwise “and” across the …\nReturns the cumulative bitwise “and” across the …\nReturns the maximum element in the vector.\nReturns the maximum element in the vector.\nReturns the maximum element in the vector.\nReturns the minimum element in the vector.\nReturns the minimum element in the vector.\nReturns the minimum element in the vector.\nReturns the cumulative bitwise “or” across the …\nReturns the cumulative bitwise “or” across the …\nReducing multiply.  Returns the product of the elements of …\nReturns the product of the elements of the vector, with …\nReturns the product of the elements of the vector, with …\nReturns the sum of the elements of the vector.\nReturns the sum of the elements of the vector, with …\nReturns the sum of the elements of the vector, with …\nReturns the cumulative bitwise “xor” across the …\nReturns the cumulative bitwise “xor” across the …\nReverses the order of bits in each elemnent. The least …\nReverses the order of bits in each elemnent. The least …\nLanewise saturating absolute value, implemented in Rust. …\nLanewise saturating add.\nLanewise saturating add.\nLanewise saturating negation, implemented in Rust. As …\nLanewise saturating subtract.\nLanewise saturating subtract.\nReplaces each element with a number that represents its …\nReturns numbers representing the sign of each element.\nRestrict each element to a certain interval unless it is …\nReturns the maximum of each element.\nReturns the minimum of each element.\nReverses the byte order of each element.\nReverses the byte order of each element.\nRaw transmutation to an unsigned integer vector type with …\nConverts each element from radians to degrees.\nRounds toward zero and converts to the same-width integer …\nConverts each element from degrees to radians.\nReturns the number of trailing ones in the binary …\nReturns the number of trailing ones in the binary …\nReturns the number of trailing zeros in the binary …\nReturns the number of trailing zeros in the binary …\nWrapping negation.\nBit representation of this SIMD vector type.\nA SIMD vector with a different element type.\nA SIMD vector with a different element type.\nA SIMD vector with a different element type.\nVector of const pointers with the same number of elements.\nVector of const pointers with the same number of elements.\nVector of constant pointers to the same type.\nVector of <code>isize</code> with the same number of elements.\nVector of <code>isize</code> with the same number of elements.\nA SIMD vector mask for <code>N</code> elements of width specified by …\nMask type used for manipulating this SIMD vector type.\nMask type used for manipulating this SIMD vector type.\nMask type used for manipulating this SIMD vector type.\nMask type used for manipulating this SIMD vector type.\nThe mask type returned by each comparison.\nVector of mutable pointers to the same type.\nScalar type contained by this SIMD vector type.\nScalar type contained by this SIMD vector type.\nScalar type contained by this SIMD vector type.\nA SIMD vector with the shape of <code>[T; N]</code> but the operations …\nOperations on SIMD vectors of constant pointers.\nOperations on SIMD vectors of floats.\nOperations on SIMD vectors of signed integers.\nOperations on SIMD vectors of mutable pointers.\nParallel <code>Ord</code>.\nParallel <code>PartialEq</code>.\nParallel <code>PartialOrd</code>.\nOperations on SIMD vectors of unsigned integers.\nA SIMD vector of unsigned integers with the same element …\nVector of <code>usize</code> with the same number of elements.\nVector of <code>usize</code> with the same number of elements.\nProduces a vector where every element has the absolute …\nLanewise absolute value, implemented in Rust. Every …\nLanewise absolute difference. Every element becomes the …\nLanewise absolute difference. Every element becomes the …\nGets the “address” portion of the pointer.\nGets the “address” portion of the pointer.\nPerforms elementwise conversion of this vector’s …\nPerforms elementwise conversion of this vector’s …\nPerforms elementwise conversion of this vector’s …\nCasts to a pointer of another type.\nCasts to a pointer of another type.\nChanges constness without changing the type.\nChanges constness without changing the type.\nReturns each element with the magnitude of <code>self</code> and the …\nReturns the number of ones in the binary representation of …\nReturns the number of ones in the binary representation of …\nReturns the number of zeros in the binary representation …\nReturns the number of zeros in the binary representation …\nExposes the “provenance” part of the pointer for …\nExposes the “provenance” part of the pointer for …\nA SIMD vector with one element of type <code>f32</code>.\nA SIMD vector with 16 elements of type <code>f32</code>.\nA SIMD vector with two elements of type <code>f32</code>.\nA SIMD vector with 32 elements of type <code>f32</code>.\nA SIMD vector with four elements of type <code>f32</code>.\nA SIMD vector with 64 elements of type <code>f32</code>.\nA SIMD vector with eight elements of type <code>f32</code>.\nA SIMD vector with one element of type <code>f64</code>.\nA SIMD vector with 16 elements of type <code>f64</code>.\nA SIMD vector with two elements of type <code>f64</code>.\nA SIMD vector with 32 elements of type <code>f64</code>.\nA SIMD vector with four elements of type <code>f64</code>.\nA SIMD vector with 64 elements of type <code>f64</code>.\nA SIMD vector with eight elements of type <code>f64</code>.\nRaw transmutation from an unsigned integer vector type …\nA SIMD vector with one element of type <code>i16</code>.\nA SIMD vector with 16 elements of type <code>i16</code>.\nA SIMD vector with two elements of type <code>i16</code>.\nA SIMD vector with 32 elements of type <code>i16</code>.\nA SIMD vector with four elements of type <code>i16</code>.\nA SIMD vector with 64 elements of type <code>i16</code>.\nA SIMD vector with eight elements of type <code>i16</code>.\nA SIMD vector with one element of type <code>i32</code>.\nA SIMD vector with 16 elements of type <code>i32</code>.\nA SIMD vector with two elements of type <code>i32</code>.\nA SIMD vector with 32 elements of type <code>i32</code>.\nA SIMD vector with four elements of type <code>i32</code>.\nA SIMD vector with 64 elements of type <code>i32</code>.\nA SIMD vector with eight elements of type <code>i32</code>.\nA SIMD vector with one element of type <code>i64</code>.\nA SIMD vector with 16 elements of type <code>i64</code>.\nA SIMD vector with two elements of type <code>i64</code>.\nA SIMD vector with 32 elements of type <code>i64</code>.\nA SIMD vector with four elements of type <code>i64</code>.\nA SIMD vector with 64 elements of type <code>i64</code>.\nA SIMD vector with eight elements of type <code>i64</code>.\nA SIMD vector with one element of type <code>i8</code>.\nA SIMD vector with 16 elements of type <code>i8</code>.\nA SIMD vector with two elements of type <code>i8</code>.\nA SIMD vector with 32 elements of type <code>i8</code>.\nA SIMD vector with four elements of type <code>i8</code>.\nA SIMD vector with 64 elements of type <code>i8</code>.\nA SIMD vector with eight elements of type <code>i8</code>.\nReturns true for each element if its value is neither …\nReturns true for each element if its value is positive …\nReturns true for each element if its value is <code>NaN</code>.\nReturns true for each negative element and false if it is …\nReturns true for each element if its value is neither …\nReturns <code>true</code> for each element that is null.\nReturns <code>true</code> for each element that is null.\nReturns true for each positive element and false if it is …\nReturns true for each element if it has a negative sign, …\nReturns true for each element if it has a positive sign, …\nReturns true for each element if its value is subnormal.\nA SIMD vector with one element of type <code>isize</code>.\nA SIMD vector with 16 elements of type <code>isize</code>.\nA SIMD vector with two elements of type <code>isize</code>.\nA SIMD vector with 32 elements of type <code>isize</code>.\nA SIMD vector with four elements of type <code>isize</code>.\nA SIMD vector with 64 elements of type <code>isize</code>.\nA SIMD vector with eight elements of type <code>isize</code>.\nReturns the number of leading ones in the binary …\nReturns the number of leading ones in the binary …\nReturns the number of leading zeros in the binary …\nReturns the number of leading zeros in the binary …\nA SIMD mask with one element for vectors with 16-bit …")