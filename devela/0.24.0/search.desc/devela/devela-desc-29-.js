searchState.loadedDescShard("devela", 29, "Return an iterator adaptor that filters out elements that …\nReturn an iterator adaptor that filters out elements that …\nReturn an iterator adaptor that filters out elements that …\nConverts an iterator of pairs into a pair of containers.\nConverts an iterator of pairs into a pair of containers.\nConverts an iterator of pairs into a pair of containers.\nConverts an iterator of pairs into a pair of containers.\nConverts an iterator of pairs into a pair of containers.\nConverts an iterator of pairs into a pair of containers.\nConverts an iterator of pairs into a pair of containers.\nConverts an iterator of pairs into a pair of containers.\nConverts an iterator of pairs into a pair of containers.\nConverts an iterator of pairs into a pair of containers.\nConverts an iterator of pairs into a pair of containers.\nConverts an iterator of pairs into a pair of containers.\nConverts an iterator of pairs into a pair of containers.\nConverts an iterator of pairs into a pair of containers.\nReturn an iterator adaptor that applies a mutating function\nReturn an iterator adaptor that applies a mutating function\nReturn an iterator adaptor that filters <code>Option&lt;A&gt;</code> iterator …\nReturn an iterator adaptor that filters <code>Option&lt;A&gt;</code> iterator …\nReturn an iterator adaptor that combines each element with …\nReturn an iterator adaptor that combines each element with …\n‘Zips up’ two iterators into a single iterator of …\n‘Zips up’ two iterators into a single iterator of …\n‘Zips up’ two iterators into a single iterator of …\n‘Zips up’ two iterators into a single iterator of …\n‘Zips up’ two iterators into a single iterator of …\n‘Zips up’ two iterators into a single iterator of …\n‘Zips up’ two iterators into a single iterator of …\n‘Zips up’ two iterators into a single iterator of …\n‘Zips up’ two iterators into a single iterator of …\n‘Zips up’ two iterators into a single iterator of …\n‘Zips up’ two iterators into a single iterator of …\n‘Zips up’ two iterators into a single iterator of …\n‘Zips up’ two iterators into a single iterator of …\n‘Zips up’ two iterators into a single iterator of …\nCreate an iterator which iterates over both this and the …\nCreate an iterator which iterates over both this and the …\nCreate an iterator which iterates over both this and the …\nCreate an iterator which iterates over both this and the …\n📦 <code>alloc</code> An ordered map based on a B-Tree.\n<code>alloc</code> An ordered map based on a B-Tree.\n📦 <code>alloc</code> An ordered set based on a B-Tree.\n📦 <code>std?</code> An unordered hash map implemented with quadratic …\n📦 <code>std?</code> A view into a single entry in a map, which may …\nA <code>HashMap</code> using a default Fx hasher.\nThe <code>HashMap</code> in the standard library.\n<code>std?</code> An unordered hash set implemented as a <code>HashMap</code> where …\nA <code>HashSet</code> using a default Fx hasher.\nThe <code>HashSet</code> in the standard library.\nAn occupied entry.\nAn occupied entry.\nAn entry that contains a value.\nRepresents an entry in a static map allowing for in-place …\nA vacant entry.\nA vacant entry.\nAn entry that is vacant and can be used for insertion.\nBuild a custom static hashmap.\n📦 An immutable, append-only, linear, functional, …\n🔄 Iterates over the contents of a <code>ConstList</code>.\n📦 <code>alloc</code> A doubly-linked list with owned nodes.\nA generic, parameterized <em>enum</em> for expressing structured …\nThe 1st variant.\nThe 2nd variant.\nThe 11th variant.\nThe 12th variant.\nThe 3rd variant.\nThe 4th variant.\nThe 5th variant.\nThe 6th variant.\nThe 7th variant.\nThe 8th variant.\nThe 9th variant.\nThe 10th variant.\nHomogeneous data structures, random-access and …\nHomogeneous data structures that process elements in FIFO …\nHomogeneous data structures that process elements in LIFO …\nHeterogeneous data structures, random-access, sequentially …\n📦 A static 1-dimensional array backed by the core array …\n📦 A static 2-dimensional <code>Array</code>.\n🖹 A formatting wrapper for core arrays, implementing …\nCompile-time conversion from slice-like types to arrays.\n🔄 <code>core</code> A by-value array iterator.\n📦 A static array allowing uninitialized elements.\nRepresents a collection of elements\nRepresents the concatenation of two chunks, enabling O(1) …\n📦 An abstract <em>array</em> data type.\nRepresents an empty chunk with no elements\n📦 Extension trait providing convenience methods for …\n📦 Extension trait providing additional methods for <code>Vec</code>.\nThe length of this array.\nRepresents a chunk containing exactly one element\nRepresents a lazy transformation that flattens elements\n📦 <code>alloc</code> A contiguous growable array.\n📦 A persistent data structure with efficient append and …\n📦 <code>core</code> Creates an array <code>[T; N]</code>, where each <code>T</code> is …\n📦 <code>core</code> Converts a mutable reference to <code>T</code> into …\n📦 <code>core</code> Converts a reference to <code>T</code> into <code>&amp;[T; 1]</code> (without …\n📦 Initializes a <code>[$T; $LEN]</code> array in multiple ways.\nReturns a mutable reference to the element at the given …\nReturns an immutable reference to the element at the …\nSets the element at the specified <code>index</code> to the given <code>value</code>.\nSets the element at the specified <code>index</code> to the given …\nWraps the array in an <code>ArrayFmt</code> for formatting purposes.\n<code>alloc</code> Creates a <code>Vec</code> containing the arguments.\nConverts <code>Vec&lt;T&gt;</code> to <code>Vec&lt;U&gt;</code> when <code>U</code> implements <code>From&lt;T&gt;</code>.\nTries to convert <code>Vec&lt;T&gt;</code> to <code>Vec&lt;U&gt;</code> when <code>U</code> implements …\n📦 <code>alloc</code> A priority queue implemented with a binary heap.\n📦 An abstract <em>double-ended queue</em> data type.\n📦 An abstract <em>queue</em> data type.\n📦 A static double-ended queue and stack backed by an …\n🔄 An iterator over <code>Destaque</code> elements.\n📦 A <code>Destaque</code> with an 8-bit index size.\n📦 <code>alloc</code> A double-ended growable queue.\nRemove an element from the (front of the) queue.\nRemove an element from the back of the queue.\nRemove an element from the front of the queue (calls …\nAdd an element to the (back of the) queue.\nRemove an element from the back of the queue (calls …\nAdd an element to the front of the queue.\n📦 An abstract <em>double-ended stack</em> data type.\n📦 An abstract <em>stack</em> data type.\n📦 A static stack backed by an <code>Array</code>.\n🔄 An iterator over <code>Stack</code> elements.\n📦 A <code>Stack</code> with an 8-bit index size.\nRemove an element from the (back of the) stack.\nRemove an element from the back of the stack (calls …\nRemove an element from the front of the stack.\nAdd an element to the (back of the) stack.\nRemove an element from the back of the stack (calls …\nAdd an element to the front of the stack.\nThe arity of this tuple (the number of contained elements)\nThis tuple with an extra element <code>T</code> appended to it.\nThe first element of the tuple, at index 0.\nThe maximum arity supported by the current compilation …\nThis tuple without its head.\nThis tuple without its tail.\nThis tuple with an extra element <code>T</code> prepended to it.\nThe last element of the tuple, at index <code>ARITY-1</code>.\n📦 Extension trait providing convenience methods for …\nAn element of a <code>Tuple</code>.\nAn exclusive reference to an element of a <code>Tuple</code>.\nA shared reference to an element of a <code>Tuple</code>.\nA formatting wrapper for <code>Tuple</code>s, implementing <code>Display</code> and …\n🔄 An iterator over elements of a <code>Tuple</code>.\n🔄 An iterator over exclusive references to elements of …\n🔄 An iterator over shared references to elements of a …\nThe tuple element at index 0.\nA shared reference to the tuple element at index 0.\nAn exclusive reference to the tuple element at index 0.\nThe type of the element at index 0.\nThe tuple element at index 1.\nA shared reference to the tuple element at index 1.\nAn exclusive reference to the tuple element at index 1.\nThe type of the element at index 1.\nThe tuple element at index 10.\nA shared reference to the tuple element at index 10.\nAn exclusive reference to the tuple element at index 10.\nThe type of the element at index 10.\nThe tuple element at index 11.\nA shared reference to the tuple element at index 11.\nAn exclusive reference to the tuple element at index 11.\nThe type of the element at index 11.\nThe tuple element at index 2.\nA shared reference to the tuple element at index 2.\nAn exclusive reference to the tuple element at index 2.\nThe type of the element at index 2.\nThe tuple element at index 3.\nA shared reference to the tuple element at index 3.\nAn exclusive reference to the tuple element at index 3.\nThe type of the element at index 3.\nThe tuple element at index 4.\nA shared reference to the tuple element at index 4.\nAn exclusive reference to the tuple element at index 4.\nThe type of the element at index 4.\nThe tuple element at index 5.\nA shared reference to the tuple element at index 5.\nAn exclusive reference to the tuple element at index 5.\nThe type of the element at index 5.\nThe tuple element at index 6.\nA shared reference to the tuple element at index 6.\nAn exclusive reference to the tuple element at index 6.\nThe type of the element at index 6.\nThe tuple element at index 7.\nA shared reference to the tuple element at index 7.\nAn exclusive reference to the tuple element at index 7.\nThe type of the element at index 7.\nThe tuple element at index 8.\nA shared reference to the tuple element at index 8.\nAn exclusive reference to the tuple element at index 8.\nThe type of the element at index 8.\nThe tuple element at index 9.\nA shared reference to the tuple element at index 9.\nAn exclusive reference to the tuple element at index 9.\nThe type of the element at index 9.\nAppends the given <code>value</code> to this tuple.\nReturns the arity (number of elements) of this tuple.\nWraps the tuple in a <code>TupleFmt</code> for formatting purposes.\nReturns a shared reference to the head of this tuple.\nReturns an exclusive reference to the head of this tuple.\nReturns an iterator over elements of the tuple.\nReturns an iterator over exclusive reference to elements …\nReturns an iterator over shared references to elements of …\nReturns this tuple without the head.\nReturns this tuple without the tail.\nReturns the <code>nth</code> element, or <code>None</code> if <code>nth &gt;= ARITY</code>.\nReturns the <code>nth</code> element cloned, or <code>None</code> if <code>nth &gt;= ARITY</code>.\nReturns an exclusive reference to the <code>nth</code> element, or <code>None</code> …\nReturns a shared reference to the <code>nth</code> element, or <code>None</code> if …\nPrepends the given <code>value</code> to this tuple.\nReturns this tuple with the head element splitted from the …\nReturns this tuple with the tail element splitted from the …\nReturns a shared reference to the tail of this tuple.\nReturns an exclusive reference to the tail of this tuple.\nEnumerated data values and types, classified by size.\nBoolean value\nBoolean value\nBoolean value\nBoolean value\nBoolean value\nBoolean value\nBoolean value\nBoolean value\nBoolean value\n1-Byte byte array\n1-Byte byte array\n1-Byte byte array\n1-Byte byte array\n1-Byte byte array\n1-Byte byte array\n1-Byte byte array\n1-Byte byte array\n1-Byte byte array\n2-Byte byte array\n2-Byte byte array\n2-Byte byte array\n2-Byte byte array\n2-Byte byte array\n2-Byte byte array\n2-Byte byte array\n2-Byte byte array\n2-Byte byte array\n4-Byte byte array\n4-Byte byte array\n4-Byte byte array\n4-Byte byte array\n4-Byte byte array\n4-Byte byte array\n4-Byte byte array\n4-Byte byte array\n4-Byte byte array\n8-Byte byte array\n8-Byte byte array\n8-Byte byte array\n8-Byte byte array\n8-Byte byte array\n8-Byte byte array\n8-Byte byte array\n8-Byte byte array\n8-Byte byte array\n32-bit char\n32-bit char\n32-bit char\n32-bit char\n32-bit char\n32-bit char\n32-bit char\n32-bit char\n32-bit char\nCommon unsafe trait for enumerating untagged <em>raw data </em>…\n64-bit <em>raw</em> data, restricted to <code>Copy</code> variants.\nCommon unsafe trait for enumerating <code>Copy</code>-constrained …\nCommon trait for enumerating <em>data types</em>.\n64-bit data <em>type</em>\n64-bit data <em>type</em>, restricted to <code>Copy</code> variants.\n64-bit data <em>type</em>, restricted to <code>Copy</code> variants, with extra <code>T</code>…\n64-bit data <em>type</em>, with extra <code>T</code>.\nCommon trait for enumerating <code>Copy</code>-constrained <em>data types</em>.\nCommon trait for enumerating <em>data values</em>.\n64-bit data <em>value</em>.\n64-bit data <em>value</em>, restricted to <code>Copy</code> variants.\n64-bit data <em>value</em>, restricted to <code>Copy</code> variants, with extra …\n64-bit data <em>value</em>, with extra <code>V</code>.\nCommon trait for enumerating <code>Copy</code>-constrained <em>data values</em>.\nExtra <em>data values</em>.\nExtra <em>data values</em>.\nExtra <em>data values</em>.\nExtra <em>data values</em>.\nA custom <em>data type</em> extension.\nA custom <em>data type</em> extension.\nA custom <em>data type</em> extension.\nA custom <em>data type</em> extension.\n32-bit floating-point number\n32-bit floating-point number\n32-bit floating-point number\n32-bit floating-point number\n32-bit floating-point number\n32-bit floating-point number\n32-bit floating-point number\n32-bit floating-point number\n32-bit floating-point number\n64-bit floating-point number\n64-bit floating-point number\n64-bit floating-point number\n64-bit floating-point number\n64-bit floating-point number\n64-bit floating-point number\n64-bit floating-point number\n64-bit floating-point number\n64-bit floating-point number\n16-bit signed integer\n16-bit signed integer\n16-bit signed integer\n16-bit signed integer\n16-bit signed integer\n16-bit signed integer\n16-bit signed integer\n16-bit signed integer\n16-bit signed integer\n32-bit signed integer\n32-bit signed integer\n32-bit signed integer\n32-bit signed integer\n32-bit signed integer\n32-bit signed integer\n32-bit signed integer\n32-bit signed integer\n32-bit signed integer\n64-bit signed integer\n64-bit signed integer\n64-bit signed integer\n64-bit signed integer\n64-bit signed integer\n64-bit signed integer\n64-bit signed integer\n64-bit signed integer\n64-bit signed integer\n8-bit signed integer\n8-bit signed integer\n8-bit signed integer\n8-bit signed integer\n8-bit signed integer\n8-bit signed integer\n8-bit signed integer\n8-bit signed integer\n8-bit signed integer\n64-bit isize\n64-bit isize\n64-bit isize\n64-bit isize\n64-bit isize\n64-bit isize\n64-bit isize\n64-bit isize\nRepresents the absence of <em>data</em>.\nRepresents the absence of <em>data</em>.\nRepresents the absence of <em>data</em>.\nRepresents the absence of <em>data</em>.\nRepresents the absence of <em>data</em>.\nRepresents the absence of <em>data</em>.\nRepresents the absence of <em>data</em>.\nRepresents the absence of <em>data</em>.\nRepresents the absence of <em>data</em>.\nThe <code>DataType</code> type that pairs with this <code>DataValue</code>.\n16-bit unsigned integer\n16-bit unsigned integer\n16-bit unsigned integer\n16-bit unsigned integer\n16-bit unsigned integer\n16-bit unsigned integer\n16-bit unsigned integer\n16-bit unsigned integer\n16-bit unsigned integer\n32-bit unsigned integer\n32-bit unsigned integer\n32-bit unsigned integer\n32-bit unsigned integer\n32-bit unsigned integer\n32-bit unsigned integer\n32-bit unsigned integer\n32-bit unsigned integer\n32-bit unsigned integer\n64-bit unsigned integer\n64-bit unsigned integer\n64-bit unsigned integer\n64-bit unsigned integer\n64-bit unsigned integer\n64-bit unsigned integer\n64-bit unsigned integer\n64-bit unsigned integer\n64-bit unsigned integer\n8-bit unsigned integer\n8-bit unsigned integer\n8-bit unsigned integer\n8-bit unsigned integer\n8-bit unsigned integer\n8-bit unsigned integer\n8-bit unsigned integer\n8-bit unsigned integer\n8-bit unsigned integer\n64-bit usize\n64-bit usize\n64-bit usize\n64-bit usize\n64-bit usize\n64-bit usize\n64-bit usize\n64-bit usize\nThe <code>DataValue</code> type that pairs with this <code>DataType</code>.\nReturns the data type of this value.\nReturns the data type associated with this <code>Copy</code> value.\nReturns the alignment of the value represented by this …\nReturns the default value for this <code>Copy</code> type, or <code>None</code> if …\nReturns the default value for this type, or <code>None</code> if not …\nReturns whether the specific value for this type is <code>Copy</code>.\nReturns whether the specific value is <code>Copy</code>.\nReturns the size of the value represented by this type.\nReturns whether all values represented by this type are …\nReturns whether all values are <code>Copy</code>.\nA unique identifier based on a pinned stack-allocated …\nA unique identifier based on a pinned heap-allocated …\nA macro for constructing a unique sequential identifier …\nGame loop, timing.\nGame maps.\nGame state, scene.\nCustom DSLs, parsers, interpreters, and virtual machines.\nFFI bindings and interoperability.\nInternationalization and localization support.\nLinguistics and languge theory. ling::{art, grammar, nat}\nC interfacing.\n GLSL interfacing.\nJavaScript interfacing.\n𝐓 <code>core</code> Representation of a borrowed C string (See […\n𝐓 <code>alloc</code> An owned, C-compatible, nul-terminated string …\n⚙️𝐓 <code>core</code> Equivalent to the corresponding C type.\n⚙️𝟙 <code>core</code> Equivalent to the corresponding C type.\n⚙️𝟙 <code>core</code> Equivalent to the corresponding C type.\n⚙️𝟙 <code>core</code> Equivalent to the corresponding C type.\n⚙️𝟙 <code>core</code> Equivalent to the corresponding C type.\n⚙️𝟙 <code>core</code> Equivalent to the corresponding C type.\n⚙️𝐓 <code>core</code> Equivalent to the corresponding C type.\n⚙️𝟙 <code>core</code> Equivalent to the corresponding C type.\n⚙️𝐓 <code>core</code> Equivalent to the corresponding C type.\n⚙️𝟙 <code>core</code> Equivalent to the corresponding C type.\n⚙️𝟙 <code>core</code> Equivalent to the corresponding C type.\n⚙️𝟙 <code>core</code> Equivalent to the corresponding C type.\n⚙️𝟙 <code>core</code> Equivalent to the corresponding C type.\n⚙️ <code>core</code> Equivalent to C’s void type when used as a …\n⚙️ A GLSL boolean.\n📐 Equivalent to GLSL <code>bvec2</code>, a vector of 2×<code>g_bool</code>s.\n📐 Equivalent to GLSL <code>bvec3</code>, a vector of 3×<code>g_bool</code>s.\n📐 Equivalent to GLSL <code>bvec4</code>, a vector of 4×<code>g_bool</code>s.\n📐 Equivalent to GLSL <code>dmat2</code>, a column-major 2×2 matrix …\n📐 Equivalent to GLSL <code>dmat3</code>, a column-major 3×3 matrix …\n📐 Equivalent to GLSL <code>dmat4</code>, a column-major 4×4 matrix …\n⚙️ 𝟙 A GLSL double-precision floating-point number.\n📐 Equivalent to GLSL <code>dvec2</code>, a vector of 2×<code>g_double</code>s.\n📐 Equivalent to GLSL <code>dvec3</code>, a vector of 3×<code>g_double</code>s.\n📐 Equivalent to GLSL <code>dvec4</code>, a vector of 4×<code>g_double</code>s.\n⚙️ 𝟙 A GLSL single-precision floating-point number.\n⚙️ 𝟙 A GLSL signed 32-bit integer.\n📐 Equivalent to GLSL <code>ivec2</code>, a vector of 2×<code>g_int</code>s.\n📐 Equivalent to GLSL <code>ivec3</code>, a vector of 3×<code>g_int</code>s.\n📐 Equivalent to GLSL <code>ivec4</code>, a vector of 4×<code>g_int</code>s.\n📐 Equivalent to GLSL <code>mat2</code>, a column-major 2×2 matrix …\n📐 Equivalent to GLSL <code>mat2x3</code>, a column-major 2×3 matrix …\n📐 Equivalent to GLSL <code>mat2x4</code>, a column-major 2×4 matrix …\n📐 Equivalent to GLSL <code>mat3x3</code>, a column-major 3×3 matrix …\n📐 Equivalent to GLSL <code>mat3x2</code>, a column-major 3×2 matrix …\n📐 Equivalent to GLSL <code>mat3x4</code>, a column-major 3×4 matrix …\n📐 Equivalent to GLSL <code>mat4x4</code>, a column-major 4×4 matrix …\n📐 Equivalent to GLSL <code>mat4x2</code>, a column-major 4×2 matrix …\n📐 Equivalent to GLSL <code>mat4x3</code>, a column-major 4×3 matrix …\n⚙️ 𝟙 A GLSL unsigned 32-bit integer.\n📐 Equivalent to GLSL <code>ivec2</code>, a vector of 2×<code>g_uint</code>s.\n📐 Equivalent to GLSL <code>ivec3</code>, a vector of 3×<code>g_uint</code>s.\n📐 Equivalent to GLSL <code>ivec4</code>, a vector of 4×<code>g_uint</code>s.\n📐 Equivalent to GLSL <code>vec2</code>, a vector of 2×<code>g_float</code>s.\n📐 Equivalent to GLSL <code>vec3</code>, a vector of 3×<code>g_float</code>s.\n📐 Equivalent to GLSL <code>vec4</code>, a vector of 4×<code>g_float</code>s.\n📐 A convenient 2D GLSL vertex representation with …\n📐 A convenient 3D GLSL vertex representation with …\n🌐 Javascript-related operations.\n🌐 Javascript Console.\nA high-resolution timestamp based on JavaScript’s …\nText Metrics.\nFull Text Metrics.\nA handle to a JavaScript timeout.\nA JavaScript value for FFI communication.\nAlphabetic baseline position.\nThe distance from the baseline to the highest point.\nDistance from the baseline to the highest glyph edge.\nThe distance from the baseline to the lowest point.\nDistance from the baseline to the lowest glyph edge.\nHeight from the baseline to the top of the <code>em</code> square.\nHeight from the baseline to the bottom of the <code>em</code> square.\nThe topmost possible bounding box for text.\nThe lowest possible bounding box for text.\nHanging baseline position.\nIdeographic baseline position.\n⚙️ A JavaScript boolean (<code>true</code> / <code>false</code>).\n⚙️ 𝟙 A JavaScript signed 32-bit integer.\n⚙️ ∅ The JavaScript <code>null</code> value.\n⚙️ 𝟙 A JavaScript Number.\n⚙️ 𝐓 A JavaScript string reference.\n⚙️ 𝟙 A JavaScript unsigned 32-bit integer.\n⚙️ ∅ The JavaScript <code>undefined</code> value.\nDistance from the alignment point to the leftmost glyph …\nMilliseconds since <code>performance.timeOrigin</code>.\nDistance from the alignment point to the rightmost glyph …\nWeb APIs interfacing.\nThe width of the rendered text.\nThe width of the rendered text.\n🧪 Access to accelerometer sensor data.\n🧪 Background sync capability for web applications.\nAccess to the device camera.\nFires when an element is clicked.\n🧪 ⚠️ Read access to the system clipboard.\n🧪 Write access to the system clipboard.\nThe user has not yet granted or denied the permission.\nAn error occurred while querying the permission state.\nAccess to device geolocation data.\nThe permission has been granted by the user.\n🧪 Access to gyroscope sensor data.\nThe worker script provided was invalid.\nThe job was not found.\nFires when a key is pressed down.\nFires when a key is released.\nOn the left side of the keyboard.\nAccess to the device microphone.\nMIDI device access (without system exclusive messages).\nFires when the mouse button is pressed down.\nFires when the mouse moves over an element.\nFires when the mouse button is released.\nPermission to display system notifications.\nOn the numeric keypad.\n🧪 Permission to use a payment handler.\nPersistent storage access to prevent data loss.\nFires when the pointer is pressed down.\nFires when the pointer is moved.\nFires when the pointer is released.\nThe user has not yet granted or denied the permission.\nPermission to receive push notifications.\nFires when the window is resized.\nOnt he right side of the keyboard.\nAllows preventing the screen from sleeping.\nThe key is not identified as being located in a particular …\nAccess to storage that requires explicit user permission.\n🧪 Allows a site to access storage without top-level …\nUnknown event. Default case.\nThe queried permission is unsupported or unrecognized.\n🌐 A Web API namespace.\nHandle to the brower’s global Document associated APIs.\nHandle to a DOM Element.\nA web API Event kind.\nA web API Mouse Event.\nA web API Pointer Event.\nWhich part of the keyboard the key event originates from\nWeb API permissions\nPermission query result state.\nHandle to the browser’s global Window and Screen …\nAggregates the live state of a <code>WebWindow</code>, including its …\nA handle to a JavaScript Web Worker.\nErrors that can occur when working with JavaScript Web …\nRepresents a job running inside a <code>WebWorker</code>.\nThe worker was not found.\n(colorDepth) The screen color depth, in bits per single …\nThe mouse button that triggered the event (<code>0</code>: left, <code>1</code>: …\nA bitmask of buttons currently being held down (<code>1</code>: left, <code>2</code>…\n(devicePixelRatio) The device pixel ratio of the …\nThe type of mouse event (Click, MouseDown, MouseMove, …\nThe type of pointer event (PointerDown, PointerMove, etc.).\nUnique identifier for the pointer device.\n(innerWidth) (innerHeight) The extent in pixels of the …\n(outerWidth) (outerHeight) The extent in pixels of the …\nThe pressure applied to the pointer (0.0 to 1.0 for most …\n(screenLeft) (screenTop) The window’s offset in pixels …\n(width) (height) The extent of the screen in pixels.\n(availWidth) (availHeight) The extent of the screen in …\nThe tilt of the stylus along the X-axis (-90° to 90°).\nThe tilt of the stylus along the Y-axis (-90° to 90°).\nThe JavaScript event timestamp.\nThe JavaScript event timestamp.\nThe rotation of the stylus around its own axis (0° to …\nThe X-coordinate of the mouse event relative to the …\nThe X-coordinate of the pointer event relative to the …\nThe Y-coordinate of the mouse event relative to the …\nThe Y-coordinate of the pointer event relative to the …\nArtificial languages.\nGrammar.\nNatural languages.\nAudio functionality.\nChromatic functionality.\nDrawing functionality.\nFont functionality.\nImage manipulation. image::{sixel}\nMidi functionality.\nVideo functionality.\nThe bit depth of each color component (e.g., <code>8</code> for <code>u8</code>, <code>32</code> …\nThe number of color components (channels) in the …\nWhether the color has an alpha component are integer types …\nWhether the color components are integer types (e.g., <code>u8</code>, …\nWhether the color space is linear (as opposed to …\nWhether the color uses premultiplied alpha (vs. …\nBase trait for general color data representation.\nThe type of a single color component (e.g., <code>u8</code>, <code>f32</code>).\nGamma correction curves.\nPerceptual lightness (L*).\nLinearized perceptual lightness (L* in linear space).\nA generic luminance-like component.\nGamma-encoded luma (Y′).\nPhysical luminance.\nRGB color with 3 components.\nRGB color with 16-bit integer components (sRGB gamma …\nRGB color with 8-bit integer components (sRGB gamma space).\nRGB color with 64-bit float components (sRGB gamma space).\nRGB color with 64-bit float components (linear space).\nRGB+A color with 4 components.\nRGB+A color with 16-bit integer components (sRGB gamma …\nRGB+A color with 8-bit integer components (sRGB gamma …\nRGB+A color with 64-bit float components (sRGB gamma …\nRGB+A color with 64-bit float components (linear space, …\nRGB+A color with 64-bit float components (linear space, …\nRGB+A color with 16-bit integer components (sRGB gamma …\nRGB+A color with 8-bit integer components (sRGB gamma …\nRGB+A color with 64-bit float components (sRGB gamma …\nThe luminance-like channel value.\nThe luminance-like channel value.\nThe luminance-like channel value.\nThe luminance-like channel value.\nColor channels in order: [red, green, blue].\nColor channels in order: [red, green, blue, alpha].\nColor channels in order: [red, green, blue, alpha].\nColor channels in order: [red, green, blue].\nColor channels in order: [red, green, blue, alpha].\nColor channels in order: [red, green, blue, alpha].\nThe luminance-like channel value.\nColor channels in order: [red, green, blue].\nColor channels in order: [red, green, blue, alpha].\nColor channels in order: [red, green, blue].\nColor channels in order: [red, green, blue, alpha].\nColor channels in order: [red, green, blue, alpha].\nColor channels in order: [red, green, blue].\nColor channels in order: [red, green, blue, alpha].\nColor channels in order: [red, green, blue, alpha].\nGet the alpha component.\nReturns the bit depth of each color component (e.g., 8 for …\nGet the blue component.\nReturns a vector containing the color components.\nWrites the color components to a pre-allocated <code>buffer</code>.\nReturns the number of color components (channels).\nGet the green component.\nReturns <code>true</code> if the color has an alpha component.\nReturns <code>true</code> if the color uses integer components (e.g., <code>u8</code>…\nReturns <code>true</code> if the color is in a linear space (not …\nReturns <code>true</code> if the color uses premultiplied alpha.\nGet the red component.\nThe gamma exponent (<code>γ</code>) used in the encoding/decoding …\n🅵 A simple bitmap font for rendering fixed-size glyphs.\n🅵 A simple 3x3 bitmap font.\n🅵 A simple 3x5 bitmap font.\n🅵 A simple 5x6 bitmap font.\nHorizontal space to advance after each glyph.\nVertical space to advance after each new line.\nWhere the base line sits in the height.\nA slice of extra paired glyphs.\nThe first char in <code>glyphs</code>.\nA slice of glyphs.\nThe height of each glyph in pixels.\nThe width of each glyph in pixels.\nContains the error value\nA <code>core::fmt::Error</code>.\n🚩+ An image-related error.\n⚖️ An image-related result.\nInvalid image size, with an optional width and height.\nInvalid magic number\nInvalid pixel value.\nAn <code>I/O</code> error.\nContains the success value\n🌐 A collection of methods for encoding and decoding PNM …\nSixel encoding functionality.\nABGR color 32bpp.\nPositionally stable arithmetic dithering.\nAG grayscale 16bpp.\nARGB color 32bpp.\nError diffusion dithering using Bill Atkinson’s method.\nChoose diffusion type automatically. (Default)\nChoose automatically the method for finding the largest …\nChoose automatically the method for selecting …\nChoose quality mode automatically.\nBGR color 15bpp.\nBGR color 16bpp.\nBGR color 24bpp.\nBGRA color 32bpp.\nBad argument detected.\nBad input detected.\nInteger overflow.\nBurkes error diffusion dithering.\nChoose the geometric center of the box.\nChoose the mean of all unique colors in the box (specified …\nDithering methods of error diffusion.\nFloyd-Steinberg error diffusion dithering.\nFull quality palette construction.\nGrayscale 1bpp.\nGrayscale 2bpp.\nGrayscale 4bpp.\nGrayscale 8bpp.\nGA grayscale 16bpp.\nHigh quality palette construction.\nHigh color.\nJarvis, Judice &amp; Ninke (JaJuNi) error diffusion dithering.\nLow quality palette construction.\nTransforming into luminosities before the comparison.\nNo dithering is applied. Pixels are directly quantized …\nSimply comparing the range in RGB space.\nPalette 1bpp.\nPalette 2bpp.\nPalette 4bpp.\nPalette 8bpp.\nPixel format type of input image.\nComputes the mean weighted by pixel count.\nRGB color 15bpp.\nRGB color 16bpp.\nRGB color 24bpp. (Default)\nRGBA color 32bpp.\nA configurable sixel string builder from a slice of pixel …\nA sixel-related error.\nMethod for selecting a representative color from a color …\nQuality modes.\nMethod for finding the largest dimension for splitting, …\nStucki error diffusion dithering.\nPositionally stable XOR-based dithering.\nMethod for choosing a representative mean color for the …\n$ τ/360 = π/180 = 1\\degree $ <em>arc degree</em> (A019685, …\n$ τ/360 = π/180 = 1\\degree $ <em>arc degree</em> (A019685, …\n$ τ/360 = π/180 = 1\\degree $ <em>arc degree</em> (A019685, …\n$ τ/360 = π/180 = 1\\degree $ <em>arc degree</em> (A019685, …\n$ τ/360 = π/180 = 1\\degree $ <em>arc degree</em> (A019685, …\n$ τ/(360*60) = 1^{\\prime} $ <em>arc minute</em> (wikipedia) …\n$ τ/(360*60) = 1^{\\prime} $ <em>arc minute</em> (wikipedia) …\n$ τ/(360*60) = 1^{\\prime} $ <em>arc minute</em> (wikipedia) …\n$ τ/(360*60) = 1^{\\prime} $ <em>arc minute</em> (wikipedia) …\n$ τ/(360*60) = 1^{\\prime} $ <em>arc minute</em> (wikipedia) …\n$ τ/(360 * 60 * 60) = 1^{\\prime\\prime} $ <em>arc second</em> (…\n$ τ/(360 * 60 * 60) = 1^{\\prime\\prime} $ <em>arc second</em> (…\n$ τ/(360 * 60 * 60) = 1^{\\prime\\prime} $ <em>arc second</em> (…\n$ τ/(360 * 60 * 60) = 1^{\\prime\\prime} $ <em>arc second</em> (…\n$ τ/(360 * 60 * 60) = 1^{\\prime\\prime} $ <em>arc second</em> (…\n10^-18\nThe base value for unit prefixes.\nThe base value for unit prefixes.\nThe base value for unit prefixes.\nThe base value for binary unit prefixes.\nThe base value for SI unit prefixes.\n$ \\sqrt{2} $ (A002193, wikipedia) <code>≈ 1.41421356…</code>\n$ \\sqrt{2} $ (A002193, wikipedia) <code>≈ 1.41421356…</code>\n$ \\sqrt{2} $ (A002193, wikipedia) <code>≈ 1.41421356…</code>\n$ \\sqrt{2} $ (A002193, wikipedia) <code>≈ 1.41421356…</code>\n$ \\sqrt[\\small 3]{2} $ (A002580, wikipedia) …\n$ \\sqrt[\\small 3]{3} $ (A002581) <code>≈ 1.44224957…</code>\n$ \\sqrt[\\small 3]{3} $ (A002581) <code>≈ 1.44224957…</code>\n$ \\sqrt[\\small 3]{3} $ (A002581) <code>≈ 1.44224957…</code>\n$ \\sqrt[\\small 3]{3} $ (A002581) <code>≈ 1.44224957…</code>\n$ \\sqrt[\\small 3]{3} $ (A002581) <code>≈ 1.44224957…</code>\n🌐 Provides <em>const</em> casting, joining and splitting …\n10^-2\nAlias of <code>Deca</code> (alternative).\nApproximate number of significant digits in base 10.\nApproximate number of significant digits in base 10.\nApproximate number of significant digits in base 10.\nApproximate number of significant digits in base 10.\nApproximate number of significant digits in base 10.\n10^1\n10^-1\n𝟙 Faster divisor for division and modulo operations.\n$ e $ (A001113) <code>≈ 2.71828182…</code> <em>The Euler number or </em>…\n$ e $ (A001113) <code>≈ 2.71828182…</code> <em>The Euler number or </em>…\n$ e $ (A001113) <code>≈ 2.71828182…</code> <em>The Euler number or </em>…\n$ e $ (A001113) <code>≈ 2.71828182…</code> <em>The Euler number or </em>…\n$ e $ (A001113) <code>≈ 2.71828182…</code> <em>The Euler number or </em>…\nAlias of <code>Exbi</code>.\nAlias of <code>Exa</code>.\n$ γ $ (A001620) <code>≈ 0.57721566…</code> <em>Gamma, or the </em>…\n$ γ $ (A001620) <code>≈ 0.57721566…</code> <em>Gamma, or the </em>…\n$ γ $ (A001620) <code>≈ 0.57721566…</code> <em>Gamma, or the </em>…\n$ γ $ (A001620) <code>≈ 0.57721566…</code> <em>Gamma, or the </em>…\n$ γ $ (A001620) <code>≈ 0.57721566…</code> <em>Gamma, or the </em>…\nMachine epsilon value. This is the smallest difference …\nMachine epsilon value. This is the smallest difference …\nMachine epsilon value. This is the smallest difference …\nMachine epsilon value. This is the smallest difference …\nMachine epsilon value. This is the smallest difference …\nExponent bias for representing both positive and negative …\nExponent bias for representing both positive and negative …\nExponent bias for representing both positive and negative …\nExponent bias for representing both positive and negative …\nExponent bias for representing both positive and negative …\nNumber of bits used to represent the exponent.\nNumber of bits used to represent the exponent.\nNumber of bits used to represent the exponent.\nNumber of bits used to represent the exponent.\nNumber of bits used to represent the exponent.\nAlias of <code>Exbi</code>.\nContains the error value\n10^18\n2^60.\n𝟙 🌐 Extension trait for floating-point types. …\n$ 1/\\sqrt[\\small 3]{3} = …\n$ 1/\\sqrt[\\small 3]{3} = …\n$ 1/\\sqrt[\\small 3]{3} = …\n$ 1/\\sqrt[\\small 3]{3} = …\n$ 1/\\sqrt[\\small 3]{3} = …\n$ 1/φ = φ-1 $ (A094214) <code>≈ 0.61803398…</code> <em>The reciprocal </em>…\n$ 1/φ = φ-1 $ (A094214) <code>≈ 0.61803398…</code> <em>The reciprocal </em>…\n$ 1/φ = φ-1 $ (A094214) <code>≈ 0.61803398…</code> <em>The reciprocal </em>…\n$ 1/φ = φ-1 $ (A094214) <code>≈ 0.61803398…</code> <em>The reciprocal </em>…\n$ 1/φ = φ-1 $ (A094214) <code>≈ 0.61803398…</code> <em>The reciprocal </em>…\n$ 1/π = 2/τ $ (A049541) <code>≈ 0.31830988…</code>\n$ 1/π = 2/τ $ (A049541) <code>≈ 0.31830988…</code>\n$ 1/π = 2/τ $ (A049541) <code>≈ 0.31830988…</code>\n$ 1/π = 2/τ $ (A049541) <code>≈ 0.31830988…</code>\n$ 1/π = 2/τ $ (A049541) <code>≈ 0.31830988…</code>\n$ 1/\\sqrt{2} = \\sqrt{1/2} $ (A010503, wikipedia) …\n$ 1/\\sqrt{2} = \\sqrt{1/2} $ (A010503, wikipedia) …\n$ 1/\\sqrt{2} = \\sqrt{1/2} $ (A010503, wikipedia) …\n$ 1/\\sqrt{2} = \\sqrt{1/2} $ (A010503, wikipedia) …\n$ 1/\\sqrt{2} = \\sqrt{1/2} $ (A010503, wikipedia) …\n$ 1/\\sqrt{2π} = 1/\\sqrt{τ} $ (A231863) <code>≈ 0.39894228…</code>\n$ 1/\\sqrt{2π} = 1/\\sqrt{τ} $ (A231863) <code>≈ 0.39894228…</code>\n$ 1/\\sqrt{2π} = 1/\\sqrt{τ} $ (A231863) <code>≈ 0.39894228…</code>\n$ 1/\\sqrt{2π} = 1/\\sqrt{τ} $ (A231863) <code>≈ 0.39894228…</code>\n$ 1/\\sqrt{2π} = 1/\\sqrt{τ} $ (A231863) <code>≈ 0.39894228…</code>\n$ 1/\\sqrt{3} = \\sqrt{1/3} $ (A020760, <code>≈ 0.57735026…</code>\n$ 1/\\sqrt{3} = \\sqrt{1/3} $ (A020760, <code>≈ 0.57735026…</code>\n$ 1/\\sqrt{3} = \\sqrt{1/3} $ (A020760, <code>≈ 0.57735026…</code>\n$ 1/\\sqrt{3} = \\sqrt{1/3} $ (A020760, <code>≈ 0.57735026…</code>\n$ 1/\\sqrt{3} = \\sqrt{1/3} $ (A020760, <code>≈ 0.57735026…</code>\n$ 1/\\sqrt{φ} = \\sqrt{φ/φ^2} = \\sqrt{φ^2-2} $ (A197762) …\n$ 1/\\sqrt{φ} = \\sqrt{φ/φ^2} = \\sqrt{φ^2-2} $ (A197762) …\n$ 1/\\sqrt{φ} = \\sqrt{φ/φ^2} = \\sqrt{φ^2-2} $ (A197762) …\n$ 1/\\sqrt{φ} = \\sqrt{φ/φ^2} = \\sqrt{φ^2-2} $ (A197762) …\n$ 1/\\sqrt{φ} = \\sqrt{φ/φ^2} = \\sqrt{φ^2-2} $ (A197762) …\n$ 1/\\sqrt{π} = 1/\\sqrt{τ/2} $ (A087197) <code>≈ 0.56418958…</code>\n$ 1/\\sqrt{π} = 1/\\sqrt{τ/2} $ (A087197) <code>≈ 0.56418958…</code>\n$ 1/\\sqrt{π} = 1/\\sqrt{τ/2} $ (A087197) <code>≈ 0.56418958…</code>\n$ 1/\\sqrt{π} = 1/\\sqrt{τ/2} $ (A087197) <code>≈ 0.56418958…</code>\n$ 1/\\sqrt{π} = 1/\\sqrt{τ/2} $ (A087197) <code>≈ 0.56418958…</code>\n$ 1/\\sqrt{τ} = 1/\\sqrt{2π} $ (A231863) <code>≈ 0.39894228…</code>\n$ 1/\\sqrt{τ} = 1/\\sqrt{2π} $ (A231863) <code>≈ 0.39894228…</code>\n$ 1/\\sqrt{τ} = 1/\\sqrt{2π} $ (A231863) <code>≈ 0.39894228…</code>\n$ 1/\\sqrt{τ} = 1/\\sqrt{2π} $ (A231863) <code>≈ 0.39894228…</code>\n$ 1/\\sqrt{τ} = 1/\\sqrt{2π} $ (A231863) <code>≈ 0.39894228…</code>\n$ 1/τ = 1/2π $ (A086201) <code>≈ 0.15915494…</code>\n$ 1/τ = 1/2π $ (A086201) <code>≈ 0.15915494…</code>\n$ 1/τ = 1/2π $ (A086201) <code>≈ 0.15915494…</code>\n$ 1/τ = 1/2π $ (A086201) <code>≈ 0.15915494…</code>\n$ 1/τ = 1/2π $ (A086201) <code>≈ 0.15915494…</code>\n$ 2/π $ (A060294) <code>≈ 0.63661977…</code> <em>Buffon’s constant</em>.\n$ 2/π $ (A060294) <code>≈ 0.63661977…</code> <em>Buffon’s constant</em>.\n$ 2/π $ (A060294) <code>≈ 0.63661977…</code> <em>Buffon’s constant</em>.\n$ 2/π $ (A060294) <code>≈ 0.63661977…</code> <em>Buffon’s constant</em>.\n$ 2/π $ (A060294) <code>≈ 0.63661977…</code> <em>Buffon’s constant</em>.\n$ 2/\\sqrt{π} $ (A190732) <code>≈ 1.12837916…</code>\n$ 2/\\sqrt{π} $ (A190732) <code>≈ 1.12837916…</code>\n$ 2/\\sqrt{π} $ (A190732) <code>≈ 1.12837916…</code>\n$ 2/\\sqrt{π} $ (A190732) <code>≈ 1.12837916…</code>\n$ 2/\\sqrt{π} $ (A190732) <code>≈ 1.12837916…</code>\n$ 2/\\sqrt{τ} = \\sqrt{2/π} $ (A076668) <code>≈ 0.79788456…</code>\n$ 2/\\sqrt{τ} = \\sqrt{2/π} $ (A076668) <code>≈ 0.79788456…</code>\n$ 2/\\sqrt{τ} = \\sqrt{2/π} $ (A076668) <code>≈ 0.79788456…</code>\n$ 2/\\sqrt{τ} = \\sqrt{2/π} $ (A076668) <code>≈ 0.79788456…</code>\n$ 2/\\sqrt{τ} = \\sqrt{2/π} $ (A076668) <code>≈ 0.79788456…</code>\n$ 2/τ = 1/π $ (A049541) <code>≈ 0.31830988…</code>\n$ 2/τ = 1/π $ (A049541) <code>≈ 0.31830988…</code>\n$ 2/τ = 1/π $ (A049541) <code>≈ 0.31830988…</code>\n$ 2/τ = 1/π $ (A049541) <code>≈ 0.31830988…</code>\n$ 2/τ = 1/π $ (A049541) <code>≈ 0.31830988…</code>\n$ 360/τ = 180/π $ (A072097) <code>≈ 57.2957795…</code>\n$ 360/τ = 180/π $ (A072097) <code>≈ 57.2957795…</code>\n$ 360/τ = 180/π $ (A072097) <code>≈ 57.2957795…</code>\n$ 360/τ = 180/π $ (A072097) <code>≈ 57.2957795…</code>\n$ 360/τ = 180/π $ (A072097) <code>≈ 57.2957795…</code>\n$ π/2 = τ/4 = 90\\degree $ (A019669) <code>≈ 1.57079632…</code>\n$ π/2 = τ/4 = 90\\degree $ (A019669) <code>≈ 1.57079632…</code>\n$ π/2 = τ/4 = 90\\degree $ (A019669) <code>≈ 1.57079632…</code>\n$ π/2 = τ/4 = 90\\degree $ (A019669) <code>≈ 1.57079632…</code>\n$ π/2 = τ/4 = 90\\degree $ (A019669) <code>≈ 1.57079632…</code>\n$ π/3 = τ/6 = 60\\degree $ (A019670) <code>≈ 1.04719755…</code>\n$ π/3 = τ/6 = 60\\degree $ (A019670) <code>≈ 1.04719755…</code>\n$ π/3 = τ/6 = 60\\degree $ (A019670) <code>≈ 1.04719755…</code>\n$ π/3 = τ/6 = 60\\degree $ (A019670) <code>≈ 1.04719755…</code>\n$ π/3 = τ/6 = 60\\degree $ (A019670) <code>≈ 1.04719755…</code>\n$ π/4 = τ/8 = 45\\degree $ (A003881) <code>≈ 0.78539816…</code>\n$ π/4 = τ/8 = 45\\degree $ (A003881) <code>≈ 0.78539816…</code>\n$ π/4 = τ/8 = 45\\degree $ (A003881) <code>≈ 0.78539816…</code>\n$ π/4 = τ/8 = 45\\degree $ (A003881) <code>≈ 0.78539816…</code>\n$ π/4 = τ/8 = 45\\degree $ (A003881) <code>≈ 0.78539816…</code>\n$ π/6 = τ/12 = 30\\degree $ (A019673) <code>≈ 0.52359877…</code>\n$ π/6 = τ/12 = 30\\degree $ (A019673) <code>≈ 0.52359877…</code>\n$ π/6 = τ/12 = 30\\degree $ (A019673) <code>≈ 0.52359877…</code>\n$ π/6 = τ/12 = 30\\degree $ (A019673) <code>≈ 0.52359877…</code>\n$ π/6 = τ/12 = 30\\degree $ (A019673) <code>≈ 0.52359877…</code>\n$ π/8 = τ/16 = 22.5\\degree $ (A019675) <code>≈ 0.39269908…</code>\n$ π/8 = τ/16 = 22.5\\degree $ (A019675) <code>≈ 0.39269908…</code>\n$ π/8 = τ/16 = 22.5\\degree $ (A019675) <code>≈ 0.39269908…</code>\n$ π/8 = τ/16 = 22.5\\degree $ (A019675) <code>≈ 0.39269908…</code>\n$ π/8 = τ/16 = 22.5\\degree $ (A019675) <code>≈ 0.39269908…</code>\n$ τ/12 = π/6 = 30\\degree $ (A019673) <code>≈ 0.52359877…</code>\n$ τ/12 = π/6 = 30\\degree $ (A019673) <code>≈ 0.52359877…</code>\n$ τ/12 = π/6 = 30\\degree $ (A019673) <code>≈ 0.52359877…</code>\n$ τ/12 = π/6 = 30\\degree $ (A019673) <code>≈ 0.52359877…</code>\n$ τ/12 = π/6 = 30\\degree $ (A019673) <code>≈ 0.52359877…</code>\n$ τ/16 = π/8 = 22.5\\degree $ (A019675) <code>≈ 0.39269908…</code>\n$ τ/16 = π/8 = 22.5\\degree $ (A019675) <code>≈ 0.39269908…</code>\n$ τ/16 = π/8 = 22.5\\degree $ (A019675) <code>≈ 0.39269908…</code>\n$ τ/16 = π/8 = 22.5\\degree $ (A019675) <code>≈ 0.39269908…</code>\n$ τ/16 = π/8 = 22.5\\degree $ (A019675) <code>≈ 0.39269908…</code>\n$ τ/2 = π = 180\\degree $ (A000796) <code>≈ 3.14159265…</code>\n$ τ/2 = π = 180\\degree $ (A000796) <code>≈ 3.14159265…</code>\n$ τ/2 = π = 180\\degree $ (A000796) <code>≈ 3.14159265…</code>\n$ τ/2 = π = 180\\degree $ (A000796) <code>≈ 3.14159265…</code>\n$ τ/2 = π = 180\\degree $ (A000796) <code>≈ 3.14159265…</code>\n$ τ/24 = π/12 = 15\\degree $ (A019679) <code>≈ 0.26179938…</code>\n$ τ/24 = π/12 = 15\\degree $ (A019679) <code>≈ 0.26179938…</code>\n$ τ/24 = π/12 = 15\\degree $ (A019679) <code>≈ 0.26179938…</code>\n$ τ/24 = π/12 = 15\\degree $ (A019679) <code>≈ 0.26179938…</code>\n$ τ/24 = π/12 = 15\\degree $ (A019679) <code>≈ 0.26179938…</code>\n$ τ/3  = 2π/3 = 120\\degree $ (A019693) <code>≈ 2.09439510…</code>\n$ τ/3  = 2π/3 = 120\\degree $ (A019693) <code>≈ 2.09439510…</code>\n$ τ/3  = 2π/3 = 120\\degree $ (A019693) <code>≈ 2.09439510…</code>\n$ τ/3  = 2π/3 = 120\\degree $ (A019693) <code>≈ 2.09439510…</code>\n$ τ/3  = 2π/3 = 120\\degree $ (A019693) <code>≈ 2.09439510…</code>\n$ τ/360 = π/180 = 1\\degree $ <em>arc degree</em> (A019685, …\n$ τ/4 = π/2 = 90\\degree $ (A019693) <code>≈ 1.57079632…</code>\n$ τ/4 = π/2 = 90\\degree $ (A019693) <code>≈ 1.57079632…</code>\n$ τ/4 = π/2 = 90\\degree $ (A019693) <code>≈ 1.57079632…</code>\n$ τ/4 = π/2 = 90\\degree $ (A019693) <code>≈ 1.57079632…</code>\n$ τ/4 = π/2 = 90\\degree $ (A019693) <code>≈ 1.57079632…</code>\n$ τ/5 = 2π/5 = 72\\degree $ (A019694) <code>≈ 1.25663706…</code>\n$ τ/5 = 2π/5 = 72\\degree $ (A019694) <code>≈ 1.25663706…</code>\n$ τ/5 = 2π/5 = 72\\degree $ (A019694) <code>≈ 1.25663706…</code>\n$ τ/5 = 2π/5 = 72\\degree $ (A019694) <code>≈ 1.25663706…</code>\n$ τ/5 = 2π/5 = 72\\degree $ (A019694) <code>≈ 1.25663706…</code>\n$ τ/6 = π/3 = 60\\degree $ (A019670) <code>≈ 1.04719755…</code>\n$ τ/6 = π/3 = 60\\degree $ (A019670) <code>≈ 1.04719755…</code>\n$ τ/6 = π/3 = 60\\degree $ (A019670) <code>≈ 1.04719755…</code>\n$ τ/6 = π/3 = 60\\degree $ (A019670) <code>≈ 1.04719755…</code>\n$ τ/6 = π/3 = 60\\degree $ (A019670) <code>≈ 1.04719755…</code>\n$ τ/72 = π/36 = 5\\degree $ <code>≈ 0.08726646…</code>\n$ τ/72 = π/36 = 5\\degree $ <code>≈ 0.08726646…</code>\n$ τ/72 = π/36 = 5\\degree $ <code>≈ 0.08726646…</code>\n$ τ/72 = π/36 = 5\\degree $ <code>≈ 0.08726646…</code>\n$ τ/72 = π/36 = 5\\degree $ <code>≈ 0.08726646…</code>\n$ τ/8 = π/4 = 45\\degree $ (A003881) <code>≈ 0.78539816…</code>\n$ τ/8 = π/4 = 45\\degree $ (A003881) <code>≈ 0.78539816…</code>\n$ τ/8 = π/4 = 45\\degree $ (A003881) <code>≈ 0.78539816…</code>\n$ τ/8 = π/4 = 45\\degree $ (A003881) <code>≈ 0.78539816…</code>\n$ τ/8 = π/4 = 45\\degree $ (A003881) <code>≈ 0.78539816…</code>\n$ τ/9 = 2π/9 = 40\\degree $ (A019696) <code>≈ 0.69813170…</code>\n$ τ/9 = 2π/9 = 40\\degree $ (A019696) <code>≈ 0.69813170…</code>\n$ τ/9 = 2π/9 = 40\\degree $ (A019696) <code>≈ 0.69813170…</code>\n$ τ/9 = 2π/9 = 40\\degree $ (A019696) <code>≈ 0.69813170…</code>\n$ τ/9 = 2π/9 = 40\\degree $ (A019696) <code>≈ 0.69813170…</code>\n10^-15\n𝟙 🌐 Provides comprehensive floating-point operations …\n<code>core</code> A classification of floating point numbers.\n𝟙 🌐 Extension trait for floating-point types. …\n𝟙 🌐 Provides comprehensive fractional operations on <code>T</code>…\nAlias of <code>Gibi</code>.\nAlias of <code>Giga</code>.\n𝟙 ⚖️ A return type for the calculated GCD and the …\nAlias of <code>Gibi</code>.\n2^30.\n10^9\nAlias of <code>Hecto</code> (alternative).\nPermits generous deviation; suitable for less precise …\nPermits generous deviation; suitable for less precise …\nPermits generous deviation; suitable for less precise …\nPermits generous deviation; suitable for less precise …\nPermits generous deviation; suitable for less precise …\n10^2\nInfinity (∞).\nInfinity (∞).\nInfinity (∞).\nInfinity (∞).\nInfinity (∞).\nThe given bounds are not compatible.\nPositive or negative infinity, which often results from …\nThe internal representation of this numeric type.\n𝟙 🌐 Provides comprehensive integer operations on <code>T</code>, …\nAn invalid value was received for the given type or …\nAlias of <code>Kibi</code>.\nAlias of <code>Kilo</code> (alternative).\nAlias of <code>Kibi</code>.\n2^10.\n10^3\nln(10) (A002392) <code>≈ 2.30258509…</code>\nln(10) (A002392) <code>≈ 2.30258509…</code>\nln(10) (A002392) <code>≈ 2.30258509…</code>\nln(10) (A002392) <code>≈ 2.30258509…</code>\nln(10) (A002392) <code>≈ 2.30258509…</code>\nln(2) (A002162) <code>≈ 0.69314718…</code>\nln(2) (A002162) <code>≈ 0.69314718…</code>\nln(2) (A002162) <code>≈ 0.69314718…</code>\nln(2) (A002162) <code>≈ 0.69314718…</code>\nln(2) (A002162) <code>≈ 0.69314718…</code>\nlog10(2) (A007524) <code>≈ 0.30102999…</code>\nlog10(2) (A007524) <code>≈ 0.30102999…</code>\nlog10(2) (A007524) <code>≈ 0.30102999…</code>\nlog10(2) (A007524) <code>≈ 0.30102999…</code>\nlog10(2) (A007524) <code>≈ 0.30102999…</code>\nlog10(e) (A002285) <code>≈ 0.43429448…</code>\nlog10(e) (A002285) <code>≈ 0.43429448…</code>\nlog10(e) (A002285) <code>≈ 0.43429448…</code>\nlog10(e) (A002285) <code>≈ 0.43429448…</code>\nlog10(e) (A002285) <code>≈ 0.43429448…</code>\nlog2(10) (A020862) <code>≈ 3.32192809…</code>\nlog2(10) (A020862) <code>≈ 3.32192809…</code>\nlog2(10) (A020862) <code>≈ 3.32192809…</code>\nlog2(10) (A020862) <code>≈ 3.32192809…</code>\nlog2(10) (A020862) <code>≈ 3.32192809…</code>\n$ \\log_2{e} $ (A007525) <code>≈ 1.44269504…</code>\n$ \\log_2{e} $ (A007525) <code>≈ 1.44269504…</code>\n$ \\log_2{e} $ (A007525) <code>≈ 1.44269504…</code>\n$ \\log_2{e} $ (A007525) <code>≈ 1.44269504…</code>\n$ \\log_2{e} $ (A007525) <code>≈ 1.44269504…</code>\nAllows for minimal deviation; use for high precision …\nAllows for minimal deviation; use for high precision …\nAllows for minimal deviation; use for high precision …\nAllows for minimal deviation; use for high precision …\nAllows for minimal deviation; use for high precision …\nAlias of <code>Mebi</code>.\nAlias of <code>Mega</code>.\nNumber of significant digits in base 2.\nNumber of significant digits in base 2.\nNumber of significant digits in base 2.\nNumber of significant digits in base 2.\nNumber of significant digits in base 2.\nLargest finite value.\nLargest finite value.\nLargest finite value.\nLargest finite value.\nLargest finite value.\nMaximum <em>x</em> for which 10<em>x</em> is normal.\nMaximum <em>x</em> for which 10<em>x</em> is normal.\nMaximum <em>x</em> for which 10<em>x</em> is normal.\nMaximum <em>x</em> for which 10<em>x</em> is normal.\nMaximum <em>x</em> for which 10<em>x</em> is normal.\nMaximum possible power of 2 exponent.\nMaximum possible power of 2 exponent.\nMaximum possible power of 2 exponent.\nMaximum possible power of 2 exponent.\nMaximum possible power of 2 exponent.\nAccommodates moderate deviation; balances precision and …\nAccommodates moderate deviation; balances precision and …\nAccommodates moderate deviation; balances precision and …\nAccommodates moderate deviation; balances precision and …\nAccommodates moderate deviation; balances precision and …\nSmallest finite value.\nSmallest finite value.\nSmallest finite value.\nSmallest finite value.\nSmallest finite value.\nMinimum <em>x</em> for which 10<em>x</em> is normal.\nMinimum <em>x</em> for which 10<em>x</em> is normal.\nMinimum <em>x</em> for which 10<em>x</em> is normal.\nMinimum <em>x</em> for which 10<em>x</em> is normal.\nMinimum <em>x</em> for which 10<em>x</em> is normal.\nOne greater than the minimum possible normal power of 2 …\nOne greater than the minimum possible normal power of 2 …\nOne greater than the minimum possible normal power of 2 …\nOne greater than the minimum possible normal power of 2 …\nOne greater than the minimum possible normal power of 2 …\nSmallest positive normal value.\nSmallest positive normal value.\nSmallest positive normal value.\nSmallest positive normal value.\nSmallest positive normal value.\n2^20.\n10^6\nAlias of <code>Mebi</code>.\n10^-6\n10^-3\nThe provided values are not compatible in size.\nNot a Number (NaN).\nNot a Number (NaN).\nNot a Number (NaN).\nNot a Number (NaN).\nNot a Number (NaN).\n$ -1/φ = 1-φ $ <code>≈ -0.61803398…</code> <em>The negative </em>…\n$ -1/φ = 1-φ $ <code>≈ -0.61803398…</code> <em>The negative </em>…\n$ -1/φ = 1-φ $ <code>≈ -0.61803398…</code> <em>The negative </em>…\n$ -1/φ = 1-φ $ <code>≈ -0.61803398…</code> <em>The negative </em>…\n$ -1/φ = 1-φ $ <code>≈ -0.61803398…</code> <em>The negative </em>…\nNegative infinity (-∞).\nNegative infinity (-∞).\nNegative infinity (-∞).\nNegative infinity (-∞).\nNegative infinity (-∞).\nThe negative of the multiplicative identity -1.\nThe negative of the multiplicative identity -1.\nThe negative of the multiplicative identity -1.\nThe negative of the multiplicative identity -1.\nThe negative of the multiplicative identity -1.\nThe negative of the additive identity -0.\nThe negative of the additive identity -0.\nThe negative of the additive identity -0.\nThe negative of the additive identity -0.\nThe negative of the additive identity -0.\nWhether the number can represent big quantities.\nWhether the number uses a fixed-point representation.\nWhether the number uses a floating-point representation.\nWhether the number uses an integer representation.\nWhether the number has a memory niche optimization.\nWhether the number includes the sign.\nThe greatest representable value.\nThe greatest representable negative value, if applicable.\nThe greatest normalized value (e.g. 1.0 for float, <code>MAX</code> for …\nThe maximum representable power of two within the type’s …\nThe smallest representable value.\nThe smallest normalized value (e.g. 0.0 for float, <code>MIN</code> for …\nThe smallest representable positive value.\nThe additive inverse of <code>ONE</code> (<code>-1</code>), if applicable.\nThe multiplicative identity (<code>1</code>).\nThe smallest odd prime and the first nontrivial divisor (<code>3</code>…\nThe only even prime and the fundamental doubling factor (<code>2</code>…\nThe additive identity (<code>0</code>), if applicable.\nNaN (not a number): this value results from calculations …\n10^-9\nA negative sign (-).\nAn inverse doesn’t exist.\n∅ 𝟙 Represents the absence of a number.\nA non-negative value is required.\nA non-zero value is required.\nAn absence of sign, associated with Zero. (The default)\n2^0 (no prefix).\n10^0 (no prefix)\nA regular floating point number, not any of the …\nThe requested numerical functionality is not implemented.\nThe requested numerical functionality is not supported.\n𝟙 Common trait for numeric types.\nThe underlying numeric type implementing this trait.\n𝟙 Fundamental numeric constants for both integer and …\n𝟙 🚩+ A numeric-related error.\n𝟙 Common trait for integer types.\n𝟙 Common auto-trait for referenced numeric types.\n𝟙 Common auto-trait for referenced integer types.\n𝟙 ⚖️ A numeric-related result.\nThe multiplicative identity 1.\nThe multiplicative identity 1.\nThe multiplicative identity 1.\nThe multiplicative identity 1.\nThe multiplicative identity 1.\nContains the success value\nThe output type for operations.\nSpecifically signed output type for some operations (▶ …\nAn arithmetic overflow error, with an optional associated …\nThe owned version of this numeric type.\nAlias of <code>Pebi</code>.\nAlias of <code>Peta</code>.\n$ φ  = (1+\\sqrt{5})/2 $ (A001622) <code>≈ 1.61803398…</code> <em>The </em>…\n$ φ  = (1+\\sqrt{5})/2 $ (A001622) <code>≈ 1.61803398…</code> <em>The </em>…\n$ φ  = (1+\\sqrt{5})/2 $ (A001622) <code>≈ 1.61803398…</code> <em>The </em>…\n$ φ  = (1+\\sqrt{5})/2 $ (A001622) <code>≈ 1.61803398…</code> <em>The </em>…\n$ φ  = (1+\\sqrt{5})/2 $ (A001622) <code>≈ 1.61803398…</code> <em>The </em>…\n$ π = \\frac{1}{2} τ = 180\\degree $ (A000796) …\n$ π = \\frac{1}{2} τ = 180\\degree $ (A000796) …\n$ π = \\frac{1}{2} τ = 180\\degree $ (A000796) …\n$ π = \\frac{1}{2} τ = 180\\degree $ (A000796) …\n$ π = \\frac{1}{2} τ = 180\\degree $ (A000796) …\n2^50.\n10^15\nAlias of <code>Pebi</code>.\n10^-12\nA positive sign (+).\nA positive value is required.\nOffers methods for casting between primitives.\nOffers methods to construct a primitive from an array or …\nOffers methods to split a primitive into an array of …\nAlias of <code>Quetta</code>.\n10^-30\n10^30\nAlias of <code>Ronna</code>.\nThe radix or base of the internal representation.\nThe radix or base of the internal representation.\nThe radix or base of the internal representation.\nThe radix or base of the internal representation.\nThe radix or base of the internal representation.\nThe right hand side type for operations.\n10^27\n10^-27\nNumber of explicit bits used to represent the significand …\nNumber of explicit bits used to represent the significand …\nNumber of explicit bits used to represent the significand …\nNumber of explicit bits used to represent the significand …\nNumber of explicit bits used to represent the significand …\n$ \\sqrt{10} $ (A010467) <code>≈ 3.16227766…</code>\n$ \\sqrt{10} $ (A010467) <code>≈ 3.16227766…</code>\n$ \\sqrt{10} $ (A010467) <code>≈ 3.16227766…</code>\n$ \\sqrt{10} $ (A010467) <code>≈ 3.16227766…</code>\n$ \\sqrt{10} $ (A010467) <code>≈ 3.16227766…</code>\n$ \\sqrt{11} $ (A010468) <code>≈ 3.31662479…</code>\n$ \\sqrt{11} $ (A010468) <code>≈ 3.31662479…</code>\n$ \\sqrt{11} $ (A010468) <code>≈ 3.31662479…</code>\n$ \\sqrt{11} $ (A010468) <code>≈ 3.31662479…</code>\n$ \\sqrt{11} $ (A010468) <code>≈ 3.31662479…</code>\n$ \\sqrt{12} $ (A010469) <code>≈ 3.46410161…</code>\n$ \\sqrt{12} $ (A010469) <code>≈ 3.46410161…</code>\n$ \\sqrt{12} $ (A010469) <code>≈ 3.46410161…</code>\n$ \\sqrt{12} $ (A010469) <code>≈ 3.46410161…</code>\n$ \\sqrt{12} $ (A010469) <code>≈ 3.46410161…</code>\n$ \\sqrt{2} $ (A002193, wikipedia) <code>≈ 1.41421356…</code>\n$ \\sqrt{2} $ (A002193, wikipedia) <code>≈ 1.41421356…</code>\n$ \\sqrt{2} $ (A002193, wikipedia) <code>≈ 1.41421356…</code>\n$ \\sqrt{2} $ (A002193, wikipedia) <code>≈ 1.41421356…</code>\n$ \\sqrt{2} $ (A002193, wikipedia) <code>≈ 1.41421356…</code>\n$ \\sqrt{3} $ (A002194, wikipedia) <code>≈ 1.73205080…</code>\n$ \\sqrt{3} $ (A002194, wikipedia) <code>≈ 1.73205080…</code>\n$ \\sqrt{3} $ (A002194, wikipedia) <code>≈ 1.73205080…</code>\n$ \\sqrt{3} $ (A002194, wikipedia) <code>≈ 1.73205080…</code>\n$ \\sqrt{3} $ (A002194, wikipedia) <code>≈ 1.73205080…</code>\n$ \\sqrt{5} $ (A002163, wikipedia) <code>≈ 2.23606797…</code>\n$ \\sqrt{5} $ (A002163, wikipedia) <code>≈ 2.23606797…</code>\n$ \\sqrt{5} $ (A002163, wikipedia) <code>≈ 2.23606797…</code>\n$ \\sqrt{5} $ (A002163, wikipedia) <code>≈ 2.23606797…</code>\n$ \\sqrt{5} $ (A002163, wikipedia) <code>≈ 2.23606797…</code>\n$ \\sqrt{6} $ (A010464) <code>≈ 2.44948974…</code>\n$ \\sqrt{6} $ (A010464) <code>≈ 2.44948974…</code>\n$ \\sqrt{6} $ (A010464) <code>≈ 2.44948974…</code>\n$ \\sqrt{6} $ (A010464) <code>≈ 2.44948974…</code>\n$ \\sqrt{6} $ (A010464) <code>≈ 2.44948974…</code>\n$ \\sqrt{7} $ (A010465) <code>≈ 2.64575131…</code>\n$ \\sqrt{7} $ (A010465) <code>≈ 2.64575131…</code>\n$ \\sqrt{7} $ (A010465) <code>≈ 2.64575131…</code>\n$ \\sqrt{7} $ (A010465) <code>≈ 2.64575131…</code>\n$ \\sqrt{7} $ (A010465) <code>≈ 2.64575131…</code>\n$ \\sqrt{8} $ (A010466) <code>≈ 2.82842712…</code>\n$ \\sqrt{8} $ (A010466) <code>≈ 2.82842712…</code>\n$ \\sqrt{8} $ (A010466) <code>≈ 2.82842712…</code>\n$ \\sqrt{8} $ (A010466) <code>≈ 2.82842712…</code>\n$ \\sqrt{8} $ (A010466) <code>≈ 2.82842712…</code>\n$ \\sqrt{φ} $ (A139339) <code>≈ 1.27201964…</code>\n$ \\sqrt{φ} $ (A139339) <code>≈ 1.27201964…</code>\n$ \\sqrt{φ} $ (A139339) <code>≈ 1.27201964…</code>\n$ \\sqrt{φ} $ (A139339) <code>≈ 1.27201964…</code>\n$ \\sqrt{φ} $ (A139339) <code>≈ 1.27201964…</code>\n$ \\sqrt{π} = \\sqrt{\\frac{1}{2} τ} $ (A002161) …\n$ \\sqrt{π} = \\sqrt{\\frac{1}{2} τ} $ (A002161) …\n$ \\sqrt{π} = \\sqrt{\\frac{1}{2} τ} $ (A002161) …\n$ \\sqrt{π} = \\sqrt{\\frac{1}{2} τ} $ (A002161) …\n$ \\sqrt{π} = \\sqrt{\\frac{1}{2} τ} $ (A002161) …\n$ \\sqrt{τ} = \\sqrt{2π} $ (A019727) <code>≈ 2.50662827…</code>\n$ \\sqrt{τ} = \\sqrt{2π} $ (A019727) <code>≈ 2.50662827…</code>\n$ \\sqrt{τ} = \\sqrt{2π} $ (A019727) <code>≈ 2.50662827…</code>\n$ \\sqrt{τ} = \\sqrt{2π} $ (A019727) <code>≈ 2.50662827…</code>\n$ \\sqrt{τ} = \\sqrt{2π} $ (A019727) <code>≈ 2.50662827…</code>\n$ φ^2 = φ+1 = (3+\\sqrt{5})/2 $ (A104457) …\n$ φ^2 = φ+1 = (3+\\sqrt{5})/2 $ (A104457) …\n$ φ^2 = φ+1 = (3+\\sqrt{5})/2 $ (A104457) …\n$ φ^2 = φ+1 = (3+\\sqrt{5})/2 $ (A104457) …\n$ φ^2 = φ+1 = (3+\\sqrt{5})/2 $ (A104457) …\nRepresents the sign of a number.\n“Subnormal” or “denormal” floating point …\nAlias of <code>Tebi</code>.\nAlias of <code>Tera</code>.\n$ τ = 2π = 360\\degree $ (A019692) <code>≈ 6.28318530…</code> <em>The </em>…\n$ τ = 2π = 360\\degree $ (A019692) <code>≈ 6.28318530…</code> <em>The </em>…\n$ τ = 2π = 360\\degree $ (A019692) <code>≈ 6.28318530…</code> <em>The </em>…\n$ τ = 2π = 360\\degree $ (A019692) <code>≈ 6.28318530…</code> <em>The </em>…\n$ τ = 2π = 360\\degree $ (A019692) <code>≈ 6.28318530…</code> <em>The </em>…\n(A058265) <code>≈ 1.83928675…</code> <em>The tribonacci constant</em>.\n(A058265) <code>≈ 1.83928675…</code> <em>The tribonacci constant</em>.\n(A058265) <code>≈ 1.83928675…</code> <em>The tribonacci constant</em>.\n(A058265) <code>≈ 1.83928675…</code> <em>The tribonacci constant</em>.\n(A058265) <code>≈ 1.83928675…</code> <em>The tribonacci constant</em>.\n2^40.\n10^12\nAlias of <code>Tebi</code>.\nCommon trait for unit prefixes.\nBinary unit prefixes.\nSI (metric) unit prefixes.\nUnspecified error.\nAlias of <code>Yobi</code>.\nAlias of <code>Yotta</code>.\nAlias of <code>Yobi</code>.\n2^80.\n10^-24\n10^24\nAlias of <code>Zebi</code>.\nAlias of <code>Zetta</code>.\nThe additive identity 0.\nThe additive identity 0.\nThe additive identity 0.\nThe additive identity 0.\nThe additive identity 0.\n2^70.\n10^-21\nPositive or negative zero.\n10^21\nAlias of <code>Zebi</code>.\nAlias of <code>Atto</code>.\nThe absolute value of <code>self</code>.\nThe absolute value of <code>self</code>.\nReturns the absolute value of <code>self</code>.\nReturns the absolute value of <code>self</code> (no-op).\nThe arc cosine.\nThe arc cosine.\nThe arc cosine.\nComputes the arccosine using the Taylor expansion of …\nDetermines the number of terms needed for <code>acos_series</code> to …\nThe inverse hyperbolic cosine of <code>self</code>.\nThe inverse hyperbolic cosine.\nThe inverse hyperbolic cosine.\nComputes the inverse hyperbolic cosine using the natural …\nAdds two fractions.\nAdds two fractions.\nAdds two fractions.\nAdds two fractions.\nReturns the values as an array, if all are of the same …\nReturns the values as an array, if all are of the same …\nReturns the values as a tuple.\nReturns the values as a tuple, in compile-time.\nReturns an iterator in ascending order of magnitude.\nReturns an iterator in ascending order of magnitude.\nReturns an iterator in ascending order of magnitude.\nThe arc sine.\nThe arc sine.\nThe arc sine.\nComputes the arcsine using Taylor series expansion.\nDetermines the number of terms needed for <code>asin_series</code> to …\nThe inverse hyperbolic sine of <code>self</code>.\nThe inverse hyperbolic sine.\nThe inverse hyperbolic sine.\nComputes the inverse hyperbolic sine using the natural …\nThe arc tangent.\nThe arc tangent.\nThe arc tangent.\nThe arc tangent of two variables.\nThe arc tangent of two variables.\nThe arc tangent of two variables.\nComputes the four quadrant arctangent of <code>self</code> and <code>other</code> …\nComputes the arctangent using Taylor series expansion.\nDetermines the number of terms needed for <code>atan_series</code> to …\nThe inverse hyperbolic tangent of <code>self</code>.\nThe inverse hyperbolic tangent.\nThe inverse hyperbolic tangent.\nComputes the inverse hyperbolic tangent using the natural …\nAlias of <code>Centi</code>.\nThe cubic root.\nThe cubic root.\nThe cubic root.\n$ \\sqrt[3]{x} $ The cubic root calculated using the …\nThe smallest integer greater than or equal to <code>self</code>.\nThe smallest integer greater than or equal to <code>x</code>. $$ \\lceil …\nThe smallest integer greater than or equal to <code>x</code>. $$ \\lceil …\nCasts <code>self</code> to <code>i128</code> with range check.\nCasts from <code>u32</code> to <code>i128</code> with range check.\nCasts from <code>i64</code> to <code>i128</code> with range check.\nCasts from <code>u16</code> to <code>i128</code> with range check.\nCasts from <code>u64</code> to <code>i128</code> with range check.\nCasts from <code>i128</code> to <code>i128</code> with range check.\nCasts from <code>i16</code> to <code>i128</code> with range check.\nCasts from <code>i32</code> to <code>i128</code> with range check.\nCasts from <code>u128</code> to <code>i128</code> with range check.\nCasts from <code>u8</code> to <code>i128</code> with range check.\nCasts from <code>isize</code> to <code>i128</code> with range check.\nCasts from <code>usize</code> to <code>i128</code> with range check.\nCasts from <code>i8</code> to <code>i128</code> with range check.\nCasts <code>self</code> to <code>i16</code> with range check.\nCasts from <code>u16</code> to <code>i16</code> with range check.\nCasts from <code>u8</code> to <code>i16</code> with range check.\nCasts from <code>i16</code> to <code>i16</code> with range check.\nCasts from <code>u128</code> to <code>i16</code> with range check.\nCasts from <code>i8</code> to <code>i16</code> with range check.\nCasts from <code>i128</code> to <code>i16</code> with range check.\nCasts from <code>usize</code> to <code>i16</code> with range check.\nCasts from <code>i32</code> to <code>i16</code> with range check.\nCasts from <code>u64</code> to <code>i16</code> with range check.\nCasts from <code>i64</code> to <code>i16</code> with range check.\nCasts from <code>isize</code> to <code>i16</code> with range check.\nCasts from <code>u32</code> to <code>i16</code> with range check.\nCasts <code>self</code> to <code>i32</code> with range check.\nCasts from <code>u64</code> to <code>i32</code> with range check.\nCasts from <code>u128</code> to <code>i32</code> with range check.\nCasts from <code>i16</code> to <code>i32</code> with range check.\nCasts from <code>i128</code> to <code>i32</code> with range check.\nCasts from <code>isize</code> to <code>i32</code> with range check.\nCasts from <code>u16</code> to <code>i32</code> with range check.\nCasts from <code>u8</code> to <code>i32</code> with range check.\nCasts from <code>u32</code> to <code>i32</code> with range check.\nCasts from <code>i64</code> to <code>i32</code> with range check.\nCasts from <code>i32</code> to <code>i32</code> with range check.\nCasts from <code>usize</code> to <code>i32</code> with range check.\nCasts from <code>i8</code> to <code>i32</code> with range check.\nCasts <code>self</code> to <code>i64</code> with range check.\nCasts from <code>i8</code> to <code>i64</code> with range check.\nCasts from <code>i16</code> to <code>i64</code> with range check.\nCasts from <code>i128</code> to <code>i64</code> with range check.\nCasts from <code>u128</code> to <code>i64</code> with range check.\nCasts from <code>i64</code> to <code>i64</code> with range check.\nCasts from <code>u64</code> to <code>i64</code> with range check.\nCasts from <code>u8</code> to <code>i64</code> with range check.\nCasts from <code>isize</code> to <code>i64</code> with range check.\nCasts from <code>i32</code> to <code>i64</code> with range check.\nCasts from <code>u16</code> to <code>i64</code> with range check.\nCasts from <code>u32</code> to <code>i64</code> with range check.\nCasts from <code>usize</code> to <code>i64</code> with range check.\nCasts <code>self</code> to <code>i8</code> with range check.\nCasts from <code>u32</code> to <code>i8</code> with range check.\nCasts from <code>i8</code> to <code>i8</code> with range check.\nCasts from <code>i16</code> to <code>i8</code> with range check.\nCasts from <code>i128</code> to <code>i8</code> with range check.\nCasts from <code>u16</code> to <code>i8</code> with range check.\nCasts from <code>u64</code> to <code>i8</code> with range check.\nCasts from <code>u128</code> to <code>i8</code> with range check.\nCasts from <code>usize</code> to <code>i8</code> with range check.\nCasts from <code>isize</code> to <code>i8</code> with range check.\nCasts from <code>i32</code> to <code>i8</code> with range check.\nCasts from <code>u8</code> to <code>i8</code> with range check.\nCasts from <code>i64</code> to <code>i8</code> with range check.\nCasts <code>self</code> to <code>isize</code> with range check.\nCasts from <code>isize</code> to <code>isize</code> with range check.\nCasts from <code>usize</code> to <code>isize</code> with range check.\nCasts from <code>u16</code> to <code>isize</code> with range check.\nCasts from <code>u64</code> to <code>isize</code> with range check.\nCasts from <code>i64</code> to <code>isize</code> with range check.\nCasts from <code>u128</code> to <code>isize</code> with range check.\nCasts from <code>i32</code> to <code>isize</code> with range check.\nCasts from <code>i8</code> to <code>isize</code> with range check.\nCasts from <code>u32</code> to <code>isize</code> with range check.\nCasts from <code>i16</code> to <code>isize</code> with range check.\nCasts from <code>i128</code> to <code>isize</code> with range check.\nCasts from <code>u8</code> to <code>isize</code> with range check.\nCasts <code>self</code> to <code>isize_down</code> with range check.\nCasts from <code>isize</code> to <code>isize_down</code> with range check.\nCasts from <code>u16</code> to <code>isize_down</code> with range check.\nCasts from <code>usize</code> to <code>isize_down</code> with range check.\nCasts from <code>u32</code> to <code>isize_down</code> with range check.\nCasts from <code>i16</code> to <code>isize_down</code> with range check.\nCasts from <code>i64</code> to <code>isize_down</code> with range check.\nCasts from <code>u64</code> to <code>isize_down</code> with range check.\nCasts from <code>i32</code> to <code>isize_down</code> with range check.\nCasts from <code>u8</code> to <code>isize_down</code> with range check.\nCasts from <code>u128</code> to <code>isize_down</code> with range check.\nCasts from <code>i8</code> to <code>isize_down</code> with range check.\nCasts from <code>i128</code> to <code>isize_down</code> with range check.\nCasts <code>self</code> to <code>isize_up</code> with range check.\nCasts from <code>i32</code> to <code>isize_up</code> with range check.\nCasts from <code>u16</code> to <code>isize_up</code> with range check.\nCasts from <code>i8</code> to <code>isize_up</code> with range check.\nCasts from <code>i64</code> to <code>isize_up</code> with range check.\nCasts from <code>usize</code> to <code>isize_up</code> with range check.\nCasts from <code>i128</code> to <code>isize_up</code> with range check.\nCasts from <code>i16</code> to <code>isize_up</code> with range check.\nCasts from <code>isize</code> to <code>isize_up</code> with range check.\nCasts from <code>u32</code> to <code>isize_up</code> with range check.\nCasts from <code>u64</code> to <code>isize_up</code> with range check.\nCasts from <code>u8</code> to <code>isize_up</code> with range check.\nCasts from <code>u128</code> to <code>isize_up</code> with range check.\nCasts <code>self</code> to <code>u128</code> with range check.\nCasts from <code>u64</code> to <code>u128</code> with range check.\nCasts from <code>u8</code> to <code>u128</code> with range check.\nCasts from <code>i128</code> to <code>u128</code> with range check.\nCasts from <code>u16</code> to <code>u128</code> with range check.\nCasts from <code>u32</code> to <code>u128</code> with range check.\nCasts from <code>u128</code> to <code>u128</code> with range check.\nCasts from <code>usize</code> to <code>u128</code> with range check.\nCasts from <code>i8</code> to <code>u128</code> with range check.\nCasts from <code>i16</code> to <code>u128</code> with range check.\nCasts from <code>i32</code> to <code>u128</code> with range check.\nCasts from <code>isize</code> to <code>u128</code> with range check.\nCasts from <code>i64</code> to <code>u128</code> with range check.\nCasts <code>self</code> to <code>u16</code> with range check.\nCasts from <code>i64</code> to <code>u16</code> with range check.\nCasts from <code>i128</code> to <code>u16</code> with range check.\nCasts from <code>i8</code> to <code>u16</code> with range check.\nCasts from <code>u8</code> to <code>u16</code> with range check.\nCasts from <code>i16</code> to <code>u16</code> with range check.\nCasts from <code>i32</code> to <code>u16</code> with range check.\nCasts from <code>usize</code> to <code>u16</code> with range check.\nCasts from <code>u128</code> to <code>u16</code> with range check.\nCasts from <code>u16</code> to <code>u16</code> with range check.\nCasts from <code>isize</code> to <code>u16</code> with range check.\nCasts from <code>u32</code> to <code>u16</code> with range check.\nCasts from <code>u64</code> to <code>u16</code> with range check.\nCasts <code>self</code> to <code>u32</code> with range check.\nCasts from <code>isize</code> to <code>u32</code> with range check.\nCasts from <code>i128</code> to <code>u32</code> with range check.\nCasts from <code>u32</code> to <code>u32</code> with range check.\nCasts from <code>i16</code> to <code>u32</code> with range check.\nCasts from <code>usize</code> to <code>u32</code> with range check.\nCasts from <code>i8</code> to <code>u32</code> with range check.\nCasts from <code>i64</code> to <code>u32</code> with range check.\nCasts from <code>i32</code> to <code>u32</code> with range check.\nCasts from <code>u128</code> to <code>u32</code> with range check.\nCasts from <code>u8</code> to <code>u32</code> with range check.\nCasts from <code>u64</code> to <code>u32</code> with range check.\nCasts from <code>u16</code> to <code>u32</code> with range check.\nCasts <code>self</code> to <code>u64</code> with range check.\nCasts from <code>i128</code> to <code>u64</code> with range check.\nCasts from <code>u8</code> to <code>u64</code> with range check.\nCasts from <code>u32</code> to <code>u64</code> with range check.\nCasts from <code>usize</code> to <code>u64</code> with range check.\nCasts from <code>u128</code> to <code>u64</code> with range check.\nCasts from <code>u64</code> to <code>u64</code> with range check.\nCasts from <code>u16</code> to <code>u64</code> with range check.\nCasts from <code>i16</code> to <code>u64</code> with range check.\nCasts from <code>i64</code> to <code>u64</code> with range check.\nCasts from <code>i8</code> to <code>u64</code> with range check.\nCasts from <code>isize</code> to <code>u64</code> with range check.\nCasts from <code>i32</code> to <code>u64</code> with range check.\nCasts <code>self</code> to <code>u8</code> with range check.\nCasts from <code>isize</code> to <code>u8</code> with range check.\nCasts from <code>u128</code> to <code>u8</code> with range check.\nCasts from <code>i64</code> to <code>u8</code> with range check.\nCasts from <code>i32</code> to <code>u8</code> with range check.\nCasts from <code>i8</code> to <code>u8</code> with range check.\nCasts from <code>u32</code> to <code>u8</code> with range check.\nCasts from <code>i16</code> to <code>u8</code> with range check.\nCasts from <code>u16</code> to <code>u8</code> with range check.\nCasts from <code>u8</code> to <code>u8</code> with range check.\nCasts from <code>usize</code> to <code>u8</code> with range check.\nCasts from <code>i128</code> to <code>u8</code> with range check.\nCasts from <code>u64</code> to <code>u8</code> with range check.\nCasts <code>self</code> to <code>usize</code> with range check.\nCasts from <code>usize</code> to <code>usize</code> with range check.\nCasts from <code>i8</code> to <code>usize</code> with range check.\nCasts from <code>i128</code> to <code>usize</code> with range check.\nCasts from <code>u32</code> to <code>usize</code> with range check.\nCasts from <code>u64</code> to <code>usize</code> with range check.\nCasts from <code>u16</code> to <code>usize</code> with range check.\nCasts from <code>i16</code> to <code>usize</code> with range check.\nCasts from <code>i32</code> to <code>usize</code> with range check.\nCasts from <code>isize</code> to <code>usize</code> with range check.\nCasts from <code>i64</code> to <code>usize</code> with range check.\nCasts from <code>u8</code> to <code>usize</code> with range check.\nCasts from <code>u128</code> to <code>usize</code> with range check.\nCasts <code>self</code> to <code>usize_down</code> with range check.\nCasts from <code>u8</code> to <code>usize_down</code> with range check.\nCasts from <code>isize</code> to <code>usize_down</code> with range check.\nCasts from <code>i16</code> to <code>usize_down</code> with range check.\nCasts from <code>u32</code> to <code>usize_down</code> with range check.\nCasts from <code>usize</code> to <code>usize_down</code> with range check.\nCasts from <code>u16</code> to <code>usize_down</code> with range check.\nCasts from <code>i128</code> to <code>usize_down</code> with range check.\nCasts from <code>i8</code> to <code>usize_down</code> with range check.\nCasts from <code>i32</code> to <code>usize_down</code> with range check.\nCasts from <code>u64</code> to <code>usize_down</code> with range check.\nCasts from <code>u128</code> to <code>usize_down</code> with range check.\nCasts from <code>i64</code> to <code>usize_down</code> with range check.\nCasts <code>self</code> to <code>usize_up</code> with range check.\nCasts from <code>i8</code> to <code>usize_up</code> with range check.\nCasts from <code>u128</code> to <code>usize_up</code> with range check.\nCasts from <code>u32</code> to <code>usize_up</code> with range check.\nCasts from <code>isize</code> to <code>usize_up</code> with range check.\nCasts from <code>u8</code> to <code>usize_up</code> with range check.\nCasts from <code>u64</code> to <code>usize_up</code> with range check.\nCasts from <code>i16</code> to <code>usize_up</code> with range check.\nCasts from <code>i64</code> to <code>usize_up</code> with range check.\nCasts from <code>u16</code> to <code>usize_up</code> with range check.\nCasts from <code>i32</code> to <code>usize_up</code> with range check.\nCasts from <code>usize</code> to <code>usize_up</code> with range check.\nCasts from <code>i128</code> to <code>usize_up</code> with range check.\nReturns itself clamped between <code>min</code> and <code>max</code>, ignoring <code>NaN</code>.\nThe clamped value, propagating <code>NaN</code>.\nReturns itself clamped between <code>min</code> and <code>max</code>, propagating <code>NaN</code>…\nThe clamped value, using total order.\nReturns itself clamped between <code>min</code> and <code>max</code>, using total …\nReturns the floating point category of the number.\nCombinations of <code>n</code> items taken <code>r</code> at a time, ordered.\nCombinations of <code>n</code> items taken <code>r</code> at a time, unordered.\nCombinations of <code>n</code> items taken <code>r</code> at a time with …\nCombinations of <code>n</code> items taken <code>r</code> at a time with …\nThe smallest integer greater than or equal to itself.\nThe largest integer less than or equal to itself.\nThe fractional part.\nRaises itself to the <code>p</code> integer power.\nThe nearest integer to itself, default rounding\nThe nearest integer to itself, rounding ties away from <code>0.0</code>.\nReturns the nearest integer to <code>x</code>, rounding ties to the …\nThe integral and fractional parts.\nThe integral part. This means that non-integer numbers are …\nConverts a value from one unit prefix variant to another, …\nConverts a value from one binary prefix to another, …\nConverts a value from one SI prefix to another, returning …\nConverts a value from one prefix to another, returning the …\nConverts a value from one binary prefix to another, …\nConverts a value from one SI prefix to another, returning …\nConverts a value from one prefix to another, returning the …\nConverts a value from one binary prefix to another, …\nConverts a value from one SI prefix to another, returning …\nA number composed of a magnitude of <code>self</code> and the sign of …\nA number composed of the magnitude of itself and the <code>sign</code> …\nThe cosine.\nThe cosine.\nThe cosine.\nComputes the cosine using taylor series expansion.\nThe hyperbolic cosine.\nThe hyperbolic cosine.\nThe hyperbolic cosine.\nThe hyperbolic cosine calculated using Taylor series …\nAlias of <code>Deci</code>.\nAlias of <code>Deca</code>.\nAlias of <code>denominator</code>.\nAlias of <code>denominator</code>.\nReturns the denominator (the second number of the …\nReturns the denominator (the second number of the …\nReturns the denominator (the second number of the …\nReturns the denominator (the second number of the …\nApproximates the derivative of the 1D function <code>f</code> at <code>x</code> …\nApproximates the derivative of the 1D function <code>f</code> at <code>x</code> …\nReturns an iterator in descending order of magnitude.\nReturns an iterator in descending order of magnitude.\nReturns an iterator in descending order of magnitude.\nReturns the digital root in base 10.\nReturns the digital root in base 10.\nReturns the digital root in in the given absolute <code>base</code>.\nReturns the digital root in in the given absolute <code>base</code>.\nReturns the number of digits in base 10.\nReturns the number of digits in base 10.\nReturns the number of digits in the given absolute <code>base</code>.\nReturns the number of digits in the given <code>base</code>.\nReturns the number of digits in the given absolute <code>base</code>, …\nAn alias of <code>digits_base</code>.\nReturns the number of digits in base 10, including the …\nAn alias of <code>digits</code>.\nReturns the quotient, rounding the result towards positive …\nReturns the quotient, rounding the result towards positive …\nThe euclidean division.\nThe euclidean division.\nReturns the quotient, rounding the result towards negative …\nReturns the quotient, rounding the result towards negative …\nReturns the result of dividing <code>n</code> by <code>self</code>.\nReturns the result of dividing <code>n</code> by <code>self</code>.\nReturns the truncated quotient and the remainder.\nReturns the truncated quotient and the remainder.\nReturns the quotient, rounding ties away from zero.\nReturns the quotient, rounding ties away from zero.\nReturns the quotient, rounding ties to the nearest even …\nReturns the quotient, rounding ties to the nearest even …\nReturns the quotient, rounding ties to the nearest even …\nReturns the quotient, rounding ties to the nearest odd …\nReturns the quotient, rounding ties towards zero.\nReturns the quotient, rounding ties towards zero.\nReturns <code>true</code> if <code>n</code> is divisible by <code>self</code>.\nReturns <code>true</code> if <code>n</code> is divisible by <code>self</code>.\nThe error function.\nThe error function.\nThe complementary error function (1 - erf).\nThe complementary error function (1 - erf).\nEvaluates a polynomial at the <code>self</code> point value, using …\nEvaluates a polynomial at the <code>self</code> point value, using …\n$e^x$ (the exponential function).\n$e^x$ (the exponential function).\n$e^x$ (the exponential function).\nReturns the exponent corresponding to the unit prefix.\nReturns the exponent corresponding to the unit prefix.\nReturns the exponent corresponding to the unit prefix.\nReturns the exponent corresponding to the binary unit …\nReturns the exponent associated with the SI unit prefix.\n<code>10^x</code>.\n<code>10^x</code>.\n$2^x$.\n$2^x$.\n$2^x$.\nCalculates $ 2^x $ using the Taylor series expansion.\nDetermines the number of terms needed for <code>exp2_series</code> to …\nThe exponential minus 1, more accurately.\n$e^x -1$, more accurately for small values of <code>x</code>.\n$e^x -1$, more accurately for small values of <code>x</code>.\nCalculates $ e^x - 1 $ using the Taylor series expansion.\nComputes the exponential function $e^x$ using Taylor …\nDetermines the number of terms needed for <code>exp_series</code> to …\nAlias of <code>Femto</code>.\nReturns the multiplication factor for the prefix as an f64.\nReturns the multiplication factor for the binary prefix as …\nReturns the multiplication factor for the SI prefix as an …\nReturns the multiplication factor for the prefix as an …\nReturns the multiplication factor for the binary prefix as …\nReturns the multiplication factor for the SI prefix as an …\nReturns the multiplication factor for the prefix as an i64.\nReturns the multiplication factor for the binary prefix as …\nReturns the multiplication factor for the SI prefix as an …\nReturns the multiplication factor for the binary prefix as …\nThe factorial.\nThe factorial of the integer value <code>x</code>.\nReturns the factorial.\nReturns the factorial.\nReturns the factors (including 1 and self).\nReturns the factors (including 1 and self).\nWrites the factors in <code>fbuf</code>, and the unique prime factors …\nWrites the factors in <code>fbuf</code>, and the unique prime factors …\nReturns the prime factors.\nReturns the prime factors.\nWrites the prime factors in the given <code>buffer</code>.\nWrites the prime factors in the given <code>buffer</code>.\nReturns the count of prime factors.\nReturns the count of prime factors.\nReturns the unique prime factors.\nReturns the unique prime factors.\nWrites the prime factors in the given <code>buffer</code>.\nWrites the prime factors in the given <code>buffer</code>.\nReturns the count of unique prime factors.\nReturns the count of unique prime factors.\nReturns the unique prime factors with its exponent.\nReturns the unique prime factors with its exponent.\nWrites the unique prime factors in the given <code>fbuffer</code>, and …\nWrites the unique prime factors in the given <code>fbuffer</code>, and …\nWrites the prime factors in <code>pfbuf</code>, and the unique factors …\nWrites the prime factors in <code>pfbuf</code>, and the unique prime …\nReturns the proper factors.\nReturns the proper factors.\nWrites the proper factors in <code>fbuf</code>, and the unique prime …\nWrites the proper factors in <code>fbuf</code>, and the unique prime …\n$ 1 / \\sqrt{x} $ the fast inverse square root algorithm.\n$ 1 / \\sqrt{x} $ the fast inverse square root algorithm.\nFlips the sign of <code>self</code>.\nFlips its sign.\nThe largest integer less than or equal to <code>self</code>.\nThe largest integer less than or equal to <code>x</code>. $$ \\lfloor x …\nThe largest integer less than or equal to <code>x</code>. $$ \\lfloor x …\nThe fractional part of <code>self</code>.\nThe fractional part.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns <code>None</code> if 0, <code>Positive</code> if &gt; 0 and <code>Negative</code> if &lt; 0.\nReturns <code>None</code> if 0, <code>Positive</code> if &gt; 0 and <code>Negative</code> if &lt; 0.\nReturns the argument unchanged.\nReturns <code>None</code> if 0, <code>Positive</code> if &gt; 0 and <code>Negative</code> if &lt; 0.\nReturns <code>None</code> if 0, <code>Positive</code> if &gt; 0 and <code>Negative</code> if &lt; 0.\nReturns <code>None</code> if 0, <code>Positive</code> if &gt; 0 and <code>Negative</code> if &lt; 0.\nReturns <code>None</code> if 0.0, <code>Positive</code> if &gt; 0 and <code>Negative</code> if &lt; 0.\nReturns <code>None</code> if 0.0, <code>Positive</code> if &gt; 0 and <code>Negative</code> if &lt; 0.\nReturns <code>None</code> if 0, <code>Positive</code> if &gt; 0 and <code>Negative</code> if &lt; 0.\nReturns <code>None</code> if 0, <code>Positive</code> if &gt; 0 and <code>Negative</code> if &lt; 0.\nReturns <code>Positive</code> if <code>true</code> and <code>Negative</code> if <code>false</code>.\nReturns <code>None</code> if 0, <code>Positive</code> if &gt; 0 and <code>Negative</code> if &lt; 0.\nReturns <code>None</code> if 0, <code>Positive</code> if &gt; 0 and <code>Negative</code> if &lt; 0.\nReturns <code>None</code> if 0, <code>Positive</code> if &gt; 0 and <code>Negative</code> if &lt; 0.\nReturns <code>None</code> if 0, <code>Positive</code> if &gt; 0 and <code>Negative</code> if &lt; 0.\nReturns <code>None</code> if 0, <code>Positive</code> if &gt; 0 and <code>Negative</code> if &lt; 0.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstructs a primitive <code>T</code> from an array of <code>U</code> in big-endian …\nConstructs a primitive <code>T</code> from an array of <code>U</code> in …\nConstructs a primitive <code>T</code> from an array of <code>U</code> in …\nConstructs a primitive <code>T</code> from a slice of <code>U</code> in big-endian …\nConstructs a primitive <code>T</code> from a slice of <code>U</code> in …\nConstructs a primitive <code>T</code> from a slice of <code>U</code> in …\nConstructs a <code>u32</code> from an array of <code>[u16; 2]</code> in big-endian …\nConstructs a <code>u64</code> from an array of <code>[u16; 4]</code> in big-endian …\nConstructs a <code>u128</code> from an array of <code>[u16; 8]</code> in big-endian …\nConstructs a <code>u128</code> from an array of <code>[u16; 8]</code> in …\nConstructs a <code>u32</code> from an array of <code>[u16; 2]</code> in …\nConstructs a <code>u64</code> from an array of <code>[u16; 4]</code> in …\nConstructs a <code>u32</code> from an array of <code>[u16; 2]</code> in …\nConstructs a <code>u128</code> from an array of <code>[u16; 8]</code> in …\nConstructs a <code>u64</code> from an array of <code>[u16; 4]</code> in …\nConstructs a <code>u64</code> from an array of <code>[u32; 2]</code> in big-endian …\nConstructs a <code>u128</code> from an array of <code>[u32; 4]</code> in big-endian …\nConstructs a <code>u128</code> from an array of <code>[u32; 4]</code> in …\nConstructs a <code>u64</code> from an array of <code>[u32; 2]</code> in …\nConstructs a <code>u128</code> from an array of <code>[u32; 4]</code> in …\nConstructs a <code>u64</code> from an array of <code>[u32; 2]</code> in …\nConstructs a <code>u128</code> from an array of <code>[u64; 2]</code> in big-endian …\nConstructs a <code>u128</code> from an array of <code>[u64; 2]</code> in …\nConstructs a <code>u128</code> from an array of <code>[u64; 2]</code> in …\nConstructs a <code>u64</code> from an array of <code>[u8; 8]</code> in big-endian …\nConstructs a <code>u128</code> from an array of <code>[u8; 16]</code> in big-endian …\nConstructs a <code>u32</code> from an array of <code>[u8; 4]</code> in big-endian …\nConstructs a <code>u16</code> from an array of <code>[u8; 2]</code> in big-endian …\nConstructs a <code>u128</code> from an array of <code>[u8; 16]</code> in …\nConstructs a <code>u32</code> from an array of <code>[u8; 4]</code> in little-endian …\nConstructs a <code>u64</code> from an array of <code>[u8; 8]</code> in little-endian …\nConstructs a <code>u16</code> from an array of <code>[u8; 2]</code> in little-endian …\nConstructs a <code>u32</code> from an array of <code>[u8; 4]</code> in native-endian …\nConstructs a <code>u128</code> from an array of <code>[u8; 16]</code> in …\nConstructs a <code>u16</code> from an array of <code>[u8; 2]</code> in native-endian …\nConstructs a <code>u64</code> from an array of <code>[u8; 8]</code> in native-endian …\n⚙️ 𝟙 A pointer-sized floating-point primitive.\nThe gamma function. Generalizes the factorial function to …\nThe gamma function. Generalizes the factorial function to …\nReturns the GCD between the numerator and the denominator.\nReturns the GCD between the numerator and the denominator.\nReturns the GCD between the numerator and the denominator.\nReturns the GCD between the numerator and the denominator.\nReturns the GCD.\nReturns the GCD.\nThe greatest common divisor.\nReturns the GCD and the Bézout coeficients.\nReturns the GCD and the Bézout coeficients.\nReturns the GCD and the Bézout coeficients.\nReturns the GCD and the Bézout coeficients.\nGeometric types and operations, spatial constructs and …\nReturns the value that was used to construct this divisor …\nReturns the value that was used to construct this divisor …\nAlias of <code>Hecto</code>.\nThe hypothenuse (the euclidean distance).\nThe hypothenuse (the euclidean distance).\nThe hypothenuse (the euclidean distance).\nThe hypothenuse (the euclidean distance) using the fast …\nThe hypothenuse (the euclidean distance) using the …\nReturns the absolute value.\nReturns the absolute value.\nReturns the absolute value.\nReturns the number of combinations of <code>n</code> items taken <code>r</code> at a …\nReturns the number of combinations of <code>n</code> items taken <code>r</code> at a …\nReturns the number of combinations of <code>n</code> items taken <code>r</code> at a …\nReturns the number of permutations of <code>n</code> items taken <code>r</code> at a …\nReturns the number of permutations of <code>n</code> items taken <code>r</code> at a …\nReturns the number of permutations of <code>n</code> items taken <code>r</code> at a …\nReturns the digital root in base 10.\nReturns the digital root in base 10.\nReturns the digital root in base 10.\nReturns the digital root in the given <code>base</code>.\nReturns the digital root in the given <code>base</code>.\nReturns the digital root in the given <code>base</code>.\nReturns the number of digits in base 10.\nReturns the number of digits in base 10.\nReturns the number of digits in base 10.\nReturns the number of digits in the given <code>base</code>.\nReturns the number of digits in the given <code>base</code>.\nReturns the number of digits in the given <code>base</code>.\nReturns the number of digits in the given <code>base</code>.\nReturns the number of digits in the given <code>base</code>.\nReturns the number of digits in the given <code>base</code>.\nReturns the number of digits in base 10 including the …\nReturns the number of digits in base 10 including the …\nReturns the number of digits in base 10 including the …\nReturns the quotient, rounding the result towards positive …\nReturns the quotient, rounding the result towards positive …\nReturns the quotient, rounding the result towards positive …\nReturns the quotient, rounding the result towards negative …\nReturns the quotient, rounding the result towards negative …\nReturns the quotient, rounding the result towards negative …\nReturns the truncated quotient and the remainder.\nReturns the truncated quotient and the remainder.\nReturns the truncated quotient and the remainder.\nReturns the quotient, rounding ties away from zero.\nReturns the quotient, rounding ties away from zero.\nReturns the quotient, rounding ties away from zero.\nReturns the quotient, rounding ties to the nearest even …\nReturns the quotient, rounding ties to the nearest even …\nReturns the quotient, rounding ties to the nearest even …\nReturns the quotient, rounding ties to the nearest odd …\nReturns the quotient, rounding ties to the nearest odd …\nReturns the quotient, rounding ties to the nearest odd …\nReturns the quotient, rounding ties towards from zero.\nReturns the quotient, rounding ties towards from zero.\nReturns the quotient, rounding ties towards from zero.\nReturns the factorial.\nReturns the factorial.\nReturns the factorial.\nReturns the factors (including 1 and self).\nReturns the factors (including 1 and self).\nReturns the factors (including 1 and self).\nWrites the factors in <code>fbuf</code>, and the unique prime factors …\nWrites the factors in <code>fbuf</code>, and the unique prime factors …\nWrites the factors in <code>fbuf</code>, and the unique prime factors …\nReturns the prime factors.\nReturns the prime factors.\nReturns the prime factors.\nWrites the prime factors in the given <code>buffer</code>.\nWrites the prime factors in the given <code>buffer</code>.\nWrites the prime factors in the given <code>buffer</code>.\nReturns the unique prime factors.\nReturns the unique prime factors.\nReturns the unique prime factors.\nWrites the prime factors in the given <code>buffer</code>.\nWrites the prime factors in the given <code>buffer</code>.\nWrites the prime factors in the given <code>buffer</code>.\nReturns the proper factors.\nReturns the proper factors.\nReturns the proper factors.\nWrites the proper factors in <code>fbuf</code>, and the unique prime …\nWrites the proper factors in <code>fbuf</code>, and the unique prime …\nWrites the proper factors in <code>fbuf</code>, and the unique prime …\nReturns the GCD.\nReturns the GCD.\nReturns the GCD.\nReturns the GCD and the Bézout coeficients.\nReturns the GCD and the Bézout coeficients.\nReturns the GCD and the Bézout coeficients.\nReturns <code>true</code> if <code>self</code> is even.\nReturns <code>true</code> if <code>self</code> is even.\nReturns <code>true</code> if <code>self</code> is even.\nReturns <code>true</code> if <code>self</code> is odd.\nReturns <code>true</code> if <code>self</code> is odd.\nReturns <code>true</code> if <code>self</code> is odd.\nReturns <code>true</code> if <code>n</code> is prime.\nReturns <code>true</code> if <code>n</code> is prime.\nReturns <code>true</code> if <code>n</code> is prime.\nReturns <code>true</code> if it’s a perfect square.\nReturns <code>true</code> if it’s a perfect square.\nReturns <code>true</code> if it’s a perfect square.\nReturns the LCM.\nReturns the LCM.\nReturns the LCM.\nReturns the midpoint of <code>self</code> and <code>other</code>.\nReturns the midpoint of <code>self</code> and <code>other</code>.\nReturns the midpoint of <code>self</code> and <code>other</code>.\nComputes the non-negative modulo of <code>self</code> over |<code>modulus</code>|.\nComputes the non-negative modulo of <code>self</code> over |<code>modulus</code>|.\nComputes the non-negative modulo of <code>self</code> over |<code>modulus</code>|.\nComputes the modulo of <code>self + other</code> over |<code>modulus</code>|.\nComputes the modulo of <code>self + other</code> over |<code>modulus</code>|.\nComputes the modulo of <code>self + other</code> over |<code>modulus</code>|.\nComputes the modulo of <code>self + other</code> over |<code>modulus</code>|, and …\nComputes the modulo of <code>self + other</code> over |<code>modulus</code>|, and …\nComputes the modulo of <code>self + other</code> over |<code>modulus</code>|, and …\nCalculates the modular additive inverse.\nCalculates the modular additive inverse.\nCalculates the modular additive inverse.\nComputes the non-negative modulo of <code>self</code> over |<code>modulus</code>|, …\nComputes the non-negative modulo of <code>self</code> over |<code>modulus</code>|, …\nComputes the non-negative modulo of <code>self</code> over |<code>modulus</code>|, …\nComputes <code>self / other</code> over |<code>modulus</code>|.\nComputes <code>self / other</code> over |<code>modulus</code>|.\nComputes <code>self / other</code> over |<code>modulus</code>|.\nComputes the modulo of <code>self + other</code> over |<code>modulus</code>|.\nComputes the modulo of <code>self + other</code> over |<code>modulus</code>|.\nComputes the modulo of <code>self + other</code> over |<code>modulus</code>|.\nComputes the modulo of <code>self + other</code> over |<code>modulus</code>|, and …\nComputes the modulo of <code>self + other</code> over |<code>modulus</code>|, and …\nComputes the modulo of <code>self + other</code> over |<code>modulus</code>|, and …\nCalculates the modular multiplicative inverse.\nCalculates the modular multiplicative inverse.\nCalculates the modular multiplicative inverse.\nComputes the modulo of <code>self - other</code> over |<code>modulus</code>|.\nComputes the modulo of <code>self - other</code> over |<code>modulus</code>|.\nComputes the modulo of <code>self - other</code> over |<code>modulus</code>|.\nComputes the modulo of <code>self - other</code> over |<code>modulus</code>|, and …\nComputes the modulo of <code>self - other</code> over |<code>modulus</code>|, and …\nComputes the modulo of <code>self - other</code> over |<code>modulus</code>|, and …\nReturns the number of permutations of <code>n</code> items taken <code>r</code> at a …\nReturns the number of permutations of <code>n</code> items taken <code>r</code> at a …\nReturns the number of permutations of <code>n</code> items taken <code>r</code> at a …\nReturns the number of permutations of n<code>items taken</code>r` at a …\nReturns the number of permutations of n<code>items taken</code>r` at a …\nReturns the number of permutations of n<code>items taken</code>r` at a …\nFinds the 0-indexed <code>nth</code> prime number.\nFinds the 0-indexed <code>nth</code> prime number.\nFinds the 0-indexed <code>nth</code> prime number.\nCounts the number of primes upto and including <code>n</code>.\nCounts the number of primes upto and including <code>n</code>.\nCounts the number of primes upto and including <code>n</code>.\nCalls `NumInt::int_ref_abs.\nCalls `NumInt::int_ref_abs.\nCalls `NumInt::int_ref_abs.\nSimilar to int_abs, but operates on references instead of …\nSimilar to int_abs, but operates on references instead of …\nSimilar to int_abs, but operates on references instead of …\nCalls `NumInt::int_ref_combine.\nCalls `NumInt::int_ref_combine.\nCalls `NumInt::int_ref_combine.\nSimilar to int_combine, but operates on references instead …\nSimilar to int_combine, but operates on references instead …\nSimilar to int_combine, but operates on references instead …\nCalls `NumInt::int_ref_combine_rep.\nCalls `NumInt::int_ref_combine_rep.\nCalls `NumInt::int_ref_combine_rep.\nSimilar to int_combine_rep, but operates on references …\nSimilar to int_combine_rep, but operates on references …\nSimilar to int_combine_rep, but operates on references …\nCalls `NumInt::int_ref_digital_root.\nCalls `NumInt::int_ref_digital_root.\nCalls `NumInt::int_ref_digital_root.\nSimilar to int_digital_root, but operates on references …\nSimilar to int_digital_root, but operates on references …\nSimilar to int_digital_root, but operates on references …\nCalls `NumInt::int_ref_digital_root_base.\nCalls `NumInt::int_ref_digital_root_base.\nCalls `NumInt::int_ref_digital_root_base.\nSimilar to int_digital_root_base, but operates on …\nSimilar to int_digital_root_base, but operates on …\nSimilar to int_digital_root_base, but operates on …\nCalls `NumInt::int_ref_digits.\nCalls `NumInt::int_ref_digits.\nCalls `NumInt::int_ref_digits.\nSimilar to int_digits, but operates on references instead …\nSimilar to int_digits, but operates on references instead …\nSimilar to int_digits, but operates on references instead …\nCalls `NumInt::int_ref_digits_base.\nCalls `NumInt::int_ref_digits_base.\nCalls `NumInt::int_ref_digits_base.\nSimilar to int_digits_base, but operates on references …\nSimilar to int_digits_base, but operates on references …\nSimilar to int_digits_base, but operates on references …\nCalls `NumInt::int_ref_digits_base_sign.\nCalls `NumInt::int_ref_digits_base_sign.\nCalls `NumInt::int_ref_digits_base_sign.\nSimilar to int_digits_base_sign, but operates on …\nSimilar to int_digits_base_sign, but operates on …\nSimilar to int_digits_base_sign, but operates on …\nCalls `NumInt::int_ref_digits_sign.\nCalls `NumInt::int_ref_digits_sign.\nCalls `NumInt::int_ref_digits_sign.\nSimilar to int_digits_sign, but operates on references …\nSimilar to int_digits_sign, but operates on references …\nSimilar to int_digits_sign, but operates on references …\nCalls `NumInt::int_ref_div_ceil.\nCalls `NumInt::int_ref_div_ceil.\nCalls `NumInt::int_ref_div_ceil.\nSimilar to int_div_ceil, but operates on references …\nSimilar to int_div_ceil, but operates on references …\nSimilar to int_div_ceil, but operates on references …\nCalls `NumInt::int_ref_div_floor.\nCalls `NumInt::int_ref_div_floor.\nCalls `NumInt::int_ref_div_floor.\nSimilar to int_div_floor, but operates on references …\nSimilar to int_div_floor, but operates on references …\nSimilar to int_div_floor, but operates on references …\nCalls `NumInt::int_ref_div_rem.\nCalls `NumInt::int_ref_div_rem.\nCalls `NumInt::int_ref_div_rem.\nSimilar to int_div_rem, but operates on references instead …\nSimilar to int_div_rem, but operates on references instead …\nSimilar to int_div_rem, but operates on references instead …\nCalls `NumInt::int_ref_div_ties_away.\nCalls `NumInt::int_ref_div_ties_away.\nCalls `NumInt::int_ref_div_ties_away.\nSimilar to int_div_ties_away, but operates on references …\nSimilar to int_div_ties_away, but operates on references …\nSimilar to int_div_ties_away, but operates on references …\nCalls `NumInt::int_ref_div_ties_even.\nCalls `NumInt::int_ref_div_ties_even.\nCalls `NumInt::int_ref_div_ties_even.\nSimilar to int_div_ties_even, but operates on references …\nSimilar to int_div_ties_even, but operates on references …\nSimilar to int_div_ties_even, but operates on references …\nCalls `NumInt::int_ref_div_ties_odd.\nCalls `NumInt::int_ref_div_ties_odd.\nCalls `NumInt::int_ref_div_ties_odd.\nSimilar to int_div_ties_odd, but operates on references …\nSimilar to int_div_ties_odd, but operates on references …\nSimilar to int_div_ties_odd, but operates on references …\nCalls `NumInt::int_ref_div_ties_towards.\nCalls `NumInt::int_ref_div_ties_towards.\nCalls `NumInt::int_ref_div_ties_towards.\nSimilar to int_div_ties_towards, but operates on …\nSimilar to int_div_ties_towards, but operates on …\nSimilar to int_div_ties_towards, but operates on …\nCalls `NumInt::int_ref_factorial.\nCalls `NumInt::int_ref_factorial.\nCalls `NumInt::int_ref_factorial.\nSimilar to int_factorial, but operates on references …\nSimilar to int_factorial, but operates on references …\nSimilar to int_factorial, but operates on references …\nCalls `NumInt::int_ref_factors.\nCalls `NumInt::int_ref_factors.\nCalls `NumInt::int_ref_factors.\nSimilar to int_factors, but operates on references instead …\nSimilar to int_factors, but operates on references instead …\nSimilar to int_factors, but operates on references instead …\nCalls `NumInt::int_ref_factors_buf.\nCalls `NumInt::int_ref_factors_buf.\nCalls `NumInt::int_ref_factors_buf.\nSimilar to int_factors_buf, but operates on references …\nSimilar to int_factors_buf, but operates on references …\nSimilar to int_factors_buf, but operates on references …\nCalls `NumInt::int_ref_factors_prime.\nCalls `NumInt::int_ref_factors_prime.\nCalls `NumInt::int_ref_factors_prime.\nSimilar to int_factors_prime, but operates on references …\nSimilar to int_factors_prime, but operates on references …\nSimilar to int_factors_prime, but operates on references …\nCalls `NumInt::int_ref_factors_prime_buf.\nCalls `NumInt::int_ref_factors_prime_buf.\nCalls `NumInt::int_ref_factors_prime_buf.\nSimilar to int_factors_prime_buf, but operates on …\nSimilar to int_factors_prime_buf, but operates on …\nSimilar to int_factors_prime_buf, but operates on …\nCalls `NumInt::int_ref_factors_prime_unique.\nCalls `NumInt::int_ref_factors_prime_unique.\nCalls `NumInt::int_ref_factors_prime_unique.\nSimilar to int_factors_prime_unique, but operates on …\nSimilar to int_factors_prime_unique, but operates on …\nSimilar to int_factors_prime_unique, but operates on …\nCalls `NumInt::int_ref_factors_prime_unique_buf.\nCalls `NumInt::int_ref_factors_prime_unique_buf.\nCalls `NumInt::int_ref_factors_prime_unique_buf.\nSimilar to int_factors_prime_unique_buf, but operates on …\nSimilar to int_factors_prime_unique_buf, but operates on …\nSimilar to int_factors_prime_unique_buf, but operates on …\nCalls `NumInt::int_ref_factors_proper.\nCalls `NumInt::int_ref_factors_proper.\nCalls `NumInt::int_ref_factors_proper.\nSimilar to int_factors_proper, but operates on references …\nSimilar to int_factors_proper, but operates on references …\nSimilar to int_factors_proper, but operates on references …\nCalls `NumInt::int_ref_factors_proper_buf.\nCalls `NumInt::int_ref_factors_proper_buf.\nCalls `NumInt::int_ref_factors_proper_buf.\nSimilar to int_factors_proper_buf, but operates on …\nSimilar to int_factors_proper_buf, but operates on …\nSimilar to int_factors_proper_buf, but operates on …\nCalls `NumInt::int_ref_gcd.\nCalls `NumInt::int_ref_gcd.\nCalls `NumInt::int_ref_gcd.\nSimilar to int_gcd, but operates on references instead of …\nSimilar to int_gcd, but operates on references instead of …\nSimilar to int_gcd, but operates on references instead of …\nCalls `NumInt::int_ref_gcd_ext.\nCalls `NumInt::int_ref_gcd_ext.\nCalls `NumInt::int_ref_gcd_ext.\nSimilar to int_gcd_ext, but operates on references instead …\nSimilar to int_gcd_ext, but operates on references instead …\nSimilar to int_gcd_ext, but operates on references instead …\nCalls `NumInt::int_ref_is_even.\nCalls `NumInt::int_ref_is_even.\nCalls `NumInt::int_ref_is_even.\nSimilar to int_is_even, but operates on references instead …\nSimilar to int_is_even, but operates on references instead …\nSimilar to int_is_even, but operates on references instead …\nCalls `NumInt::int_ref_is_odd.\nCalls `NumInt::int_ref_is_odd.\nCalls `NumInt::int_ref_is_odd.\nSimilar to int_is_odd, but operates on references instead …\nSimilar to int_is_odd, but operates on references instead …\nSimilar to int_is_odd, but operates on references instead …\nCalls `NumInt::int_ref_is_prime.\nCalls `NumInt::int_ref_is_prime.\nCalls `NumInt::int_ref_is_prime.\nSimilar to int_is_prime, but operates on references …\nSimilar to int_is_prime, but operates on references …\nSimilar to int_is_prime, but operates on references …\nCalls `NumInt::int_ref_is_square.\nCalls `NumInt::int_ref_is_square.\nCalls `NumInt::int_ref_is_square.\nSimilar to int_is_square, but operates on references …\nSimilar to int_is_square, but operates on references …\nSimilar to int_is_square, but operates on references …\nCalls `NumInt::int_ref_lcm.\nCalls `NumInt::int_ref_lcm.\nCalls `NumInt::int_ref_lcm.\nSimilar to int_lcm, but operates on references instead of …\nSimilar to int_lcm, but operates on references instead of …\nSimilar to int_lcm, but operates on references instead of …\nCalls `NumInt::int_ref_midpoint.\nCalls `NumInt::int_ref_midpoint.\nCalls `NumInt::int_ref_midpoint.\nSimilar to int_midpoint, but operates on references …\nSimilar to int_midpoint, but operates on references …\nSimilar to int_midpoint, but operates on references …\nCalls `NumInt::int_ref_modulo.\nCalls `NumInt::int_ref_modulo.\nCalls `NumInt::int_ref_modulo.\nSimilar to int_modulo, but operates on references instead …\nSimilar to int_modulo, but operates on references instead …\nSimilar to int_modulo, but operates on references instead …\nCalls `NumInt::int_ref_modulo_add.\nCalls `NumInt::int_ref_modulo_add.\nCalls `NumInt::int_ref_modulo_add.\nSimilar to int_modulo_add, but operates on references …\nSimilar to int_modulo_add, but operates on references …\nSimilar to int_modulo_add, but operates on references …\nCalls `NumInt::int_ref_modulo_add_cycles.\nCalls `NumInt::int_ref_modulo_add_cycles.\nCalls `NumInt::int_ref_modulo_add_cycles.\nSimilar to int_modulo_add_cycles, but operates on …\nSimilar to int_modulo_add_cycles, but operates on …\nSimilar to int_modulo_add_cycles, but operates on …\nCalls `NumInt::int_ref_modulo_add_inv.\nCalls `NumInt::int_ref_modulo_add_inv.\nCalls `NumInt::int_ref_modulo_add_inv.\nSimilar to int_modulo_add_inv, but operates on references …\nSimilar to int_modulo_add_inv, but operates on references …\nSimilar to int_modulo_add_inv, but operates on references …\nCalls `NumInt::int_ref_modulo_cycles.\nCalls `NumInt::int_ref_modulo_cycles.\nCalls `NumInt::int_ref_modulo_cycles.\nSimilar to int_modulo_cycles, but operates on references …\nSimilar to int_modulo_cycles, but operates on references …\nSimilar to int_modulo_cycles, but operates on references …\nCalls `NumInt::int_ref_modulo_div.\nCalls `NumInt::int_ref_modulo_div.\nCalls `NumInt::int_ref_modulo_div.\nSimilar to int_modulo_div, but operates on references …\nSimilar to int_modulo_div, but operates on references …\nSimilar to int_modulo_div, but operates on references …\nCalls `NumInt::int_ref_modulo_mul.\nCalls `NumInt::int_ref_modulo_mul.\nCalls `NumInt::int_ref_modulo_mul.\nSimilar to int_modulo_mul, but operates on references …\nSimilar to int_modulo_mul, but operates on references …\nSimilar to int_modulo_mul, but operates on references …\nCalls `NumInt::int_ref_modulo_mul_cycles.\nCalls `NumInt::int_ref_modulo_mul_cycles.\nCalls `NumInt::int_ref_modulo_mul_cycles.\nSimilar to int_modulo_mul_cycles, but operates on …\nSimilar to int_modulo_mul_cycles, but operates on …\nSimilar to int_modulo_mul_cycles, but operates on …\nCalls `NumInt::int_ref_modulo_mul_inv.\nCalls `NumInt::int_ref_modulo_mul_inv.\nCalls `NumInt::int_ref_modulo_mul_inv.\nSimilar to int_modulo_mul_inv, but operates on references …\nSimilar to int_modulo_mul_inv, but operates on references …\nSimilar to int_modulo_mul_inv, but operates on references …\nCalls `NumInt::int_ref_modulo_sub.\nCalls `NumInt::int_ref_modulo_sub.\nCalls `NumInt::int_ref_modulo_sub.\nSimilar to int_modulo_sub, but operates on references …\nSimilar to int_modulo_sub, but operates on references …\nSimilar to int_modulo_sub, but operates on references …\nCalls `NumInt::int_ref_modulo_sub_cycles.\nCalls `NumInt::int_ref_modulo_sub_cycles.\nCalls `NumInt::int_ref_modulo_sub_cycles.\nSimilar to int_modulo_sub_cycles, but operates on …\nSimilar to int_modulo_sub_cycles, but operates on …\nSimilar to int_modulo_sub_cycles, but operates on …\nCalls `NumInt::int_ref_permute.\nCalls `NumInt::int_ref_permute.\nCalls `NumInt::int_ref_permute.\nSimilar to int_permute, but operates on references instead …\nSimilar to int_permute, but operates on references instead …\nSimilar to int_permute, but operates on references instead …\nCalls `NumInt::int_ref_permute_rep.\nCalls `NumInt::int_ref_permute_rep.\nCalls `NumInt::int_ref_permute_rep.\nSimilar to int_permute_rep, but operates on references …\nSimilar to int_permute_rep, but operates on references …\nSimilar to int_permute_rep, but operates on references …\nCalls `NumInt::int_ref_prime_nth.\nCalls `NumInt::int_ref_prime_nth.\nCalls `NumInt::int_ref_prime_nth.\nSimilar to int_prime_nth, but operates on references …\nSimilar to int_prime_nth, but operates on references …\nSimilar to int_prime_nth, but operates on references …\nCalls `NumInt::int_ref_prime_pi.\nCalls `NumInt::int_ref_prime_pi.\nCalls `NumInt::int_ref_prime_pi.\nSimilar to int_prime_pi, but operates on references …\nSimilar to int_prime_pi, but operates on references …\nSimilar to int_prime_pi, but operates on references …\nCalls `NumInt::int_ref_root_ceil.\nCalls `NumInt::int_ref_root_ceil.\nCalls `NumInt::int_ref_root_ceil.\nSimilar to int_root_ceil, but operates on references …\nSimilar to int_root_ceil, but operates on references …\nSimilar to int_root_ceil, but operates on references …\nCalls `NumInt::int_ref_root_floor.\nCalls `NumInt::int_ref_root_floor.\nCalls `NumInt::int_ref_root_floor.\nSimilar to int_root_floor, but operates on references …\nSimilar to int_root_floor, but operates on references …\nSimilar to int_root_floor, but operates on references …\nCalls `NumInt::int_ref_scale.\nCalls `NumInt::int_ref_scale.\nCalls `NumInt::int_ref_scale.\nSimilar to int_scale, but operates on references instead …\nSimilar to int_scale, but operates on references instead …\nSimilar to int_scale, but operates on references instead …\nCalls `NumInt::int_ref_scale_wrap.\nCalls `NumInt::int_ref_scale_wrap.\nCalls `NumInt::int_ref_scale_wrap.\nSimilar to int_scale_wrap, but operates on references …\nSimilar to int_scale_wrap, but operates on references …\nSimilar to int_scale_wrap, but operates on references …\nCalls `NumInt::int_ref_sqrt_ceil.\nCalls `NumInt::int_ref_sqrt_ceil.\nCalls `NumInt::int_ref_sqrt_ceil.\nSimilar to int_sqrt_ceil, but operates on references …\nSimilar to int_sqrt_ceil, but operates on references …\nSimilar to int_sqrt_ceil, but operates on references …\nCalls `NumInt::int_ref_sqrt_floor.\nCalls `NumInt::int_ref_sqrt_floor.\nCalls `NumInt::int_ref_sqrt_floor.\nSimilar to int_sqrt_floor, but operates on references …\nSimilar to int_sqrt_floor, but operates on references …\nSimilar to int_sqrt_floor, but operates on references …\nCalls `NumInt::int_ref_sqrt_round.\nCalls `NumInt::int_ref_sqrt_round.\nCalls `NumInt::int_ref_sqrt_round.\nSimilar to int_sqrt_round, but operates on references …\nSimilar to int_sqrt_round, but operates on references …\nSimilar to int_sqrt_round, but operates on references …\nCalls `NumInt::int_ref_subfactorial.\nCalls `NumInt::int_ref_subfactorial.\nCalls `NumInt::int_ref_subfactorial.\nSimilar to int_subfactorial, but operates on references …\nSimilar to int_subfactorial, but operates on references …\nSimilar to int_subfactorial, but operates on references …\nCalls `NumInt::int_ref_totient.\nCalls `NumInt::int_ref_totient.\nCalls `NumInt::int_ref_totient.\nSimilar to int_totient, but operates on references instead …\nSimilar to int_totient, but operates on references instead …\nSimilar to int_totient, but operates on references instead …\nReturns the ceiled integer <code>nth</code> root.\nReturns the ceiled integer <code>nth</code> root.\nReturns the ceiled integer <code>nth</code> root.\nReturns the floored integer <code>nth</code> root.\nReturns the floored integer <code>nth</code> root.\nReturns the floored integer <code>nth</code> root.\nReturns a scaled value in <code>[min..=max]</code> to a new range …\nReturns a scaled value in <code>[min..=max]</code> to a new range …\nReturns a scaled value in <code>[min..=max]</code> to a new range …\nReturns a scaled value between <code>[min..=max]</code> to a new range …\nReturns a scaled value between <code>[min..=max]</code> to a new range …\nReturns a scaled value between <code>[min..=max]</code> to a new range …\nReturns the ceiled integer square root.\nReturns the ceiled integer square root.\nReturns the ceiled integer square root.\nReturns the floored integer square root.\nReturns the floored integer square root.\nReturns the floored integer square root.\nReturns the rounded integer square root.\nReturns the rounded integer square root.\nReturns the rounded integer square root.\nReturns the subfactorial, or the number of derangements.\nReturns the subfactorial, or the number of derangements.\nReturns the subfactorial, or the number of derangements.\nCounts the number of integers $&lt;|n|$ that are relatively …\nCounts the number of integers $&lt;|n|$ that are relatively …\nCounts the number of integers $&lt;|n|$ that are relatively …\nApproximates the integral of the 1D function <code>f</code> over the …\nApproximates the integral of the 1D function <code>f</code> over the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSplits <code>self</code> into an array of <code>T</code> in big-endian order.\nSplits <code>self</code> into an array of <code>T</code> in little-endian order.\nSplits <code>self</code> into an array of <code>T</code> in native-endian order.\nSplits a <code>u32</code> into an array of <code>[u16; 2]</code> in big-endian order.\nSplits a <code>u128</code> into an array of <code>[u16; 8]</code> in big-endian …\nSplits a <code>u64</code> into an array of <code>[u16; 4]</code> in big-endian order.\nSplits a <code>u32</code> into an array of <code>[u16; 2]</code> in little-endian …\nSplits a <code>u128</code> into an array of <code>[u16; 8]</code> in little-endian …\nSplits a <code>u64</code> into an array of <code>[u16; 4]</code> in little-endian …\nSplits a <code>u64</code> into an array of <code>[u16; 4]</code> in native-endian …\nSplits a <code>u32</code> into an array of <code>[u16; 2]</code> in native-endian …\nSplits a <code>u128</code> into an array of <code>[u16; 8]</code> in native-endian …\nSplits a <code>u128</code> into an array of <code>[u32; 4]</code> in big-endian …\nSplits a <code>u64</code> into an array of <code>[u32; 2]</code> in big-endian order.\nSplits a <code>u128</code> into an array of <code>[u32; 4]</code> in little-endian …\nSplits a <code>u64</code> into an array of <code>[u32; 2]</code> in little-endian …\nSplits a <code>u128</code> into an array of <code>[u32; 4]</code> in native-endian …\nSplits a <code>u64</code> into an array of <code>[u32; 2]</code> in native-endian …\nSplits a <code>u128</code> into an array of <code>[u64; 2]</code> in big-endian …\nSplits a <code>u128</code> into an array of <code>[u64; 2]</code> in little-endian …\nSplits a <code>u128</code> into an array of <code>[u64; 2]</code> in native-endian …\nSplits a <code>u64</code> into an array of <code>[u8; 8]</code> in big-endian order.\nSplits a <code>u128</code> into an array of <code>[u8; 16]</code> in big-endian …\nSplits a <code>u16</code> into an array of <code>[u8; 2]</code> in big-endian order.\nSplits a <code>u32</code> into an array of <code>[u8; 4]</code> in big-endian order.\nSplits a <code>u16</code> into an array of <code>[u8; 2]</code> in little-endian …\nSplits a <code>u128</code> into an array of <code>[u8; 16]</code> in little-endian …\nSplits a <code>u64</code> into an array of <code>[u8; 8]</code> in little-endian …\nSplits a <code>u32</code> into an array of <code>[u8; 4]</code> in little-endian …\nSplits a <code>u32</code> into an array of <code>[u8; 4]</code> in native-endian …\nSplits a <code>u128</code> into an array of <code>[u8; 16]</code> in native-endian …\nSplits a <code>u64</code> into an array of <code>[u8; 8]</code> in native-endian …\nSplits a <code>u16</code> into an array of <code>[u8; 2]</code> in native-endian …\nReturns <code>true</code> if <code>self</code> is an even number.\nReturns <code>true</code> if <code>self</code> is an even number.\nWhether <code>self</code> is equal to <code>NUM_MAX</code>.\nWhether <code>self</code> is equal to <code>NUM_MAX</code>.\nWhether <code>self</code> is equal to <code>NUM_MAX</code>.\nWhether <code>self</code> is equal to <code>NUM_MAX_NEGATIVE</code>.\nWhether <code>self</code> is equal to <code>NUM_MAX_NEGATIVE</code>.\nWhether <code>self</code> is equal to <code>NUM_MAX_NEGATIVE</code>.\nWhether <code>self</code> is equal to <code>NUM_MAX_NORM</code>.\nWhether <code>self</code> is equal to <code>NUM_MAX_NORM</code>.\nWhether <code>self</code> is equal to <code>NUM_MAX_NORM</code>.\nWhether <code>self</code> is equal to <code>NUM_MAX_POWER_OF_TWO</code>.\nWhether <code>self</code> is equal to <code>NUM_MAX_POWER_OF_TWO</code>.\nWhether <code>self</code> is equal to <code>NUM_MAX_POWER_OF_TWO</code>.\nWhether <code>self</code> is equal to <code>NUM_MIN</code>.\nWhether <code>self</code> is equal to <code>NUM_MIN</code>.\nWhether <code>self</code> is equal to <code>NUM_MIN</code>.\nWhether <code>self</code> is equal to <code>NUM_MIN_NORM</code>.\nWhether <code>self</code> is equal to <code>NUM_MIN_NORM</code>.\nWhether <code>self</code> is equal to <code>NUM_MIN_NORM</code>.\nWhether <code>self</code> is equal to <code>Some(</code><code>NUM_MIN_POSITIVE</code><code>)</code>.\nWhether <code>self</code> is equal to <code>Some(</code><code>NUM_MIN_POSITIVE</code><code>)</code>.\nWhether <code>self</code> is equal to <code>Some(</code><code>NUM_MIN_POSITIVE</code><code>)</code>.\nWhether <code>self</code> is equal to <code>NUM_NEG_ONE</code>.\nWhether <code>self</code> is equal to <code>NUM_NEG_ONE</code>.\nWhether <code>self</code> is equal to <code>NUM_NEG_ONE</code>.\nWhether <code>self</code> is equal to <code>NUM_ONE</code>.\nWhether <code>self</code> is equal to <code>NUM_ONE</code>.\nWhether <code>self</code> is equal to <code>NUM_ONE</code>.\nWhether <code>self</code> is equal to <code>NUM_THREE</code>.\nWhether <code>self</code> is equal to <code>NUM_THREE</code>.\nWhether <code>self</code> is equal to <code>NUM_THREE</code>.\nWhether <code>self</code> is equal to <code>NUM_TWO</code>.\nWhether <code>self</code> is equal to <code>NUM_TWO</code>.\nWhether <code>self</code> is equal to <code>NUM_TWO</code>.\nWhether <code>self</code> is equal to <code>NUM_ZERO</code>.\nWhether <code>self</code> is equal to <code>NUM_ZERO</code>.\nWhether <code>self</code> is equal to <code>NUM_ZERO</code>.\nReturns <code>true</code> if <code>self</code> is an odd number.\nReturns <code>true</code> if <code>self</code> is an odd number.\nReturns <code>true</code> if <code>n</code> is prime.\nReturns <code>true</code> if <code>n</code> is prime.\nReturns <code>true</code> if the fraction is proper …\nReturns <code>true</code> if the fraction is proper …\nReturns <code>true</code> if the fraction is proper …\nReturns <code>true</code> if the fraction is proper …\nRetuns <code>true</code> if the fraction is in the simplest possible …\nRetuns <code>true</code> if the fraction is in the simplest possible …\nRetuns <code>true</code> if the fraction is in the simplest possible …\nRetuns <code>true</code> if the fraction is in the simplest possible …\nReturns <code>true</code> if <code>self</code> has a negative sign.\nReturns <code>true</code> if <code>self</code> has a negative sign.\nReturns <code>true</code> if <code>self</code> has a negative sign and is not zero.\nReturns <code>true</code> if <code>self</code> has a negative sign and is not zero.\nReturns <code>true</code> if <code>self</code> has a positive sign.\nReturns <code>true</code> if <code>self</code> has a positive sign.\nReturns <code>true</code> if <code>self</code> has a positive sign and is not zero.\nReturns <code>true</code> if <code>self</code> has a positive sign and is not zero.\nReturns <code>true</code> if it’s a perfect square.\nReturns <code>true</code> if it’s a perfect square, false otherwise.\nRetuns <code>true</code> if the fraction is valid <code>(denominator != 0)</code>.\nRetuns <code>true</code> if the fraction is valid <code>(denominator != 0)</code>.\nRetuns <code>true</code> if the fraction is valid <code>(denominator != 0)</code>.\nRetuns <code>true</code> if the fraction is valid <code>(denominator != 0)</code>.\nReturns <code>true</code> if <code>self</code> is either 0.0 or -0.0.\nReturns <code>true</code> if <code>self</code> is 0.0 or -0.0.\n⚙️ 𝟙 A downcasted pointer-sized signed integer …\n⚙️ 𝟙 An upcasted pointer-sized signed integer …\nThe bessel function of the first kind, of order 0.\nThe bessel function of the first kind, of order 0.\nThe bessel function of the first kind, of order 1.\nThe bessel function of the first kind, of order 1.\nBessel function of the first kind, of order <code>n</code>.\nAlias of <code>Kibi</code>.\nAlias of <code>Kilo</code>.\nReturns the LCM between the numerator and the denominator.\nReturns the LCM between the numerator and the denominator.\nReturns the LCM between the numerator and the denominator.\nReturns the LCM between the numerator and the denominator.\nReturns the LCM.\nReturns the LCM.\nCalculates a linearly interpolated value between <code>u..=v</code> …\nCalculates a linearly interpolated value between <code>u..=v</code> …\nThe natural logarithm of the absolute value of the gamma …\nThe natural logarithm of the absolute value of the gamma …\nThe natural logarithm of the absolute value of the gamma …\nThe natural logarithm of <code>self</code>.\nThe natural logarithm.\nThe natural logarithm.\nThe natural logarithm of <code>self</code> plus 1, more accurately.\nThe natural logarithm plus 1, more accurately.\nThe natural logarithm plus 1, more accurately.\nComputes the natural logarithm of <code>1 + self</code> using a …\nComputes the natural logarithm of <code>self</code> using a …\nDetermines the number of terms needed for <code>exp2_series</code> to …\nThe logarithm of <code>self</code> with respect to an arbitrary <code>base</code>.\nThe logarithm of the number with respect to an arbitrary …\nThe base 10 logarithm of <code>self</code>.\nThe base 10 logarithm.\nThe base 10 logarithm.\nComputes the base-10 logarithm using the change of base …\nThe base 2 logarithm of <code>self</code>.\nThe base 2 logarithm.\nThe base 2 logarithm.\nComputes the base-2 logarithm using the change of base …\nComputes the logarithm to the given <code>base</code> using the change …\nLogic related types and functionality.\nAlias of <code>Milli</code>.\nThe maximum between itself and <code>other</code>, ignoring <code>NaN</code>.\nThe maximum of two numbers, propagating <code>NaN</code>.\nReturns the maximum between itself and <code>other</code>, propagating …\nThe maximum of two numbers using total order.\nReturns the maximum between itself and <code>other</code>, using total …\nCalculates the middle point of <code>self</code> and <code>other</code>.\nCalculates the middle point of <code>self</code> and <code>other</code>.\nThe minimum between itself and other, ignoring <code>NaN</code>.\nThe minimum of two numbers, propagating <code>NaN</code>.\nReturns the minimum between itself and <code>other</code>, propagating …\nThe minimum of two numbers using total order.\nReturns the minimum between itself and <code>other</code>, using total …\nComputes the non-negative modulo of <code>self</code> over |<code>modulus</code>|.\nComputes the non-negative modulo of <code>self</code> over <code>modulus</code>.\nComputes the non-negative modulo of <code>self + other</code> over |…\nComputes the modulo of <code>self + other</code> over <code>modulus</code>.\nComputes the non-negative modulo of <code>self + other</code> over |…\nComputes the modulo of <code>self + other</code> over <code>modulus</code>, and the …\nComputes the non-negative modulo of <code>self + other</code> over |…\nComputes the modulo of <code>self + other</code> over <code>modulus</code>, and the …\nCalculates the modular additive inverse.\nCalculates the modular additive inverse.\nCalculates the modular additive inverse, unchecked version.\nCalculates the modular additive inverse, unchecked version.\nComputes the modulo of <code>self + other</code> over <code>modulus</code>, …\nComputes the non-negative modulo of <code>self + other</code> over |…\nComputes the non-negative modulo of <code>self</code> over |<code>modulus</code>|, …\nComputes the non-negative modulo of <code>self</code> over <code>modulus</code>, and …\nComputes the non-negative modulo of <code>self</code> over |<code>modulus</code>|, …\nComputes the non-negative modulo of <code>self</code> over <code>modulus</code>, and …\nComputes <code>self / other</code> over <code>modulus</code>.\nComputes <code>self / other</code> over |<code>modulus</code>|.\nComputes <code>self / other</code> over |<code>modulus</code>|, unchecked version.\nComputes <code>self / other</code> over <code>modulus</code>, unchecked version.\nComputes the non-negative modulo of <code>self + other</code> over |…\nComputes the modulo of <code>self + other</code> over <code>modulus</code>.\nComputes the non-negative modulo of <code>self + other</code> over |…\nComputes the modulo of <code>self + other</code> over <code>modulus</code>, and the …\nComputes the modulo of <code>self + other</code> over <code>modulus</code>, and the …\nComputes the non-negative modulo of <code>self + other</code> over |…\nCalculates the modular multiplicative inverse.\nCalculates the modular multiplicative inverse.\nCalculates the modular multiplicative inverse, unchecked …\nCalculates the modular multiplicative inverse, unchecked …\nComputes the non-negative modulo of <code>self + other</code> over |…\nComputes the modulo of <code>self + other</code> over <code>modulus</code>, …\nComputes the modulo of <code>self - other</code> over <code>modulus</code>.\nComputes the modulo of <code>self - other</code> over |<code>modulus</code>|.")