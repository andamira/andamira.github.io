(function() {
    var type_impls = Object.fromEntries([["devela",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-Limits\" class=\"impl\"><a href=\"#impl-Clone-for-Limits\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"devela/code/trait.Clone.html\" title=\"trait devela::code::Clone\">Clone</a> for <a class=\"struct\" href=\"devela/_dep/image/struct.Limits.html\" title=\"struct devela::_dep::image::Limits\">Limits</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/code/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; <a class=\"struct\" href=\"devela/_dep/image/struct.Limits.html\" title=\"struct devela::_dep::image::Limits\">Limits</a></h4></section></summary><div class='docblock'>Returns a duplicate of the value. <a href=\"devela/code/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/clone.rs.html#246-248\">Source</a></span><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/code/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: &amp;Self)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a href=\"devela/code/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details>","Clone","devela::_dep::image::io::Limits"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-Limits\" class=\"impl\"><a href=\"#impl-Debug-for-Limits\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"devela/all/trait.Debug.html\" title=\"trait devela::all::Debug\">Debug</a> for <a class=\"struct\" href=\"devela/_dep/image/struct.Limits.html\" title=\"struct devela::_dep::image::Limits\">Limits</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"devela/all/struct.Formatter.html\" title=\"struct devela::all::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"devela/all/struct.FmtError.html\" title=\"struct devela::all::FmtError\">Error</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;(), Error&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"devela/all/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","devela::_dep::image::io::Limits"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Default-for-Limits\" class=\"impl\"><a href=\"#impl-Default-for-Limits\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"devela/code/trait.Default.html\" title=\"trait devela::code::Default\">Default</a> for <a class=\"struct\" href=\"devela/_dep/image/struct.Limits.html\" title=\"struct devela::_dep::image::Limits\">Limits</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.default\" class=\"method trait-impl\"><a href=\"#method.default\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/code/trait.Default.html#tymethod.default\" class=\"fn\">default</a>() -&gt; <a class=\"struct\" href=\"devela/_dep/image/struct.Limits.html\" title=\"struct devela::_dep::image::Limits\">Limits</a></h4></section></summary><div class='docblock'>Returns the “default value” for a type. <a href=\"devela/code/trait.Default.html#tymethod.default\">Read more</a></div></details></div></details>","Default","devela::_dep::image::io::Limits"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Hash-for-Limits\" class=\"impl\"><a href=\"#impl-Hash-for-Limits\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"devela/all/trait.Hash.html\" title=\"trait devela::all::Hash\">Hash</a> for <a class=\"struct\" href=\"devela/_dep/image/struct.Limits.html\" title=\"struct devela::_dep::image::Limits\">Limits</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash\" class=\"method trait-impl\"><a href=\"#method.hash\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Hash.html#tymethod.hash\" class=\"fn\">hash</a>&lt;__H&gt;(&amp;self, state: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut __H</a>)<div class=\"where\">where\n    __H: <a class=\"trait\" href=\"devela/all/trait.Hasher.html\" title=\"trait devela::all::Hasher\">Hasher</a>,</div></h4></section></summary><div class='docblock'>Feeds this value into the given <a href=\"devela/all/trait.Hasher.html\" title=\"trait devela::all::Hasher\"><code>Hasher</code></a>. <a href=\"devela/all/trait.Hash.html#tymethod.hash\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash_slice\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.3.0\">1.3.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/hash/mod.rs.html#235-237\">Source</a></span><a href=\"#method.hash_slice\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Hash.html#method.hash_slice\" class=\"fn\">hash_slice</a>&lt;H&gt;(data: &amp;[Self], state: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut H</a>)<div class=\"where\">where\n    H: <a class=\"trait\" href=\"devela/all/trait.Hasher.html\" title=\"trait devela::all::Hasher\">Hasher</a>,\n    Self: <a class=\"trait\" href=\"devela/all/trait.Sized.html\" title=\"trait devela::all::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Feeds a slice of this type into the given <a href=\"devela/all/trait.Hasher.html\" title=\"trait devela::all::Hasher\"><code>Hasher</code></a>. <a href=\"devela/all/trait.Hash.html#method.hash_slice\">Read more</a></div></details></div></details>","Hash","devela::_dep::image::io::Limits"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Limits\" class=\"impl\"><a href=\"#impl-Limits\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"struct\" href=\"devela/_dep/image/struct.Limits.html\" title=\"struct devela::_dep::image::Limits\">Limits</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.no_limits\" class=\"method\"><h4 class=\"code-header\">pub fn <a href=\"devela/_dep/image/struct.Limits.html#tymethod.no_limits\" class=\"fn\">no_limits</a>() -&gt; <a class=\"struct\" href=\"devela/_dep/image/struct.Limits.html\" title=\"struct devela::_dep::image::Limits\">Limits</a></h4></section></summary><div class=\"docblock\"><p>Disable all limits.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.check_support\" class=\"method\"><h4 class=\"code-header\">pub fn <a href=\"devela/_dep/image/struct.Limits.html#tymethod.check_support\" class=\"fn\">check_support</a>(&amp;self, _supported: &amp;<a class=\"struct\" href=\"devela/_dep/image/struct.LimitSupport.html\" title=\"struct devela::_dep::image::LimitSupport\">LimitSupport</a>) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"enum\" href=\"devela/_dep/image/enum.ImageError.html\" title=\"enum devela::_dep::image::ImageError\">ImageError</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;(), ImageError&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>This function checks that all currently set strict limits are supported.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.check_dimensions\" class=\"method\"><h4 class=\"code-header\">pub fn <a href=\"devela/_dep/image/struct.Limits.html#tymethod.check_dimensions\" class=\"fn\">check_dimensions</a>(\n    &amp;self,\n    width: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>,\n    height: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>,\n) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"enum\" href=\"devela/_dep/image/enum.ImageError.html\" title=\"enum devela::_dep::image::ImageError\">ImageError</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;(), ImageError&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>This function checks the <code>max_image_width</code> and <code>max_image_height</code> limits given\nthe image width and height.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.reserve\" class=\"method\"><h4 class=\"code-header\">pub fn <a href=\"devela/_dep/image/struct.Limits.html#tymethod.reserve\" class=\"fn\">reserve</a>(&amp;mut self, amount: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u64.html\">u64</a>) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"enum\" href=\"devela/_dep/image/enum.ImageError.html\" title=\"enum devela::_dep::image::ImageError\">ImageError</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;(), ImageError&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>This function checks that the current limit allows for reserving the set amount\nof bytes, it then reduces the limit accordingly.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.reserve_usize\" class=\"method\"><h4 class=\"code-header\">pub fn <a href=\"devela/_dep/image/struct.Limits.html#tymethod.reserve_usize\" class=\"fn\">reserve_usize</a>(&amp;mut self, amount: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"enum\" href=\"devela/_dep/image/enum.ImageError.html\" title=\"enum devela::_dep::image::ImageError\">ImageError</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;(), ImageError&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>This function acts identically to <a href=\"#method.reserve\"><code>reserve</code></a>, but takes a <code>usize</code> for convenience.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.reserve_buffer\" class=\"method\"><h4 class=\"code-header\">pub fn <a href=\"devela/_dep/image/struct.Limits.html#tymethod.reserve_buffer\" class=\"fn\">reserve_buffer</a>(\n    &amp;mut self,\n    width: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>,\n    height: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>,\n    color_type: <a class=\"enum\" href=\"devela/_dep/image/enum.ColorType.html\" title=\"enum devela::_dep::image::ColorType\">ColorType</a>,\n) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"enum\" href=\"devela/_dep/image/enum.ImageError.html\" title=\"enum devela::_dep::image::ImageError\">ImageError</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;(), ImageError&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>This function acts identically to <a href=\"#method.reserve\"><code>reserve</code></a>, but accepts the width, height and color type\nused to create an <a href=\"devela/_dep/image/struct.ImageBuffer.html\" title=\"struct devela::_dep::image::ImageBuffer\"><code>ImageBuffer</code></a> and does all the math for you.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.free\" class=\"method\"><h4 class=\"code-header\">pub fn <a href=\"devela/_dep/image/struct.Limits.html#tymethod.free\" class=\"fn\">free</a>(&amp;mut self, amount: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u64.html\">u64</a>)</h4></section></summary><div class=\"docblock\"><p>This function increases the <code>max_alloc</code> limit with amount. Should only be used\ntogether with <a href=\"#method.reserve\"><code>reserve</code></a>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.free_usize\" class=\"method\"><h4 class=\"code-header\">pub fn <a href=\"devela/_dep/image/struct.Limits.html#tymethod.free_usize\" class=\"fn\">free_usize</a>(&amp;mut self, amount: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>)</h4></section></summary><div class=\"docblock\"><p>This function acts identically to <a href=\"#method.free\"><code>free</code></a>, but takes a <code>usize</code> for convenience.</p>\n</div></details></div></details>",0,"devela::_dep::image::io::Limits"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq-for-Limits\" class=\"impl\"><a href=\"#impl-PartialEq-for-Limits\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"devela/all/trait.PartialEq.html\" title=\"trait devela::all::PartialEq\">PartialEq</a> for <a class=\"struct\" href=\"devela/_dep/image/struct.Limits.html\" title=\"struct devela::_dep::image::Limits\">Limits</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"devela/_dep/image/struct.Limits.html\" title=\"struct devela::_dep::image::Limits\">Limits</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#265\">Source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq","devela::_dep::image::io::Limits"],["<section id=\"impl-Eq-for-Limits\" class=\"impl\"><a href=\"#impl-Eq-for-Limits\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"devela/all/trait.Eq.html\" title=\"trait devela::all::Eq\">Eq</a> for <a class=\"struct\" href=\"devela/_dep/image/struct.Limits.html\" title=\"struct devela::_dep::image::Limits\">Limits</a></h3></section>","Eq","devela::_dep::image::io::Limits"],["<section id=\"impl-StructuralPartialEq-for-Limits\" class=\"impl\"><a href=\"#impl-StructuralPartialEq-for-Limits\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"devela/_core/marker/trait.StructuralPartialEq.html\" title=\"trait devela::_core::marker::StructuralPartialEq\">StructuralPartialEq</a> for <a class=\"struct\" href=\"devela/_dep/image/struct.Limits.html\" title=\"struct devela::_dep::image::Limits\">Limits</a></h3></section>","StructuralPartialEq","devela::_dep::image::io::Limits"]]]]);
    if (window.register_type_impls) {
        window.register_type_impls(type_impls);
    } else {
        window.pending_type_impls = type_impls;
    }
})()
//{"start":55,"fragment_lengths":[17676]}