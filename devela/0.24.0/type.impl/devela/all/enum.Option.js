(function() {
    var type_impls = Object.fromEntries([["devela",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/74935\" title=\"Tracking issue for const_try\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2148-2152\">Source</a></span><a href=\"#impl-Clone-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"devela/code/trait.Clone.html\" title=\"trait devela::code::Clone\">Clone</a> for <a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"devela/code/trait.Clone.html\" title=\"trait devela::code::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2155\">Source</a><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/code/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; <a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;T&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Option&lt;T&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Returns a duplicate of the value. <a href=\"devela/code/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2163\">Source</a><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/code/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: &amp;<a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;T&gt;)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a href=\"devela/code/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details>","Clone","devela::code::result::opt_res::opt_res::OptRes","devela::_dep::ffmpeg_the_third::sys::AVFifoCB","devela::_dep::ffmpeg_the_third::sys::av_format_control_message","devela::_dep::ffmpeg_the_third::sys::AVOpenCallback","devela::_dep::ffmpeg_the_third::sys::avfilter_action_func","devela::_dep::ffmpeg_the_third::sys::avfilter_execute_func","devela::_dep::miniquad::native::linux_x11::libx11::XErrorHandler","devela::_dep::miniquad::native::egl::__eglMustCastToProperFunctionPointerType","devela::_dep::pyo3::ffi::wrapperfunc","devela::_dep::pyo3::ffi::wrapperfunc_kwds","devela::_dep::sdl2::sys::mixer::Mix_EffectFunc_t","devela::_dep::sdl2::sys::mixer::Mix_EffectDone_t","devela::_dep::sdl2::sys::SDL_malloc_func","devela::_dep::sdl2::sys::SDL_calloc_func","devela::_dep::sdl2::sys::SDL_realloc_func","devela::_dep::sdl2::sys::SDL_free_func","devela::_dep::sdl2::sys::SDL_main_func","devela::_dep::sdl2::sys::SDL_AssertionHandler","devela::_dep::sdl2::sys::SDL_ThreadFunction","devela::_dep::sdl2::sys::SDL_AudioCallback","devela::_dep::sdl2::sys::SDL_AudioFilter","devela::_dep::sdl2::sys::__compar_fn_t","devela::_dep::sdl2::sys::SDL_blit","devela::_dep::sdl2::sys::SDL_HitTest","devela::_dep::sdl2::sys::SDL_EventFilter","devela::_dep::sdl2::sys::SDL_HintCallback","devela::_dep::sdl2::sys::SDL_LogOutputFunction","devela::_dep::sdl2::sys::SDL_TimerCallback","devela::_dep::sdl2::sys::XIMProc","devela::_dep::sdl2::sys::XICProc","devela::_dep::sdl2::sys::XIDProc","devela::_dep::sdl2::sys::XErrorHandler","devela::_dep::sdl2::sys::XIOErrorHandler","devela::_dep::sdl2::sys::XIOErrorExitHandler","devela::_dep::sdl2::sys::XConnectionWatchProc"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ConstDefault-for-Option%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/devela/code/default.rs.html#182\">Source</a><a href=\"#impl-ConstDefault-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T: <a class=\"trait\" href=\"devela/code/trait.ConstDefault.html\" title=\"trait devela::code::ConstDefault\">ConstDefault</a>&gt; <a class=\"trait\" href=\"devela/code/trait.ConstDefault.html\" title=\"trait devela::code::ConstDefault\">ConstDefault</a> for <a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedconstant.DEFAULT\" class=\"associatedconstant trait-impl\"><a class=\"src rightside\" href=\"src/devela/code/default.rs.html#182\">Source</a><a href=\"#associatedconstant.DEFAULT\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a href=\"devela/code/trait.ConstDefault.html#associatedconstant.DEFAULT\" class=\"constant\">DEFAULT</a>: Self</h4></section></summary><div class='docblock'>Returns the compile-time “default value” for a type.</div></details></div></details>","ConstDefault","devela::code::result::opt_res::opt_res::OptRes","devela::_dep::ffmpeg_the_third::sys::AVFifoCB","devela::_dep::ffmpeg_the_third::sys::av_format_control_message","devela::_dep::ffmpeg_the_third::sys::AVOpenCallback","devela::_dep::ffmpeg_the_third::sys::avfilter_action_func","devela::_dep::ffmpeg_the_third::sys::avfilter_execute_func","devela::_dep::miniquad::native::linux_x11::libx11::XErrorHandler","devela::_dep::miniquad::native::egl::__eglMustCastToProperFunctionPointerType","devela::_dep::pyo3::ffi::wrapperfunc","devela::_dep::pyo3::ffi::wrapperfunc_kwds","devela::_dep::sdl2::sys::mixer::Mix_EffectFunc_t","devela::_dep::sdl2::sys::mixer::Mix_EffectDone_t","devela::_dep::sdl2::sys::SDL_malloc_func","devela::_dep::sdl2::sys::SDL_calloc_func","devela::_dep::sdl2::sys::SDL_realloc_func","devela::_dep::sdl2::sys::SDL_free_func","devela::_dep::sdl2::sys::SDL_main_func","devela::_dep::sdl2::sys::SDL_AssertionHandler","devela::_dep::sdl2::sys::SDL_ThreadFunction","devela::_dep::sdl2::sys::SDL_AudioCallback","devela::_dep::sdl2::sys::SDL_AudioFilter","devela::_dep::sdl2::sys::__compar_fn_t","devela::_dep::sdl2::sys::SDL_blit","devela::_dep::sdl2::sys::SDL_HitTest","devela::_dep::sdl2::sys::SDL_EventFilter","devela::_dep::sdl2::sys::SDL_HintCallback","devela::_dep::sdl2::sys::SDL_LogOutputFunction","devela::_dep::sdl2::sys::SDL_TimerCallback","devela::_dep::sdl2::sys::XIMProc","devela::_dep::sdl2::sys::XICProc","devela::_dep::sdl2::sys::XIDProc","devela::_dep::sdl2::sys::XErrorHandler","devela::_dep::sdl2::sys::XIOErrorHandler","devela::_dep::sdl2::sys::XIOErrorExitHandler","devela::_dep::sdl2::sys::XConnectionWatchProc"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#588\">Source</a></span><a href=\"#impl-Debug-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"devela/all/trait.Debug.html\" title=\"trait devela::all::Debug\">Debug</a> for <a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"devela/all/trait.Debug.html\" title=\"trait devela::all::Debug\">Debug</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#588\">Source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"devela/all/struct.Formatter.html\" title=\"struct devela::all::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"devela/all/struct.FmtError.html\" title=\"struct devela::all::FmtError\">Error</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;(), Error&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"devela/all/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","devela::code::result::opt_res::opt_res::OptRes","devela::_dep::ffmpeg_the_third::sys::AVFifoCB","devela::_dep::ffmpeg_the_third::sys::av_format_control_message","devela::_dep::ffmpeg_the_third::sys::AVOpenCallback","devela::_dep::ffmpeg_the_third::sys::avfilter_action_func","devela::_dep::ffmpeg_the_third::sys::avfilter_execute_func","devela::_dep::miniquad::native::linux_x11::libx11::XErrorHandler","devela::_dep::miniquad::native::egl::__eglMustCastToProperFunctionPointerType","devela::_dep::pyo3::ffi::wrapperfunc","devela::_dep::pyo3::ffi::wrapperfunc_kwds","devela::_dep::sdl2::sys::mixer::Mix_EffectFunc_t","devela::_dep::sdl2::sys::mixer::Mix_EffectDone_t","devela::_dep::sdl2::sys::SDL_malloc_func","devela::_dep::sdl2::sys::SDL_calloc_func","devela::_dep::sdl2::sys::SDL_realloc_func","devela::_dep::sdl2::sys::SDL_free_func","devela::_dep::sdl2::sys::SDL_main_func","devela::_dep::sdl2::sys::SDL_AssertionHandler","devela::_dep::sdl2::sys::SDL_ThreadFunction","devela::_dep::sdl2::sys::SDL_AudioCallback","devela::_dep::sdl2::sys::SDL_AudioFilter","devela::_dep::sdl2::sys::__compar_fn_t","devela::_dep::sdl2::sys::SDL_blit","devela::_dep::sdl2::sys::SDL_HitTest","devela::_dep::sdl2::sys::SDL_EventFilter","devela::_dep::sdl2::sys::SDL_HintCallback","devela::_dep::sdl2::sys::SDL_LogOutputFunction","devela::_dep::sdl2::sys::SDL_TimerCallback","devela::_dep::sdl2::sys::XIMProc","devela::_dep::sdl2::sys::XICProc","devela::_dep::sdl2::sys::XIDProc","devela::_dep::sdl2::sys::XErrorHandler","devela::_dep::sdl2::sys::XIOErrorHandler","devela::_dep::sdl2::sys::XIOErrorExitHandler","devela::_dep::sdl2::sys::XConnectionWatchProc"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Default-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/143894\" title=\"Tracking issue for const_default\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2176\">Source</a></span><a href=\"#impl-Default-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"devela/code/trait.Default.html\" title=\"trait devela::code::Default\">Default</a> for <a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.default\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2186\">Source</a><a href=\"#method.default\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/code/trait.Default.html#tymethod.default\" class=\"fn\">default</a>() -&gt; <a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;T&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Option&lt;T&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Returns <a href=\"devela/all/enum.Option.html#variant.None\" title=\"variant devela::all::Option::None\"><code>None</code></a>.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>opt: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = Option::default();\n<span class=\"macro\">assert!</span>(opt.is_none());</code></pre></div>\n</div></details></div></details>","Default","devela::code::result::opt_res::opt_res::OptRes","devela::_dep::ffmpeg_the_third::sys::AVFifoCB","devela::_dep::ffmpeg_the_third::sys::av_format_control_message","devela::_dep::ffmpeg_the_third::sys::AVOpenCallback","devela::_dep::ffmpeg_the_third::sys::avfilter_action_func","devela::_dep::ffmpeg_the_third::sys::avfilter_execute_func","devela::_dep::miniquad::native::linux_x11::libx11::XErrorHandler","devela::_dep::miniquad::native::egl::__eglMustCastToProperFunctionPointerType","devela::_dep::pyo3::ffi::wrapperfunc","devela::_dep::pyo3::ffi::wrapperfunc_kwds","devela::_dep::sdl2::sys::mixer::Mix_EffectFunc_t","devela::_dep::sdl2::sys::mixer::Mix_EffectDone_t","devela::_dep::sdl2::sys::SDL_malloc_func","devela::_dep::sdl2::sys::SDL_calloc_func","devela::_dep::sdl2::sys::SDL_realloc_func","devela::_dep::sdl2::sys::SDL_free_func","devela::_dep::sdl2::sys::SDL_main_func","devela::_dep::sdl2::sys::SDL_AssertionHandler","devela::_dep::sdl2::sys::SDL_ThreadFunction","devela::_dep::sdl2::sys::SDL_AudioCallback","devela::_dep::sdl2::sys::SDL_AudioFilter","devela::_dep::sdl2::sys::__compar_fn_t","devela::_dep::sdl2::sys::SDL_blit","devela::_dep::sdl2::sys::SDL_HitTest","devela::_dep::sdl2::sys::SDL_EventFilter","devela::_dep::sdl2::sys::SDL_HintCallback","devela::_dep::sdl2::sys::SDL_LogOutputFunction","devela::_dep::sdl2::sys::SDL_TimerCallback","devela::_dep::sdl2::sys::XIMProc","devela::_dep::sdl2::sys::XICProc","devela::_dep::sdl2::sys::XIDProc","devela::_dep::sdl2::sys::XErrorHandler","devela::_dep::sdl2::sys::XIOErrorHandler","devela::_dep::sdl2::sys::XIOErrorExitHandler","devela::_dep::sdl2::sys::XConnectionWatchProc"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Deserialize%3C'de%3E-for-Option%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/serde/1.0.219/src/serde/de/impls.rs.html#927-929\">Source</a><a href=\"#impl-Deserialize%3C'de%3E-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'de, T&gt; <a class=\"trait\" href=\"devela/_dep/serde/trait.Deserialize.html\" title=\"trait devela::_dep::serde::Deserialize\">Deserialize</a>&lt;'de&gt; for <a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"devela/_dep/serde/trait.Deserialize.html\" title=\"trait devela::_dep::serde::Deserialize\">Deserialize</a>&lt;'de&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.deserialize\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/serde/1.0.219/src/serde/de/impls.rs.html#931-933\">Source</a><a href=\"#method.deserialize\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/_dep/serde/trait.Deserialize.html#tymethod.deserialize\" class=\"fn\">deserialize</a>&lt;D&gt;(\n    deserializer: D,\n) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;T&gt;, &lt;D as <a class=\"trait\" href=\"devela/_dep/serde/trait.Deserializer.html\" title=\"trait devela::_dep::serde::Deserializer\">Deserializer</a>&lt;'de&gt;&gt;::<a class=\"associatedtype\" href=\"devela/_dep/serde/trait.Deserializer.html#associatedtype.Error\" title=\"type devela::_dep::serde::Deserializer::Error\">Error</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;Option&lt;T&gt;, &lt;D as Deserializer&lt;&#39;de&gt;&gt;::Error&gt;\">ⓘ</a><div class=\"where\">where\n    D: <a class=\"trait\" href=\"devela/_dep/serde/trait.Deserializer.html\" title=\"trait devela::_dep::serde::Deserializer\">Deserializer</a>&lt;'de&gt;,</div></h4></section></summary><div class='docblock'>Deserialize this value from the given Serde deserializer. <a href=\"devela/_dep/serde/trait.Deserialize.html#tymethod.deserialize\">Read more</a></div></details></div></details>","Deserialize<'de>","devela::code::result::opt_res::opt_res::OptRes","devela::_dep::ffmpeg_the_third::sys::AVFifoCB","devela::_dep::ffmpeg_the_third::sys::av_format_control_message","devela::_dep::ffmpeg_the_third::sys::AVOpenCallback","devela::_dep::ffmpeg_the_third::sys::avfilter_action_func","devela::_dep::ffmpeg_the_third::sys::avfilter_execute_func","devela::_dep::miniquad::native::linux_x11::libx11::XErrorHandler","devela::_dep::miniquad::native::egl::__eglMustCastToProperFunctionPointerType","devela::_dep::pyo3::ffi::wrapperfunc","devela::_dep::pyo3::ffi::wrapperfunc_kwds","devela::_dep::sdl2::sys::mixer::Mix_EffectFunc_t","devela::_dep::sdl2::sys::mixer::Mix_EffectDone_t","devela::_dep::sdl2::sys::SDL_malloc_func","devela::_dep::sdl2::sys::SDL_calloc_func","devela::_dep::sdl2::sys::SDL_realloc_func","devela::_dep::sdl2::sys::SDL_free_func","devela::_dep::sdl2::sys::SDL_main_func","devela::_dep::sdl2::sys::SDL_AssertionHandler","devela::_dep::sdl2::sys::SDL_ThreadFunction","devela::_dep::sdl2::sys::SDL_AudioCallback","devela::_dep::sdl2::sys::SDL_AudioFilter","devela::_dep::sdl2::sys::__compar_fn_t","devela::_dep::sdl2::sys::SDL_blit","devela::_dep::sdl2::sys::SDL_HitTest","devela::_dep::sdl2::sys::SDL_EventFilter","devela::_dep::sdl2::sys::SDL_HintCallback","devela::_dep::sdl2::sys::SDL_LogOutputFunction","devela::_dep::sdl2::sys::SDL_TimerCallback","devela::_dep::sdl2::sys::XIMProc","devela::_dep::sdl2::sys::XICProc","devela::_dep::sdl2::sys::XIDProc","devela::_dep::sdl2::sys::XErrorHandler","devela::_dep::sdl2::sys::XIOErrorHandler","devela::_dep::sdl2::sys::XIOErrorExitHandler","devela::_dep::sdl2::sys::XConnectionWatchProc"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Encodable%3CW%3E-for-Option%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/devela/data/codec/encode/impls.rs.html#284-288\">Source</a><a href=\"#impl-Encodable%3CW%3E-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T: <a class=\"trait\" href=\"devela/all/trait.Encodable.html\" title=\"trait devela::all::Encodable\">Encodable</a>&lt;W&gt;, W: <a class=\"trait\" href=\"devela/all/trait.IoWrite.html\" title=\"trait devela::all::IoWrite\">IoWrite</a>&gt; <a class=\"trait\" href=\"devela/all/trait.Encodable.html\" title=\"trait devela::all::Encodable\">Encodable</a>&lt;W&gt; for <a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.encode\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/data/codec/encode/impls.rs.html#285-287\">Source</a><a href=\"#method.encode\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Encodable.html#tymethod.encode\" class=\"fn\">encode</a>(&amp;self, writer: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut W</a>) -&gt; <a class=\"type\" href=\"devela/all/type.IoResult.html\" title=\"type devela::all::IoResult\">IoResult</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt;</h4></section></summary><div class='docblock'>Encodes <code>self</code> into the given <code>writer</code>, returning the bytes written. <a href=\"devela/all/trait.Encodable.html#tymethod.encode\">Read more</a></div></details></div></details>","Encodable<W>","devela::code::result::opt_res::opt_res::OptRes","devela::_dep::ffmpeg_the_third::sys::AVFifoCB","devela::_dep::ffmpeg_the_third::sys::av_format_control_message","devela::_dep::ffmpeg_the_third::sys::AVOpenCallback","devela::_dep::ffmpeg_the_third::sys::avfilter_action_func","devela::_dep::ffmpeg_the_third::sys::avfilter_execute_func","devela::_dep::miniquad::native::linux_x11::libx11::XErrorHandler","devela::_dep::miniquad::native::egl::__eglMustCastToProperFunctionPointerType","devela::_dep::pyo3::ffi::wrapperfunc","devela::_dep::pyo3::ffi::wrapperfunc_kwds","devela::_dep::sdl2::sys::mixer::Mix_EffectFunc_t","devela::_dep::sdl2::sys::mixer::Mix_EffectDone_t","devela::_dep::sdl2::sys::SDL_malloc_func","devela::_dep::sdl2::sys::SDL_calloc_func","devela::_dep::sdl2::sys::SDL_realloc_func","devela::_dep::sdl2::sys::SDL_free_func","devela::_dep::sdl2::sys::SDL_main_func","devela::_dep::sdl2::sys::SDL_AssertionHandler","devela::_dep::sdl2::sys::SDL_ThreadFunction","devela::_dep::sdl2::sys::SDL_AudioCallback","devela::_dep::sdl2::sys::SDL_AudioFilter","devela::_dep::sdl2::sys::__compar_fn_t","devela::_dep::sdl2::sys::SDL_blit","devela::_dep::sdl2::sys::SDL_HitTest","devela::_dep::sdl2::sys::SDL_EventFilter","devela::_dep::sdl2::sys::SDL_HintCallback","devela::_dep::sdl2::sys::SDL_LogOutputFunction","devela::_dep::sdl2::sys::SDL_TimerCallback","devela::_dep::sdl2::sys::XIMProc","devela::_dep::sdl2::sys::XICProc","devela::_dep::sdl2::sys::XIDProc","devela::_dep::sdl2::sys::XErrorHandler","devela::_dep::sdl2::sys::XIOErrorHandler","devela::_dep::sdl2::sys::XIOErrorExitHandler","devela::_dep::sdl2::sys::XConnectionWatchProc"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ExtOption%3CT%3E-for-Option%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/devela/code/result/opt_res/ext_option.rs.html#108-132\">Source</a><a href=\"#impl-ExtOption%3CT%3E-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"devela/all/trait.ExtOption.html\" title=\"trait devela::all::ExtOption\">ExtOption</a>&lt;T&gt; for <a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.contains\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/code/result/opt_res/ext_option.rs.html#109-111\">Source</a><a href=\"#method.contains\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.ExtOption.html#tymethod.contains\" class=\"fn\">contains</a>&lt;U: <a class=\"trait\" href=\"devela/all/trait.PartialEq.html\" title=\"trait devela::all::PartialEq\">PartialEq</a>&lt;T&gt;&gt;(&amp;self, x: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;U</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Returns <code>true</code> if the option is a <a href=\"devela/all/enum.Option.html#variant.Some\" title=\"variant devela::all::Option::Some\"><code>Some</code></a> value containing the given value. <a href=\"devela/all/trait.ExtOption.html#tymethod.contains\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.reduce\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/code/result/opt_res/ext_option.rs.html#113-119\">Source</a><a href=\"#method.reduce\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.ExtOption.html#tymethod.reduce\" class=\"fn\">reduce</a>&lt;F: <a class=\"trait\" href=\"devela/all/trait.FnOnce.html\" title=\"trait devela::all::FnOnce\">FnOnce</a>(T, T) -&gt; T&gt;(self, other: <a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;T&gt;, f: F) -&gt; <a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;T&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Option&lt;T&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Merges <code>self</code> with another <code>Option</code>. <a href=\"devela/all/trait.ExtOption.html#tymethod.reduce\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt_or_empty\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/code/result/opt_res/ext_option.rs.html#121-123\">Source</a><a href=\"#method.fmt_or_empty\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.ExtOption.html#tymethod.fmt_or_empty\" class=\"fn\">fmt_or_empty</a>(&amp;self) -&gt; <a class=\"struct\" href=\"devela/all/struct.OptionFmt.html\" title=\"struct devela::all::OptionFmt\">OptionFmt</a>&lt;'_, T&gt;</h4></section></summary><div class='docblock'>Format some value, or display an empty string if it’s <code>None</code>. <a href=\"devela/all/trait.ExtOption.html#tymethod.fmt_or_empty\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt_or\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/code/result/opt_res/ext_option.rs.html#125-127\">Source</a><a href=\"#method.fmt_or\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.ExtOption.html#tymethod.fmt_or\" class=\"fn\">fmt_or</a>&lt;U: <a class=\"trait\" href=\"devela/all/trait.Display.html\" title=\"trait devela::all::Display\">Display</a>&gt;(&amp;self, u: U) -&gt; <a class=\"struct\" href=\"devela/all/struct.OptionFmtOr.html\" title=\"struct devela::all::OptionFmtOr\">OptionFmtOr</a>&lt;'_, T, U&gt;</h4></section></summary><div class='docblock'>Format some value, or an alternative if it’s <code>None</code>. <a href=\"devela/all/trait.ExtOption.html#tymethod.fmt_or\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt_or_else\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/code/result/opt_res/ext_option.rs.html#129-131\">Source</a><a href=\"#method.fmt_or_else\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.ExtOption.html#tymethod.fmt_or_else\" class=\"fn\">fmt_or_else</a>&lt;U: <a class=\"trait\" href=\"devela/all/trait.Display.html\" title=\"trait devela::all::Display\">Display</a>, F: <a class=\"trait\" href=\"devela/all/trait.Fn.html\" title=\"trait devela::all::Fn\">Fn</a>() -&gt; U&gt;(\n    &amp;self,\n    f: F,\n) -&gt; <a class=\"struct\" href=\"devela/all/struct.OptionFmtOrElse.html\" title=\"struct devela::all::OptionFmtOrElse\">OptionFmtOrElse</a>&lt;'_, T, F&gt;</h4></section></summary><div class='docblock'>Format some value, or run an alternative closure if it’s <code>None</code>. <a href=\"devela/all/trait.ExtOption.html#tymethod.fmt_or_else\">Read more</a></div></details></div></details>","ExtOption<T>","devela::code::result::opt_res::opt_res::OptRes","devela::_dep::ffmpeg_the_third::sys::AVFifoCB","devela::_dep::ffmpeg_the_third::sys::av_format_control_message","devela::_dep::ffmpeg_the_third::sys::AVOpenCallback","devela::_dep::ffmpeg_the_third::sys::avfilter_action_func","devela::_dep::ffmpeg_the_third::sys::avfilter_execute_func","devela::_dep::miniquad::native::linux_x11::libx11::XErrorHandler","devela::_dep::miniquad::native::egl::__eglMustCastToProperFunctionPointerType","devela::_dep::pyo3::ffi::wrapperfunc","devela::_dep::pyo3::ffi::wrapperfunc_kwds","devela::_dep::sdl2::sys::mixer::Mix_EffectFunc_t","devela::_dep::sdl2::sys::mixer::Mix_EffectDone_t","devela::_dep::sdl2::sys::SDL_malloc_func","devela::_dep::sdl2::sys::SDL_calloc_func","devela::_dep::sdl2::sys::SDL_realloc_func","devela::_dep::sdl2::sys::SDL_free_func","devela::_dep::sdl2::sys::SDL_main_func","devela::_dep::sdl2::sys::SDL_AssertionHandler","devela::_dep::sdl2::sys::SDL_ThreadFunction","devela::_dep::sdl2::sys::SDL_AudioCallback","devela::_dep::sdl2::sys::SDL_AudioFilter","devela::_dep::sdl2::sys::__compar_fn_t","devela::_dep::sdl2::sys::SDL_blit","devela::_dep::sdl2::sys::SDL_HitTest","devela::_dep::sdl2::sys::SDL_EventFilter","devela::_dep::sdl2::sys::SDL_HintCallback","devela::_dep::sdl2::sys::SDL_LogOutputFunction","devela::_dep::sdl2::sys::SDL_TimerCallback","devela::_dep::sdl2::sys::XIMProc","devela::_dep::sdl2::sys::XICProc","devela::_dep::sdl2::sys::XIDProc","devela::_dep::sdl2::sys::XErrorHandler","devela::_dep::sdl2::sys::XIOErrorHandler","devela::_dep::sdl2::sys::XIOErrorExitHandler","devela::_dep::sdl2::sys::XConnectionWatchProc"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CCtOption%3CT%3E%3E-for-Option%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/subtle/2.6.0/src/subtle/lib.rs.html#652\">Source</a><a href=\"#impl-From%3CCtOption%3CT%3E%3E-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"devela/code/trait.From.html\" title=\"trait devela::code::From\">From</a>&lt;<a class=\"struct\" href=\"https://docs.rs/subtle/2.6.0/subtle/struct.CtOption.html\" title=\"struct subtle::CtOption\">CtOption</a>&lt;T&gt;&gt; for <a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/subtle/2.6.0/src/subtle/lib.rs.html#662\">Source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/code/trait.From.html#tymethod.from\" class=\"fn\">from</a>(source: <a class=\"struct\" href=\"https://docs.rs/subtle/2.6.0/subtle/struct.CtOption.html\" title=\"struct subtle::CtOption\">CtOption</a>&lt;T&gt;) -&gt; <a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;T&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Option&lt;T&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Convert the <code>CtOption&lt;T&gt;</code> wrapper into an <code>Option&lt;T&gt;</code>, depending on whether\nthe underlying <code>is_some</code> <code>Choice</code> was a <code>0</code> or a <code>1</code> once unwrapped.</p>\n<h5 id=\"note\"><a class=\"doc-anchor\" href=\"#note\">§</a>Note</h5>\n<p>This function exists to avoid ending up with ugly, verbose and/or bad handled\nconversions from the <code>CtOption&lt;T&gt;</code> wraps to an <code>Option&lt;T&gt;</code> or <code>Result&lt;T, E&gt;</code>.\nThis implementation doesn’t intend to be constant-time nor try to protect the\nleakage of the <code>T</code> since the <code>Option&lt;T&gt;</code> will do it anyways.</p>\n</div></details></div></details>","From<CtOption<T>>","devela::code::result::opt_res::opt_res::OptRes","devela::_dep::ffmpeg_the_third::sys::AVFifoCB","devela::_dep::ffmpeg_the_third::sys::av_format_control_message","devela::_dep::ffmpeg_the_third::sys::AVOpenCallback","devela::_dep::ffmpeg_the_third::sys::avfilter_action_func","devela::_dep::ffmpeg_the_third::sys::avfilter_execute_func","devela::_dep::miniquad::native::linux_x11::libx11::XErrorHandler","devela::_dep::miniquad::native::egl::__eglMustCastToProperFunctionPointerType","devela::_dep::pyo3::ffi::wrapperfunc","devela::_dep::pyo3::ffi::wrapperfunc_kwds","devela::_dep::sdl2::sys::mixer::Mix_EffectFunc_t","devela::_dep::sdl2::sys::mixer::Mix_EffectDone_t","devela::_dep::sdl2::sys::SDL_malloc_func","devela::_dep::sdl2::sys::SDL_calloc_func","devela::_dep::sdl2::sys::SDL_realloc_func","devela::_dep::sdl2::sys::SDL_free_func","devela::_dep::sdl2::sys::SDL_main_func","devela::_dep::sdl2::sys::SDL_AssertionHandler","devela::_dep::sdl2::sys::SDL_ThreadFunction","devela::_dep::sdl2::sys::SDL_AudioCallback","devela::_dep::sdl2::sys::SDL_AudioFilter","devela::_dep::sdl2::sys::__compar_fn_t","devela::_dep::sdl2::sys::SDL_blit","devela::_dep::sdl2::sys::SDL_HitTest","devela::_dep::sdl2::sys::SDL_EventFilter","devela::_dep::sdl2::sys::SDL_HintCallback","devela::_dep::sdl2::sys::SDL_LogOutputFunction","devela::_dep::sdl2::sys::SDL_TimerCallback","devela::_dep::sdl2::sys::XIMProc","devela::_dep::sdl2::sys::XICProc","devela::_dep::sdl2::sys::XIDProc","devela::_dep::sdl2::sys::XErrorHandler","devela::_dep::sdl2::sys::XIOErrorHandler","devela::_dep::sdl2::sys::XIOErrorExitHandler","devela::_dep::sdl2::sys::XConnectionWatchProc"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CT%3E-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.12.0, const unstable\">1.12.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/74935\" title=\"Tracking issue for const_try\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2237\">Source</a></span><a href=\"#impl-From%3CT%3E-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"devela/code/trait.From.html\" title=\"trait devela::code::From\">From</a>&lt;T&gt; for <a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2247\">Source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/code/trait.From.html#tymethod.from\" class=\"fn\">from</a>(val: T) -&gt; <a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;T&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Option&lt;T&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Moves <code>val</code> into a new <a href=\"devela/all/enum.Option.html#variant.Some\" title=\"variant devela::all::Option::Some\"><code>Some</code></a>.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>o: <span class=\"prelude-ty\">Option</span>&lt;u8&gt; = Option::from(<span class=\"number\">67</span>);\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"number\">67</span>), o);</code></pre></div>\n</div></details></div></details>","From<T>","devela::code::result::opt_res::opt_res::OptRes","devela::_dep::ffmpeg_the_third::sys::AVFifoCB","devela::_dep::ffmpeg_the_third::sys::av_format_control_message","devela::_dep::ffmpeg_the_third::sys::AVOpenCallback","devela::_dep::ffmpeg_the_third::sys::avfilter_action_func","devela::_dep::ffmpeg_the_third::sys::avfilter_execute_func","devela::_dep::miniquad::native::linux_x11::libx11::XErrorHandler","devela::_dep::miniquad::native::egl::__eglMustCastToProperFunctionPointerType","devela::_dep::pyo3::ffi::wrapperfunc","devela::_dep::pyo3::ffi::wrapperfunc_kwds","devela::_dep::sdl2::sys::mixer::Mix_EffectFunc_t","devela::_dep::sdl2::sys::mixer::Mix_EffectDone_t","devela::_dep::sdl2::sys::SDL_malloc_func","devela::_dep::sdl2::sys::SDL_calloc_func","devela::_dep::sdl2::sys::SDL_realloc_func","devela::_dep::sdl2::sys::SDL_free_func","devela::_dep::sdl2::sys::SDL_main_func","devela::_dep::sdl2::sys::SDL_AssertionHandler","devela::_dep::sdl2::sys::SDL_ThreadFunction","devela::_dep::sdl2::sys::SDL_AudioCallback","devela::_dep::sdl2::sys::SDL_AudioFilter","devela::_dep::sdl2::sys::__compar_fn_t","devela::_dep::sdl2::sys::SDL_blit","devela::_dep::sdl2::sys::SDL_HitTest","devela::_dep::sdl2::sys::SDL_EventFilter","devela::_dep::sdl2::sys::SDL_HintCallback","devela::_dep::sdl2::sys::SDL_LogOutputFunction","devela::_dep::sdl2::sys::SDL_TimerCallback","devela::_dep::sdl2::sys::XIMProc","devela::_dep::sdl2::sys::XICProc","devela::_dep::sdl2::sys::XIDProc","devela::_dep::sdl2::sys::XErrorHandler","devela::_dep::sdl2::sys::XIOErrorHandler","devela::_dep::sdl2::sys::XIOErrorExitHandler","devela::_dep::sdl2::sys::XConnectionWatchProc"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromIterator%3COption%3CA%3E%3E-for-Option%3CV%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2531\">Source</a></span><a href=\"#impl-FromIterator%3COption%3CA%3E%3E-for-Option%3CV%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A, V&gt; <a class=\"trait\" href=\"devela/all/trait.IteratorFrom.html\" title=\"trait devela::all::IteratorFrom\">FromIterator</a>&lt;<a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;A&gt;&gt; for <a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;V&gt;<div class=\"where\">where\n    V: <a class=\"trait\" href=\"devela/all/trait.IteratorFrom.html\" title=\"trait devela::all::IteratorFrom\">FromIterator</a>&lt;A&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_iter\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2593\">Source</a><a href=\"#method.from_iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.IteratorFrom.html#tymethod.from_iter\" class=\"fn\">from_iter</a>&lt;I&gt;(iter: I) -&gt; <a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;V&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Option&lt;V&gt;\">ⓘ</a><div class=\"where\">where\n    I: <a class=\"trait\" href=\"devela/all/trait.IteratorInto.html\" title=\"trait devela::all::IteratorInto\">IntoIterator</a>&lt;Item = <a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;A&gt;&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Takes each element in the <a href=\"devela/all/trait.Iterator.html\" title=\"trait devela::all::Iterator\"><code>Iterator</code></a>: if it is <a href=\"devela/all/enum.Option.html#variant.None\" title=\"variant devela::all::Option::None\"><code>None</code></a>,\nno further elements are taken, and the <a href=\"devela/all/enum.Option.html#variant.None\" title=\"variant devela::all::Option::None\"><code>None</code></a> is\nreturned. Should no <a href=\"devela/all/enum.Option.html#variant.None\" title=\"variant devela::all::Option::None\"><code>None</code></a> occur, a container of type\n<code>V</code> containing the values of each <a href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\"><code>Option</code></a> is returned.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>Here is an example which increments every integer in a vector.\nWe use the checked variant of <code>add</code> that returns <code>None</code> when the\ncalculation would result in an overflow.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>items = <span class=\"macro\">vec!</span>[<span class=\"number\">0_u16</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>];\n\n<span class=\"kw\">let </span>res: <span class=\"prelude-ty\">Option</span>&lt;Vec&lt;u16&gt;&gt; = items\n    .iter()\n    .map(|x| x.checked_add(<span class=\"number\">1</span>))\n    .collect();\n\n<span class=\"macro\">assert_eq!</span>(res, <span class=\"prelude-val\">Some</span>(<span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]));</code></pre></div>\n<p>As you can see, this will return the expected, valid items.</p>\n<p>Here is another example that tries to subtract one from another list\nof integers, this time checking for underflow:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>items = <span class=\"macro\">vec!</span>[<span class=\"number\">2_u16</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>];\n\n<span class=\"kw\">let </span>res: <span class=\"prelude-ty\">Option</span>&lt;Vec&lt;u16&gt;&gt; = items\n    .iter()\n    .map(|x| x.checked_sub(<span class=\"number\">1</span>))\n    .collect();\n\n<span class=\"macro\">assert_eq!</span>(res, <span class=\"prelude-val\">None</span>);</code></pre></div>\n<p>Since the last element is zero, it would underflow. Thus, the resulting\nvalue is <code>None</code>.</p>\n<p>Here is a variation on the previous example, showing that no\nfurther elements are taken from <code>iter</code> after the first <code>None</code>.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>items = <span class=\"macro\">vec!</span>[<span class=\"number\">3_u16</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>, <span class=\"number\">10</span>];\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>shared = <span class=\"number\">0</span>;\n\n<span class=\"kw\">let </span>res: <span class=\"prelude-ty\">Option</span>&lt;Vec&lt;u16&gt;&gt; = items\n    .iter()\n    .map(|x| { shared += x; x.checked_sub(<span class=\"number\">2</span>) })\n    .collect();\n\n<span class=\"macro\">assert_eq!</span>(res, <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(shared, <span class=\"number\">6</span>);</code></pre></div>\n<p>Since the third element caused an underflow, no further elements were taken,\nso the final value of <code>shared</code> is 6 (= <code>3 + 2 + 1</code>), not 16.</p>\n</div></details></div></details>","FromIterator<Option<A>>","devela::code::result::opt_res::opt_res::OptRes","devela::_dep::ffmpeg_the_third::sys::AVFifoCB","devela::_dep::ffmpeg_the_third::sys::av_format_control_message","devela::_dep::ffmpeg_the_third::sys::AVOpenCallback","devela::_dep::ffmpeg_the_third::sys::avfilter_action_func","devela::_dep::ffmpeg_the_third::sys::avfilter_execute_func","devela::_dep::miniquad::native::linux_x11::libx11::XErrorHandler","devela::_dep::miniquad::native::egl::__eglMustCastToProperFunctionPointerType","devela::_dep::pyo3::ffi::wrapperfunc","devela::_dep::pyo3::ffi::wrapperfunc_kwds","devela::_dep::sdl2::sys::mixer::Mix_EffectFunc_t","devela::_dep::sdl2::sys::mixer::Mix_EffectDone_t","devela::_dep::sdl2::sys::SDL_malloc_func","devela::_dep::sdl2::sys::SDL_calloc_func","devela::_dep::sdl2::sys::SDL_realloc_func","devela::_dep::sdl2::sys::SDL_free_func","devela::_dep::sdl2::sys::SDL_main_func","devela::_dep::sdl2::sys::SDL_AssertionHandler","devela::_dep::sdl2::sys::SDL_ThreadFunction","devela::_dep::sdl2::sys::SDL_AudioCallback","devela::_dep::sdl2::sys::SDL_AudioFilter","devela::_dep::sdl2::sys::__compar_fn_t","devela::_dep::sdl2::sys::SDL_blit","devela::_dep::sdl2::sys::SDL_HitTest","devela::_dep::sdl2::sys::SDL_EventFilter","devela::_dep::sdl2::sys::SDL_HintCallback","devela::_dep::sdl2::sys::SDL_LogOutputFunction","devela::_dep::sdl2::sys::SDL_TimerCallback","devela::_dep::sdl2::sys::XIMProc","devela::_dep::sdl2::sys::XICProc","devela::_dep::sdl2::sys::XIDProc","devela::_dep::sdl2::sys::XErrorHandler","devela::_dep::sdl2::sys::XIOErrorHandler","devela::_dep::sdl2::sys::XIOErrorExitHandler","devela::_dep::sdl2::sys::XConnectionWatchProc"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromIteratorIn%3COption%3CT%3E%3E-for-Option%3CV%3E\" class=\"impl\"><a href=\"#impl-FromIteratorIn%3COption%3CT%3E%3E-for-Option%3CV%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, V&gt; <a class=\"trait\" href=\"devela/_dep/bumpalo/collections/trait.FromIteratorIn.html\" title=\"trait devela::_dep::bumpalo::collections::FromIteratorIn\">FromIteratorIn</a>&lt;<a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;T&gt;&gt; for <a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;V&gt;<div class=\"where\">where\n    V: <a class=\"trait\" href=\"devela/_dep/bumpalo/collections/trait.FromIteratorIn.html\" title=\"trait devela::_dep::bumpalo::collections::FromIteratorIn\">FromIteratorIn</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Alloc\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Alloc\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"devela/_dep/bumpalo/collections/trait.FromIteratorIn.html#associatedtype.Alloc\" class=\"associatedtype\">Alloc</a> = &lt;V as <a class=\"trait\" href=\"devela/_dep/bumpalo/collections/trait.FromIteratorIn.html\" title=\"trait devela::_dep::bumpalo::collections::FromIteratorIn\">FromIteratorIn</a>&lt;T&gt;&gt;::<a class=\"associatedtype\" href=\"devela/_dep/bumpalo/collections/trait.FromIteratorIn.html#associatedtype.Alloc\" title=\"type devela::_dep::bumpalo::collections::FromIteratorIn::Alloc\">Alloc</a></h4></section></summary><div class='docblock'>The allocator type</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_iter_in\" class=\"method trait-impl\"><a href=\"#method.from_iter_in\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/_dep/bumpalo/collections/trait.FromIteratorIn.html#tymethod.from_iter_in\" class=\"fn\">from_iter_in</a>&lt;I&gt;(\n    iter: I,\n    alloc: &lt;<a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;V&gt; as <a class=\"trait\" href=\"devela/_dep/bumpalo/collections/trait.FromIteratorIn.html\" title=\"trait devela::_dep::bumpalo::collections::FromIteratorIn\">FromIteratorIn</a>&lt;<a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;T&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"devela/_dep/bumpalo/collections/trait.FromIteratorIn.html#associatedtype.Alloc\" title=\"type devela::_dep::bumpalo::collections::FromIteratorIn::Alloc\">Alloc</a>,\n) -&gt; <a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;V&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Option&lt;V&gt;\">ⓘ</a><div class=\"where\">where\n    I: <a class=\"trait\" href=\"devela/all/trait.IteratorInto.html\" title=\"trait devela::all::IteratorInto\">IntoIterator</a>&lt;Item = <a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;T&gt;&gt;,</div></h4></section></summary><div class='docblock'>Similar to <a href=\"https://doc.rust-lang.org/std/iter/trait.FromIterator.html#tymethod.from_iter\"><code>FromIterator::from_iter</code></a>, but with a given allocator. <a href=\"devela/_dep/bumpalo/collections/trait.FromIteratorIn.html#tymethod.from_iter_in\">Read more</a></div></details></div></details>","FromIteratorIn<Option<T>>","devela::code::result::opt_res::opt_res::OptRes","devela::_dep::ffmpeg_the_third::sys::AVFifoCB","devela::_dep::ffmpeg_the_third::sys::av_format_control_message","devela::_dep::ffmpeg_the_third::sys::AVOpenCallback","devela::_dep::ffmpeg_the_third::sys::avfilter_action_func","devela::_dep::ffmpeg_the_third::sys::avfilter_execute_func","devela::_dep::miniquad::native::linux_x11::libx11::XErrorHandler","devela::_dep::miniquad::native::egl::__eglMustCastToProperFunctionPointerType","devela::_dep::pyo3::ffi::wrapperfunc","devela::_dep::pyo3::ffi::wrapperfunc_kwds","devela::_dep::sdl2::sys::mixer::Mix_EffectFunc_t","devela::_dep::sdl2::sys::mixer::Mix_EffectDone_t","devela::_dep::sdl2::sys::SDL_malloc_func","devela::_dep::sdl2::sys::SDL_calloc_func","devela::_dep::sdl2::sys::SDL_realloc_func","devela::_dep::sdl2::sys::SDL_free_func","devela::_dep::sdl2::sys::SDL_main_func","devela::_dep::sdl2::sys::SDL_AssertionHandler","devela::_dep::sdl2::sys::SDL_ThreadFunction","devela::_dep::sdl2::sys::SDL_AudioCallback","devela::_dep::sdl2::sys::SDL_AudioFilter","devela::_dep::sdl2::sys::__compar_fn_t","devela::_dep::sdl2::sys::SDL_blit","devela::_dep::sdl2::sys::SDL_HitTest","devela::_dep::sdl2::sys::SDL_EventFilter","devela::_dep::sdl2::sys::SDL_HintCallback","devela::_dep::sdl2::sys::SDL_LogOutputFunction","devela::_dep::sdl2::sys::SDL_TimerCallback","devela::_dep::sdl2::sys::XIMProc","devela::_dep::sdl2::sys::XICProc","devela::_dep::sdl2::sys::XIDProc","devela::_dep::sdl2::sys::XErrorHandler","devela::_dep::sdl2::sys::XIOErrorHandler","devela::_dep::sdl2::sys::XIOErrorExitHandler","devela::_dep::sdl2::sys::XConnectionWatchProc"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromParallelIterator%3COption%3CT%3E%3E-for-Option%3CC%3E\" class=\"impl\"><a href=\"#impl-FromParallelIterator%3COption%3CT%3E%3E-for-Option%3CC%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;C, T&gt; <a class=\"trait\" href=\"devela/_dep/rayon/iter/trait.FromParallelIterator.html\" title=\"trait devela::_dep::rayon::iter::FromParallelIterator\">FromParallelIterator</a>&lt;<a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;T&gt;&gt; for <a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;C&gt;<div class=\"where\">where\n    C: <a class=\"trait\" href=\"devela/_dep/rayon/iter/trait.FromParallelIterator.html\" title=\"trait devela::_dep::rayon::iter::FromParallelIterator\">FromParallelIterator</a>&lt;T&gt;,\n    T: <a class=\"trait\" href=\"devela/all/trait.Send.html\" title=\"trait devela::all::Send\">Send</a>,</div></h3><div class=\"docblock\"><p>Collect an arbitrary <code>Option</code>-wrapped collection.</p>\n</div></section></summary><div class=\"docblock\"><p>If any item is <code>None</code>, then all previous items collected are discarded,\nand it returns only <code>None</code>.</p>\n</div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_par_iter\" class=\"method trait-impl\"><a href=\"#method.from_par_iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/_dep/rayon/iter/trait.FromParallelIterator.html#tymethod.from_par_iter\" class=\"fn\">from_par_iter</a>&lt;I&gt;(par_iter: I) -&gt; <a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;C&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Option&lt;C&gt;\">ⓘ</a><div class=\"where\">where\n    I: <a class=\"trait\" href=\"devela/_dep/rayon/iter/trait.IntoParallelIterator.html\" title=\"trait devela::_dep::rayon::iter::IntoParallelIterator\">IntoParallelIterator</a>&lt;Item = <a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;T&gt;&gt;,</div></h4></section></summary><div class='docblock'>Creates an instance of the collection from the parallel iterator <code>par_iter</code>. <a href=\"devela/_dep/rayon/iter/trait.FromParallelIterator.html#tymethod.from_par_iter\">Read more</a></div></details></div></details>","FromParallelIterator<Option<T>>","devela::code::result::opt_res::opt_res::OptRes","devela::_dep::ffmpeg_the_third::sys::AVFifoCB","devela::_dep::ffmpeg_the_third::sys::av_format_control_message","devela::_dep::ffmpeg_the_third::sys::AVOpenCallback","devela::_dep::ffmpeg_the_third::sys::avfilter_action_func","devela::_dep::ffmpeg_the_third::sys::avfilter_execute_func","devela::_dep::miniquad::native::linux_x11::libx11::XErrorHandler","devela::_dep::miniquad::native::egl::__eglMustCastToProperFunctionPointerType","devela::_dep::pyo3::ffi::wrapperfunc","devela::_dep::pyo3::ffi::wrapperfunc_kwds","devela::_dep::sdl2::sys::mixer::Mix_EffectFunc_t","devela::_dep::sdl2::sys::mixer::Mix_EffectDone_t","devela::_dep::sdl2::sys::SDL_malloc_func","devela::_dep::sdl2::sys::SDL_calloc_func","devela::_dep::sdl2::sys::SDL_realloc_func","devela::_dep::sdl2::sys::SDL_free_func","devela::_dep::sdl2::sys::SDL_main_func","devela::_dep::sdl2::sys::SDL_AssertionHandler","devela::_dep::sdl2::sys::SDL_ThreadFunction","devela::_dep::sdl2::sys::SDL_AudioCallback","devela::_dep::sdl2::sys::SDL_AudioFilter","devela::_dep::sdl2::sys::__compar_fn_t","devela::_dep::sdl2::sys::SDL_blit","devela::_dep::sdl2::sys::SDL_HitTest","devela::_dep::sdl2::sys::SDL_EventFilter","devela::_dep::sdl2::sys::SDL_HintCallback","devela::_dep::sdl2::sys::SDL_LogOutputFunction","devela::_dep::sdl2::sys::SDL_TimerCallback","devela::_dep::sdl2::sys::XIMProc","devela::_dep::sdl2::sys::XICProc","devela::_dep::sdl2::sys::XIDProc","devela::_dep::sdl2::sys::XErrorHandler","devela::_dep::sdl2::sys::XIOErrorHandler","devela::_dep::sdl2::sys::XIOErrorExitHandler","devela::_dep::sdl2::sys::XConnectionWatchProc"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromPyObject%3C'py%3E-for-Option%3CT%3E\" class=\"impl\"><a href=\"#impl-FromPyObject%3C'py%3E-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'py, T&gt; <a class=\"trait\" href=\"devela/_dep/pyo3/trait.FromPyObject.html\" title=\"trait devela::_dep::pyo3::FromPyObject\">FromPyObject</a>&lt;'py&gt; for <a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"devela/_dep/pyo3/trait.FromPyObject.html\" title=\"trait devela::_dep::pyo3::FromPyObject\">FromPyObject</a>&lt;'py&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.extract_bound\" class=\"method trait-impl\"><a href=\"#method.extract_bound\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/_dep/pyo3/trait.FromPyObject.html#tymethod.extract_bound\" class=\"fn\">extract_bound</a>(obj: &amp;<a class=\"struct\" href=\"devela/_dep/pyo3/struct.Bound.html\" title=\"struct devela::_dep::pyo3::Bound\">Bound</a>&lt;'py, <a class=\"struct\" href=\"devela/_dep/pyo3/struct.PyAny.html\" title=\"struct devela::_dep::pyo3::PyAny\">PyAny</a>&gt;) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;T&gt;, <a class=\"struct\" href=\"devela/_dep/pyo3/struct.PyErr.html\" title=\"struct devela::_dep::pyo3::PyErr\">PyErr</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;Option&lt;T&gt;, PyErr&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Extracts <code>Self</code> from the bound smart pointer <code>obj</code>. <a href=\"devela/_dep/pyo3/trait.FromPyObject.html#tymethod.extract_bound\">Read more</a></div></details></div></details>","FromPyObject<'py>","devela::code::result::opt_res::opt_res::OptRes","devela::_dep::ffmpeg_the_third::sys::AVFifoCB","devela::_dep::ffmpeg_the_third::sys::av_format_control_message","devela::_dep::ffmpeg_the_third::sys::AVOpenCallback","devela::_dep::ffmpeg_the_third::sys::avfilter_action_func","devela::_dep::ffmpeg_the_third::sys::avfilter_execute_func","devela::_dep::miniquad::native::linux_x11::libx11::XErrorHandler","devela::_dep::miniquad::native::egl::__eglMustCastToProperFunctionPointerType","devela::_dep::pyo3::ffi::wrapperfunc","devela::_dep::pyo3::ffi::wrapperfunc_kwds","devela::_dep::sdl2::sys::mixer::Mix_EffectFunc_t","devela::_dep::sdl2::sys::mixer::Mix_EffectDone_t","devela::_dep::sdl2::sys::SDL_malloc_func","devela::_dep::sdl2::sys::SDL_calloc_func","devela::_dep::sdl2::sys::SDL_realloc_func","devela::_dep::sdl2::sys::SDL_free_func","devela::_dep::sdl2::sys::SDL_main_func","devela::_dep::sdl2::sys::SDL_AssertionHandler","devela::_dep::sdl2::sys::SDL_ThreadFunction","devela::_dep::sdl2::sys::SDL_AudioCallback","devela::_dep::sdl2::sys::SDL_AudioFilter","devela::_dep::sdl2::sys::__compar_fn_t","devela::_dep::sdl2::sys::SDL_blit","devela::_dep::sdl2::sys::SDL_HitTest","devela::_dep::sdl2::sys::SDL_EventFilter","devela::_dep::sdl2::sys::SDL_HintCallback","devela::_dep::sdl2::sys::SDL_LogOutputFunction","devela::_dep::sdl2::sys::SDL_TimerCallback","devela::_dep::sdl2::sys::XIMProc","devela::_dep::sdl2::sys::XICProc","devela::_dep::sdl2::sys::XIDProc","devela::_dep::sdl2::sys::XErrorHandler","devela::_dep::sdl2::sys::XIOErrorHandler","devela::_dep::sdl2::sys::XIOErrorExitHandler","devela::_dep::sdl2::sys::XConnectionWatchProc"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromResidual%3COption%3CInfallible%3E%3E-for-Option%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2625\">Source</a><a href=\"#impl-FromResidual%3COption%3CInfallible%3E%3E-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"devela/_core/ops/trait.FromResidual.html\" title=\"trait devela::_core::ops::FromResidual\">FromResidual</a>&lt;<a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;<a class=\"enum\" href=\"devela/code/enum.Infallible.html\" title=\"enum devela::code::Infallible\">Infallible</a>&gt;&gt; for <a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_residual\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2627\">Source</a><a href=\"#method.from_residual\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/_core/ops/trait.FromResidual.html#tymethod.from_residual\" class=\"fn\">from_residual</a>(residual: <a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;<a class=\"enum\" href=\"devela/code/enum.Infallible.html\" title=\"enum devela::code::Infallible\">Infallible</a>&gt;) -&gt; <a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;T&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Option&lt;T&gt;\">ⓘ</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>try_trait_v2</code>)</span></div></span><div class='docblock'>Constructs the type from a compatible <code>Residual</code> type. <a href=\"devela/_core/ops/trait.FromResidual.html#tymethod.from_residual\">Read more</a></div></details></div></details>","FromResidual<Option<Infallible>>","devela::code::result::opt_res::opt_res::OptRes","devela::_dep::ffmpeg_the_third::sys::AVFifoCB","devela::_dep::ffmpeg_the_third::sys::av_format_control_message","devela::_dep::ffmpeg_the_third::sys::AVOpenCallback","devela::_dep::ffmpeg_the_third::sys::avfilter_action_func","devela::_dep::ffmpeg_the_third::sys::avfilter_execute_func","devela::_dep::miniquad::native::linux_x11::libx11::XErrorHandler","devela::_dep::miniquad::native::egl::__eglMustCastToProperFunctionPointerType","devela::_dep::pyo3::ffi::wrapperfunc","devela::_dep::pyo3::ffi::wrapperfunc_kwds","devela::_dep::sdl2::sys::mixer::Mix_EffectFunc_t","devela::_dep::sdl2::sys::mixer::Mix_EffectDone_t","devela::_dep::sdl2::sys::SDL_malloc_func","devela::_dep::sdl2::sys::SDL_calloc_func","devela::_dep::sdl2::sys::SDL_realloc_func","devela::_dep::sdl2::sys::SDL_free_func","devela::_dep::sdl2::sys::SDL_main_func","devela::_dep::sdl2::sys::SDL_AssertionHandler","devela::_dep::sdl2::sys::SDL_ThreadFunction","devela::_dep::sdl2::sys::SDL_AudioCallback","devela::_dep::sdl2::sys::SDL_AudioFilter","devela::_dep::sdl2::sys::__compar_fn_t","devela::_dep::sdl2::sys::SDL_blit","devela::_dep::sdl2::sys::SDL_HitTest","devela::_dep::sdl2::sys::SDL_EventFilter","devela::_dep::sdl2::sys::SDL_HintCallback","devela::_dep::sdl2::sys::SDL_LogOutputFunction","devela::_dep::sdl2::sys::SDL_TimerCallback","devela::_dep::sdl2::sys::XIMProc","devela::_dep::sdl2::sys::XICProc","devela::_dep::sdl2::sys::XIDProc","devela::_dep::sdl2::sys::XErrorHandler","devela::_dep::sdl2::sys::XIOErrorHandler","devela::_dep::sdl2::sys::XIOErrorExitHandler","devela::_dep::sdl2::sys::XConnectionWatchProc"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromResidual%3CYeet%3C()%3E%3E-for-Option%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2637\">Source</a><a href=\"#impl-FromResidual%3CYeet%3C()%3E%3E-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"devela/_core/ops/trait.FromResidual.html\" title=\"trait devela::_core::ops::FromResidual\">FromResidual</a>&lt;<a class=\"struct\" href=\"devela/_core/ops/struct.Yeet.html\" title=\"struct devela::_core::ops::Yeet\">Yeet</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>&gt;&gt; for <a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_residual\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2639\">Source</a><a href=\"#method.from_residual\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/_core/ops/trait.FromResidual.html#tymethod.from_residual\" class=\"fn\">from_residual</a>(_: <a class=\"struct\" href=\"devela/_core/ops/struct.Yeet.html\" title=\"struct devela::_core::ops::Yeet\">Yeet</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>&gt;) -&gt; <a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;T&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Option&lt;T&gt;\">ⓘ</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>try_trait_v2</code>)</span></div></span><div class='docblock'>Constructs the type from a compatible <code>Residual</code> type. <a href=\"devela/_core/ops/trait.FromResidual.html#tymethod.from_residual\">Read more</a></div></details></div></details>","FromResidual<Yeet<()>>","devela::code::result::opt_res::opt_res::OptRes","devela::_dep::ffmpeg_the_third::sys::AVFifoCB","devela::_dep::ffmpeg_the_third::sys::av_format_control_message","devela::_dep::ffmpeg_the_third::sys::AVOpenCallback","devela::_dep::ffmpeg_the_third::sys::avfilter_action_func","devela::_dep::ffmpeg_the_third::sys::avfilter_execute_func","devela::_dep::miniquad::native::linux_x11::libx11::XErrorHandler","devela::_dep::miniquad::native::egl::__eglMustCastToProperFunctionPointerType","devela::_dep::pyo3::ffi::wrapperfunc","devela::_dep::pyo3::ffi::wrapperfunc_kwds","devela::_dep::sdl2::sys::mixer::Mix_EffectFunc_t","devela::_dep::sdl2::sys::mixer::Mix_EffectDone_t","devela::_dep::sdl2::sys::SDL_malloc_func","devela::_dep::sdl2::sys::SDL_calloc_func","devela::_dep::sdl2::sys::SDL_realloc_func","devela::_dep::sdl2::sys::SDL_free_func","devela::_dep::sdl2::sys::SDL_main_func","devela::_dep::sdl2::sys::SDL_AssertionHandler","devela::_dep::sdl2::sys::SDL_ThreadFunction","devela::_dep::sdl2::sys::SDL_AudioCallback","devela::_dep::sdl2::sys::SDL_AudioFilter","devela::_dep::sdl2::sys::__compar_fn_t","devela::_dep::sdl2::sys::SDL_blit","devela::_dep::sdl2::sys::SDL_HitTest","devela::_dep::sdl2::sys::SDL_EventFilter","devela::_dep::sdl2::sys::SDL_HintCallback","devela::_dep::sdl2::sys::SDL_LogOutputFunction","devela::_dep::sdl2::sys::SDL_TimerCallback","devela::_dep::sdl2::sys::XIMProc","devela::_dep::sdl2::sys::XICProc","devela::_dep::sdl2::sys::XIDProc","devela::_dep::sdl2::sys::XErrorHandler","devela::_dep::sdl2::sys::XIOErrorHandler","devela::_dep::sdl2::sys::XIOErrorExitHandler","devela::_dep::sdl2::sys::XConnectionWatchProc"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Hash-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#588\">Source</a></span><a href=\"#impl-Hash-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"devela/all/trait.Hash.html\" title=\"trait devela::all::Hash\">Hash</a> for <a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"devela/all/trait.Hash.html\" title=\"trait devela::all::Hash\">Hash</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#588\">Source</a><a href=\"#method.hash\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Hash.html#tymethod.hash\" class=\"fn\">hash</a>&lt;__H&gt;(&amp;self, state: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut __H</a>)<div class=\"where\">where\n    __H: <a class=\"trait\" href=\"devela/all/trait.Hasher.html\" title=\"trait devela::all::Hasher\">Hasher</a>,</div></h4></section></summary><div class='docblock'>Feeds this value into the given <a href=\"devela/all/trait.Hasher.html\" title=\"trait devela::all::Hasher\"><code>Hasher</code></a>. <a href=\"devela/all/trait.Hash.html#tymethod.hash\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash_slice\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.3.0\">1.3.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/hash/mod.rs.html#235-237\">Source</a></span><a href=\"#method.hash_slice\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Hash.html#method.hash_slice\" class=\"fn\">hash_slice</a>&lt;H&gt;(data: &amp;[Self], state: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut H</a>)<div class=\"where\">where\n    H: <a class=\"trait\" href=\"devela/all/trait.Hasher.html\" title=\"trait devela::all::Hasher\">Hasher</a>,\n    Self: <a class=\"trait\" href=\"devela/all/trait.Sized.html\" title=\"trait devela::all::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Feeds a slice of this type into the given <a href=\"devela/all/trait.Hasher.html\" title=\"trait devela::all::Hasher\"><code>Hasher</code></a>. <a href=\"devela/all/trait.Hash.html#method.hash_slice\">Read more</a></div></details></div></details>","Hash","devela::code::result::opt_res::opt_res::OptRes","devela::_dep::ffmpeg_the_third::sys::AVFifoCB","devela::_dep::ffmpeg_the_third::sys::av_format_control_message","devela::_dep::ffmpeg_the_third::sys::AVOpenCallback","devela::_dep::ffmpeg_the_third::sys::avfilter_action_func","devela::_dep::ffmpeg_the_third::sys::avfilter_execute_func","devela::_dep::miniquad::native::linux_x11::libx11::XErrorHandler","devela::_dep::miniquad::native::egl::__eglMustCastToProperFunctionPointerType","devela::_dep::pyo3::ffi::wrapperfunc","devela::_dep::pyo3::ffi::wrapperfunc_kwds","devela::_dep::sdl2::sys::mixer::Mix_EffectFunc_t","devela::_dep::sdl2::sys::mixer::Mix_EffectDone_t","devela::_dep::sdl2::sys::SDL_malloc_func","devela::_dep::sdl2::sys::SDL_calloc_func","devela::_dep::sdl2::sys::SDL_realloc_func","devela::_dep::sdl2::sys::SDL_free_func","devela::_dep::sdl2::sys::SDL_main_func","devela::_dep::sdl2::sys::SDL_AssertionHandler","devela::_dep::sdl2::sys::SDL_ThreadFunction","devela::_dep::sdl2::sys::SDL_AudioCallback","devela::_dep::sdl2::sys::SDL_AudioFilter","devela::_dep::sdl2::sys::__compar_fn_t","devela::_dep::sdl2::sys::SDL_blit","devela::_dep::sdl2::sys::SDL_HitTest","devela::_dep::sdl2::sys::SDL_EventFilter","devela::_dep::sdl2::sys::SDL_HintCallback","devela::_dep::sdl2::sys::SDL_LogOutputFunction","devela::_dep::sdl2::sys::SDL_TimerCallback","devela::_dep::sdl2::sys::XIMProc","devela::_dep::sdl2::sys::XICProc","devela::_dep::sdl2::sys::XIDProc","devela::_dep::sdl2::sys::XErrorHandler","devela::_dep::sdl2::sys::XIOErrorHandler","devela::_dep::sdl2::sys::XIOErrorExitHandler","devela::_dep::sdl2::sys::XConnectionWatchProc"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IntoIterator-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2192\">Source</a></span><a href=\"#impl-IntoIterator-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"devela/all/trait.IteratorInto.html\" title=\"trait devela::all::IteratorInto\">IntoIterator</a> for <a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_iter\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2210\">Source</a><a href=\"#method.into_iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.IteratorInto.html#tymethod.into_iter\" class=\"fn\">into_iter</a>(self) -&gt; <a class=\"struct\" href=\"devela/all/struct.OptionIntoIter.html\" title=\"struct devela::all::OptionIntoIter\">IntoIter</a>&lt;T&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"IntoIter&lt;T&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Returns a consuming iterator over the possibly contained value.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"string\"</span>);\n<span class=\"kw\">let </span>v: Vec&lt;<span class=\"kw-2\">&amp;</span>str&gt; = x.into_iter().collect();\n<span class=\"macro\">assert_eq!</span>(v, [<span class=\"string\">\"string\"</span>]);\n\n<span class=\"kw\">let </span>x = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>v: Vec&lt;<span class=\"kw-2\">&amp;</span>str&gt; = x.into_iter().collect();\n<span class=\"macro\">assert!</span>(v.is_empty());</code></pre></div>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Item\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2193\">Source</a><a href=\"#associatedtype.Item\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"devela/all/trait.IteratorInto.html#associatedtype.Item\" class=\"associatedtype\">Item</a> = T</h4></section></summary><div class='docblock'>The type of the elements being iterated over.</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.IntoIter\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2194\">Source</a><a href=\"#associatedtype.IntoIter\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"devela/all/trait.IteratorInto.html#associatedtype.IntoIter\" class=\"associatedtype\">IntoIter</a> = <a class=\"struct\" href=\"devela/all/struct.OptionIntoIter.html\" title=\"struct devela::all::OptionIntoIter\">IntoIter</a>&lt;T&gt;</h4></section></summary><div class='docblock'>Which kind of iterator are we turning this into?</div></details></div></details>","IntoIterator","devela::code::result::opt_res::opt_res::OptRes","devela::_dep::ffmpeg_the_third::sys::AVFifoCB","devela::_dep::ffmpeg_the_third::sys::av_format_control_message","devela::_dep::ffmpeg_the_third::sys::AVOpenCallback","devela::_dep::ffmpeg_the_third::sys::avfilter_action_func","devela::_dep::ffmpeg_the_third::sys::avfilter_execute_func","devela::_dep::miniquad::native::linux_x11::libx11::XErrorHandler","devela::_dep::miniquad::native::egl::__eglMustCastToProperFunctionPointerType","devela::_dep::pyo3::ffi::wrapperfunc","devela::_dep::pyo3::ffi::wrapperfunc_kwds","devela::_dep::sdl2::sys::mixer::Mix_EffectFunc_t","devela::_dep::sdl2::sys::mixer::Mix_EffectDone_t","devela::_dep::sdl2::sys::SDL_malloc_func","devela::_dep::sdl2::sys::SDL_calloc_func","devela::_dep::sdl2::sys::SDL_realloc_func","devela::_dep::sdl2::sys::SDL_free_func","devela::_dep::sdl2::sys::SDL_main_func","devela::_dep::sdl2::sys::SDL_AssertionHandler","devela::_dep::sdl2::sys::SDL_ThreadFunction","devela::_dep::sdl2::sys::SDL_AudioCallback","devela::_dep::sdl2::sys::SDL_AudioFilter","devela::_dep::sdl2::sys::__compar_fn_t","devela::_dep::sdl2::sys::SDL_blit","devela::_dep::sdl2::sys::SDL_HitTest","devela::_dep::sdl2::sys::SDL_EventFilter","devela::_dep::sdl2::sys::SDL_HintCallback","devela::_dep::sdl2::sys::SDL_LogOutputFunction","devela::_dep::sdl2::sys::SDL_TimerCallback","devela::_dep::sdl2::sys::XIMProc","devela::_dep::sdl2::sys::XICProc","devela::_dep::sdl2::sys::XIDProc","devela::_dep::sdl2::sys::XErrorHandler","devela::_dep::sdl2::sys::XIOErrorHandler","devela::_dep::sdl2::sys::XIOErrorExitHandler","devela::_dep::sdl2::sys::XConnectionWatchProc"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IntoParallelIterator-for-Option%3CT%3E\" class=\"impl\"><a href=\"#impl-IntoParallelIterator-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"devela/_dep/rayon/iter/trait.IntoParallelIterator.html\" title=\"trait devela::_dep::rayon::iter::IntoParallelIterator\">IntoParallelIterator</a> for <a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"devela/all/trait.Send.html\" title=\"trait devela::all::Send\">Send</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Item\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Item\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"devela/_dep/rayon/iter/trait.IntoParallelIterator.html#associatedtype.Item\" class=\"associatedtype\">Item</a> = T</h4></section></summary><div class='docblock'>The type of item that the parallel iterator will produce.</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Iter\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Iter\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"devela/_dep/rayon/iter/trait.IntoParallelIterator.html#associatedtype.Iter\" class=\"associatedtype\">Iter</a> = <a class=\"struct\" href=\"devela/_dep/rayon/option/struct.IntoIter.html\" title=\"struct devela::_dep::rayon::option::IntoIter\">IntoIter</a>&lt;T&gt;</h4></section></summary><div class='docblock'>The parallel iterator type that will be created.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_par_iter\" class=\"method trait-impl\"><a href=\"#method.into_par_iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/_dep/rayon/iter/trait.IntoParallelIterator.html#tymethod.into_par_iter\" class=\"fn\">into_par_iter</a>(self) -&gt; &lt;<a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;T&gt; as <a class=\"trait\" href=\"devela/_dep/rayon/iter/trait.IntoParallelIterator.html\" title=\"trait devela::_dep::rayon::iter::IntoParallelIterator\">IntoParallelIterator</a>&gt;::<a class=\"associatedtype\" href=\"devela/_dep/rayon/iter/trait.IntoParallelIterator.html#associatedtype.Iter\" title=\"type devela::_dep::rayon::iter::IntoParallelIterator::Iter\">Iter</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&lt;Option&lt;T&gt; as IntoParallelIterator&gt;::Iter\">ⓘ</a></h4></section></summary><div class='docblock'>Converts <code>self</code> into a parallel iterator. <a href=\"devela/_dep/rayon/iter/trait.IntoParallelIterator.html#tymethod.into_par_iter\">Read more</a></div></details></div></details>","IntoParallelIterator","devela::code::result::opt_res::opt_res::OptRes","devela::_dep::ffmpeg_the_third::sys::AVFifoCB","devela::_dep::ffmpeg_the_third::sys::av_format_control_message","devela::_dep::ffmpeg_the_third::sys::AVOpenCallback","devela::_dep::ffmpeg_the_third::sys::avfilter_action_func","devela::_dep::ffmpeg_the_third::sys::avfilter_execute_func","devela::_dep::miniquad::native::linux_x11::libx11::XErrorHandler","devela::_dep::miniquad::native::egl::__eglMustCastToProperFunctionPointerType","devela::_dep::pyo3::ffi::wrapperfunc","devela::_dep::pyo3::ffi::wrapperfunc_kwds","devela::_dep::sdl2::sys::mixer::Mix_EffectFunc_t","devela::_dep::sdl2::sys::mixer::Mix_EffectDone_t","devela::_dep::sdl2::sys::SDL_malloc_func","devela::_dep::sdl2::sys::SDL_calloc_func","devela::_dep::sdl2::sys::SDL_realloc_func","devela::_dep::sdl2::sys::SDL_free_func","devela::_dep::sdl2::sys::SDL_main_func","devela::_dep::sdl2::sys::SDL_AssertionHandler","devela::_dep::sdl2::sys::SDL_ThreadFunction","devela::_dep::sdl2::sys::SDL_AudioCallback","devela::_dep::sdl2::sys::SDL_AudioFilter","devela::_dep::sdl2::sys::__compar_fn_t","devela::_dep::sdl2::sys::SDL_blit","devela::_dep::sdl2::sys::SDL_HitTest","devela::_dep::sdl2::sys::SDL_EventFilter","devela::_dep::sdl2::sys::SDL_HintCallback","devela::_dep::sdl2::sys::SDL_LogOutputFunction","devela::_dep::sdl2::sys::SDL_TimerCallback","devela::_dep::sdl2::sys::XIMProc","devela::_dep::sdl2::sys::XICProc","devela::_dep::sdl2::sys::XIDProc","devela::_dep::sdl2::sys::XErrorHandler","devela::_dep::sdl2::sys::XIOErrorHandler","devela::_dep::sdl2::sys::XIOErrorExitHandler","devela::_dep::sdl2::sys::XConnectionWatchProc"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IntoPyObject%3C'py%3E-for-Option%3CT%3E\" class=\"impl\"><a href=\"#impl-IntoPyObject%3C'py%3E-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'py, T&gt; <a class=\"trait\" href=\"devela/_dep/pyo3/trait.IntoPyObject.html\" title=\"trait devela::_dep::pyo3::IntoPyObject\">IntoPyObject</a>&lt;'py&gt; for <a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"devela/_dep/pyo3/trait.IntoPyObject.html\" title=\"trait devela::_dep::pyo3::IntoPyObject\">IntoPyObject</a>&lt;'py&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Target\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Target\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"devela/_dep/pyo3/trait.IntoPyObject.html#associatedtype.Target\" class=\"associatedtype\">Target</a> = <a class=\"struct\" href=\"devela/_dep/pyo3/struct.PyAny.html\" title=\"struct devela::_dep::pyo3::PyAny\">PyAny</a></h4></section></summary><div class='docblock'>The Python output type</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"devela/_dep/pyo3/trait.IntoPyObject.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"devela/_dep/pyo3/struct.Bound.html\" title=\"struct devela::_dep::pyo3::Bound\">Bound</a>&lt;'py, &lt;<a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;T&gt; as <a class=\"trait\" href=\"devela/_dep/pyo3/trait.IntoPyObject.html\" title=\"trait devela::_dep::pyo3::IntoPyObject\">IntoPyObject</a>&lt;'py&gt;&gt;::<a class=\"associatedtype\" href=\"devela/_dep/pyo3/trait.IntoPyObject.html#associatedtype.Target\" title=\"type devela::_dep::pyo3::IntoPyObject::Target\">Target</a>&gt;</h4></section></summary><div class='docblock'>The smart pointer type to use. <a href=\"devela/_dep/pyo3/trait.IntoPyObject.html#associatedtype.Output\">Read more</a></div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"devela/_dep/pyo3/trait.IntoPyObject.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = &lt;T as <a class=\"trait\" href=\"devela/_dep/pyo3/trait.IntoPyObject.html\" title=\"trait devela::_dep::pyo3::IntoPyObject\">IntoPyObject</a>&lt;'py&gt;&gt;::<a class=\"associatedtype\" href=\"devela/_dep/pyo3/trait.IntoPyObject.html#associatedtype.Error\" title=\"type devela::_dep::pyo3::IntoPyObject::Error\">Error</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_pyobject\" class=\"method trait-impl\"><a href=\"#method.into_pyobject\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/_dep/pyo3/trait.IntoPyObject.html#tymethod.into_pyobject\" class=\"fn\">into_pyobject</a>(\n    self,\n    py: <a class=\"struct\" href=\"devela/_dep/pyo3/struct.Python.html\" title=\"struct devela::_dep::pyo3::Python\">Python</a>&lt;'py&gt;,\n) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;&lt;<a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;T&gt; as <a class=\"trait\" href=\"devela/_dep/pyo3/trait.IntoPyObject.html\" title=\"trait devela::_dep::pyo3::IntoPyObject\">IntoPyObject</a>&lt;'py&gt;&gt;::<a class=\"associatedtype\" href=\"devela/_dep/pyo3/trait.IntoPyObject.html#associatedtype.Output\" title=\"type devela::_dep::pyo3::IntoPyObject::Output\">Output</a>, &lt;<a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;T&gt; as <a class=\"trait\" href=\"devela/_dep/pyo3/trait.IntoPyObject.html\" title=\"trait devela::_dep::pyo3::IntoPyObject\">IntoPyObject</a>&lt;'py&gt;&gt;::<a class=\"associatedtype\" href=\"devela/_dep/pyo3/trait.IntoPyObject.html#associatedtype.Error\" title=\"type devela::_dep::pyo3::IntoPyObject::Error\">Error</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;&lt;Option&lt;T&gt; as IntoPyObject&lt;&#39;py&gt;&gt;::Output, &lt;Option&lt;T&gt; as IntoPyObject&lt;&#39;py&gt;&gt;::Error&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Performs the conversion.</div></details></div></details>","IntoPyObject<'py>","devela::code::result::opt_res::opt_res::OptRes","devela::_dep::ffmpeg_the_third::sys::AVFifoCB","devela::_dep::ffmpeg_the_third::sys::av_format_control_message","devela::_dep::ffmpeg_the_third::sys::AVOpenCallback","devela::_dep::ffmpeg_the_third::sys::avfilter_action_func","devela::_dep::ffmpeg_the_third::sys::avfilter_execute_func","devela::_dep::miniquad::native::linux_x11::libx11::XErrorHandler","devela::_dep::miniquad::native::egl::__eglMustCastToProperFunctionPointerType","devela::_dep::pyo3::ffi::wrapperfunc","devela::_dep::pyo3::ffi::wrapperfunc_kwds","devela::_dep::sdl2::sys::mixer::Mix_EffectFunc_t","devela::_dep::sdl2::sys::mixer::Mix_EffectDone_t","devela::_dep::sdl2::sys::SDL_malloc_func","devela::_dep::sdl2::sys::SDL_calloc_func","devela::_dep::sdl2::sys::SDL_realloc_func","devela::_dep::sdl2::sys::SDL_free_func","devela::_dep::sdl2::sys::SDL_main_func","devela::_dep::sdl2::sys::SDL_AssertionHandler","devela::_dep::sdl2::sys::SDL_ThreadFunction","devela::_dep::sdl2::sys::SDL_AudioCallback","devela::_dep::sdl2::sys::SDL_AudioFilter","devela::_dep::sdl2::sys::__compar_fn_t","devela::_dep::sdl2::sys::SDL_blit","devela::_dep::sdl2::sys::SDL_HitTest","devela::_dep::sdl2::sys::SDL_EventFilter","devela::_dep::sdl2::sys::SDL_HintCallback","devela::_dep::sdl2::sys::SDL_LogOutputFunction","devela::_dep::sdl2::sys::SDL_TimerCallback","devela::_dep::sdl2::sys::XIMProc","devela::_dep::sdl2::sys::XICProc","devela::_dep::sdl2::sys::XIDProc","devela::_dep::sdl2::sys::XErrorHandler","devela::_dep::sdl2::sys::XIOErrorHandler","devela::_dep::sdl2::sys::XIOErrorExitHandler","devela::_dep::sdl2::sys::XConnectionWatchProc"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-MemPod-for-Option%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/devela/sys/mem/pod.rs.html#146\">Source</a><a href=\"#impl-MemPod-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T: <a class=\"trait\" href=\"devela/all/trait.MemPod.html\" title=\"trait devela::all::MemPod\">MemPod</a>&gt; <a class=\"trait\" href=\"devela/all/trait.MemPod.html\" title=\"trait devela::all::MemPod\">MemPod</a> for <a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;T&gt;</h3><span class=\"item-info\"><div class=\"stab portability\">Available on <strong>crate feature <code>unsafe_layout</code></strong> only.</div></span></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.zeroed\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/sys/mem/pod.rs.html#72-75\">Source</a><a href=\"#method.zeroed\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.MemPod.html#method.zeroed\" class=\"fn\">zeroed</a>() -&gt; Self</h4></section></summary><div class='docblock'>Returns a new instance contrcuted from zeroes.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_bytes\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/sys/mem/pod.rs.html#81-105\">Source</a><a href=\"#method.from_bytes\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.MemPod.html#method.from_bytes\" class=\"fn\">from_bytes</a>(bytes: &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>]) -&gt; Self</h4></section></summary><div class='docblock'>Returns a new instance constructed from the given bytes. <a href=\"devela/all/trait.MemPod.html#method.from_bytes\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_bytes\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/sys/mem/pod.rs.html#109-113\">Source</a><a href=\"#method.as_bytes\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.MemPod.html#method.as_bytes\" class=\"fn\">as_bytes</a>(&amp;self) -&gt; &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>] <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&amp;[u8]\">ⓘ</a></h4></section></summary><div class='docblock'>Returns the instance’s data as a slice of bytes.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_bytes_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/sys/mem/pod.rs.html#117-121\">Source</a><a href=\"#method.as_bytes_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.MemPod.html#method.as_bytes_mut\" class=\"fn\">as_bytes_mut</a>(&amp;mut self) -&gt; &amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>] <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&amp;mut [u8]\">ⓘ</a></h4></section></summary><div class='docblock'>Returns the instance’s data as a mutable slice of bytes.</div></details></div></details>","MemPod","devela::code::result::opt_res::opt_res::OptRes","devela::_dep::ffmpeg_the_third::sys::AVFifoCB","devela::_dep::ffmpeg_the_third::sys::av_format_control_message","devela::_dep::ffmpeg_the_third::sys::AVOpenCallback","devela::_dep::ffmpeg_the_third::sys::avfilter_action_func","devela::_dep::ffmpeg_the_third::sys::avfilter_execute_func","devela::_dep::miniquad::native::linux_x11::libx11::XErrorHandler","devela::_dep::miniquad::native::egl::__eglMustCastToProperFunctionPointerType","devela::_dep::pyo3::ffi::wrapperfunc","devela::_dep::pyo3::ffi::wrapperfunc_kwds","devela::_dep::sdl2::sys::mixer::Mix_EffectFunc_t","devela::_dep::sdl2::sys::mixer::Mix_EffectDone_t","devela::_dep::sdl2::sys::SDL_malloc_func","devela::_dep::sdl2::sys::SDL_calloc_func","devela::_dep::sdl2::sys::SDL_realloc_func","devela::_dep::sdl2::sys::SDL_free_func","devela::_dep::sdl2::sys::SDL_main_func","devela::_dep::sdl2::sys::SDL_AssertionHandler","devela::_dep::sdl2::sys::SDL_ThreadFunction","devela::_dep::sdl2::sys::SDL_AudioCallback","devela::_dep::sdl2::sys::SDL_AudioFilter","devela::_dep::sdl2::sys::__compar_fn_t","devela::_dep::sdl2::sys::SDL_blit","devela::_dep::sdl2::sys::SDL_HitTest","devela::_dep::sdl2::sys::SDL_EventFilter","devela::_dep::sdl2::sys::SDL_HintCallback","devela::_dep::sdl2::sys::SDL_LogOutputFunction","devela::_dep::sdl2::sys::SDL_TimerCallback","devela::_dep::sdl2::sys::XIMProc","devela::_dep::sdl2::sys::XICProc","devela::_dep::sdl2::sys::XIDProc","devela::_dep::sdl2::sys::XErrorHandler","devela::_dep::sdl2::sys::XIOErrorHandler","devela::_dep::sdl2::sys::XIOErrorExitHandler","devela::_dep::sdl2::sys::XConnectionWatchProc"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Option%3CResult%3CT,+E%3E%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2095\">Source</a><a href=\"#impl-Option%3CResult%3CT,+E%3E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, E&gt; <a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;<a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;T, E&gt;&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.transpose\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.33.0, const since 1.83.0\">1.33.0 (const: 1.83.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2116\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"devela/all/enum.Option.html#tymethod.transpose\" class=\"fn\">transpose</a>(self) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;T&gt;, E&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;Option&lt;T&gt;, E&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Transposes an <code>Option</code> of a <a href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\"><code>Result</code></a> into a <a href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\"><code>Result</code></a> of an <code>Option</code>.</p>\n<p><a href=\"devela/all/enum.Option.html#variant.None\" title=\"variant devela::all::Option::None\"><code>None</code></a> will be mapped to <code><a href=\"devela/all/enum.Result.html#variant.Ok\" title=\"variant devela::all::Result::Ok\">Ok</a>(<a href=\"devela/all/enum.Option.html#variant.None\" title=\"variant devela::all::Option::None\">None</a>)</code>.\n<code><a href=\"devela/all/enum.Option.html#variant.Some\" title=\"variant devela::all::Option::Some\">Some</a>(<a href=\"devela/all/enum.Result.html#variant.Ok\" title=\"variant devela::all::Result::Ok\">Ok</a>(_))</code> and <code><a href=\"devela/all/enum.Option.html#variant.Some\" title=\"variant devela::all::Option::Some\">Some</a>(<a href=\"devela/all/enum.Result.html#variant.Err\" title=\"variant devela::all::Result::Err\">Err</a>(_))</code> will be mapped to\n<code><a href=\"devela/all/enum.Result.html#variant.Ok\" title=\"variant devela::all::Result::Ok\">Ok</a>(<a href=\"devela/all/enum.Option.html#variant.Some\" title=\"variant devela::all::Option::Some\">Some</a>(_))</code> and <code><a href=\"devela/all/enum.Result.html#variant.Err\" title=\"variant devela::all::Result::Err\">Err</a>(_)</code>.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#[derive(Debug, Eq, PartialEq)]\n</span><span class=\"kw\">struct </span>SomeErr;\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Result</span>&lt;<span class=\"prelude-ty\">Option</span>&lt;i32&gt;, SomeErr&gt; = <span class=\"prelude-val\">Ok</span>(<span class=\"prelude-val\">Some</span>(<span class=\"number\">5</span>));\n<span class=\"kw\">let </span>y: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"prelude-ty\">Result</span>&lt;i32, SomeErr&gt;&gt; = <span class=\"prelude-val\">Some</span>(<span class=\"prelude-val\">Ok</span>(<span class=\"number\">5</span>));\n<span class=\"macro\">assert_eq!</span>(x, y.transpose());</code></pre></div>\n</div></details></div></details>",0,"devela::code::result::opt_res::opt_res::OptRes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Option%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#608\">Source</a><a href=\"#impl-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_some\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.48.0\">1.0.0 (const: 1.48.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#628\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"devela/all/enum.Option.html#tymethod.is_some\" class=\"fn\">is_some</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if the option is a <a href=\"devela/all/enum.Option.html#variant.Some\" title=\"variant devela::all::Option::Some\"><code>Some</code></a> value.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(x.is_some(), <span class=\"bool-val\">true</span>);\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.is_some(), <span class=\"bool-val\">false</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_some_and\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.70.0, const unstable\">1.70.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/143956\" title=\"Tracking issue for const_option_ops\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#654\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"devela/all/enum.Option.html#tymethod.is_some_and\" class=\"fn\">is_some_and</a>(self, f: impl <a class=\"trait\" href=\"devela/all/trait.FnOnce.html\" title=\"trait devela::all::FnOnce\">FnOnce</a>(T) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if the option is a <a href=\"devela/all/enum.Option.html#variant.Some\" title=\"variant devela::all::Option::Some\"><code>Some</code></a> and the value inside of it matches a predicate.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(x.is_some_and(|x| x &gt; <span class=\"number\">1</span>), <span class=\"bool-val\">true</span>);\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">Some</span>(<span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>(x.is_some_and(|x| x &gt; <span class=\"number\">1</span>), <span class=\"bool-val\">false</span>);\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.is_some_and(|x| x &gt; <span class=\"number\">1</span>), <span class=\"bool-val\">false</span>);\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;String&gt; = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"ownership\"</span>.to_string());\n<span class=\"macro\">assert_eq!</span>(x.as_ref().is_some_and(|x| x.len() &gt; <span class=\"number\">1</span>), <span class=\"bool-val\">true</span>);\n<span class=\"macro\">println!</span>(<span class=\"string\">\"still alive {:?}\"</span>, x);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_none\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.48.0\">1.0.0 (const: 1.48.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#677\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"devela/all/enum.Option.html#tymethod.is_none\" class=\"fn\">is_none</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if the option is a <a href=\"devela/all/enum.Option.html#variant.None\" title=\"variant devela::all::Option::None\"><code>None</code></a> value.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(x.is_none(), <span class=\"bool-val\">false</span>);\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.is_none(), <span class=\"bool-val\">true</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_none_or\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.82.0, const unstable\">1.82.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/143956\" title=\"Tracking issue for const_option_ops\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#703\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"devela/all/enum.Option.html#tymethod.is_none_or\" class=\"fn\">is_none_or</a>(self, f: impl <a class=\"trait\" href=\"devela/all/trait.FnOnce.html\" title=\"trait devela::all::FnOnce\">FnOnce</a>(T) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if the option is a <a href=\"devela/all/enum.Option.html#variant.None\" title=\"variant devela::all::Option::None\"><code>None</code></a> or the value inside of it matches a predicate.</p>\n<h5 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(x.is_none_or(|x| x &gt; <span class=\"number\">1</span>), <span class=\"bool-val\">true</span>);\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">Some</span>(<span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>(x.is_none_or(|x| x &gt; <span class=\"number\">1</span>), <span class=\"bool-val\">false</span>);\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.is_none_or(|x| x &gt; <span class=\"number\">1</span>), <span class=\"bool-val\">true</span>);\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;String&gt; = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"ownership\"</span>.to_string());\n<span class=\"macro\">assert_eq!</span>(x.as_ref().is_none_or(|x| x.len() &gt; <span class=\"number\">1</span>), <span class=\"bool-val\">true</span>);\n<span class=\"macro\">println!</span>(<span class=\"string\">\"still alive {:?}\"</span>, x);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_ref\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.48.0\">1.0.0 (const: 1.48.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#737\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"devela/all/enum.Option.html#tymethod.as_ref\" class=\"fn\">as_ref</a>(&amp;self) -&gt; <a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;T</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Option&lt;&amp;T&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Converts from <code>&amp;Option&lt;T&gt;</code> to <code>Option&lt;&amp;T&gt;</code>.</p>\n<h5 id=\"examples-4\"><a class=\"doc-anchor\" href=\"#examples-4\">§</a>Examples</h5>\n<p>Calculates the length of an <code>Option&lt;<a href=\"../../std/string/struct.String.html\" title=\"String\">String</a>&gt;</code> as an <code>Option&lt;<a href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\" title=\"primitive usize\">usize</a>&gt;</code>\nwithout moving the <a href=\"../../std/string/struct.String.html\" title=\"String\"><code>String</code></a>. The <a href=\"devela/all/enum.Option.html#method.map\" title=\"method devela::all::Option::map\"><code>map</code></a> method takes the <code>self</code> argument by value,\nconsuming the original, so this technique uses <code>as_ref</code> to first take an <code>Option</code> to a\nreference to the value inside the original.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>text: <span class=\"prelude-ty\">Option</span>&lt;String&gt; = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"Hello, world!\"</span>.to_string());\n<span class=\"comment\">// First, cast `Option&lt;String&gt;` to `Option&lt;&amp;String&gt;` with `as_ref`,\n// then consume *that* with `map`, leaving `text` on the stack.\n</span><span class=\"kw\">let </span>text_length: <span class=\"prelude-ty\">Option</span>&lt;usize&gt; = text.as_ref().map(|s| s.len());\n<span class=\"macro\">println!</span>(<span class=\"string\">\"still can print text: {text:?}\"</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_mut\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.83.0\">1.0.0 (const: 1.83.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#759\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"devela/all/enum.Option.html#tymethod.as_mut\" class=\"fn\">as_mut</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut T</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Option&lt;&amp;mut T&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Converts from <code>&amp;mut Option&lt;T&gt;</code> to <code>Option&lt;&amp;mut T&gt;</code>.</p>\n<h5 id=\"examples-5\"><a class=\"doc-anchor\" href=\"#examples-5\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"kw\">match </span>x.as_mut() {\n    <span class=\"prelude-val\">Some</span>(v) =&gt; <span class=\"kw-2\">*</span>v = <span class=\"number\">42</span>,\n    <span class=\"prelude-val\">None </span>=&gt; {},\n}\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">Some</span>(<span class=\"number\">42</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_pin_ref\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.33.0, const since 1.84.0\">1.33.0 (const: 1.84.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#773\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"devela/all/enum.Option.html#tymethod.as_pin_ref\" class=\"fn\">as_pin_ref</a>(self: <a class=\"struct\" href=\"devela/all/struct.Pin.html\" title=\"struct devela::all::Pin\">Pin</a>&lt;&amp;<a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;T&gt;&gt;) -&gt; <a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;<a class=\"struct\" href=\"devela/all/struct.Pin.html\" title=\"struct devela::all::Pin\">Pin</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;T</a>&gt;&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Option&lt;Pin&lt;&amp;T&gt;&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Converts from <code><a href=\"devela/all/struct.Pin.html\" title=\"struct devela::all::Pin\">Pin</a>&lt;<a href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\" title=\"shared reference\">&amp;</a>Option&lt;T&gt;&gt;</code> to <code>Option&lt;<a href=\"devela/all/struct.Pin.html\" title=\"struct devela::all::Pin\">Pin</a>&lt;<a href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\" title=\"shared reference\">&amp;</a>T&gt;&gt;</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_pin_mut\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.33.0, const since 1.84.0\">1.33.0 (const: 1.84.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#790\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"devela/all/enum.Option.html#tymethod.as_pin_mut\" class=\"fn\">as_pin_mut</a>(self: <a class=\"struct\" href=\"devela/all/struct.Pin.html\" title=\"struct devela::all::Pin\">Pin</a>&lt;&amp;mut <a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;T&gt;&gt;) -&gt; <a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;<a class=\"struct\" href=\"devela/all/struct.Pin.html\" title=\"struct devela::all::Pin\">Pin</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut T</a>&gt;&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Option&lt;Pin&lt;&amp;mut T&gt;&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Converts from <code><a href=\"devela/all/struct.Pin.html\" title=\"struct devela::all::Pin\">Pin</a>&lt;<a href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\" title=\"mutable reference\">&amp;mut</a> Option&lt;T&gt;&gt;</code> to <code>Option&lt;<a href=\"devela/all/struct.Pin.html\" title=\"struct devela::all::Pin\">Pin</a>&lt;<a href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\" title=\"mutable reference\">&amp;mut</a> T&gt;&gt;</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_slice\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.75.0, const since 1.84.0\">1.75.0 (const: 1.84.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#837\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"devela/all/enum.Option.html#tymethod.as_slice\" class=\"fn\">as_slice</a>(&amp;self) -&gt; &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&amp;[T]\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Returns a slice of the contained value, if any. If this is <code>None</code>, an\nempty slice is returned. This can be useful to have a single type of\niterator over an <code>Option</code> or slice.</p>\n<p>Note: Should you have an <code>Option&lt;&amp;T&gt;</code> and wish to get a slice of <code>T</code>,\nyou can unpack it via <code>opt.map_or(&amp;[], std::slice::from_ref)</code>.</p>\n<h5 id=\"examples-6\"><a class=\"doc-anchor\" href=\"#examples-6\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(\n    [<span class=\"prelude-val\">Some</span>(<span class=\"number\">1234</span>).as_slice(), <span class=\"prelude-val\">None</span>.as_slice()],\n    [<span class=\"kw-2\">&amp;</span>[<span class=\"number\">1234</span>][..], <span class=\"kw-2\">&amp;</span>[][..]],\n);</code></pre></div>\n<p>The inverse of this function is (discounting\nborrowing) <a href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html#method.first\" title=\"method slice::first\"><code>[_]::first</code></a>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">for </span>i <span class=\"kw\">in </span>[<span class=\"prelude-val\">Some</span>(<span class=\"number\">1234_u16</span>), <span class=\"prelude-val\">None</span>] {\n    <span class=\"macro\">assert_eq!</span>(i.as_ref(), i.as_slice().first());\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_mut_slice\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.75.0, const since 1.84.0\">1.75.0 (const: 1.84.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#892\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"devela/all/enum.Option.html#tymethod.as_mut_slice\" class=\"fn\">as_mut_slice</a>(&amp;mut self) -&gt; &amp;mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&amp;mut [T]\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Returns a mutable slice of the contained value, if any. If this is\n<code>None</code>, an empty slice is returned. This can be useful to have a\nsingle type of iterator over an <code>Option</code> or slice.</p>\n<p>Note: Should you have an <code>Option&lt;&amp;mut T&gt;</code> instead of a\n<code>&amp;mut Option&lt;T&gt;</code>, which this method takes, you can obtain a mutable\nslice via <code>opt.map_or(&amp;mut [], std::slice::from_mut)</code>.</p>\n<h5 id=\"examples-7\"><a class=\"doc-anchor\" href=\"#examples-7\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(\n    [<span class=\"prelude-val\">Some</span>(<span class=\"number\">1234</span>).as_mut_slice(), <span class=\"prelude-val\">None</span>.as_mut_slice()],\n    [<span class=\"kw-2\">&amp;mut </span>[<span class=\"number\">1234</span>][..], <span class=\"kw-2\">&amp;mut </span>[][..]],\n);</code></pre></div>\n<p>The result is a mutable slice of zero or one items that points into\nour original <code>Option</code>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">1234</span>);\nx.as_mut_slice()[<span class=\"number\">0</span>] += <span class=\"number\">1</span>;\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">Some</span>(<span class=\"number\">1235</span>));</code></pre></div>\n<p>The inverse of this method (discounting borrowing)\nis <a href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html#method.first_mut\" title=\"method slice::first_mut\"><code>[_]::first_mut</code></a>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"number\">123</span>).as_mut_slice().first_mut(), <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;mut </span><span class=\"number\">123</span>))</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.expect\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.83.0\">1.0.0 (const: 1.83.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#961\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"devela/all/enum.Option.html#tymethod.expect\" class=\"fn\">expect</a>(self, msg: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.str.html\">str</a>) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Returns the contained <a href=\"devela/all/enum.Option.html#variant.Some\" title=\"variant devela::all::Option::Some\"><code>Some</code></a> value, consuming the <code>self</code> value.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if the value is a <a href=\"devela/all/enum.Option.html#variant.None\" title=\"variant devela::all::Option::None\"><code>None</code></a> with a custom panic message provided by\n<code>msg</code>.</p>\n<h5 id=\"examples-8\"><a class=\"doc-anchor\" href=\"#examples-8\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"value\"</span>);\n<span class=\"macro\">assert_eq!</span>(x.expect(<span class=\"string\">\"fruits are healthy\"</span>), <span class=\"string\">\"value\"</span>);</code></pre></div>\n\n<div class=\"example-wrap should_panic\"><a href=\"#\" class=\"tooltip\" title=\"This example panics\">ⓘ</a><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\nx.expect(<span class=\"string\">\"fruits are healthy\"</span>); <span class=\"comment\">// panics with `fruits are healthy`</span></code></pre></div>\n<h5 id=\"recommended-message-style\"><a class=\"doc-anchor\" href=\"#recommended-message-style\">§</a>Recommended Message Style</h5>\n<p>We recommend that <code>expect</code> messages are used to describe the reason you\n<em>expect</em> the <code>Option</code> should be <code>Some</code>.</p>\n\n<div class=\"example-wrap should_panic\"><a href=\"#\" class=\"tooltip\" title=\"This example panics\">ⓘ</a><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>item = slice.get(<span class=\"number\">0</span>)\n    .expect(<span class=\"string\">\"slice should not be empty\"</span>);</code></pre></div>\n<p><strong>Hint</strong>: If you’re having trouble remembering how to phrase expect\nerror messages remember to focus on the word “should” as in “env\nvariable should be set by blah” or “the given binary should be available\nand executable by the current user”.</p>\n<p>For more detail on expect message styles and the reasoning behind our\nrecommendation please refer to the section on <a href=\"../../std/error/index.html#common-message-styles\">“Common Message\nStyles”</a> in the <a href=\"../../std/error/index.html\"><code>std::error</code></a> module docs.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unwrap\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.83.0\">1.0.0 (const: 1.83.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1006\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"devela/all/enum.Option.html#tymethod.unwrap\" class=\"fn\">unwrap</a>(self) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Returns the contained <a href=\"devela/all/enum.Option.html#variant.Some\" title=\"variant devela::all::Option::Some\"><code>Some</code></a> value, consuming the <code>self</code> value.</p>\n<p>Because this function may panic, its use is generally discouraged.\nPanics are meant for unrecoverable errors, and\n<a href=\"https://doc.rust-lang.org/book/ch09-01-unrecoverable-errors-with-panic.html\">may abort the entire program</a>.</p>\n<p>Instead, prefer to use pattern matching and handle the <a href=\"devela/all/enum.Option.html#variant.None\" title=\"variant devela::all::Option::None\"><code>None</code></a>\ncase explicitly, or call <a href=\"devela/all/enum.Option.html#method.unwrap_or\" title=\"method devela::all::Option::unwrap_or\"><code>unwrap_or</code></a>, <a href=\"devela/all/enum.Option.html#method.unwrap_or_else\" title=\"method devela::all::Option::unwrap_or_else\"><code>unwrap_or_else</code></a>, or\n<a href=\"devela/all/enum.Option.html#method.unwrap_or_default\" title=\"method devela::all::Option::unwrap_or_default\"><code>unwrap_or_default</code></a>. In functions returning <code>Option</code>, you can use\n<a href=\"https://doc.rust-lang.org/book/ch09-02-recoverable-errors-with-result.html#where-the--operator-can-be-used\">the <code>?</code> (try) operator</a>.</p>\n<h5 id=\"panics-1\"><a class=\"doc-anchor\" href=\"#panics-1\">§</a>Panics</h5>\n<p>Panics if the self value equals <a href=\"devela/all/enum.Option.html#variant.None\" title=\"variant devela::all::Option::None\"><code>None</code></a>.</p>\n<h5 id=\"examples-9\"><a class=\"doc-anchor\" href=\"#examples-9\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"air\"</span>);\n<span class=\"macro\">assert_eq!</span>(x.unwrap(), <span class=\"string\">\"air\"</span>);</code></pre></div>\n\n<div class=\"example-wrap should_panic\"><a href=\"#\" class=\"tooltip\" title=\"This example panics\">ⓘ</a><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.unwrap(), <span class=\"string\">\"air\"</span>); <span class=\"comment\">// fails</span></code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unwrap_or\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/143956\" title=\"Tracking issue for const_option_ops\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1031-1033\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"devela/all/enum.Option.html#tymethod.unwrap_or\" class=\"fn\">unwrap_or</a>(self, default: T) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Returns the contained <a href=\"devela/all/enum.Option.html#variant.Some\" title=\"variant devela::all::Option::Some\"><code>Some</code></a> value or a provided default.</p>\n<p>Arguments passed to <code>unwrap_or</code> are eagerly evaluated; if you are passing\nthe result of a function call, it is recommended to use <a href=\"devela/all/enum.Option.html#method.unwrap_or_else\" title=\"method devela::all::Option::unwrap_or_else\"><code>unwrap_or_else</code></a>,\nwhich is lazily evaluated.</p>\n<h5 id=\"examples-10\"><a class=\"doc-anchor\" href=\"#examples-10\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"string\">\"car\"</span>).unwrap_or(<span class=\"string\">\"bike\"</span>), <span class=\"string\">\"car\"</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>.unwrap_or(<span class=\"string\">\"bike\"</span>), <span class=\"string\">\"bike\"</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unwrap_or_else\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/143956\" title=\"Tracking issue for const_option_ops\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1054-1056\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"devela/all/enum.Option.html#tymethod.unwrap_or_else\" class=\"fn\">unwrap_or_else</a>&lt;F&gt;(self, f: F) -&gt; T<div class=\"where\">where\n    F: <a class=\"trait\" href=\"devela/all/trait.FnOnce.html\" title=\"trait devela::all::FnOnce\">FnOnce</a>() -&gt; T,</div></h4></section></summary><div class=\"docblock\"><p>Returns the contained <a href=\"devela/all/enum.Option.html#variant.Some\" title=\"variant devela::all::Option::Some\"><code>Some</code></a> value or computes it from a closure.</p>\n<h5 id=\"examples-11\"><a class=\"doc-anchor\" href=\"#examples-11\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>k = <span class=\"number\">10</span>;\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"number\">4</span>).unwrap_or_else(|| <span class=\"number\">2 </span>* k), <span class=\"number\">4</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>.unwrap_or_else(|| <span class=\"number\">2 </span>* k), <span class=\"number\">20</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unwrap_or_default\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/143956\" title=\"Tracking issue for const_option_ops\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1086-1088\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"devela/all/enum.Option.html#tymethod.unwrap_or_default\" class=\"fn\">unwrap_or_default</a>(self) -&gt; T<div class=\"where\">where\n    T: <a class=\"trait\" href=\"devela/code/trait.Default.html\" title=\"trait devela::code::Default\">Default</a>,</div></h4></section></summary><div class=\"docblock\"><p>Returns the contained <a href=\"devela/all/enum.Option.html#variant.Some\" title=\"variant devela::all::Option::Some\"><code>Some</code></a> value or a default.</p>\n<p>Consumes the <code>self</code> argument then, if <a href=\"devela/all/enum.Option.html#variant.Some\" title=\"variant devela::all::Option::Some\"><code>Some</code></a>, returns the contained\nvalue, otherwise if <a href=\"devela/all/enum.Option.html#variant.None\" title=\"variant devela::all::Option::None\"><code>None</code></a>, returns the <a href=\"devela/code/trait.Default.html#tymethod.default\" title=\"associated function devela::code::Default::default\">default value</a> for that\ntype.</p>\n<h5 id=\"examples-12\"><a class=\"doc-anchor\" href=\"#examples-12\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>y: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">Some</span>(<span class=\"number\">12</span>);\n\n<span class=\"macro\">assert_eq!</span>(x.unwrap_or_default(), <span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>(y.unwrap_or_default(), <span class=\"number\">12</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unwrap_unchecked\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.58.0, const since 1.83.0\">1.58.0 (const: 1.83.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1121\">Source</a></span><h4 class=\"code-header\">pub const unsafe fn <a href=\"devela/all/enum.Option.html#tymethod.unwrap_unchecked\" class=\"fn\">unwrap_unchecked</a>(self) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Returns the contained <a href=\"devela/all/enum.Option.html#variant.Some\" title=\"variant devela::all::Option::Some\"><code>Some</code></a> value, consuming the <code>self</code> value,\nwithout checking that the value is not <a href=\"devela/all/enum.Option.html#variant.None\" title=\"variant devela::all::Option::None\"><code>None</code></a>.</p>\n<h5 id=\"safety\"><a class=\"doc-anchor\" href=\"#safety\">§</a>Safety</h5>\n<p>Calling this method on <a href=\"devela/all/enum.Option.html#variant.None\" title=\"variant devela::all::Option::None\"><code>None</code></a> is <em><a href=\"https://doc.rust-lang.org/reference/behavior-considered-undefined.html\">undefined behavior</a></em>.</p>\n<h5 id=\"examples-13\"><a class=\"doc-anchor\" href=\"#examples-13\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"air\"</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw\">unsafe </span>{ x.unwrap_unchecked() }, <span class=\"string\">\"air\"</span>);</code></pre></div>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw\">unsafe </span>{ x.unwrap_unchecked() }, <span class=\"string\">\"air\"</span>); <span class=\"comment\">// Undefined behavior!</span></code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.map\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/143956\" title=\"Tracking issue for const_option_ops\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1153-1155\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"devela/all/enum.Option.html#tymethod.map\" class=\"fn\">map</a>&lt;U, F&gt;(self, f: F) -&gt; <a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;U&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Option&lt;U&gt;\">ⓘ</a><div class=\"where\">where\n    F: <a class=\"trait\" href=\"devela/all/trait.FnOnce.html\" title=\"trait devela::all::FnOnce\">FnOnce</a>(T) -&gt; U,</div></h4></section></summary><div class=\"docblock\"><p>Maps an <code>Option&lt;T&gt;</code> to <code>Option&lt;U&gt;</code> by applying a function to a contained value (if <code>Some</code>) or returns <code>None</code> (if <code>None</code>).</p>\n<h5 id=\"examples-14\"><a class=\"doc-anchor\" href=\"#examples-14\">§</a>Examples</h5>\n<p>Calculates the length of an <code>Option&lt;<a href=\"../../std/string/struct.String.html\" title=\"String\">String</a>&gt;</code> as an\n<code>Option&lt;<a href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\" title=\"primitive usize\">usize</a>&gt;</code>, consuming the original:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>maybe_some_string = <span class=\"prelude-val\">Some</span>(String::from(<span class=\"string\">\"Hello, World!\"</span>));\n<span class=\"comment\">// `Option::map` takes self *by value*, consuming `maybe_some_string`\n</span><span class=\"kw\">let </span>maybe_some_len = maybe_some_string.map(|s| s.len());\n<span class=\"macro\">assert_eq!</span>(maybe_some_len, <span class=\"prelude-val\">Some</span>(<span class=\"number\">13</span>));\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.map(|s| s.len()), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.inspect\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.76.0, const unstable\">1.76.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/143956\" title=\"Tracking issue for const_option_ops\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1184-1186\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"devela/all/enum.Option.html#tymethod.inspect\" class=\"fn\">inspect</a>&lt;F&gt;(self, f: F) -&gt; <a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;T&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Option&lt;T&gt;\">ⓘ</a><div class=\"where\">where\n    F: <a class=\"trait\" href=\"devela/all/trait.FnOnce.html\" title=\"trait devela::all::FnOnce\">FnOnce</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;T</a>),</div></h4></section></summary><div class=\"docblock\"><p>Calls a function with a reference to the contained value if <a href=\"devela/all/enum.Option.html#variant.Some\" title=\"variant devela::all::Option::Some\"><code>Some</code></a>.</p>\n<p>Returns the original option.</p>\n<h5 id=\"examples-15\"><a class=\"doc-anchor\" href=\"#examples-15\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>list = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];\n\n<span class=\"comment\">// prints \"got: 2\"\n</span><span class=\"kw\">let </span>x = list\n    .get(<span class=\"number\">1</span>)\n    .inspect(|x| <span class=\"macro\">println!</span>(<span class=\"string\">\"got: {x}\"</span>))\n    .expect(<span class=\"string\">\"list should be long enough\"</span>);\n\n<span class=\"comment\">// prints nothing\n</span>list.get(<span class=\"number\">5</span>).inspect(|x| <span class=\"macro\">println!</span>(<span class=\"string\">\"got: {x}\"</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.map_or\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/143956\" title=\"Tracking issue for const_option_ops\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1217-1220\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"devela/all/enum.Option.html#tymethod.map_or\" class=\"fn\">map_or</a>&lt;U, F&gt;(self, default: U, f: F) -&gt; U<div class=\"where\">where\n    F: <a class=\"trait\" href=\"devela/all/trait.FnOnce.html\" title=\"trait devela::all::FnOnce\">FnOnce</a>(T) -&gt; U,</div></h4></section></summary><div class=\"docblock\"><p>Returns the provided default result (if none),\nor applies a function to the contained value (if any).</p>\n<p>Arguments passed to <code>map_or</code> are eagerly evaluated; if you are passing\nthe result of a function call, it is recommended to use <a href=\"devela/all/enum.Option.html#method.map_or_else\" title=\"method devela::all::Option::map_or_else\"><code>map_or_else</code></a>,\nwhich is lazily evaluated.</p>\n<h5 id=\"examples-16\"><a class=\"doc-anchor\" href=\"#examples-16\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"foo\"</span>);\n<span class=\"macro\">assert_eq!</span>(x.map_or(<span class=\"number\">42</span>, |v| v.len()), <span class=\"number\">3</span>);\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.map_or(<span class=\"number\">42</span>, |v| v.len()), <span class=\"number\">42</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.map_or_else\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/143956\" title=\"Tracking issue for const_option_ops\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1264-1267\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"devela/all/enum.Option.html#tymethod.map_or_else\" class=\"fn\">map_or_else</a>&lt;U, D, F&gt;(self, default: D, f: F) -&gt; U<div class=\"where\">where\n    D: <a class=\"trait\" href=\"devela/all/trait.FnOnce.html\" title=\"trait devela::all::FnOnce\">FnOnce</a>() -&gt; U,\n    F: <a class=\"trait\" href=\"devela/all/trait.FnOnce.html\" title=\"trait devela::all::FnOnce\">FnOnce</a>(T) -&gt; U,</div></h4></section></summary><div class=\"docblock\"><p>Computes a default function result (if none), or\napplies a different function to the contained value (if any).</p>\n<h5 id=\"basic-examples\"><a class=\"doc-anchor\" href=\"#basic-examples\">§</a>Basic examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>k = <span class=\"number\">21</span>;\n\n<span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"foo\"</span>);\n<span class=\"macro\">assert_eq!</span>(x.map_or_else(|| <span class=\"number\">2 </span>* k, |v| v.len()), <span class=\"number\">3</span>);\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.map_or_else(|| <span class=\"number\">2 </span>* k, |v| v.len()), <span class=\"number\">42</span>);</code></pre></div>\n<h5 id=\"handling-a-result-based-fallback\"><a class=\"doc-anchor\" href=\"#handling-a-result-based-fallback\">§</a>Handling a Result-based fallback</h5>\n<p>A somewhat common occurrence when dealing with optional values\nin combination with <a href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\"><code>Result&lt;T, E&gt;</code></a> is the case where one wants to invoke\na fallible fallback if the option is not present.  This example\nparses a command line argument (if present), or the contents of a file to\nan integer.  However, unlike accessing the command line argument, reading\nthe file is fallible, so it must be wrapped with <code>Ok</code>.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>v: u64 = std::env::args()\n   .nth(<span class=\"number\">1</span>)\n   .map_or_else(|| std::fs::read_to_string(<span class=\"string\">\"/etc/someconfig.conf\"</span>), <span class=\"prelude-val\">Ok</span>)<span class=\"question-mark\">?\n   </span>.parse()<span class=\"question-mark\">?</span>;</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.map_or_default\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1295-1298\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"devela/all/enum.Option.html#tymethod.map_or_default\" class=\"fn\">map_or_default</a>&lt;U, F&gt;(self, f: F) -&gt; U<div class=\"where\">where\n    U: <a class=\"trait\" href=\"devela/code/trait.Default.html\" title=\"trait devela::code::Default\">Default</a>,\n    F: <a class=\"trait\" href=\"devela/all/trait.FnOnce.html\" title=\"trait devela::all::FnOnce\">FnOnce</a>(T) -&gt; U,</div></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>result_option_map_or_default</code>)</span></div></span></summary><div class=\"docblock\"><p>Maps an <code>Option&lt;T&gt;</code> to a <code>U</code> by applying function <code>f</code> to the contained\nvalue if the option is <a href=\"devela/all/enum.Option.html#variant.Some\" title=\"variant devela::all::Option::Some\"><code>Some</code></a>, otherwise if <a href=\"devela/all/enum.Option.html#variant.None\" title=\"variant devela::all::Option::None\"><code>None</code></a>, returns the\n<a href=\"devela/code/trait.Default.html#tymethod.default\" title=\"associated function devela::code::Default::default\">default value</a> for the type <code>U</code>.</p>\n<h5 id=\"examples-17\"><a class=\"doc-anchor\" href=\"#examples-17\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(result_option_map_or_default)]\n\n</span><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"hi\"</span>);\n<span class=\"kw\">let </span>y: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\n\n<span class=\"macro\">assert_eq!</span>(x.map_or_default(|x| x.len()), <span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(y.map_or_default(|y| y.len()), <span class=\"number\">0</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ok_or\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/143956\" title=\"Tracking issue for const_option_ops\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1330\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"devela/all/enum.Option.html#tymethod.ok_or\" class=\"fn\">ok_or</a>&lt;E&gt;(self, err: E) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;T, E&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;T, E&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Transforms the <code>Option&lt;T&gt;</code> into a <a href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\"><code>Result&lt;T, E&gt;</code></a>, mapping <a href=\"devela/all/enum.Option.html#variant.Some\" title=\"variant devela::all::Option::Some\"><code>Some(v)</code></a> to\n<a href=\"devela/all/enum.Result.html#variant.Ok\" title=\"variant devela::all::Result::Ok\"><code>Ok(v)</code></a> and <a href=\"devela/all/enum.Option.html#variant.None\" title=\"variant devela::all::Option::None\"><code>None</code></a> to <a href=\"devela/all/enum.Result.html#variant.Err\" title=\"variant devela::all::Result::Err\"><code>Err(err)</code></a>.</p>\n<p>Arguments passed to <code>ok_or</code> are eagerly evaluated; if you are passing the\nresult of a function call, it is recommended to use <a href=\"devela/all/enum.Option.html#method.ok_or_else\" title=\"method devela::all::Option::ok_or_else\"><code>ok_or_else</code></a>, which is\nlazily evaluated.</p>\n<h5 id=\"examples-18\"><a class=\"doc-anchor\" href=\"#examples-18\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"foo\"</span>);\n<span class=\"macro\">assert_eq!</span>(x.ok_or(<span class=\"number\">0</span>), <span class=\"prelude-val\">Ok</span>(<span class=\"string\">\"foo\"</span>));\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.ok_or(<span class=\"number\">0</span>), <span class=\"prelude-val\">Err</span>(<span class=\"number\">0</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ok_or_else\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/143956\" title=\"Tracking issue for const_option_ops\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1356-1358\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"devela/all/enum.Option.html#tymethod.ok_or_else\" class=\"fn\">ok_or_else</a>&lt;E, F&gt;(self, err: F) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;T, E&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;T, E&gt;\">ⓘ</a><div class=\"where\">where\n    F: <a class=\"trait\" href=\"devela/all/trait.FnOnce.html\" title=\"trait devela::all::FnOnce\">FnOnce</a>() -&gt; E,</div></h4></section></summary><div class=\"docblock\"><p>Transforms the <code>Option&lt;T&gt;</code> into a <a href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\"><code>Result&lt;T, E&gt;</code></a>, mapping <a href=\"devela/all/enum.Option.html#variant.Some\" title=\"variant devela::all::Option::Some\"><code>Some(v)</code></a> to\n<a href=\"devela/all/enum.Result.html#variant.Ok\" title=\"variant devela::all::Result::Ok\"><code>Ok(v)</code></a> and <a href=\"devela/all/enum.Option.html#variant.None\" title=\"variant devela::all::Option::None\"><code>None</code></a> to <a href=\"devela/all/enum.Result.html#variant.Err\" title=\"variant devela::all::Result::Err\"><code>Err(err())</code></a>.</p>\n<h5 id=\"examples-19\"><a class=\"doc-anchor\" href=\"#examples-19\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"foo\"</span>);\n<span class=\"macro\">assert_eq!</span>(x.ok_or_else(|| <span class=\"number\">0</span>), <span class=\"prelude-val\">Ok</span>(<span class=\"string\">\"foo\"</span>));\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.ok_or_else(|| <span class=\"number\">0</span>), <span class=\"prelude-val\">Err</span>(<span class=\"number\">0</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_deref\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.40.0\">1.40.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1382-1384\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"devela/all/enum.Option.html#tymethod.as_deref\" class=\"fn\">as_deref</a>(&amp;self) -&gt; <a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;&amp;&lt;T as <a class=\"trait\" href=\"devela/all/trait.Deref.html\" title=\"trait devela::all::Deref\">Deref</a>&gt;::<a class=\"associatedtype\" href=\"devela/all/trait.Deref.html#associatedtype.Target\" title=\"type devela::all::Deref::Target\">Target</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Option&lt;&amp;&lt;T as Deref&gt;::Target&gt;\">ⓘ</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"devela/all/trait.Deref.html\" title=\"trait devela::all::Deref\">Deref</a>,</div></h4></section></summary><div class=\"docblock\"><p>Converts from <code>Option&lt;T&gt;</code> (or <code>&amp;Option&lt;T&gt;</code>) to <code>Option&lt;&amp;T::Target&gt;</code>.</p>\n<p>Leaves the original Option in-place, creating a new one with a reference\nto the original one, additionally coercing the contents via <a href=\"devela/all/trait.Deref.html\" title=\"trait devela::all::Deref\"><code>Deref</code></a>.</p>\n<h5 id=\"examples-20\"><a class=\"doc-anchor\" href=\"#examples-20\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;String&gt; = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"hey\"</span>.to_owned());\n<span class=\"macro\">assert_eq!</span>(x.as_deref(), <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"hey\"</span>));\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;String&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.as_deref(), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_deref_mut\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.40.0\">1.40.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1405-1407\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"devela/all/enum.Option.html#tymethod.as_deref_mut\" class=\"fn\">as_deref_mut</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;&amp;mut &lt;T as <a class=\"trait\" href=\"devela/all/trait.Deref.html\" title=\"trait devela::all::Deref\">Deref</a>&gt;::<a class=\"associatedtype\" href=\"devela/all/trait.Deref.html#associatedtype.Target\" title=\"type devela::all::Deref::Target\">Target</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Option&lt;&amp;mut &lt;T as Deref&gt;::Target&gt;\">ⓘ</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"devela/all/trait.DerefMut.html\" title=\"trait devela::all::DerefMut\">DerefMut</a>,</div></h4></section></summary><div class=\"docblock\"><p>Converts from <code>Option&lt;T&gt;</code> (or <code>&amp;mut Option&lt;T&gt;</code>) to <code>Option&lt;&amp;mut T::Target&gt;</code>.</p>\n<p>Leaves the original <code>Option</code> in-place, creating a new one containing a mutable reference to\nthe inner type’s <a href=\"devela/all/trait.Deref.html#associatedtype.Target\" title=\"associated type devela::all::Deref::Target\"><code>Deref::Target</code></a> type.</p>\n<h5 id=\"examples-21\"><a class=\"doc-anchor\" href=\"#examples-21\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x: <span class=\"prelude-ty\">Option</span>&lt;String&gt; = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"hey\"</span>.to_owned());\n<span class=\"macro\">assert_eq!</span>(x.as_deref_mut().map(|x| {\n    x.make_ascii_uppercase();\n    x\n}), <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"HEY\"</span>.to_owned().as_mut_str()));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.iter\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1429\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"devela/all/enum.Option.html#tymethod.iter\" class=\"fn\">iter</a>(&amp;self) -&gt; <a class=\"struct\" href=\"devela/all/struct.OptionIter.html\" title=\"struct devela::all::OptionIter\">Iter</a>&lt;'_, T&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Iter&lt;&#39;_, T&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Returns an iterator over the possibly contained value.</p>\n<h5 id=\"examples-22\"><a class=\"doc-anchor\" href=\"#examples-22\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">4</span>);\n<span class=\"macro\">assert_eq!</span>(x.iter().next(), <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span><span class=\"number\">4</span>));\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.iter().next(), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.iter_mut\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1450\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"devela/all/enum.Option.html#tymethod.iter_mut\" class=\"fn\">iter_mut</a>(&amp;mut self) -&gt; <a class=\"struct\" href=\"devela/all/struct.OptionIterMut.html\" title=\"struct devela::all::OptionIterMut\">IterMut</a>&lt;'_, T&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"IterMut&lt;&#39;_, T&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Returns a mutable iterator over the possibly contained value.</p>\n<h5 id=\"examples-23\"><a class=\"doc-anchor\" href=\"#examples-23\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">4</span>);\n<span class=\"kw\">match </span>x.iter_mut().next() {\n    <span class=\"prelude-val\">Some</span>(v) =&gt; <span class=\"kw-2\">*</span>v = <span class=\"number\">42</span>,\n    <span class=\"prelude-val\">None </span>=&gt; {},\n}\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">Some</span>(<span class=\"number\">42</span>));\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.iter_mut().next(), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.and\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/143956\" title=\"Tracking issue for const_option_ops\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1488-1491\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"devela/all/enum.Option.html#tymethod.and\" class=\"fn\">and</a>&lt;U&gt;(self, optb: <a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;U&gt;) -&gt; <a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;U&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Option&lt;U&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Returns <a href=\"devela/all/enum.Option.html#variant.None\" title=\"variant devela::all::Option::None\"><code>None</code></a> if the option is <a href=\"devela/all/enum.Option.html#variant.None\" title=\"variant devela::all::Option::None\"><code>None</code></a>, otherwise returns <code>optb</code>.</p>\n<p>Arguments passed to <code>and</code> are eagerly evaluated; if you are passing the\nresult of a function call, it is recommended to use <a href=\"devela/all/enum.Option.html#method.and_then\" title=\"method devela::all::Option::and_then\"><code>and_then</code></a>, which is\nlazily evaluated.</p>\n<h5 id=\"examples-24\"><a class=\"doc-anchor\" href=\"#examples-24\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"kw\">let </span>y: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.and(y), <span class=\"prelude-val\">None</span>);\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"foo\"</span>);\n<span class=\"macro\">assert_eq!</span>(x.and(y), <span class=\"prelude-val\">None</span>);\n\n<span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"foo\"</span>);\n<span class=\"macro\">assert_eq!</span>(x.and(y), <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"foo\"</span>));\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>y: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.and(y), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.and_then\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/143956\" title=\"Tracking issue for const_option_ops\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1532-1534\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"devela/all/enum.Option.html#tymethod.and_then\" class=\"fn\">and_then</a>&lt;U, F&gt;(self, f: F) -&gt; <a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;U&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Option&lt;U&gt;\">ⓘ</a><div class=\"where\">where\n    F: <a class=\"trait\" href=\"devela/all/trait.FnOnce.html\" title=\"trait devela::all::FnOnce\">FnOnce</a>(T) -&gt; <a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;U&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Returns <a href=\"devela/all/enum.Option.html#variant.None\" title=\"variant devela::all::Option::None\"><code>None</code></a> if the option is <a href=\"devela/all/enum.Option.html#variant.None\" title=\"variant devela::all::Option::None\"><code>None</code></a>, otherwise calls <code>f</code> with the\nwrapped value and returns the result.</p>\n<p>Some languages call this operation flatmap.</p>\n<h5 id=\"examples-25\"><a class=\"doc-anchor\" href=\"#examples-25\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">fn </span>sq_then_to_string(x: u32) -&gt; <span class=\"prelude-ty\">Option</span>&lt;String&gt; {\n    x.checked_mul(x).map(|sq| sq.to_string())\n}\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>).and_then(sq_then_to_string), <span class=\"prelude-val\">Some</span>(<span class=\"number\">4</span>.to_string()));\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"number\">1_000_000</span>).and_then(sq_then_to_string), <span class=\"prelude-val\">None</span>); <span class=\"comment\">// overflowed!\n</span><span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>.and_then(sq_then_to_string), <span class=\"prelude-val\">None</span>);</code></pre></div>\n<p>Often used to chain fallible operations that may return <a href=\"devela/all/enum.Option.html#variant.None\" title=\"variant devela::all::Option::None\"><code>None</code></a>.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>arr_2d = [[<span class=\"string\">\"A0\"</span>, <span class=\"string\">\"A1\"</span>], [<span class=\"string\">\"B0\"</span>, <span class=\"string\">\"B1\"</span>]];\n\n<span class=\"kw\">let </span>item_0_1 = arr_2d.get(<span class=\"number\">0</span>).and_then(|row| row.get(<span class=\"number\">1</span>));\n<span class=\"macro\">assert_eq!</span>(item_0_1, <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span><span class=\"string\">\"A1\"</span>));\n\n<span class=\"kw\">let </span>item_2_0 = arr_2d.get(<span class=\"number\">2</span>).and_then(|row| row.get(<span class=\"number\">0</span>));\n<span class=\"macro\">assert_eq!</span>(item_2_0, <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.filter\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.27.0, const unstable\">1.27.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/143956\" title=\"Tracking issue for const_option_ops\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1569-1572\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"devela/all/enum.Option.html#tymethod.filter\" class=\"fn\">filter</a>&lt;P&gt;(self, predicate: P) -&gt; <a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;T&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Option&lt;T&gt;\">ⓘ</a><div class=\"where\">where\n    P: <a class=\"trait\" href=\"devela/all/trait.FnOnce.html\" title=\"trait devela::all::FnOnce\">FnOnce</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;T</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a>,</div></h4></section></summary><div class=\"docblock\"><p>Returns <a href=\"devela/all/enum.Option.html#variant.None\" title=\"variant devela::all::Option::None\"><code>None</code></a> if the option is <a href=\"devela/all/enum.Option.html#variant.None\" title=\"variant devela::all::Option::None\"><code>None</code></a>, otherwise calls <code>predicate</code>\nwith the wrapped value and returns:</p>\n<ul>\n<li><a href=\"devela/all/enum.Option.html#variant.Some\" title=\"variant devela::all::Option::Some\"><code>Some(t)</code></a> if <code>predicate</code> returns <code>true</code> (where <code>t</code> is the wrapped\nvalue), and</li>\n<li><a href=\"devela/all/enum.Option.html#variant.None\" title=\"variant devela::all::Option::None\"><code>None</code></a> if <code>predicate</code> returns <code>false</code>.</li>\n</ul>\n<p>This function works similar to <a href=\"devela/all/trait.Iterator.html#method.filter\" title=\"method devela::all::Iterator::filter\"><code>Iterator::filter()</code></a>. You can imagine\nthe <code>Option&lt;T&gt;</code> being an iterator over one or zero elements. <code>filter()</code>\nlets you decide which elements to keep.</p>\n<h5 id=\"examples-26\"><a class=\"doc-anchor\" href=\"#examples-26\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">fn </span>is_even(n: <span class=\"kw-2\">&amp;</span>i32) -&gt; bool {\n    n % <span class=\"number\">2 </span>== <span class=\"number\">0\n</span>}\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>.filter(is_even), <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"number\">3</span>).filter(is_even), <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"number\">4</span>).filter(is_even), <span class=\"prelude-val\">Some</span>(<span class=\"number\">4</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.or\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/143956\" title=\"Tracking issue for const_option_ops\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1612-1614\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"devela/all/enum.Option.html#tymethod.or\" class=\"fn\">or</a>(self, optb: <a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;T&gt;) -&gt; <a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;T&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Option&lt;T&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Returns the option if it contains a value, otherwise returns <code>optb</code>.</p>\n<p>Arguments passed to <code>or</code> are eagerly evaluated; if you are passing the\nresult of a function call, it is recommended to use <a href=\"devela/all/enum.Option.html#method.or_else\" title=\"method devela::all::Option::or_else\"><code>or_else</code></a>, which is\nlazily evaluated.</p>\n<h5 id=\"examples-27\"><a class=\"doc-anchor\" href=\"#examples-27\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.or(y), <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>));\n\n<span class=\"kw\">let </span>x = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">Some</span>(<span class=\"number\">100</span>);\n<span class=\"macro\">assert_eq!</span>(x.or(y), <span class=\"prelude-val\">Some</span>(<span class=\"number\">100</span>));\n\n<span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">Some</span>(<span class=\"number\">100</span>);\n<span class=\"macro\">assert_eq!</span>(x.or(y), <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>));\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.or(y), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.or_else\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/143956\" title=\"Tracking issue for const_option_ops\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1638-1643\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"devela/all/enum.Option.html#tymethod.or_else\" class=\"fn\">or_else</a>&lt;F&gt;(self, f: F) -&gt; <a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;T&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Option&lt;T&gt;\">ⓘ</a><div class=\"where\">where\n    F: <a class=\"trait\" href=\"devela/all/trait.FnOnce.html\" title=\"trait devela::all::FnOnce\">FnOnce</a>() -&gt; <a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;T&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Returns the option if it contains a value, otherwise calls <code>f</code> and\nreturns the result.</p>\n<h5 id=\"examples-28\"><a class=\"doc-anchor\" href=\"#examples-28\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">fn </span>nobody() -&gt; <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'static </span>str&gt; { <span class=\"prelude-val\">None </span>}\n<span class=\"kw\">fn </span>vikings() -&gt; <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'static </span>str&gt; { <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"vikings\"</span>) }\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"string\">\"barbarians\"</span>).or_else(vikings), <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"barbarians\"</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>.or_else(vikings), <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"vikings\"</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>.or_else(nobody), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.xor\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.37.0, const unstable\">1.37.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/143956\" title=\"Tracking issue for const_option_ops\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1675-1677\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"devela/all/enum.Option.html#tymethod.xor\" class=\"fn\">xor</a>(self, optb: <a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;T&gt;) -&gt; <a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;T&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Option&lt;T&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Returns <a href=\"devela/all/enum.Option.html#variant.Some\" title=\"variant devela::all::Option::Some\"><code>Some</code></a> if exactly one of <code>self</code>, <code>optb</code> is <a href=\"devela/all/enum.Option.html#variant.Some\" title=\"variant devela::all::Option::Some\"><code>Some</code></a>, otherwise returns <a href=\"devela/all/enum.Option.html#variant.None\" title=\"variant devela::all::Option::None\"><code>None</code></a>.</p>\n<h5 id=\"examples-29\"><a class=\"doc-anchor\" href=\"#examples-29\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"kw\">let </span>y: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.xor(y), <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>));\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(x.xor(y), <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>));\n\n<span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(x.xor(y), <span class=\"prelude-val\">None</span>);\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>y: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.xor(y), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.insert\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.53.0, const unstable\">1.53.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/143956\" title=\"Tracking issue for const_option_ops\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1713-1715\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"devela/all/enum.Option.html#tymethod.insert\" class=\"fn\">insert</a>(&amp;mut self, value: T) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut T</a></h4></section></summary><div class=\"docblock\"><p>Inserts <code>value</code> into the option, then returns a mutable reference to it.</p>\n<p>If the option already contains a value, the old value is dropped.</p>\n<p>See also <a href=\"devela/all/enum.Option.html#method.get_or_insert\" title=\"method devela::all::Option::get_or_insert\"><code>Option::get_or_insert</code></a>, which doesn’t update the value if\nthe option already contains <a href=\"devela/all/enum.Option.html#variant.Some\" title=\"variant devela::all::Option::Some\"><code>Some</code></a>.</p>\n<h5 id=\"example\"><a class=\"doc-anchor\" href=\"#example\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>opt = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>val = opt.insert(<span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>val, <span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(opt.unwrap(), <span class=\"number\">1</span>);\n<span class=\"kw\">let </span>val = opt.insert(<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>val, <span class=\"number\">2</span>);\n<span class=\"kw-2\">*</span>val = <span class=\"number\">3</span>;\n<span class=\"macro\">assert_eq!</span>(opt.unwrap(), <span class=\"number\">3</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_or_insert\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.20.0\">1.20.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1745\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"devela/all/enum.Option.html#tymethod.get_or_insert\" class=\"fn\">get_or_insert</a>(&amp;mut self, value: T) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut T</a></h4></section></summary><div class=\"docblock\"><p>Inserts <code>value</code> into the option if it is <a href=\"devela/all/enum.Option.html#variant.None\" title=\"variant devela::all::Option::None\"><code>None</code></a>, then\nreturns a mutable reference to the contained value.</p>\n<p>See also <a href=\"devela/all/enum.Option.html#method.insert\" title=\"method devela::all::Option::insert\"><code>Option::insert</code></a>, which updates the value even if\nthe option already contains <a href=\"devela/all/enum.Option.html#variant.Some\" title=\"variant devela::all::Option::Some\"><code>Some</code></a>.</p>\n<h5 id=\"examples-30\"><a class=\"doc-anchor\" href=\"#examples-30\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">None</span>;\n\n{\n    <span class=\"kw\">let </span>y: <span class=\"kw-2\">&amp;mut </span>u32 = x.get_or_insert(<span class=\"number\">5</span>);\n    <span class=\"macro\">assert_eq!</span>(y, <span class=\"kw-2\">&amp;</span><span class=\"number\">5</span>);\n\n    <span class=\"kw-2\">*</span>y = <span class=\"number\">7</span>;\n}\n\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">Some</span>(<span class=\"number\">7</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_or_insert_default\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.83.0, const unstable\">1.83.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/143956\" title=\"Tracking issue for const_option_ops\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1769-1771\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"devela/all/enum.Option.html#tymethod.get_or_insert_default\" class=\"fn\">get_or_insert_default</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut T</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"devela/code/trait.Default.html\" title=\"trait devela::code::Default\">Default</a>,</div></h4></section></summary><div class=\"docblock\"><p>Inserts the default value into the option if it is <a href=\"devela/all/enum.Option.html#variant.None\" title=\"variant devela::all::Option::None\"><code>None</code></a>, then\nreturns a mutable reference to the contained value.</p>\n<h5 id=\"examples-31\"><a class=\"doc-anchor\" href=\"#examples-31\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">None</span>;\n\n{\n    <span class=\"kw\">let </span>y: <span class=\"kw-2\">&amp;mut </span>u32 = x.get_or_insert_default();\n    <span class=\"macro\">assert_eq!</span>(y, <span class=\"kw-2\">&amp;</span><span class=\"number\">0</span>);\n\n    <span class=\"kw-2\">*</span>y = <span class=\"number\">7</span>;\n}\n\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">Some</span>(<span class=\"number\">7</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_or_insert_with\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.20.0, const unstable\">1.20.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/143956\" title=\"Tracking issue for const_option_ops\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1796-1799\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"devela/all/enum.Option.html#tymethod.get_or_insert_with\" class=\"fn\">get_or_insert_with</a>&lt;F&gt;(&amp;mut self, f: F) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut T</a><div class=\"where\">where\n    F: <a class=\"trait\" href=\"devela/all/trait.FnOnce.html\" title=\"trait devela::all::FnOnce\">FnOnce</a>() -&gt; T,</div></h4></section></summary><div class=\"docblock\"><p>Inserts a value computed from <code>f</code> into the option if it is <a href=\"devela/all/enum.Option.html#variant.None\" title=\"variant devela::all::Option::None\"><code>None</code></a>,\nthen returns a mutable reference to the contained value.</p>\n<h5 id=\"examples-32\"><a class=\"doc-anchor\" href=\"#examples-32\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">None</span>;\n\n{\n    <span class=\"kw\">let </span>y: <span class=\"kw-2\">&amp;mut </span>u32 = x.get_or_insert_with(|| <span class=\"number\">5</span>);\n    <span class=\"macro\">assert_eq!</span>(y, <span class=\"kw-2\">&amp;</span><span class=\"number\">5</span>);\n\n    <span class=\"kw-2\">*</span>y = <span class=\"number\">7</span>;\n}\n\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">Some</span>(<span class=\"number\">7</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.take\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.83.0\">1.0.0 (const: 1.83.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1832\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"devela/all/enum.Option.html#tymethod.take\" class=\"fn\">take</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;T&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Option&lt;T&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Takes the value out of the option, leaving a <a href=\"devela/all/enum.Option.html#variant.None\" title=\"variant devela::all::Option::None\"><code>None</code></a> in its place.</p>\n<h5 id=\"examples-33\"><a class=\"doc-anchor\" href=\"#examples-33\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"kw\">let </span>y = x.take();\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(y, <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>));\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>y = x.take();\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(y, <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.take_if\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.80.0, const unstable\">1.80.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/143956\" title=\"Tracking issue for const_option_ops\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1864-1866\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"devela/all/enum.Option.html#tymethod.take_if\" class=\"fn\">take_if</a>&lt;P&gt;(&amp;mut self, predicate: P) -&gt; <a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;T&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Option&lt;T&gt;\">ⓘ</a><div class=\"where\">where\n    P: <a class=\"trait\" href=\"devela/all/trait.FnOnce.html\" title=\"trait devela::all::FnOnce\">FnOnce</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut T</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a>,</div></h4></section></summary><div class=\"docblock\"><p>Takes the value out of the option, but only if the predicate evaluates to\n<code>true</code> on a mutable reference to the value.</p>\n<p>In other words, replaces <code>self</code> with <code>None</code> if the predicate returns <code>true</code>.\nThis method operates similar to <a href=\"devela/all/enum.Option.html#method.take\" title=\"method devela::all::Option::take\"><code>Option::take</code></a> but conditional.</p>\n<h5 id=\"examples-34\"><a class=\"doc-anchor\" href=\"#examples-34\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">42</span>);\n\n<span class=\"kw\">let </span>prev = x.take_if(|v| <span class=\"kw\">if </span><span class=\"kw-2\">*</span>v == <span class=\"number\">42 </span>{\n    <span class=\"kw-2\">*</span>v += <span class=\"number\">1</span>;\n    <span class=\"bool-val\">false\n</span>} <span class=\"kw\">else </span>{\n    <span class=\"bool-val\">false\n</span>});\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">Some</span>(<span class=\"number\">43</span>));\n<span class=\"macro\">assert_eq!</span>(prev, <span class=\"prelude-val\">None</span>);\n\n<span class=\"kw\">let </span>prev = x.take_if(|v| <span class=\"kw-2\">*</span>v == <span class=\"number\">43</span>);\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(prev, <span class=\"prelude-val\">Some</span>(<span class=\"number\">43</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.replace\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.31.0, const since 1.83.0\">1.31.0 (const: 1.83.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1891\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"devela/all/enum.Option.html#tymethod.replace\" class=\"fn\">replace</a>(&amp;mut self, value: T) -&gt; <a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;T&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Option&lt;T&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Replaces the actual value in the option by the value given in parameter,\nreturning the old value if present,\nleaving a <a href=\"devela/all/enum.Option.html#variant.Some\" title=\"variant devela::all::Option::Some\"><code>Some</code></a> in its place without deinitializing either one.</p>\n<h5 id=\"examples-35\"><a class=\"doc-anchor\" href=\"#examples-35\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"kw\">let </span>old = x.replace(<span class=\"number\">5</span>);\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">Some</span>(<span class=\"number\">5</span>));\n<span class=\"macro\">assert_eq!</span>(old, <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>));\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>old = x.replace(<span class=\"number\">3</span>);\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">Some</span>(<span class=\"number\">3</span>));\n<span class=\"macro\">assert_eq!</span>(old, <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.zip\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.46.0, const unstable\">1.46.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/143956\" title=\"Tracking issue for const_option_ops\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1912-1915\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"devela/all/enum.Option.html#tymethod.zip\" class=\"fn\">zip</a>&lt;U&gt;(self, other: <a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;U&gt;) -&gt; <a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(T, U)</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Option&lt;(T, U)&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Zips <code>self</code> with another <code>Option</code>.</p>\n<p>If <code>self</code> is <code>Some(s)</code> and <code>other</code> is <code>Some(o)</code>, this method returns <code>Some((s, o))</code>.\nOtherwise, <code>None</code> is returned.</p>\n<h5 id=\"examples-36\"><a class=\"doc-anchor\" href=\"#examples-36\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">1</span>);\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"hi\"</span>);\n<span class=\"kw\">let </span>z = <span class=\"prelude-val\">None</span>::&lt;u8&gt;;\n\n<span class=\"macro\">assert_eq!</span>(x.zip(y), <span class=\"prelude-val\">Some</span>((<span class=\"number\">1</span>, <span class=\"string\">\"hi\"</span>)));\n<span class=\"macro\">assert_eq!</span>(x.zip(z), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.zip_with\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1953-1957\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"devela/all/enum.Option.html#tymethod.zip_with\" class=\"fn\">zip_with</a>&lt;U, F, R&gt;(self, other: <a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;U&gt;, f: F) -&gt; <a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;R&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Option&lt;R&gt;\">ⓘ</a><div class=\"where\">where\n    F: <a class=\"trait\" href=\"devela/all/trait.FnOnce.html\" title=\"trait devela::all::FnOnce\">FnOnce</a>(T, U) -&gt; R,</div></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>option_zip</code>)</span></div></span></summary><div class=\"docblock\"><p>Zips <code>self</code> and another <code>Option</code> with function <code>f</code>.</p>\n<p>If <code>self</code> is <code>Some(s)</code> and <code>other</code> is <code>Some(o)</code>, this method returns <code>Some(f(s, o))</code>.\nOtherwise, <code>None</code> is returned.</p>\n<h5 id=\"examples-37\"><a class=\"doc-anchor\" href=\"#examples-37\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(option_zip)]\n\n#[derive(Debug, PartialEq)]\n</span><span class=\"kw\">struct </span>Point {\n    x: f64,\n    y: f64,\n}\n\n<span class=\"kw\">impl </span>Point {\n    <span class=\"kw\">fn </span>new(x: f64, y: f64) -&gt; <span class=\"self\">Self </span>{\n        <span class=\"self\">Self </span>{ x, y }\n    }\n}\n\n<span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">17.5</span>);\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">Some</span>(<span class=\"number\">42.7</span>);\n\n<span class=\"macro\">assert_eq!</span>(x.zip_with(y, Point::new), <span class=\"prelude-val\">Some</span>(Point { x: <span class=\"number\">17.5</span>, y: <span class=\"number\">42.7 </span>}));\n<span class=\"macro\">assert_eq!</span>(x.zip_with(<span class=\"prelude-val\">None</span>, Point::new), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details></div></details>",0,"devela::code::result::opt_res::opt_res::OptRes","devela::_dep::ffmpeg_the_third::sys::AVFifoCB","devela::_dep::ffmpeg_the_third::sys::av_format_control_message","devela::_dep::ffmpeg_the_third::sys::AVOpenCallback","devela::_dep::ffmpeg_the_third::sys::avfilter_action_func","devela::_dep::ffmpeg_the_third::sys::avfilter_execute_func","devela::_dep::miniquad::native::linux_x11::libx11::XErrorHandler","devela::_dep::miniquad::native::egl::__eglMustCastToProperFunctionPointerType","devela::_dep::pyo3::ffi::wrapperfunc","devela::_dep::pyo3::ffi::wrapperfunc_kwds","devela::_dep::sdl2::sys::mixer::Mix_EffectFunc_t","devela::_dep::sdl2::sys::mixer::Mix_EffectDone_t","devela::_dep::sdl2::sys::SDL_malloc_func","devela::_dep::sdl2::sys::SDL_calloc_func","devela::_dep::sdl2::sys::SDL_realloc_func","devela::_dep::sdl2::sys::SDL_free_func","devela::_dep::sdl2::sys::SDL_main_func","devela::_dep::sdl2::sys::SDL_AssertionHandler","devela::_dep::sdl2::sys::SDL_ThreadFunction","devela::_dep::sdl2::sys::SDL_AudioCallback","devela::_dep::sdl2::sys::SDL_AudioFilter","devela::_dep::sdl2::sys::__compar_fn_t","devela::_dep::sdl2::sys::SDL_blit","devela::_dep::sdl2::sys::SDL_HitTest","devela::_dep::sdl2::sys::SDL_EventFilter","devela::_dep::sdl2::sys::SDL_HintCallback","devela::_dep::sdl2::sys::SDL_LogOutputFunction","devela::_dep::sdl2::sys::SDL_TimerCallback","devela::_dep::sdl2::sys::XIMProc","devela::_dep::sdl2::sys::XICProc","devela::_dep::sdl2::sys::XIDProc","devela::_dep::sdl2::sys::XErrorHandler","devela::_dep::sdl2::sys::XIOErrorHandler","devela::_dep::sdl2::sys::XIOErrorExitHandler","devela::_dep::sdl2::sys::XConnectionWatchProc"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Ord-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2341\">Source</a></span><a href=\"#impl-Ord-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"devela/all/trait.Ord.html\" title=\"trait devela::all::Ord\">Ord</a> for <a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"devela/all/trait.Ord.html\" title=\"trait devela::all::Ord\">Ord</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2343\">Source</a><a href=\"#method.cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Ord.html#tymethod.cmp\" class=\"fn\">cmp</a>(&amp;self, other: &amp;<a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;T&gt;) -&gt; <a class=\"enum\" href=\"devela/all/enum.Ordering.html\" title=\"enum devela::all::Ordering\">Ordering</a></h4></section></summary><div class='docblock'>This method returns an <a href=\"devela/all/enum.Ordering.html\" title=\"enum devela::all::Ordering\"><code>Ordering</code></a> between <code>self</code> and <code>other</code>. <a href=\"devela/all/trait.Ord.html#tymethod.cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.max\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1013-1015\">Source</a></span><a href=\"#method.max\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Ord.html#method.max\" class=\"fn\">max</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"devela/all/trait.Sized.html\" title=\"trait devela::all::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Compares and returns the maximum of two values. <a href=\"devela/all/trait.Ord.html#method.max\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.min\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1052-1054\">Source</a></span><a href=\"#method.min\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Ord.html#method.min\" class=\"fn\">min</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"devela/all/trait.Sized.html\" title=\"trait devela::all::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Compares and returns the minimum of two values. <a href=\"devela/all/trait.Ord.html#method.min\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clamp\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.50.0\">1.50.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1078-1080\">Source</a></span><a href=\"#method.clamp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Ord.html#method.clamp\" class=\"fn\">clamp</a>(self, min: Self, max: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"devela/all/trait.Sized.html\" title=\"trait devela::all::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Restrict a value to a certain interval. <a href=\"devela/all/trait.Ord.html#method.clamp\">Read more</a></div></details></div></details>","Ord","devela::code::result::opt_res::opt_res::OptRes","devela::_dep::ffmpeg_the_third::sys::AVFifoCB","devela::_dep::ffmpeg_the_third::sys::av_format_control_message","devela::_dep::ffmpeg_the_third::sys::AVOpenCallback","devela::_dep::ffmpeg_the_third::sys::avfilter_action_func","devela::_dep::ffmpeg_the_third::sys::avfilter_execute_func","devela::_dep::miniquad::native::linux_x11::libx11::XErrorHandler","devela::_dep::miniquad::native::egl::__eglMustCastToProperFunctionPointerType","devela::_dep::pyo3::ffi::wrapperfunc","devela::_dep::pyo3::ffi::wrapperfunc_kwds","devela::_dep::sdl2::sys::mixer::Mix_EffectFunc_t","devela::_dep::sdl2::sys::mixer::Mix_EffectDone_t","devela::_dep::sdl2::sys::SDL_malloc_func","devela::_dep::sdl2::sys::SDL_calloc_func","devela::_dep::sdl2::sys::SDL_realloc_func","devela::_dep::sdl2::sys::SDL_free_func","devela::_dep::sdl2::sys::SDL_main_func","devela::_dep::sdl2::sys::SDL_AssertionHandler","devela::_dep::sdl2::sys::SDL_ThreadFunction","devela::_dep::sdl2::sys::SDL_AudioCallback","devela::_dep::sdl2::sys::SDL_AudioFilter","devela::_dep::sdl2::sys::__compar_fn_t","devela::_dep::sdl2::sys::SDL_blit","devela::_dep::sdl2::sys::SDL_HitTest","devela::_dep::sdl2::sys::SDL_EventFilter","devela::_dep::sdl2::sys::SDL_HintCallback","devela::_dep::sdl2::sys::SDL_LogOutputFunction","devela::_dep::sdl2::sys::SDL_TimerCallback","devela::_dep::sdl2::sys::XIMProc","devela::_dep::sdl2::sys::XICProc","devela::_dep::sdl2::sys::XIDProc","devela::_dep::sdl2::sys::XErrorHandler","devela::_dep::sdl2::sys::XIOErrorHandler","devela::_dep::sdl2::sys::XIOErrorExitHandler","devela::_dep::sdl2::sys::XConnectionWatchProc"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/143800\" title=\"Tracking issue for const_cmp\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2310\">Source</a></span><a href=\"#impl-PartialEq-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"devela/all/trait.PartialEq.html\" title=\"trait devela::all::PartialEq\">PartialEq</a> for <a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"devela/all/trait.PartialEq.html\" title=\"trait devela::all::PartialEq\">PartialEq</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2312\">Source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;T&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#265\">Source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq","devela::code::result::opt_res::opt_res::OptRes","devela::_dep::ffmpeg_the_third::sys::AVFifoCB","devela::_dep::ffmpeg_the_third::sys::av_format_control_message","devela::_dep::ffmpeg_the_third::sys::AVOpenCallback","devela::_dep::ffmpeg_the_third::sys::avfilter_action_func","devela::_dep::ffmpeg_the_third::sys::avfilter_execute_func","devela::_dep::miniquad::native::linux_x11::libx11::XErrorHandler","devela::_dep::miniquad::native::egl::__eglMustCastToProperFunctionPointerType","devela::_dep::pyo3::ffi::wrapperfunc","devela::_dep::pyo3::ffi::wrapperfunc_kwds","devela::_dep::sdl2::sys::mixer::Mix_EffectFunc_t","devela::_dep::sdl2::sys::mixer::Mix_EffectDone_t","devela::_dep::sdl2::sys::SDL_malloc_func","devela::_dep::sdl2::sys::SDL_calloc_func","devela::_dep::sdl2::sys::SDL_realloc_func","devela::_dep::sdl2::sys::SDL_free_func","devela::_dep::sdl2::sys::SDL_main_func","devela::_dep::sdl2::sys::SDL_AssertionHandler","devela::_dep::sdl2::sys::SDL_ThreadFunction","devela::_dep::sdl2::sys::SDL_AudioCallback","devela::_dep::sdl2::sys::SDL_AudioFilter","devela::_dep::sdl2::sys::__compar_fn_t","devela::_dep::sdl2::sys::SDL_blit","devela::_dep::sdl2::sys::SDL_HitTest","devela::_dep::sdl2::sys::SDL_EventFilter","devela::_dep::sdl2::sys::SDL_HintCallback","devela::_dep::sdl2::sys::SDL_LogOutputFunction","devela::_dep::sdl2::sys::SDL_TimerCallback","devela::_dep::sdl2::sys::XIMProc","devela::_dep::sdl2::sys::XICProc","devela::_dep::sdl2::sys::XIDProc","devela::_dep::sdl2::sys::XErrorHandler","devela::_dep::sdl2::sys::XIOErrorHandler","devela::_dep::sdl2::sys::XIOErrorExitHandler","devela::_dep::sdl2::sys::XConnectionWatchProc"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialOrd-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2328\">Source</a></span><a href=\"#impl-PartialOrd-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"devela/all/trait.PartialOrd.html\" title=\"trait devela::all::PartialOrd\">PartialOrd</a> for <a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"devela/all/trait.PartialOrd.html\" title=\"trait devela::all::PartialOrd\">PartialOrd</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.partial_cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2330\">Source</a><a href=\"#method.partial_cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: &amp;<a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;T&gt;) -&gt; <a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;<a class=\"enum\" href=\"devela/all/enum.Ordering.html\" title=\"enum devela::all::Ordering\">Ordering</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Option&lt;Ordering&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"devela/all/trait.PartialOrd.html#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1387\">Source</a></span><a href=\"#method.lt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"devela/all/trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.le\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1405\">Source</a></span><a href=\"#method.le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the\n<code>&lt;=</code> operator. <a href=\"devela/all/trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.gt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1423\">Source</a></span><a href=\"#method.gt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code>\noperator. <a href=\"devela/all/trait.PartialOrd.html#method.gt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ge\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1441\">Source</a></span><a href=\"#method.ge\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by\nthe <code>&gt;=</code> operator. <a href=\"devela/all/trait.PartialOrd.html#method.ge\">Read more</a></div></details></div></details>","PartialOrd","devela::code::result::opt_res::opt_res::OptRes","devela::_dep::ffmpeg_the_third::sys::AVFifoCB","devela::_dep::ffmpeg_the_third::sys::av_format_control_message","devela::_dep::ffmpeg_the_third::sys::AVOpenCallback","devela::_dep::ffmpeg_the_third::sys::avfilter_action_func","devela::_dep::ffmpeg_the_third::sys::avfilter_execute_func","devela::_dep::miniquad::native::linux_x11::libx11::XErrorHandler","devela::_dep::miniquad::native::egl::__eglMustCastToProperFunctionPointerType","devela::_dep::pyo3::ffi::wrapperfunc","devela::_dep::pyo3::ffi::wrapperfunc_kwds","devela::_dep::sdl2::sys::mixer::Mix_EffectFunc_t","devela::_dep::sdl2::sys::mixer::Mix_EffectDone_t","devela::_dep::sdl2::sys::SDL_malloc_func","devela::_dep::sdl2::sys::SDL_calloc_func","devela::_dep::sdl2::sys::SDL_realloc_func","devela::_dep::sdl2::sys::SDL_free_func","devela::_dep::sdl2::sys::SDL_main_func","devela::_dep::sdl2::sys::SDL_AssertionHandler","devela::_dep::sdl2::sys::SDL_ThreadFunction","devela::_dep::sdl2::sys::SDL_AudioCallback","devela::_dep::sdl2::sys::SDL_AudioFilter","devela::_dep::sdl2::sys::__compar_fn_t","devela::_dep::sdl2::sys::SDL_blit","devela::_dep::sdl2::sys::SDL_HitTest","devela::_dep::sdl2::sys::SDL_EventFilter","devela::_dep::sdl2::sys::SDL_HintCallback","devela::_dep::sdl2::sys::SDL_LogOutputFunction","devela::_dep::sdl2::sys::SDL_TimerCallback","devela::_dep::sdl2::sys::XIMProc","devela::_dep::sdl2::sys::XICProc","devela::_dep::sdl2::sys::XIDProc","devela::_dep::sdl2::sys::XErrorHandler","devela::_dep::sdl2::sys::XIOErrorHandler","devela::_dep::sdl2::sys::XIOErrorExitHandler","devela::_dep::sdl2::sys::XConnectionWatchProc"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Product%3COption%3CU%3E%3E-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.37.0\">1.37.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/iter/traits/accum.rs.html#244-246\">Source</a></span><a href=\"#impl-Product%3COption%3CU%3E%3E-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"devela/all/trait.IteratorProduct.html\" title=\"trait devela::all::IteratorProduct\">Product</a>&lt;<a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;U&gt;&gt; for <a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"devela/all/trait.IteratorProduct.html\" title=\"trait devela::all::IteratorProduct\">Product</a>&lt;U&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.product\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/iter/traits/accum.rs.html#265-267\">Source</a><a href=\"#method.product\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.IteratorProduct.html#tymethod.product\" class=\"fn\">product</a>&lt;I&gt;(iter: I) -&gt; <a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;T&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Option&lt;T&gt;\">ⓘ</a><div class=\"where\">where\n    I: <a class=\"trait\" href=\"devela/all/trait.Iterator.html\" title=\"trait devela::all::Iterator\">Iterator</a>&lt;Item = <a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;U&gt;&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Takes each element in the <a href=\"devela/all/trait.Iterator.html\" title=\"trait devela::all::Iterator\"><code>Iterator</code></a>: if it is a <a href=\"devela/all/enum.Option.html#variant.None\" title=\"variant devela::all::Option::None\"><code>None</code></a>, no further\nelements are taken, and the <a href=\"devela/all/enum.Option.html#variant.None\" title=\"variant devela::all::Option::None\"><code>None</code></a> is returned. Should no <a href=\"devela/all/enum.Option.html#variant.None\" title=\"variant devela::all::Option::None\"><code>None</code></a>\noccur, the product of all elements is returned.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>This multiplies each number in a vector of strings,\nif a string could not be parsed the operation returns <code>None</code>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>nums = <span class=\"macro\">vec!</span>[<span class=\"string\">\"5\"</span>, <span class=\"string\">\"10\"</span>, <span class=\"string\">\"1\"</span>, <span class=\"string\">\"2\"</span>];\n<span class=\"kw\">let </span>total: <span class=\"prelude-ty\">Option</span>&lt;usize&gt; = nums.iter().map(|w| w.parse::&lt;usize&gt;().ok()).product();\n<span class=\"macro\">assert_eq!</span>(total, <span class=\"prelude-val\">Some</span>(<span class=\"number\">100</span>));\n<span class=\"kw\">let </span>nums = <span class=\"macro\">vec!</span>[<span class=\"string\">\"5\"</span>, <span class=\"string\">\"10\"</span>, <span class=\"string\">\"one\"</span>, <span class=\"string\">\"2\"</span>];\n<span class=\"kw\">let </span>total: <span class=\"prelude-ty\">Option</span>&lt;usize&gt; = nums.iter().map(|w| w.parse::&lt;usize&gt;().ok()).product();\n<span class=\"macro\">assert_eq!</span>(total, <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details></div></details>","Product<Option<U>>","devela::code::result::opt_res::opt_res::OptRes","devela::_dep::ffmpeg_the_third::sys::AVFifoCB","devela::_dep::ffmpeg_the_third::sys::av_format_control_message","devela::_dep::ffmpeg_the_third::sys::AVOpenCallback","devela::_dep::ffmpeg_the_third::sys::avfilter_action_func","devela::_dep::ffmpeg_the_third::sys::avfilter_execute_func","devela::_dep::miniquad::native::linux_x11::libx11::XErrorHandler","devela::_dep::miniquad::native::egl::__eglMustCastToProperFunctionPointerType","devela::_dep::pyo3::ffi::wrapperfunc","devela::_dep::pyo3::ffi::wrapperfunc_kwds","devela::_dep::sdl2::sys::mixer::Mix_EffectFunc_t","devela::_dep::sdl2::sys::mixer::Mix_EffectDone_t","devela::_dep::sdl2::sys::SDL_malloc_func","devela::_dep::sdl2::sys::SDL_calloc_func","devela::_dep::sdl2::sys::SDL_realloc_func","devela::_dep::sdl2::sys::SDL_free_func","devela::_dep::sdl2::sys::SDL_main_func","devela::_dep::sdl2::sys::SDL_AssertionHandler","devela::_dep::sdl2::sys::SDL_ThreadFunction","devela::_dep::sdl2::sys::SDL_AudioCallback","devela::_dep::sdl2::sys::SDL_AudioFilter","devela::_dep::sdl2::sys::__compar_fn_t","devela::_dep::sdl2::sys::SDL_blit","devela::_dep::sdl2::sys::SDL_HitTest","devela::_dep::sdl2::sys::SDL_EventFilter","devela::_dep::sdl2::sys::SDL_HintCallback","devela::_dep::sdl2::sys::SDL_LogOutputFunction","devela::_dep::sdl2::sys::SDL_TimerCallback","devela::_dep::sdl2::sys::XIMProc","devela::_dep::sdl2::sys::XICProc","devela::_dep::sdl2::sys::XIDProc","devela::_dep::sdl2::sys::XErrorHandler","devela::_dep::sdl2::sys::XIOErrorHandler","devela::_dep::sdl2::sys::XIOErrorExitHandler","devela::_dep::sdl2::sys::XConnectionWatchProc"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Serialize-for-Option%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/serde/1.0.219/src/serde/ser/impls.rs.html#99-101\">Source</a><a href=\"#impl-Serialize-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"devela/_dep/serde/trait.Serialize.html\" title=\"trait devela::_dep::serde::Serialize\">Serialize</a> for <a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"devela/_dep/serde/trait.Serialize.html\" title=\"trait devela::_dep::serde::Serialize\">Serialize</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.serialize\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/serde/1.0.219/src/serde/ser/impls.rs.html#104-106\">Source</a><a href=\"#method.serialize\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/_dep/serde/trait.Serialize.html#tymethod.serialize\" class=\"fn\">serialize</a>&lt;S&gt;(\n    &amp;self,\n    serializer: S,\n) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;&lt;S as <a class=\"trait\" href=\"devela/_dep/serde/trait.Serializer.html\" title=\"trait devela::_dep::serde::Serializer\">Serializer</a>&gt;::<a class=\"associatedtype\" href=\"devela/_dep/serde/trait.Serializer.html#associatedtype.Ok\" title=\"type devela::_dep::serde::Serializer::Ok\">Ok</a>, &lt;S as <a class=\"trait\" href=\"devela/_dep/serde/trait.Serializer.html\" title=\"trait devela::_dep::serde::Serializer\">Serializer</a>&gt;::<a class=\"associatedtype\" href=\"devela/_dep/serde/trait.Serializer.html#associatedtype.Error\" title=\"type devela::_dep::serde::Serializer::Error\">Error</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;&lt;S as Serializer&gt;::Ok, &lt;S as Serializer&gt;::Error&gt;\">ⓘ</a><div class=\"where\">where\n    S: <a class=\"trait\" href=\"devela/_dep/serde/trait.Serializer.html\" title=\"trait devela::_dep::serde::Serializer\">Serializer</a>,</div></h4></section></summary><div class='docblock'>Serialize this value into the given Serde serializer. <a href=\"devela/_dep/serde/trait.Serialize.html#tymethod.serialize\">Read more</a></div></details></div></details>","Serialize","devela::code::result::opt_res::opt_res::OptRes","devela::_dep::ffmpeg_the_third::sys::AVFifoCB","devela::_dep::ffmpeg_the_third::sys::av_format_control_message","devela::_dep::ffmpeg_the_third::sys::AVOpenCallback","devela::_dep::ffmpeg_the_third::sys::avfilter_action_func","devela::_dep::ffmpeg_the_third::sys::avfilter_execute_func","devela::_dep::miniquad::native::linux_x11::libx11::XErrorHandler","devela::_dep::miniquad::native::egl::__eglMustCastToProperFunctionPointerType","devela::_dep::pyo3::ffi::wrapperfunc","devela::_dep::pyo3::ffi::wrapperfunc_kwds","devela::_dep::sdl2::sys::mixer::Mix_EffectFunc_t","devela::_dep::sdl2::sys::mixer::Mix_EffectDone_t","devela::_dep::sdl2::sys::SDL_malloc_func","devela::_dep::sdl2::sys::SDL_calloc_func","devela::_dep::sdl2::sys::SDL_realloc_func","devela::_dep::sdl2::sys::SDL_free_func","devela::_dep::sdl2::sys::SDL_main_func","devela::_dep::sdl2::sys::SDL_AssertionHandler","devela::_dep::sdl2::sys::SDL_ThreadFunction","devela::_dep::sdl2::sys::SDL_AudioCallback","devela::_dep::sdl2::sys::SDL_AudioFilter","devela::_dep::sdl2::sys::__compar_fn_t","devela::_dep::sdl2::sys::SDL_blit","devela::_dep::sdl2::sys::SDL_HitTest","devela::_dep::sdl2::sys::SDL_EventFilter","devela::_dep::sdl2::sys::SDL_HintCallback","devela::_dep::sdl2::sys::SDL_LogOutputFunction","devela::_dep::sdl2::sys::SDL_TimerCallback","devela::_dep::sdl2::sys::XIMProc","devela::_dep::sdl2::sys::XICProc","devela::_dep::sdl2::sys::XIDProc","devela::_dep::sdl2::sys::XErrorHandler","devela::_dep::sdl2::sys::XIOErrorHandler","devela::_dep::sdl2::sys::XIOErrorExitHandler","devela::_dep::sdl2::sys::XConnectionWatchProc"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Sum%3COption%3CU%3E%3E-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.37.0\">1.37.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/iter/traits/accum.rs.html#214-216\">Source</a></span><a href=\"#impl-Sum%3COption%3CU%3E%3E-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"devela/all/trait.IteratorSum.html\" title=\"trait devela::all::IteratorSum\">Sum</a>&lt;<a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;U&gt;&gt; for <a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"devela/all/trait.IteratorSum.html\" title=\"trait devela::all::IteratorSum\">Sum</a>&lt;U&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.sum\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/iter/traits/accum.rs.html#235-237\">Source</a><a href=\"#method.sum\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.IteratorSum.html#tymethod.sum\" class=\"fn\">sum</a>&lt;I&gt;(iter: I) -&gt; <a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;T&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Option&lt;T&gt;\">ⓘ</a><div class=\"where\">where\n    I: <a class=\"trait\" href=\"devela/all/trait.Iterator.html\" title=\"trait devela::all::Iterator\">Iterator</a>&lt;Item = <a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;U&gt;&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Takes each element in the <a href=\"devela/all/trait.Iterator.html\" title=\"trait devela::all::Iterator\"><code>Iterator</code></a>: if it is a <a href=\"devela/all/enum.Option.html#variant.None\" title=\"variant devela::all::Option::None\"><code>None</code></a>, no further\nelements are taken, and the <a href=\"devela/all/enum.Option.html#variant.None\" title=\"variant devela::all::Option::None\"><code>None</code></a> is returned. Should no <a href=\"devela/all/enum.Option.html#variant.None\" title=\"variant devela::all::Option::None\"><code>None</code></a>\noccur, the sum of all elements is returned.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>This sums up the position of the character ‘a’ in a vector of strings,\nif a word did not have the character ‘a’ the operation returns <code>None</code>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>words = <span class=\"macro\">vec!</span>[<span class=\"string\">\"have\"</span>, <span class=\"string\">\"a\"</span>, <span class=\"string\">\"great\"</span>, <span class=\"string\">\"day\"</span>];\n<span class=\"kw\">let </span>total: <span class=\"prelude-ty\">Option</span>&lt;usize&gt; = words.iter().map(|w| w.find(<span class=\"string\">'a'</span>)).sum();\n<span class=\"macro\">assert_eq!</span>(total, <span class=\"prelude-val\">Some</span>(<span class=\"number\">5</span>));\n<span class=\"kw\">let </span>words = <span class=\"macro\">vec!</span>[<span class=\"string\">\"have\"</span>, <span class=\"string\">\"a\"</span>, <span class=\"string\">\"good\"</span>, <span class=\"string\">\"day\"</span>];\n<span class=\"kw\">let </span>total: <span class=\"prelude-ty\">Option</span>&lt;usize&gt; = words.iter().map(|w| w.find(<span class=\"string\">'a'</span>)).sum();\n<span class=\"macro\">assert_eq!</span>(total, <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details></div></details>","Sum<Option<U>>","devela::code::result::opt_res::opt_res::OptRes","devela::_dep::ffmpeg_the_third::sys::AVFifoCB","devela::_dep::ffmpeg_the_third::sys::av_format_control_message","devela::_dep::ffmpeg_the_third::sys::AVOpenCallback","devela::_dep::ffmpeg_the_third::sys::avfilter_action_func","devela::_dep::ffmpeg_the_third::sys::avfilter_execute_func","devela::_dep::miniquad::native::linux_x11::libx11::XErrorHandler","devela::_dep::miniquad::native::egl::__eglMustCastToProperFunctionPointerType","devela::_dep::pyo3::ffi::wrapperfunc","devela::_dep::pyo3::ffi::wrapperfunc_kwds","devela::_dep::sdl2::sys::mixer::Mix_EffectFunc_t","devela::_dep::sdl2::sys::mixer::Mix_EffectDone_t","devela::_dep::sdl2::sys::SDL_malloc_func","devela::_dep::sdl2::sys::SDL_calloc_func","devela::_dep::sdl2::sys::SDL_realloc_func","devela::_dep::sdl2::sys::SDL_free_func","devela::_dep::sdl2::sys::SDL_main_func","devela::_dep::sdl2::sys::SDL_AssertionHandler","devela::_dep::sdl2::sys::SDL_ThreadFunction","devela::_dep::sdl2::sys::SDL_AudioCallback","devela::_dep::sdl2::sys::SDL_AudioFilter","devela::_dep::sdl2::sys::__compar_fn_t","devela::_dep::sdl2::sys::SDL_blit","devela::_dep::sdl2::sys::SDL_HitTest","devela::_dep::sdl2::sys::SDL_EventFilter","devela::_dep::sdl2::sys::SDL_HintCallback","devela::_dep::sdl2::sys::SDL_LogOutputFunction","devela::_dep::sdl2::sys::SDL_TimerCallback","devela::_dep::sdl2::sys::XIMProc","devela::_dep::sdl2::sys::XICProc","devela::_dep::sdl2::sys::XIDProc","devela::_dep::sdl2::sys::XErrorHandler","devela::_dep::sdl2::sys::XIOErrorHandler","devela::_dep::sdl2::sys::XIOErrorExitHandler","devela::_dep::sdl2::sys::XConnectionWatchProc"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Try-for-Option%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2603\">Source</a><a href=\"#impl-Try-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"devela/_core/ops/trait.Try.html\" title=\"trait devela::_core::ops::Try\">Try</a> for <a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2604\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"devela/_core/ops/trait.Try.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = T</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>try_trait_v2</code>)</span></div></span><div class='docblock'>The type of the value produced by <code>?</code> when <em>not</em> short-circuiting.</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Residual\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2605\">Source</a><a href=\"#associatedtype.Residual\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"devela/_core/ops/trait.Try.html#associatedtype.Residual\" class=\"associatedtype\">Residual</a> = <a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;<a class=\"enum\" href=\"devela/code/enum.Infallible.html\" title=\"enum devela::code::Infallible\">Infallible</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>try_trait_v2</code>)</span></div></span><div class='docblock'>The type of the value passed to <a href=\"devela/_core/ops/trait.FromResidual.html#tymethod.from_residual\" title=\"associated function devela::_core::ops::FromResidual::from_residual\"><code>FromResidual::from_residual</code></a>\nas part of <code>?</code> when short-circuiting. <a href=\"devela/_core/ops/trait.Try.html#associatedtype.Residual\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_output\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2608\">Source</a><a href=\"#method.from_output\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/_core/ops/trait.Try.html#tymethod.from_output\" class=\"fn\">from_output</a>(output: &lt;<a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;T&gt; as <a class=\"trait\" href=\"devela/_core/ops/trait.Try.html\" title=\"trait devela::_core::ops::Try\">Try</a>&gt;::<a class=\"associatedtype\" href=\"devela/_core/ops/trait.Try.html#associatedtype.Output\" title=\"type devela::_core::ops::Try::Output\">Output</a>) -&gt; <a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;T&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Option&lt;T&gt;\">ⓘ</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>try_trait_v2</code>)</span></div></span><div class='docblock'>Constructs the type from its <code>Output</code> type. <a href=\"devela/_core/ops/trait.Try.html#tymethod.from_output\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.branch\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2613\">Source</a><a href=\"#method.branch\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/_core/ops/trait.Try.html#tymethod.branch\" class=\"fn\">branch</a>(\n    self,\n) -&gt; <a class=\"enum\" href=\"devela/all/enum.ControlFlow.html\" title=\"enum devela::all::ControlFlow\">ControlFlow</a>&lt;&lt;<a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;T&gt; as <a class=\"trait\" href=\"devela/_core/ops/trait.Try.html\" title=\"trait devela::_core::ops::Try\">Try</a>&gt;::<a class=\"associatedtype\" href=\"devela/_core/ops/trait.Try.html#associatedtype.Residual\" title=\"type devela::_core::ops::Try::Residual\">Residual</a>, &lt;<a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;T&gt; as <a class=\"trait\" href=\"devela/_core/ops/trait.Try.html\" title=\"trait devela::_core::ops::Try\">Try</a>&gt;::<a class=\"associatedtype\" href=\"devela/_core/ops/trait.Try.html#associatedtype.Output\" title=\"type devela::_core::ops::Try::Output\">Output</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>try_trait_v2</code>)</span></div></span><div class='docblock'>Used in <code>?</code> to decide whether the operator should produce a value\n(because this returned <a href=\"devela/all/enum.ControlFlow.html#variant.Continue\" title=\"variant devela::all::ControlFlow::Continue\"><code>ControlFlow::Continue</code></a>)\nor propagate a value back to the caller\n(because this returned <a href=\"devela/all/enum.ControlFlow.html#variant.Break\" title=\"variant devela::all::ControlFlow::Break\"><code>ControlFlow::Break</code></a>). <a href=\"devela/_core/ops/trait.Try.html#tymethod.branch\">Read more</a></div></details></div></details>","Try","devela::code::result::opt_res::opt_res::OptRes","devela::_dep::ffmpeg_the_third::sys::AVFifoCB","devela::_dep::ffmpeg_the_third::sys::av_format_control_message","devela::_dep::ffmpeg_the_third::sys::AVOpenCallback","devela::_dep::ffmpeg_the_third::sys::avfilter_action_func","devela::_dep::ffmpeg_the_third::sys::avfilter_execute_func","devela::_dep::miniquad::native::linux_x11::libx11::XErrorHandler","devela::_dep::miniquad::native::egl::__eglMustCastToProperFunctionPointerType","devela::_dep::pyo3::ffi::wrapperfunc","devela::_dep::pyo3::ffi::wrapperfunc_kwds","devela::_dep::sdl2::sys::mixer::Mix_EffectFunc_t","devela::_dep::sdl2::sys::mixer::Mix_EffectDone_t","devela::_dep::sdl2::sys::SDL_malloc_func","devela::_dep::sdl2::sys::SDL_calloc_func","devela::_dep::sdl2::sys::SDL_realloc_func","devela::_dep::sdl2::sys::SDL_free_func","devela::_dep::sdl2::sys::SDL_main_func","devela::_dep::sdl2::sys::SDL_AssertionHandler","devela::_dep::sdl2::sys::SDL_ThreadFunction","devela::_dep::sdl2::sys::SDL_AudioCallback","devela::_dep::sdl2::sys::SDL_AudioFilter","devela::_dep::sdl2::sys::__compar_fn_t","devela::_dep::sdl2::sys::SDL_blit","devela::_dep::sdl2::sys::SDL_HitTest","devela::_dep::sdl2::sys::SDL_EventFilter","devela::_dep::sdl2::sys::SDL_HintCallback","devela::_dep::sdl2::sys::SDL_LogOutputFunction","devela::_dep::sdl2::sys::SDL_TimerCallback","devela::_dep::sdl2::sys::XIMProc","devela::_dep::sdl2::sys::XICProc","devela::_dep::sdl2::sys::XIDProc","devela::_dep::sdl2::sys::XErrorHandler","devela::_dep::sdl2::sys::XIOErrorHandler","devela::_dep::sdl2::sys::XIOErrorExitHandler","devela::_dep::sdl2::sys::XConnectionWatchProc"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Zeroable-for-Option%3CT%3E\" class=\"impl\"><a href=\"#impl-Zeroable-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"devela/_dep/bytemuck/trait.Zeroable.html\" title=\"trait devela::_dep::bytemuck::Zeroable\">Zeroable</a> for <a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"devela/_dep/bytemuck/trait.ZeroableInOption.html\" title=\"trait devela::_dep::bytemuck::ZeroableInOption\">ZeroableInOption</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.zeroed\" class=\"method trait-impl\"><a href=\"#method.zeroed\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/_dep/bytemuck/trait.Zeroable.html#method.zeroed\" class=\"fn\">zeroed</a>() -&gt; Self</h4></section></summary><div class='docblock'>Calls <a href=\"devela/_core/mem/fn.zeroed.html\" title=\"fn devela::_core::mem::zeroed\"><code>zeroed</code></a>. <a href=\"devela/_dep/bytemuck/trait.Zeroable.html#method.zeroed\">Read more</a></div></details></div></details>","Zeroable","devela::code::result::opt_res::opt_res::OptRes","devela::_dep::ffmpeg_the_third::sys::AVFifoCB","devela::_dep::ffmpeg_the_third::sys::av_format_control_message","devela::_dep::ffmpeg_the_third::sys::AVOpenCallback","devela::_dep::ffmpeg_the_third::sys::avfilter_action_func","devela::_dep::ffmpeg_the_third::sys::avfilter_execute_func","devela::_dep::miniquad::native::linux_x11::libx11::XErrorHandler","devela::_dep::miniquad::native::egl::__eglMustCastToProperFunctionPointerType","devela::_dep::pyo3::ffi::wrapperfunc","devela::_dep::pyo3::ffi::wrapperfunc_kwds","devela::_dep::sdl2::sys::mixer::Mix_EffectFunc_t","devela::_dep::sdl2::sys::mixer::Mix_EffectDone_t","devela::_dep::sdl2::sys::SDL_malloc_func","devela::_dep::sdl2::sys::SDL_calloc_func","devela::_dep::sdl2::sys::SDL_realloc_func","devela::_dep::sdl2::sys::SDL_free_func","devela::_dep::sdl2::sys::SDL_main_func","devela::_dep::sdl2::sys::SDL_AssertionHandler","devela::_dep::sdl2::sys::SDL_ThreadFunction","devela::_dep::sdl2::sys::SDL_AudioCallback","devela::_dep::sdl2::sys::SDL_AudioFilter","devela::_dep::sdl2::sys::__compar_fn_t","devela::_dep::sdl2::sys::SDL_blit","devela::_dep::sdl2::sys::SDL_HitTest","devela::_dep::sdl2::sys::SDL_EventFilter","devela::_dep::sdl2::sys::SDL_HintCallback","devela::_dep::sdl2::sys::SDL_LogOutputFunction","devela::_dep::sdl2::sys::SDL_TimerCallback","devela::_dep::sdl2::sys::XIMProc","devela::_dep::sdl2::sys::XICProc","devela::_dep::sdl2::sys::XIDProc","devela::_dep::sdl2::sys::XErrorHandler","devela::_dep::sdl2::sys::XIOErrorHandler","devela::_dep::sdl2::sys::XIOErrorExitHandler","devela::_dep::sdl2::sys::XConnectionWatchProc"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Zeroize-for-Option%3CZ%3E\" class=\"impl\"><a href=\"#impl-Zeroize-for-Option%3CZ%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;Z&gt; Zeroize for <a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;Z&gt;<div class=\"where\">where\n    Z: Zeroize,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.zeroize\" class=\"method trait-impl\"><a href=\"#method.zeroize\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">zeroize</a>(&amp;mut self)</h4></section></summary><div class='docblock'>Zero out this object from memory using Rust intrinsics which ensure the\nzeroization operation is not “optimized away” by the compiler.</div></details></div></details>","Zeroize","devela::code::result::opt_res::opt_res::OptRes","devela::_dep::ffmpeg_the_third::sys::AVFifoCB","devela::_dep::ffmpeg_the_third::sys::av_format_control_message","devela::_dep::ffmpeg_the_third::sys::AVOpenCallback","devela::_dep::ffmpeg_the_third::sys::avfilter_action_func","devela::_dep::ffmpeg_the_third::sys::avfilter_execute_func","devela::_dep::miniquad::native::linux_x11::libx11::XErrorHandler","devela::_dep::miniquad::native::egl::__eglMustCastToProperFunctionPointerType","devela::_dep::pyo3::ffi::wrapperfunc","devela::_dep::pyo3::ffi::wrapperfunc_kwds","devela::_dep::sdl2::sys::mixer::Mix_EffectFunc_t","devela::_dep::sdl2::sys::mixer::Mix_EffectDone_t","devela::_dep::sdl2::sys::SDL_malloc_func","devela::_dep::sdl2::sys::SDL_calloc_func","devela::_dep::sdl2::sys::SDL_realloc_func","devela::_dep::sdl2::sys::SDL_free_func","devela::_dep::sdl2::sys::SDL_main_func","devela::_dep::sdl2::sys::SDL_AssertionHandler","devela::_dep::sdl2::sys::SDL_ThreadFunction","devela::_dep::sdl2::sys::SDL_AudioCallback","devela::_dep::sdl2::sys::SDL_AudioFilter","devela::_dep::sdl2::sys::__compar_fn_t","devela::_dep::sdl2::sys::SDL_blit","devela::_dep::sdl2::sys::SDL_HitTest","devela::_dep::sdl2::sys::SDL_EventFilter","devela::_dep::sdl2::sys::SDL_HintCallback","devela::_dep::sdl2::sys::SDL_LogOutputFunction","devela::_dep::sdl2::sys::SDL_TimerCallback","devela::_dep::sdl2::sys::XIMProc","devela::_dep::sdl2::sys::XICProc","devela::_dep::sdl2::sys::XIDProc","devela::_dep::sdl2::sys::XErrorHandler","devela::_dep::sdl2::sys::XIOErrorHandler","devela::_dep::sdl2::sys::XIOErrorExitHandler","devela::_dep::sdl2::sys::XConnectionWatchProc"],["<section id=\"impl-Copy-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#588\">Source</a></span><a href=\"#impl-Copy-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"devela/all/trait.Copy.html\" title=\"trait devela::all::Copy\">Copy</a> for <a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"devela/all/trait.Copy.html\" title=\"trait devela::all::Copy\">Copy</a>,</div></h3></section>","Copy","devela::code::result::opt_res::opt_res::OptRes","devela::_dep::ffmpeg_the_third::sys::AVFifoCB","devela::_dep::ffmpeg_the_third::sys::av_format_control_message","devela::_dep::ffmpeg_the_third::sys::AVOpenCallback","devela::_dep::ffmpeg_the_third::sys::avfilter_action_func","devela::_dep::ffmpeg_the_third::sys::avfilter_execute_func","devela::_dep::miniquad::native::linux_x11::libx11::XErrorHandler","devela::_dep::miniquad::native::egl::__eglMustCastToProperFunctionPointerType","devela::_dep::pyo3::ffi::wrapperfunc","devela::_dep::pyo3::ffi::wrapperfunc_kwds","devela::_dep::sdl2::sys::mixer::Mix_EffectFunc_t","devela::_dep::sdl2::sys::mixer::Mix_EffectDone_t","devela::_dep::sdl2::sys::SDL_malloc_func","devela::_dep::sdl2::sys::SDL_calloc_func","devela::_dep::sdl2::sys::SDL_realloc_func","devela::_dep::sdl2::sys::SDL_free_func","devela::_dep::sdl2::sys::SDL_main_func","devela::_dep::sdl2::sys::SDL_AssertionHandler","devela::_dep::sdl2::sys::SDL_ThreadFunction","devela::_dep::sdl2::sys::SDL_AudioCallback","devela::_dep::sdl2::sys::SDL_AudioFilter","devela::_dep::sdl2::sys::__compar_fn_t","devela::_dep::sdl2::sys::SDL_blit","devela::_dep::sdl2::sys::SDL_HitTest","devela::_dep::sdl2::sys::SDL_EventFilter","devela::_dep::sdl2::sys::SDL_HintCallback","devela::_dep::sdl2::sys::SDL_LogOutputFunction","devela::_dep::sdl2::sys::SDL_TimerCallback","devela::_dep::sdl2::sys::XIMProc","devela::_dep::sdl2::sys::XICProc","devela::_dep::sdl2::sys::XIDProc","devela::_dep::sdl2::sys::XErrorHandler","devela::_dep::sdl2::sys::XIOErrorHandler","devela::_dep::sdl2::sys::XIOErrorExitHandler","devela::_dep::sdl2::sys::XConnectionWatchProc"],["<section id=\"impl-Eq-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#588\">Source</a></span><a href=\"#impl-Eq-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"devela/all/trait.Eq.html\" title=\"trait devela::all::Eq\">Eq</a> for <a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"devela/all/trait.Eq.html\" title=\"trait devela::all::Eq\">Eq</a>,</div></h3></section>","Eq","devela::code::result::opt_res::opt_res::OptRes","devela::_dep::ffmpeg_the_third::sys::AVFifoCB","devela::_dep::ffmpeg_the_third::sys::av_format_control_message","devela::_dep::ffmpeg_the_third::sys::AVOpenCallback","devela::_dep::ffmpeg_the_third::sys::avfilter_action_func","devela::_dep::ffmpeg_the_third::sys::avfilter_execute_func","devela::_dep::miniquad::native::linux_x11::libx11::XErrorHandler","devela::_dep::miniquad::native::egl::__eglMustCastToProperFunctionPointerType","devela::_dep::pyo3::ffi::wrapperfunc","devela::_dep::pyo3::ffi::wrapperfunc_kwds","devela::_dep::sdl2::sys::mixer::Mix_EffectFunc_t","devela::_dep::sdl2::sys::mixer::Mix_EffectDone_t","devela::_dep::sdl2::sys::SDL_malloc_func","devela::_dep::sdl2::sys::SDL_calloc_func","devela::_dep::sdl2::sys::SDL_realloc_func","devela::_dep::sdl2::sys::SDL_free_func","devela::_dep::sdl2::sys::SDL_main_func","devela::_dep::sdl2::sys::SDL_AssertionHandler","devela::_dep::sdl2::sys::SDL_ThreadFunction","devela::_dep::sdl2::sys::SDL_AudioCallback","devela::_dep::sdl2::sys::SDL_AudioFilter","devela::_dep::sdl2::sys::__compar_fn_t","devela::_dep::sdl2::sys::SDL_blit","devela::_dep::sdl2::sys::SDL_HitTest","devela::_dep::sdl2::sys::SDL_EventFilter","devela::_dep::sdl2::sys::SDL_HintCallback","devela::_dep::sdl2::sys::SDL_LogOutputFunction","devela::_dep::sdl2::sys::SDL_TimerCallback","devela::_dep::sdl2::sys::XIMProc","devela::_dep::sdl2::sys::XICProc","devela::_dep::sdl2::sys::XIDProc","devela::_dep::sdl2::sys::XErrorHandler","devela::_dep::sdl2::sys::XIOErrorHandler","devela::_dep::sdl2::sys::XIOErrorExitHandler","devela::_dep::sdl2::sys::XConnectionWatchProc"],["<section id=\"impl-Pod-for-Option%3CT%3E\" class=\"impl\"><a href=\"#impl-Pod-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"devela/_dep/bytemuck/trait.Pod.html\" title=\"trait devela::_dep::bytemuck::Pod\">Pod</a> for <a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"devela/_dep/bytemuck/trait.PodInOption.html\" title=\"trait devela::_dep::bytemuck::PodInOption\">PodInOption</a>,</div></h3></section>","Pod","devela::code::result::opt_res::opt_res::OptRes","devela::_dep::ffmpeg_the_third::sys::AVFifoCB","devela::_dep::ffmpeg_the_third::sys::av_format_control_message","devela::_dep::ffmpeg_the_third::sys::AVOpenCallback","devela::_dep::ffmpeg_the_third::sys::avfilter_action_func","devela::_dep::ffmpeg_the_third::sys::avfilter_execute_func","devela::_dep::miniquad::native::linux_x11::libx11::XErrorHandler","devela::_dep::miniquad::native::egl::__eglMustCastToProperFunctionPointerType","devela::_dep::pyo3::ffi::wrapperfunc","devela::_dep::pyo3::ffi::wrapperfunc_kwds","devela::_dep::sdl2::sys::mixer::Mix_EffectFunc_t","devela::_dep::sdl2::sys::mixer::Mix_EffectDone_t","devela::_dep::sdl2::sys::SDL_malloc_func","devela::_dep::sdl2::sys::SDL_calloc_func","devela::_dep::sdl2::sys::SDL_realloc_func","devela::_dep::sdl2::sys::SDL_free_func","devela::_dep::sdl2::sys::SDL_main_func","devela::_dep::sdl2::sys::SDL_AssertionHandler","devela::_dep::sdl2::sys::SDL_ThreadFunction","devela::_dep::sdl2::sys::SDL_AudioCallback","devela::_dep::sdl2::sys::SDL_AudioFilter","devela::_dep::sdl2::sys::__compar_fn_t","devela::_dep::sdl2::sys::SDL_blit","devela::_dep::sdl2::sys::SDL_HitTest","devela::_dep::sdl2::sys::SDL_EventFilter","devela::_dep::sdl2::sys::SDL_HintCallback","devela::_dep::sdl2::sys::SDL_LogOutputFunction","devela::_dep::sdl2::sys::SDL_TimerCallback","devela::_dep::sdl2::sys::XIMProc","devela::_dep::sdl2::sys::XICProc","devela::_dep::sdl2::sys::XIDProc","devela::_dep::sdl2::sys::XErrorHandler","devela::_dep::sdl2::sys::XIOErrorHandler","devela::_dep::sdl2::sys::XIOErrorExitHandler","devela::_dep::sdl2::sys::XConnectionWatchProc"],["<section id=\"impl-StructuralPartialEq-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2307\">Source</a></span><a href=\"#impl-StructuralPartialEq-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"devela/_core/marker/trait.StructuralPartialEq.html\" title=\"trait devela::_core::marker::StructuralPartialEq\">StructuralPartialEq</a> for <a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;T&gt;</h3></section>","StructuralPartialEq","devela::code::result::opt_res::opt_res::OptRes","devela::_dep::ffmpeg_the_third::sys::AVFifoCB","devela::_dep::ffmpeg_the_third::sys::av_format_control_message","devela::_dep::ffmpeg_the_third::sys::AVOpenCallback","devela::_dep::ffmpeg_the_third::sys::avfilter_action_func","devela::_dep::ffmpeg_the_third::sys::avfilter_execute_func","devela::_dep::miniquad::native::linux_x11::libx11::XErrorHandler","devela::_dep::miniquad::native::egl::__eglMustCastToProperFunctionPointerType","devela::_dep::pyo3::ffi::wrapperfunc","devela::_dep::pyo3::ffi::wrapperfunc_kwds","devela::_dep::sdl2::sys::mixer::Mix_EffectFunc_t","devela::_dep::sdl2::sys::mixer::Mix_EffectDone_t","devela::_dep::sdl2::sys::SDL_malloc_func","devela::_dep::sdl2::sys::SDL_calloc_func","devela::_dep::sdl2::sys::SDL_realloc_func","devela::_dep::sdl2::sys::SDL_free_func","devela::_dep::sdl2::sys::SDL_main_func","devela::_dep::sdl2::sys::SDL_AssertionHandler","devela::_dep::sdl2::sys::SDL_ThreadFunction","devela::_dep::sdl2::sys::SDL_AudioCallback","devela::_dep::sdl2::sys::SDL_AudioFilter","devela::_dep::sdl2::sys::__compar_fn_t","devela::_dep::sdl2::sys::SDL_blit","devela::_dep::sdl2::sys::SDL_HitTest","devela::_dep::sdl2::sys::SDL_EventFilter","devela::_dep::sdl2::sys::SDL_HintCallback","devela::_dep::sdl2::sys::SDL_LogOutputFunction","devela::_dep::sdl2::sys::SDL_TimerCallback","devela::_dep::sdl2::sys::XIMProc","devela::_dep::sdl2::sys::XICProc","devela::_dep::sdl2::sys::XIDProc","devela::_dep::sdl2::sys::XErrorHandler","devela::_dep::sdl2::sys::XIOErrorHandler","devela::_dep::sdl2::sys::XIOErrorExitHandler","devela::_dep::sdl2::sys::XConnectionWatchProc"],["<section id=\"impl-UseCloned-for-Option%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2172\">Source</a><a href=\"#impl-UseCloned-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"devela/_core/clone/trait.UseCloned.html\" title=\"trait devela::_core::clone::UseCloned\">UseCloned</a> for <a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"devela/_core/clone/trait.UseCloned.html\" title=\"trait devela::_core::clone::UseCloned\">UseCloned</a>,</div></h3></section>","UseCloned","devela::code::result::opt_res::opt_res::OptRes","devela::_dep::ffmpeg_the_third::sys::AVFifoCB","devela::_dep::ffmpeg_the_third::sys::av_format_control_message","devela::_dep::ffmpeg_the_third::sys::AVOpenCallback","devela::_dep::ffmpeg_the_third::sys::avfilter_action_func","devela::_dep::ffmpeg_the_third::sys::avfilter_execute_func","devela::_dep::miniquad::native::linux_x11::libx11::XErrorHandler","devela::_dep::miniquad::native::egl::__eglMustCastToProperFunctionPointerType","devela::_dep::pyo3::ffi::wrapperfunc","devela::_dep::pyo3::ffi::wrapperfunc_kwds","devela::_dep::sdl2::sys::mixer::Mix_EffectFunc_t","devela::_dep::sdl2::sys::mixer::Mix_EffectDone_t","devela::_dep::sdl2::sys::SDL_malloc_func","devela::_dep::sdl2::sys::SDL_calloc_func","devela::_dep::sdl2::sys::SDL_realloc_func","devela::_dep::sdl2::sys::SDL_free_func","devela::_dep::sdl2::sys::SDL_main_func","devela::_dep::sdl2::sys::SDL_AssertionHandler","devela::_dep::sdl2::sys::SDL_ThreadFunction","devela::_dep::sdl2::sys::SDL_AudioCallback","devela::_dep::sdl2::sys::SDL_AudioFilter","devela::_dep::sdl2::sys::__compar_fn_t","devela::_dep::sdl2::sys::SDL_blit","devela::_dep::sdl2::sys::SDL_HitTest","devela::_dep::sdl2::sys::SDL_EventFilter","devela::_dep::sdl2::sys::SDL_HintCallback","devela::_dep::sdl2::sys::SDL_LogOutputFunction","devela::_dep::sdl2::sys::SDL_TimerCallback","devela::_dep::sdl2::sys::XIMProc","devela::_dep::sdl2::sys::XICProc","devela::_dep::sdl2::sys::XIDProc","devela::_dep::sdl2::sys::XErrorHandler","devela::_dep::sdl2::sys::XIOErrorHandler","devela::_dep::sdl2::sys::XIOErrorExitHandler","devela::_dep::sdl2::sys::XConnectionWatchProc"],["<section id=\"impl-ZeroizeOnDrop-for-Option%3CZ%3E\" class=\"impl\"><a href=\"#impl-ZeroizeOnDrop-for-Option%3CZ%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;Z&gt; ZeroizeOnDrop for <a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;Z&gt;<div class=\"where\">where\n    Z: ZeroizeOnDrop,</div></h3></section>","ZeroizeOnDrop","devela::code::result::opt_res::opt_res::OptRes","devela::_dep::ffmpeg_the_third::sys::AVFifoCB","devela::_dep::ffmpeg_the_third::sys::av_format_control_message","devela::_dep::ffmpeg_the_third::sys::AVOpenCallback","devela::_dep::ffmpeg_the_third::sys::avfilter_action_func","devela::_dep::ffmpeg_the_third::sys::avfilter_execute_func","devela::_dep::miniquad::native::linux_x11::libx11::XErrorHandler","devela::_dep::miniquad::native::egl::__eglMustCastToProperFunctionPointerType","devela::_dep::pyo3::ffi::wrapperfunc","devela::_dep::pyo3::ffi::wrapperfunc_kwds","devela::_dep::sdl2::sys::mixer::Mix_EffectFunc_t","devela::_dep::sdl2::sys::mixer::Mix_EffectDone_t","devela::_dep::sdl2::sys::SDL_malloc_func","devela::_dep::sdl2::sys::SDL_calloc_func","devela::_dep::sdl2::sys::SDL_realloc_func","devela::_dep::sdl2::sys::SDL_free_func","devela::_dep::sdl2::sys::SDL_main_func","devela::_dep::sdl2::sys::SDL_AssertionHandler","devela::_dep::sdl2::sys::SDL_ThreadFunction","devela::_dep::sdl2::sys::SDL_AudioCallback","devela::_dep::sdl2::sys::SDL_AudioFilter","devela::_dep::sdl2::sys::__compar_fn_t","devela::_dep::sdl2::sys::SDL_blit","devela::_dep::sdl2::sys::SDL_HitTest","devela::_dep::sdl2::sys::SDL_EventFilter","devela::_dep::sdl2::sys::SDL_HintCallback","devela::_dep::sdl2::sys::SDL_LogOutputFunction","devela::_dep::sdl2::sys::SDL_TimerCallback","devela::_dep::sdl2::sys::XIMProc","devela::_dep::sdl2::sys::XICProc","devela::_dep::sdl2::sys::XIDProc","devela::_dep::sdl2::sys::XErrorHandler","devela::_dep::sdl2::sys::XIOErrorHandler","devela::_dep::sdl2::sys::XIOErrorExitHandler","devela::_dep::sdl2::sys::XConnectionWatchProc"]]]]);
    if (window.register_type_impls) {
        window.register_type_impls(type_impls);
    } else {
        window.pending_type_impls = type_impls;
    }
})()
//{"start":55,"fragment_lengths":[254257]}