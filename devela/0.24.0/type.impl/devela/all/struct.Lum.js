(function() {
    var type_impls = Object.fromEntries([["devela",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-Lum%3CT,+LINEAR,+LIGHTNESS%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/devela/media/color/luminance.rs.html#27\">Source</a><a href=\"#impl-Clone-for-Lum%3CT,+LINEAR,+LIGHTNESS%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T: <a class=\"trait\" href=\"devela/code/trait.Clone.html\" title=\"trait devela::code::Clone\">Clone</a>, const LINEAR: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a>, const LIGHTNESS: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a>&gt; <a class=\"trait\" href=\"devela/code/trait.Clone.html\" title=\"trait devela::code::Clone\">Clone</a> for <a class=\"struct\" href=\"devela/all/struct.Lum.html\" title=\"struct devela::all::Lum\">Lum</a>&lt;T, LINEAR, LIGHTNESS&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/media/color/luminance.rs.html#27\">Source</a><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/code/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; <a class=\"struct\" href=\"devela/all/struct.Lum.html\" title=\"struct devela::all::Lum\">Lum</a>&lt;T, LINEAR, LIGHTNESS&gt;</h4></section></summary><div class='docblock'>Returns a duplicate of the value. <a href=\"devela/code/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/clone.rs.html#246-248\">Source</a></span><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/code/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: &amp;Self)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a href=\"devela/code/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details>","Clone","devela::media::color::luminance::Luminance","devela::media::color::luminance::Lightness","devela::media::color::luminance::Luma","devela::media::color::luminance::LinearLightness"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Color-for-Lum%3Cf64%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/devela/media/color/luminance.rs.html#194\">Source</a><a href=\"#impl-Color-for-Lum%3Cf64%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"devela/all/trait.Color.html\" title=\"trait devela::all::Color\">Color</a> for <a class=\"struct\" href=\"devela/all/struct.Lum.html\" title=\"struct devela::all::Lum\">Lum</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.f64.html\">f64</a>, true, false&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.color_red\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/media/color/luminance.rs.html#194\">Source</a><a href=\"#method.color_red\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Color.html#tymethod.color_red\" class=\"fn\">color_red</a>(&amp;self) -&gt; Self::<a class=\"associatedtype\" href=\"devela/all/trait.Color.html#associatedtype.Component\" title=\"type devela::all::Color::Component\">Component</a></h4></section></summary><div class=\"docblock\"><p>Since the color has no red, the luminosity is returned.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.color_green\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/media/color/luminance.rs.html#194\">Source</a><a href=\"#method.color_green\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Color.html#tymethod.color_green\" class=\"fn\">color_green</a>(&amp;self) -&gt; Self::<a class=\"associatedtype\" href=\"devela/all/trait.Color.html#associatedtype.Component\" title=\"type devela::all::Color::Component\">Component</a></h4></section></summary><div class=\"docblock\"><p>Since the color has no red, the luminosity is returned.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.color_blue\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/media/color/luminance.rs.html#194\">Source</a><a href=\"#method.color_blue\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Color.html#tymethod.color_blue\" class=\"fn\">color_blue</a>(&amp;self) -&gt; Self::<a class=\"associatedtype\" href=\"devela/all/trait.Color.html#associatedtype.Component\" title=\"type devela::all::Color::Component\">Component</a></h4></section></summary><div class=\"docblock\"><p>Since the color has no red, the luminosity is returned.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.color_alpha\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/media/color/luminance.rs.html#194\">Source</a><a href=\"#method.color_alpha\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Color.html#tymethod.color_alpha\" class=\"fn\">color_alpha</a>(&amp;self) -&gt; Self::<a class=\"associatedtype\" href=\"devela/all/trait.Color.html#associatedtype.Component\" title=\"type devela::all::Color::Component\">Component</a></h4></section></summary><div class=\"docblock\"><p>Since the color has no alpha, the maximum normalized value is returned.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.COLOR_BITS\" class=\"associatedconstant trait-impl\"><a class=\"src rightside\" href=\"src/devela/media/color/luminance.rs.html#194\">Source</a><a href=\"#associatedconstant.COLOR_BITS\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a href=\"devela/all/trait.Color.html#associatedconstant.COLOR_BITS\" class=\"constant\">COLOR_BITS</a>: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a> = 64usize</h4></section></summary><div class='docblock'>The bit depth of each color component (e.g., <code>8</code> for <code>u8</code>, <code>32</code> for <code>f32</code>).</div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.COLOR_COUNT\" class=\"associatedconstant trait-impl\"><a class=\"src rightside\" href=\"src/devela/media/color/luminance.rs.html#194\">Source</a><a href=\"#associatedconstant.COLOR_COUNT\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a href=\"devela/all/trait.Color.html#associatedconstant.COLOR_COUNT\" class=\"constant\">COLOR_COUNT</a>: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a> = 1usize</h4></section></summary><div class='docblock'>The number of color components (channels) in the representation. <a href=\"devela/all/trait.Color.html#associatedconstant.COLOR_COUNT\">Read more</a></div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.COLOR_HAS_ALPHA\" class=\"associatedconstant trait-impl\"><a class=\"src rightside\" href=\"src/devela/media/color/luminance.rs.html#194\">Source</a><a href=\"#associatedconstant.COLOR_HAS_ALPHA\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a href=\"devela/all/trait.Color.html#associatedconstant.COLOR_HAS_ALPHA\" class=\"constant\">COLOR_HAS_ALPHA</a>: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a> = false</h4></section></summary><div class='docblock'>Whether the color has an alpha component are integer types (e.g., <code>u8</code>, <code>u16</code>).</div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.COLOR_IS_LINEAR\" class=\"associatedconstant trait-impl\"><a class=\"src rightside\" href=\"src/devela/media/color/luminance.rs.html#194\">Source</a><a href=\"#associatedconstant.COLOR_IS_LINEAR\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a href=\"devela/all/trait.Color.html#associatedconstant.COLOR_IS_LINEAR\" class=\"constant\">COLOR_IS_LINEAR</a>: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a> = true</h4></section></summary><div class='docblock'>Whether the color space is linear (as opposed to non-linear, e.g., sRGB). <a href=\"devela/all/trait.Color.html#associatedconstant.COLOR_IS_LINEAR\">Read more</a></div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.COLOR_IS_INT\" class=\"associatedconstant trait-impl\"><a class=\"src rightside\" href=\"src/devela/media/color/luminance.rs.html#194\">Source</a><a href=\"#associatedconstant.COLOR_IS_INT\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a href=\"devela/all/trait.Color.html#associatedconstant.COLOR_IS_INT\" class=\"constant\">COLOR_IS_INT</a>: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a> = false</h4></section></summary><div class='docblock'>Whether the color components are integer types (e.g., <code>u8</code>, <code>u16</code>). <a href=\"devela/all/trait.Color.html#associatedconstant.COLOR_IS_INT\">Read more</a></div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.COLOR_IS_PREMUL\" class=\"associatedconstant trait-impl\"><a class=\"src rightside\" href=\"src/devela/media/color/luminance.rs.html#194\">Source</a><a href=\"#associatedconstant.COLOR_IS_PREMUL\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a href=\"devela/all/trait.Color.html#associatedconstant.COLOR_IS_PREMUL\" class=\"constant\">COLOR_IS_PREMUL</a>: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a> = false</h4></section></summary><div class='docblock'>Whether the color uses premultiplied alpha (vs. straight/unassociated alpha). <a href=\"devela/all/trait.Color.html#associatedconstant.COLOR_IS_PREMUL\">Read more</a></div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Component\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/devela/media/color/luminance.rs.html#194\">Source</a><a href=\"#associatedtype.Component\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"devela/all/trait.Color.html#associatedtype.Component\" class=\"associatedtype\">Component</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.f64.html\">f64</a></h4></section></summary><div class='docblock'>The type of a single color component (e.g., <code>u8</code>, <code>f32</code>).</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.color_components_write\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/media/color/luminance.rs.html#194\">Source</a><a href=\"#method.color_components_write\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Color.html#tymethod.color_components_write\" class=\"fn\">color_components_write</a>(&amp;self, b: &amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.f64.html\">f64</a>]) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"devela/all/struct.NotEnoughSpace.html\" title=\"struct devela::all::NotEnoughSpace\">NotEnoughSpace</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;(), NotEnoughSpace&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Writes the color components to a pre-allocated <code>buffer</code>. <a href=\"devela/all/trait.Color.html#tymethod.color_components_write\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.color_bits\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/media/color/color.rs.html#77\">Source</a><a href=\"#method.color_bits\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Color.html#method.color_bits\" class=\"fn\">color_bits</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a></h4></section></summary><div class='docblock'>Returns the bit depth of each color component (e.g., 8 for <code>u8</code>, 32 for <code>f32</code>).</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.color_count\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/media/color/color.rs.html#81\">Source</a><a href=\"#method.color_count\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Color.html#method.color_count\" class=\"fn\">color_count</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a></h4></section></summary><div class='docblock'>Returns the number of color components (channels).</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.color_has_alpha\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/media/color/color.rs.html#85\">Source</a><a href=\"#method.color_has_alpha\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Color.html#method.color_has_alpha\" class=\"fn\">color_has_alpha</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Returns <code>true</code> if the color has an alpha component.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.color_is_int\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/media/color/color.rs.html#89\">Source</a><a href=\"#method.color_is_int\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Color.html#method.color_is_int\" class=\"fn\">color_is_int</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Returns <code>true</code> if the color uses integer components (e.g., <code>u8</code>, <code>u16</code>).</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.color_is_linear\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/media/color/color.rs.html#93\">Source</a><a href=\"#method.color_is_linear\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Color.html#method.color_is_linear\" class=\"fn\">color_is_linear</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Returns <code>true</code> if the color is in a linear space (not gamma-encoded like sRGB).</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.color_is_premul\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/media/color/color.rs.html#97\">Source</a><a href=\"#method.color_is_premul\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Color.html#method.color_is_premul\" class=\"fn\">color_is_premul</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Returns <code>true</code> if the color uses premultiplied alpha.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.color_components_vec\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/media/color/color.rs.html#102-106\">Source</a><a href=\"#method.color_components_vec\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Color.html#method.color_components_vec\" class=\"fn\">color_components_vec</a>(&amp;self) -&gt; <a class=\"struct\" href=\"devela/all/struct.Vec.html\" title=\"struct devela::all::Vec\">Vec</a>&lt;Self::<a class=\"associatedtype\" href=\"devela/all/trait.Color.html#associatedtype.Component\" title=\"type devela::all::Color::Component\">Component</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Vec&lt;Self::Component&gt;\">ⓘ</a><div class=\"where\">where\n    Self::<a class=\"associatedtype\" href=\"devela/all/trait.Color.html#associatedtype.Component\" title=\"type devela::all::Color::Component\">Component</a>: <a class=\"trait\" href=\"devela/code/trait.Default.html\" title=\"trait devela::code::Default\">Default</a> + <a class=\"trait\" href=\"devela/code/trait.Clone.html\" title=\"trait devela::code::Clone\">Clone</a>,</div></h4></section></summary><span class=\"item-info\"><div class=\"stab portability\">Available on <strong>crate feature <code>alloc</code></strong> only.</div></span><div class='docblock'>Returns a vector containing the color components.</div></details></div></details>","Color","devela::media::color::luminance::Luminance"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Color-for-Lum%3Cf64,+false%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/devela/media/color/luminance.rs.html#194\">Source</a><a href=\"#impl-Color-for-Lum%3Cf64,+false%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"devela/all/trait.Color.html\" title=\"trait devela::all::Color\">Color</a> for <a class=\"struct\" href=\"devela/all/struct.Lum.html\" title=\"struct devela::all::Lum\">Lum</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.f64.html\">f64</a>, false, false&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.color_red\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/media/color/luminance.rs.html#194\">Source</a><a href=\"#method.color_red\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Color.html#tymethod.color_red\" class=\"fn\">color_red</a>(&amp;self) -&gt; Self::<a class=\"associatedtype\" href=\"devela/all/trait.Color.html#associatedtype.Component\" title=\"type devela::all::Color::Component\">Component</a></h4></section></summary><div class=\"docblock\"><p>Since the color has no red, the luminosity is returned.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.color_green\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/media/color/luminance.rs.html#194\">Source</a><a href=\"#method.color_green\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Color.html#tymethod.color_green\" class=\"fn\">color_green</a>(&amp;self) -&gt; Self::<a class=\"associatedtype\" href=\"devela/all/trait.Color.html#associatedtype.Component\" title=\"type devela::all::Color::Component\">Component</a></h4></section></summary><div class=\"docblock\"><p>Since the color has no red, the luminosity is returned.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.color_blue\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/media/color/luminance.rs.html#194\">Source</a><a href=\"#method.color_blue\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Color.html#tymethod.color_blue\" class=\"fn\">color_blue</a>(&amp;self) -&gt; Self::<a class=\"associatedtype\" href=\"devela/all/trait.Color.html#associatedtype.Component\" title=\"type devela::all::Color::Component\">Component</a></h4></section></summary><div class=\"docblock\"><p>Since the color has no red, the luminosity is returned.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.color_alpha\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/media/color/luminance.rs.html#194\">Source</a><a href=\"#method.color_alpha\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Color.html#tymethod.color_alpha\" class=\"fn\">color_alpha</a>(&amp;self) -&gt; Self::<a class=\"associatedtype\" href=\"devela/all/trait.Color.html#associatedtype.Component\" title=\"type devela::all::Color::Component\">Component</a></h4></section></summary><div class=\"docblock\"><p>Since the color has no alpha, the maximum normalized value is returned.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.COLOR_BITS\" class=\"associatedconstant trait-impl\"><a class=\"src rightside\" href=\"src/devela/media/color/luminance.rs.html#194\">Source</a><a href=\"#associatedconstant.COLOR_BITS\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a href=\"devela/all/trait.Color.html#associatedconstant.COLOR_BITS\" class=\"constant\">COLOR_BITS</a>: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a> = 64usize</h4></section></summary><div class='docblock'>The bit depth of each color component (e.g., <code>8</code> for <code>u8</code>, <code>32</code> for <code>f32</code>).</div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.COLOR_COUNT\" class=\"associatedconstant trait-impl\"><a class=\"src rightside\" href=\"src/devela/media/color/luminance.rs.html#194\">Source</a><a href=\"#associatedconstant.COLOR_COUNT\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a href=\"devela/all/trait.Color.html#associatedconstant.COLOR_COUNT\" class=\"constant\">COLOR_COUNT</a>: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a> = 1usize</h4></section></summary><div class='docblock'>The number of color components (channels) in the representation. <a href=\"devela/all/trait.Color.html#associatedconstant.COLOR_COUNT\">Read more</a></div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.COLOR_HAS_ALPHA\" class=\"associatedconstant trait-impl\"><a class=\"src rightside\" href=\"src/devela/media/color/luminance.rs.html#194\">Source</a><a href=\"#associatedconstant.COLOR_HAS_ALPHA\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a href=\"devela/all/trait.Color.html#associatedconstant.COLOR_HAS_ALPHA\" class=\"constant\">COLOR_HAS_ALPHA</a>: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a> = false</h4></section></summary><div class='docblock'>Whether the color has an alpha component are integer types (e.g., <code>u8</code>, <code>u16</code>).</div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.COLOR_IS_LINEAR\" class=\"associatedconstant trait-impl\"><a class=\"src rightside\" href=\"src/devela/media/color/luminance.rs.html#194\">Source</a><a href=\"#associatedconstant.COLOR_IS_LINEAR\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a href=\"devela/all/trait.Color.html#associatedconstant.COLOR_IS_LINEAR\" class=\"constant\">COLOR_IS_LINEAR</a>: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a> = false</h4></section></summary><div class='docblock'>Whether the color space is linear (as opposed to non-linear, e.g., sRGB). <a href=\"devela/all/trait.Color.html#associatedconstant.COLOR_IS_LINEAR\">Read more</a></div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.COLOR_IS_INT\" class=\"associatedconstant trait-impl\"><a class=\"src rightside\" href=\"src/devela/media/color/luminance.rs.html#194\">Source</a><a href=\"#associatedconstant.COLOR_IS_INT\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a href=\"devela/all/trait.Color.html#associatedconstant.COLOR_IS_INT\" class=\"constant\">COLOR_IS_INT</a>: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a> = false</h4></section></summary><div class='docblock'>Whether the color components are integer types (e.g., <code>u8</code>, <code>u16</code>). <a href=\"devela/all/trait.Color.html#associatedconstant.COLOR_IS_INT\">Read more</a></div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.COLOR_IS_PREMUL\" class=\"associatedconstant trait-impl\"><a class=\"src rightside\" href=\"src/devela/media/color/luminance.rs.html#194\">Source</a><a href=\"#associatedconstant.COLOR_IS_PREMUL\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a href=\"devela/all/trait.Color.html#associatedconstant.COLOR_IS_PREMUL\" class=\"constant\">COLOR_IS_PREMUL</a>: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a> = false</h4></section></summary><div class='docblock'>Whether the color uses premultiplied alpha (vs. straight/unassociated alpha). <a href=\"devela/all/trait.Color.html#associatedconstant.COLOR_IS_PREMUL\">Read more</a></div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Component\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/devela/media/color/luminance.rs.html#194\">Source</a><a href=\"#associatedtype.Component\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"devela/all/trait.Color.html#associatedtype.Component\" class=\"associatedtype\">Component</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.f64.html\">f64</a></h4></section></summary><div class='docblock'>The type of a single color component (e.g., <code>u8</code>, <code>f32</code>).</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.color_components_write\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/media/color/luminance.rs.html#194\">Source</a><a href=\"#method.color_components_write\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Color.html#tymethod.color_components_write\" class=\"fn\">color_components_write</a>(&amp;self, b: &amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.f64.html\">f64</a>]) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"devela/all/struct.NotEnoughSpace.html\" title=\"struct devela::all::NotEnoughSpace\">NotEnoughSpace</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;(), NotEnoughSpace&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Writes the color components to a pre-allocated <code>buffer</code>. <a href=\"devela/all/trait.Color.html#tymethod.color_components_write\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.color_bits\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/media/color/color.rs.html#77\">Source</a><a href=\"#method.color_bits\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Color.html#method.color_bits\" class=\"fn\">color_bits</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a></h4></section></summary><div class='docblock'>Returns the bit depth of each color component (e.g., 8 for <code>u8</code>, 32 for <code>f32</code>).</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.color_count\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/media/color/color.rs.html#81\">Source</a><a href=\"#method.color_count\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Color.html#method.color_count\" class=\"fn\">color_count</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a></h4></section></summary><div class='docblock'>Returns the number of color components (channels).</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.color_has_alpha\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/media/color/color.rs.html#85\">Source</a><a href=\"#method.color_has_alpha\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Color.html#method.color_has_alpha\" class=\"fn\">color_has_alpha</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Returns <code>true</code> if the color has an alpha component.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.color_is_int\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/media/color/color.rs.html#89\">Source</a><a href=\"#method.color_is_int\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Color.html#method.color_is_int\" class=\"fn\">color_is_int</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Returns <code>true</code> if the color uses integer components (e.g., <code>u8</code>, <code>u16</code>).</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.color_is_linear\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/media/color/color.rs.html#93\">Source</a><a href=\"#method.color_is_linear\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Color.html#method.color_is_linear\" class=\"fn\">color_is_linear</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Returns <code>true</code> if the color is in a linear space (not gamma-encoded like sRGB).</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.color_is_premul\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/media/color/color.rs.html#97\">Source</a><a href=\"#method.color_is_premul\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Color.html#method.color_is_premul\" class=\"fn\">color_is_premul</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Returns <code>true</code> if the color uses premultiplied alpha.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.color_components_vec\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/media/color/color.rs.html#102-106\">Source</a><a href=\"#method.color_components_vec\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Color.html#method.color_components_vec\" class=\"fn\">color_components_vec</a>(&amp;self) -&gt; <a class=\"struct\" href=\"devela/all/struct.Vec.html\" title=\"struct devela::all::Vec\">Vec</a>&lt;Self::<a class=\"associatedtype\" href=\"devela/all/trait.Color.html#associatedtype.Component\" title=\"type devela::all::Color::Component\">Component</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Vec&lt;Self::Component&gt;\">ⓘ</a><div class=\"where\">where\n    Self::<a class=\"associatedtype\" href=\"devela/all/trait.Color.html#associatedtype.Component\" title=\"type devela::all::Color::Component\">Component</a>: <a class=\"trait\" href=\"devela/code/trait.Default.html\" title=\"trait devela::code::Default\">Default</a> + <a class=\"trait\" href=\"devela/code/trait.Clone.html\" title=\"trait devela::code::Clone\">Clone</a>,</div></h4></section></summary><span class=\"item-info\"><div class=\"stab portability\">Available on <strong>crate feature <code>alloc</code></strong> only.</div></span><div class='docblock'>Returns a vector containing the color components.</div></details></div></details>","Color","devela::media::color::luminance::Luma"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Color-for-Lum%3Cf64,+false,+true%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/devela/media/color/luminance.rs.html#194\">Source</a><a href=\"#impl-Color-for-Lum%3Cf64,+false,+true%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"devela/all/trait.Color.html\" title=\"trait devela::all::Color\">Color</a> for <a class=\"struct\" href=\"devela/all/struct.Lum.html\" title=\"struct devela::all::Lum\">Lum</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.f64.html\">f64</a>, false, true&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.color_red\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/media/color/luminance.rs.html#194\">Source</a><a href=\"#method.color_red\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Color.html#tymethod.color_red\" class=\"fn\">color_red</a>(&amp;self) -&gt; Self::<a class=\"associatedtype\" href=\"devela/all/trait.Color.html#associatedtype.Component\" title=\"type devela::all::Color::Component\">Component</a></h4></section></summary><div class=\"docblock\"><p>Since the color has no red, the luminosity is returned.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.color_green\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/media/color/luminance.rs.html#194\">Source</a><a href=\"#method.color_green\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Color.html#tymethod.color_green\" class=\"fn\">color_green</a>(&amp;self) -&gt; Self::<a class=\"associatedtype\" href=\"devela/all/trait.Color.html#associatedtype.Component\" title=\"type devela::all::Color::Component\">Component</a></h4></section></summary><div class=\"docblock\"><p>Since the color has no red, the luminosity is returned.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.color_blue\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/media/color/luminance.rs.html#194\">Source</a><a href=\"#method.color_blue\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Color.html#tymethod.color_blue\" class=\"fn\">color_blue</a>(&amp;self) -&gt; Self::<a class=\"associatedtype\" href=\"devela/all/trait.Color.html#associatedtype.Component\" title=\"type devela::all::Color::Component\">Component</a></h4></section></summary><div class=\"docblock\"><p>Since the color has no red, the luminosity is returned.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.color_alpha\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/media/color/luminance.rs.html#194\">Source</a><a href=\"#method.color_alpha\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Color.html#tymethod.color_alpha\" class=\"fn\">color_alpha</a>(&amp;self) -&gt; Self::<a class=\"associatedtype\" href=\"devela/all/trait.Color.html#associatedtype.Component\" title=\"type devela::all::Color::Component\">Component</a></h4></section></summary><div class=\"docblock\"><p>Since the color has no alpha, the maximum normalized value is returned.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.COLOR_BITS\" class=\"associatedconstant trait-impl\"><a class=\"src rightside\" href=\"src/devela/media/color/luminance.rs.html#194\">Source</a><a href=\"#associatedconstant.COLOR_BITS\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a href=\"devela/all/trait.Color.html#associatedconstant.COLOR_BITS\" class=\"constant\">COLOR_BITS</a>: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a> = 64usize</h4></section></summary><div class='docblock'>The bit depth of each color component (e.g., <code>8</code> for <code>u8</code>, <code>32</code> for <code>f32</code>).</div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.COLOR_COUNT\" class=\"associatedconstant trait-impl\"><a class=\"src rightside\" href=\"src/devela/media/color/luminance.rs.html#194\">Source</a><a href=\"#associatedconstant.COLOR_COUNT\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a href=\"devela/all/trait.Color.html#associatedconstant.COLOR_COUNT\" class=\"constant\">COLOR_COUNT</a>: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a> = 1usize</h4></section></summary><div class='docblock'>The number of color components (channels) in the representation. <a href=\"devela/all/trait.Color.html#associatedconstant.COLOR_COUNT\">Read more</a></div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.COLOR_HAS_ALPHA\" class=\"associatedconstant trait-impl\"><a class=\"src rightside\" href=\"src/devela/media/color/luminance.rs.html#194\">Source</a><a href=\"#associatedconstant.COLOR_HAS_ALPHA\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a href=\"devela/all/trait.Color.html#associatedconstant.COLOR_HAS_ALPHA\" class=\"constant\">COLOR_HAS_ALPHA</a>: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a> = false</h4></section></summary><div class='docblock'>Whether the color has an alpha component are integer types (e.g., <code>u8</code>, <code>u16</code>).</div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.COLOR_IS_LINEAR\" class=\"associatedconstant trait-impl\"><a class=\"src rightside\" href=\"src/devela/media/color/luminance.rs.html#194\">Source</a><a href=\"#associatedconstant.COLOR_IS_LINEAR\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a href=\"devela/all/trait.Color.html#associatedconstant.COLOR_IS_LINEAR\" class=\"constant\">COLOR_IS_LINEAR</a>: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a> = false</h4></section></summary><div class='docblock'>Whether the color space is linear (as opposed to non-linear, e.g., sRGB). <a href=\"devela/all/trait.Color.html#associatedconstant.COLOR_IS_LINEAR\">Read more</a></div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.COLOR_IS_INT\" class=\"associatedconstant trait-impl\"><a class=\"src rightside\" href=\"src/devela/media/color/luminance.rs.html#194\">Source</a><a href=\"#associatedconstant.COLOR_IS_INT\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a href=\"devela/all/trait.Color.html#associatedconstant.COLOR_IS_INT\" class=\"constant\">COLOR_IS_INT</a>: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a> = false</h4></section></summary><div class='docblock'>Whether the color components are integer types (e.g., <code>u8</code>, <code>u16</code>). <a href=\"devela/all/trait.Color.html#associatedconstant.COLOR_IS_INT\">Read more</a></div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.COLOR_IS_PREMUL\" class=\"associatedconstant trait-impl\"><a class=\"src rightside\" href=\"src/devela/media/color/luminance.rs.html#194\">Source</a><a href=\"#associatedconstant.COLOR_IS_PREMUL\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a href=\"devela/all/trait.Color.html#associatedconstant.COLOR_IS_PREMUL\" class=\"constant\">COLOR_IS_PREMUL</a>: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a> = false</h4></section></summary><div class='docblock'>Whether the color uses premultiplied alpha (vs. straight/unassociated alpha). <a href=\"devela/all/trait.Color.html#associatedconstant.COLOR_IS_PREMUL\">Read more</a></div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Component\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/devela/media/color/luminance.rs.html#194\">Source</a><a href=\"#associatedtype.Component\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"devela/all/trait.Color.html#associatedtype.Component\" class=\"associatedtype\">Component</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.f64.html\">f64</a></h4></section></summary><div class='docblock'>The type of a single color component (e.g., <code>u8</code>, <code>f32</code>).</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.color_components_write\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/media/color/luminance.rs.html#194\">Source</a><a href=\"#method.color_components_write\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Color.html#tymethod.color_components_write\" class=\"fn\">color_components_write</a>(&amp;self, b: &amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.f64.html\">f64</a>]) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"devela/all/struct.NotEnoughSpace.html\" title=\"struct devela::all::NotEnoughSpace\">NotEnoughSpace</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;(), NotEnoughSpace&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Writes the color components to a pre-allocated <code>buffer</code>. <a href=\"devela/all/trait.Color.html#tymethod.color_components_write\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.color_bits\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/media/color/color.rs.html#77\">Source</a><a href=\"#method.color_bits\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Color.html#method.color_bits\" class=\"fn\">color_bits</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a></h4></section></summary><div class='docblock'>Returns the bit depth of each color component (e.g., 8 for <code>u8</code>, 32 for <code>f32</code>).</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.color_count\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/media/color/color.rs.html#81\">Source</a><a href=\"#method.color_count\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Color.html#method.color_count\" class=\"fn\">color_count</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a></h4></section></summary><div class='docblock'>Returns the number of color components (channels).</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.color_has_alpha\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/media/color/color.rs.html#85\">Source</a><a href=\"#method.color_has_alpha\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Color.html#method.color_has_alpha\" class=\"fn\">color_has_alpha</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Returns <code>true</code> if the color has an alpha component.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.color_is_int\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/media/color/color.rs.html#89\">Source</a><a href=\"#method.color_is_int\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Color.html#method.color_is_int\" class=\"fn\">color_is_int</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Returns <code>true</code> if the color uses integer components (e.g., <code>u8</code>, <code>u16</code>).</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.color_is_linear\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/media/color/color.rs.html#93\">Source</a><a href=\"#method.color_is_linear\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Color.html#method.color_is_linear\" class=\"fn\">color_is_linear</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Returns <code>true</code> if the color is in a linear space (not gamma-encoded like sRGB).</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.color_is_premul\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/media/color/color.rs.html#97\">Source</a><a href=\"#method.color_is_premul\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Color.html#method.color_is_premul\" class=\"fn\">color_is_premul</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Returns <code>true</code> if the color uses premultiplied alpha.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.color_components_vec\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/media/color/color.rs.html#102-106\">Source</a><a href=\"#method.color_components_vec\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Color.html#method.color_components_vec\" class=\"fn\">color_components_vec</a>(&amp;self) -&gt; <a class=\"struct\" href=\"devela/all/struct.Vec.html\" title=\"struct devela::all::Vec\">Vec</a>&lt;Self::<a class=\"associatedtype\" href=\"devela/all/trait.Color.html#associatedtype.Component\" title=\"type devela::all::Color::Component\">Component</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Vec&lt;Self::Component&gt;\">ⓘ</a><div class=\"where\">where\n    Self::<a class=\"associatedtype\" href=\"devela/all/trait.Color.html#associatedtype.Component\" title=\"type devela::all::Color::Component\">Component</a>: <a class=\"trait\" href=\"devela/code/trait.Default.html\" title=\"trait devela::code::Default\">Default</a> + <a class=\"trait\" href=\"devela/code/trait.Clone.html\" title=\"trait devela::code::Clone\">Clone</a>,</div></h4></section></summary><span class=\"item-info\"><div class=\"stab portability\">Available on <strong>crate feature <code>alloc</code></strong> only.</div></span><div class='docblock'>Returns a vector containing the color components.</div></details></div></details>","Color","devela::media::color::luminance::Lightness"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Color-for-Lum%3Cf64,+true,+true%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/devela/media/color/luminance.rs.html#194\">Source</a><a href=\"#impl-Color-for-Lum%3Cf64,+true,+true%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"devela/all/trait.Color.html\" title=\"trait devela::all::Color\">Color</a> for <a class=\"struct\" href=\"devela/all/struct.Lum.html\" title=\"struct devela::all::Lum\">Lum</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.f64.html\">f64</a>, true, true&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.color_red\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/media/color/luminance.rs.html#194\">Source</a><a href=\"#method.color_red\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Color.html#tymethod.color_red\" class=\"fn\">color_red</a>(&amp;self) -&gt; Self::<a class=\"associatedtype\" href=\"devela/all/trait.Color.html#associatedtype.Component\" title=\"type devela::all::Color::Component\">Component</a></h4></section></summary><div class=\"docblock\"><p>Since the color has no red, the luminosity is returned.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.color_green\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/media/color/luminance.rs.html#194\">Source</a><a href=\"#method.color_green\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Color.html#tymethod.color_green\" class=\"fn\">color_green</a>(&amp;self) -&gt; Self::<a class=\"associatedtype\" href=\"devela/all/trait.Color.html#associatedtype.Component\" title=\"type devela::all::Color::Component\">Component</a></h4></section></summary><div class=\"docblock\"><p>Since the color has no red, the luminosity is returned.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.color_blue\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/media/color/luminance.rs.html#194\">Source</a><a href=\"#method.color_blue\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Color.html#tymethod.color_blue\" class=\"fn\">color_blue</a>(&amp;self) -&gt; Self::<a class=\"associatedtype\" href=\"devela/all/trait.Color.html#associatedtype.Component\" title=\"type devela::all::Color::Component\">Component</a></h4></section></summary><div class=\"docblock\"><p>Since the color has no red, the luminosity is returned.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.color_alpha\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/media/color/luminance.rs.html#194\">Source</a><a href=\"#method.color_alpha\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Color.html#tymethod.color_alpha\" class=\"fn\">color_alpha</a>(&amp;self) -&gt; Self::<a class=\"associatedtype\" href=\"devela/all/trait.Color.html#associatedtype.Component\" title=\"type devela::all::Color::Component\">Component</a></h4></section></summary><div class=\"docblock\"><p>Since the color has no alpha, the maximum normalized value is returned.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.COLOR_BITS\" class=\"associatedconstant trait-impl\"><a class=\"src rightside\" href=\"src/devela/media/color/luminance.rs.html#194\">Source</a><a href=\"#associatedconstant.COLOR_BITS\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a href=\"devela/all/trait.Color.html#associatedconstant.COLOR_BITS\" class=\"constant\">COLOR_BITS</a>: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a> = 64usize</h4></section></summary><div class='docblock'>The bit depth of each color component (e.g., <code>8</code> for <code>u8</code>, <code>32</code> for <code>f32</code>).</div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.COLOR_COUNT\" class=\"associatedconstant trait-impl\"><a class=\"src rightside\" href=\"src/devela/media/color/luminance.rs.html#194\">Source</a><a href=\"#associatedconstant.COLOR_COUNT\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a href=\"devela/all/trait.Color.html#associatedconstant.COLOR_COUNT\" class=\"constant\">COLOR_COUNT</a>: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a> = 1usize</h4></section></summary><div class='docblock'>The number of color components (channels) in the representation. <a href=\"devela/all/trait.Color.html#associatedconstant.COLOR_COUNT\">Read more</a></div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.COLOR_HAS_ALPHA\" class=\"associatedconstant trait-impl\"><a class=\"src rightside\" href=\"src/devela/media/color/luminance.rs.html#194\">Source</a><a href=\"#associatedconstant.COLOR_HAS_ALPHA\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a href=\"devela/all/trait.Color.html#associatedconstant.COLOR_HAS_ALPHA\" class=\"constant\">COLOR_HAS_ALPHA</a>: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a> = false</h4></section></summary><div class='docblock'>Whether the color has an alpha component are integer types (e.g., <code>u8</code>, <code>u16</code>).</div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.COLOR_IS_LINEAR\" class=\"associatedconstant trait-impl\"><a class=\"src rightside\" href=\"src/devela/media/color/luminance.rs.html#194\">Source</a><a href=\"#associatedconstant.COLOR_IS_LINEAR\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a href=\"devela/all/trait.Color.html#associatedconstant.COLOR_IS_LINEAR\" class=\"constant\">COLOR_IS_LINEAR</a>: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a> = true</h4></section></summary><div class='docblock'>Whether the color space is linear (as opposed to non-linear, e.g., sRGB). <a href=\"devela/all/trait.Color.html#associatedconstant.COLOR_IS_LINEAR\">Read more</a></div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.COLOR_IS_INT\" class=\"associatedconstant trait-impl\"><a class=\"src rightside\" href=\"src/devela/media/color/luminance.rs.html#194\">Source</a><a href=\"#associatedconstant.COLOR_IS_INT\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a href=\"devela/all/trait.Color.html#associatedconstant.COLOR_IS_INT\" class=\"constant\">COLOR_IS_INT</a>: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a> = false</h4></section></summary><div class='docblock'>Whether the color components are integer types (e.g., <code>u8</code>, <code>u16</code>). <a href=\"devela/all/trait.Color.html#associatedconstant.COLOR_IS_INT\">Read more</a></div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.COLOR_IS_PREMUL\" class=\"associatedconstant trait-impl\"><a class=\"src rightside\" href=\"src/devela/media/color/luminance.rs.html#194\">Source</a><a href=\"#associatedconstant.COLOR_IS_PREMUL\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a href=\"devela/all/trait.Color.html#associatedconstant.COLOR_IS_PREMUL\" class=\"constant\">COLOR_IS_PREMUL</a>: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a> = false</h4></section></summary><div class='docblock'>Whether the color uses premultiplied alpha (vs. straight/unassociated alpha). <a href=\"devela/all/trait.Color.html#associatedconstant.COLOR_IS_PREMUL\">Read more</a></div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Component\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/devela/media/color/luminance.rs.html#194\">Source</a><a href=\"#associatedtype.Component\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"devela/all/trait.Color.html#associatedtype.Component\" class=\"associatedtype\">Component</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.f64.html\">f64</a></h4></section></summary><div class='docblock'>The type of a single color component (e.g., <code>u8</code>, <code>f32</code>).</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.color_components_write\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/media/color/luminance.rs.html#194\">Source</a><a href=\"#method.color_components_write\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Color.html#tymethod.color_components_write\" class=\"fn\">color_components_write</a>(&amp;self, b: &amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.f64.html\">f64</a>]) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"devela/all/struct.NotEnoughSpace.html\" title=\"struct devela::all::NotEnoughSpace\">NotEnoughSpace</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;(), NotEnoughSpace&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Writes the color components to a pre-allocated <code>buffer</code>. <a href=\"devela/all/trait.Color.html#tymethod.color_components_write\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.color_bits\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/media/color/color.rs.html#77\">Source</a><a href=\"#method.color_bits\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Color.html#method.color_bits\" class=\"fn\">color_bits</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a></h4></section></summary><div class='docblock'>Returns the bit depth of each color component (e.g., 8 for <code>u8</code>, 32 for <code>f32</code>).</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.color_count\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/media/color/color.rs.html#81\">Source</a><a href=\"#method.color_count\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Color.html#method.color_count\" class=\"fn\">color_count</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a></h4></section></summary><div class='docblock'>Returns the number of color components (channels).</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.color_has_alpha\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/media/color/color.rs.html#85\">Source</a><a href=\"#method.color_has_alpha\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Color.html#method.color_has_alpha\" class=\"fn\">color_has_alpha</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Returns <code>true</code> if the color has an alpha component.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.color_is_int\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/media/color/color.rs.html#89\">Source</a><a href=\"#method.color_is_int\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Color.html#method.color_is_int\" class=\"fn\">color_is_int</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Returns <code>true</code> if the color uses integer components (e.g., <code>u8</code>, <code>u16</code>).</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.color_is_linear\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/media/color/color.rs.html#93\">Source</a><a href=\"#method.color_is_linear\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Color.html#method.color_is_linear\" class=\"fn\">color_is_linear</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Returns <code>true</code> if the color is in a linear space (not gamma-encoded like sRGB).</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.color_is_premul\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/media/color/color.rs.html#97\">Source</a><a href=\"#method.color_is_premul\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Color.html#method.color_is_premul\" class=\"fn\">color_is_premul</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Returns <code>true</code> if the color uses premultiplied alpha.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.color_components_vec\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/media/color/color.rs.html#102-106\">Source</a><a href=\"#method.color_components_vec\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Color.html#method.color_components_vec\" class=\"fn\">color_components_vec</a>(&amp;self) -&gt; <a class=\"struct\" href=\"devela/all/struct.Vec.html\" title=\"struct devela::all::Vec\">Vec</a>&lt;Self::<a class=\"associatedtype\" href=\"devela/all/trait.Color.html#associatedtype.Component\" title=\"type devela::all::Color::Component\">Component</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Vec&lt;Self::Component&gt;\">ⓘ</a><div class=\"where\">where\n    Self::<a class=\"associatedtype\" href=\"devela/all/trait.Color.html#associatedtype.Component\" title=\"type devela::all::Color::Component\">Component</a>: <a class=\"trait\" href=\"devela/code/trait.Default.html\" title=\"trait devela::code::Default\">Default</a> + <a class=\"trait\" href=\"devela/code/trait.Clone.html\" title=\"trait devela::code::Clone\">Clone</a>,</div></h4></section></summary><span class=\"item-info\"><div class=\"stab portability\">Available on <strong>crate feature <code>alloc</code></strong> only.</div></span><div class='docblock'>Returns a vector containing the color components.</div></details></div></details>","Color","devela::media::color::luminance::LinearLightness"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Color-for-Lum%3Cu16%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/devela/media/color/luminance.rs.html#194\">Source</a><a href=\"#impl-Color-for-Lum%3Cu16%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"devela/all/trait.Color.html\" title=\"trait devela::all::Color\">Color</a> for <a class=\"struct\" href=\"devela/all/struct.Lum.html\" title=\"struct devela::all::Lum\">Lum</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u16.html\">u16</a>, true, false&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.color_red\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/media/color/luminance.rs.html#194\">Source</a><a href=\"#method.color_red\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Color.html#tymethod.color_red\" class=\"fn\">color_red</a>(&amp;self) -&gt; Self::<a class=\"associatedtype\" href=\"devela/all/trait.Color.html#associatedtype.Component\" title=\"type devela::all::Color::Component\">Component</a></h4></section></summary><div class=\"docblock\"><p>Since the color has no red, the luminosity is returned.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.color_green\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/media/color/luminance.rs.html#194\">Source</a><a href=\"#method.color_green\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Color.html#tymethod.color_green\" class=\"fn\">color_green</a>(&amp;self) -&gt; Self::<a class=\"associatedtype\" href=\"devela/all/trait.Color.html#associatedtype.Component\" title=\"type devela::all::Color::Component\">Component</a></h4></section></summary><div class=\"docblock\"><p>Since the color has no red, the luminosity is returned.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.color_blue\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/media/color/luminance.rs.html#194\">Source</a><a href=\"#method.color_blue\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Color.html#tymethod.color_blue\" class=\"fn\">color_blue</a>(&amp;self) -&gt; Self::<a class=\"associatedtype\" href=\"devela/all/trait.Color.html#associatedtype.Component\" title=\"type devela::all::Color::Component\">Component</a></h4></section></summary><div class=\"docblock\"><p>Since the color has no red, the luminosity is returned.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.color_alpha\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/media/color/luminance.rs.html#194\">Source</a><a href=\"#method.color_alpha\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Color.html#tymethod.color_alpha\" class=\"fn\">color_alpha</a>(&amp;self) -&gt; Self::<a class=\"associatedtype\" href=\"devela/all/trait.Color.html#associatedtype.Component\" title=\"type devela::all::Color::Component\">Component</a></h4></section></summary><div class=\"docblock\"><p>Since the color has no alpha, the maximum normalized value is returned.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.COLOR_BITS\" class=\"associatedconstant trait-impl\"><a class=\"src rightside\" href=\"src/devela/media/color/luminance.rs.html#194\">Source</a><a href=\"#associatedconstant.COLOR_BITS\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a href=\"devela/all/trait.Color.html#associatedconstant.COLOR_BITS\" class=\"constant\">COLOR_BITS</a>: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a> = 16usize</h4></section></summary><div class='docblock'>The bit depth of each color component (e.g., <code>8</code> for <code>u8</code>, <code>32</code> for <code>f32</code>).</div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.COLOR_COUNT\" class=\"associatedconstant trait-impl\"><a class=\"src rightside\" href=\"src/devela/media/color/luminance.rs.html#194\">Source</a><a href=\"#associatedconstant.COLOR_COUNT\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a href=\"devela/all/trait.Color.html#associatedconstant.COLOR_COUNT\" class=\"constant\">COLOR_COUNT</a>: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a> = 1usize</h4></section></summary><div class='docblock'>The number of color components (channels) in the representation. <a href=\"devela/all/trait.Color.html#associatedconstant.COLOR_COUNT\">Read more</a></div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.COLOR_HAS_ALPHA\" class=\"associatedconstant trait-impl\"><a class=\"src rightside\" href=\"src/devela/media/color/luminance.rs.html#194\">Source</a><a href=\"#associatedconstant.COLOR_HAS_ALPHA\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a href=\"devela/all/trait.Color.html#associatedconstant.COLOR_HAS_ALPHA\" class=\"constant\">COLOR_HAS_ALPHA</a>: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a> = false</h4></section></summary><div class='docblock'>Whether the color has an alpha component are integer types (e.g., <code>u8</code>, <code>u16</code>).</div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.COLOR_IS_LINEAR\" class=\"associatedconstant trait-impl\"><a class=\"src rightside\" href=\"src/devela/media/color/luminance.rs.html#194\">Source</a><a href=\"#associatedconstant.COLOR_IS_LINEAR\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a href=\"devela/all/trait.Color.html#associatedconstant.COLOR_IS_LINEAR\" class=\"constant\">COLOR_IS_LINEAR</a>: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a> = true</h4></section></summary><div class='docblock'>Whether the color space is linear (as opposed to non-linear, e.g., sRGB). <a href=\"devela/all/trait.Color.html#associatedconstant.COLOR_IS_LINEAR\">Read more</a></div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.COLOR_IS_INT\" class=\"associatedconstant trait-impl\"><a class=\"src rightside\" href=\"src/devela/media/color/luminance.rs.html#194\">Source</a><a href=\"#associatedconstant.COLOR_IS_INT\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a href=\"devela/all/trait.Color.html#associatedconstant.COLOR_IS_INT\" class=\"constant\">COLOR_IS_INT</a>: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a> = true</h4></section></summary><div class='docblock'>Whether the color components are integer types (e.g., <code>u8</code>, <code>u16</code>). <a href=\"devela/all/trait.Color.html#associatedconstant.COLOR_IS_INT\">Read more</a></div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.COLOR_IS_PREMUL\" class=\"associatedconstant trait-impl\"><a class=\"src rightside\" href=\"src/devela/media/color/luminance.rs.html#194\">Source</a><a href=\"#associatedconstant.COLOR_IS_PREMUL\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a href=\"devela/all/trait.Color.html#associatedconstant.COLOR_IS_PREMUL\" class=\"constant\">COLOR_IS_PREMUL</a>: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a> = false</h4></section></summary><div class='docblock'>Whether the color uses premultiplied alpha (vs. straight/unassociated alpha). <a href=\"devela/all/trait.Color.html#associatedconstant.COLOR_IS_PREMUL\">Read more</a></div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Component\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/devela/media/color/luminance.rs.html#194\">Source</a><a href=\"#associatedtype.Component\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"devela/all/trait.Color.html#associatedtype.Component\" class=\"associatedtype\">Component</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>The type of a single color component (e.g., <code>u8</code>, <code>f32</code>).</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.color_components_write\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/media/color/luminance.rs.html#194\">Source</a><a href=\"#method.color_components_write\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Color.html#tymethod.color_components_write\" class=\"fn\">color_components_write</a>(&amp;self, b: &amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u16.html\">u16</a>]) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"devela/all/struct.NotEnoughSpace.html\" title=\"struct devela::all::NotEnoughSpace\">NotEnoughSpace</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;(), NotEnoughSpace&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Writes the color components to a pre-allocated <code>buffer</code>. <a href=\"devela/all/trait.Color.html#tymethod.color_components_write\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.color_bits\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/media/color/color.rs.html#77\">Source</a><a href=\"#method.color_bits\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Color.html#method.color_bits\" class=\"fn\">color_bits</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a></h4></section></summary><div class='docblock'>Returns the bit depth of each color component (e.g., 8 for <code>u8</code>, 32 for <code>f32</code>).</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.color_count\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/media/color/color.rs.html#81\">Source</a><a href=\"#method.color_count\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Color.html#method.color_count\" class=\"fn\">color_count</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a></h4></section></summary><div class='docblock'>Returns the number of color components (channels).</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.color_has_alpha\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/media/color/color.rs.html#85\">Source</a><a href=\"#method.color_has_alpha\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Color.html#method.color_has_alpha\" class=\"fn\">color_has_alpha</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Returns <code>true</code> if the color has an alpha component.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.color_is_int\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/media/color/color.rs.html#89\">Source</a><a href=\"#method.color_is_int\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Color.html#method.color_is_int\" class=\"fn\">color_is_int</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Returns <code>true</code> if the color uses integer components (e.g., <code>u8</code>, <code>u16</code>).</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.color_is_linear\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/media/color/color.rs.html#93\">Source</a><a href=\"#method.color_is_linear\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Color.html#method.color_is_linear\" class=\"fn\">color_is_linear</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Returns <code>true</code> if the color is in a linear space (not gamma-encoded like sRGB).</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.color_is_premul\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/media/color/color.rs.html#97\">Source</a><a href=\"#method.color_is_premul\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Color.html#method.color_is_premul\" class=\"fn\">color_is_premul</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Returns <code>true</code> if the color uses premultiplied alpha.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.color_components_vec\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/media/color/color.rs.html#102-106\">Source</a><a href=\"#method.color_components_vec\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Color.html#method.color_components_vec\" class=\"fn\">color_components_vec</a>(&amp;self) -&gt; <a class=\"struct\" href=\"devela/all/struct.Vec.html\" title=\"struct devela::all::Vec\">Vec</a>&lt;Self::<a class=\"associatedtype\" href=\"devela/all/trait.Color.html#associatedtype.Component\" title=\"type devela::all::Color::Component\">Component</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Vec&lt;Self::Component&gt;\">ⓘ</a><div class=\"where\">where\n    Self::<a class=\"associatedtype\" href=\"devela/all/trait.Color.html#associatedtype.Component\" title=\"type devela::all::Color::Component\">Component</a>: <a class=\"trait\" href=\"devela/code/trait.Default.html\" title=\"trait devela::code::Default\">Default</a> + <a class=\"trait\" href=\"devela/code/trait.Clone.html\" title=\"trait devela::code::Clone\">Clone</a>,</div></h4></section></summary><span class=\"item-info\"><div class=\"stab portability\">Available on <strong>crate feature <code>alloc</code></strong> only.</div></span><div class='docblock'>Returns a vector containing the color components.</div></details></div></details>","Color","devela::media::color::luminance::Luminance"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Color-for-Lum%3Cu16,+false%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/devela/media/color/luminance.rs.html#194\">Source</a><a href=\"#impl-Color-for-Lum%3Cu16,+false%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"devela/all/trait.Color.html\" title=\"trait devela::all::Color\">Color</a> for <a class=\"struct\" href=\"devela/all/struct.Lum.html\" title=\"struct devela::all::Lum\">Lum</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u16.html\">u16</a>, false, false&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.color_red\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/media/color/luminance.rs.html#194\">Source</a><a href=\"#method.color_red\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Color.html#tymethod.color_red\" class=\"fn\">color_red</a>(&amp;self) -&gt; Self::<a class=\"associatedtype\" href=\"devela/all/trait.Color.html#associatedtype.Component\" title=\"type devela::all::Color::Component\">Component</a></h4></section></summary><div class=\"docblock\"><p>Since the color has no red, the luminosity is returned.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.color_green\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/media/color/luminance.rs.html#194\">Source</a><a href=\"#method.color_green\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Color.html#tymethod.color_green\" class=\"fn\">color_green</a>(&amp;self) -&gt; Self::<a class=\"associatedtype\" href=\"devela/all/trait.Color.html#associatedtype.Component\" title=\"type devela::all::Color::Component\">Component</a></h4></section></summary><div class=\"docblock\"><p>Since the color has no red, the luminosity is returned.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.color_blue\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/media/color/luminance.rs.html#194\">Source</a><a href=\"#method.color_blue\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Color.html#tymethod.color_blue\" class=\"fn\">color_blue</a>(&amp;self) -&gt; Self::<a class=\"associatedtype\" href=\"devela/all/trait.Color.html#associatedtype.Component\" title=\"type devela::all::Color::Component\">Component</a></h4></section></summary><div class=\"docblock\"><p>Since the color has no red, the luminosity is returned.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.color_alpha\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/media/color/luminance.rs.html#194\">Source</a><a href=\"#method.color_alpha\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Color.html#tymethod.color_alpha\" class=\"fn\">color_alpha</a>(&amp;self) -&gt; Self::<a class=\"associatedtype\" href=\"devela/all/trait.Color.html#associatedtype.Component\" title=\"type devela::all::Color::Component\">Component</a></h4></section></summary><div class=\"docblock\"><p>Since the color has no alpha, the maximum normalized value is returned.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.COLOR_BITS\" class=\"associatedconstant trait-impl\"><a class=\"src rightside\" href=\"src/devela/media/color/luminance.rs.html#194\">Source</a><a href=\"#associatedconstant.COLOR_BITS\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a href=\"devela/all/trait.Color.html#associatedconstant.COLOR_BITS\" class=\"constant\">COLOR_BITS</a>: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a> = 16usize</h4></section></summary><div class='docblock'>The bit depth of each color component (e.g., <code>8</code> for <code>u8</code>, <code>32</code> for <code>f32</code>).</div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.COLOR_COUNT\" class=\"associatedconstant trait-impl\"><a class=\"src rightside\" href=\"src/devela/media/color/luminance.rs.html#194\">Source</a><a href=\"#associatedconstant.COLOR_COUNT\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a href=\"devela/all/trait.Color.html#associatedconstant.COLOR_COUNT\" class=\"constant\">COLOR_COUNT</a>: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a> = 1usize</h4></section></summary><div class='docblock'>The number of color components (channels) in the representation. <a href=\"devela/all/trait.Color.html#associatedconstant.COLOR_COUNT\">Read more</a></div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.COLOR_HAS_ALPHA\" class=\"associatedconstant trait-impl\"><a class=\"src rightside\" href=\"src/devela/media/color/luminance.rs.html#194\">Source</a><a href=\"#associatedconstant.COLOR_HAS_ALPHA\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a href=\"devela/all/trait.Color.html#associatedconstant.COLOR_HAS_ALPHA\" class=\"constant\">COLOR_HAS_ALPHA</a>: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a> = false</h4></section></summary><div class='docblock'>Whether the color has an alpha component are integer types (e.g., <code>u8</code>, <code>u16</code>).</div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.COLOR_IS_LINEAR\" class=\"associatedconstant trait-impl\"><a class=\"src rightside\" href=\"src/devela/media/color/luminance.rs.html#194\">Source</a><a href=\"#associatedconstant.COLOR_IS_LINEAR\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a href=\"devela/all/trait.Color.html#associatedconstant.COLOR_IS_LINEAR\" class=\"constant\">COLOR_IS_LINEAR</a>: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a> = false</h4></section></summary><div class='docblock'>Whether the color space is linear (as opposed to non-linear, e.g., sRGB). <a href=\"devela/all/trait.Color.html#associatedconstant.COLOR_IS_LINEAR\">Read more</a></div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.COLOR_IS_INT\" class=\"associatedconstant trait-impl\"><a class=\"src rightside\" href=\"src/devela/media/color/luminance.rs.html#194\">Source</a><a href=\"#associatedconstant.COLOR_IS_INT\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a href=\"devela/all/trait.Color.html#associatedconstant.COLOR_IS_INT\" class=\"constant\">COLOR_IS_INT</a>: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a> = true</h4></section></summary><div class='docblock'>Whether the color components are integer types (e.g., <code>u8</code>, <code>u16</code>). <a href=\"devela/all/trait.Color.html#associatedconstant.COLOR_IS_INT\">Read more</a></div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.COLOR_IS_PREMUL\" class=\"associatedconstant trait-impl\"><a class=\"src rightside\" href=\"src/devela/media/color/luminance.rs.html#194\">Source</a><a href=\"#associatedconstant.COLOR_IS_PREMUL\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a href=\"devela/all/trait.Color.html#associatedconstant.COLOR_IS_PREMUL\" class=\"constant\">COLOR_IS_PREMUL</a>: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a> = false</h4></section></summary><div class='docblock'>Whether the color uses premultiplied alpha (vs. straight/unassociated alpha). <a href=\"devela/all/trait.Color.html#associatedconstant.COLOR_IS_PREMUL\">Read more</a></div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Component\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/devela/media/color/luminance.rs.html#194\">Source</a><a href=\"#associatedtype.Component\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"devela/all/trait.Color.html#associatedtype.Component\" class=\"associatedtype\">Component</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>The type of a single color component (e.g., <code>u8</code>, <code>f32</code>).</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.color_components_write\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/media/color/luminance.rs.html#194\">Source</a><a href=\"#method.color_components_write\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Color.html#tymethod.color_components_write\" class=\"fn\">color_components_write</a>(&amp;self, b: &amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u16.html\">u16</a>]) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"devela/all/struct.NotEnoughSpace.html\" title=\"struct devela::all::NotEnoughSpace\">NotEnoughSpace</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;(), NotEnoughSpace&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Writes the color components to a pre-allocated <code>buffer</code>. <a href=\"devela/all/trait.Color.html#tymethod.color_components_write\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.color_bits\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/media/color/color.rs.html#77\">Source</a><a href=\"#method.color_bits\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Color.html#method.color_bits\" class=\"fn\">color_bits</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a></h4></section></summary><div class='docblock'>Returns the bit depth of each color component (e.g., 8 for <code>u8</code>, 32 for <code>f32</code>).</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.color_count\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/media/color/color.rs.html#81\">Source</a><a href=\"#method.color_count\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Color.html#method.color_count\" class=\"fn\">color_count</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a></h4></section></summary><div class='docblock'>Returns the number of color components (channels).</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.color_has_alpha\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/media/color/color.rs.html#85\">Source</a><a href=\"#method.color_has_alpha\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Color.html#method.color_has_alpha\" class=\"fn\">color_has_alpha</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Returns <code>true</code> if the color has an alpha component.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.color_is_int\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/media/color/color.rs.html#89\">Source</a><a href=\"#method.color_is_int\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Color.html#method.color_is_int\" class=\"fn\">color_is_int</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Returns <code>true</code> if the color uses integer components (e.g., <code>u8</code>, <code>u16</code>).</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.color_is_linear\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/media/color/color.rs.html#93\">Source</a><a href=\"#method.color_is_linear\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Color.html#method.color_is_linear\" class=\"fn\">color_is_linear</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Returns <code>true</code> if the color is in a linear space (not gamma-encoded like sRGB).</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.color_is_premul\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/media/color/color.rs.html#97\">Source</a><a href=\"#method.color_is_premul\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Color.html#method.color_is_premul\" class=\"fn\">color_is_premul</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Returns <code>true</code> if the color uses premultiplied alpha.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.color_components_vec\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/media/color/color.rs.html#102-106\">Source</a><a href=\"#method.color_components_vec\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Color.html#method.color_components_vec\" class=\"fn\">color_components_vec</a>(&amp;self) -&gt; <a class=\"struct\" href=\"devela/all/struct.Vec.html\" title=\"struct devela::all::Vec\">Vec</a>&lt;Self::<a class=\"associatedtype\" href=\"devela/all/trait.Color.html#associatedtype.Component\" title=\"type devela::all::Color::Component\">Component</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Vec&lt;Self::Component&gt;\">ⓘ</a><div class=\"where\">where\n    Self::<a class=\"associatedtype\" href=\"devela/all/trait.Color.html#associatedtype.Component\" title=\"type devela::all::Color::Component\">Component</a>: <a class=\"trait\" href=\"devela/code/trait.Default.html\" title=\"trait devela::code::Default\">Default</a> + <a class=\"trait\" href=\"devela/code/trait.Clone.html\" title=\"trait devela::code::Clone\">Clone</a>,</div></h4></section></summary><span class=\"item-info\"><div class=\"stab portability\">Available on <strong>crate feature <code>alloc</code></strong> only.</div></span><div class='docblock'>Returns a vector containing the color components.</div></details></div></details>","Color","devela::media::color::luminance::Luma"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Color-for-Lum%3Cu16,+false,+true%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/devela/media/color/luminance.rs.html#194\">Source</a><a href=\"#impl-Color-for-Lum%3Cu16,+false,+true%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"devela/all/trait.Color.html\" title=\"trait devela::all::Color\">Color</a> for <a class=\"struct\" href=\"devela/all/struct.Lum.html\" title=\"struct devela::all::Lum\">Lum</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u16.html\">u16</a>, false, true&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.color_red\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/media/color/luminance.rs.html#194\">Source</a><a href=\"#method.color_red\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Color.html#tymethod.color_red\" class=\"fn\">color_red</a>(&amp;self) -&gt; Self::<a class=\"associatedtype\" href=\"devela/all/trait.Color.html#associatedtype.Component\" title=\"type devela::all::Color::Component\">Component</a></h4></section></summary><div class=\"docblock\"><p>Since the color has no red, the luminosity is returned.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.color_green\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/media/color/luminance.rs.html#194\">Source</a><a href=\"#method.color_green\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Color.html#tymethod.color_green\" class=\"fn\">color_green</a>(&amp;self) -&gt; Self::<a class=\"associatedtype\" href=\"devela/all/trait.Color.html#associatedtype.Component\" title=\"type devela::all::Color::Component\">Component</a></h4></section></summary><div class=\"docblock\"><p>Since the color has no red, the luminosity is returned.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.color_blue\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/media/color/luminance.rs.html#194\">Source</a><a href=\"#method.color_blue\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Color.html#tymethod.color_blue\" class=\"fn\">color_blue</a>(&amp;self) -&gt; Self::<a class=\"associatedtype\" href=\"devela/all/trait.Color.html#associatedtype.Component\" title=\"type devela::all::Color::Component\">Component</a></h4></section></summary><div class=\"docblock\"><p>Since the color has no red, the luminosity is returned.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.color_alpha\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/media/color/luminance.rs.html#194\">Source</a><a href=\"#method.color_alpha\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Color.html#tymethod.color_alpha\" class=\"fn\">color_alpha</a>(&amp;self) -&gt; Self::<a class=\"associatedtype\" href=\"devela/all/trait.Color.html#associatedtype.Component\" title=\"type devela::all::Color::Component\">Component</a></h4></section></summary><div class=\"docblock\"><p>Since the color has no alpha, the maximum normalized value is returned.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.COLOR_BITS\" class=\"associatedconstant trait-impl\"><a class=\"src rightside\" href=\"src/devela/media/color/luminance.rs.html#194\">Source</a><a href=\"#associatedconstant.COLOR_BITS\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a href=\"devela/all/trait.Color.html#associatedconstant.COLOR_BITS\" class=\"constant\">COLOR_BITS</a>: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a> = 16usize</h4></section></summary><div class='docblock'>The bit depth of each color component (e.g., <code>8</code> for <code>u8</code>, <code>32</code> for <code>f32</code>).</div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.COLOR_COUNT\" class=\"associatedconstant trait-impl\"><a class=\"src rightside\" href=\"src/devela/media/color/luminance.rs.html#194\">Source</a><a href=\"#associatedconstant.COLOR_COUNT\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a href=\"devela/all/trait.Color.html#associatedconstant.COLOR_COUNT\" class=\"constant\">COLOR_COUNT</a>: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a> = 1usize</h4></section></summary><div class='docblock'>The number of color components (channels) in the representation. <a href=\"devela/all/trait.Color.html#associatedconstant.COLOR_COUNT\">Read more</a></div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.COLOR_HAS_ALPHA\" class=\"associatedconstant trait-impl\"><a class=\"src rightside\" href=\"src/devela/media/color/luminance.rs.html#194\">Source</a><a href=\"#associatedconstant.COLOR_HAS_ALPHA\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a href=\"devela/all/trait.Color.html#associatedconstant.COLOR_HAS_ALPHA\" class=\"constant\">COLOR_HAS_ALPHA</a>: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a> = false</h4></section></summary><div class='docblock'>Whether the color has an alpha component are integer types (e.g., <code>u8</code>, <code>u16</code>).</div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.COLOR_IS_LINEAR\" class=\"associatedconstant trait-impl\"><a class=\"src rightside\" href=\"src/devela/media/color/luminance.rs.html#194\">Source</a><a href=\"#associatedconstant.COLOR_IS_LINEAR\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a href=\"devela/all/trait.Color.html#associatedconstant.COLOR_IS_LINEAR\" class=\"constant\">COLOR_IS_LINEAR</a>: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a> = false</h4></section></summary><div class='docblock'>Whether the color space is linear (as opposed to non-linear, e.g., sRGB). <a href=\"devela/all/trait.Color.html#associatedconstant.COLOR_IS_LINEAR\">Read more</a></div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.COLOR_IS_INT\" class=\"associatedconstant trait-impl\"><a class=\"src rightside\" href=\"src/devela/media/color/luminance.rs.html#194\">Source</a><a href=\"#associatedconstant.COLOR_IS_INT\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a href=\"devela/all/trait.Color.html#associatedconstant.COLOR_IS_INT\" class=\"constant\">COLOR_IS_INT</a>: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a> = true</h4></section></summary><div class='docblock'>Whether the color components are integer types (e.g., <code>u8</code>, <code>u16</code>). <a href=\"devela/all/trait.Color.html#associatedconstant.COLOR_IS_INT\">Read more</a></div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.COLOR_IS_PREMUL\" class=\"associatedconstant trait-impl\"><a class=\"src rightside\" href=\"src/devela/media/color/luminance.rs.html#194\">Source</a><a href=\"#associatedconstant.COLOR_IS_PREMUL\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a href=\"devela/all/trait.Color.html#associatedconstant.COLOR_IS_PREMUL\" class=\"constant\">COLOR_IS_PREMUL</a>: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a> = false</h4></section></summary><div class='docblock'>Whether the color uses premultiplied alpha (vs. straight/unassociated alpha). <a href=\"devela/all/trait.Color.html#associatedconstant.COLOR_IS_PREMUL\">Read more</a></div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Component\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/devela/media/color/luminance.rs.html#194\">Source</a><a href=\"#associatedtype.Component\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"devela/all/trait.Color.html#associatedtype.Component\" class=\"associatedtype\">Component</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>The type of a single color component (e.g., <code>u8</code>, <code>f32</code>).</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.color_components_write\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/media/color/luminance.rs.html#194\">Source</a><a href=\"#method.color_components_write\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Color.html#tymethod.color_components_write\" class=\"fn\">color_components_write</a>(&amp;self, b: &amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u16.html\">u16</a>]) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"devela/all/struct.NotEnoughSpace.html\" title=\"struct devela::all::NotEnoughSpace\">NotEnoughSpace</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;(), NotEnoughSpace&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Writes the color components to a pre-allocated <code>buffer</code>. <a href=\"devela/all/trait.Color.html#tymethod.color_components_write\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.color_bits\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/media/color/color.rs.html#77\">Source</a><a href=\"#method.color_bits\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Color.html#method.color_bits\" class=\"fn\">color_bits</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a></h4></section></summary><div class='docblock'>Returns the bit depth of each color component (e.g., 8 for <code>u8</code>, 32 for <code>f32</code>).</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.color_count\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/media/color/color.rs.html#81\">Source</a><a href=\"#method.color_count\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Color.html#method.color_count\" class=\"fn\">color_count</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a></h4></section></summary><div class='docblock'>Returns the number of color components (channels).</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.color_has_alpha\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/media/color/color.rs.html#85\">Source</a><a href=\"#method.color_has_alpha\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Color.html#method.color_has_alpha\" class=\"fn\">color_has_alpha</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Returns <code>true</code> if the color has an alpha component.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.color_is_int\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/media/color/color.rs.html#89\">Source</a><a href=\"#method.color_is_int\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Color.html#method.color_is_int\" class=\"fn\">color_is_int</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Returns <code>true</code> if the color uses integer components (e.g., <code>u8</code>, <code>u16</code>).</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.color_is_linear\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/media/color/color.rs.html#93\">Source</a><a href=\"#method.color_is_linear\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Color.html#method.color_is_linear\" class=\"fn\">color_is_linear</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Returns <code>true</code> if the color is in a linear space (not gamma-encoded like sRGB).</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.color_is_premul\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/media/color/color.rs.html#97\">Source</a><a href=\"#method.color_is_premul\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Color.html#method.color_is_premul\" class=\"fn\">color_is_premul</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Returns <code>true</code> if the color uses premultiplied alpha.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.color_components_vec\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/media/color/color.rs.html#102-106\">Source</a><a href=\"#method.color_components_vec\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Color.html#method.color_components_vec\" class=\"fn\">color_components_vec</a>(&amp;self) -&gt; <a class=\"struct\" href=\"devela/all/struct.Vec.html\" title=\"struct devela::all::Vec\">Vec</a>&lt;Self::<a class=\"associatedtype\" href=\"devela/all/trait.Color.html#associatedtype.Component\" title=\"type devela::all::Color::Component\">Component</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Vec&lt;Self::Component&gt;\">ⓘ</a><div class=\"where\">where\n    Self::<a class=\"associatedtype\" href=\"devela/all/trait.Color.html#associatedtype.Component\" title=\"type devela::all::Color::Component\">Component</a>: <a class=\"trait\" href=\"devela/code/trait.Default.html\" title=\"trait devela::code::Default\">Default</a> + <a class=\"trait\" href=\"devela/code/trait.Clone.html\" title=\"trait devela::code::Clone\">Clone</a>,</div></h4></section></summary><span class=\"item-info\"><div class=\"stab portability\">Available on <strong>crate feature <code>alloc</code></strong> only.</div></span><div class='docblock'>Returns a vector containing the color components.</div></details></div></details>","Color","devela::media::color::luminance::Lightness"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Color-for-Lum%3Cu16,+true,+true%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/devela/media/color/luminance.rs.html#194\">Source</a><a href=\"#impl-Color-for-Lum%3Cu16,+true,+true%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"devela/all/trait.Color.html\" title=\"trait devela::all::Color\">Color</a> for <a class=\"struct\" href=\"devela/all/struct.Lum.html\" title=\"struct devela::all::Lum\">Lum</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u16.html\">u16</a>, true, true&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.color_red\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/media/color/luminance.rs.html#194\">Source</a><a href=\"#method.color_red\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Color.html#tymethod.color_red\" class=\"fn\">color_red</a>(&amp;self) -&gt; Self::<a class=\"associatedtype\" href=\"devela/all/trait.Color.html#associatedtype.Component\" title=\"type devela::all::Color::Component\">Component</a></h4></section></summary><div class=\"docblock\"><p>Since the color has no red, the luminosity is returned.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.color_green\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/media/color/luminance.rs.html#194\">Source</a><a href=\"#method.color_green\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Color.html#tymethod.color_green\" class=\"fn\">color_green</a>(&amp;self) -&gt; Self::<a class=\"associatedtype\" href=\"devela/all/trait.Color.html#associatedtype.Component\" title=\"type devela::all::Color::Component\">Component</a></h4></section></summary><div class=\"docblock\"><p>Since the color has no red, the luminosity is returned.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.color_blue\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/media/color/luminance.rs.html#194\">Source</a><a href=\"#method.color_blue\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Color.html#tymethod.color_blue\" class=\"fn\">color_blue</a>(&amp;self) -&gt; Self::<a class=\"associatedtype\" href=\"devela/all/trait.Color.html#associatedtype.Component\" title=\"type devela::all::Color::Component\">Component</a></h4></section></summary><div class=\"docblock\"><p>Since the color has no red, the luminosity is returned.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.color_alpha\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/media/color/luminance.rs.html#194\">Source</a><a href=\"#method.color_alpha\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Color.html#tymethod.color_alpha\" class=\"fn\">color_alpha</a>(&amp;self) -&gt; Self::<a class=\"associatedtype\" href=\"devela/all/trait.Color.html#associatedtype.Component\" title=\"type devela::all::Color::Component\">Component</a></h4></section></summary><div class=\"docblock\"><p>Since the color has no alpha, the maximum normalized value is returned.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.COLOR_BITS\" class=\"associatedconstant trait-impl\"><a class=\"src rightside\" href=\"src/devela/media/color/luminance.rs.html#194\">Source</a><a href=\"#associatedconstant.COLOR_BITS\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a href=\"devela/all/trait.Color.html#associatedconstant.COLOR_BITS\" class=\"constant\">COLOR_BITS</a>: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a> = 16usize</h4></section></summary><div class='docblock'>The bit depth of each color component (e.g., <code>8</code> for <code>u8</code>, <code>32</code> for <code>f32</code>).</div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.COLOR_COUNT\" class=\"associatedconstant trait-impl\"><a class=\"src rightside\" href=\"src/devela/media/color/luminance.rs.html#194\">Source</a><a href=\"#associatedconstant.COLOR_COUNT\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a href=\"devela/all/trait.Color.html#associatedconstant.COLOR_COUNT\" class=\"constant\">COLOR_COUNT</a>: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a> = 1usize</h4></section></summary><div class='docblock'>The number of color components (channels) in the representation. <a href=\"devela/all/trait.Color.html#associatedconstant.COLOR_COUNT\">Read more</a></div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.COLOR_HAS_ALPHA\" class=\"associatedconstant trait-impl\"><a class=\"src rightside\" href=\"src/devela/media/color/luminance.rs.html#194\">Source</a><a href=\"#associatedconstant.COLOR_HAS_ALPHA\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a href=\"devela/all/trait.Color.html#associatedconstant.COLOR_HAS_ALPHA\" class=\"constant\">COLOR_HAS_ALPHA</a>: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a> = false</h4></section></summary><div class='docblock'>Whether the color has an alpha component are integer types (e.g., <code>u8</code>, <code>u16</code>).</div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.COLOR_IS_LINEAR\" class=\"associatedconstant trait-impl\"><a class=\"src rightside\" href=\"src/devela/media/color/luminance.rs.html#194\">Source</a><a href=\"#associatedconstant.COLOR_IS_LINEAR\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a href=\"devela/all/trait.Color.html#associatedconstant.COLOR_IS_LINEAR\" class=\"constant\">COLOR_IS_LINEAR</a>: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a> = true</h4></section></summary><div class='docblock'>Whether the color space is linear (as opposed to non-linear, e.g., sRGB). <a href=\"devela/all/trait.Color.html#associatedconstant.COLOR_IS_LINEAR\">Read more</a></div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.COLOR_IS_INT\" class=\"associatedconstant trait-impl\"><a class=\"src rightside\" href=\"src/devela/media/color/luminance.rs.html#194\">Source</a><a href=\"#associatedconstant.COLOR_IS_INT\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a href=\"devela/all/trait.Color.html#associatedconstant.COLOR_IS_INT\" class=\"constant\">COLOR_IS_INT</a>: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a> = true</h4></section></summary><div class='docblock'>Whether the color components are integer types (e.g., <code>u8</code>, <code>u16</code>). <a href=\"devela/all/trait.Color.html#associatedconstant.COLOR_IS_INT\">Read more</a></div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.COLOR_IS_PREMUL\" class=\"associatedconstant trait-impl\"><a class=\"src rightside\" href=\"src/devela/media/color/luminance.rs.html#194\">Source</a><a href=\"#associatedconstant.COLOR_IS_PREMUL\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a href=\"devela/all/trait.Color.html#associatedconstant.COLOR_IS_PREMUL\" class=\"constant\">COLOR_IS_PREMUL</a>: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a> = false</h4></section></summary><div class='docblock'>Whether the color uses premultiplied alpha (vs. straight/unassociated alpha). <a href=\"devela/all/trait.Color.html#associatedconstant.COLOR_IS_PREMUL\">Read more</a></div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Component\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/devela/media/color/luminance.rs.html#194\">Source</a><a href=\"#associatedtype.Component\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"devela/all/trait.Color.html#associatedtype.Component\" class=\"associatedtype\">Component</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>The type of a single color component (e.g., <code>u8</code>, <code>f32</code>).</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.color_components_write\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/media/color/luminance.rs.html#194\">Source</a><a href=\"#method.color_components_write\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Color.html#tymethod.color_components_write\" class=\"fn\">color_components_write</a>(&amp;self, b: &amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u16.html\">u16</a>]) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"devela/all/struct.NotEnoughSpace.html\" title=\"struct devela::all::NotEnoughSpace\">NotEnoughSpace</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;(), NotEnoughSpace&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Writes the color components to a pre-allocated <code>buffer</code>. <a href=\"devela/all/trait.Color.html#tymethod.color_components_write\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.color_bits\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/media/color/color.rs.html#77\">Source</a><a href=\"#method.color_bits\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Color.html#method.color_bits\" class=\"fn\">color_bits</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a></h4></section></summary><div class='docblock'>Returns the bit depth of each color component (e.g., 8 for <code>u8</code>, 32 for <code>f32</code>).</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.color_count\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/media/color/color.rs.html#81\">Source</a><a href=\"#method.color_count\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Color.html#method.color_count\" class=\"fn\">color_count</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a></h4></section></summary><div class='docblock'>Returns the number of color components (channels).</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.color_has_alpha\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/media/color/color.rs.html#85\">Source</a><a href=\"#method.color_has_alpha\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Color.html#method.color_has_alpha\" class=\"fn\">color_has_alpha</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Returns <code>true</code> if the color has an alpha component.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.color_is_int\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/media/color/color.rs.html#89\">Source</a><a href=\"#method.color_is_int\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Color.html#method.color_is_int\" class=\"fn\">color_is_int</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Returns <code>true</code> if the color uses integer components (e.g., <code>u8</code>, <code>u16</code>).</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.color_is_linear\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/media/color/color.rs.html#93\">Source</a><a href=\"#method.color_is_linear\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Color.html#method.color_is_linear\" class=\"fn\">color_is_linear</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Returns <code>true</code> if the color is in a linear space (not gamma-encoded like sRGB).</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.color_is_premul\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/media/color/color.rs.html#97\">Source</a><a href=\"#method.color_is_premul\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Color.html#method.color_is_premul\" class=\"fn\">color_is_premul</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Returns <code>true</code> if the color uses premultiplied alpha.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.color_components_vec\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/media/color/color.rs.html#102-106\">Source</a><a href=\"#method.color_components_vec\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Color.html#method.color_components_vec\" class=\"fn\">color_components_vec</a>(&amp;self) -&gt; <a class=\"struct\" href=\"devela/all/struct.Vec.html\" title=\"struct devela::all::Vec\">Vec</a>&lt;Self::<a class=\"associatedtype\" href=\"devela/all/trait.Color.html#associatedtype.Component\" title=\"type devela::all::Color::Component\">Component</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Vec&lt;Self::Component&gt;\">ⓘ</a><div class=\"where\">where\n    Self::<a class=\"associatedtype\" href=\"devela/all/trait.Color.html#associatedtype.Component\" title=\"type devela::all::Color::Component\">Component</a>: <a class=\"trait\" href=\"devela/code/trait.Default.html\" title=\"trait devela::code::Default\">Default</a> + <a class=\"trait\" href=\"devela/code/trait.Clone.html\" title=\"trait devela::code::Clone\">Clone</a>,</div></h4></section></summary><span class=\"item-info\"><div class=\"stab portability\">Available on <strong>crate feature <code>alloc</code></strong> only.</div></span><div class='docblock'>Returns a vector containing the color components.</div></details></div></details>","Color","devela::media::color::luminance::LinearLightness"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Color-for-Lum%3Cu8%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/devela/media/color/luminance.rs.html#194\">Source</a><a href=\"#impl-Color-for-Lum%3Cu8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"devela/all/trait.Color.html\" title=\"trait devela::all::Color\">Color</a> for <a class=\"struct\" href=\"devela/all/struct.Lum.html\" title=\"struct devela::all::Lum\">Lum</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>, true, false&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.color_red\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/media/color/luminance.rs.html#194\">Source</a><a href=\"#method.color_red\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Color.html#tymethod.color_red\" class=\"fn\">color_red</a>(&amp;self) -&gt; Self::<a class=\"associatedtype\" href=\"devela/all/trait.Color.html#associatedtype.Component\" title=\"type devela::all::Color::Component\">Component</a></h4></section></summary><div class=\"docblock\"><p>Since the color has no red, the luminosity is returned.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.color_green\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/media/color/luminance.rs.html#194\">Source</a><a href=\"#method.color_green\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Color.html#tymethod.color_green\" class=\"fn\">color_green</a>(&amp;self) -&gt; Self::<a class=\"associatedtype\" href=\"devela/all/trait.Color.html#associatedtype.Component\" title=\"type devela::all::Color::Component\">Component</a></h4></section></summary><div class=\"docblock\"><p>Since the color has no red, the luminosity is returned.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.color_blue\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/media/color/luminance.rs.html#194\">Source</a><a href=\"#method.color_blue\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Color.html#tymethod.color_blue\" class=\"fn\">color_blue</a>(&amp;self) -&gt; Self::<a class=\"associatedtype\" href=\"devela/all/trait.Color.html#associatedtype.Component\" title=\"type devela::all::Color::Component\">Component</a></h4></section></summary><div class=\"docblock\"><p>Since the color has no red, the luminosity is returned.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.color_alpha\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/media/color/luminance.rs.html#194\">Source</a><a href=\"#method.color_alpha\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Color.html#tymethod.color_alpha\" class=\"fn\">color_alpha</a>(&amp;self) -&gt; Self::<a class=\"associatedtype\" href=\"devela/all/trait.Color.html#associatedtype.Component\" title=\"type devela::all::Color::Component\">Component</a></h4></section></summary><div class=\"docblock\"><p>Since the color has no alpha, the maximum normalized value is returned.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.COLOR_BITS\" class=\"associatedconstant trait-impl\"><a class=\"src rightside\" href=\"src/devela/media/color/luminance.rs.html#194\">Source</a><a href=\"#associatedconstant.COLOR_BITS\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a href=\"devela/all/trait.Color.html#associatedconstant.COLOR_BITS\" class=\"constant\">COLOR_BITS</a>: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a> = 8usize</h4></section></summary><div class='docblock'>The bit depth of each color component (e.g., <code>8</code> for <code>u8</code>, <code>32</code> for <code>f32</code>).</div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.COLOR_COUNT\" class=\"associatedconstant trait-impl\"><a class=\"src rightside\" href=\"src/devela/media/color/luminance.rs.html#194\">Source</a><a href=\"#associatedconstant.COLOR_COUNT\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a href=\"devela/all/trait.Color.html#associatedconstant.COLOR_COUNT\" class=\"constant\">COLOR_COUNT</a>: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a> = 1usize</h4></section></summary><div class='docblock'>The number of color components (channels) in the representation. <a href=\"devela/all/trait.Color.html#associatedconstant.COLOR_COUNT\">Read more</a></div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.COLOR_HAS_ALPHA\" class=\"associatedconstant trait-impl\"><a class=\"src rightside\" href=\"src/devela/media/color/luminance.rs.html#194\">Source</a><a href=\"#associatedconstant.COLOR_HAS_ALPHA\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a href=\"devela/all/trait.Color.html#associatedconstant.COLOR_HAS_ALPHA\" class=\"constant\">COLOR_HAS_ALPHA</a>: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a> = false</h4></section></summary><div class='docblock'>Whether the color has an alpha component are integer types (e.g., <code>u8</code>, <code>u16</code>).</div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.COLOR_IS_LINEAR\" class=\"associatedconstant trait-impl\"><a class=\"src rightside\" href=\"src/devela/media/color/luminance.rs.html#194\">Source</a><a href=\"#associatedconstant.COLOR_IS_LINEAR\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a href=\"devela/all/trait.Color.html#associatedconstant.COLOR_IS_LINEAR\" class=\"constant\">COLOR_IS_LINEAR</a>: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a> = true</h4></section></summary><div class='docblock'>Whether the color space is linear (as opposed to non-linear, e.g., sRGB). <a href=\"devela/all/trait.Color.html#associatedconstant.COLOR_IS_LINEAR\">Read more</a></div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.COLOR_IS_INT\" class=\"associatedconstant trait-impl\"><a class=\"src rightside\" href=\"src/devela/media/color/luminance.rs.html#194\">Source</a><a href=\"#associatedconstant.COLOR_IS_INT\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a href=\"devela/all/trait.Color.html#associatedconstant.COLOR_IS_INT\" class=\"constant\">COLOR_IS_INT</a>: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a> = true</h4></section></summary><div class='docblock'>Whether the color components are integer types (e.g., <code>u8</code>, <code>u16</code>). <a href=\"devela/all/trait.Color.html#associatedconstant.COLOR_IS_INT\">Read more</a></div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.COLOR_IS_PREMUL\" class=\"associatedconstant trait-impl\"><a class=\"src rightside\" href=\"src/devela/media/color/luminance.rs.html#194\">Source</a><a href=\"#associatedconstant.COLOR_IS_PREMUL\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a href=\"devela/all/trait.Color.html#associatedconstant.COLOR_IS_PREMUL\" class=\"constant\">COLOR_IS_PREMUL</a>: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a> = false</h4></section></summary><div class='docblock'>Whether the color uses premultiplied alpha (vs. straight/unassociated alpha). <a href=\"devela/all/trait.Color.html#associatedconstant.COLOR_IS_PREMUL\">Read more</a></div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Component\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/devela/media/color/luminance.rs.html#194\">Source</a><a href=\"#associatedtype.Component\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"devela/all/trait.Color.html#associatedtype.Component\" class=\"associatedtype\">Component</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a></h4></section></summary><div class='docblock'>The type of a single color component (e.g., <code>u8</code>, <code>f32</code>).</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.color_components_write\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/media/color/luminance.rs.html#194\">Source</a><a href=\"#method.color_components_write\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Color.html#tymethod.color_components_write\" class=\"fn\">color_components_write</a>(&amp;self, b: &amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>]) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"devela/all/struct.NotEnoughSpace.html\" title=\"struct devela::all::NotEnoughSpace\">NotEnoughSpace</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;(), NotEnoughSpace&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Writes the color components to a pre-allocated <code>buffer</code>. <a href=\"devela/all/trait.Color.html#tymethod.color_components_write\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.color_bits\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/media/color/color.rs.html#77\">Source</a><a href=\"#method.color_bits\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Color.html#method.color_bits\" class=\"fn\">color_bits</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a></h4></section></summary><div class='docblock'>Returns the bit depth of each color component (e.g., 8 for <code>u8</code>, 32 for <code>f32</code>).</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.color_count\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/media/color/color.rs.html#81\">Source</a><a href=\"#method.color_count\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Color.html#method.color_count\" class=\"fn\">color_count</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a></h4></section></summary><div class='docblock'>Returns the number of color components (channels).</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.color_has_alpha\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/media/color/color.rs.html#85\">Source</a><a href=\"#method.color_has_alpha\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Color.html#method.color_has_alpha\" class=\"fn\">color_has_alpha</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Returns <code>true</code> if the color has an alpha component.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.color_is_int\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/media/color/color.rs.html#89\">Source</a><a href=\"#method.color_is_int\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Color.html#method.color_is_int\" class=\"fn\">color_is_int</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Returns <code>true</code> if the color uses integer components (e.g., <code>u8</code>, <code>u16</code>).</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.color_is_linear\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/media/color/color.rs.html#93\">Source</a><a href=\"#method.color_is_linear\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Color.html#method.color_is_linear\" class=\"fn\">color_is_linear</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Returns <code>true</code> if the color is in a linear space (not gamma-encoded like sRGB).</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.color_is_premul\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/media/color/color.rs.html#97\">Source</a><a href=\"#method.color_is_premul\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Color.html#method.color_is_premul\" class=\"fn\">color_is_premul</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Returns <code>true</code> if the color uses premultiplied alpha.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.color_components_vec\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/media/color/color.rs.html#102-106\">Source</a><a href=\"#method.color_components_vec\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Color.html#method.color_components_vec\" class=\"fn\">color_components_vec</a>(&amp;self) -&gt; <a class=\"struct\" href=\"devela/all/struct.Vec.html\" title=\"struct devela::all::Vec\">Vec</a>&lt;Self::<a class=\"associatedtype\" href=\"devela/all/trait.Color.html#associatedtype.Component\" title=\"type devela::all::Color::Component\">Component</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Vec&lt;Self::Component&gt;\">ⓘ</a><div class=\"where\">where\n    Self::<a class=\"associatedtype\" href=\"devela/all/trait.Color.html#associatedtype.Component\" title=\"type devela::all::Color::Component\">Component</a>: <a class=\"trait\" href=\"devela/code/trait.Default.html\" title=\"trait devela::code::Default\">Default</a> + <a class=\"trait\" href=\"devela/code/trait.Clone.html\" title=\"trait devela::code::Clone\">Clone</a>,</div></h4></section></summary><span class=\"item-info\"><div class=\"stab portability\">Available on <strong>crate feature <code>alloc</code></strong> only.</div></span><div class='docblock'>Returns a vector containing the color components.</div></details></div></details>","Color","devela::media::color::luminance::Luminance"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Color-for-Lum%3Cu8,+false%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/devela/media/color/luminance.rs.html#194\">Source</a><a href=\"#impl-Color-for-Lum%3Cu8,+false%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"devela/all/trait.Color.html\" title=\"trait devela::all::Color\">Color</a> for <a class=\"struct\" href=\"devela/all/struct.Lum.html\" title=\"struct devela::all::Lum\">Lum</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>, false, false&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.color_red\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/media/color/luminance.rs.html#194\">Source</a><a href=\"#method.color_red\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Color.html#tymethod.color_red\" class=\"fn\">color_red</a>(&amp;self) -&gt; Self::<a class=\"associatedtype\" href=\"devela/all/trait.Color.html#associatedtype.Component\" title=\"type devela::all::Color::Component\">Component</a></h4></section></summary><div class=\"docblock\"><p>Since the color has no red, the luminosity is returned.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.color_green\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/media/color/luminance.rs.html#194\">Source</a><a href=\"#method.color_green\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Color.html#tymethod.color_green\" class=\"fn\">color_green</a>(&amp;self) -&gt; Self::<a class=\"associatedtype\" href=\"devela/all/trait.Color.html#associatedtype.Component\" title=\"type devela::all::Color::Component\">Component</a></h4></section></summary><div class=\"docblock\"><p>Since the color has no red, the luminosity is returned.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.color_blue\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/media/color/luminance.rs.html#194\">Source</a><a href=\"#method.color_blue\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Color.html#tymethod.color_blue\" class=\"fn\">color_blue</a>(&amp;self) -&gt; Self::<a class=\"associatedtype\" href=\"devela/all/trait.Color.html#associatedtype.Component\" title=\"type devela::all::Color::Component\">Component</a></h4></section></summary><div class=\"docblock\"><p>Since the color has no red, the luminosity is returned.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.color_alpha\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/media/color/luminance.rs.html#194\">Source</a><a href=\"#method.color_alpha\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Color.html#tymethod.color_alpha\" class=\"fn\">color_alpha</a>(&amp;self) -&gt; Self::<a class=\"associatedtype\" href=\"devela/all/trait.Color.html#associatedtype.Component\" title=\"type devela::all::Color::Component\">Component</a></h4></section></summary><div class=\"docblock\"><p>Since the color has no alpha, the maximum normalized value is returned.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.COLOR_BITS\" class=\"associatedconstant trait-impl\"><a class=\"src rightside\" href=\"src/devela/media/color/luminance.rs.html#194\">Source</a><a href=\"#associatedconstant.COLOR_BITS\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a href=\"devela/all/trait.Color.html#associatedconstant.COLOR_BITS\" class=\"constant\">COLOR_BITS</a>: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a> = 8usize</h4></section></summary><div class='docblock'>The bit depth of each color component (e.g., <code>8</code> for <code>u8</code>, <code>32</code> for <code>f32</code>).</div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.COLOR_COUNT\" class=\"associatedconstant trait-impl\"><a class=\"src rightside\" href=\"src/devela/media/color/luminance.rs.html#194\">Source</a><a href=\"#associatedconstant.COLOR_COUNT\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a href=\"devela/all/trait.Color.html#associatedconstant.COLOR_COUNT\" class=\"constant\">COLOR_COUNT</a>: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a> = 1usize</h4></section></summary><div class='docblock'>The number of color components (channels) in the representation. <a href=\"devela/all/trait.Color.html#associatedconstant.COLOR_COUNT\">Read more</a></div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.COLOR_HAS_ALPHA\" class=\"associatedconstant trait-impl\"><a class=\"src rightside\" href=\"src/devela/media/color/luminance.rs.html#194\">Source</a><a href=\"#associatedconstant.COLOR_HAS_ALPHA\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a href=\"devela/all/trait.Color.html#associatedconstant.COLOR_HAS_ALPHA\" class=\"constant\">COLOR_HAS_ALPHA</a>: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a> = false</h4></section></summary><div class='docblock'>Whether the color has an alpha component are integer types (e.g., <code>u8</code>, <code>u16</code>).</div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.COLOR_IS_LINEAR\" class=\"associatedconstant trait-impl\"><a class=\"src rightside\" href=\"src/devela/media/color/luminance.rs.html#194\">Source</a><a href=\"#associatedconstant.COLOR_IS_LINEAR\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a href=\"devela/all/trait.Color.html#associatedconstant.COLOR_IS_LINEAR\" class=\"constant\">COLOR_IS_LINEAR</a>: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a> = false</h4></section></summary><div class='docblock'>Whether the color space is linear (as opposed to non-linear, e.g., sRGB). <a href=\"devela/all/trait.Color.html#associatedconstant.COLOR_IS_LINEAR\">Read more</a></div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.COLOR_IS_INT\" class=\"associatedconstant trait-impl\"><a class=\"src rightside\" href=\"src/devela/media/color/luminance.rs.html#194\">Source</a><a href=\"#associatedconstant.COLOR_IS_INT\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a href=\"devela/all/trait.Color.html#associatedconstant.COLOR_IS_INT\" class=\"constant\">COLOR_IS_INT</a>: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a> = true</h4></section></summary><div class='docblock'>Whether the color components are integer types (e.g., <code>u8</code>, <code>u16</code>). <a href=\"devela/all/trait.Color.html#associatedconstant.COLOR_IS_INT\">Read more</a></div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.COLOR_IS_PREMUL\" class=\"associatedconstant trait-impl\"><a class=\"src rightside\" href=\"src/devela/media/color/luminance.rs.html#194\">Source</a><a href=\"#associatedconstant.COLOR_IS_PREMUL\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a href=\"devela/all/trait.Color.html#associatedconstant.COLOR_IS_PREMUL\" class=\"constant\">COLOR_IS_PREMUL</a>: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a> = false</h4></section></summary><div class='docblock'>Whether the color uses premultiplied alpha (vs. straight/unassociated alpha). <a href=\"devela/all/trait.Color.html#associatedconstant.COLOR_IS_PREMUL\">Read more</a></div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Component\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/devela/media/color/luminance.rs.html#194\">Source</a><a href=\"#associatedtype.Component\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"devela/all/trait.Color.html#associatedtype.Component\" class=\"associatedtype\">Component</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a></h4></section></summary><div class='docblock'>The type of a single color component (e.g., <code>u8</code>, <code>f32</code>).</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.color_components_write\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/media/color/luminance.rs.html#194\">Source</a><a href=\"#method.color_components_write\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Color.html#tymethod.color_components_write\" class=\"fn\">color_components_write</a>(&amp;self, b: &amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>]) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"devela/all/struct.NotEnoughSpace.html\" title=\"struct devela::all::NotEnoughSpace\">NotEnoughSpace</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;(), NotEnoughSpace&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Writes the color components to a pre-allocated <code>buffer</code>. <a href=\"devela/all/trait.Color.html#tymethod.color_components_write\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.color_bits\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/media/color/color.rs.html#77\">Source</a><a href=\"#method.color_bits\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Color.html#method.color_bits\" class=\"fn\">color_bits</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a></h4></section></summary><div class='docblock'>Returns the bit depth of each color component (e.g., 8 for <code>u8</code>, 32 for <code>f32</code>).</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.color_count\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/media/color/color.rs.html#81\">Source</a><a href=\"#method.color_count\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Color.html#method.color_count\" class=\"fn\">color_count</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a></h4></section></summary><div class='docblock'>Returns the number of color components (channels).</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.color_has_alpha\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/media/color/color.rs.html#85\">Source</a><a href=\"#method.color_has_alpha\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Color.html#method.color_has_alpha\" class=\"fn\">color_has_alpha</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Returns <code>true</code> if the color has an alpha component.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.color_is_int\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/media/color/color.rs.html#89\">Source</a><a href=\"#method.color_is_int\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Color.html#method.color_is_int\" class=\"fn\">color_is_int</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Returns <code>true</code> if the color uses integer components (e.g., <code>u8</code>, <code>u16</code>).</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.color_is_linear\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/media/color/color.rs.html#93\">Source</a><a href=\"#method.color_is_linear\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Color.html#method.color_is_linear\" class=\"fn\">color_is_linear</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Returns <code>true</code> if the color is in a linear space (not gamma-encoded like sRGB).</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.color_is_premul\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/media/color/color.rs.html#97\">Source</a><a href=\"#method.color_is_premul\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Color.html#method.color_is_premul\" class=\"fn\">color_is_premul</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Returns <code>true</code> if the color uses premultiplied alpha.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.color_components_vec\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/media/color/color.rs.html#102-106\">Source</a><a href=\"#method.color_components_vec\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Color.html#method.color_components_vec\" class=\"fn\">color_components_vec</a>(&amp;self) -&gt; <a class=\"struct\" href=\"devela/all/struct.Vec.html\" title=\"struct devela::all::Vec\">Vec</a>&lt;Self::<a class=\"associatedtype\" href=\"devela/all/trait.Color.html#associatedtype.Component\" title=\"type devela::all::Color::Component\">Component</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Vec&lt;Self::Component&gt;\">ⓘ</a><div class=\"where\">where\n    Self::<a class=\"associatedtype\" href=\"devela/all/trait.Color.html#associatedtype.Component\" title=\"type devela::all::Color::Component\">Component</a>: <a class=\"trait\" href=\"devela/code/trait.Default.html\" title=\"trait devela::code::Default\">Default</a> + <a class=\"trait\" href=\"devela/code/trait.Clone.html\" title=\"trait devela::code::Clone\">Clone</a>,</div></h4></section></summary><span class=\"item-info\"><div class=\"stab portability\">Available on <strong>crate feature <code>alloc</code></strong> only.</div></span><div class='docblock'>Returns a vector containing the color components.</div></details></div></details>","Color","devela::media::color::luminance::Luma"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Color-for-Lum%3Cu8,+false,+true%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/devela/media/color/luminance.rs.html#194\">Source</a><a href=\"#impl-Color-for-Lum%3Cu8,+false,+true%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"devela/all/trait.Color.html\" title=\"trait devela::all::Color\">Color</a> for <a class=\"struct\" href=\"devela/all/struct.Lum.html\" title=\"struct devela::all::Lum\">Lum</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>, false, true&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.color_red\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/media/color/luminance.rs.html#194\">Source</a><a href=\"#method.color_red\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Color.html#tymethod.color_red\" class=\"fn\">color_red</a>(&amp;self) -&gt; Self::<a class=\"associatedtype\" href=\"devela/all/trait.Color.html#associatedtype.Component\" title=\"type devela::all::Color::Component\">Component</a></h4></section></summary><div class=\"docblock\"><p>Since the color has no red, the luminosity is returned.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.color_green\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/media/color/luminance.rs.html#194\">Source</a><a href=\"#method.color_green\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Color.html#tymethod.color_green\" class=\"fn\">color_green</a>(&amp;self) -&gt; Self::<a class=\"associatedtype\" href=\"devela/all/trait.Color.html#associatedtype.Component\" title=\"type devela::all::Color::Component\">Component</a></h4></section></summary><div class=\"docblock\"><p>Since the color has no red, the luminosity is returned.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.color_blue\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/media/color/luminance.rs.html#194\">Source</a><a href=\"#method.color_blue\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Color.html#tymethod.color_blue\" class=\"fn\">color_blue</a>(&amp;self) -&gt; Self::<a class=\"associatedtype\" href=\"devela/all/trait.Color.html#associatedtype.Component\" title=\"type devela::all::Color::Component\">Component</a></h4></section></summary><div class=\"docblock\"><p>Since the color has no red, the luminosity is returned.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.color_alpha\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/media/color/luminance.rs.html#194\">Source</a><a href=\"#method.color_alpha\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Color.html#tymethod.color_alpha\" class=\"fn\">color_alpha</a>(&amp;self) -&gt; Self::<a class=\"associatedtype\" href=\"devela/all/trait.Color.html#associatedtype.Component\" title=\"type devela::all::Color::Component\">Component</a></h4></section></summary><div class=\"docblock\"><p>Since the color has no alpha, the maximum normalized value is returned.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.COLOR_BITS\" class=\"associatedconstant trait-impl\"><a class=\"src rightside\" href=\"src/devela/media/color/luminance.rs.html#194\">Source</a><a href=\"#associatedconstant.COLOR_BITS\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a href=\"devela/all/trait.Color.html#associatedconstant.COLOR_BITS\" class=\"constant\">COLOR_BITS</a>: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a> = 8usize</h4></section></summary><div class='docblock'>The bit depth of each color component (e.g., <code>8</code> for <code>u8</code>, <code>32</code> for <code>f32</code>).</div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.COLOR_COUNT\" class=\"associatedconstant trait-impl\"><a class=\"src rightside\" href=\"src/devela/media/color/luminance.rs.html#194\">Source</a><a href=\"#associatedconstant.COLOR_COUNT\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a href=\"devela/all/trait.Color.html#associatedconstant.COLOR_COUNT\" class=\"constant\">COLOR_COUNT</a>: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a> = 1usize</h4></section></summary><div class='docblock'>The number of color components (channels) in the representation. <a href=\"devela/all/trait.Color.html#associatedconstant.COLOR_COUNT\">Read more</a></div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.COLOR_HAS_ALPHA\" class=\"associatedconstant trait-impl\"><a class=\"src rightside\" href=\"src/devela/media/color/luminance.rs.html#194\">Source</a><a href=\"#associatedconstant.COLOR_HAS_ALPHA\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a href=\"devela/all/trait.Color.html#associatedconstant.COLOR_HAS_ALPHA\" class=\"constant\">COLOR_HAS_ALPHA</a>: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a> = false</h4></section></summary><div class='docblock'>Whether the color has an alpha component are integer types (e.g., <code>u8</code>, <code>u16</code>).</div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.COLOR_IS_LINEAR\" class=\"associatedconstant trait-impl\"><a class=\"src rightside\" href=\"src/devela/media/color/luminance.rs.html#194\">Source</a><a href=\"#associatedconstant.COLOR_IS_LINEAR\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a href=\"devela/all/trait.Color.html#associatedconstant.COLOR_IS_LINEAR\" class=\"constant\">COLOR_IS_LINEAR</a>: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a> = false</h4></section></summary><div class='docblock'>Whether the color space is linear (as opposed to non-linear, e.g., sRGB). <a href=\"devela/all/trait.Color.html#associatedconstant.COLOR_IS_LINEAR\">Read more</a></div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.COLOR_IS_INT\" class=\"associatedconstant trait-impl\"><a class=\"src rightside\" href=\"src/devela/media/color/luminance.rs.html#194\">Source</a><a href=\"#associatedconstant.COLOR_IS_INT\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a href=\"devela/all/trait.Color.html#associatedconstant.COLOR_IS_INT\" class=\"constant\">COLOR_IS_INT</a>: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a> = true</h4></section></summary><div class='docblock'>Whether the color components are integer types (e.g., <code>u8</code>, <code>u16</code>). <a href=\"devela/all/trait.Color.html#associatedconstant.COLOR_IS_INT\">Read more</a></div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.COLOR_IS_PREMUL\" class=\"associatedconstant trait-impl\"><a class=\"src rightside\" href=\"src/devela/media/color/luminance.rs.html#194\">Source</a><a href=\"#associatedconstant.COLOR_IS_PREMUL\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a href=\"devela/all/trait.Color.html#associatedconstant.COLOR_IS_PREMUL\" class=\"constant\">COLOR_IS_PREMUL</a>: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a> = false</h4></section></summary><div class='docblock'>Whether the color uses premultiplied alpha (vs. straight/unassociated alpha). <a href=\"devela/all/trait.Color.html#associatedconstant.COLOR_IS_PREMUL\">Read more</a></div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Component\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/devela/media/color/luminance.rs.html#194\">Source</a><a href=\"#associatedtype.Component\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"devela/all/trait.Color.html#associatedtype.Component\" class=\"associatedtype\">Component</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a></h4></section></summary><div class='docblock'>The type of a single color component (e.g., <code>u8</code>, <code>f32</code>).</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.color_components_write\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/media/color/luminance.rs.html#194\">Source</a><a href=\"#method.color_components_write\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Color.html#tymethod.color_components_write\" class=\"fn\">color_components_write</a>(&amp;self, b: &amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>]) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"devela/all/struct.NotEnoughSpace.html\" title=\"struct devela::all::NotEnoughSpace\">NotEnoughSpace</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;(), NotEnoughSpace&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Writes the color components to a pre-allocated <code>buffer</code>. <a href=\"devela/all/trait.Color.html#tymethod.color_components_write\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.color_bits\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/media/color/color.rs.html#77\">Source</a><a href=\"#method.color_bits\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Color.html#method.color_bits\" class=\"fn\">color_bits</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a></h4></section></summary><div class='docblock'>Returns the bit depth of each color component (e.g., 8 for <code>u8</code>, 32 for <code>f32</code>).</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.color_count\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/media/color/color.rs.html#81\">Source</a><a href=\"#method.color_count\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Color.html#method.color_count\" class=\"fn\">color_count</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a></h4></section></summary><div class='docblock'>Returns the number of color components (channels).</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.color_has_alpha\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/media/color/color.rs.html#85\">Source</a><a href=\"#method.color_has_alpha\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Color.html#method.color_has_alpha\" class=\"fn\">color_has_alpha</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Returns <code>true</code> if the color has an alpha component.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.color_is_int\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/media/color/color.rs.html#89\">Source</a><a href=\"#method.color_is_int\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Color.html#method.color_is_int\" class=\"fn\">color_is_int</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Returns <code>true</code> if the color uses integer components (e.g., <code>u8</code>, <code>u16</code>).</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.color_is_linear\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/media/color/color.rs.html#93\">Source</a><a href=\"#method.color_is_linear\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Color.html#method.color_is_linear\" class=\"fn\">color_is_linear</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Returns <code>true</code> if the color is in a linear space (not gamma-encoded like sRGB).</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.color_is_premul\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/media/color/color.rs.html#97\">Source</a><a href=\"#method.color_is_premul\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Color.html#method.color_is_premul\" class=\"fn\">color_is_premul</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Returns <code>true</code> if the color uses premultiplied alpha.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.color_components_vec\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/media/color/color.rs.html#102-106\">Source</a><a href=\"#method.color_components_vec\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Color.html#method.color_components_vec\" class=\"fn\">color_components_vec</a>(&amp;self) -&gt; <a class=\"struct\" href=\"devela/all/struct.Vec.html\" title=\"struct devela::all::Vec\">Vec</a>&lt;Self::<a class=\"associatedtype\" href=\"devela/all/trait.Color.html#associatedtype.Component\" title=\"type devela::all::Color::Component\">Component</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Vec&lt;Self::Component&gt;\">ⓘ</a><div class=\"where\">where\n    Self::<a class=\"associatedtype\" href=\"devela/all/trait.Color.html#associatedtype.Component\" title=\"type devela::all::Color::Component\">Component</a>: <a class=\"trait\" href=\"devela/code/trait.Default.html\" title=\"trait devela::code::Default\">Default</a> + <a class=\"trait\" href=\"devela/code/trait.Clone.html\" title=\"trait devela::code::Clone\">Clone</a>,</div></h4></section></summary><span class=\"item-info\"><div class=\"stab portability\">Available on <strong>crate feature <code>alloc</code></strong> only.</div></span><div class='docblock'>Returns a vector containing the color components.</div></details></div></details>","Color","devela::media::color::luminance::Lightness"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Color-for-Lum%3Cu8,+true,+true%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/devela/media/color/luminance.rs.html#194\">Source</a><a href=\"#impl-Color-for-Lum%3Cu8,+true,+true%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"devela/all/trait.Color.html\" title=\"trait devela::all::Color\">Color</a> for <a class=\"struct\" href=\"devela/all/struct.Lum.html\" title=\"struct devela::all::Lum\">Lum</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>, true, true&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.color_red\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/media/color/luminance.rs.html#194\">Source</a><a href=\"#method.color_red\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Color.html#tymethod.color_red\" class=\"fn\">color_red</a>(&amp;self) -&gt; Self::<a class=\"associatedtype\" href=\"devela/all/trait.Color.html#associatedtype.Component\" title=\"type devela::all::Color::Component\">Component</a></h4></section></summary><div class=\"docblock\"><p>Since the color has no red, the luminosity is returned.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.color_green\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/media/color/luminance.rs.html#194\">Source</a><a href=\"#method.color_green\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Color.html#tymethod.color_green\" class=\"fn\">color_green</a>(&amp;self) -&gt; Self::<a class=\"associatedtype\" href=\"devela/all/trait.Color.html#associatedtype.Component\" title=\"type devela::all::Color::Component\">Component</a></h4></section></summary><div class=\"docblock\"><p>Since the color has no red, the luminosity is returned.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.color_blue\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/media/color/luminance.rs.html#194\">Source</a><a href=\"#method.color_blue\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Color.html#tymethod.color_blue\" class=\"fn\">color_blue</a>(&amp;self) -&gt; Self::<a class=\"associatedtype\" href=\"devela/all/trait.Color.html#associatedtype.Component\" title=\"type devela::all::Color::Component\">Component</a></h4></section></summary><div class=\"docblock\"><p>Since the color has no red, the luminosity is returned.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.color_alpha\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/media/color/luminance.rs.html#194\">Source</a><a href=\"#method.color_alpha\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Color.html#tymethod.color_alpha\" class=\"fn\">color_alpha</a>(&amp;self) -&gt; Self::<a class=\"associatedtype\" href=\"devela/all/trait.Color.html#associatedtype.Component\" title=\"type devela::all::Color::Component\">Component</a></h4></section></summary><div class=\"docblock\"><p>Since the color has no alpha, the maximum normalized value is returned.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.COLOR_BITS\" class=\"associatedconstant trait-impl\"><a class=\"src rightside\" href=\"src/devela/media/color/luminance.rs.html#194\">Source</a><a href=\"#associatedconstant.COLOR_BITS\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a href=\"devela/all/trait.Color.html#associatedconstant.COLOR_BITS\" class=\"constant\">COLOR_BITS</a>: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a> = 8usize</h4></section></summary><div class='docblock'>The bit depth of each color component (e.g., <code>8</code> for <code>u8</code>, <code>32</code> for <code>f32</code>).</div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.COLOR_COUNT\" class=\"associatedconstant trait-impl\"><a class=\"src rightside\" href=\"src/devela/media/color/luminance.rs.html#194\">Source</a><a href=\"#associatedconstant.COLOR_COUNT\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a href=\"devela/all/trait.Color.html#associatedconstant.COLOR_COUNT\" class=\"constant\">COLOR_COUNT</a>: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a> = 1usize</h4></section></summary><div class='docblock'>The number of color components (channels) in the representation. <a href=\"devela/all/trait.Color.html#associatedconstant.COLOR_COUNT\">Read more</a></div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.COLOR_HAS_ALPHA\" class=\"associatedconstant trait-impl\"><a class=\"src rightside\" href=\"src/devela/media/color/luminance.rs.html#194\">Source</a><a href=\"#associatedconstant.COLOR_HAS_ALPHA\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a href=\"devela/all/trait.Color.html#associatedconstant.COLOR_HAS_ALPHA\" class=\"constant\">COLOR_HAS_ALPHA</a>: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a> = false</h4></section></summary><div class='docblock'>Whether the color has an alpha component are integer types (e.g., <code>u8</code>, <code>u16</code>).</div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.COLOR_IS_LINEAR\" class=\"associatedconstant trait-impl\"><a class=\"src rightside\" href=\"src/devela/media/color/luminance.rs.html#194\">Source</a><a href=\"#associatedconstant.COLOR_IS_LINEAR\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a href=\"devela/all/trait.Color.html#associatedconstant.COLOR_IS_LINEAR\" class=\"constant\">COLOR_IS_LINEAR</a>: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a> = true</h4></section></summary><div class='docblock'>Whether the color space is linear (as opposed to non-linear, e.g., sRGB). <a href=\"devela/all/trait.Color.html#associatedconstant.COLOR_IS_LINEAR\">Read more</a></div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.COLOR_IS_INT\" class=\"associatedconstant trait-impl\"><a class=\"src rightside\" href=\"src/devela/media/color/luminance.rs.html#194\">Source</a><a href=\"#associatedconstant.COLOR_IS_INT\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a href=\"devela/all/trait.Color.html#associatedconstant.COLOR_IS_INT\" class=\"constant\">COLOR_IS_INT</a>: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a> = true</h4></section></summary><div class='docblock'>Whether the color components are integer types (e.g., <code>u8</code>, <code>u16</code>). <a href=\"devela/all/trait.Color.html#associatedconstant.COLOR_IS_INT\">Read more</a></div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.COLOR_IS_PREMUL\" class=\"associatedconstant trait-impl\"><a class=\"src rightside\" href=\"src/devela/media/color/luminance.rs.html#194\">Source</a><a href=\"#associatedconstant.COLOR_IS_PREMUL\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a href=\"devela/all/trait.Color.html#associatedconstant.COLOR_IS_PREMUL\" class=\"constant\">COLOR_IS_PREMUL</a>: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a> = false</h4></section></summary><div class='docblock'>Whether the color uses premultiplied alpha (vs. straight/unassociated alpha). <a href=\"devela/all/trait.Color.html#associatedconstant.COLOR_IS_PREMUL\">Read more</a></div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Component\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/devela/media/color/luminance.rs.html#194\">Source</a><a href=\"#associatedtype.Component\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"devela/all/trait.Color.html#associatedtype.Component\" class=\"associatedtype\">Component</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a></h4></section></summary><div class='docblock'>The type of a single color component (e.g., <code>u8</code>, <code>f32</code>).</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.color_components_write\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/media/color/luminance.rs.html#194\">Source</a><a href=\"#method.color_components_write\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Color.html#tymethod.color_components_write\" class=\"fn\">color_components_write</a>(&amp;self, b: &amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>]) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"devela/all/struct.NotEnoughSpace.html\" title=\"struct devela::all::NotEnoughSpace\">NotEnoughSpace</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;(), NotEnoughSpace&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Writes the color components to a pre-allocated <code>buffer</code>. <a href=\"devela/all/trait.Color.html#tymethod.color_components_write\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.color_bits\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/media/color/color.rs.html#77\">Source</a><a href=\"#method.color_bits\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Color.html#method.color_bits\" class=\"fn\">color_bits</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a></h4></section></summary><div class='docblock'>Returns the bit depth of each color component (e.g., 8 for <code>u8</code>, 32 for <code>f32</code>).</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.color_count\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/media/color/color.rs.html#81\">Source</a><a href=\"#method.color_count\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Color.html#method.color_count\" class=\"fn\">color_count</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a></h4></section></summary><div class='docblock'>Returns the number of color components (channels).</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.color_has_alpha\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/media/color/color.rs.html#85\">Source</a><a href=\"#method.color_has_alpha\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Color.html#method.color_has_alpha\" class=\"fn\">color_has_alpha</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Returns <code>true</code> if the color has an alpha component.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.color_is_int\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/media/color/color.rs.html#89\">Source</a><a href=\"#method.color_is_int\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Color.html#method.color_is_int\" class=\"fn\">color_is_int</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Returns <code>true</code> if the color uses integer components (e.g., <code>u8</code>, <code>u16</code>).</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.color_is_linear\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/media/color/color.rs.html#93\">Source</a><a href=\"#method.color_is_linear\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Color.html#method.color_is_linear\" class=\"fn\">color_is_linear</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Returns <code>true</code> if the color is in a linear space (not gamma-encoded like sRGB).</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.color_is_premul\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/media/color/color.rs.html#97\">Source</a><a href=\"#method.color_is_premul\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Color.html#method.color_is_premul\" class=\"fn\">color_is_premul</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Returns <code>true</code> if the color uses premultiplied alpha.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.color_components_vec\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/media/color/color.rs.html#102-106\">Source</a><a href=\"#method.color_components_vec\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Color.html#method.color_components_vec\" class=\"fn\">color_components_vec</a>(&amp;self) -&gt; <a class=\"struct\" href=\"devela/all/struct.Vec.html\" title=\"struct devela::all::Vec\">Vec</a>&lt;Self::<a class=\"associatedtype\" href=\"devela/all/trait.Color.html#associatedtype.Component\" title=\"type devela::all::Color::Component\">Component</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Vec&lt;Self::Component&gt;\">ⓘ</a><div class=\"where\">where\n    Self::<a class=\"associatedtype\" href=\"devela/all/trait.Color.html#associatedtype.Component\" title=\"type devela::all::Color::Component\">Component</a>: <a class=\"trait\" href=\"devela/code/trait.Default.html\" title=\"trait devela::code::Default\">Default</a> + <a class=\"trait\" href=\"devela/code/trait.Clone.html\" title=\"trait devela::code::Clone\">Clone</a>,</div></h4></section></summary><span class=\"item-info\"><div class=\"stab portability\">Available on <strong>crate feature <code>alloc</code></strong> only.</div></span><div class='docblock'>Returns a vector containing the color components.</div></details></div></details>","Color","devela::media::color::luminance::LinearLightness"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-Lum%3CT,+LINEAR,+LIGHTNESS%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/devela/media/color/luminance.rs.html#27\">Source</a><a href=\"#impl-Debug-for-Lum%3CT,+LINEAR,+LIGHTNESS%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T: <a class=\"trait\" href=\"devela/all/trait.Debug.html\" title=\"trait devela::all::Debug\">Debug</a>, const LINEAR: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a>, const LIGHTNESS: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a>&gt; <a class=\"trait\" href=\"devela/all/trait.Debug.html\" title=\"trait devela::all::Debug\">Debug</a> for <a class=\"struct\" href=\"devela/all/struct.Lum.html\" title=\"struct devela::all::Lum\">Lum</a>&lt;T, LINEAR, LIGHTNESS&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/media/color/luminance.rs.html#27\">Source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"devela/all/struct.Formatter.html\" title=\"struct devela::all::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"type\" href=\"devela/_core/fmt/type.Result.html\" title=\"type devela::_core::fmt::Result\">Result</a></h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"devela/all/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","devela::media::color::luminance::Luminance","devela::media::color::luminance::Lightness","devela::media::color::luminance::Luma","devela::media::color::luminance::LinearLightness"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Default-for-Lum%3CT,+LINEAR,+LIGHTNESS%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/devela/media/color/luminance.rs.html#27\">Source</a><a href=\"#impl-Default-for-Lum%3CT,+LINEAR,+LIGHTNESS%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T: <a class=\"trait\" href=\"devela/code/trait.Default.html\" title=\"trait devela::code::Default\">Default</a>, const LINEAR: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a>, const LIGHTNESS: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a>&gt; <a class=\"trait\" href=\"devela/code/trait.Default.html\" title=\"trait devela::code::Default\">Default</a> for <a class=\"struct\" href=\"devela/all/struct.Lum.html\" title=\"struct devela::all::Lum\">Lum</a>&lt;T, LINEAR, LIGHTNESS&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.default\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/media/color/luminance.rs.html#27\">Source</a><a href=\"#method.default\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/code/trait.Default.html#tymethod.default\" class=\"fn\">default</a>() -&gt; <a class=\"struct\" href=\"devela/all/struct.Lum.html\" title=\"struct devela::all::Lum\">Lum</a>&lt;T, LINEAR, LIGHTNESS&gt;</h4></section></summary><div class='docblock'>Returns the “default value” for a type. <a href=\"devela/code/trait.Default.html#tymethod.default\">Read more</a></div></details></div></details>","Default","devela::media::color::luminance::Luminance","devela::media::color::luminance::Lightness","devela::media::color::luminance::Luma","devela::media::color::luminance::LinearLightness"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Lum%3Cf64,+LINEAR,+LIGHTNESS%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/devela/media/color/luminance.rs.html#194\">Source</a><a href=\"#impl-Lum%3Cf64,+LINEAR,+LIGHTNESS%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;const LINEAR: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a>, const LIGHTNESS: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a>&gt; <a class=\"struct\" href=\"devela/all/struct.Lum.html\" title=\"struct devela::all::Lum\">Lum</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.f64.html\">f64</a>, LINEAR, LIGHTNESS&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.new\" class=\"method\"><a class=\"src rightside\" href=\"src/devela/media/color/luminance.rs.html#194\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"devela/all/struct.Lum.html#tymethod.new\" class=\"fn\">new</a>(c: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.f64.html\">f64</a>) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>New <code>Luminance</code> with the given channel.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.l\" class=\"method\"><a class=\"src rightside\" href=\"src/devela/media/color/luminance.rs.html#194\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"devela/all/struct.Lum.html#tymethod.l\" class=\"fn\">l</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.f64.html\">f64</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"f64\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Returns the raw channel value, regardless of interpretation.</p>\n<p>Prefer type-specific methods like <a href=\"devela/all/struct.Lum.html#method.luminance\" title=\"method devela::all::Lum::luminance\"><code>luminance()</code></a> or\n<a href=\"devela/all/struct.Lum.html#method.lightness\" title=\"method devela::all::Lum::lightness\"><code>lightness()</code></a> where possible.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.l_mut\" class=\"method\"><a class=\"src rightside\" href=\"src/devela/media/color/luminance.rs.html#194\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"devela/all/struct.Lum.html#tymethod.l_mut\" class=\"fn\">l_mut</a>(&amp;mut self) -&gt; &amp;mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.f64.html\">f64</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&amp;mut f64\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Returns a mutable reference to the raw channel value.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.brightness_from_rgb\" class=\"method\"><a class=\"src rightside\" href=\"src/devela/media/color/luminance.rs.html#194\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"devela/all/struct.Lum.html#tymethod.brightness_from_rgb\" class=\"fn\">brightness_from_rgb</a>(rgb: <a class=\"struct\" href=\"devela/all/struct.Rgb.html\" title=\"struct devela::all::Rgb\">Rgb</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.f64.html\">f64</a>&gt;) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Converts an <code>Rgb</code> into unweighted brightness by averaging the R’G’B’ components.</p>\n<p>May be useful for quick approximations.\nNot correct for perceptual brightness (luma) or physical light (luminance).</p>\n</div></details></div></details>",0,"devela::media::color::luminance::Luminance","devela::media::color::luminance::Lightness","devela::media::color::luminance::Luma","devela::media::color::luminance::LinearLightness"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Lum%3Cu16,+LINEAR,+LIGHTNESS%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/devela/media/color/luminance.rs.html#194\">Source</a><a href=\"#impl-Lum%3Cu16,+LINEAR,+LIGHTNESS%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;const LINEAR: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a>, const LIGHTNESS: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a>&gt; <a class=\"struct\" href=\"devela/all/struct.Lum.html\" title=\"struct devela::all::Lum\">Lum</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u16.html\">u16</a>, LINEAR, LIGHTNESS&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.new\" class=\"method\"><a class=\"src rightside\" href=\"src/devela/media/color/luminance.rs.html#194\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"devela/all/struct.Lum.html#tymethod.new\" class=\"fn\">new</a>(c: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u16.html\">u16</a>) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>New <code>Luminance</code> with the given channel.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.l\" class=\"method\"><a class=\"src rightside\" href=\"src/devela/media/color/luminance.rs.html#194\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"devela/all/struct.Lum.html#tymethod.l\" class=\"fn\">l</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u16.html\">u16</a></h4></section></summary><div class=\"docblock\"><p>Returns the raw channel value, regardless of interpretation.</p>\n<p>Prefer type-specific methods like <a href=\"devela/all/struct.Lum.html#method.luminance\" title=\"method devela::all::Lum::luminance\"><code>luminance()</code></a> or\n<a href=\"devela/all/struct.Lum.html#method.lightness\" title=\"method devela::all::Lum::lightness\"><code>lightness()</code></a> where possible.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.l_mut\" class=\"method\"><a class=\"src rightside\" href=\"src/devela/media/color/luminance.rs.html#194\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"devela/all/struct.Lum.html#tymethod.l_mut\" class=\"fn\">l_mut</a>(&amp;mut self) -&gt; &amp;mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u16.html\">u16</a></h4></section></summary><div class=\"docblock\"><p>Returns a mutable reference to the raw channel value.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.brightness_from_rgb\" class=\"method\"><a class=\"src rightside\" href=\"src/devela/media/color/luminance.rs.html#194\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"devela/all/struct.Lum.html#tymethod.brightness_from_rgb\" class=\"fn\">brightness_from_rgb</a>(rgb: <a class=\"struct\" href=\"devela/all/struct.Rgb.html\" title=\"struct devela::all::Rgb\">Rgb</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u16.html\">u16</a>&gt;) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Converts an <code>Rgb</code> into unweighted brightness by averaging the R’G’B’ components.</p>\n<p>May be useful for quick approximations.\nNot correct for perceptual brightness (luma) or physical light (luminance).</p>\n</div></details></div></details>",0,"devela::media::color::luminance::Luminance","devela::media::color::luminance::Lightness","devela::media::color::luminance::Luma","devela::media::color::luminance::LinearLightness"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Lum%3Cu8,+LINEAR,+LIGHTNESS%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/devela/media/color/luminance.rs.html#194\">Source</a><a href=\"#impl-Lum%3Cu8,+LINEAR,+LIGHTNESS%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;const LINEAR: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a>, const LIGHTNESS: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a>&gt; <a class=\"struct\" href=\"devela/all/struct.Lum.html\" title=\"struct devela::all::Lum\">Lum</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>, LINEAR, LIGHTNESS&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.new\" class=\"method\"><a class=\"src rightside\" href=\"src/devela/media/color/luminance.rs.html#194\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"devela/all/struct.Lum.html#tymethod.new\" class=\"fn\">new</a>(c: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>New <code>Luminance</code> with the given channel.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.l\" class=\"method\"><a class=\"src rightside\" href=\"src/devela/media/color/luminance.rs.html#194\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"devela/all/struct.Lum.html#tymethod.l\" class=\"fn\">l</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a></h4></section></summary><div class=\"docblock\"><p>Returns the raw channel value, regardless of interpretation.</p>\n<p>Prefer type-specific methods like <a href=\"devela/all/struct.Lum.html#method.luminance\" title=\"method devela::all::Lum::luminance\"><code>luminance()</code></a> or\n<a href=\"devela/all/struct.Lum.html#method.lightness\" title=\"method devela::all::Lum::lightness\"><code>lightness()</code></a> where possible.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.l_mut\" class=\"method\"><a class=\"src rightside\" href=\"src/devela/media/color/luminance.rs.html#194\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"devela/all/struct.Lum.html#tymethod.l_mut\" class=\"fn\">l_mut</a>(&amp;mut self) -&gt; &amp;mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a></h4></section></summary><div class=\"docblock\"><p>Returns a mutable reference to the raw channel value.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.brightness_from_rgb\" class=\"method\"><a class=\"src rightside\" href=\"src/devela/media/color/luminance.rs.html#194\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"devela/all/struct.Lum.html#tymethod.brightness_from_rgb\" class=\"fn\">brightness_from_rgb</a>(rgb: <a class=\"struct\" href=\"devela/all/struct.Rgb.html\" title=\"struct devela::all::Rgb\">Rgb</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Converts an <code>Rgb</code> into unweighted brightness by averaging the R’G’B’ components.</p>\n<p>May be useful for quick approximations.\nNot correct for perceptual brightness (luma) or physical light (luminance).</p>\n</div></details></div></details>",0,"devela::media::color::luminance::Luminance","devela::media::color::luminance::Lightness","devela::media::color::luminance::Luma","devela::media::color::luminance::LinearLightness"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Ord-for-Lum%3CT,+LINEAR,+LIGHTNESS%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/devela/media/color/luminance.rs.html#27\">Source</a><a href=\"#impl-Ord-for-Lum%3CT,+LINEAR,+LIGHTNESS%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T: <a class=\"trait\" href=\"devela/all/trait.Ord.html\" title=\"trait devela::all::Ord\">Ord</a>, const LINEAR: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a>, const LIGHTNESS: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a>&gt; <a class=\"trait\" href=\"devela/all/trait.Ord.html\" title=\"trait devela::all::Ord\">Ord</a> for <a class=\"struct\" href=\"devela/all/struct.Lum.html\" title=\"struct devela::all::Lum\">Lum</a>&lt;T, LINEAR, LIGHTNESS&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/media/color/luminance.rs.html#27\">Source</a><a href=\"#method.cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Ord.html#tymethod.cmp\" class=\"fn\">cmp</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"devela/all/struct.Lum.html\" title=\"struct devela::all::Lum\">Lum</a>&lt;T, LINEAR, LIGHTNESS&gt;) -&gt; <a class=\"enum\" href=\"devela/all/enum.Ordering.html\" title=\"enum devela::all::Ordering\">Ordering</a></h4></section></summary><div class='docblock'>This method returns an <a href=\"devela/all/enum.Ordering.html\" title=\"enum devela::all::Ordering\"><code>Ordering</code></a> between <code>self</code> and <code>other</code>. <a href=\"devela/all/trait.Ord.html#tymethod.cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.max\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1013-1015\">Source</a></span><a href=\"#method.max\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Ord.html#method.max\" class=\"fn\">max</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"devela/all/trait.Sized.html\" title=\"trait devela::all::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Compares and returns the maximum of two values. <a href=\"devela/all/trait.Ord.html#method.max\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.min\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1052-1054\">Source</a></span><a href=\"#method.min\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Ord.html#method.min\" class=\"fn\">min</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"devela/all/trait.Sized.html\" title=\"trait devela::all::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Compares and returns the minimum of two values. <a href=\"devela/all/trait.Ord.html#method.min\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clamp\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.50.0\">1.50.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1078-1080\">Source</a></span><a href=\"#method.clamp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Ord.html#method.clamp\" class=\"fn\">clamp</a>(self, min: Self, max: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"devela/all/trait.Sized.html\" title=\"trait devela::all::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Restrict a value to a certain interval. <a href=\"devela/all/trait.Ord.html#method.clamp\">Read more</a></div></details></div></details>","Ord","devela::media::color::luminance::Luminance","devela::media::color::luminance::Lightness","devela::media::color::luminance::Luma","devela::media::color::luminance::LinearLightness"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq-for-Lum%3CT,+LINEAR,+LIGHTNESS%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/devela/media/color/luminance.rs.html#27\">Source</a><a href=\"#impl-PartialEq-for-Lum%3CT,+LINEAR,+LIGHTNESS%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T: <a class=\"trait\" href=\"devela/all/trait.PartialEq.html\" title=\"trait devela::all::PartialEq\">PartialEq</a>, const LINEAR: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a>, const LIGHTNESS: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a>&gt; <a class=\"trait\" href=\"devela/all/trait.PartialEq.html\" title=\"trait devela::all::PartialEq\">PartialEq</a> for <a class=\"struct\" href=\"devela/all/struct.Lum.html\" title=\"struct devela::all::Lum\">Lum</a>&lt;T, LINEAR, LIGHTNESS&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/media/color/luminance.rs.html#27\">Source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"devela/all/struct.Lum.html\" title=\"struct devela::all::Lum\">Lum</a>&lt;T, LINEAR, LIGHTNESS&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#265\">Source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq","devela::media::color::luminance::Luminance","devela::media::color::luminance::Lightness","devela::media::color::luminance::Luma","devela::media::color::luminance::LinearLightness"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialOrd-for-Lum%3CT,+LINEAR,+LIGHTNESS%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/devela/media/color/luminance.rs.html#27\">Source</a><a href=\"#impl-PartialOrd-for-Lum%3CT,+LINEAR,+LIGHTNESS%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T: <a class=\"trait\" href=\"devela/all/trait.PartialOrd.html\" title=\"trait devela::all::PartialOrd\">PartialOrd</a>, const LINEAR: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a>, const LIGHTNESS: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a>&gt; <a class=\"trait\" href=\"devela/all/trait.PartialOrd.html\" title=\"trait devela::all::PartialOrd\">PartialOrd</a> for <a class=\"struct\" href=\"devela/all/struct.Lum.html\" title=\"struct devela::all::Lum\">Lum</a>&lt;T, LINEAR, LIGHTNESS&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.partial_cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/media/color/luminance.rs.html#27\">Source</a><a href=\"#method.partial_cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"devela/all/struct.Lum.html\" title=\"struct devela::all::Lum\">Lum</a>&lt;T, LINEAR, LIGHTNESS&gt;) -&gt; <a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;<a class=\"enum\" href=\"devela/all/enum.Ordering.html\" title=\"enum devela::all::Ordering\">Ordering</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Option&lt;Ordering&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"devela/all/trait.PartialOrd.html#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1387\">Source</a></span><a href=\"#method.lt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"devela/all/trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.le\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1405\">Source</a></span><a href=\"#method.le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the\n<code>&lt;=</code> operator. <a href=\"devela/all/trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.gt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1423\">Source</a></span><a href=\"#method.gt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code>\noperator. <a href=\"devela/all/trait.PartialOrd.html#method.gt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ge\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1441\">Source</a></span><a href=\"#method.ge\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by\nthe <code>&gt;=</code> operator. <a href=\"devela/all/trait.PartialOrd.html#method.ge\">Read more</a></div></details></div></details>","PartialOrd","devela::media::color::luminance::Luminance","devela::media::color::luminance::Lightness","devela::media::color::luminance::Luma","devela::media::color::luminance::LinearLightness"],["<section id=\"impl-Copy-for-Lum%3CT,+LINEAR,+LIGHTNESS%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/devela/media/color/luminance.rs.html#27\">Source</a><a href=\"#impl-Copy-for-Lum%3CT,+LINEAR,+LIGHTNESS%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T: <a class=\"trait\" href=\"devela/all/trait.Copy.html\" title=\"trait devela::all::Copy\">Copy</a>, const LINEAR: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a>, const LIGHTNESS: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a>&gt; <a class=\"trait\" href=\"devela/all/trait.Copy.html\" title=\"trait devela::all::Copy\">Copy</a> for <a class=\"struct\" href=\"devela/all/struct.Lum.html\" title=\"struct devela::all::Lum\">Lum</a>&lt;T, LINEAR, LIGHTNESS&gt;</h3></section>","Copy","devela::media::color::luminance::Luminance","devela::media::color::luminance::Lightness","devela::media::color::luminance::Luma","devela::media::color::luminance::LinearLightness"],["<section id=\"impl-Eq-for-Lum%3CT,+LINEAR,+LIGHTNESS%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/devela/media/color/luminance.rs.html#27\">Source</a><a href=\"#impl-Eq-for-Lum%3CT,+LINEAR,+LIGHTNESS%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T: <a class=\"trait\" href=\"devela/all/trait.Eq.html\" title=\"trait devela::all::Eq\">Eq</a>, const LINEAR: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a>, const LIGHTNESS: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a>&gt; <a class=\"trait\" href=\"devela/all/trait.Eq.html\" title=\"trait devela::all::Eq\">Eq</a> for <a class=\"struct\" href=\"devela/all/struct.Lum.html\" title=\"struct devela::all::Lum\">Lum</a>&lt;T, LINEAR, LIGHTNESS&gt;</h3></section>","Eq","devela::media::color::luminance::Luminance","devela::media::color::luminance::Lightness","devela::media::color::luminance::Luma","devela::media::color::luminance::LinearLightness"],["<section id=\"impl-StructuralPartialEq-for-Lum%3CT,+LINEAR,+LIGHTNESS%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/devela/media/color/luminance.rs.html#27\">Source</a><a href=\"#impl-StructuralPartialEq-for-Lum%3CT,+LINEAR,+LIGHTNESS%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, const LINEAR: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a>, const LIGHTNESS: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a>&gt; <a class=\"trait\" href=\"devela/_core/marker/trait.StructuralPartialEq.html\" title=\"trait devela::_core::marker::StructuralPartialEq\">StructuralPartialEq</a> for <a class=\"struct\" href=\"devela/all/struct.Lum.html\" title=\"struct devela::all::Lum\">Lum</a>&lt;T, LINEAR, LIGHTNESS&gt;</h3></section>","StructuralPartialEq","devela::media::color::luminance::Luminance","devela::media::color::luminance::Lightness","devela::media::color::luminance::Luma","devela::media::color::luminance::LinearLightness"]]]]);
    if (window.register_type_impls) {
        window.register_type_impls(type_impls);
    } else {
        window.pending_type_impls = type_impls;
    }
})()
//{"start":55,"fragment_lengths":[215955]}