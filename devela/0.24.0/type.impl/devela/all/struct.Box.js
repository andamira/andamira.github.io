(function() {
    var type_impls = Object.fromEntries([["devela",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsFd-for-Box%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.64.0\">1.64.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/std/os/fd/owned.rs.html#450\">Source</a></span><a href=\"#impl-AsFd-for-Box%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"devela/_dep/_std/os/fd/trait.AsFd.html\" title=\"trait devela::_dep::_std::os::fd::AsFd\">AsFd</a> for <a class=\"struct\" href=\"devela/all/struct.Box.html\" title=\"struct devela::all::Box\">Box</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"devela/_dep/_std/os/fd/trait.AsFd.html\" title=\"trait devela::_dep::_std::os::fd::AsFd\">AsFd</a> + ?<a class=\"trait\" href=\"devela/all/trait.Sized.html\" title=\"trait devela::all::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_fd\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/std/os/fd/owned.rs.html#452\">Source</a><a href=\"#method.as_fd\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/_dep/_std/os/fd/trait.AsFd.html#tymethod.as_fd\" class=\"fn\">as_fd</a>(&amp;self) -&gt; <a class=\"struct\" href=\"devela/_dep/_std/os/fd/struct.BorrowedFd.html\" title=\"struct devela::_dep::_std::os::fd::BorrowedFd\">BorrowedFd</a>&lt;'_&gt;</h4></section></summary><div class='docblock'>Borrows the file descriptor. <a href=\"devela/_dep/_std/os/fd/trait.AsFd.html#tymethod.as_fd\">Read more</a></div></details></div></details>","AsFd","devela::_dep::sdl2::timer::TimerCallback","devela::_dep::toml_edit::ArrayIntoIter","devela::_dep::toml_edit::ArrayIter","devela::_dep::toml_edit::ArrayIterMut","devela::_dep::toml_edit::ArrayOfTablesIntoIter","devela::_dep::toml_edit::ArrayOfTablesIter","devela::_dep::toml_edit::ArrayOfTablesIterMut","devela::_dep::toml_edit::InlineTableIntoIter","devela::_dep::toml_edit::InlineTableIter","devela::_dep::toml_edit::InlineTableIterMut","devela::_dep::toml_edit::IntoIter","devela::_dep::toml_edit::Iter","devela::_dep::toml_edit::IterMut"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsMut%3CT%3E-for-Box%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.5.0\">1.5.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/boxed.rs.html#2052\">Source</a></span><a href=\"#impl-AsMut%3CT%3E-for-Box%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"devela/code/trait.AsMut.html\" title=\"trait devela::code::AsMut\">AsMut</a>&lt;T&gt; for <a class=\"struct\" href=\"devela/all/struct.Box.html\" title=\"struct devela::all::Box\">Box</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"devela/_core/alloc/trait.Allocator.html\" title=\"trait devela::_core::alloc::Allocator\">Allocator</a>,\n    T: ?<a class=\"trait\" href=\"devela/all/trait.Sized.html\" title=\"trait devela::all::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/boxed.rs.html#2053\">Source</a><a href=\"#method.as_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/code/trait.AsMut.html#tymethod.as_mut\" class=\"fn\">as_mut</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut T</a></h4></section></summary><div class='docblock'>Converts this type into a mutable reference of the (usually inferred) input type.</div></details></div></details>","AsMut<T>","devela::_dep::sdl2::timer::TimerCallback","devela::_dep::toml_edit::ArrayIntoIter","devela::_dep::toml_edit::ArrayIter","devela::_dep::toml_edit::ArrayIterMut","devela::_dep::toml_edit::ArrayOfTablesIntoIter","devela::_dep::toml_edit::ArrayOfTablesIter","devela::_dep::toml_edit::ArrayOfTablesIterMut","devela::_dep::toml_edit::InlineTableIntoIter","devela::_dep::toml_edit::InlineTableIter","devela::_dep::toml_edit::InlineTableIterMut","devela::_dep::toml_edit::IntoIter","devela::_dep::toml_edit::Iter","devela::_dep::toml_edit::IterMut"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsRawFd-for-Box%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.63.0\">1.63.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/std/os/fd/raw.rs.html#281\">Source</a></span><a href=\"#impl-AsRawFd-for-Box%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"devela/_dep/_std/os/fd/trait.AsRawFd.html\" title=\"trait devela::_dep::_std::os::fd::AsRawFd\">AsRawFd</a> for <a class=\"struct\" href=\"devela/all/struct.Box.html\" title=\"struct devela::all::Box\">Box</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"devela/_dep/_std/os/fd/trait.AsRawFd.html\" title=\"trait devela::_dep::_std::os::fd::AsRawFd\">AsRawFd</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_raw_fd\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/std/os/fd/raw.rs.html#283\">Source</a><a href=\"#method.as_raw_fd\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/_dep/_std/os/fd/trait.AsRawFd.html#tymethod.as_raw_fd\" class=\"fn\">as_raw_fd</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h4></section></summary><div class='docblock'>Extracts the raw file descriptor. <a href=\"devela/_dep/_std/os/fd/trait.AsRawFd.html#tymethod.as_raw_fd\">Read more</a></div></details></div></details>","AsRawFd","devela::_dep::sdl2::timer::TimerCallback","devela::_dep::toml_edit::ArrayIntoIter","devela::_dep::toml_edit::ArrayIter","devela::_dep::toml_edit::ArrayIterMut","devela::_dep::toml_edit::ArrayOfTablesIntoIter","devela::_dep::toml_edit::ArrayOfTablesIter","devela::_dep::toml_edit::ArrayOfTablesIterMut","devela::_dep::toml_edit::InlineTableIntoIter","devela::_dep::toml_edit::InlineTableIter","devela::_dep::toml_edit::InlineTableIterMut","devela::_dep::toml_edit::IntoIter","devela::_dep::toml_edit::Iter","devela::_dep::toml_edit::IterMut"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsRef%3CT%3E-for-Box%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.5.0\">1.5.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/boxed.rs.html#2045\">Source</a></span><a href=\"#impl-AsRef%3CT%3E-for-Box%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"devela/code/trait.AsRef.html\" title=\"trait devela::code::AsRef\">AsRef</a>&lt;T&gt; for <a class=\"struct\" href=\"devela/all/struct.Box.html\" title=\"struct devela::all::Box\">Box</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"devela/_core/alloc/trait.Allocator.html\" title=\"trait devela::_core::alloc::Allocator\">Allocator</a>,\n    T: ?<a class=\"trait\" href=\"devela/all/trait.Sized.html\" title=\"trait devela::all::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_ref\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/boxed.rs.html#2046\">Source</a><a href=\"#method.as_ref\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/code/trait.AsRef.html#tymethod.as_ref\" class=\"fn\">as_ref</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;T</a></h4></section></summary><div class='docblock'>Converts this type into a shared reference of the (usually inferred) input type.</div></details></div></details>","AsRef<T>","devela::_dep::sdl2::timer::TimerCallback","devela::_dep::toml_edit::ArrayIntoIter","devela::_dep::toml_edit::ArrayIter","devela::_dep::toml_edit::ArrayIterMut","devela::_dep::toml_edit::ArrayOfTablesIntoIter","devela::_dep::toml_edit::ArrayOfTablesIter","devela::_dep::toml_edit::ArrayOfTablesIterMut","devela::_dep::toml_edit::InlineTableIntoIter","devela::_dep::toml_edit::InlineTableIter","devela::_dep::toml_edit::InlineTableIterMut","devela::_dep::toml_edit::IntoIter","devela::_dep::toml_edit::Iter","devela::_dep::toml_edit::IterMut"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsyncBufRead-for-Box%3CT%3E\" class=\"impl\"><a href=\"#impl-AsyncBufRead-for-Box%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"devela/_dep/tokio/io/trait.AsyncBufRead.html\" title=\"trait devela::_dep::tokio::io::AsyncBufRead\">AsyncBufRead</a> for <a class=\"struct\" href=\"devela/all/struct.Box.html\" title=\"struct devela::all::Box\">Box</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"devela/_dep/tokio/io/trait.AsyncBufRead.html\" title=\"trait devela::_dep::tokio::io::AsyncBufRead\">AsyncBufRead</a> + <a class=\"trait\" href=\"devela/all/trait.Unpin.html\" title=\"trait devela::all::Unpin\">Unpin</a> + ?<a class=\"trait\" href=\"devela/all/trait.Sized.html\" title=\"trait devela::all::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.poll_fill_buf\" class=\"method trait-impl\"><a href=\"#method.poll_fill_buf\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/_dep/tokio/io/trait.AsyncBufRead.html#tymethod.poll_fill_buf\" class=\"fn\">poll_fill_buf</a>(\n    self: <a class=\"struct\" href=\"devela/all/struct.Pin.html\" title=\"struct devela::all::Pin\">Pin</a>&lt;&amp;mut <a class=\"struct\" href=\"devela/all/struct.Box.html\" title=\"struct devela::all::Box\">Box</a>&lt;T&gt;&gt;,\n    cx: &amp;mut <a class=\"struct\" href=\"devela/all/struct.TaskContext.html\" title=\"struct devela::all::TaskContext\">Context</a>&lt;'_&gt;,\n) -&gt; <a class=\"enum\" href=\"devela/all/enum.TaskPoll.html\" title=\"enum devela::all::TaskPoll\">Poll</a>&lt;<a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;&amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>], <a class=\"struct\" href=\"devela/all/struct.IoError.html\" title=\"struct devela::all::IoError\">Error</a>&gt;&gt;</h4></section></summary><div class='docblock'>Attempts to return the contents of the internal buffer, filling it with more data\nfrom the inner reader if it is empty. <a href=\"devela/_dep/tokio/io/trait.AsyncBufRead.html#tymethod.poll_fill_buf\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.consume\" class=\"method trait-impl\"><a href=\"#method.consume\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/_dep/tokio/io/trait.AsyncBufRead.html#tymethod.consume\" class=\"fn\">consume</a>(self: <a class=\"struct\" href=\"devela/all/struct.Pin.html\" title=\"struct devela::all::Pin\">Pin</a>&lt;&amp;mut <a class=\"struct\" href=\"devela/all/struct.Box.html\" title=\"struct devela::all::Box\">Box</a>&lt;T&gt;&gt;, amt: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>)</h4></section></summary><div class='docblock'>Tells this buffer that <code>amt</code> bytes have been consumed from the buffer,\nso they should no longer be returned in calls to <a href=\"devela/_dep/tokio/io/trait.AsyncRead.html#tymethod.poll_read\" title=\"method devela::_dep::tokio::io::AsyncRead::poll_read\"><code>poll_read</code></a>. <a href=\"devela/_dep/tokio/io/trait.AsyncBufRead.html#tymethod.consume\">Read more</a></div></details></div></details>","AsyncBufRead","devela::_dep::sdl2::timer::TimerCallback","devela::_dep::toml_edit::ArrayIntoIter","devela::_dep::toml_edit::ArrayIter","devela::_dep::toml_edit::ArrayIterMut","devela::_dep::toml_edit::ArrayOfTablesIntoIter","devela::_dep::toml_edit::ArrayOfTablesIter","devela::_dep::toml_edit::ArrayOfTablesIterMut","devela::_dep::toml_edit::InlineTableIntoIter","devela::_dep::toml_edit::InlineTableIter","devela::_dep::toml_edit::InlineTableIterMut","devela::_dep::toml_edit::IntoIter","devela::_dep::toml_edit::Iter","devela::_dep::toml_edit::IterMut"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsyncFn%3CArgs%3E-for-Box%3CF,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.85.0\">1.85.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/boxed.rs.html#2012\">Source</a></span><a href=\"#impl-AsyncFn%3CArgs%3E-for-Box%3CF,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;Args, F, A&gt; <a class=\"trait\" href=\"devela/_core/ops/trait.AsyncFn.html\" title=\"trait devela::_core::ops::AsyncFn\">AsyncFn</a>&lt;Args&gt; for <a class=\"struct\" href=\"devela/all/struct.Box.html\" title=\"struct devela::all::Box\">Box</a>&lt;F, A&gt;<div class=\"where\">where\n    Args: <a class=\"trait\" href=\"devela/_core/marker/trait.Tuple.html\" title=\"trait devela::_core::marker::Tuple\">Tuple</a>,\n    F: <a class=\"trait\" href=\"devela/_core/ops/trait.AsyncFn.html\" title=\"trait devela::_core::ops::AsyncFn\">AsyncFn</a>&lt;Args&gt; + ?<a class=\"trait\" href=\"devela/all/trait.Sized.html\" title=\"trait devela::all::Sized\">Sized</a>,\n    A: <a class=\"trait\" href=\"devela/_core/alloc/trait.Allocator.html\" title=\"trait devela::_core::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.async_call\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/boxed.rs.html#2013\">Source</a><a href=\"#method.async_call\" class=\"anchor\">§</a><h4 class=\"code-header\">extern &quot;rust-call&quot; fn <a href=\"devela/_core/ops/trait.AsyncFn.html#tymethod.async_call\" class=\"fn\">async_call</a>(\n    &amp;self,\n    args: Args,\n) -&gt; &lt;<a class=\"struct\" href=\"devela/all/struct.Box.html\" title=\"struct devela::all::Box\">Box</a>&lt;F, A&gt; as <a class=\"trait\" href=\"devela/_core/ops/trait.AsyncFnMut.html\" title=\"trait devela::_core::ops::AsyncFnMut\">AsyncFnMut</a>&lt;Args&gt;&gt;::<a class=\"associatedtype\" href=\"devela/_core/ops/trait.AsyncFnMut.html#associatedtype.CallRefFuture\" title=\"type devela::_core::ops::AsyncFnMut::CallRefFuture\">CallRefFuture</a>&lt;'_&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>async_fn_traits</code>)</span></div></span><div class='docblock'>Call the <a href=\"devela/_core/ops/trait.AsyncFn.html\" title=\"trait devela::_core::ops::AsyncFn\"><code>AsyncFn</code></a>, returning a future which may borrow from the called closure.</div></details></div></details>","AsyncFn<Args>","devela::_dep::sdl2::timer::TimerCallback","devela::_dep::toml_edit::ArrayIntoIter","devela::_dep::toml_edit::ArrayIter","devela::_dep::toml_edit::ArrayIterMut","devela::_dep::toml_edit::ArrayOfTablesIntoIter","devela::_dep::toml_edit::ArrayOfTablesIter","devela::_dep::toml_edit::ArrayOfTablesIterMut","devela::_dep::toml_edit::InlineTableIntoIter","devela::_dep::toml_edit::InlineTableIter","devela::_dep::toml_edit::InlineTableIterMut","devela::_dep::toml_edit::IntoIter","devela::_dep::toml_edit::Iter","devela::_dep::toml_edit::IterMut"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsyncFnMut%3CArgs%3E-for-Box%3CF,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.85.0\">1.85.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/boxed.rs.html#2000\">Source</a></span><a href=\"#impl-AsyncFnMut%3CArgs%3E-for-Box%3CF,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;Args, F, A&gt; <a class=\"trait\" href=\"devela/_core/ops/trait.AsyncFnMut.html\" title=\"trait devela::_core::ops::AsyncFnMut\">AsyncFnMut</a>&lt;Args&gt; for <a class=\"struct\" href=\"devela/all/struct.Box.html\" title=\"struct devela::all::Box\">Box</a>&lt;F, A&gt;<div class=\"where\">where\n    Args: <a class=\"trait\" href=\"devela/_core/marker/trait.Tuple.html\" title=\"trait devela::_core::marker::Tuple\">Tuple</a>,\n    F: <a class=\"trait\" href=\"devela/_core/ops/trait.AsyncFnMut.html\" title=\"trait devela::_core::ops::AsyncFnMut\">AsyncFnMut</a>&lt;Args&gt; + ?<a class=\"trait\" href=\"devela/all/trait.Sized.html\" title=\"trait devela::all::Sized\">Sized</a>,\n    A: <a class=\"trait\" href=\"devela/_core/alloc/trait.Allocator.html\" title=\"trait devela::_core::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.CallRefFuture\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/boxed.rs.html#2001\">Source</a><a href=\"#associatedtype.CallRefFuture\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"devela/_core/ops/trait.AsyncFnMut.html#associatedtype.CallRefFuture\" class=\"associatedtype\">CallRefFuture</a>&lt;'a&gt; = &lt;F as <a class=\"trait\" href=\"devela/_core/ops/trait.AsyncFnMut.html\" title=\"trait devela::_core::ops::AsyncFnMut\">AsyncFnMut</a>&lt;Args&gt;&gt;::<a class=\"associatedtype\" href=\"devela/_core/ops/trait.AsyncFnMut.html#associatedtype.CallRefFuture\" title=\"type devela::_core::ops::AsyncFnMut::CallRefFuture\">CallRefFuture</a>&lt;'a&gt;\n<span class=\"where\">where\n    <a class=\"struct\" href=\"devela/all/struct.Box.html\" title=\"struct devela::all::Box\">Box</a>&lt;F, A&gt;: 'a</span></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>async_fn_traits</code>)</span></div></span><div class='docblock'>Future returned by <a href=\"devela/_core/ops/trait.AsyncFnMut.html#tymethod.async_call_mut\" title=\"method devela::_core::ops::AsyncFnMut::async_call_mut\"><code>AsyncFnMut::async_call_mut</code></a> and <a href=\"devela/_core/ops/trait.AsyncFn.html#tymethod.async_call\" title=\"method devela::_core::ops::AsyncFn::async_call\"><code>AsyncFn::async_call</code></a>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.async_call_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/boxed.rs.html#2006\">Source</a><a href=\"#method.async_call_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">extern &quot;rust-call&quot; fn <a href=\"devela/_core/ops/trait.AsyncFnMut.html#tymethod.async_call_mut\" class=\"fn\">async_call_mut</a>(\n    &amp;mut self,\n    args: Args,\n) -&gt; &lt;<a class=\"struct\" href=\"devela/all/struct.Box.html\" title=\"struct devela::all::Box\">Box</a>&lt;F, A&gt; as <a class=\"trait\" href=\"devela/_core/ops/trait.AsyncFnMut.html\" title=\"trait devela::_core::ops::AsyncFnMut\">AsyncFnMut</a>&lt;Args&gt;&gt;::<a class=\"associatedtype\" href=\"devela/_core/ops/trait.AsyncFnMut.html#associatedtype.CallRefFuture\" title=\"type devela::_core::ops::AsyncFnMut::CallRefFuture\">CallRefFuture</a>&lt;'_&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>async_fn_traits</code>)</span></div></span><div class='docblock'>Call the <a href=\"devela/_core/ops/trait.AsyncFnMut.html\" title=\"trait devela::_core::ops::AsyncFnMut\"><code>AsyncFnMut</code></a>, returning a future which may borrow from the called closure.</div></details></div></details>","AsyncFnMut<Args>","devela::_dep::sdl2::timer::TimerCallback","devela::_dep::toml_edit::ArrayIntoIter","devela::_dep::toml_edit::ArrayIter","devela::_dep::toml_edit::ArrayIterMut","devela::_dep::toml_edit::ArrayOfTablesIntoIter","devela::_dep::toml_edit::ArrayOfTablesIter","devela::_dep::toml_edit::ArrayOfTablesIterMut","devela::_dep::toml_edit::InlineTableIntoIter","devela::_dep::toml_edit::InlineTableIter","devela::_dep::toml_edit::InlineTableIterMut","devela::_dep::toml_edit::IntoIter","devela::_dep::toml_edit::Iter","devela::_dep::toml_edit::IterMut"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsyncFnOnce%3CArgs%3E-for-Box%3CF,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.85.0\">1.85.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/boxed.rs.html#1990\">Source</a></span><a href=\"#impl-AsyncFnOnce%3CArgs%3E-for-Box%3CF,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;Args, F, A&gt; <a class=\"trait\" href=\"devela/_core/ops/trait.AsyncFnOnce.html\" title=\"trait devela::_core::ops::AsyncFnOnce\">AsyncFnOnce</a>&lt;Args&gt; for <a class=\"struct\" href=\"devela/all/struct.Box.html\" title=\"struct devela::all::Box\">Box</a>&lt;F, A&gt;<div class=\"where\">where\n    Args: <a class=\"trait\" href=\"devela/_core/marker/trait.Tuple.html\" title=\"trait devela::_core::marker::Tuple\">Tuple</a>,\n    F: <a class=\"trait\" href=\"devela/_core/ops/trait.AsyncFnOnce.html\" title=\"trait devela::_core::ops::AsyncFnOnce\">AsyncFnOnce</a>&lt;Args&gt; + ?<a class=\"trait\" href=\"devela/all/trait.Sized.html\" title=\"trait devela::all::Sized\">Sized</a>,\n    A: <a class=\"trait\" href=\"devela/_core/alloc/trait.Allocator.html\" title=\"trait devela::_core::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/boxed.rs.html#1991\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"devela/_core/ops/trait.AsyncFnOnce.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;F as <a class=\"trait\" href=\"devela/_core/ops/trait.AsyncFnOnce.html\" title=\"trait devela::_core::ops::AsyncFnOnce\">AsyncFnOnce</a>&lt;Args&gt;&gt;::<a class=\"associatedtype\" href=\"devela/_core/ops/trait.AsyncFnOnce.html#associatedtype.Output\" title=\"type devela::_core::ops::AsyncFnOnce::Output\">Output</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>async_fn_traits</code>)</span></div></span><div class='docblock'>Output type of the called closure’s future.</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.CallOnceFuture\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/boxed.rs.html#1992\">Source</a><a href=\"#associatedtype.CallOnceFuture\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"devela/_core/ops/trait.AsyncFnOnce.html#associatedtype.CallOnceFuture\" class=\"associatedtype\">CallOnceFuture</a> = &lt;F as <a class=\"trait\" href=\"devela/_core/ops/trait.AsyncFnOnce.html\" title=\"trait devela::_core::ops::AsyncFnOnce\">AsyncFnOnce</a>&lt;Args&gt;&gt;::<a class=\"associatedtype\" href=\"devela/_core/ops/trait.AsyncFnOnce.html#associatedtype.CallOnceFuture\" title=\"type devela::_core::ops::AsyncFnOnce::CallOnceFuture\">CallOnceFuture</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>async_fn_traits</code>)</span></div></span><div class='docblock'>Future returned by <a href=\"devela/_core/ops/trait.AsyncFnOnce.html#tymethod.async_call_once\" title=\"method devela::_core::ops::AsyncFnOnce::async_call_once\"><code>AsyncFnOnce::async_call_once</code></a>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.async_call_once\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/boxed.rs.html#1994\">Source</a><a href=\"#method.async_call_once\" class=\"anchor\">§</a><h4 class=\"code-header\">extern &quot;rust-call&quot; fn <a href=\"devela/_core/ops/trait.AsyncFnOnce.html#tymethod.async_call_once\" class=\"fn\">async_call_once</a>(\n    self,\n    args: Args,\n) -&gt; &lt;<a class=\"struct\" href=\"devela/all/struct.Box.html\" title=\"struct devela::all::Box\">Box</a>&lt;F, A&gt; as <a class=\"trait\" href=\"devela/_core/ops/trait.AsyncFnOnce.html\" title=\"trait devela::_core::ops::AsyncFnOnce\">AsyncFnOnce</a>&lt;Args&gt;&gt;::<a class=\"associatedtype\" href=\"devela/_core/ops/trait.AsyncFnOnce.html#associatedtype.CallOnceFuture\" title=\"type devela::_core::ops::AsyncFnOnce::CallOnceFuture\">CallOnceFuture</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>async_fn_traits</code>)</span></div></span><div class='docblock'>Call the <a href=\"devela/_core/ops/trait.AsyncFnOnce.html\" title=\"trait devela::_core::ops::AsyncFnOnce\"><code>AsyncFnOnce</code></a>, returning a future which may move out of the called closure.</div></details></div></details>","AsyncFnOnce<Args>","devela::_dep::sdl2::timer::TimerCallback","devela::_dep::toml_edit::ArrayIntoIter","devela::_dep::toml_edit::ArrayIter","devela::_dep::toml_edit::ArrayIterMut","devela::_dep::toml_edit::ArrayOfTablesIntoIter","devela::_dep::toml_edit::ArrayOfTablesIter","devela::_dep::toml_edit::ArrayOfTablesIterMut","devela::_dep::toml_edit::InlineTableIntoIter","devela::_dep::toml_edit::InlineTableIter","devela::_dep::toml_edit::InlineTableIterMut","devela::_dep::toml_edit::IntoIter","devela::_dep::toml_edit::Iter","devela::_dep::toml_edit::IterMut"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsyncIterator-for-Box%3CS%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/boxed/iter.rs.html#83\">Source</a><a href=\"#impl-AsyncIterator-for-Box%3CS%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;S&gt; <a class=\"trait\" href=\"devela/_core/async_iter/trait.AsyncIterator.html\" title=\"trait devela::_core::async_iter::AsyncIterator\">AsyncIterator</a> for <a class=\"struct\" href=\"devela/all/struct.Box.html\" title=\"struct devela::all::Box\">Box</a>&lt;S&gt;<div class=\"where\">where\n    S: <a class=\"trait\" href=\"devela/_core/async_iter/trait.AsyncIterator.html\" title=\"trait devela::_core::async_iter::AsyncIterator\">AsyncIterator</a> + <a class=\"trait\" href=\"devela/all/trait.Unpin.html\" title=\"trait devela::all::Unpin\">Unpin</a> + ?<a class=\"trait\" href=\"devela/all/trait.Sized.html\" title=\"trait devela::all::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Item\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/boxed/iter.rs.html#84\">Source</a><a href=\"#associatedtype.Item\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"devela/_core/async_iter/trait.AsyncIterator.html#associatedtype.Item\" class=\"associatedtype\">Item</a> = &lt;S as <a class=\"trait\" href=\"devela/_core/async_iter/trait.AsyncIterator.html\" title=\"trait devela::_core::async_iter::AsyncIterator\">AsyncIterator</a>&gt;::<a class=\"associatedtype\" href=\"devela/_core/async_iter/trait.AsyncIterator.html#associatedtype.Item\" title=\"type devela::_core::async_iter::AsyncIterator::Item\">Item</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>async_iterator</code>)</span></div></span><div class='docblock'>The type of items yielded by the async iterator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.poll_next\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/boxed/iter.rs.html#86\">Source</a><a href=\"#method.poll_next\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/_core/async_iter/trait.AsyncIterator.html#tymethod.poll_next\" class=\"fn\">poll_next</a>(\n    self: <a class=\"struct\" href=\"devela/all/struct.Pin.html\" title=\"struct devela::all::Pin\">Pin</a>&lt;&amp;mut <a class=\"struct\" href=\"devela/all/struct.Box.html\" title=\"struct devela::all::Box\">Box</a>&lt;S&gt;&gt;,\n    cx: &amp;mut <a class=\"struct\" href=\"devela/all/struct.TaskContext.html\" title=\"struct devela::all::TaskContext\">Context</a>&lt;'_&gt;,\n) -&gt; <a class=\"enum\" href=\"devela/all/enum.TaskPoll.html\" title=\"enum devela::all::TaskPoll\">Poll</a>&lt;<a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;&lt;<a class=\"struct\" href=\"devela/all/struct.Box.html\" title=\"struct devela::all::Box\">Box</a>&lt;S&gt; as <a class=\"trait\" href=\"devela/_core/async_iter/trait.AsyncIterator.html\" title=\"trait devela::_core::async_iter::AsyncIterator\">AsyncIterator</a>&gt;::<a class=\"associatedtype\" href=\"devela/_core/async_iter/trait.AsyncIterator.html#associatedtype.Item\" title=\"type devela::_core::async_iter::AsyncIterator::Item\">Item</a>&gt;&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>async_iterator</code>)</span></div></span><div class='docblock'>Attempts to pull out the next value of this async iterator, registering the\ncurrent task for wakeup if the value is not yet available, and returning\n<code>None</code> if the async iterator is exhausted. <a href=\"devela/_core/async_iter/trait.AsyncIterator.html#tymethod.poll_next\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.size_hint\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/boxed/iter.rs.html#90\">Source</a><a href=\"#method.size_hint\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/_core/async_iter/trait.AsyncIterator.html#method.size_hint\" class=\"fn\">size_hint</a>(&amp;self) -&gt; (<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, <a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt;) <a href=\"#\" class=\"tooltip\" data-notable-ty=\"(usize, Option&lt;usize&gt;)\">ⓘ</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>async_iterator</code>)</span></div></span><div class='docblock'>Returns the bounds on the remaining length of the async iterator. <a href=\"devela/_core/async_iter/trait.AsyncIterator.html#method.size_hint\">Read more</a></div></details></div></details>","AsyncIterator","devela::_dep::sdl2::timer::TimerCallback","devela::_dep::toml_edit::ArrayIntoIter","devela::_dep::toml_edit::ArrayIter","devela::_dep::toml_edit::ArrayIterMut","devela::_dep::toml_edit::ArrayOfTablesIntoIter","devela::_dep::toml_edit::ArrayOfTablesIter","devela::_dep::toml_edit::ArrayOfTablesIterMut","devela::_dep::toml_edit::InlineTableIntoIter","devela::_dep::toml_edit::InlineTableIter","devela::_dep::toml_edit::InlineTableIterMut","devela::_dep::toml_edit::IntoIter","devela::_dep::toml_edit::Iter","devela::_dep::toml_edit::IterMut"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsyncRead-for-Box%3CT%3E\" class=\"impl\"><a href=\"#impl-AsyncRead-for-Box%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"devela/_dep/tokio/io/trait.AsyncRead.html\" title=\"trait devela::_dep::tokio::io::AsyncRead\">AsyncRead</a> for <a class=\"struct\" href=\"devela/all/struct.Box.html\" title=\"struct devela::all::Box\">Box</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"devela/_dep/tokio/io/trait.AsyncRead.html\" title=\"trait devela::_dep::tokio::io::AsyncRead\">AsyncRead</a> + <a class=\"trait\" href=\"devela/all/trait.Unpin.html\" title=\"trait devela::all::Unpin\">Unpin</a> + ?<a class=\"trait\" href=\"devela/all/trait.Sized.html\" title=\"trait devela::all::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.poll_read\" class=\"method trait-impl\"><a href=\"#method.poll_read\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/_dep/tokio/io/trait.AsyncRead.html#tymethod.poll_read\" class=\"fn\">poll_read</a>(\n    self: <a class=\"struct\" href=\"devela/all/struct.Pin.html\" title=\"struct devela::all::Pin\">Pin</a>&lt;&amp;mut <a class=\"struct\" href=\"devela/all/struct.Box.html\" title=\"struct devela::all::Box\">Box</a>&lt;T&gt;&gt;,\n    cx: &amp;mut <a class=\"struct\" href=\"devela/all/struct.TaskContext.html\" title=\"struct devela::all::TaskContext\">Context</a>&lt;'_&gt;,\n    buf: &amp;mut <a class=\"struct\" href=\"devela/_dep/tokio/io/struct.ReadBuf.html\" title=\"struct devela::_dep::tokio::io::ReadBuf\">ReadBuf</a>&lt;'_&gt;,\n) -&gt; <a class=\"enum\" href=\"devela/all/enum.TaskPoll.html\" title=\"enum devela::all::TaskPoll\">Poll</a>&lt;<a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"devela/all/struct.IoError.html\" title=\"struct devela::all::IoError\">Error</a>&gt;&gt;</h4></section></summary><div class='docblock'>Attempts to read from the <code>AsyncRead</code> into <code>buf</code>. <a href=\"devela/_dep/tokio/io/trait.AsyncRead.html#tymethod.poll_read\">Read more</a></div></details></div></details>","AsyncRead","devela::_dep::sdl2::timer::TimerCallback","devela::_dep::toml_edit::ArrayIntoIter","devela::_dep::toml_edit::ArrayIter","devela::_dep::toml_edit::ArrayIterMut","devela::_dep::toml_edit::ArrayOfTablesIntoIter","devela::_dep::toml_edit::ArrayOfTablesIter","devela::_dep::toml_edit::ArrayOfTablesIterMut","devela::_dep::toml_edit::InlineTableIntoIter","devela::_dep::toml_edit::InlineTableIter","devela::_dep::toml_edit::InlineTableIterMut","devela::_dep::toml_edit::IntoIter","devela::_dep::toml_edit::Iter","devela::_dep::toml_edit::IterMut"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsyncSeek-for-Box%3CT%3E\" class=\"impl\"><a href=\"#impl-AsyncSeek-for-Box%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"devela/_dep/tokio/io/trait.AsyncSeek.html\" title=\"trait devela::_dep::tokio::io::AsyncSeek\">AsyncSeek</a> for <a class=\"struct\" href=\"devela/all/struct.Box.html\" title=\"struct devela::all::Box\">Box</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"devela/_dep/tokio/io/trait.AsyncSeek.html\" title=\"trait devela::_dep::tokio::io::AsyncSeek\">AsyncSeek</a> + <a class=\"trait\" href=\"devela/all/trait.Unpin.html\" title=\"trait devela::all::Unpin\">Unpin</a> + ?<a class=\"trait\" href=\"devela/all/trait.Sized.html\" title=\"trait devela::all::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.start_seek\" class=\"method trait-impl\"><a href=\"#method.start_seek\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/_dep/tokio/io/trait.AsyncSeek.html#tymethod.start_seek\" class=\"fn\">start_seek</a>(self: <a class=\"struct\" href=\"devela/all/struct.Pin.html\" title=\"struct devela::all::Pin\">Pin</a>&lt;&amp;mut <a class=\"struct\" href=\"devela/all/struct.Box.html\" title=\"struct devela::all::Box\">Box</a>&lt;T&gt;&gt;, pos: <a class=\"enum\" href=\"devela/_dep/_std/io/enum.SeekFrom.html\" title=\"enum devela::_dep::_std::io::SeekFrom\">SeekFrom</a>) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"devela/all/struct.IoError.html\" title=\"struct devela::all::IoError\">Error</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;(), Error&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Attempts to seek to an offset, in bytes, in a stream. <a href=\"devela/_dep/tokio/io/trait.AsyncSeek.html#tymethod.start_seek\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.poll_complete\" class=\"method trait-impl\"><a href=\"#method.poll_complete\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/_dep/tokio/io/trait.AsyncSeek.html#tymethod.poll_complete\" class=\"fn\">poll_complete</a>(\n    self: <a class=\"struct\" href=\"devela/all/struct.Pin.html\" title=\"struct devela::all::Pin\">Pin</a>&lt;&amp;mut <a class=\"struct\" href=\"devela/all/struct.Box.html\" title=\"struct devela::all::Box\">Box</a>&lt;T&gt;&gt;,\n    cx: &amp;mut <a class=\"struct\" href=\"devela/all/struct.TaskContext.html\" title=\"struct devela::all::TaskContext\">Context</a>&lt;'_&gt;,\n) -&gt; <a class=\"enum\" href=\"devela/all/enum.TaskPoll.html\" title=\"enum devela::all::TaskPoll\">Poll</a>&lt;<a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u64.html\">u64</a>, <a class=\"struct\" href=\"devela/all/struct.IoError.html\" title=\"struct devela::all::IoError\">Error</a>&gt;&gt;</h4></section></summary><div class='docblock'>Waits for a seek operation to complete. <a href=\"devela/_dep/tokio/io/trait.AsyncSeek.html#tymethod.poll_complete\">Read more</a></div></details></div></details>","AsyncSeek","devela::_dep::sdl2::timer::TimerCallback","devela::_dep::toml_edit::ArrayIntoIter","devela::_dep::toml_edit::ArrayIter","devela::_dep::toml_edit::ArrayIterMut","devela::_dep::toml_edit::ArrayOfTablesIntoIter","devela::_dep::toml_edit::ArrayOfTablesIter","devela::_dep::toml_edit::ArrayOfTablesIterMut","devela::_dep::toml_edit::InlineTableIntoIter","devela::_dep::toml_edit::InlineTableIter","devela::_dep::toml_edit::InlineTableIterMut","devela::_dep::toml_edit::IntoIter","devela::_dep::toml_edit::Iter","devela::_dep::toml_edit::IterMut"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsyncWrite-for-Box%3CT%3E\" class=\"impl\"><a href=\"#impl-AsyncWrite-for-Box%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"devela/_dep/tokio/io/trait.AsyncWrite.html\" title=\"trait devela::_dep::tokio::io::AsyncWrite\">AsyncWrite</a> for <a class=\"struct\" href=\"devela/all/struct.Box.html\" title=\"struct devela::all::Box\">Box</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"devela/_dep/tokio/io/trait.AsyncWrite.html\" title=\"trait devela::_dep::tokio::io::AsyncWrite\">AsyncWrite</a> + <a class=\"trait\" href=\"devela/all/trait.Unpin.html\" title=\"trait devela::all::Unpin\">Unpin</a> + ?<a class=\"trait\" href=\"devela/all/trait.Sized.html\" title=\"trait devela::all::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.poll_write\" class=\"method trait-impl\"><a href=\"#method.poll_write\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/_dep/tokio/io/trait.AsyncWrite.html#tymethod.poll_write\" class=\"fn\">poll_write</a>(\n    self: <a class=\"struct\" href=\"devela/all/struct.Pin.html\" title=\"struct devela::all::Pin\">Pin</a>&lt;&amp;mut <a class=\"struct\" href=\"devela/all/struct.Box.html\" title=\"struct devela::all::Box\">Box</a>&lt;T&gt;&gt;,\n    cx: &amp;mut <a class=\"struct\" href=\"devela/all/struct.TaskContext.html\" title=\"struct devela::all::TaskContext\">Context</a>&lt;'_&gt;,\n    buf: &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>],\n) -&gt; <a class=\"enum\" href=\"devela/all/enum.TaskPoll.html\" title=\"enum devela::all::TaskPoll\">Poll</a>&lt;<a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, <a class=\"struct\" href=\"devela/all/struct.IoError.html\" title=\"struct devela::all::IoError\">Error</a>&gt;&gt;</h4></section></summary><div class='docblock'>Attempt to write bytes from <code>buf</code> into the object. <a href=\"devela/_dep/tokio/io/trait.AsyncWrite.html#tymethod.poll_write\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.poll_write_vectored\" class=\"method trait-impl\"><a href=\"#method.poll_write_vectored\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/_dep/tokio/io/trait.AsyncWrite.html#method.poll_write_vectored\" class=\"fn\">poll_write_vectored</a>(\n    self: <a class=\"struct\" href=\"devela/all/struct.Pin.html\" title=\"struct devela::all::Pin\">Pin</a>&lt;&amp;mut <a class=\"struct\" href=\"devela/all/struct.Box.html\" title=\"struct devela::all::Box\">Box</a>&lt;T&gt;&gt;,\n    cx: &amp;mut <a class=\"struct\" href=\"devela/all/struct.TaskContext.html\" title=\"struct devela::all::TaskContext\">Context</a>&lt;'_&gt;,\n    bufs: &amp;[<a class=\"struct\" href=\"devela/all/struct.IoSlice.html\" title=\"struct devela::all::IoSlice\">IoSlice</a>&lt;'_&gt;],\n) -&gt; <a class=\"enum\" href=\"devela/all/enum.TaskPoll.html\" title=\"enum devela::all::TaskPoll\">Poll</a>&lt;<a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, <a class=\"struct\" href=\"devela/all/struct.IoError.html\" title=\"struct devela::all::IoError\">Error</a>&gt;&gt;</h4></section></summary><div class='docblock'>Like <a href=\"devela/_dep/tokio/io/trait.AsyncWrite.html#tymethod.poll_write\" title=\"method devela::_dep::tokio::io::AsyncWrite::poll_write\"><code>poll_write</code></a>, except that it writes from a slice of buffers. <a href=\"devela/_dep/tokio/io/trait.AsyncWrite.html#method.poll_write_vectored\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_write_vectored\" class=\"method trait-impl\"><a href=\"#method.is_write_vectored\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/_dep/tokio/io/trait.AsyncWrite.html#method.is_write_vectored\" class=\"fn\">is_write_vectored</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Determines if this writer has an efficient <a href=\"devela/_dep/tokio/io/trait.AsyncWrite.html#method.poll_write_vectored\" title=\"method devela::_dep::tokio::io::AsyncWrite::poll_write_vectored\"><code>poll_write_vectored</code></a>\nimplementation. <a href=\"devela/_dep/tokio/io/trait.AsyncWrite.html#method.is_write_vectored\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.poll_flush\" class=\"method trait-impl\"><a href=\"#method.poll_flush\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/_dep/tokio/io/trait.AsyncWrite.html#tymethod.poll_flush\" class=\"fn\">poll_flush</a>(\n    self: <a class=\"struct\" href=\"devela/all/struct.Pin.html\" title=\"struct devela::all::Pin\">Pin</a>&lt;&amp;mut <a class=\"struct\" href=\"devela/all/struct.Box.html\" title=\"struct devela::all::Box\">Box</a>&lt;T&gt;&gt;,\n    cx: &amp;mut <a class=\"struct\" href=\"devela/all/struct.TaskContext.html\" title=\"struct devela::all::TaskContext\">Context</a>&lt;'_&gt;,\n) -&gt; <a class=\"enum\" href=\"devela/all/enum.TaskPoll.html\" title=\"enum devela::all::TaskPoll\">Poll</a>&lt;<a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"devela/all/struct.IoError.html\" title=\"struct devela::all::IoError\">Error</a>&gt;&gt;</h4></section></summary><div class='docblock'>Attempts to flush the object, ensuring that any buffered data reach\ntheir destination. <a href=\"devela/_dep/tokio/io/trait.AsyncWrite.html#tymethod.poll_flush\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.poll_shutdown\" class=\"method trait-impl\"><a href=\"#method.poll_shutdown\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/_dep/tokio/io/trait.AsyncWrite.html#tymethod.poll_shutdown\" class=\"fn\">poll_shutdown</a>(\n    self: <a class=\"struct\" href=\"devela/all/struct.Pin.html\" title=\"struct devela::all::Pin\">Pin</a>&lt;&amp;mut <a class=\"struct\" href=\"devela/all/struct.Box.html\" title=\"struct devela::all::Box\">Box</a>&lt;T&gt;&gt;,\n    cx: &amp;mut <a class=\"struct\" href=\"devela/all/struct.TaskContext.html\" title=\"struct devela::all::TaskContext\">Context</a>&lt;'_&gt;,\n) -&gt; <a class=\"enum\" href=\"devela/all/enum.TaskPoll.html\" title=\"enum devela::all::TaskPoll\">Poll</a>&lt;<a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"devela/all/struct.IoError.html\" title=\"struct devela::all::IoError\">Error</a>&gt;&gt;</h4></section></summary><div class='docblock'>Initiates or attempts to shut down this writer, returning success when\nthe I/O connection has completely shut down. <a href=\"devela/_dep/tokio/io/trait.AsyncWrite.html#tymethod.poll_shutdown\">Read more</a></div></details></div></details>","AsyncWrite","devela::_dep::sdl2::timer::TimerCallback","devela::_dep::toml_edit::ArrayIntoIter","devela::_dep::toml_edit::ArrayIter","devela::_dep::toml_edit::ArrayIterMut","devela::_dep::toml_edit::ArrayOfTablesIntoIter","devela::_dep::toml_edit::ArrayOfTablesIter","devela::_dep::toml_edit::ArrayOfTablesIterMut","devela::_dep::toml_edit::InlineTableIntoIter","devela::_dep::toml_edit::InlineTableIter","devela::_dep::toml_edit::InlineTableIterMut","devela::_dep::toml_edit::IntoIter","devela::_dep::toml_edit::Iter","devela::_dep::toml_edit::IterMut"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Borrow%3CT%3E-for-Box%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.1.0\">1.1.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/boxed.rs.html#2031\">Source</a></span><a href=\"#impl-Borrow%3CT%3E-for-Box%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"devela/all/trait.Borrow.html\" title=\"trait devela::all::Borrow\">Borrow</a>&lt;T&gt; for <a class=\"struct\" href=\"devela/all/struct.Box.html\" title=\"struct devela::all::Box\">Box</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"devela/_core/alloc/trait.Allocator.html\" title=\"trait devela::_core::alloc::Allocator\">Allocator</a>,\n    T: ?<a class=\"trait\" href=\"devela/all/trait.Sized.html\" title=\"trait devela::all::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.borrow\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/boxed.rs.html#2032\">Source</a><a href=\"#method.borrow\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Borrow.html#tymethod.borrow\" class=\"fn\">borrow</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;T</a></h4></section></summary><div class='docblock'>Immutably borrows from an owned value. <a href=\"devela/all/trait.Borrow.html#tymethod.borrow\">Read more</a></div></details></div></details>","Borrow<T>","devela::_dep::sdl2::timer::TimerCallback","devela::_dep::toml_edit::ArrayIntoIter","devela::_dep::toml_edit::ArrayIter","devela::_dep::toml_edit::ArrayIterMut","devela::_dep::toml_edit::ArrayOfTablesIntoIter","devela::_dep::toml_edit::ArrayOfTablesIter","devela::_dep::toml_edit::ArrayOfTablesIterMut","devela::_dep::toml_edit::InlineTableIntoIter","devela::_dep::toml_edit::InlineTableIter","devela::_dep::toml_edit::InlineTableIterMut","devela::_dep::toml_edit::IntoIter","devela::_dep::toml_edit::Iter","devela::_dep::toml_edit::IterMut"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BorrowMut%3CT%3E-for-Box%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.1.0\">1.1.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/boxed.rs.html#2038\">Source</a></span><a href=\"#impl-BorrowMut%3CT%3E-for-Box%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"devela/all/trait.BorrowMut.html\" title=\"trait devela::all::BorrowMut\">BorrowMut</a>&lt;T&gt; for <a class=\"struct\" href=\"devela/all/struct.Box.html\" title=\"struct devela::all::Box\">Box</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"devela/_core/alloc/trait.Allocator.html\" title=\"trait devela::_core::alloc::Allocator\">Allocator</a>,\n    T: ?<a class=\"trait\" href=\"devela/all/trait.Sized.html\" title=\"trait devela::all::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.borrow_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/boxed.rs.html#2039\">Source</a><a href=\"#method.borrow_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.BorrowMut.html#tymethod.borrow_mut\" class=\"fn\">borrow_mut</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut T</a></h4></section></summary><div class='docblock'>Mutably borrows from an owned value. <a href=\"devela/all/trait.BorrowMut.html#tymethod.borrow_mut\">Read more</a></div></details></div></details>","BorrowMut<T>","devela::_dep::sdl2::timer::TimerCallback","devela::_dep::toml_edit::ArrayIntoIter","devela::_dep::toml_edit::ArrayIter","devela::_dep::toml_edit::ArrayIterMut","devela::_dep::toml_edit::ArrayOfTablesIntoIter","devela::_dep::toml_edit::ArrayOfTablesIter","devela::_dep::toml_edit::ArrayOfTablesIterMut","devela::_dep::toml_edit::InlineTableIntoIter","devela::_dep::toml_edit::InlineTableIter","devela::_dep::toml_edit::InlineTableIterMut","devela::_dep::toml_edit::IntoIter","devela::_dep::toml_edit::Iter","devela::_dep::toml_edit::IterMut"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Box%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/boxed.rs.html#244\">Source</a><a href=\"#impl-Box%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"struct\" href=\"devela/all/struct.Box.html\" title=\"struct devela::all::Box\">Box</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.new\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/boxed.rs.html#260\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"devela/all/struct.Box.html#tymethod.new\" class=\"fn\">new</a>(x: T) -&gt; <a class=\"struct\" href=\"devela/all/struct.Box.html\" title=\"struct devela::all::Box\">Box</a>&lt;T&gt;</h4></section><span class=\"item-info\"><div class=\"stab portability\">Available on <strong>crate feature <code>alloc</code></strong> only.</div></span></summary><div class=\"docblock\"><p>Allocates memory on the heap and then places <code>x</code> into it.</p>\n<p>This doesn’t actually allocate if <code>T</code> is zero-sized.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>five = Box::new(<span class=\"number\">5</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.new_uninit\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.82.0\">1.82.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/boxed.rs.html#280\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"devela/all/struct.Box.html#tymethod.new_uninit\" class=\"fn\">new_uninit</a>() -&gt; <a class=\"struct\" href=\"devela/all/struct.Box.html\" title=\"struct devela::all::Box\">Box</a>&lt;<a class=\"union\" href=\"devela/all/union.MaybeUninit.html\" title=\"union devela::all::MaybeUninit\">MaybeUninit</a>&lt;T&gt;&gt;</h4></section><span class=\"item-info\"><div class=\"stab portability\">Available on <strong>crate feature <code>alloc</code></strong> only.</div></span></summary><div class=\"docblock\"><p>Constructs a new box with uninitialized contents.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>five = Box::&lt;u32&gt;::new_uninit();\n<span class=\"comment\">// Deferred initialization:\n</span>five.write(<span class=\"number\">5</span>);\n<span class=\"kw\">let </span>five = <span class=\"kw\">unsafe </span>{ five.assume_init() };\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>five, <span class=\"number\">5</span>)</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.new_zeroed\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/boxed.rs.html#306\">Source</a><h4 class=\"code-header\">pub fn <a href=\"devela/all/struct.Box.html#tymethod.new_zeroed\" class=\"fn\">new_zeroed</a>() -&gt; <a class=\"struct\" href=\"devela/all/struct.Box.html\" title=\"struct devela::all::Box\">Box</a>&lt;<a class=\"union\" href=\"devela/all/union.MaybeUninit.html\" title=\"union devela::all::MaybeUninit\">MaybeUninit</a>&lt;T&gt;&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>new_zeroed_alloc</code>)</span></div><div class=\"stab portability\">Available on <strong>crate feature <code>alloc</code></strong> only.</div></span></summary><div class=\"docblock\"><p>Constructs a new <code>Box</code> with uninitialized contents, with the memory\nbeing filled with <code>0</code> bytes.</p>\n<p>See <a href=\"devela/all/union.MaybeUninit.html#method.zeroed\" title=\"associated function devela::all::MaybeUninit::zeroed\"><code>MaybeUninit::zeroed</code></a> for examples of correct and incorrect usage\nof this method.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(new_zeroed_alloc)]\n\n</span><span class=\"kw\">let </span>zero = Box::&lt;u32&gt;::new_zeroed();\n<span class=\"kw\">let </span>zero = <span class=\"kw\">unsafe </span>{ zero.assume_init() };\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>zero, <span class=\"number\">0</span>)</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.pin\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.33.0\">1.33.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/boxed.rs.html#321\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"devela/all/struct.Box.html#tymethod.pin\" class=\"fn\">pin</a>(x: T) -&gt; <a class=\"struct\" href=\"devela/all/struct.Pin.html\" title=\"struct devela::all::Pin\">Pin</a>&lt;<a class=\"struct\" href=\"devela/all/struct.Box.html\" title=\"struct devela::all::Box\">Box</a>&lt;T&gt;&gt;</h4></section><span class=\"item-info\"><div class=\"stab portability\">Available on <strong>crate feature <code>alloc</code></strong> only.</div></span></summary><div class=\"docblock\"><p>Constructs a new <code>Pin&lt;Box&lt;T&gt;&gt;</code>. If <code>T</code> does not implement <a href=\"devela/all/trait.Unpin.html\" title=\"trait devela::all::Unpin\"><code>Unpin</code></a>, then\n<code>x</code> will be pinned in memory and unable to be moved.</p>\n<p>Constructing and pinning of the <code>Box</code> can also be done in two steps: <code>Box::pin(x)</code>\ndoes the same as <code><a href=\"devela/all/struct.Box.html#method.into_pin\" title=\"associated function devela::all::Box::into_pin\">Box::into_pin</a>(<a href=\"devela/all/struct.Box.html#method.new\" title=\"associated function devela::all::Box::new\">Box::new</a>(x))</code>. Consider using\n<a href=\"devela/all/struct.Box.html#method.into_pin\" title=\"associated function devela::all::Box::into_pin\"><code>into_pin</code></a> if you already have a <code>Box&lt;T&gt;</code>, or if you want to\nconstruct a (pinned) <code>Box</code> in a different way than with <a href=\"devela/all/struct.Box.html#method.new\" title=\"associated function devela::all::Box::new\"><code>Box::new</code></a>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_new\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/boxed.rs.html#340\">Source</a><h4 class=\"code-header\">pub fn <a href=\"devela/all/struct.Box.html#tymethod.try_new\" class=\"fn\">try_new</a>(x: T) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"struct\" href=\"devela/all/struct.Box.html\" title=\"struct devela::all::Box\">Box</a>&lt;T&gt;, <a class=\"struct\" href=\"devela/_core/alloc/struct.AllocError.html\" title=\"struct devela::_core::alloc::AllocError\">AllocError</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;Box&lt;T&gt;, AllocError&gt;\">ⓘ</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>allocator_api</code>)</span></div><div class=\"stab portability\">Available on <strong>crate feature <code>alloc</code></strong> only.</div></span></summary><div class=\"docblock\"><p>Allocates memory on the heap then places <code>x</code> into it,\nreturning an error if the allocation fails</p>\n<p>This doesn’t actually allocate if <code>T</code> is zero-sized.</p>\n<h5 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(allocator_api)]\n\n</span><span class=\"kw\">let </span>five = Box::try_new(<span class=\"number\">5</span>)<span class=\"question-mark\">?</span>;</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_new_uninit\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/boxed.rs.html#363\">Source</a><h4 class=\"code-header\">pub fn <a href=\"devela/all/struct.Box.html#tymethod.try_new_uninit\" class=\"fn\">try_new_uninit</a>() -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"struct\" href=\"devela/all/struct.Box.html\" title=\"struct devela::all::Box\">Box</a>&lt;<a class=\"union\" href=\"devela/all/union.MaybeUninit.html\" title=\"union devela::all::MaybeUninit\">MaybeUninit</a>&lt;T&gt;&gt;, <a class=\"struct\" href=\"devela/_core/alloc/struct.AllocError.html\" title=\"struct devela::_core::alloc::AllocError\">AllocError</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;Box&lt;MaybeUninit&lt;T&gt;&gt;, AllocError&gt;\">ⓘ</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>allocator_api</code>)</span></div><div class=\"stab portability\">Available on <strong>crate feature <code>alloc</code></strong> only.</div></span></summary><div class=\"docblock\"><p>Constructs a new box with uninitialized contents on the heap,\nreturning an error if the allocation fails</p>\n<h5 id=\"examples-4\"><a class=\"doc-anchor\" href=\"#examples-4\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(allocator_api)]\n\n</span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>five = Box::&lt;u32&gt;::try_new_uninit()<span class=\"question-mark\">?</span>;\n<span class=\"comment\">// Deferred initialization:\n</span>five.write(<span class=\"number\">5</span>);\n<span class=\"kw\">let </span>five = <span class=\"kw\">unsafe </span>{ five.assume_init() };\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>five, <span class=\"number\">5</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_new_zeroed\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/boxed.rs.html#389\">Source</a><h4 class=\"code-header\">pub fn <a href=\"devela/all/struct.Box.html#tymethod.try_new_zeroed\" class=\"fn\">try_new_zeroed</a>() -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"struct\" href=\"devela/all/struct.Box.html\" title=\"struct devela::all::Box\">Box</a>&lt;<a class=\"union\" href=\"devela/all/union.MaybeUninit.html\" title=\"union devela::all::MaybeUninit\">MaybeUninit</a>&lt;T&gt;&gt;, <a class=\"struct\" href=\"devela/_core/alloc/struct.AllocError.html\" title=\"struct devela::_core::alloc::AllocError\">AllocError</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;Box&lt;MaybeUninit&lt;T&gt;&gt;, AllocError&gt;\">ⓘ</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>allocator_api</code>)</span></div><div class=\"stab portability\">Available on <strong>crate feature <code>alloc</code></strong> only.</div></span></summary><div class=\"docblock\"><p>Constructs a new <code>Box</code> with uninitialized contents, with the memory\nbeing filled with <code>0</code> bytes on the heap</p>\n<p>See <a href=\"devela/all/union.MaybeUninit.html#method.zeroed\" title=\"associated function devela::all::MaybeUninit::zeroed\"><code>MaybeUninit::zeroed</code></a> for examples of correct and incorrect usage\nof this method.</p>\n<h5 id=\"examples-5\"><a class=\"doc-anchor\" href=\"#examples-5\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(allocator_api)]\n\n</span><span class=\"kw\">let </span>zero = Box::&lt;u32&gt;::try_new_zeroed()<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>zero = <span class=\"kw\">unsafe </span>{ zero.assume_init() };\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>zero, <span class=\"number\">0</span>);</code></pre></div>\n</div></details></div></details>",0,"devela::_dep::sdl2::timer::TimerCallback","devela::_dep::toml_edit::ArrayIntoIter","devela::_dep::toml_edit::ArrayIter","devela::_dep::toml_edit::ArrayIterMut","devela::_dep::toml_edit::ArrayOfTablesIntoIter","devela::_dep::toml_edit::ArrayOfTablesIter","devela::_dep::toml_edit::ArrayOfTablesIterMut","devela::_dep::toml_edit::InlineTableIntoIter","devela::_dep::toml_edit::InlineTableIter","devela::_dep::toml_edit::InlineTableIterMut","devela::_dep::toml_edit::IntoIter","devela::_dep::toml_edit::Iter","devela::_dep::toml_edit::IterMut"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Box%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/boxed.rs.html#998\">Source</a><a href=\"#impl-Box%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"struct\" href=\"devela/all/struct.Box.html\" title=\"struct devela::all::Box\">Box</a>&lt;T&gt;<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"devela/all/trait.Sized.html\" title=\"trait devela::all::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_raw\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.4.0\">1.4.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/boxed.rs.html#1044\">Source</a></span><h4 class=\"code-header\">pub unsafe fn <a href=\"devela/all/struct.Box.html#tymethod.from_raw\" class=\"fn\">from_raw</a>(raw: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.pointer.html\">*mut T</a>) -&gt; <a class=\"struct\" href=\"devela/all/struct.Box.html\" title=\"struct devela::all::Box\">Box</a>&lt;T&gt;</h4></section><span class=\"item-info\"><div class=\"stab portability\">Available on <strong>crate feature <code>alloc</code></strong> only.</div></span></summary><div class=\"docblock\"><p>Constructs a box from a raw pointer.</p>\n<p>After calling this function, the raw pointer is owned by the\nresulting <code>Box</code>. Specifically, the <code>Box</code> destructor will call\nthe destructor of <code>T</code> and free the allocated memory. For this\nto be safe, the memory must have been allocated in accordance\nwith the <a href=\"devela/_dep/_alloc/boxed/index.html#memory-layout\" title=\"mod devela::_dep::_alloc::boxed\">memory layout</a> used by <code>Box</code> .</p>\n<h5 id=\"safety\"><a class=\"doc-anchor\" href=\"#safety\">§</a>Safety</h5>\n<p>This function is unsafe because improper use may lead to\nmemory problems. For example, a double-free may occur if the\nfunction is called twice on the same raw pointer.</p>\n<p>The raw pointer must point to a block of memory allocated by the global allocator.</p>\n<p>The safety conditions are described in the <a href=\"devela/_dep/_alloc/boxed/index.html#memory-layout\" title=\"mod devela::_dep::_alloc::boxed\">memory layout</a> section.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>Recreate a <code>Box</code> which was previously converted to a raw pointer\nusing <a href=\"devela/all/struct.Box.html#method.into_raw\" title=\"associated function devela::all::Box::into_raw\"><code>Box::into_raw</code></a>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = Box::new(<span class=\"number\">5</span>);\n<span class=\"kw\">let </span>ptr = Box::into_raw(x);\n<span class=\"kw\">let </span>x = <span class=\"kw\">unsafe </span>{ Box::from_raw(ptr) };</code></pre></div>\n<p>Manually create a <code>Box</code> from scratch by using the global allocator:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::alloc::{alloc, Layout};\n\n<span class=\"kw\">unsafe </span>{\n    <span class=\"kw\">let </span>ptr = alloc(Layout::new::&lt;i32&gt;()) <span class=\"kw\">as </span><span class=\"kw-2\">*mut </span>i32;\n    <span class=\"comment\">// In general .write is required to avoid attempting to destruct\n    // the (uninitialized) previous contents of `ptr`, though for this\n    // simple example `*ptr = 5` would have worked as well.\n    </span>ptr.write(<span class=\"number\">5</span>);\n    <span class=\"kw\">let </span>x = Box::from_raw(ptr);\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_non_null\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/boxed.rs.html#1098\">Source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"devela/all/struct.Box.html#tymethod.from_non_null\" class=\"fn\">from_non_null</a>(ptr: <a class=\"struct\" href=\"devela/all/struct.PtrNonNull.html\" title=\"struct devela::all::PtrNonNull\">NonNull</a>&lt;T&gt;) -&gt; <a class=\"struct\" href=\"devela/all/struct.Box.html\" title=\"struct devela::all::Box\">Box</a>&lt;T&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>box_vec_non_null</code>)</span></div><div class=\"stab portability\">Available on <strong>crate feature <code>alloc</code></strong> only.</div></span></summary><div class=\"docblock\"><p>Constructs a box from a <code>NonNull</code> pointer.</p>\n<p>After calling this function, the <code>NonNull</code> pointer is owned by\nthe resulting <code>Box</code>. Specifically, the <code>Box</code> destructor will call\nthe destructor of <code>T</code> and free the allocated memory. For this\nto be safe, the memory must have been allocated in accordance\nwith the <a href=\"devela/_dep/_alloc/boxed/index.html#memory-layout\" title=\"mod devela::_dep::_alloc::boxed\">memory layout</a> used by <code>Box</code> .</p>\n<h5 id=\"safety-1\"><a class=\"doc-anchor\" href=\"#safety-1\">§</a>Safety</h5>\n<p>This function is unsafe because improper use may lead to\nmemory problems. For example, a double-free may occur if the\nfunction is called twice on the same <code>NonNull</code> pointer.</p>\n<p>The non-null pointer must point to a block of memory allocated by the global allocator.</p>\n<p>The safety conditions are described in the <a href=\"devela/_dep/_alloc/boxed/index.html#memory-layout\" title=\"mod devela::_dep::_alloc::boxed\">memory layout</a> section.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<p>Recreate a <code>Box</code> which was previously converted to a <code>NonNull</code>\npointer using <a href=\"devela/all/struct.Box.html#method.into_non_null\" title=\"associated function devela::all::Box::into_non_null\"><code>Box::into_non_null</code></a>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(box_vec_non_null)]\n\n</span><span class=\"kw\">let </span>x = Box::new(<span class=\"number\">5</span>);\n<span class=\"kw\">let </span>non_null = Box::into_non_null(x);\n<span class=\"kw\">let </span>x = <span class=\"kw\">unsafe </span>{ Box::from_non_null(non_null) };</code></pre></div>\n<p>Manually create a <code>Box</code> from scratch by using the global allocator:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(box_vec_non_null)]\n\n</span><span class=\"kw\">use </span>std::alloc::{alloc, Layout};\n<span class=\"kw\">use </span>std::ptr::NonNull;\n\n<span class=\"kw\">unsafe </span>{\n    <span class=\"kw\">let </span>non_null = NonNull::new(alloc(Layout::new::&lt;i32&gt;()).cast::&lt;i32&gt;())\n        .expect(<span class=\"string\">\"allocation failed\"</span>);\n    <span class=\"comment\">// In general .write is required to avoid attempting to destruct\n    // the (uninitialized) previous contents of `non_null`.\n    </span>non_null.write(<span class=\"number\">5</span>);\n    <span class=\"kw\">let </span>x = Box::from_non_null(non_null);\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_raw\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.4.0\">1.4.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/boxed.rs.html#1152\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"devela/all/struct.Box.html#tymethod.into_raw\" class=\"fn\">into_raw</a>(b: <a class=\"struct\" href=\"devela/all/struct.Box.html\" title=\"struct devela::all::Box\">Box</a>&lt;T&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.pointer.html\">*mut T</a></h4></section><span class=\"item-info\"><div class=\"stab portability\">Available on <strong>crate feature <code>alloc</code></strong> only.</div></span></summary><div class=\"docblock\"><p>Consumes the <code>Box</code>, returning a wrapped raw pointer.</p>\n<p>The pointer will be properly aligned and non-null.</p>\n<p>After calling this function, the caller is responsible for the\nmemory previously managed by the <code>Box</code>. In particular, the\ncaller should properly destroy <code>T</code> and release the memory, taking\ninto account the <a href=\"devela/_dep/_alloc/boxed/index.html#memory-layout\" title=\"mod devela::_dep::_alloc::boxed\">memory layout</a> used by <code>Box</code>. The easiest way to\ndo this is to convert the raw pointer back into a <code>Box</code> with the\n<a href=\"devela/all/struct.Box.html#method.from_raw\" title=\"associated function devela::all::Box::from_raw\"><code>Box::from_raw</code></a> function, allowing the <code>Box</code> destructor to perform\nthe cleanup.</p>\n<p>Note: this is an associated function, which means that you have\nto call it as <code>Box::into_raw(b)</code> instead of <code>b.into_raw()</code>. This\nis so that there is no conflict with a method on the inner type.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<p>Converting the raw pointer back into a <code>Box</code> with <a href=\"devela/all/struct.Box.html#method.from_raw\" title=\"associated function devela::all::Box::from_raw\"><code>Box::from_raw</code></a>\nfor automatic cleanup:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = Box::new(String::from(<span class=\"string\">\"Hello\"</span>));\n<span class=\"kw\">let </span>ptr = Box::into_raw(x);\n<span class=\"kw\">let </span>x = <span class=\"kw\">unsafe </span>{ Box::from_raw(ptr) };</code></pre></div>\n<p>Manual cleanup by explicitly running the destructor and deallocating\nthe memory:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::alloc::{dealloc, Layout};\n<span class=\"kw\">use </span>std::ptr;\n\n<span class=\"kw\">let </span>x = Box::new(String::from(<span class=\"string\">\"Hello\"</span>));\n<span class=\"kw\">let </span>ptr = Box::into_raw(x);\n<span class=\"kw\">unsafe </span>{\n    ptr::drop_in_place(ptr);\n    dealloc(ptr <span class=\"kw\">as </span><span class=\"kw-2\">*mut </span>u8, Layout::new::&lt;String&gt;());\n}</code></pre></div>\n<p>Note: This is equivalent to the following:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = Box::new(String::from(<span class=\"string\">\"Hello\"</span>));\n<span class=\"kw\">let </span>ptr = Box::into_raw(x);\n<span class=\"kw\">unsafe </span>{\n    drop(Box::from_raw(ptr));\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_non_null\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/boxed.rs.html#1215\">Source</a><h4 class=\"code-header\">pub fn <a href=\"devela/all/struct.Box.html#tymethod.into_non_null\" class=\"fn\">into_non_null</a>(b: <a class=\"struct\" href=\"devela/all/struct.Box.html\" title=\"struct devela::all::Box\">Box</a>&lt;T&gt;) -&gt; <a class=\"struct\" href=\"devela/all/struct.PtrNonNull.html\" title=\"struct devela::all::PtrNonNull\">NonNull</a>&lt;T&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>box_vec_non_null</code>)</span></div><div class=\"stab portability\">Available on <strong>crate feature <code>alloc</code></strong> only.</div></span></summary><div class=\"docblock\"><p>Consumes the <code>Box</code>, returning a wrapped <code>NonNull</code> pointer.</p>\n<p>The pointer will be properly aligned.</p>\n<p>After calling this function, the caller is responsible for the\nmemory previously managed by the <code>Box</code>. In particular, the\ncaller should properly destroy <code>T</code> and release the memory, taking\ninto account the <a href=\"devela/_dep/_alloc/boxed/index.html#memory-layout\" title=\"mod devela::_dep::_alloc::boxed\">memory layout</a> used by <code>Box</code>. The easiest way to\ndo this is to convert the <code>NonNull</code> pointer back into a <code>Box</code> with the\n<a href=\"devela/all/struct.Box.html#method.from_non_null\" title=\"associated function devela::all::Box::from_non_null\"><code>Box::from_non_null</code></a> function, allowing the <code>Box</code> destructor to\nperform the cleanup.</p>\n<p>Note: this is an associated function, which means that you have\nto call it as <code>Box::into_non_null(b)</code> instead of <code>b.into_non_null()</code>.\nThis is so that there is no conflict with a method on the inner type.</p>\n<h5 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">§</a>Examples</h5>\n<p>Converting the <code>NonNull</code> pointer back into a <code>Box</code> with <a href=\"devela/all/struct.Box.html#method.from_non_null\" title=\"associated function devela::all::Box::from_non_null\"><code>Box::from_non_null</code></a>\nfor automatic cleanup:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(box_vec_non_null)]\n\n</span><span class=\"kw\">let </span>x = Box::new(String::from(<span class=\"string\">\"Hello\"</span>));\n<span class=\"kw\">let </span>non_null = Box::into_non_null(x);\n<span class=\"kw\">let </span>x = <span class=\"kw\">unsafe </span>{ Box::from_non_null(non_null) };</code></pre></div>\n<p>Manual cleanup by explicitly running the destructor and deallocating\nthe memory:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(box_vec_non_null)]\n\n</span><span class=\"kw\">use </span>std::alloc::{dealloc, Layout};\n\n<span class=\"kw\">let </span>x = Box::new(String::from(<span class=\"string\">\"Hello\"</span>));\n<span class=\"kw\">let </span>non_null = Box::into_non_null(x);\n<span class=\"kw\">unsafe </span>{\n    non_null.drop_in_place();\n    dealloc(non_null.as_ptr().cast::&lt;u8&gt;(), Layout::new::&lt;String&gt;());\n}</code></pre></div>\n<p>Note: This is equivalent to the following:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(box_vec_non_null)]\n\n</span><span class=\"kw\">let </span>x = Box::new(String::from(<span class=\"string\">\"Hello\"</span>));\n<span class=\"kw\">let </span>non_null = Box::into_non_null(x);\n<span class=\"kw\">unsafe </span>{\n    drop(Box::from_non_null(non_null));\n}</code></pre></div>\n</div></details></div></details>",0,"devela::_dep::sdl2::timer::TimerCallback","devela::_dep::toml_edit::ArrayIntoIter","devela::_dep::toml_edit::ArrayIter","devela::_dep::toml_edit::ArrayIterMut","devela::_dep::toml_edit::ArrayOfTablesIntoIter","devela::_dep::toml_edit::ArrayOfTablesIter","devela::_dep::toml_edit::ArrayOfTablesIterMut","devela::_dep::toml_edit::InlineTableIntoIter","devela::_dep::toml_edit::InlineTableIter","devela::_dep::toml_edit::InlineTableIterMut","devela::_dep::toml_edit::IntoIter","devela::_dep::toml_edit::Iter","devela::_dep::toml_edit::IterMut"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Box%3CT,+A%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/boxed.rs.html#1221\">Source</a><a href=\"#impl-Box%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"struct\" href=\"devela/all/struct.Box.html\" title=\"struct devela::all::Box\">Box</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"devela/_core/alloc/trait.Allocator.html\" title=\"trait devela::_core::alloc::Allocator\">Allocator</a>,\n    T: ?<a class=\"trait\" href=\"devela/all/trait.Sized.html\" title=\"trait devela::all::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_raw_in\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/boxed.rs.html#1271\">Source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"devela/all/struct.Box.html#tymethod.from_raw_in\" class=\"fn\">from_raw_in</a>(raw: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.pointer.html\">*mut T</a>, alloc: A) -&gt; <a class=\"struct\" href=\"devela/all/struct.Box.html\" title=\"struct devela::all::Box\">Box</a>&lt;T, A&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>allocator_api</code>)</span></div><div class=\"stab portability\">Available on <strong>crate feature <code>alloc</code></strong> only.</div></span></summary><div class=\"docblock\"><p>Constructs a box from a raw pointer in the given allocator.</p>\n<p>After calling this function, the raw pointer is owned by the\nresulting <code>Box</code>. Specifically, the <code>Box</code> destructor will call\nthe destructor of <code>T</code> and free the allocated memory. For this\nto be safe, the memory must have been allocated in accordance\nwith the <a href=\"devela/_dep/_alloc/boxed/index.html#memory-layout\" title=\"mod devela::_dep::_alloc::boxed\">memory layout</a> used by <code>Box</code> .</p>\n<h5 id=\"safety\"><a class=\"doc-anchor\" href=\"#safety\">§</a>Safety</h5>\n<p>This function is unsafe because improper use may lead to\nmemory problems. For example, a double-free may occur if the\nfunction is called twice on the same raw pointer.</p>\n<p>The raw pointer must point to a block of memory allocated by <code>alloc</code>.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>Recreate a <code>Box</code> which was previously converted to a raw pointer\nusing <a href=\"devela/all/struct.Box.html#method.into_raw_with_allocator\" title=\"associated function devela::all::Box::into_raw_with_allocator\"><code>Box::into_raw_with_allocator</code></a>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(allocator_api)]\n\n</span><span class=\"kw\">use </span>std::alloc::System;\n\n<span class=\"kw\">let </span>x = Box::new_in(<span class=\"number\">5</span>, System);\n<span class=\"kw\">let </span>(ptr, alloc) = Box::into_raw_with_allocator(x);\n<span class=\"kw\">let </span>x = <span class=\"kw\">unsafe </span>{ Box::from_raw_in(ptr, alloc) };</code></pre></div>\n<p>Manually create a <code>Box</code> from scratch by using the system allocator:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(allocator_api, slice_ptr_get)]\n\n</span><span class=\"kw\">use </span>std::alloc::{Allocator, Layout, System};\n\n<span class=\"kw\">unsafe </span>{\n    <span class=\"kw\">let </span>ptr = System.allocate(Layout::new::&lt;i32&gt;())<span class=\"question-mark\">?</span>.as_mut_ptr() <span class=\"kw\">as </span><span class=\"kw-2\">*mut </span>i32;\n    <span class=\"comment\">// In general .write is required to avoid attempting to destruct\n    // the (uninitialized) previous contents of `ptr`, though for this\n    // simple example `*ptr = 5` would have worked as well.\n    </span>ptr.write(<span class=\"number\">5</span>);\n    <span class=\"kw\">let </span>x = Box::from_raw_in(ptr, System);\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_non_null_in\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/boxed.rs.html#1324\">Source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"devela/all/struct.Box.html#tymethod.from_non_null_in\" class=\"fn\">from_non_null_in</a>(raw: <a class=\"struct\" href=\"devela/all/struct.PtrNonNull.html\" title=\"struct devela::all::PtrNonNull\">NonNull</a>&lt;T&gt;, alloc: A) -&gt; <a class=\"struct\" href=\"devela/all/struct.Box.html\" title=\"struct devela::all::Box\">Box</a>&lt;T, A&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>allocator_api</code>)</span></div><div class=\"stab portability\">Available on <strong>crate feature <code>alloc</code></strong> only.</div></span></summary><div class=\"docblock\"><p>Constructs a box from a <code>NonNull</code> pointer in the given allocator.</p>\n<p>After calling this function, the <code>NonNull</code> pointer is owned by\nthe resulting <code>Box</code>. Specifically, the <code>Box</code> destructor will call\nthe destructor of <code>T</code> and free the allocated memory. For this\nto be safe, the memory must have been allocated in accordance\nwith the <a href=\"devela/_dep/_alloc/boxed/index.html#memory-layout\" title=\"mod devela::_dep::_alloc::boxed\">memory layout</a> used by <code>Box</code> .</p>\n<h5 id=\"safety-1\"><a class=\"doc-anchor\" href=\"#safety-1\">§</a>Safety</h5>\n<p>This function is unsafe because improper use may lead to\nmemory problems. For example, a double-free may occur if the\nfunction is called twice on the same raw pointer.</p>\n<p>The non-null pointer must point to a block of memory allocated by <code>alloc</code>.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<p>Recreate a <code>Box</code> which was previously converted to a <code>NonNull</code> pointer\nusing <a href=\"devela/all/struct.Box.html#method.into_non_null_with_allocator\" title=\"associated function devela::all::Box::into_non_null_with_allocator\"><code>Box::into_non_null_with_allocator</code></a>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(allocator_api, box_vec_non_null)]\n\n</span><span class=\"kw\">use </span>std::alloc::System;\n\n<span class=\"kw\">let </span>x = Box::new_in(<span class=\"number\">5</span>, System);\n<span class=\"kw\">let </span>(non_null, alloc) = Box::into_non_null_with_allocator(x);\n<span class=\"kw\">let </span>x = <span class=\"kw\">unsafe </span>{ Box::from_non_null_in(non_null, alloc) };</code></pre></div>\n<p>Manually create a <code>Box</code> from scratch by using the system allocator:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(allocator_api, box_vec_non_null, slice_ptr_get)]\n\n</span><span class=\"kw\">use </span>std::alloc::{Allocator, Layout, System};\n\n<span class=\"kw\">unsafe </span>{\n    <span class=\"kw\">let </span>non_null = System.allocate(Layout::new::&lt;i32&gt;())<span class=\"question-mark\">?</span>.cast::&lt;i32&gt;();\n    <span class=\"comment\">// In general .write is required to avoid attempting to destruct\n    // the (uninitialized) previous contents of `non_null`.\n    </span>non_null.write(<span class=\"number\">5</span>);\n    <span class=\"kw\">let </span>x = Box::from_non_null_in(non_null, System);\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_raw_with_allocator\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/boxed.rs.html#1378\">Source</a><h4 class=\"code-header\">pub fn <a href=\"devela/all/struct.Box.html#tymethod.into_raw_with_allocator\" class=\"fn\">into_raw_with_allocator</a>(b: <a class=\"struct\" href=\"devela/all/struct.Box.html\" title=\"struct devela::all::Box\">Box</a>&lt;T, A&gt;) -&gt; (<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.pointer.html\">*mut T</a>, A) <a href=\"#\" class=\"tooltip\" data-notable-ty=\"(*mut T, A)\">ⓘ</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>allocator_api</code>)</span></div><div class=\"stab portability\">Available on <strong>crate feature <code>alloc</code></strong> only.</div></span></summary><div class=\"docblock\"><p>Consumes the <code>Box</code>, returning a wrapped raw pointer and the allocator.</p>\n<p>The pointer will be properly aligned and non-null.</p>\n<p>After calling this function, the caller is responsible for the\nmemory previously managed by the <code>Box</code>. In particular, the\ncaller should properly destroy <code>T</code> and release the memory, taking\ninto account the <a href=\"devela/_dep/_alloc/boxed/index.html#memory-layout\" title=\"mod devela::_dep::_alloc::boxed\">memory layout</a> used by <code>Box</code>. The easiest way to\ndo this is to convert the raw pointer back into a <code>Box</code> with the\n<a href=\"devela/all/struct.Box.html#method.from_raw_in\" title=\"associated function devela::all::Box::from_raw_in\"><code>Box::from_raw_in</code></a> function, allowing the <code>Box</code> destructor to perform\nthe cleanup.</p>\n<p>Note: this is an associated function, which means that you have\nto call it as <code>Box::into_raw_with_allocator(b)</code> instead of <code>b.into_raw_with_allocator()</code>. This\nis so that there is no conflict with a method on the inner type.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<p>Converting the raw pointer back into a <code>Box</code> with <a href=\"devela/all/struct.Box.html#method.from_raw_in\" title=\"associated function devela::all::Box::from_raw_in\"><code>Box::from_raw_in</code></a>\nfor automatic cleanup:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(allocator_api)]\n\n</span><span class=\"kw\">use </span>std::alloc::System;\n\n<span class=\"kw\">let </span>x = Box::new_in(String::from(<span class=\"string\">\"Hello\"</span>), System);\n<span class=\"kw\">let </span>(ptr, alloc) = Box::into_raw_with_allocator(x);\n<span class=\"kw\">let </span>x = <span class=\"kw\">unsafe </span>{ Box::from_raw_in(ptr, alloc) };</code></pre></div>\n<p>Manual cleanup by explicitly running the destructor and deallocating\nthe memory:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(allocator_api)]\n\n</span><span class=\"kw\">use </span>std::alloc::{Allocator, Layout, System};\n<span class=\"kw\">use </span>std::ptr::{<span class=\"self\">self</span>, NonNull};\n\n<span class=\"kw\">let </span>x = Box::new_in(String::from(<span class=\"string\">\"Hello\"</span>), System);\n<span class=\"kw\">let </span>(ptr, alloc) = Box::into_raw_with_allocator(x);\n<span class=\"kw\">unsafe </span>{\n    ptr::drop_in_place(ptr);\n    <span class=\"kw\">let </span>non_null = NonNull::new_unchecked(ptr);\n    alloc.deallocate(non_null.cast(), Layout::new::&lt;String&gt;());\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_non_null_with_allocator\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/boxed.rs.html#1439\">Source</a><h4 class=\"code-header\">pub fn <a href=\"devela/all/struct.Box.html#tymethod.into_non_null_with_allocator\" class=\"fn\">into_non_null_with_allocator</a>(b: <a class=\"struct\" href=\"devela/all/struct.Box.html\" title=\"struct devela::all::Box\">Box</a>&lt;T, A&gt;) -&gt; (<a class=\"struct\" href=\"devela/all/struct.PtrNonNull.html\" title=\"struct devela::all::PtrNonNull\">NonNull</a>&lt;T&gt;, A) <a href=\"#\" class=\"tooltip\" data-notable-ty=\"(NonNull&lt;T&gt;, A)\">ⓘ</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>allocator_api</code>)</span></div><div class=\"stab portability\">Available on <strong>crate feature <code>alloc</code></strong> only.</div></span></summary><div class=\"docblock\"><p>Consumes the <code>Box</code>, returning a wrapped <code>NonNull</code> pointer and the allocator.</p>\n<p>The pointer will be properly aligned.</p>\n<p>After calling this function, the caller is responsible for the\nmemory previously managed by the <code>Box</code>. In particular, the\ncaller should properly destroy <code>T</code> and release the memory, taking\ninto account the <a href=\"devela/_dep/_alloc/boxed/index.html#memory-layout\" title=\"mod devela::_dep::_alloc::boxed\">memory layout</a> used by <code>Box</code>. The easiest way to\ndo this is to convert the <code>NonNull</code> pointer back into a <code>Box</code> with the\n<a href=\"devela/all/struct.Box.html#method.from_non_null_in\" title=\"associated function devela::all::Box::from_non_null_in\"><code>Box::from_non_null_in</code></a> function, allowing the <code>Box</code> destructor to\nperform the cleanup.</p>\n<p>Note: this is an associated function, which means that you have\nto call it as <code>Box::into_non_null_with_allocator(b)</code> instead of\n<code>b.into_non_null_with_allocator()</code>. This is so that there is no\nconflict with a method on the inner type.</p>\n<h5 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">§</a>Examples</h5>\n<p>Converting the <code>NonNull</code> pointer back into a <code>Box</code> with\n<a href=\"devela/all/struct.Box.html#method.from_non_null_in\" title=\"associated function devela::all::Box::from_non_null_in\"><code>Box::from_non_null_in</code></a> for automatic cleanup:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(allocator_api, box_vec_non_null)]\n\n</span><span class=\"kw\">use </span>std::alloc::System;\n\n<span class=\"kw\">let </span>x = Box::new_in(String::from(<span class=\"string\">\"Hello\"</span>), System);\n<span class=\"kw\">let </span>(non_null, alloc) = Box::into_non_null_with_allocator(x);\n<span class=\"kw\">let </span>x = <span class=\"kw\">unsafe </span>{ Box::from_non_null_in(non_null, alloc) };</code></pre></div>\n<p>Manual cleanup by explicitly running the destructor and deallocating\nthe memory:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(allocator_api, box_vec_non_null)]\n\n</span><span class=\"kw\">use </span>std::alloc::{Allocator, Layout, System};\n\n<span class=\"kw\">let </span>x = Box::new_in(String::from(<span class=\"string\">\"Hello\"</span>), System);\n<span class=\"kw\">let </span>(non_null, alloc) = Box::into_non_null_with_allocator(x);\n<span class=\"kw\">unsafe </span>{\n    non_null.drop_in_place();\n    alloc.deallocate(non_null.cast::&lt;u8&gt;(), Layout::new::&lt;String&gt;());\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_mut_ptr\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/boxed.rs.html#1493\">Source</a><h4 class=\"code-header\">pub fn <a href=\"devela/all/struct.Box.html#tymethod.as_mut_ptr\" class=\"fn\">as_mut_ptr</a>(b: &amp;mut <a class=\"struct\" href=\"devela/all/struct.Box.html\" title=\"struct devela::all::Box\">Box</a>&lt;T, A&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.pointer.html\">*mut T</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>box_as_ptr</code>)</span></div><div class=\"stab portability\">Available on <strong>crate feature <code>alloc</code></strong> only.</div></span></summary><div class=\"docblock\"><p>Returns a raw mutable pointer to the <code>Box</code>’s contents.</p>\n<p>The caller must ensure that the <code>Box</code> outlives the pointer this\nfunction returns, or else it will end up dangling.</p>\n<p>This method guarantees that for the purpose of the aliasing model, this method\ndoes not materialize a reference to the underlying memory, and thus the returned pointer\nwill remain valid when mixed with other calls to <a href=\"devela/all/struct.Box.html#method.as_ptr\" title=\"associated function devela::all::Box::as_ptr\"><code>as_ptr</code></a> and <a href=\"devela/all/struct.Box.html#method.as_mut_ptr\" title=\"associated function devela::all::Box::as_mut_ptr\"><code>as_mut_ptr</code></a>.\nNote that calling other methods that materialize references to the memory\nmay still invalidate this pointer.\nSee the example below for how this guarantee can be used.</p>\n<h5 id=\"examples-4\"><a class=\"doc-anchor\" href=\"#examples-4\">§</a>Examples</h5>\n<p>Due to the aliasing guarantee, the following code is legal:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(box_as_ptr)]\n\n</span><span class=\"kw\">unsafe </span>{\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>b = Box::new(<span class=\"number\">0</span>);\n    <span class=\"kw\">let </span>ptr1 = Box::as_mut_ptr(<span class=\"kw-2\">&amp;mut </span>b);\n    ptr1.write(<span class=\"number\">1</span>);\n    <span class=\"kw\">let </span>ptr2 = Box::as_mut_ptr(<span class=\"kw-2\">&amp;mut </span>b);\n    ptr2.write(<span class=\"number\">2</span>);\n    <span class=\"comment\">// Notably, the write to `ptr2` did *not* invalidate `ptr1`:\n    </span>ptr1.write(<span class=\"number\">3</span>);\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_ptr\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/boxed.rs.html#1542\">Source</a><h4 class=\"code-header\">pub fn <a href=\"devela/all/struct.Box.html#tymethod.as_ptr\" class=\"fn\">as_ptr</a>(b: &amp;<a class=\"struct\" href=\"devela/all/struct.Box.html\" title=\"struct devela::all::Box\">Box</a>&lt;T, A&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.pointer.html\">*const T</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>box_as_ptr</code>)</span></div><div class=\"stab portability\">Available on <strong>crate feature <code>alloc</code></strong> only.</div></span></summary><div class=\"docblock\"><p>Returns a raw pointer to the <code>Box</code>’s contents.</p>\n<p>The caller must ensure that the <code>Box</code> outlives the pointer this\nfunction returns, or else it will end up dangling.</p>\n<p>The caller must also ensure that the memory the pointer (non-transitively) points to\nis never written to (except inside an <code>UnsafeCell</code>) using this pointer or any pointer\nderived from it. If you need to mutate the contents of the <code>Box</code>, use <a href=\"devela/all/struct.Box.html#method.as_mut_ptr\" title=\"associated function devela::all::Box::as_mut_ptr\"><code>as_mut_ptr</code></a>.</p>\n<p>This method guarantees that for the purpose of the aliasing model, this method\ndoes not materialize a reference to the underlying memory, and thus the returned pointer\nwill remain valid when mixed with other calls to <a href=\"devela/all/struct.Box.html#method.as_ptr\" title=\"associated function devela::all::Box::as_ptr\"><code>as_ptr</code></a> and <a href=\"devela/all/struct.Box.html#method.as_mut_ptr\" title=\"associated function devela::all::Box::as_mut_ptr\"><code>as_mut_ptr</code></a>.\nNote that calling other methods that materialize mutable references to the memory,\nas well as writing to this memory, may still invalidate this pointer.\nSee the example below for how this guarantee can be used.</p>\n<h5 id=\"examples-5\"><a class=\"doc-anchor\" href=\"#examples-5\">§</a>Examples</h5>\n<p>Due to the aliasing guarantee, the following code is legal:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(box_as_ptr)]\n\n</span><span class=\"kw\">unsafe </span>{\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v = Box::new(<span class=\"number\">0</span>);\n    <span class=\"kw\">let </span>ptr1 = Box::as_ptr(<span class=\"kw-2\">&amp;</span>v);\n    <span class=\"kw\">let </span>ptr2 = Box::as_mut_ptr(<span class=\"kw-2\">&amp;mut </span>v);\n    <span class=\"kw\">let </span>_val = ptr2.read();\n    <span class=\"comment\">// No write to this memory has happened yet, so `ptr1` is still valid.\n    </span><span class=\"kw\">let </span>_val = ptr1.read();\n    <span class=\"comment\">// However, once we do a write...\n    </span>ptr2.write(<span class=\"number\">1</span>);\n    <span class=\"comment\">// ... `ptr1` is no longer valid.\n    // This would be UB: let _val = ptr1.read();\n</span>}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.allocator\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/boxed.rs.html#1555\">Source</a><h4 class=\"code-header\">pub fn <a href=\"devela/all/struct.Box.html#tymethod.allocator\" class=\"fn\">allocator</a>(b: &amp;<a class=\"struct\" href=\"devela/all/struct.Box.html\" title=\"struct devela::all::Box\">Box</a>&lt;T, A&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;A</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>allocator_api</code>)</span></div><div class=\"stab portability\">Available on <strong>crate feature <code>alloc</code></strong> only.</div></span></summary><div class=\"docblock\"><p>Returns a reference to the underlying allocator.</p>\n<p>Note: this is an associated function, which means that you have\nto call it as <code>Box::allocator(&amp;b)</code> instead of <code>b.allocator()</code>. This\nis so that there is no conflict with a method on the inner type.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.leak\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.26.0\">1.26.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/boxed.rs.html#1604-1606\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"devela/all/struct.Box.html#tymethod.leak\" class=\"fn\">leak</a>&lt;'a&gt;(b: <a class=\"struct\" href=\"devela/all/struct.Box.html\" title=\"struct devela::all::Box\">Box</a>&lt;T, A&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;'a mut T</a><div class=\"where\">where\n    A: 'a,</div></h4></section><span class=\"item-info\"><div class=\"stab portability\">Available on <strong>crate feature <code>alloc</code></strong> only.</div></span></summary><div class=\"docblock\"><p>Consumes and leaks the <code>Box</code>, returning a mutable reference,\n<code>&amp;'a mut T</code>.</p>\n<p>Note that the type <code>T</code> must outlive the chosen lifetime <code>'a</code>. If the type\nhas only static references, or none at all, then this may be chosen to be\n<code>'static</code>.</p>\n<p>This function is mainly useful for data that lives for the remainder of\nthe program’s life. Dropping the returned reference will cause a memory\nleak. If this is not acceptable, the reference should first be wrapped\nwith the <a href=\"devela/all/struct.Box.html#method.from_raw\" title=\"associated function devela::all::Box::from_raw\"><code>Box::from_raw</code></a> function producing a <code>Box</code>. This <code>Box</code> can\nthen be dropped which will properly destroy <code>T</code> and release the\nallocated memory.</p>\n<p>Note: this is an associated function, which means that you have\nto call it as <code>Box::leak(b)</code> instead of <code>b.leak()</code>. This\nis so that there is no conflict with a method on the inner type.</p>\n<h5 id=\"examples-6\"><a class=\"doc-anchor\" href=\"#examples-6\">§</a>Examples</h5>\n<p>Simple usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = Box::new(<span class=\"number\">41</span>);\n<span class=\"kw\">let </span>static_ref: <span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'static </span><span class=\"kw-2\">mut </span>usize = Box::leak(x);\n<span class=\"kw-2\">*</span>static_ref += <span class=\"number\">1</span>;\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>static_ref, <span class=\"number\">42</span>);</code></pre></div>\n<p>Unsized data:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>].into_boxed_slice();\n<span class=\"kw\">let </span>static_ref = Box::leak(x);\nstatic_ref[<span class=\"number\">0</span>] = <span class=\"number\">4</span>;\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>static_ref, [<span class=\"number\">4</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_pin\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.63.0\">1.63.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/boxed.rs.html#1644-1646\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"devela/all/struct.Box.html#tymethod.into_pin\" class=\"fn\">into_pin</a>(boxed: <a class=\"struct\" href=\"devela/all/struct.Box.html\" title=\"struct devela::all::Box\">Box</a>&lt;T, A&gt;) -&gt; <a class=\"struct\" href=\"devela/all/struct.Pin.html\" title=\"struct devela::all::Pin\">Pin</a>&lt;<a class=\"struct\" href=\"devela/all/struct.Box.html\" title=\"struct devela::all::Box\">Box</a>&lt;T, A&gt;&gt;<div class=\"where\">where\n    A: 'static,</div></h4></section><span class=\"item-info\"><div class=\"stab portability\">Available on <strong>crate feature <code>alloc</code></strong> only.</div></span></summary><div class=\"docblock\"><p>Converts a <code>Box&lt;T&gt;</code> into a <code>Pin&lt;Box&lt;T&gt;&gt;</code>. If <code>T</code> does not implement <a href=\"devela/all/trait.Unpin.html\" title=\"trait devela::all::Unpin\"><code>Unpin</code></a>, then\n<code>*boxed</code> will be pinned in memory and unable to be moved.</p>\n<p>This conversion does not allocate on the heap and happens in place.</p>\n<p>This is also available via <a href=\"devela/code/trait.From.html\" title=\"trait devela::code::From\"><code>From</code></a>.</p>\n<p>Constructing and pinning a <code>Box</code> with <code>Box::into_pin(<a href=\"devela/all/struct.Box.html#method.new\" title=\"associated function devela::all::Box::new\">Box::new</a>(x))</code>\ncan also be written more concisely using <code><a href=\"devela/all/struct.Box.html#method.pin\" title=\"associated function devela::all::Box::pin\">Box::pin</a>(x)</code>.\nThis <code>into_pin</code> method is useful if you already have a <code>Box&lt;T&gt;</code>, or you are\nconstructing a (pinned) <code>Box</code> in a different way than with <a href=\"devela/all/struct.Box.html#method.new\" title=\"associated function devela::all::Box::new\"><code>Box::new</code></a>.</p>\n<h5 id=\"notes\"><a class=\"doc-anchor\" href=\"#notes\">§</a>Notes</h5>\n<p>It’s not recommended that crates add an impl like <code>From&lt;Box&lt;T&gt;&gt; for Pin&lt;T&gt;</code>,\nas it’ll introduce an ambiguity when calling <code>Pin::from</code>.\nA demonstration of such a poor impl is shown below.</p>\n\n<div class=\"example-wrap compile_fail\"><a href=\"#\" class=\"tooltip\" title=\"This example deliberately fails to compile\">ⓘ</a><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">struct </span>Foo; <span class=\"comment\">// A type defined in this crate.\n</span><span class=\"kw\">impl </span>From&lt;Box&lt;()&gt;&gt; <span class=\"kw\">for </span>Pin&lt;Foo&gt; {\n    <span class=\"kw\">fn </span>from(<span class=\"kw\">_</span>: Box&lt;()&gt;) -&gt; Pin&lt;Foo&gt; {\n        Pin::new(Foo)\n    }\n}\n\n<span class=\"kw\">let </span>foo = Box::new(());\n<span class=\"kw\">let </span>bar = Pin::from(foo);</code></pre></div>\n</div></details></div></details>",0,"devela::_dep::sdl2::timer::TimerCallback","devela::_dep::toml_edit::ArrayIntoIter","devela::_dep::toml_edit::ArrayIter","devela::_dep::toml_edit::ArrayIterMut","devela::_dep::toml_edit::ArrayOfTablesIntoIter","devela::_dep::toml_edit::ArrayOfTablesIter","devela::_dep::toml_edit::ArrayOfTablesIterMut","devela::_dep::toml_edit::InlineTableIntoIter","devela::_dep::toml_edit::InlineTableIter","devela::_dep::toml_edit::InlineTableIterMut","devela::_dep::toml_edit::IntoIter","devela::_dep::toml_edit::Iter","devela::_dep::toml_edit::IterMut"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Box%3CT,+A%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/boxed.rs.html#394\">Source</a><a href=\"#impl-Box%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"struct\" href=\"devela/all/struct.Box.html\" title=\"struct devela::all::Box\">Box</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"devela/_core/alloc/trait.Allocator.html\" title=\"trait devela::_core::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.new_in\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/boxed.rs.html#412-414\">Source</a><h4 class=\"code-header\">pub fn <a href=\"devela/all/struct.Box.html#tymethod.new_in\" class=\"fn\">new_in</a>(x: T, alloc: A) -&gt; <a class=\"struct\" href=\"devela/all/struct.Box.html\" title=\"struct devela::all::Box\">Box</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"devela/_core/alloc/trait.Allocator.html\" title=\"trait devela::_core::alloc::Allocator\">Allocator</a>,</div></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>allocator_api</code>)</span></div><div class=\"stab portability\">Available on <strong>crate feature <code>alloc</code></strong> only.</div></span></summary><div class=\"docblock\"><p>Allocates memory in the given allocator then places <code>x</code> into it.</p>\n<p>This doesn’t actually allocate if <code>T</code> is zero-sized.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(allocator_api)]\n\n</span><span class=\"kw\">use </span>std::alloc::System;\n\n<span class=\"kw\">let </span>five = Box::new_in(<span class=\"number\">5</span>, System);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_new_in\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/boxed.rs.html#438-440\">Source</a><h4 class=\"code-header\">pub fn <a href=\"devela/all/struct.Box.html#tymethod.try_new_in\" class=\"fn\">try_new_in</a>(x: T, alloc: A) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"struct\" href=\"devela/all/struct.Box.html\" title=\"struct devela::all::Box\">Box</a>&lt;T, A&gt;, <a class=\"struct\" href=\"devela/_core/alloc/struct.AllocError.html\" title=\"struct devela::_core::alloc::AllocError\">AllocError</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;Box&lt;T, A&gt;, AllocError&gt;\">ⓘ</a><div class=\"where\">where\n    A: <a class=\"trait\" href=\"devela/_core/alloc/trait.Allocator.html\" title=\"trait devela::_core::alloc::Allocator\">Allocator</a>,</div></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>allocator_api</code>)</span></div><div class=\"stab portability\">Available on <strong>crate feature <code>alloc</code></strong> only.</div></span></summary><div class=\"docblock\"><p>Allocates memory in the given allocator then places <code>x</code> into it,\nreturning an error if the allocation fails</p>\n<p>This doesn’t actually allocate if <code>T</code> is zero-sized.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(allocator_api)]\n\n</span><span class=\"kw\">use </span>std::alloc::System;\n\n<span class=\"kw\">let </span>five = Box::try_new_in(<span class=\"number\">5</span>, System)<span class=\"question-mark\">?</span>;</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.new_uninit_in\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/boxed.rs.html#467-469\">Source</a><h4 class=\"code-header\">pub fn <a href=\"devela/all/struct.Box.html#tymethod.new_uninit_in\" class=\"fn\">new_uninit_in</a>(alloc: A) -&gt; <a class=\"struct\" href=\"devela/all/struct.Box.html\" title=\"struct devela::all::Box\">Box</a>&lt;<a class=\"union\" href=\"devela/all/union.MaybeUninit.html\" title=\"union devela::all::MaybeUninit\">MaybeUninit</a>&lt;T&gt;, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"devela/_core/alloc/trait.Allocator.html\" title=\"trait devela::_core::alloc::Allocator\">Allocator</a>,</div></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>allocator_api</code>)</span></div><div class=\"stab portability\">Available on <strong>crate feature <code>alloc</code></strong> only.</div></span></summary><div class=\"docblock\"><p>Constructs a new box with uninitialized contents in the provided allocator.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(allocator_api)]\n\n</span><span class=\"kw\">use </span>std::alloc::System;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>five = Box::&lt;u32, <span class=\"kw\">_</span>&gt;::new_uninit_in(System);\n<span class=\"comment\">// Deferred initialization:\n</span>five.write(<span class=\"number\">5</span>);\n<span class=\"kw\">let </span>five = <span class=\"kw\">unsafe </span>{ five.assume_init() };\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>five, <span class=\"number\">5</span>)</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_new_uninit_in\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/boxed.rs.html#500-502\">Source</a><h4 class=\"code-header\">pub fn <a href=\"devela/all/struct.Box.html#tymethod.try_new_uninit_in\" class=\"fn\">try_new_uninit_in</a>(alloc: A) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"struct\" href=\"devela/all/struct.Box.html\" title=\"struct devela::all::Box\">Box</a>&lt;<a class=\"union\" href=\"devela/all/union.MaybeUninit.html\" title=\"union devela::all::MaybeUninit\">MaybeUninit</a>&lt;T&gt;, A&gt;, <a class=\"struct\" href=\"devela/_core/alloc/struct.AllocError.html\" title=\"struct devela::_core::alloc::AllocError\">AllocError</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;Box&lt;MaybeUninit&lt;T&gt;, A&gt;, AllocError&gt;\">ⓘ</a><div class=\"where\">where\n    A: <a class=\"trait\" href=\"devela/_core/alloc/trait.Allocator.html\" title=\"trait devela::_core::alloc::Allocator\">Allocator</a>,</div></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>allocator_api</code>)</span></div><div class=\"stab portability\">Available on <strong>crate feature <code>alloc</code></strong> only.</div></span></summary><div class=\"docblock\"><p>Constructs a new box with uninitialized contents in the provided allocator,\nreturning an error if the allocation fails</p>\n<h5 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(allocator_api)]\n\n</span><span class=\"kw\">use </span>std::alloc::System;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>five = Box::&lt;u32, <span class=\"kw\">_</span>&gt;::try_new_uninit_in(System)<span class=\"question-mark\">?</span>;\n<span class=\"comment\">// Deferred initialization:\n</span>five.write(<span class=\"number\">5</span>);\n<span class=\"kw\">let </span>five = <span class=\"kw\">unsafe </span>{ five.assume_init() };\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>five, <span class=\"number\">5</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.new_zeroed_in\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/boxed.rs.html#537-539\">Source</a><h4 class=\"code-header\">pub fn <a href=\"devela/all/struct.Box.html#tymethod.new_zeroed_in\" class=\"fn\">new_zeroed_in</a>(alloc: A) -&gt; <a class=\"struct\" href=\"devela/all/struct.Box.html\" title=\"struct devela::all::Box\">Box</a>&lt;<a class=\"union\" href=\"devela/all/union.MaybeUninit.html\" title=\"union devela::all::MaybeUninit\">MaybeUninit</a>&lt;T&gt;, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"devela/_core/alloc/trait.Allocator.html\" title=\"trait devela::_core::alloc::Allocator\">Allocator</a>,</div></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>allocator_api</code>)</span></div><div class=\"stab portability\">Available on <strong>crate feature <code>alloc</code></strong> only.</div></span></summary><div class=\"docblock\"><p>Constructs a new <code>Box</code> with uninitialized contents, with the memory\nbeing filled with <code>0</code> bytes in the provided allocator.</p>\n<p>See <a href=\"devela/all/union.MaybeUninit.html#method.zeroed\" title=\"associated function devela::all::MaybeUninit::zeroed\"><code>MaybeUninit::zeroed</code></a> for examples of correct and incorrect usage\nof this method.</p>\n<h5 id=\"examples-4\"><a class=\"doc-anchor\" href=\"#examples-4\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(allocator_api)]\n\n</span><span class=\"kw\">use </span>std::alloc::System;\n\n<span class=\"kw\">let </span>zero = Box::&lt;u32, <span class=\"kw\">_</span>&gt;::new_zeroed_in(System);\n<span class=\"kw\">let </span>zero = <span class=\"kw\">unsafe </span>{ zero.assume_init() };\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>zero, <span class=\"number\">0</span>)</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_new_zeroed_in\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/boxed.rs.html#574-576\">Source</a><h4 class=\"code-header\">pub fn <a href=\"devela/all/struct.Box.html#tymethod.try_new_zeroed_in\" class=\"fn\">try_new_zeroed_in</a>(alloc: A) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"struct\" href=\"devela/all/struct.Box.html\" title=\"struct devela::all::Box\">Box</a>&lt;<a class=\"union\" href=\"devela/all/union.MaybeUninit.html\" title=\"union devela::all::MaybeUninit\">MaybeUninit</a>&lt;T&gt;, A&gt;, <a class=\"struct\" href=\"devela/_core/alloc/struct.AllocError.html\" title=\"struct devela::_core::alloc::AllocError\">AllocError</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;Box&lt;MaybeUninit&lt;T&gt;, A&gt;, AllocError&gt;\">ⓘ</a><div class=\"where\">where\n    A: <a class=\"trait\" href=\"devela/_core/alloc/trait.Allocator.html\" title=\"trait devela::_core::alloc::Allocator\">Allocator</a>,</div></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>allocator_api</code>)</span></div><div class=\"stab portability\">Available on <strong>crate feature <code>alloc</code></strong> only.</div></span></summary><div class=\"docblock\"><p>Constructs a new <code>Box</code> with uninitialized contents, with the memory\nbeing filled with <code>0</code> bytes in the provided allocator,\nreturning an error if the allocation fails,</p>\n<p>See <a href=\"devela/all/union.MaybeUninit.html#method.zeroed\" title=\"associated function devela::all::MaybeUninit::zeroed\"><code>MaybeUninit::zeroed</code></a> for examples of correct and incorrect usage\nof this method.</p>\n<h5 id=\"examples-5\"><a class=\"doc-anchor\" href=\"#examples-5\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(allocator_api)]\n\n</span><span class=\"kw\">use </span>std::alloc::System;\n\n<span class=\"kw\">let </span>zero = Box::&lt;u32, <span class=\"kw\">_</span>&gt;::try_new_zeroed_in(System)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>zero = <span class=\"kw\">unsafe </span>{ zero.assume_init() };\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>zero, <span class=\"number\">0</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.pin_in\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/boxed.rs.html#598-600\">Source</a><h4 class=\"code-header\">pub fn <a href=\"devela/all/struct.Box.html#tymethod.pin_in\" class=\"fn\">pin_in</a>(x: T, alloc: A) -&gt; <a class=\"struct\" href=\"devela/all/struct.Pin.html\" title=\"struct devela::all::Pin\">Pin</a>&lt;<a class=\"struct\" href=\"devela/all/struct.Box.html\" title=\"struct devela::all::Box\">Box</a>&lt;T, A&gt;&gt;<div class=\"where\">where\n    A: 'static + <a class=\"trait\" href=\"devela/_core/alloc/trait.Allocator.html\" title=\"trait devela::_core::alloc::Allocator\">Allocator</a>,</div></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>allocator_api</code>)</span></div><div class=\"stab portability\">Available on <strong>crate feature <code>alloc</code></strong> only.</div></span></summary><div class=\"docblock\"><p>Constructs a new <code>Pin&lt;Box&lt;T, A&gt;&gt;</code>. If <code>T</code> does not implement <a href=\"devela/all/trait.Unpin.html\" title=\"trait devela::all::Unpin\"><code>Unpin</code></a>, then\n<code>x</code> will be pinned in memory and unable to be moved.</p>\n<p>Constructing and pinning of the <code>Box</code> can also be done in two steps: <code>Box::pin_in(x, alloc)</code>\ndoes the same as <code><a href=\"devela/all/struct.Box.html#method.into_pin\" title=\"associated function devela::all::Box::into_pin\">Box::into_pin</a>(<a href=\"devela/all/struct.Box.html#method.new_in\" title=\"associated function devela::all::Box::new_in\">Box::new_in</a>(x, alloc))</code>. Consider using\n<a href=\"devela/all/struct.Box.html#method.into_pin\" title=\"associated function devela::all::Box::into_pin\"><code>into_pin</code></a> if you already have a <code>Box&lt;T, A&gt;</code>, or if you want to\nconstruct a (pinned) <code>Box</code> in a different way than with <a href=\"devela/all/struct.Box.html#method.new_in\" title=\"associated function devela::all::Box::new_in\"><code>Box::new_in</code></a>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_boxed_slice\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/boxed.rs.html#609\">Source</a><h4 class=\"code-header\">pub fn <a href=\"devela/all/struct.Box.html#tymethod.into_boxed_slice\" class=\"fn\">into_boxed_slice</a>(boxed: <a class=\"struct\" href=\"devela/all/struct.Box.html\" title=\"struct devela::all::Box\">Box</a>&lt;T, A&gt;) -&gt; <a class=\"struct\" href=\"devela/all/struct.Box.html\" title=\"struct devela::all::Box\">Box</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a>, A&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>box_into_boxed_slice</code>)</span></div><div class=\"stab portability\">Available on <strong>crate feature <code>alloc</code></strong> only.</div></span></summary><div class=\"docblock\"><p>Converts a <code>Box&lt;T&gt;</code> into a <code>Box&lt;[T]&gt;</code></p>\n<p>This conversion does not allocate on the heap and happens in place.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_inner\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/boxed.rs.html#627\">Source</a><h4 class=\"code-header\">pub fn <a href=\"devela/all/struct.Box.html#tymethod.into_inner\" class=\"fn\">into_inner</a>(boxed: <a class=\"struct\" href=\"devela/all/struct.Box.html\" title=\"struct devela::all::Box\">Box</a>&lt;T, A&gt;) -&gt; T</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>box_into_inner</code>)</span></div><div class=\"stab portability\">Available on <strong>crate feature <code>alloc</code></strong> only.</div></span></summary><div class=\"docblock\"><p>Consumes the <code>Box</code>, returning the wrapped value.</p>\n<h5 id=\"examples-6\"><a class=\"doc-anchor\" href=\"#examples-6\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(box_into_inner)]\n\n</span><span class=\"kw\">let </span>c = Box::new(<span class=\"number\">5</span>);\n\n<span class=\"macro\">assert_eq!</span>(Box::into_inner(c), <span class=\"number\">5</span>);</code></pre></div>\n</div></details></div></details>",0,"devela::_dep::sdl2::timer::TimerCallback","devela::_dep::toml_edit::ArrayIntoIter","devela::_dep::toml_edit::ArrayIter","devela::_dep::toml_edit::ArrayIterMut","devela::_dep::toml_edit::ArrayOfTablesIntoIter","devela::_dep::toml_edit::ArrayOfTablesIter","devela::_dep::toml_edit::ArrayOfTablesIterMut","devela::_dep::toml_edit::InlineTableIntoIter","devela::_dep::toml_edit::InlineTableIter","devela::_dep::toml_edit::InlineTableIterMut","devela::_dep::toml_edit::IntoIter","devela::_dep::toml_edit::Iter","devela::_dep::toml_edit::IterMut"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Buf-for-Box%3CT%3E\" class=\"impl\"><a href=\"#impl-Buf-for-Box%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; Buf for <a class=\"struct\" href=\"devela/all/struct.Box.html\" title=\"struct devela::all::Box\">Box</a>&lt;T&gt;<div class=\"where\">where\n    T: Buf + ?<a class=\"trait\" href=\"devela/all/trait.Sized.html\" title=\"trait devela::all::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.remaining\" class=\"method trait-impl\"><a href=\"#method.remaining\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">remaining</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a></h4></section></summary><div class='docblock'>Returns the number of bytes between the current position and the end of\nthe buffer. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.chunk\" class=\"method trait-impl\"><a href=\"#method.chunk\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">chunk</a>(&amp;self) -&gt; &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>] <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&amp;[u8]\">ⓘ</a></h4></section></summary><div class='docblock'>Returns a slice starting at the current position and of length between 0\nand <code>Buf::remaining()</code>. Note that this <em>can</em> return a shorter slice (this\nallows non-continuous internal representation). <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.chunks_vectored\" class=\"method trait-impl\"><a href=\"#method.chunks_vectored\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">chunks_vectored</a>&lt;'b&gt;(&amp;'b self, dst: &amp;mut [<a class=\"struct\" href=\"devela/all/struct.IoSlice.html\" title=\"struct devela::all::IoSlice\">IoSlice</a>&lt;'b&gt;]) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a></h4></section></summary><div class='docblock'>Fills <code>dst</code> with potentially multiple slices starting at <code>self</code>’s\ncurrent position. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.advance\" class=\"method trait-impl\"><a href=\"#method.advance\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">advance</a>(&amp;mut self, cnt: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>)</h4></section></summary><div class='docblock'>Advance the internal cursor of the Buf <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.has_remaining\" class=\"method trait-impl\"><a href=\"#method.has_remaining\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">has_remaining</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Returns true if there are any more bytes to consume <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.copy_to_slice\" class=\"method trait-impl\"><a href=\"#method.copy_to_slice\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">copy_to_slice</a>(&amp;mut self, dst: &amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>])</h4></section></summary><div class='docblock'>Copies bytes from <code>self</code> into <code>dst</code>. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_u8\" class=\"method trait-impl\"><a href=\"#method.get_u8\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">get_u8</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a></h4></section></summary><div class='docblock'>Gets an unsigned 8 bit integer from <code>self</code>. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_i8\" class=\"method trait-impl\"><a href=\"#method.get_i8\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">get_i8</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i8.html\">i8</a></h4></section></summary><div class='docblock'>Gets a signed 8 bit integer from <code>self</code>. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_u16\" class=\"method trait-impl\"><a href=\"#method.get_u16\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">get_u16</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>Gets an unsigned 16 bit integer from <code>self</code> in big-endian byte order. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_u16_le\" class=\"method trait-impl\"><a href=\"#method.get_u16_le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">get_u16_le</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>Gets an unsigned 16 bit integer from <code>self</code> in little-endian byte order. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_u16_ne\" class=\"method trait-impl\"><a href=\"#method.get_u16_ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">get_u16_ne</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>Gets an unsigned 16 bit integer from <code>self</code> in native-endian byte order. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_i16\" class=\"method trait-impl\"><a href=\"#method.get_i16\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">get_i16</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i16.html\">i16</a></h4></section></summary><div class='docblock'>Gets a signed 16 bit integer from <code>self</code> in big-endian byte order. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_i16_le\" class=\"method trait-impl\"><a href=\"#method.get_i16_le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">get_i16_le</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i16.html\">i16</a></h4></section></summary><div class='docblock'>Gets a signed 16 bit integer from <code>self</code> in little-endian byte order. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_i16_ne\" class=\"method trait-impl\"><a href=\"#method.get_i16_ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">get_i16_ne</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i16.html\">i16</a></h4></section></summary><div class='docblock'>Gets a signed 16 bit integer from <code>self</code> in native-endian byte order. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_u32\" class=\"method trait-impl\"><a href=\"#method.get_u32\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">get_u32</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"u32\">ⓘ</a></h4></section></summary><div class='docblock'>Gets an unsigned 32 bit integer from <code>self</code> in the big-endian byte order. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_u32_le\" class=\"method trait-impl\"><a href=\"#method.get_u32_le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">get_u32_le</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"u32\">ⓘ</a></h4></section></summary><div class='docblock'>Gets an unsigned 32 bit integer from <code>self</code> in the little-endian byte order. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_u32_ne\" class=\"method trait-impl\"><a href=\"#method.get_u32_ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">get_u32_ne</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"u32\">ⓘ</a></h4></section></summary><div class='docblock'>Gets an unsigned 32 bit integer from <code>self</code> in native-endian byte order. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_i32\" class=\"method trait-impl\"><a href=\"#method.get_i32\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">get_i32</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h4></section></summary><div class='docblock'>Gets a signed 32 bit integer from <code>self</code> in big-endian byte order. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_i32_le\" class=\"method trait-impl\"><a href=\"#method.get_i32_le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">get_i32_le</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h4></section></summary><div class='docblock'>Gets a signed 32 bit integer from <code>self</code> in little-endian byte order. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_i32_ne\" class=\"method trait-impl\"><a href=\"#method.get_i32_ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">get_i32_ne</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h4></section></summary><div class='docblock'>Gets a signed 32 bit integer from <code>self</code> in native-endian byte order. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_u64\" class=\"method trait-impl\"><a href=\"#method.get_u64\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">get_u64</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u64.html\">u64</a></h4></section></summary><div class='docblock'>Gets an unsigned 64 bit integer from <code>self</code> in big-endian byte order. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_u64_le\" class=\"method trait-impl\"><a href=\"#method.get_u64_le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">get_u64_le</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u64.html\">u64</a></h4></section></summary><div class='docblock'>Gets an unsigned 64 bit integer from <code>self</code> in little-endian byte order. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_u64_ne\" class=\"method trait-impl\"><a href=\"#method.get_u64_ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">get_u64_ne</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u64.html\">u64</a></h4></section></summary><div class='docblock'>Gets an unsigned 64 bit integer from <code>self</code> in native-endian byte order. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_i64\" class=\"method trait-impl\"><a href=\"#method.get_i64\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">get_i64</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i64.html\">i64</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i64\">ⓘ</a></h4></section></summary><div class='docblock'>Gets a signed 64 bit integer from <code>self</code> in big-endian byte order. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_i64_le\" class=\"method trait-impl\"><a href=\"#method.get_i64_le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">get_i64_le</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i64.html\">i64</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i64\">ⓘ</a></h4></section></summary><div class='docblock'>Gets a signed 64 bit integer from <code>self</code> in little-endian byte order. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_i64_ne\" class=\"method trait-impl\"><a href=\"#method.get_i64_ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">get_i64_ne</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i64.html\">i64</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i64\">ⓘ</a></h4></section></summary><div class='docblock'>Gets a signed 64 bit integer from <code>self</code> in native-endian byte order. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_u128\" class=\"method trait-impl\"><a href=\"#method.get_u128\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">get_u128</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u128.html\">u128</a></h4></section></summary><div class='docblock'>Gets an unsigned 128 bit integer from <code>self</code> in big-endian byte order. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_u128_le\" class=\"method trait-impl\"><a href=\"#method.get_u128_le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">get_u128_le</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u128.html\">u128</a></h4></section></summary><div class='docblock'>Gets an unsigned 128 bit integer from <code>self</code> in little-endian byte order. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_u128_ne\" class=\"method trait-impl\"><a href=\"#method.get_u128_ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">get_u128_ne</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u128.html\">u128</a></h4></section></summary><div class='docblock'>Gets an unsigned 128 bit integer from <code>self</code> in native-endian byte order. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_i128\" class=\"method trait-impl\"><a href=\"#method.get_i128\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">get_i128</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i128.html\">i128</a></h4></section></summary><div class='docblock'>Gets a signed 128 bit integer from <code>self</code> in big-endian byte order. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_i128_le\" class=\"method trait-impl\"><a href=\"#method.get_i128_le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">get_i128_le</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i128.html\">i128</a></h4></section></summary><div class='docblock'>Gets a signed 128 bit integer from <code>self</code> in little-endian byte order. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_i128_ne\" class=\"method trait-impl\"><a href=\"#method.get_i128_ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">get_i128_ne</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i128.html\">i128</a></h4></section></summary><div class='docblock'>Gets a signed 128 bit integer from <code>self</code> in native-endian byte order. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_uint\" class=\"method trait-impl\"><a href=\"#method.get_uint\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">get_uint</a>(&amp;mut self, nbytes: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u64.html\">u64</a></h4></section></summary><div class='docblock'>Gets an unsigned n-byte integer from <code>self</code> in big-endian byte order. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_uint_le\" class=\"method trait-impl\"><a href=\"#method.get_uint_le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">get_uint_le</a>(&amp;mut self, nbytes: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u64.html\">u64</a></h4></section></summary><div class='docblock'>Gets an unsigned n-byte integer from <code>self</code> in little-endian byte order. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_uint_ne\" class=\"method trait-impl\"><a href=\"#method.get_uint_ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">get_uint_ne</a>(&amp;mut self, nbytes: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u64.html\">u64</a></h4></section></summary><div class='docblock'>Gets an unsigned n-byte integer from <code>self</code> in native-endian byte order. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_int\" class=\"method trait-impl\"><a href=\"#method.get_int\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">get_int</a>(&amp;mut self, nbytes: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i64.html\">i64</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i64\">ⓘ</a></h4></section></summary><div class='docblock'>Gets a signed n-byte integer from <code>self</code> in big-endian byte order. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_int_le\" class=\"method trait-impl\"><a href=\"#method.get_int_le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">get_int_le</a>(&amp;mut self, nbytes: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i64.html\">i64</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i64\">ⓘ</a></h4></section></summary><div class='docblock'>Gets a signed n-byte integer from <code>self</code> in little-endian byte order. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_int_ne\" class=\"method trait-impl\"><a href=\"#method.get_int_ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">get_int_ne</a>(&amp;mut self, nbytes: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i64.html\">i64</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i64\">ⓘ</a></h4></section></summary><div class='docblock'>Gets a signed n-byte integer from <code>self</code> in native-endian byte order. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_f32\" class=\"method trait-impl\"><a href=\"#method.get_f32\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">get_f32</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.f32.html\">f32</a></h4></section></summary><div class='docblock'>Gets an IEEE754 single-precision (4 bytes) floating point number from\n<code>self</code> in big-endian byte order. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_f32_le\" class=\"method trait-impl\"><a href=\"#method.get_f32_le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">get_f32_le</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.f32.html\">f32</a></h4></section></summary><div class='docblock'>Gets an IEEE754 single-precision (4 bytes) floating point number from\n<code>self</code> in little-endian byte order. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_f32_ne\" class=\"method trait-impl\"><a href=\"#method.get_f32_ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">get_f32_ne</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.f32.html\">f32</a></h4></section></summary><div class='docblock'>Gets an IEEE754 single-precision (4 bytes) floating point number from\n<code>self</code> in native-endian byte order. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_f64\" class=\"method trait-impl\"><a href=\"#method.get_f64\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">get_f64</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.f64.html\">f64</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"f64\">ⓘ</a></h4></section></summary><div class='docblock'>Gets an IEEE754 double-precision (8 bytes) floating point number from\n<code>self</code> in big-endian byte order. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_f64_le\" class=\"method trait-impl\"><a href=\"#method.get_f64_le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">get_f64_le</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.f64.html\">f64</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"f64\">ⓘ</a></h4></section></summary><div class='docblock'>Gets an IEEE754 double-precision (8 bytes) floating point number from\n<code>self</code> in little-endian byte order. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_f64_ne\" class=\"method trait-impl\"><a href=\"#method.get_f64_ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">get_f64_ne</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.f64.html\">f64</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"f64\">ⓘ</a></h4></section></summary><div class='docblock'>Gets an IEEE754 double-precision (8 bytes) floating point number from\n<code>self</code> in native-endian byte order. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_copy_to_slice\" class=\"method trait-impl\"><a href=\"#method.try_copy_to_slice\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">try_copy_to_slice</a>(&amp;mut self, dst: &amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>]) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, TryGetError&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;(), TryGetError&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Copies bytes from <code>self</code> into <code>dst</code>. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_get_u8\" class=\"method trait-impl\"><a href=\"#method.try_get_u8\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">try_get_u8</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>, TryGetError&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;u8, TryGetError&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Gets an unsigned 8 bit integer from <code>self</code>. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_get_i8\" class=\"method trait-impl\"><a href=\"#method.try_get_i8\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">try_get_i8</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i8.html\">i8</a>, TryGetError&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;i8, TryGetError&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Gets a signed 8 bit integer from <code>self</code>. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_get_u16\" class=\"method trait-impl\"><a href=\"#method.try_get_u16\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">try_get_u16</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u16.html\">u16</a>, TryGetError&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;u16, TryGetError&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Gets an unsigned 16 bit integer from <code>self</code> in big-endian byte order. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_get_u16_le\" class=\"method trait-impl\"><a href=\"#method.try_get_u16_le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">try_get_u16_le</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u16.html\">u16</a>, TryGetError&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;u16, TryGetError&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Gets an unsigned 16 bit integer from <code>self</code> in little-endian byte order. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_get_u16_ne\" class=\"method trait-impl\"><a href=\"#method.try_get_u16_ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">try_get_u16_ne</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u16.html\">u16</a>, TryGetError&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;u16, TryGetError&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Gets an unsigned 16 bit integer from <code>self</code> in native-endian byte order. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_get_i16\" class=\"method trait-impl\"><a href=\"#method.try_get_i16\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">try_get_i16</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i16.html\">i16</a>, TryGetError&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;i16, TryGetError&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Gets a signed 16 bit integer from <code>self</code> in big-endian byte order. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_get_i16_le\" class=\"method trait-impl\"><a href=\"#method.try_get_i16_le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">try_get_i16_le</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i16.html\">i16</a>, TryGetError&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;i16, TryGetError&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Gets an signed 16 bit integer from <code>self</code> in little-endian byte order. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_get_i16_ne\" class=\"method trait-impl\"><a href=\"#method.try_get_i16_ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">try_get_i16_ne</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i16.html\">i16</a>, TryGetError&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;i16, TryGetError&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Gets a signed 16 bit integer from <code>self</code> in native-endian byte order. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_get_u32\" class=\"method trait-impl\"><a href=\"#method.try_get_u32\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">try_get_u32</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>, TryGetError&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;u32, TryGetError&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Gets an unsigned 32 bit integer from <code>self</code> in big-endian byte order. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_get_u32_le\" class=\"method trait-impl\"><a href=\"#method.try_get_u32_le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">try_get_u32_le</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>, TryGetError&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;u32, TryGetError&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Gets an unsigned 32 bit integer from <code>self</code> in little-endian byte order. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_get_u32_ne\" class=\"method trait-impl\"><a href=\"#method.try_get_u32_ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">try_get_u32_ne</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>, TryGetError&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;u32, TryGetError&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Gets an unsigned 32 bit integer from <code>self</code> in native-endian byte order. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_get_i32\" class=\"method trait-impl\"><a href=\"#method.try_get_i32\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">try_get_i32</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>, TryGetError&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;i32, TryGetError&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Gets a signed 32 bit integer from <code>self</code> in big-endian byte order. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_get_i32_le\" class=\"method trait-impl\"><a href=\"#method.try_get_i32_le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">try_get_i32_le</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>, TryGetError&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;i32, TryGetError&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Gets a signed 32 bit integer from <code>self</code> in little-endian byte order. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_get_i32_ne\" class=\"method trait-impl\"><a href=\"#method.try_get_i32_ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">try_get_i32_ne</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>, TryGetError&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;i32, TryGetError&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Gets a signed 32 bit integer from <code>self</code> in native-endian byte order. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_get_u64\" class=\"method trait-impl\"><a href=\"#method.try_get_u64\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">try_get_u64</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u64.html\">u64</a>, TryGetError&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;u64, TryGetError&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Gets an unsigned 64 bit integer from <code>self</code> in big-endian byte order. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_get_u64_le\" class=\"method trait-impl\"><a href=\"#method.try_get_u64_le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">try_get_u64_le</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u64.html\">u64</a>, TryGetError&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;u64, TryGetError&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Gets an unsigned 64 bit integer from <code>self</code> in little-endian byte order. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_get_u64_ne\" class=\"method trait-impl\"><a href=\"#method.try_get_u64_ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">try_get_u64_ne</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u64.html\">u64</a>, TryGetError&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;u64, TryGetError&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Gets an unsigned 64 bit integer from <code>self</code> in native-endian byte order. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_get_i64\" class=\"method trait-impl\"><a href=\"#method.try_get_i64\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">try_get_i64</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i64.html\">i64</a>, TryGetError&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;i64, TryGetError&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Gets a signed 64 bit integer from <code>self</code> in big-endian byte order. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_get_i64_le\" class=\"method trait-impl\"><a href=\"#method.try_get_i64_le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">try_get_i64_le</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i64.html\">i64</a>, TryGetError&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;i64, TryGetError&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Gets a signed 64 bit integer from <code>self</code> in little-endian byte order. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_get_i64_ne\" class=\"method trait-impl\"><a href=\"#method.try_get_i64_ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">try_get_i64_ne</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i64.html\">i64</a>, TryGetError&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;i64, TryGetError&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Gets a signed 64 bit integer from <code>self</code> in native-endian byte order. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_get_u128\" class=\"method trait-impl\"><a href=\"#method.try_get_u128\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">try_get_u128</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u128.html\">u128</a>, TryGetError&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;u128, TryGetError&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Gets an unsigned 128 bit integer from <code>self</code> in big-endian byte order. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_get_u128_le\" class=\"method trait-impl\"><a href=\"#method.try_get_u128_le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">try_get_u128_le</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u128.html\">u128</a>, TryGetError&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;u128, TryGetError&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Gets an unsigned 128 bit integer from <code>self</code> in little-endian byte order. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_get_u128_ne\" class=\"method trait-impl\"><a href=\"#method.try_get_u128_ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">try_get_u128_ne</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u128.html\">u128</a>, TryGetError&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;u128, TryGetError&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Gets an unsigned 128 bit integer from <code>self</code> in native-endian byte order. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_get_i128\" class=\"method trait-impl\"><a href=\"#method.try_get_i128\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">try_get_i128</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i128.html\">i128</a>, TryGetError&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;i128, TryGetError&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Gets a signed 128 bit integer from <code>self</code> in big-endian byte order. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_get_i128_le\" class=\"method trait-impl\"><a href=\"#method.try_get_i128_le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">try_get_i128_le</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i128.html\">i128</a>, TryGetError&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;i128, TryGetError&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Gets a signed 128 bit integer from <code>self</code> in little-endian byte order. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_get_i128_ne\" class=\"method trait-impl\"><a href=\"#method.try_get_i128_ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">try_get_i128_ne</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i128.html\">i128</a>, TryGetError&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;i128, TryGetError&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Gets a signed 128 bit integer from <code>self</code> in native-endian byte order. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_get_uint\" class=\"method trait-impl\"><a href=\"#method.try_get_uint\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">try_get_uint</a>(&amp;mut self, nbytes: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u64.html\">u64</a>, TryGetError&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;u64, TryGetError&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Gets an unsigned n-byte integer from <code>self</code> in big-endian byte order. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_get_uint_le\" class=\"method trait-impl\"><a href=\"#method.try_get_uint_le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">try_get_uint_le</a>(&amp;mut self, nbytes: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u64.html\">u64</a>, TryGetError&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;u64, TryGetError&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Gets an unsigned n-byte integer from <code>self</code> in little-endian byte order. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_get_uint_ne\" class=\"method trait-impl\"><a href=\"#method.try_get_uint_ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">try_get_uint_ne</a>(&amp;mut self, nbytes: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u64.html\">u64</a>, TryGetError&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;u64, TryGetError&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Gets an unsigned n-byte integer from <code>self</code> in native-endian byte order. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_get_int\" class=\"method trait-impl\"><a href=\"#method.try_get_int\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">try_get_int</a>(&amp;mut self, nbytes: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i64.html\">i64</a>, TryGetError&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;i64, TryGetError&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Gets a signed n-byte integer from <code>self</code> in big-endian byte order. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_get_int_le\" class=\"method trait-impl\"><a href=\"#method.try_get_int_le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">try_get_int_le</a>(&amp;mut self, nbytes: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i64.html\">i64</a>, TryGetError&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;i64, TryGetError&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Gets a signed n-byte integer from <code>self</code> in little-endian byte order. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_get_int_ne\" class=\"method trait-impl\"><a href=\"#method.try_get_int_ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">try_get_int_ne</a>(&amp;mut self, nbytes: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i64.html\">i64</a>, TryGetError&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;i64, TryGetError&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Gets a signed n-byte integer from <code>self</code> in native-endian byte order. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_get_f32\" class=\"method trait-impl\"><a href=\"#method.try_get_f32\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">try_get_f32</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.f32.html\">f32</a>, TryGetError&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;f32, TryGetError&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Gets an IEEE754 single-precision (4 bytes) floating point number from\n<code>self</code> in big-endian byte order. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_get_f32_le\" class=\"method trait-impl\"><a href=\"#method.try_get_f32_le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">try_get_f32_le</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.f32.html\">f32</a>, TryGetError&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;f32, TryGetError&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Gets an IEEE754 single-precision (4 bytes) floating point number from\n<code>self</code> in little-endian byte order. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_get_f32_ne\" class=\"method trait-impl\"><a href=\"#method.try_get_f32_ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">try_get_f32_ne</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.f32.html\">f32</a>, TryGetError&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;f32, TryGetError&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Gets an IEEE754 single-precision (4 bytes) floating point number from\n<code>self</code> in native-endian byte order. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_get_f64\" class=\"method trait-impl\"><a href=\"#method.try_get_f64\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">try_get_f64</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.f64.html\">f64</a>, TryGetError&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;f64, TryGetError&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Gets an IEEE754 double-precision (8 bytes) floating point number from\n<code>self</code> in big-endian byte order. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_get_f64_le\" class=\"method trait-impl\"><a href=\"#method.try_get_f64_le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">try_get_f64_le</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.f64.html\">f64</a>, TryGetError&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;f64, TryGetError&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Gets an IEEE754 double-precision (8 bytes) floating point number from\n<code>self</code> in little-endian byte order. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_get_f64_ne\" class=\"method trait-impl\"><a href=\"#method.try_get_f64_ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">try_get_f64_ne</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.f64.html\">f64</a>, TryGetError&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;f64, TryGetError&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Gets an IEEE754 double-precision (8 bytes) floating point number from\n<code>self</code> in native-endian byte order. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.copy_to_bytes\" class=\"method trait-impl\"><a href=\"#method.copy_to_bytes\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">copy_to_bytes</a>(&amp;mut self, len: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>) -&gt; Bytes</h4></section></summary><div class='docblock'>Consumes <code>len</code> bytes inside self and returns new instance of <code>Bytes</code>\nwith this data. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.take\" class=\"method trait-impl\"><a href=\"#method.take\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">take</a>(self, limit: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>) -&gt; Take&lt;Self&gt;<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"devela/all/trait.Sized.html\" title=\"trait devela::all::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Creates an adaptor which will read at most <code>limit</code> bytes from <code>self</code>. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.chain\" class=\"method trait-impl\"><a href=\"#method.chain\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">chain</a>&lt;U&gt;(self, next: U) -&gt; Chain&lt;Self, U&gt;<div class=\"where\">where\n    U: Buf,\n    Self: <a class=\"trait\" href=\"devela/all/trait.Sized.html\" title=\"trait devela::all::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Creates an adaptor which will chain this buffer with another. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.reader\" class=\"method trait-impl\"><a href=\"#method.reader\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">reader</a>(self) -&gt; Reader&lt;Self&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Reader&lt;Self&gt;\">ⓘ</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"devela/all/trait.Sized.html\" title=\"trait devela::all::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Creates an adaptor which implements the <code>Read</code> trait for <code>self</code>. <a>Read more</a></div></details></div></details>","Buf","devela::_dep::sdl2::timer::TimerCallback","devela::_dep::toml_edit::ArrayIntoIter","devela::_dep::toml_edit::ArrayIter","devela::_dep::toml_edit::ArrayIterMut","devela::_dep::toml_edit::ArrayOfTablesIntoIter","devela::_dep::toml_edit::ArrayOfTablesIter","devela::_dep::toml_edit::ArrayOfTablesIterMut","devela::_dep::toml_edit::InlineTableIntoIter","devela::_dep::toml_edit::InlineTableIter","devela::_dep::toml_edit::InlineTableIterMut","devela::_dep::toml_edit::IntoIter","devela::_dep::toml_edit::Iter","devela::_dep::toml_edit::IterMut"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BufMut-for-Box%3CT%3E\" class=\"impl\"><a href=\"#impl-BufMut-for-Box%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; BufMut for <a class=\"struct\" href=\"devela/all/struct.Box.html\" title=\"struct devela::all::Box\">Box</a>&lt;T&gt;<div class=\"where\">where\n    T: BufMut + ?<a class=\"trait\" href=\"devela/all/trait.Sized.html\" title=\"trait devela::all::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.remaining_mut\" class=\"method trait-impl\"><a href=\"#method.remaining_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">remaining_mut</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a></h4></section></summary><div class='docblock'>Returns the number of bytes that can be written from the current\nposition until the end of the buffer is reached. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.chunk_mut\" class=\"method trait-impl\"><a href=\"#method.chunk_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">chunk_mut</a>(&amp;mut self) -&gt; &amp;mut UninitSlice</h4></section></summary><div class='docblock'>Returns a mutable slice starting at the current BufMut position and of\nlength between 0 and <code>BufMut::remaining_mut()</code>. Note that this <em>can</em> be shorter than the\nwhole remainder of the buffer (this allows non-continuous implementation). <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.advance_mut\" class=\"method trait-impl\"><a href=\"#method.advance_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">unsafe fn <a class=\"fn\">advance_mut</a>(&amp;mut self, cnt: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>)</h4></section></summary><div class='docblock'>Advance the internal cursor of the BufMut <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.put_slice\" class=\"method trait-impl\"><a href=\"#method.put_slice\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">put_slice</a>(&amp;mut self, src: &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>])</h4></section></summary><div class='docblock'>Transfer bytes into <code>self</code> from <code>src</code> and advance the cursor by the\nnumber of bytes written. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.put_u8\" class=\"method trait-impl\"><a href=\"#method.put_u8\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">put_u8</a>(&amp;mut self, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>)</h4></section></summary><div class='docblock'>Writes an unsigned 8 bit integer to <code>self</code>. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.put_i8\" class=\"method trait-impl\"><a href=\"#method.put_i8\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">put_i8</a>(&amp;mut self, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i8.html\">i8</a>)</h4></section></summary><div class='docblock'>Writes a signed 8 bit integer to <code>self</code>. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.put_u16\" class=\"method trait-impl\"><a href=\"#method.put_u16\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">put_u16</a>(&amp;mut self, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u16.html\">u16</a>)</h4></section></summary><div class='docblock'>Writes an unsigned 16 bit integer to <code>self</code> in big-endian byte order. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.put_u16_le\" class=\"method trait-impl\"><a href=\"#method.put_u16_le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">put_u16_le</a>(&amp;mut self, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u16.html\">u16</a>)</h4></section></summary><div class='docblock'>Writes an unsigned 16 bit integer to <code>self</code> in little-endian byte order. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.put_u16_ne\" class=\"method trait-impl\"><a href=\"#method.put_u16_ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">put_u16_ne</a>(&amp;mut self, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u16.html\">u16</a>)</h4></section></summary><div class='docblock'>Writes an unsigned 16 bit integer to <code>self</code> in native-endian byte order. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.put_i16\" class=\"method trait-impl\"><a href=\"#method.put_i16\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">put_i16</a>(&amp;mut self, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i16.html\">i16</a>)</h4></section></summary><div class='docblock'>Writes a signed 16 bit integer to <code>self</code> in big-endian byte order. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.put_i16_le\" class=\"method trait-impl\"><a href=\"#method.put_i16_le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">put_i16_le</a>(&amp;mut self, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i16.html\">i16</a>)</h4></section></summary><div class='docblock'>Writes a signed 16 bit integer to <code>self</code> in little-endian byte order. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.put_i16_ne\" class=\"method trait-impl\"><a href=\"#method.put_i16_ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">put_i16_ne</a>(&amp;mut self, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i16.html\">i16</a>)</h4></section></summary><div class='docblock'>Writes a signed 16 bit integer to <code>self</code> in native-endian byte order. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.put_u32\" class=\"method trait-impl\"><a href=\"#method.put_u32\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">put_u32</a>(&amp;mut self, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>)</h4></section></summary><div class='docblock'>Writes an unsigned 32 bit integer to <code>self</code> in big-endian byte order. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.put_u32_le\" class=\"method trait-impl\"><a href=\"#method.put_u32_le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">put_u32_le</a>(&amp;mut self, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>)</h4></section></summary><div class='docblock'>Writes an unsigned 32 bit integer to <code>self</code> in little-endian byte order. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.put_u32_ne\" class=\"method trait-impl\"><a href=\"#method.put_u32_ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">put_u32_ne</a>(&amp;mut self, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>)</h4></section></summary><div class='docblock'>Writes an unsigned 32 bit integer to <code>self</code> in native-endian byte order. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.put_i32\" class=\"method trait-impl\"><a href=\"#method.put_i32\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">put_i32</a>(&amp;mut self, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>)</h4></section></summary><div class='docblock'>Writes a signed 32 bit integer to <code>self</code> in big-endian byte order. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.put_i32_le\" class=\"method trait-impl\"><a href=\"#method.put_i32_le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">put_i32_le</a>(&amp;mut self, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>)</h4></section></summary><div class='docblock'>Writes a signed 32 bit integer to <code>self</code> in little-endian byte order. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.put_i32_ne\" class=\"method trait-impl\"><a href=\"#method.put_i32_ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">put_i32_ne</a>(&amp;mut self, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>)</h4></section></summary><div class='docblock'>Writes a signed 32 bit integer to <code>self</code> in native-endian byte order. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.put_u64\" class=\"method trait-impl\"><a href=\"#method.put_u64\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">put_u64</a>(&amp;mut self, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u64.html\">u64</a>)</h4></section></summary><div class='docblock'>Writes an unsigned 64 bit integer to <code>self</code> in the big-endian byte order. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.put_u64_le\" class=\"method trait-impl\"><a href=\"#method.put_u64_le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">put_u64_le</a>(&amp;mut self, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u64.html\">u64</a>)</h4></section></summary><div class='docblock'>Writes an unsigned 64 bit integer to <code>self</code> in little-endian byte order. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.put_u64_ne\" class=\"method trait-impl\"><a href=\"#method.put_u64_ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">put_u64_ne</a>(&amp;mut self, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u64.html\">u64</a>)</h4></section></summary><div class='docblock'>Writes an unsigned 64 bit integer to <code>self</code> in native-endian byte order. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.put_i64\" class=\"method trait-impl\"><a href=\"#method.put_i64\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">put_i64</a>(&amp;mut self, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i64.html\">i64</a>)</h4></section></summary><div class='docblock'>Writes a signed 64 bit integer to <code>self</code> in the big-endian byte order. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.put_i64_le\" class=\"method trait-impl\"><a href=\"#method.put_i64_le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">put_i64_le</a>(&amp;mut self, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i64.html\">i64</a>)</h4></section></summary><div class='docblock'>Writes a signed 64 bit integer to <code>self</code> in little-endian byte order. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.put_i64_ne\" class=\"method trait-impl\"><a href=\"#method.put_i64_ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">put_i64_ne</a>(&amp;mut self, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i64.html\">i64</a>)</h4></section></summary><div class='docblock'>Writes a signed 64 bit integer to <code>self</code> in native-endian byte order. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.has_remaining_mut\" class=\"method trait-impl\"><a href=\"#method.has_remaining_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">has_remaining_mut</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Returns true if there is space in <code>self</code> for more bytes. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.put\" class=\"method trait-impl\"><a href=\"#method.put\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">put</a>&lt;T&gt;(&amp;mut self, src: T)<div class=\"where\">where\n    T: Buf,\n    Self: <a class=\"trait\" href=\"devela/all/trait.Sized.html\" title=\"trait devela::all::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Transfer bytes into <code>self</code> from <code>src</code> and advance the cursor by the\nnumber of bytes written. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.put_bytes\" class=\"method trait-impl\"><a href=\"#method.put_bytes\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">put_bytes</a>(&amp;mut self, val: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>, cnt: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>)</h4></section></summary><div class='docblock'>Put <code>cnt</code> bytes <code>val</code> into <code>self</code>. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.put_u128\" class=\"method trait-impl\"><a href=\"#method.put_u128\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">put_u128</a>(&amp;mut self, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u128.html\">u128</a>)</h4></section></summary><div class='docblock'>Writes an unsigned 128 bit integer to <code>self</code> in the big-endian byte order. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.put_u128_le\" class=\"method trait-impl\"><a href=\"#method.put_u128_le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">put_u128_le</a>(&amp;mut self, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u128.html\">u128</a>)</h4></section></summary><div class='docblock'>Writes an unsigned 128 bit integer to <code>self</code> in little-endian byte order. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.put_u128_ne\" class=\"method trait-impl\"><a href=\"#method.put_u128_ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">put_u128_ne</a>(&amp;mut self, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u128.html\">u128</a>)</h4></section></summary><div class='docblock'>Writes an unsigned 128 bit integer to <code>self</code> in native-endian byte order. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.put_i128\" class=\"method trait-impl\"><a href=\"#method.put_i128\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">put_i128</a>(&amp;mut self, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i128.html\">i128</a>)</h4></section></summary><div class='docblock'>Writes a signed 128 bit integer to <code>self</code> in the big-endian byte order. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.put_i128_le\" class=\"method trait-impl\"><a href=\"#method.put_i128_le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">put_i128_le</a>(&amp;mut self, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i128.html\">i128</a>)</h4></section></summary><div class='docblock'>Writes a signed 128 bit integer to <code>self</code> in little-endian byte order. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.put_i128_ne\" class=\"method trait-impl\"><a href=\"#method.put_i128_ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">put_i128_ne</a>(&amp;mut self, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i128.html\">i128</a>)</h4></section></summary><div class='docblock'>Writes a signed 128 bit integer to <code>self</code> in native-endian byte order. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.put_uint\" class=\"method trait-impl\"><a href=\"#method.put_uint\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">put_uint</a>(&amp;mut self, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u64.html\">u64</a>, nbytes: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>)</h4></section></summary><div class='docblock'>Writes an unsigned n-byte integer to <code>self</code> in big-endian byte order. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.put_uint_le\" class=\"method trait-impl\"><a href=\"#method.put_uint_le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">put_uint_le</a>(&amp;mut self, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u64.html\">u64</a>, nbytes: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>)</h4></section></summary><div class='docblock'>Writes an unsigned n-byte integer to <code>self</code> in the little-endian byte order. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.put_uint_ne\" class=\"method trait-impl\"><a href=\"#method.put_uint_ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">put_uint_ne</a>(&amp;mut self, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u64.html\">u64</a>, nbytes: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>)</h4></section></summary><div class='docblock'>Writes an unsigned n-byte integer to <code>self</code> in the native-endian byte order. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.put_int\" class=\"method trait-impl\"><a href=\"#method.put_int\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">put_int</a>(&amp;mut self, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i64.html\">i64</a>, nbytes: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>)</h4></section></summary><div class='docblock'>Writes low <code>nbytes</code> of a signed integer to <code>self</code> in big-endian byte order. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.put_int_le\" class=\"method trait-impl\"><a href=\"#method.put_int_le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">put_int_le</a>(&amp;mut self, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i64.html\">i64</a>, nbytes: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>)</h4></section></summary><div class='docblock'>Writes low <code>nbytes</code> of a signed integer to <code>self</code> in little-endian byte order. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.put_int_ne\" class=\"method trait-impl\"><a href=\"#method.put_int_ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">put_int_ne</a>(&amp;mut self, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i64.html\">i64</a>, nbytes: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>)</h4></section></summary><div class='docblock'>Writes low <code>nbytes</code> of a signed integer to <code>self</code> in native-endian byte order. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.put_f32\" class=\"method trait-impl\"><a href=\"#method.put_f32\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">put_f32</a>(&amp;mut self, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.f32.html\">f32</a>)</h4></section></summary><div class='docblock'>Writes an IEEE754 single-precision (4 bytes) floating point number to\n<code>self</code> in big-endian byte order. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.put_f32_le\" class=\"method trait-impl\"><a href=\"#method.put_f32_le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">put_f32_le</a>(&amp;mut self, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.f32.html\">f32</a>)</h4></section></summary><div class='docblock'>Writes an IEEE754 single-precision (4 bytes) floating point number to\n<code>self</code> in little-endian byte order. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.put_f32_ne\" class=\"method trait-impl\"><a href=\"#method.put_f32_ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">put_f32_ne</a>(&amp;mut self, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.f32.html\">f32</a>)</h4></section></summary><div class='docblock'>Writes an IEEE754 single-precision (4 bytes) floating point number to\n<code>self</code> in native-endian byte order. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.put_f64\" class=\"method trait-impl\"><a href=\"#method.put_f64\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">put_f64</a>(&amp;mut self, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.f64.html\">f64</a>)</h4></section></summary><div class='docblock'>Writes an IEEE754 double-precision (8 bytes) floating point number to\n<code>self</code> in big-endian byte order. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.put_f64_le\" class=\"method trait-impl\"><a href=\"#method.put_f64_le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">put_f64_le</a>(&amp;mut self, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.f64.html\">f64</a>)</h4></section></summary><div class='docblock'>Writes an IEEE754 double-precision (8 bytes) floating point number to\n<code>self</code> in little-endian byte order. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.put_f64_ne\" class=\"method trait-impl\"><a href=\"#method.put_f64_ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">put_f64_ne</a>(&amp;mut self, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.f64.html\">f64</a>)</h4></section></summary><div class='docblock'>Writes an IEEE754 double-precision (8 bytes) floating point number to\n<code>self</code> in native-endian byte order. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.limit\" class=\"method trait-impl\"><a href=\"#method.limit\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">limit</a>(self, limit: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>) -&gt; Limit&lt;Self&gt;<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"devela/all/trait.Sized.html\" title=\"trait devela::all::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Creates an adaptor which can write at most <code>limit</code> bytes to <code>self</code>. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.writer\" class=\"method trait-impl\"><a href=\"#method.writer\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">writer</a>(self) -&gt; Writer&lt;Self&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Writer&lt;Self&gt;\">ⓘ</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"devela/all/trait.Sized.html\" title=\"trait devela::all::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Creates an adaptor which implements the <code>Write</code> trait for <code>self</code>. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.chain_mut\" class=\"method trait-impl\"><a href=\"#method.chain_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">chain_mut</a>&lt;U&gt;(self, next: U) -&gt; Chain&lt;Self, U&gt;<div class=\"where\">where\n    U: BufMut,\n    Self: <a class=\"trait\" href=\"devela/all/trait.Sized.html\" title=\"trait devela::all::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Creates an adapter which will chain this buffer with another. <a>Read more</a></div></details></div></details>","BufMut","devela::_dep::sdl2::timer::TimerCallback","devela::_dep::toml_edit::ArrayIntoIter","devela::_dep::toml_edit::ArrayIter","devela::_dep::toml_edit::ArrayIterMut","devela::_dep::toml_edit::ArrayOfTablesIntoIter","devela::_dep::toml_edit::ArrayOfTablesIter","devela::_dep::toml_edit::ArrayOfTablesIterMut","devela::_dep::toml_edit::InlineTableIntoIter","devela::_dep::toml_edit::InlineTableIter","devela::_dep::toml_edit::InlineTableIterMut","devela::_dep::toml_edit::IntoIter","devela::_dep::toml_edit::Iter","devela::_dep::toml_edit::IterMut"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BufRead-for-Box%3CB%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/std/io/impls.rs.html#258\">Source</a></span><a href=\"#impl-BufRead-for-Box%3CB%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;B&gt; <a class=\"trait\" href=\"devela/all/trait.IoBufRead.html\" title=\"trait devela::all::IoBufRead\">BufRead</a> for <a class=\"struct\" href=\"devela/all/struct.Box.html\" title=\"struct devela::all::Box\">Box</a>&lt;B&gt;<div class=\"where\">where\n    B: <a class=\"trait\" href=\"devela/all/trait.IoBufRead.html\" title=\"trait devela::all::IoBufRead\">BufRead</a> + ?<a class=\"trait\" href=\"devela/all/trait.Sized.html\" title=\"trait devela::all::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fill_buf\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/std/io/impls.rs.html#260\">Source</a><a href=\"#method.fill_buf\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.IoBufRead.html#tymethod.fill_buf\" class=\"fn\">fill_buf</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;&amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>], <a class=\"struct\" href=\"devela/all/struct.IoError.html\" title=\"struct devela::all::IoError\">Error</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;&amp;[u8], Error&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Returns the contents of the internal buffer, filling it with more data, via <code>Read</code> methods, if empty. <a href=\"devela/all/trait.IoBufRead.html#tymethod.fill_buf\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.consume\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/std/io/impls.rs.html#265\">Source</a><a href=\"#method.consume\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.IoBufRead.html#tymethod.consume\" class=\"fn\">consume</a>(&amp;mut self, amt: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>)</h4></section></summary><div class='docblock'>Marks the given <code>amount</code> of additional bytes from the internal buffer as having been read.\nSubsequent calls to <code>read</code> only return bytes that have not been marked as read. <a href=\"devela/all/trait.IoBufRead.html#tymethod.consume\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.has_data_left\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/std/io/impls.rs.html#270\">Source</a><a href=\"#method.has_data_left\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.IoBufRead.html#method.has_data_left\" class=\"fn\">has_data_left</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a>, <a class=\"struct\" href=\"devela/all/struct.IoError.html\" title=\"struct devela::all::IoError\">Error</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;bool, Error&gt;\">ⓘ</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>buf_read_has_data_left</code>)</span></div></span><div class='docblock'>Checks if there is any data left to be <code>read</code>. <a href=\"devela/all/trait.IoBufRead.html#method.has_data_left\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.read_until\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/std/io/impls.rs.html#275\">Source</a><a href=\"#method.read_until\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.IoBufRead.html#method.read_until\" class=\"fn\">read_until</a>(&amp;mut self, byte: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>, buf: &amp;mut <a class=\"struct\" href=\"devela/all/struct.Vec.html\" title=\"struct devela::all::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, <a class=\"struct\" href=\"devela/all/struct.IoError.html\" title=\"struct devela::all::IoError\">Error</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;usize, Error&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Reads all bytes into <code>buf</code> until the delimiter <code>byte</code> or EOF is reached. <a href=\"devela/all/trait.IoBufRead.html#method.read_until\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.skip_until\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/std/io/impls.rs.html#280\">Source</a><a href=\"#method.skip_until\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.IoBufRead.html#method.skip_until\" class=\"fn\">skip_until</a>(&amp;mut self, byte: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, <a class=\"struct\" href=\"devela/all/struct.IoError.html\" title=\"struct devela::all::IoError\">Error</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;usize, Error&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Skips all bytes until the delimiter <code>byte</code> or EOF is reached. <a href=\"devela/all/trait.IoBufRead.html#method.skip_until\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.read_line\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/std/io/impls.rs.html#285\">Source</a><a href=\"#method.read_line\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.IoBufRead.html#method.read_line\" class=\"fn\">read_line</a>(&amp;mut self, buf: &amp;mut <a class=\"struct\" href=\"devela/all/struct.String.html\" title=\"struct devela::all::String\">String</a>) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, <a class=\"struct\" href=\"devela/all/struct.IoError.html\" title=\"struct devela::all::IoError\">Error</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;usize, Error&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Reads all bytes until a newline (the <code>0xA</code> byte) is reached, and append\nthem to the provided <code>String</code> buffer. <a href=\"devela/all/trait.IoBufRead.html#method.read_line\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.split\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/std/io/mod.rs.html#2620-2622\">Source</a></span><a href=\"#method.split\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.IoBufRead.html#method.split\" class=\"fn\">split</a>(self, byte: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>) -&gt; <a class=\"struct\" href=\"devela/all/struct.IoSplit.html\" title=\"struct devela::all::IoSplit\">Split</a>&lt;Self&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Split&lt;Self&gt;\">ⓘ</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"devela/all/trait.Sized.html\" title=\"trait devela::all::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Returns an iterator over the contents of this reader split on the byte\n<code>byte</code>. <a href=\"devela/all/trait.IoBufRead.html#method.split\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lines\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/std/io/mod.rs.html#2657-2659\">Source</a></span><a href=\"#method.lines\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.IoBufRead.html#method.lines\" class=\"fn\">lines</a>(self) -&gt; <a class=\"struct\" href=\"devela/all/struct.IoLines.html\" title=\"struct devela::all::IoLines\">Lines</a>&lt;Self&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Lines&lt;Self&gt;\">ⓘ</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"devela/all/trait.Sized.html\" title=\"trait devela::all::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Returns an iterator over the lines of this reader. <a href=\"devela/all/trait.IoBufRead.html#method.lines\">Read more</a></div></details></div></details>","BufRead","devela::_dep::sdl2::timer::TimerCallback","devela::_dep::toml_edit::ArrayIntoIter","devela::_dep::toml_edit::ArrayIter","devela::_dep::toml_edit::ArrayIterMut","devela::_dep::toml_edit::ArrayOfTablesIntoIter","devela::_dep::toml_edit::ArrayOfTablesIter","devela::_dep::toml_edit::ArrayOfTablesIterMut","devela::_dep::toml_edit::InlineTableIntoIter","devela::_dep::toml_edit::InlineTableIter","devela::_dep::toml_edit::InlineTableIterMut","devela::_dep::toml_edit::IntoIter","devela::_dep::toml_edit::Iter","devela::_dep::toml_edit::IterMut"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-Box%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/boxed.rs.html#1721\">Source</a></span><a href=\"#impl-Clone-for-Box%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"devela/code/trait.Clone.html\" title=\"trait devela::code::Clone\">Clone</a> for <a class=\"struct\" href=\"devela/all/struct.Box.html\" title=\"struct devela::all::Box\">Box</a>&lt;T, A&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"devela/code/trait.Clone.html\" title=\"trait devela::code::Clone\">Clone</a>,\n    A: <a class=\"trait\" href=\"devela/_core/alloc/trait.Allocator.html\" title=\"trait devela::_core::alloc::Allocator\">Allocator</a> + <a class=\"trait\" href=\"devela/code/trait.Clone.html\" title=\"trait devela::code::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/boxed.rs.html#1737\">Source</a><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/code/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; <a class=\"struct\" href=\"devela/all/struct.Box.html\" title=\"struct devela::all::Box\">Box</a>&lt;T, A&gt;</h4></section></summary><div class=\"docblock\"><p>Returns a new box with a <code>clone()</code> of this box’s contents.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = Box::new(<span class=\"number\">5</span>);\n<span class=\"kw\">let </span>y = x.clone();\n\n<span class=\"comment\">// The value is the same\n</span><span class=\"macro\">assert_eq!</span>(x, y);\n\n<span class=\"comment\">// But they are unique objects\n</span><span class=\"macro\">assert_ne!</span>(<span class=\"kw-2\">&amp;*</span>x <span class=\"kw\">as </span><span class=\"kw-2\">*const </span>i32, <span class=\"kw-2\">&amp;*</span>y <span class=\"kw\">as </span><span class=\"kw-2\">*const </span>i32);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/boxed.rs.html#1764\">Source</a><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/code/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: &amp;<a class=\"struct\" href=\"devela/all/struct.Box.html\" title=\"struct devela::all::Box\">Box</a>&lt;T, A&gt;)</h4></section></summary><div class=\"docblock\"><p>Copies <code>source</code>’s contents into <code>self</code> without creating a new allocation.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = Box::new(<span class=\"number\">5</span>);\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>y = Box::new(<span class=\"number\">10</span>);\n<span class=\"kw\">let </span>yp: <span class=\"kw-2\">*const </span>i32 = <span class=\"kw-2\">&amp;*</span>y;\n\ny.clone_from(<span class=\"kw-2\">&amp;</span>x);\n\n<span class=\"comment\">// The value is the same\n</span><span class=\"macro\">assert_eq!</span>(x, y);\n\n<span class=\"comment\">// And no allocation occurred\n</span><span class=\"macro\">assert_eq!</span>(yp, <span class=\"kw-2\">&amp;*</span>y);</code></pre></div>\n</div></details></div></details>","Clone","devela::_dep::sdl2::timer::TimerCallback","devela::_dep::toml_edit::ArrayIntoIter","devela::_dep::toml_edit::ArrayIter","devela::_dep::toml_edit::ArrayIterMut","devela::_dep::toml_edit::ArrayOfTablesIntoIter","devela::_dep::toml_edit::ArrayOfTablesIter","devela::_dep::toml_edit::ArrayOfTablesIterMut","devela::_dep::toml_edit::InlineTableIntoIter","devela::_dep::toml_edit::InlineTableIter","devela::_dep::toml_edit::InlineTableIterMut","devela::_dep::toml_edit::IntoIter","devela::_dep::toml_edit::Iter","devela::_dep::toml_edit::IterMut"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Coroutine%3CR%3E-for-Box%3CG,+A%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/boxed.rs.html#2084\">Source</a><a href=\"#impl-Coroutine%3CR%3E-for-Box%3CG,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;G, R, A&gt; <a class=\"trait\" href=\"devela/all/trait.Coroutine.html\" title=\"trait devela::all::Coroutine\">Coroutine</a>&lt;R&gt; for <a class=\"struct\" href=\"devela/all/struct.Box.html\" title=\"struct devela::all::Box\">Box</a>&lt;G, A&gt;<div class=\"where\">where\n    G: <a class=\"trait\" href=\"devela/all/trait.Coroutine.html\" title=\"trait devela::all::Coroutine\">Coroutine</a>&lt;R&gt; + <a class=\"trait\" href=\"devela/all/trait.Unpin.html\" title=\"trait devela::all::Unpin\">Unpin</a> + ?<a class=\"trait\" href=\"devela/all/trait.Sized.html\" title=\"trait devela::all::Sized\">Sized</a>,\n    A: <a class=\"trait\" href=\"devela/_core/alloc/trait.Allocator.html\" title=\"trait devela::_core::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Yield\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/boxed.rs.html#2085\">Source</a><a href=\"#associatedtype.Yield\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"devela/all/trait.Coroutine.html#associatedtype.Yield\" class=\"associatedtype\">Yield</a> = &lt;G as <a class=\"trait\" href=\"devela/all/trait.Coroutine.html\" title=\"trait devela::all::Coroutine\">Coroutine</a>&lt;R&gt;&gt;::<a class=\"associatedtype\" href=\"devela/all/trait.Coroutine.html#associatedtype.Yield\" title=\"type devela::all::Coroutine::Yield\">Yield</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>coroutine_trait</code>)</span></div></span><div class='docblock'>The type of value this coroutine yields. <a href=\"devela/all/trait.Coroutine.html#associatedtype.Yield\">Read more</a></div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Return\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/boxed.rs.html#2086\">Source</a><a href=\"#associatedtype.Return\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"devela/all/trait.Coroutine.html#associatedtype.Return\" class=\"associatedtype\">Return</a> = &lt;G as <a class=\"trait\" href=\"devela/all/trait.Coroutine.html\" title=\"trait devela::all::Coroutine\">Coroutine</a>&lt;R&gt;&gt;::<a class=\"associatedtype\" href=\"devela/all/trait.Coroutine.html#associatedtype.Return\" title=\"type devela::all::Coroutine::Return\">Return</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>coroutine_trait</code>)</span></div></span><div class='docblock'>The type of value this coroutine returns. <a href=\"devela/all/trait.Coroutine.html#associatedtype.Return\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.resume\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/boxed.rs.html#2088\">Source</a><a href=\"#method.resume\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Coroutine.html#tymethod.resume\" class=\"fn\">resume</a>(\n    self: <a class=\"struct\" href=\"devela/all/struct.Pin.html\" title=\"struct devela::all::Pin\">Pin</a>&lt;&amp;mut <a class=\"struct\" href=\"devela/all/struct.Box.html\" title=\"struct devela::all::Box\">Box</a>&lt;G, A&gt;&gt;,\n    arg: R,\n) -&gt; <a class=\"enum\" href=\"devela/all/enum.CoroutineState.html\" title=\"enum devela::all::CoroutineState\">CoroutineState</a>&lt;&lt;<a class=\"struct\" href=\"devela/all/struct.Box.html\" title=\"struct devela::all::Box\">Box</a>&lt;G, A&gt; as <a class=\"trait\" href=\"devela/all/trait.Coroutine.html\" title=\"trait devela::all::Coroutine\">Coroutine</a>&lt;R&gt;&gt;::<a class=\"associatedtype\" href=\"devela/all/trait.Coroutine.html#associatedtype.Yield\" title=\"type devela::all::Coroutine::Yield\">Yield</a>, &lt;<a class=\"struct\" href=\"devela/all/struct.Box.html\" title=\"struct devela::all::Box\">Box</a>&lt;G, A&gt; as <a class=\"trait\" href=\"devela/all/trait.Coroutine.html\" title=\"trait devela::all::Coroutine\">Coroutine</a>&lt;R&gt;&gt;::<a class=\"associatedtype\" href=\"devela/all/trait.Coroutine.html#associatedtype.Return\" title=\"type devela::all::Coroutine::Return\">Return</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>coroutine_trait</code>)</span></div></span><div class='docblock'>Resumes the execution of this coroutine. <a href=\"devela/all/trait.Coroutine.html#tymethod.resume\">Read more</a></div></details></div></details>","Coroutine<R>","devela::_dep::sdl2::timer::TimerCallback","devela::_dep::toml_edit::ArrayIntoIter","devela::_dep::toml_edit::ArrayIter","devela::_dep::toml_edit::ArrayIterMut","devela::_dep::toml_edit::ArrayOfTablesIntoIter","devela::_dep::toml_edit::ArrayOfTablesIter","devela::_dep::toml_edit::ArrayOfTablesIterMut","devela::_dep::toml_edit::InlineTableIntoIter","devela::_dep::toml_edit::InlineTableIter","devela::_dep::toml_edit::InlineTableIterMut","devela::_dep::toml_edit::IntoIter","devela::_dep::toml_edit::Iter","devela::_dep::toml_edit::IterMut"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-Box%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/boxed.rs.html#1928\">Source</a></span><a href=\"#impl-Debug-for-Box%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"devela/all/trait.Debug.html\" title=\"trait devela::all::Debug\">Debug</a> for <a class=\"struct\" href=\"devela/all/struct.Box.html\" title=\"struct devela::all::Box\">Box</a>&lt;T, A&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"devela/all/trait.Debug.html\" title=\"trait devela::all::Debug\">Debug</a> + ?<a class=\"trait\" href=\"devela/all/trait.Sized.html\" title=\"trait devela::all::Sized\">Sized</a>,\n    A: <a class=\"trait\" href=\"devela/_core/alloc/trait.Allocator.html\" title=\"trait devela::_core::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/boxed.rs.html#1929\">Source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"devela/all/struct.Formatter.html\" title=\"struct devela::all::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"devela/all/struct.FmtError.html\" title=\"struct devela::all::FmtError\">Error</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;(), Error&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"devela/all/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","devela::_dep::sdl2::timer::TimerCallback","devela::_dep::toml_edit::ArrayIntoIter","devela::_dep::toml_edit::ArrayIter","devela::_dep::toml_edit::ArrayIterMut","devela::_dep::toml_edit::ArrayOfTablesIntoIter","devela::_dep::toml_edit::ArrayOfTablesIter","devela::_dep::toml_edit::ArrayOfTablesIterMut","devela::_dep::toml_edit::InlineTableIntoIter","devela::_dep::toml_edit::InlineTableIter","devela::_dep::toml_edit::InlineTableIterMut","devela::_dep::toml_edit::IntoIter","devela::_dep::toml_edit::Iter","devela::_dep::toml_edit::IterMut"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Decodable%3CR%3E-for-Box%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/devela/data/codec/encode/impls.rs.html#29-32\">Source</a><a href=\"#impl-Decodable%3CR%3E-for-Box%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;R: <a class=\"trait\" href=\"devela/all/trait.IoRead.html\" title=\"trait devela::all::IoRead\">IoRead</a>, T: <a class=\"trait\" href=\"devela/all/trait.Decodable.html\" title=\"trait devela::all::Decodable\">Decodable</a>&lt;R&gt;&gt; <a class=\"trait\" href=\"devela/all/trait.Decodable.html\" title=\"trait devela::all::Decodable\">Decodable</a>&lt;R&gt; for <a class=\"struct\" href=\"devela/all/struct.Box.html\" title=\"struct devela::all::Box\">Box</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/devela/data/codec/encode/impls.rs.html#30\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"devela/all/trait.Decodable.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"devela/all/struct.Box.html\" title=\"struct devela::all::Box\">Box</a>&lt;&lt;T as <a class=\"trait\" href=\"devela/all/trait.Decodable.html\" title=\"trait devela::all::Decodable\">Decodable</a>&lt;R&gt;&gt;::<a class=\"associatedtype\" href=\"devela/all/trait.Decodable.html#associatedtype.Output\" title=\"type devela::all::Decodable::Output\">Output</a>&gt;</h4></section></summary><div class='docblock'>The type produced when decoding.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.decode\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/data/codec/encode/impls.rs.html#31-32\">Source</a><a href=\"#method.decode\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Decodable.html#tymethod.decode\" class=\"fn\">decode</a>(reader: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut R</a>) -&gt; <a class=\"type\" href=\"devela/all/type.IoResult.html\" title=\"type devela::all::IoResult\">IoResult</a>&lt;Self::<a class=\"associatedtype\" href=\"devela/all/trait.Decodable.html#associatedtype.Output\" title=\"type devela::all::Decodable::Output\">Output</a>&gt;</h4></section></summary><div class='docblock'>Decodes <code>Self</code> from the given <code>reader</code>, returning the decoded value. <a href=\"devela/all/trait.Decodable.html#tymethod.decode\">Read more</a></div></details></div></details>","Decodable<R>","devela::_dep::sdl2::timer::TimerCallback","devela::_dep::toml_edit::ArrayIntoIter","devela::_dep::toml_edit::ArrayIter","devela::_dep::toml_edit::ArrayIterMut","devela::_dep::toml_edit::ArrayOfTablesIntoIter","devela::_dep::toml_edit::ArrayOfTablesIter","devela::_dep::toml_edit::ArrayOfTablesIterMut","devela::_dep::toml_edit::InlineTableIntoIter","devela::_dep::toml_edit::InlineTableIter","devela::_dep::toml_edit::InlineTableIterMut","devela::_dep::toml_edit::IntoIter","devela::_dep::toml_edit::Iter","devela::_dep::toml_edit::IterMut"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Default-for-Box%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/boxed.rs.html#1674\">Source</a></span><a href=\"#impl-Default-for-Box%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"devela/code/trait.Default.html\" title=\"trait devela::code::Default\">Default</a> for <a class=\"struct\" href=\"devela/all/struct.Box.html\" title=\"struct devela::all::Box\">Box</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"devela/code/trait.Default.html\" title=\"trait devela::code::Default\">Default</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.default\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/boxed.rs.html#1677\">Source</a><a href=\"#method.default\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/code/trait.Default.html#tymethod.default\" class=\"fn\">default</a>() -&gt; <a class=\"struct\" href=\"devela/all/struct.Box.html\" title=\"struct devela::all::Box\">Box</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Creates a <code>Box&lt;T&gt;</code>, with the <code>Default</code> value for T.</p>\n</div></details></div></details>","Default","devela::_dep::sdl2::timer::TimerCallback","devela::_dep::toml_edit::ArrayIntoIter","devela::_dep::toml_edit::ArrayIter","devela::_dep::toml_edit::ArrayIterMut","devela::_dep::toml_edit::ArrayOfTablesIntoIter","devela::_dep::toml_edit::ArrayOfTablesIter","devela::_dep::toml_edit::ArrayOfTablesIterMut","devela::_dep::toml_edit::InlineTableIntoIter","devela::_dep::toml_edit::InlineTableIter","devela::_dep::toml_edit::InlineTableIterMut","devela::_dep::toml_edit::IntoIter","devela::_dep::toml_edit::Iter","devela::_dep::toml_edit::IterMut"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Deref-for-Box%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/boxed.rs.html#1945\">Source</a></span><a href=\"#impl-Deref-for-Box%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"devela/all/trait.Deref.html\" title=\"trait devela::all::Deref\">Deref</a> for <a class=\"struct\" href=\"devela/all/struct.Box.html\" title=\"struct devela::all::Box\">Box</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"devela/_core/alloc/trait.Allocator.html\" title=\"trait devela::_core::alloc::Allocator\">Allocator</a>,\n    T: ?<a class=\"trait\" href=\"devela/all/trait.Sized.html\" title=\"trait devela::all::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Target\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/boxed.rs.html#1946\">Source</a><a href=\"#associatedtype.Target\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"devela/all/trait.Deref.html#associatedtype.Target\" class=\"associatedtype\">Target</a> = T</h4></section></summary><div class='docblock'>The resulting type after dereferencing.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.deref\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/boxed.rs.html#1948\">Source</a><a href=\"#method.deref\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Deref.html#tymethod.deref\" class=\"fn\">deref</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;T</a></h4></section></summary><div class='docblock'>Dereferences the value.</div></details></div></details>","Deref","devela::_dep::sdl2::timer::TimerCallback","devela::_dep::toml_edit::ArrayIntoIter","devela::_dep::toml_edit::ArrayIter","devela::_dep::toml_edit::ArrayIterMut","devela::_dep::toml_edit::ArrayOfTablesIntoIter","devela::_dep::toml_edit::ArrayOfTablesIter","devela::_dep::toml_edit::ArrayOfTablesIterMut","devela::_dep::toml_edit::InlineTableIntoIter","devela::_dep::toml_edit::InlineTableIter","devela::_dep::toml_edit::InlineTableIterMut","devela::_dep::toml_edit::IntoIter","devela::_dep::toml_edit::Iter","devela::_dep::toml_edit::IterMut"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-DerefMut-for-Box%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/boxed.rs.html#1954\">Source</a></span><a href=\"#impl-DerefMut-for-Box%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"devela/all/trait.DerefMut.html\" title=\"trait devela::all::DerefMut\">DerefMut</a> for <a class=\"struct\" href=\"devela/all/struct.Box.html\" title=\"struct devela::all::Box\">Box</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"devela/_core/alloc/trait.Allocator.html\" title=\"trait devela::_core::alloc::Allocator\">Allocator</a>,\n    T: ?<a class=\"trait\" href=\"devela/all/trait.Sized.html\" title=\"trait devela::all::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.deref_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/boxed.rs.html#1955\">Source</a><a href=\"#method.deref_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.DerefMut.html#tymethod.deref_mut\" class=\"fn\">deref_mut</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut T</a></h4></section></summary><div class='docblock'>Mutably dereferences the value.</div></details></div></details>","DerefMut","devela::_dep::sdl2::timer::TimerCallback","devela::_dep::toml_edit::ArrayIntoIter","devela::_dep::toml_edit::ArrayIter","devela::_dep::toml_edit::ArrayIterMut","devela::_dep::toml_edit::ArrayOfTablesIntoIter","devela::_dep::toml_edit::ArrayOfTablesIter","devela::_dep::toml_edit::ArrayOfTablesIterMut","devela::_dep::toml_edit::InlineTableIntoIter","devela::_dep::toml_edit::InlineTableIter","devela::_dep::toml_edit::InlineTableIterMut","devela::_dep::toml_edit::IntoIter","devela::_dep::toml_edit::Iter","devela::_dep::toml_edit::IterMut"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Deserialize%3C'de%3E-for-Box%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/serde/1.0.219/src/serde/de/impls.rs.html#1965-1969\">Source</a><a href=\"#impl-Deserialize%3C'de%3E-for-Box%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'de, T&gt; <a class=\"trait\" href=\"devela/_dep/serde/trait.Deserialize.html\" title=\"trait devela::_dep::serde::Deserialize\">Deserialize</a>&lt;'de&gt; for <a class=\"struct\" href=\"devela/all/struct.Box.html\" title=\"struct devela::all::Box\">Box</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"devela/_dep/serde/trait.Deserialize.html\" title=\"trait devela::_dep::serde::Deserialize\">Deserialize</a>&lt;'de&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.deserialize\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/serde/1.0.219/src/serde/de/impls.rs.html#1965-1969\">Source</a><a href=\"#method.deserialize\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/_dep/serde/trait.Deserialize.html#tymethod.deserialize\" class=\"fn\">deserialize</a>&lt;D&gt;(\n    deserializer: D,\n) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"struct\" href=\"devela/all/struct.Box.html\" title=\"struct devela::all::Box\">Box</a>&lt;T&gt;, &lt;D as <a class=\"trait\" href=\"devela/_dep/serde/trait.Deserializer.html\" title=\"trait devela::_dep::serde::Deserializer\">Deserializer</a>&lt;'de&gt;&gt;::<a class=\"associatedtype\" href=\"devela/_dep/serde/trait.Deserializer.html#associatedtype.Error\" title=\"type devela::_dep::serde::Deserializer::Error\">Error</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;Box&lt;T&gt;, &lt;D as Deserializer&lt;&#39;de&gt;&gt;::Error&gt;\">ⓘ</a><div class=\"where\">where\n    D: <a class=\"trait\" href=\"devela/_dep/serde/trait.Deserializer.html\" title=\"trait devela::_dep::serde::Deserializer\">Deserializer</a>&lt;'de&gt;,</div></h4></section></summary><div class='docblock'>Deserialize this value from the given Serde deserializer. <a href=\"devela/_dep/serde/trait.Deserialize.html#tymethod.deserialize\">Read more</a></div></details></div></details>","Deserialize<'de>","devela::_dep::sdl2::timer::TimerCallback","devela::_dep::toml_edit::ArrayIntoIter","devela::_dep::toml_edit::ArrayIter","devela::_dep::toml_edit::ArrayIterMut","devela::_dep::toml_edit::ArrayOfTablesIntoIter","devela::_dep::toml_edit::ArrayOfTablesIter","devela::_dep::toml_edit::ArrayOfTablesIterMut","devela::_dep::toml_edit::InlineTableIntoIter","devela::_dep::toml_edit::InlineTableIter","devela::_dep::toml_edit::InlineTableIterMut","devela::_dep::toml_edit::IntoIter","devela::_dep::toml_edit::Iter","devela::_dep::toml_edit::IterMut"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Display-for-Box%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/boxed.rs.html#1921\">Source</a></span><a href=\"#impl-Display-for-Box%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"devela/all/trait.Display.html\" title=\"trait devela::all::Display\">Display</a> for <a class=\"struct\" href=\"devela/all/struct.Box.html\" title=\"struct devela::all::Box\">Box</a>&lt;T, A&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"devela/all/trait.Display.html\" title=\"trait devela::all::Display\">Display</a> + ?<a class=\"trait\" href=\"devela/all/trait.Sized.html\" title=\"trait devela::all::Sized\">Sized</a>,\n    A: <a class=\"trait\" href=\"devela/_core/alloc/trait.Allocator.html\" title=\"trait devela::_core::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/boxed.rs.html#1922\">Source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Display.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"devela/all/struct.Formatter.html\" title=\"struct devela::all::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"devela/all/struct.FmtError.html\" title=\"struct devela::all::FmtError\">Error</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;(), Error&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"devela/all/trait.Display.html#tymethod.fmt\">Read more</a></div></details></div></details>","Display","devela::_dep::sdl2::timer::TimerCallback","devela::_dep::toml_edit::ArrayIntoIter","devela::_dep::toml_edit::ArrayIter","devela::_dep::toml_edit::ArrayIterMut","devela::_dep::toml_edit::ArrayOfTablesIntoIter","devela::_dep::toml_edit::ArrayOfTablesIter","devela::_dep::toml_edit::ArrayOfTablesIterMut","devela::_dep::toml_edit::InlineTableIntoIter","devela::_dep::toml_edit::InlineTableIter","devela::_dep::toml_edit::InlineTableIterMut","devela::_dep::toml_edit::IntoIter","devela::_dep::toml_edit::Iter","devela::_dep::toml_edit::IterMut"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-DoubleEndedIterator-for-Box%3CI,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/boxed/iter.rs.html#61\">Source</a></span><a href=\"#impl-DoubleEndedIterator-for-Box%3CI,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;I, A&gt; <a class=\"trait\" href=\"devela/all/trait.IteratorDoubleEnded.html\" title=\"trait devela::all::IteratorDoubleEnded\">DoubleEndedIterator</a> for <a class=\"struct\" href=\"devela/all/struct.Box.html\" title=\"struct devela::all::Box\">Box</a>&lt;I, A&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"devela/all/trait.IteratorDoubleEnded.html\" title=\"trait devela::all::IteratorDoubleEnded\">DoubleEndedIterator</a> + ?<a class=\"trait\" href=\"devela/all/trait.Sized.html\" title=\"trait devela::all::Sized\">Sized</a>,\n    A: <a class=\"trait\" href=\"devela/_core/alloc/trait.Allocator.html\" title=\"trait devela::_core::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.next_back\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/boxed/iter.rs.html#62\">Source</a><a href=\"#method.next_back\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.IteratorDoubleEnded.html#tymethod.next_back\" class=\"fn\">next_back</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;&lt;I as <a class=\"trait\" href=\"devela/all/trait.Iterator.html\" title=\"trait devela::all::Iterator\">Iterator</a>&gt;::<a class=\"associatedtype\" href=\"devela/all/trait.Iterator.html#associatedtype.Item\" title=\"type devela::all::Iterator::Item\">Item</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Option&lt;&lt;I as Iterator&gt;::Item&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Removes and returns an element from the end of the iterator. <a href=\"devela/all/trait.IteratorDoubleEnded.html#tymethod.next_back\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.nth_back\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/boxed/iter.rs.html#65\">Source</a><a href=\"#method.nth_back\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.IteratorDoubleEnded.html#method.nth_back\" class=\"fn\">nth_back</a>(&amp;mut self, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;&lt;I as <a class=\"trait\" href=\"devela/all/trait.Iterator.html\" title=\"trait devela::all::Iterator\">Iterator</a>&gt;::<a class=\"associatedtype\" href=\"devela/all/trait.Iterator.html#associatedtype.Item\" title=\"type devela::all::Iterator::Item\">Item</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Option&lt;&lt;I as Iterator&gt;::Item&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Returns the <code>n</code>th element from the end of the iterator. <a href=\"devela/all/trait.IteratorDoubleEnded.html#method.nth_back\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.advance_back_by\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/iter/traits/double_ended.rs.html#138\">Source</a><a href=\"#method.advance_back_by\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.IteratorDoubleEnded.html#method.advance_back_by\" class=\"fn\">advance_back_by</a>(&amp;mut self, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"devela/all/struct.NonZero.html\" title=\"struct devela::all::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt;&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;(), NonZero&lt;usize&gt;&gt;\">ⓘ</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>iter_advance_by</code>)</span></div></span><div class='docblock'>Advances the iterator from the back by <code>n</code> elements. <a href=\"devela/all/trait.IteratorDoubleEnded.html#method.advance_back_by\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_rfold\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.27.0\">1.27.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/iter/traits/double_ended.rs.html#230-234\">Source</a></span><a href=\"#method.try_rfold\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.IteratorDoubleEnded.html#method.try_rfold\" class=\"fn\">try_rfold</a>&lt;B, F, R&gt;(&amp;mut self, init: B, f: F) -&gt; R<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"devela/all/trait.Sized.html\" title=\"trait devela::all::Sized\">Sized</a>,\n    F: <a class=\"trait\" href=\"devela/all/trait.FnMut.html\" title=\"trait devela::all::FnMut\">FnMut</a>(B, Self::<a class=\"associatedtype\" href=\"devela/all/trait.Iterator.html#associatedtype.Item\" title=\"type devela::all::Iterator::Item\">Item</a>) -&gt; R,\n    R: <a class=\"trait\" href=\"devela/_core/ops/trait.Try.html\" title=\"trait devela::_core::ops::Try\">Try</a>&lt;Output = B&gt;,</div></h4></section></summary><div class='docblock'>This is the reverse version of <a href=\"devela/all/trait.Iterator.html#method.try_fold\" title=\"method devela::all::Iterator::try_fold\"><code>Iterator::try_fold()</code></a>: it takes\nelements starting from the back of the iterator. <a href=\"devela/all/trait.IteratorDoubleEnded.html#method.try_rfold\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.rfold\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.27.0\">1.27.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/iter/traits/double_ended.rs.html#301-304\">Source</a></span><a href=\"#method.rfold\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.IteratorDoubleEnded.html#method.rfold\" class=\"fn\">rfold</a>&lt;B, F&gt;(self, init: B, f: F) -&gt; B<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"devela/all/trait.Sized.html\" title=\"trait devela::all::Sized\">Sized</a>,\n    F: <a class=\"trait\" href=\"devela/all/trait.FnMut.html\" title=\"trait devela::all::FnMut\">FnMut</a>(B, Self::<a class=\"associatedtype\" href=\"devela/all/trait.Iterator.html#associatedtype.Item\" title=\"type devela::all::Iterator::Item\">Item</a>) -&gt; B,</div></h4></section></summary><div class='docblock'>An iterator method that reduces the iterator’s elements to a single,\nfinal value, starting from the back. <a href=\"devela/all/trait.IteratorDoubleEnded.html#method.rfold\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.rfind\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.27.0\">1.27.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/iter/traits/double_ended.rs.html#356-359\">Source</a></span><a href=\"#method.rfind\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.IteratorDoubleEnded.html#method.rfind\" class=\"fn\">rfind</a>&lt;P&gt;(&amp;mut self, predicate: P) -&gt; <a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;Self::<a class=\"associatedtype\" href=\"devela/all/trait.Iterator.html#associatedtype.Item\" title=\"type devela::all::Iterator::Item\">Item</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Option&lt;Self::Item&gt;\">ⓘ</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"devela/all/trait.Sized.html\" title=\"trait devela::all::Sized\">Sized</a>,\n    P: <a class=\"trait\" href=\"devela/all/trait.FnMut.html\" title=\"trait devela::all::FnMut\">FnMut</a>(&amp;Self::<a class=\"associatedtype\" href=\"devela/all/trait.Iterator.html#associatedtype.Item\" title=\"type devela::all::Iterator::Item\">Item</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a>,</div></h4></section></summary><div class='docblock'>Searches for an element of an iterator from the back that satisfies a predicate. <a href=\"devela/all/trait.IteratorDoubleEnded.html#method.rfind\">Read more</a></div></details></div></details>","DoubleEndedIterator","devela::_dep::sdl2::timer::TimerCallback","devela::_dep::toml_edit::ArrayIntoIter","devela::_dep::toml_edit::ArrayIter","devela::_dep::toml_edit::ArrayIterMut","devela::_dep::toml_edit::ArrayOfTablesIntoIter","devela::_dep::toml_edit::ArrayOfTablesIter","devela::_dep::toml_edit::ArrayOfTablesIterMut","devela::_dep::toml_edit::InlineTableIntoIter","devela::_dep::toml_edit::InlineTableIter","devela::_dep::toml_edit::InlineTableIterMut","devela::_dep::toml_edit::IntoIter","devela::_dep::toml_edit::Iter","devela::_dep::toml_edit::IterMut"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Drop-for-Box%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/boxed.rs.html#1656\">Source</a></span><a href=\"#impl-Drop-for-Box%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"devela/all/trait.Drop.html\" title=\"trait devela::all::Drop\">Drop</a> for <a class=\"struct\" href=\"devela/all/struct.Box.html\" title=\"struct devela::all::Box\">Box</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"devela/_core/alloc/trait.Allocator.html\" title=\"trait devela::_core::alloc::Allocator\">Allocator</a>,\n    T: ?<a class=\"trait\" href=\"devela/all/trait.Sized.html\" title=\"trait devela::all::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.drop\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/boxed.rs.html#1658\">Source</a><a href=\"#method.drop\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Drop.html#tymethod.drop\" class=\"fn\">drop</a>(&amp;mut self)</h4></section></summary><div class='docblock'>Executes the destructor for this type. <a href=\"devela/all/trait.Drop.html#tymethod.drop\">Read more</a></div></details></div></details>","Drop","devela::_dep::sdl2::timer::TimerCallback","devela::_dep::toml_edit::ArrayIntoIter","devela::_dep::toml_edit::ArrayIter","devela::_dep::toml_edit::ArrayIterMut","devela::_dep::toml_edit::ArrayOfTablesIntoIter","devela::_dep::toml_edit::ArrayOfTablesIter","devela::_dep::toml_edit::ArrayOfTablesIterMut","devela::_dep::toml_edit::InlineTableIntoIter","devela::_dep::toml_edit::InlineTableIter","devela::_dep::toml_edit::InlineTableIterMut","devela::_dep::toml_edit::IntoIter","devela::_dep::toml_edit::Iter","devela::_dep::toml_edit::IterMut"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Encodable%3CW%3E-for-Box%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/devela/data/codec/encode/impls.rs.html#26-28\">Source</a><a href=\"#impl-Encodable%3CW%3E-for-Box%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;W: <a class=\"trait\" href=\"devela/all/trait.IoWrite.html\" title=\"trait devela::all::IoWrite\">IoWrite</a>, T: <a class=\"trait\" href=\"devela/all/trait.Encodable.html\" title=\"trait devela::all::Encodable\">Encodable</a>&lt;W&gt;&gt; <a class=\"trait\" href=\"devela/all/trait.Encodable.html\" title=\"trait devela::all::Encodable\">Encodable</a>&lt;W&gt; for <a class=\"struct\" href=\"devela/all/struct.Box.html\" title=\"struct devela::all::Box\">Box</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.encode\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/data/codec/encode/impls.rs.html#27-28\">Source</a><a href=\"#method.encode\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Encodable.html#tymethod.encode\" class=\"fn\">encode</a>(&amp;self, writer: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut W</a>) -&gt; <a class=\"type\" href=\"devela/all/type.IoResult.html\" title=\"type devela::all::IoResult\">IoResult</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt;</h4></section></summary><div class='docblock'>Encodes <code>self</code> into the given <code>writer</code>, returning the bytes written. <a href=\"devela/all/trait.Encodable.html#tymethod.encode\">Read more</a></div></details></div></details>","Encodable<W>","devela::_dep::sdl2::timer::TimerCallback","devela::_dep::toml_edit::ArrayIntoIter","devela::_dep::toml_edit::ArrayIter","devela::_dep::toml_edit::ArrayIterMut","devela::_dep::toml_edit::ArrayOfTablesIntoIter","devela::_dep::toml_edit::ArrayOfTablesIter","devela::_dep::toml_edit::ArrayOfTablesIterMut","devela::_dep::toml_edit::InlineTableIntoIter","devela::_dep::toml_edit::InlineTableIter","devela::_dep::toml_edit::InlineTableIterMut","devela::_dep::toml_edit::IntoIter","devela::_dep::toml_edit::Iter","devela::_dep::toml_edit::IterMut"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Error-for-Box%3CE%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/boxed.rs.html#2116\">Source</a></span><a href=\"#impl-Error-for-Box%3CE%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;E&gt; <a class=\"trait\" href=\"devela/all/trait.Error.html\" title=\"trait devela::all::Error\">Error</a> for <a class=\"struct\" href=\"devela/all/struct.Box.html\" title=\"struct devela::all::Box\">Box</a>&lt;E&gt;<div class=\"where\">where\n    E: <a class=\"trait\" href=\"devela/all/trait.Error.html\" title=\"trait devela::all::Error\">Error</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.description\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/boxed.rs.html#2118\">Source</a><a href=\"#method.description\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Error.html#method.description\" class=\"fn\">description</a>(&amp;self) -&gt; &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.str.html\">str</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&amp;str\">ⓘ</a></h4></section></summary><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecated since 1.42.0: use the Display impl or to_string()</span></div></span><div class='docblock'> <a href=\"devela/all/trait.Error.html#method.description\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.cause\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/boxed.rs.html#2123\">Source</a><a href=\"#method.cause\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Error.html#method.cause\" class=\"fn\">cause</a>(&amp;self) -&gt; <a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;&amp;dyn <a class=\"trait\" href=\"devela/all/trait.Error.html\" title=\"trait devela::all::Error\">Error</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Option&lt;&amp;dyn Error&gt;\">ⓘ</a></h4></section></summary><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecated since 1.33.0: replaced by Error::source, which can support downcasting</span></div></span></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.source\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/boxed.rs.html#2127\">Source</a><a href=\"#method.source\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Error.html#method.source\" class=\"fn\">source</a>(&amp;self) -&gt; <a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;&amp;(dyn <a class=\"trait\" href=\"devela/all/trait.Error.html\" title=\"trait devela::all::Error\">Error</a> + 'static)&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Option&lt;&amp;(dyn Error + &#39;static)&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Returns the lower-level source of this error, if any. <a href=\"devela/all/trait.Error.html#method.source\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.provide\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/boxed.rs.html#2131\">Source</a><a href=\"#method.provide\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Error.html#method.provide\" class=\"fn\">provide</a>&lt;'b&gt;(&amp;'b self, request: &amp;mut <a class=\"struct\" href=\"devela/_core/error/struct.Request.html\" title=\"struct devela::_core::error::Request\">Request</a>&lt;'b&gt;)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>error_generic_member_access</code>)</span></div></span><div class='docblock'>Provides type-based access to context intended for error reports. <a href=\"devela/all/trait.Error.html#method.provide\">Read more</a></div></details></div></details>","Error","devela::_dep::sdl2::timer::TimerCallback","devela::_dep::toml_edit::ArrayIntoIter","devela::_dep::toml_edit::ArrayIter","devela::_dep::toml_edit::ArrayIterMut","devela::_dep::toml_edit::ArrayOfTablesIntoIter","devela::_dep::toml_edit::ArrayOfTablesIter","devela::_dep::toml_edit::ArrayOfTablesIterMut","devela::_dep::toml_edit::InlineTableIntoIter","devela::_dep::toml_edit::InlineTableIter","devela::_dep::toml_edit::InlineTableIterMut","devela::_dep::toml_edit::IntoIter","devela::_dep::toml_edit::Iter","devela::_dep::toml_edit::IterMut"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ExactSizeIterator-for-Box%3CI,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/boxed/iter.rs.html#70\">Source</a></span><a href=\"#impl-ExactSizeIterator-for-Box%3CI,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;I, A&gt; <a class=\"trait\" href=\"devela/all/trait.IteratorExactSize.html\" title=\"trait devela::all::IteratorExactSize\">ExactSizeIterator</a> for <a class=\"struct\" href=\"devela/all/struct.Box.html\" title=\"struct devela::all::Box\">Box</a>&lt;I, A&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"devela/all/trait.IteratorExactSize.html\" title=\"trait devela::all::IteratorExactSize\">ExactSizeIterator</a> + ?<a class=\"trait\" href=\"devela/all/trait.Sized.html\" title=\"trait devela::all::Sized\">Sized</a>,\n    A: <a class=\"trait\" href=\"devela/_core/alloc/trait.Allocator.html\" title=\"trait devela::_core::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.len\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/boxed/iter.rs.html#71\">Source</a><a href=\"#method.len\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.IteratorExactSize.html#method.len\" class=\"fn\">len</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a></h4></section></summary><div class='docblock'>Returns the exact remaining length of the iterator. <a href=\"devela/all/trait.IteratorExactSize.html#method.len\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_empty\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/boxed/iter.rs.html#74\">Source</a><a href=\"#method.is_empty\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.IteratorExactSize.html#method.is_empty\" class=\"fn\">is_empty</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>exact_size_is_empty</code>)</span></div></span><div class='docblock'>Returns <code>true</code> if the iterator is empty. <a href=\"devela/all/trait.IteratorExactSize.html#method.is_empty\">Read more</a></div></details></div></details>","ExactSizeIterator","devela::_dep::sdl2::timer::TimerCallback","devela::_dep::toml_edit::ArrayIntoIter","devela::_dep::toml_edit::ArrayIter","devela::_dep::toml_edit::ArrayIterMut","devela::_dep::toml_edit::ArrayOfTablesIntoIter","devela::_dep::toml_edit::ArrayOfTablesIter","devela::_dep::toml_edit::ArrayOfTablesIterMut","devela::_dep::toml_edit::InlineTableIntoIter","devela::_dep::toml_edit::InlineTableIter","devela::_dep::toml_edit::InlineTableIterMut","devela::_dep::toml_edit::IntoIter","devela::_dep::toml_edit::Iter","devela::_dep::toml_edit::IterMut"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Fn%3CArgs%3E-for-Box%3CF,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.35.0\">1.35.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/boxed.rs.html#1983\">Source</a></span><a href=\"#impl-Fn%3CArgs%3E-for-Box%3CF,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;Args, F, A&gt; <a class=\"trait\" href=\"devela/all/trait.Fn.html\" title=\"trait devela::all::Fn\">Fn</a>&lt;Args&gt; for <a class=\"struct\" href=\"devela/all/struct.Box.html\" title=\"struct devela::all::Box\">Box</a>&lt;F, A&gt;<div class=\"where\">where\n    Args: <a class=\"trait\" href=\"devela/_core/marker/trait.Tuple.html\" title=\"trait devela::_core::marker::Tuple\">Tuple</a>,\n    F: <a class=\"trait\" href=\"devela/all/trait.Fn.html\" title=\"trait devela::all::Fn\">Fn</a>&lt;Args&gt; + ?<a class=\"trait\" href=\"devela/all/trait.Sized.html\" title=\"trait devela::all::Sized\">Sized</a>,\n    A: <a class=\"trait\" href=\"devela/_core/alloc/trait.Allocator.html\" title=\"trait devela::_core::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.call\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/boxed.rs.html#1984\">Source</a><a href=\"#method.call\" class=\"anchor\">§</a><h4 class=\"code-header\">extern &quot;rust-call&quot; fn <a href=\"devela/all/trait.Fn.html#tymethod.call\" class=\"fn\">call</a>(\n    &amp;self,\n    args: Args,\n) -&gt; &lt;<a class=\"struct\" href=\"devela/all/struct.Box.html\" title=\"struct devela::all::Box\">Box</a>&lt;F, A&gt; as <a class=\"trait\" href=\"devela/all/trait.FnOnce.html\" title=\"trait devela::all::FnOnce\">FnOnce</a>&lt;Args&gt;&gt;::<a class=\"associatedtype\" href=\"devela/all/trait.FnOnce.html#associatedtype.Output\" title=\"type devela::all::FnOnce::Output\">Output</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>fn_traits</code>)</span></div></span><div class='docblock'>Performs the call operation.</div></details></div></details>","Fn<Args>","devela::_dep::sdl2::timer::TimerCallback","devela::_dep::toml_edit::ArrayIntoIter","devela::_dep::toml_edit::ArrayIter","devela::_dep::toml_edit::ArrayIterMut","devela::_dep::toml_edit::ArrayOfTablesIntoIter","devela::_dep::toml_edit::ArrayOfTablesIter","devela::_dep::toml_edit::ArrayOfTablesIterMut","devela::_dep::toml_edit::InlineTableIntoIter","devela::_dep::toml_edit::InlineTableIter","devela::_dep::toml_edit::InlineTableIterMut","devela::_dep::toml_edit::IntoIter","devela::_dep::toml_edit::Iter","devela::_dep::toml_edit::IterMut"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FnMut%3CArgs%3E-for-Box%3CF,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.35.0\">1.35.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/boxed.rs.html#1976\">Source</a></span><a href=\"#impl-FnMut%3CArgs%3E-for-Box%3CF,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;Args, F, A&gt; <a class=\"trait\" href=\"devela/all/trait.FnMut.html\" title=\"trait devela::all::FnMut\">FnMut</a>&lt;Args&gt; for <a class=\"struct\" href=\"devela/all/struct.Box.html\" title=\"struct devela::all::Box\">Box</a>&lt;F, A&gt;<div class=\"where\">where\n    Args: <a class=\"trait\" href=\"devela/_core/marker/trait.Tuple.html\" title=\"trait devela::_core::marker::Tuple\">Tuple</a>,\n    F: <a class=\"trait\" href=\"devela/all/trait.FnMut.html\" title=\"trait devela::all::FnMut\">FnMut</a>&lt;Args&gt; + ?<a class=\"trait\" href=\"devela/all/trait.Sized.html\" title=\"trait devela::all::Sized\">Sized</a>,\n    A: <a class=\"trait\" href=\"devela/_core/alloc/trait.Allocator.html\" title=\"trait devela::_core::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.call_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/boxed.rs.html#1977\">Source</a><a href=\"#method.call_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">extern &quot;rust-call&quot; fn <a href=\"devela/all/trait.FnMut.html#tymethod.call_mut\" class=\"fn\">call_mut</a>(\n    &amp;mut self,\n    args: Args,\n) -&gt; &lt;<a class=\"struct\" href=\"devela/all/struct.Box.html\" title=\"struct devela::all::Box\">Box</a>&lt;F, A&gt; as <a class=\"trait\" href=\"devela/all/trait.FnOnce.html\" title=\"trait devela::all::FnOnce\">FnOnce</a>&lt;Args&gt;&gt;::<a class=\"associatedtype\" href=\"devela/all/trait.FnOnce.html#associatedtype.Output\" title=\"type devela::all::FnOnce::Output\">Output</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>fn_traits</code>)</span></div></span><div class='docblock'>Performs the call operation.</div></details></div></details>","FnMut<Args>","devela::_dep::sdl2::timer::TimerCallback","devela::_dep::toml_edit::ArrayIntoIter","devela::_dep::toml_edit::ArrayIter","devela::_dep::toml_edit::ArrayIterMut","devela::_dep::toml_edit::ArrayOfTablesIntoIter","devela::_dep::toml_edit::ArrayOfTablesIter","devela::_dep::toml_edit::ArrayOfTablesIterMut","devela::_dep::toml_edit::InlineTableIntoIter","devela::_dep::toml_edit::InlineTableIter","devela::_dep::toml_edit::InlineTableIterMut","devela::_dep::toml_edit::IntoIter","devela::_dep::toml_edit::Iter","devela::_dep::toml_edit::IterMut"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FnOnce%3CArgs%3E-for-Box%3CF,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.35.0\">1.35.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/boxed.rs.html#1967\">Source</a></span><a href=\"#impl-FnOnce%3CArgs%3E-for-Box%3CF,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;Args, F, A&gt; <a class=\"trait\" href=\"devela/all/trait.FnOnce.html\" title=\"trait devela::all::FnOnce\">FnOnce</a>&lt;Args&gt; for <a class=\"struct\" href=\"devela/all/struct.Box.html\" title=\"struct devela::all::Box\">Box</a>&lt;F, A&gt;<div class=\"where\">where\n    Args: <a class=\"trait\" href=\"devela/_core/marker/trait.Tuple.html\" title=\"trait devela::_core::marker::Tuple\">Tuple</a>,\n    F: <a class=\"trait\" href=\"devela/all/trait.FnOnce.html\" title=\"trait devela::all::FnOnce\">FnOnce</a>&lt;Args&gt; + ?<a class=\"trait\" href=\"devela/all/trait.Sized.html\" title=\"trait devela::all::Sized\">Sized</a>,\n    A: <a class=\"trait\" href=\"devela/_core/alloc/trait.Allocator.html\" title=\"trait devela::_core::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/boxed.rs.html#1968\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"devela/all/trait.FnOnce.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;F as <a class=\"trait\" href=\"devela/all/trait.FnOnce.html\" title=\"trait devela::all::FnOnce\">FnOnce</a>&lt;Args&gt;&gt;::<a class=\"associatedtype\" href=\"devela/all/trait.FnOnce.html#associatedtype.Output\" title=\"type devela::all::FnOnce::Output\">Output</a></h4></section></summary><div class='docblock'>The returned type after the call operator is used.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.call_once\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/boxed.rs.html#1970\">Source</a><a href=\"#method.call_once\" class=\"anchor\">§</a><h4 class=\"code-header\">extern &quot;rust-call&quot; fn <a href=\"devela/all/trait.FnOnce.html#tymethod.call_once\" class=\"fn\">call_once</a>(\n    self,\n    args: Args,\n) -&gt; &lt;<a class=\"struct\" href=\"devela/all/struct.Box.html\" title=\"struct devela::all::Box\">Box</a>&lt;F, A&gt; as <a class=\"trait\" href=\"devela/all/trait.FnOnce.html\" title=\"trait devela::all::FnOnce\">FnOnce</a>&lt;Args&gt;&gt;::<a class=\"associatedtype\" href=\"devela/all/trait.FnOnce.html#associatedtype.Output\" title=\"type devela::all::FnOnce::Output\">Output</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>fn_traits</code>)</span></div></span><div class='docblock'>Performs the call operation.</div></details></div></details>","FnOnce<Args>","devela::_dep::sdl2::timer::TimerCallback","devela::_dep::toml_edit::ArrayIntoIter","devela::_dep::toml_edit::ArrayIter","devela::_dep::toml_edit::ArrayIterMut","devela::_dep::toml_edit::ArrayOfTablesIntoIter","devela::_dep::toml_edit::ArrayOfTablesIter","devela::_dep::toml_edit::ArrayOfTablesIterMut","devela::_dep::toml_edit::InlineTableIntoIter","devela::_dep::toml_edit::InlineTableIter","devela::_dep::toml_edit::InlineTableIterMut","devela::_dep::toml_edit::IntoIter","devela::_dep::toml_edit::Iter","devela::_dep::toml_edit::IterMut"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CT%3E-for-Box%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.6.0\">1.6.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/boxed/convert.rs.html#23\">Source</a></span><a href=\"#impl-From%3CT%3E-for-Box%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"devela/code/trait.From.html\" title=\"trait devela::code::From\">From</a>&lt;T&gt; for <a class=\"struct\" href=\"devela/all/struct.Box.html\" title=\"struct devela::all::Box\">Box</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/boxed/convert.rs.html#37\">Source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/code/trait.From.html#tymethod.from\" class=\"fn\">from</a>(t: T) -&gt; <a class=\"struct\" href=\"devela/all/struct.Box.html\" title=\"struct devela::all::Box\">Box</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Converts a <code>T</code> into a <code>Box&lt;T&gt;</code></p>\n<p>The conversion allocates on the heap and moves <code>t</code>\nfrom the stack into it.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"number\">5</span>;\n<span class=\"kw\">let </span>boxed = Box::new(<span class=\"number\">5</span>);\n\n<span class=\"macro\">assert_eq!</span>(Box::from(x), boxed);</code></pre></div>\n</div></details></div></details>","From<T>","devela::_dep::sdl2::timer::TimerCallback","devela::_dep::toml_edit::ArrayIntoIter","devela::_dep::toml_edit::ArrayIter","devela::_dep::toml_edit::ArrayIterMut","devela::_dep::toml_edit::ArrayOfTablesIntoIter","devela::_dep::toml_edit::ArrayOfTablesIter","devela::_dep::toml_edit::ArrayOfTablesIterMut","devela::_dep::toml_edit::InlineTableIntoIter","devela::_dep::toml_edit::InlineTableIter","devela::_dep::toml_edit::InlineTableIterMut","devela::_dep::toml_edit::IntoIter","devela::_dep::toml_edit::Iter","devela::_dep::toml_edit::IterMut"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Future-for-Box%3CF,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.36.0\">1.36.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/boxed.rs.html#2107\">Source</a></span><a href=\"#impl-Future-for-Box%3CF,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;F, A&gt; <a class=\"trait\" href=\"devela/all/trait.Future.html\" title=\"trait devela::all::Future\">Future</a> for <a class=\"struct\" href=\"devela/all/struct.Box.html\" title=\"struct devela::all::Box\">Box</a>&lt;F, A&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"devela/all/trait.Future.html\" title=\"trait devela::all::Future\">Future</a> + <a class=\"trait\" href=\"devela/all/trait.Unpin.html\" title=\"trait devela::all::Unpin\">Unpin</a> + ?<a class=\"trait\" href=\"devela/all/trait.Sized.html\" title=\"trait devela::all::Sized\">Sized</a>,\n    A: <a class=\"trait\" href=\"devela/_core/alloc/trait.Allocator.html\" title=\"trait devela::_core::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/boxed.rs.html#2108\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"devela/all/trait.Future.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;F as <a class=\"trait\" href=\"devela/all/trait.Future.html\" title=\"trait devela::all::Future\">Future</a>&gt;::<a class=\"associatedtype\" href=\"devela/all/trait.Future.html#associatedtype.Output\" title=\"type devela::all::Future::Output\">Output</a></h4></section></summary><div class='docblock'>The type of value produced on completion.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.poll\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/boxed.rs.html#2110\">Source</a><a href=\"#method.poll\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Future.html#tymethod.poll\" class=\"fn\">poll</a>(\n    self: <a class=\"struct\" href=\"devela/all/struct.Pin.html\" title=\"struct devela::all::Pin\">Pin</a>&lt;&amp;mut <a class=\"struct\" href=\"devela/all/struct.Box.html\" title=\"struct devela::all::Box\">Box</a>&lt;F, A&gt;&gt;,\n    cx: &amp;mut <a class=\"struct\" href=\"devela/all/struct.TaskContext.html\" title=\"struct devela::all::TaskContext\">Context</a>&lt;'_&gt;,\n) -&gt; <a class=\"enum\" href=\"devela/all/enum.TaskPoll.html\" title=\"enum devela::all::TaskPoll\">Poll</a>&lt;&lt;<a class=\"struct\" href=\"devela/all/struct.Box.html\" title=\"struct devela::all::Box\">Box</a>&lt;F, A&gt; as <a class=\"trait\" href=\"devela/all/trait.Future.html\" title=\"trait devela::all::Future\">Future</a>&gt;::<a class=\"associatedtype\" href=\"devela/all/trait.Future.html#associatedtype.Output\" title=\"type devela::all::Future::Output\">Output</a>&gt;</h4></section></summary><div class='docblock'>Attempts to resolve the future to a final value, registering\nthe current task for wakeup if the value is not yet available. <a href=\"devela/all/trait.Future.html#tymethod.poll\">Read more</a></div></details></div></details>","Future","devela::_dep::sdl2::timer::TimerCallback","devela::_dep::toml_edit::ArrayIntoIter","devela::_dep::toml_edit::ArrayIter","devela::_dep::toml_edit::ArrayIterMut","devela::_dep::toml_edit::ArrayOfTablesIntoIter","devela::_dep::toml_edit::ArrayOfTablesIter","devela::_dep::toml_edit::ArrayOfTablesIterMut","devela::_dep::toml_edit::InlineTableIntoIter","devela::_dep::toml_edit::InlineTableIter","devela::_dep::toml_edit::InlineTableIterMut","devela::_dep::toml_edit::IntoIter","devela::_dep::toml_edit::Iter","devela::_dep::toml_edit::IterMut"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Hash-for-Box%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/boxed.rs.html#1862\">Source</a></span><a href=\"#impl-Hash-for-Box%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"devela/all/trait.Hash.html\" title=\"trait devela::all::Hash\">Hash</a> for <a class=\"struct\" href=\"devela/all/struct.Box.html\" title=\"struct devela::all::Box\">Box</a>&lt;T, A&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"devela/all/trait.Hash.html\" title=\"trait devela::all::Hash\">Hash</a> + ?<a class=\"trait\" href=\"devela/all/trait.Sized.html\" title=\"trait devela::all::Sized\">Sized</a>,\n    A: <a class=\"trait\" href=\"devela/_core/alloc/trait.Allocator.html\" title=\"trait devela::_core::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/boxed.rs.html#1863\">Source</a><a href=\"#method.hash\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Hash.html#tymethod.hash\" class=\"fn\">hash</a>&lt;H&gt;(&amp;self, state: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut H</a>)<div class=\"where\">where\n    H: <a class=\"trait\" href=\"devela/all/trait.Hasher.html\" title=\"trait devela::all::Hasher\">Hasher</a>,</div></h4></section></summary><div class='docblock'>Feeds this value into the given <a href=\"devela/all/trait.Hasher.html\" title=\"trait devela::all::Hasher\"><code>Hasher</code></a>. <a href=\"devela/all/trait.Hash.html#tymethod.hash\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash_slice\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.3.0\">1.3.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/hash/mod.rs.html#235-237\">Source</a></span><a href=\"#method.hash_slice\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Hash.html#method.hash_slice\" class=\"fn\">hash_slice</a>&lt;H&gt;(data: &amp;[Self], state: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut H</a>)<div class=\"where\">where\n    H: <a class=\"trait\" href=\"devela/all/trait.Hasher.html\" title=\"trait devela::all::Hasher\">Hasher</a>,\n    Self: <a class=\"trait\" href=\"devela/all/trait.Sized.html\" title=\"trait devela::all::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Feeds a slice of this type into the given <a href=\"devela/all/trait.Hasher.html\" title=\"trait devela::all::Hasher\"><code>Hasher</code></a>. <a href=\"devela/all/trait.Hash.html#method.hash_slice\">Read more</a></div></details></div></details>","Hash","devela::_dep::sdl2::timer::TimerCallback","devela::_dep::toml_edit::ArrayIntoIter","devela::_dep::toml_edit::ArrayIter","devela::_dep::toml_edit::ArrayIterMut","devela::_dep::toml_edit::ArrayOfTablesIntoIter","devela::_dep::toml_edit::ArrayOfTablesIter","devela::_dep::toml_edit::ArrayOfTablesIterMut","devela::_dep::toml_edit::InlineTableIntoIter","devela::_dep::toml_edit::InlineTableIter","devela::_dep::toml_edit::InlineTableIterMut","devela::_dep::toml_edit::IntoIter","devela::_dep::toml_edit::Iter","devela::_dep::toml_edit::IterMut"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Hasher-for-Box%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/boxed.rs.html#1869\">Source</a></span><a href=\"#impl-Hasher-for-Box%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"devela/all/trait.Hasher.html\" title=\"trait devela::all::Hasher\">Hasher</a> for <a class=\"struct\" href=\"devela/all/struct.Box.html\" title=\"struct devela::all::Box\">Box</a>&lt;T, A&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"devela/all/trait.Hasher.html\" title=\"trait devela::all::Hasher\">Hasher</a> + ?<a class=\"trait\" href=\"devela/all/trait.Sized.html\" title=\"trait devela::all::Sized\">Sized</a>,\n    A: <a class=\"trait\" href=\"devela/_core/alloc/trait.Allocator.html\" title=\"trait devela::_core::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.finish\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/boxed.rs.html#1870\">Source</a><a href=\"#method.finish\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Hasher.html#tymethod.finish\" class=\"fn\">finish</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u64.html\">u64</a></h4></section></summary><div class='docblock'>Returns the hash value for the values written so far. <a href=\"devela/all/trait.Hasher.html#tymethod.finish\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.write\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/boxed.rs.html#1873\">Source</a><a href=\"#method.write\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Hasher.html#tymethod.write\" class=\"fn\">write</a>(&amp;mut self, bytes: &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>])</h4></section></summary><div class='docblock'>Writes some data into this <code>Hasher</code>. <a href=\"devela/all/trait.Hasher.html#tymethod.write\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.write_u8\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/boxed.rs.html#1876\">Source</a><a href=\"#method.write_u8\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Hasher.html#method.write_u8\" class=\"fn\">write_u8</a>(&amp;mut self, i: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>)</h4></section></summary><div class='docblock'>Writes a single <code>u8</code> into this hasher.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.write_u16\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/boxed.rs.html#1879\">Source</a><a href=\"#method.write_u16\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Hasher.html#method.write_u16\" class=\"fn\">write_u16</a>(&amp;mut self, i: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u16.html\">u16</a>)</h4></section></summary><div class='docblock'>Writes a single <code>u16</code> into this hasher.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.write_u32\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/boxed.rs.html#1882\">Source</a><a href=\"#method.write_u32\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Hasher.html#method.write_u32\" class=\"fn\">write_u32</a>(&amp;mut self, i: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>)</h4></section></summary><div class='docblock'>Writes a single <code>u32</code> into this hasher.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.write_u64\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/boxed.rs.html#1885\">Source</a><a href=\"#method.write_u64\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Hasher.html#method.write_u64\" class=\"fn\">write_u64</a>(&amp;mut self, i: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u64.html\">u64</a>)</h4></section></summary><div class='docblock'>Writes a single <code>u64</code> into this hasher.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.write_u128\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/boxed.rs.html#1888\">Source</a><a href=\"#method.write_u128\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Hasher.html#method.write_u128\" class=\"fn\">write_u128</a>(&amp;mut self, i: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u128.html\">u128</a>)</h4></section></summary><div class='docblock'>Writes a single <code>u128</code> into this hasher.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.write_usize\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/boxed.rs.html#1891\">Source</a><a href=\"#method.write_usize\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Hasher.html#method.write_usize\" class=\"fn\">write_usize</a>(&amp;mut self, i: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>)</h4></section></summary><div class='docblock'>Writes a single <code>usize</code> into this hasher.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.write_i8\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/boxed.rs.html#1894\">Source</a><a href=\"#method.write_i8\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Hasher.html#method.write_i8\" class=\"fn\">write_i8</a>(&amp;mut self, i: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i8.html\">i8</a>)</h4></section></summary><div class='docblock'>Writes a single <code>i8</code> into this hasher.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.write_i16\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/boxed.rs.html#1897\">Source</a><a href=\"#method.write_i16\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Hasher.html#method.write_i16\" class=\"fn\">write_i16</a>(&amp;mut self, i: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i16.html\">i16</a>)</h4></section></summary><div class='docblock'>Writes a single <code>i16</code> into this hasher.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.write_i32\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/boxed.rs.html#1900\">Source</a><a href=\"#method.write_i32\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Hasher.html#method.write_i32\" class=\"fn\">write_i32</a>(&amp;mut self, i: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>)</h4></section></summary><div class='docblock'>Writes a single <code>i32</code> into this hasher.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.write_i64\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/boxed.rs.html#1903\">Source</a><a href=\"#method.write_i64\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Hasher.html#method.write_i64\" class=\"fn\">write_i64</a>(&amp;mut self, i: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i64.html\">i64</a>)</h4></section></summary><div class='docblock'>Writes a single <code>i64</code> into this hasher.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.write_i128\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/boxed.rs.html#1906\">Source</a><a href=\"#method.write_i128\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Hasher.html#method.write_i128\" class=\"fn\">write_i128</a>(&amp;mut self, i: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i128.html\">i128</a>)</h4></section></summary><div class='docblock'>Writes a single <code>i128</code> into this hasher.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.write_isize\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/boxed.rs.html#1909\">Source</a><a href=\"#method.write_isize\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Hasher.html#method.write_isize\" class=\"fn\">write_isize</a>(&amp;mut self, i: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.isize.html\">isize</a>)</h4></section></summary><div class='docblock'>Writes a single <code>isize</code> into this hasher.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.write_length_prefix\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/boxed.rs.html#1912\">Source</a><a href=\"#method.write_length_prefix\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Hasher.html#method.write_length_prefix\" class=\"fn\">write_length_prefix</a>(&amp;mut self, len: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>hasher_prefixfree_extras</code>)</span></div></span><div class='docblock'>Writes a length prefix into this hasher, as part of being prefix-free. <a href=\"devela/all/trait.Hasher.html#method.write_length_prefix\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.write_str\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/boxed.rs.html#1915\">Source</a><a href=\"#method.write_str\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Hasher.html#method.write_str\" class=\"fn\">write_str</a>(&amp;mut self, s: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.str.html\">str</a>)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>hasher_prefixfree_extras</code>)</span></div></span><div class='docblock'>Writes a single <code>str</code> into this hasher. <a href=\"devela/all/trait.Hasher.html#method.write_str\">Read more</a></div></details></div></details>","Hasher","devela::_dep::sdl2::timer::TimerCallback","devela::_dep::toml_edit::ArrayIntoIter","devela::_dep::toml_edit::ArrayIter","devela::_dep::toml_edit::ArrayIterMut","devela::_dep::toml_edit::ArrayOfTablesIntoIter","devela::_dep::toml_edit::ArrayOfTablesIter","devela::_dep::toml_edit::ArrayOfTablesIterMut","devela::_dep::toml_edit::InlineTableIntoIter","devela::_dep::toml_edit::InlineTableIter","devela::_dep::toml_edit::InlineTableIterMut","devela::_dep::toml_edit::IntoIter","devela::_dep::toml_edit::Iter","devela::_dep::toml_edit::IterMut"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ImageDecoder-for-Box%3CT%3E\" class=\"impl\"><a href=\"#impl-ImageDecoder-for-Box%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"devela/_dep/image/trait.ImageDecoder.html\" title=\"trait devela::_dep::image::ImageDecoder\">ImageDecoder</a> for <a class=\"struct\" href=\"devela/all/struct.Box.html\" title=\"struct devela::all::Box\">Box</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"devela/_dep/image/trait.ImageDecoder.html\" title=\"trait devela::_dep::image::ImageDecoder\">ImageDecoder</a> + ?<a class=\"trait\" href=\"devela/all/trait.Sized.html\" title=\"trait devela::all::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.dimensions\" class=\"method trait-impl\"><a href=\"#method.dimensions\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/_dep/image/trait.ImageDecoder.html#tymethod.dimensions\" class=\"fn\">dimensions</a>(&amp;self) -&gt; (<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>) <a href=\"#\" class=\"tooltip\" data-notable-ty=\"(u32, u32)\">ⓘ</a></h4></section></summary><div class='docblock'>Returns a tuple containing the width and height of the image</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.color_type\" class=\"method trait-impl\"><a href=\"#method.color_type\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/_dep/image/trait.ImageDecoder.html#tymethod.color_type\" class=\"fn\">color_type</a>(&amp;self) -&gt; <a class=\"enum\" href=\"devela/_dep/image/enum.ColorType.html\" title=\"enum devela::_dep::image::ColorType\">ColorType</a></h4></section></summary><div class='docblock'>Returns the color type of the image data produced by this decoder</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.original_color_type\" class=\"method trait-impl\"><a href=\"#method.original_color_type\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/_dep/image/trait.ImageDecoder.html#method.original_color_type\" class=\"fn\">original_color_type</a>(&amp;self) -&gt; <a class=\"enum\" href=\"devela/_dep/image/enum.ExtendedColorType.html\" title=\"enum devela::_dep::image::ExtendedColorType\">ExtendedColorType</a></h4></section></summary><div class='docblock'>Returns the color type of the image file before decoding</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.icc_profile\" class=\"method trait-impl\"><a href=\"#method.icc_profile\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/_dep/image/trait.ImageDecoder.html#method.icc_profile\" class=\"fn\">icc_profile</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;<a class=\"struct\" href=\"devela/all/struct.Vec.html\" title=\"struct devela::all::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;&gt;, <a class=\"enum\" href=\"devela/_dep/image/enum.ImageError.html\" title=\"enum devela::_dep::image::ImageError\">ImageError</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;Option&lt;Vec&lt;u8&gt;&gt;, ImageError&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Returns the ICC color profile embedded in the image, or <code>Ok(None)</code> if the image does not have one. <a href=\"devela/_dep/image/trait.ImageDecoder.html#method.icc_profile\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.exif_metadata\" class=\"method trait-impl\"><a href=\"#method.exif_metadata\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/_dep/image/trait.ImageDecoder.html#method.exif_metadata\" class=\"fn\">exif_metadata</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;<a class=\"struct\" href=\"devela/all/struct.Vec.html\" title=\"struct devela::all::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;&gt;, <a class=\"enum\" href=\"devela/_dep/image/enum.ImageError.html\" title=\"enum devela::_dep::image::ImageError\">ImageError</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;Option&lt;Vec&lt;u8&gt;&gt;, ImageError&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Returns the raw <a href=\"https://en.wikipedia.org/wiki/Exif\">Exif</a> chunk, if it is present.\nA third-party crate such as <a href=\"https://docs.rs/kamadak-exif/\"><code>kamadak-exif</code></a> is required to actually parse it. <a href=\"devela/_dep/image/trait.ImageDecoder.html#method.exif_metadata\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.total_bytes\" class=\"method trait-impl\"><a href=\"#method.total_bytes\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/_dep/image/trait.ImageDecoder.html#method.total_bytes\" class=\"fn\">total_bytes</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u64.html\">u64</a></h4></section></summary><div class='docblock'>Returns the total number of bytes in the decoded image. <a href=\"devela/_dep/image/trait.ImageDecoder.html#method.total_bytes\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.read_image\" class=\"method trait-impl\"><a href=\"#method.read_image\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/_dep/image/trait.ImageDecoder.html#tymethod.read_image\" class=\"fn\">read_image</a>(self, buf: &amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>]) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"enum\" href=\"devela/_dep/image/enum.ImageError.html\" title=\"enum devela::_dep::image::ImageError\">ImageError</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;(), ImageError&gt;\">ⓘ</a><div class=\"where\">where\n    <a class=\"struct\" href=\"devela/all/struct.Box.html\" title=\"struct devela::all::Box\">Box</a>&lt;T&gt;: <a class=\"trait\" href=\"devela/all/trait.Sized.html\" title=\"trait devela::all::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Returns all the bytes in the image. <a href=\"devela/_dep/image/trait.ImageDecoder.html#tymethod.read_image\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.read_image_boxed\" class=\"method trait-impl\"><a href=\"#method.read_image_boxed\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/_dep/image/trait.ImageDecoder.html#tymethod.read_image_boxed\" class=\"fn\">read_image_boxed</a>(self: <a class=\"struct\" href=\"devela/all/struct.Box.html\" title=\"struct devela::all::Box\">Box</a>&lt;<a class=\"struct\" href=\"devela/all/struct.Box.html\" title=\"struct devela::all::Box\">Box</a>&lt;T&gt;&gt;, buf: &amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>]) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"enum\" href=\"devela/_dep/image/enum.ImageError.html\" title=\"enum devela::_dep::image::ImageError\">ImageError</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;(), ImageError&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Use <code>read_image</code> instead; this method is an implementation detail needed so the trait can\nbe object safe. <a href=\"devela/_dep/image/trait.ImageDecoder.html#tymethod.read_image_boxed\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.set_limits\" class=\"method trait-impl\"><a href=\"#method.set_limits\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/_dep/image/trait.ImageDecoder.html#method.set_limits\" class=\"fn\">set_limits</a>(&amp;mut self, limits: <a class=\"struct\" href=\"devela/_dep/image/struct.Limits.html\" title=\"struct devela::_dep::image::Limits\">Limits</a>) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"enum\" href=\"devela/_dep/image/enum.ImageError.html\" title=\"enum devela::_dep::image::ImageError\">ImageError</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;(), ImageError&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Set the decoder to have the specified limits. See <a href=\"./io/struct.Limits.html\"><code>Limits</code></a> for the different kinds of\nlimits that is possible to set. <a href=\"devela/_dep/image/trait.ImageDecoder.html#method.set_limits\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.orientation\" class=\"method trait-impl\"><a href=\"#method.orientation\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/_dep/image/trait.ImageDecoder.html#method.orientation\" class=\"fn\">orientation</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"enum\" href=\"devela/_dep/image/metadata/enum.Orientation.html\" title=\"enum devela::_dep::image::metadata::Orientation\">Orientation</a>, <a class=\"enum\" href=\"devela/_dep/image/enum.ImageError.html\" title=\"enum devela::_dep::image::ImageError\">ImageError</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;Orientation, ImageError&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Returns the orientation of the image. <a href=\"devela/_dep/image/trait.ImageDecoder.html#method.orientation\">Read more</a></div></details></div></details>","ImageDecoder","devela::_dep::sdl2::timer::TimerCallback","devela::_dep::toml_edit::ArrayIntoIter","devela::_dep::toml_edit::ArrayIter","devela::_dep::toml_edit::ArrayIterMut","devela::_dep::toml_edit::ArrayOfTablesIntoIter","devela::_dep::toml_edit::ArrayOfTablesIter","devela::_dep::toml_edit::ArrayOfTablesIterMut","devela::_dep::toml_edit::InlineTableIntoIter","devela::_dep::toml_edit::InlineTableIter","devela::_dep::toml_edit::InlineTableIterMut","devela::_dep::toml_edit::IntoIter","devela::_dep::toml_edit::Iter","devela::_dep::toml_edit::IterMut"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Iterator-for-Box%3CI,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/boxed/iter.rs.html#18\">Source</a></span><a href=\"#impl-Iterator-for-Box%3CI,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;I, A&gt; <a class=\"trait\" href=\"devela/all/trait.Iterator.html\" title=\"trait devela::all::Iterator\">Iterator</a> for <a class=\"struct\" href=\"devela/all/struct.Box.html\" title=\"struct devela::all::Box\">Box</a>&lt;I, A&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"devela/all/trait.Iterator.html\" title=\"trait devela::all::Iterator\">Iterator</a> + ?<a class=\"trait\" href=\"devela/all/trait.Sized.html\" title=\"trait devela::all::Sized\">Sized</a>,\n    A: <a class=\"trait\" href=\"devela/_core/alloc/trait.Allocator.html\" title=\"trait devela::_core::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Item\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/boxed/iter.rs.html#19\">Source</a><a href=\"#associatedtype.Item\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"devela/all/trait.Iterator.html#associatedtype.Item\" class=\"associatedtype\">Item</a> = &lt;I as <a class=\"trait\" href=\"devela/all/trait.Iterator.html\" title=\"trait devela::all::Iterator\">Iterator</a>&gt;::<a class=\"associatedtype\" href=\"devela/all/trait.Iterator.html#associatedtype.Item\" title=\"type devela::all::Iterator::Item\">Item</a></h4></section></summary><div class='docblock'>The type of the elements being iterated over.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.next\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/boxed/iter.rs.html#20\">Source</a><a href=\"#method.next\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Iterator.html#tymethod.next\" class=\"fn\">next</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;&lt;I as <a class=\"trait\" href=\"devela/all/trait.Iterator.html\" title=\"trait devela::all::Iterator\">Iterator</a>&gt;::<a class=\"associatedtype\" href=\"devela/all/trait.Iterator.html#associatedtype.Item\" title=\"type devela::all::Iterator::Item\">Item</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Option&lt;&lt;I as Iterator&gt;::Item&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Advances the iterator and returns the next value. <a href=\"devela/all/trait.Iterator.html#tymethod.next\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.size_hint\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/boxed/iter.rs.html#23\">Source</a><a href=\"#method.size_hint\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Iterator.html#method.size_hint\" class=\"fn\">size_hint</a>(&amp;self) -&gt; (<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, <a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt;) <a href=\"#\" class=\"tooltip\" data-notable-ty=\"(usize, Option&lt;usize&gt;)\">ⓘ</a></h4></section></summary><div class='docblock'>Returns the bounds on the remaining length of the iterator. <a href=\"devela/all/trait.Iterator.html#method.size_hint\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.nth\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/boxed/iter.rs.html#26\">Source</a><a href=\"#method.nth\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Iterator.html#method.nth\" class=\"fn\">nth</a>(&amp;mut self, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;&lt;I as <a class=\"trait\" href=\"devela/all/trait.Iterator.html\" title=\"trait devela::all::Iterator\">Iterator</a>&gt;::<a class=\"associatedtype\" href=\"devela/all/trait.Iterator.html#associatedtype.Item\" title=\"type devela::all::Iterator::Item\">Item</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Option&lt;&lt;I as Iterator&gt;::Item&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Returns the <code>n</code>th element of the iterator. <a href=\"devela/all/trait.Iterator.html#method.nth\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.last\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/boxed/iter.rs.html#29\">Source</a><a href=\"#method.last\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Iterator.html#method.last\" class=\"fn\">last</a>(self) -&gt; <a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;&lt;I as <a class=\"trait\" href=\"devela/all/trait.Iterator.html\" title=\"trait devela::all::Iterator\">Iterator</a>&gt;::<a class=\"associatedtype\" href=\"devela/all/trait.Iterator.html#associatedtype.Item\" title=\"type devela::all::Iterator::Item\">Item</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Option&lt;&lt;I as Iterator&gt;::Item&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Consumes the iterator, returning the last element. <a href=\"devela/all/trait.Iterator.html#method.last\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.next_chunk\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/iter/traits/iterator.rs.html#109-113\">Source</a><a href=\"#method.next_chunk\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Iterator.html#method.next_chunk\" class=\"fn\">next_chunk</a>&lt;const N: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt;(\n    &amp;mut self,\n) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;[Self::<a class=\"associatedtype\" href=\"devela/all/trait.Iterator.html#associatedtype.Item\" title=\"type devela::all::Iterator::Item\">Item</a>; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">N</a>], <a class=\"struct\" href=\"devela/all/struct.ArrayIntoIter.html\" title=\"struct devela::all::ArrayIntoIter\">IntoIter</a>&lt;Self::<a class=\"associatedtype\" href=\"devela/all/trait.Iterator.html#associatedtype.Item\" title=\"type devela::all::Iterator::Item\">Item</a>, N&gt;&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;[Self::Item; N], IntoIter&lt;Self::Item, N&gt;&gt;\">ⓘ</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"devela/all/trait.Sized.html\" title=\"trait devela::all::Sized\">Sized</a>,</div></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>iter_next_chunk</code>)</span></div></span><div class='docblock'>Advances the iterator and returns an array containing the next <code>N</code> values. <a href=\"devela/all/trait.Iterator.html#method.next_chunk\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.count\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/iter/traits/iterator.rs.html#221-223\">Source</a></span><a href=\"#method.count\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Iterator.html#method.count\" class=\"fn\">count</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"devela/all/trait.Sized.html\" title=\"trait devela::all::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Consumes the iterator, counting the number of iterations and returning it. <a href=\"devela/all/trait.Iterator.html#method.count\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.advance_by\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/iter/traits/iterator.rs.html#296\">Source</a><a href=\"#method.advance_by\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Iterator.html#method.advance_by\" class=\"fn\">advance_by</a>(&amp;mut self, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"devela/all/struct.NonZero.html\" title=\"struct devela::all::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt;&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;(), NonZero&lt;usize&gt;&gt;\">ⓘ</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>iter_advance_by</code>)</span></div></span><div class='docblock'>Advances the iterator by <code>n</code> elements. <a href=\"devela/all/trait.Iterator.html#method.advance_by\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.step_by\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.28.0\">1.28.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/iter/traits/iterator.rs.html#423-425\">Source</a></span><a href=\"#method.step_by\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Iterator.html#method.step_by\" class=\"fn\">step_by</a>(self, step: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"struct\" href=\"devela/all/struct.IterStepBy.html\" title=\"struct devela::all::IterStepBy\">StepBy</a>&lt;Self&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"StepBy&lt;Self&gt;\">ⓘ</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"devela/all/trait.Sized.html\" title=\"trait devela::all::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Creates an iterator starting at the same point, but stepping by\nthe given amount at each iteration. <a href=\"devela/all/trait.Iterator.html#method.step_by\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.chain\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/iter/traits/iterator.rs.html#494-497\">Source</a></span><a href=\"#method.chain\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Iterator.html#method.chain\" class=\"fn\">chain</a>&lt;U&gt;(self, other: U) -&gt; <a class=\"struct\" href=\"devela/all/struct.IterChain.html\" title=\"struct devela::all::IterChain\">Chain</a>&lt;Self, &lt;U as <a class=\"trait\" href=\"devela/all/trait.IteratorInto.html\" title=\"trait devela::all::IteratorInto\">IntoIterator</a>&gt;::<a class=\"associatedtype\" href=\"devela/all/trait.IteratorInto.html#associatedtype.IntoIter\" title=\"type devela::all::IteratorInto::IntoIter\">IntoIter</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Chain&lt;Self, &lt;U as IntoIterator&gt;::IntoIter&gt;\">ⓘ</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"devela/all/trait.Sized.html\" title=\"trait devela::all::Sized\">Sized</a>,\n    U: <a class=\"trait\" href=\"devela/all/trait.IteratorInto.html\" title=\"trait devela::all::IteratorInto\">IntoIterator</a>&lt;Item = Self::<a class=\"associatedtype\" href=\"devela/all/trait.Iterator.html#associatedtype.Item\" title=\"type devela::all::Iterator::Item\">Item</a>&gt;,</div></h4></section></summary><div class='docblock'>Takes two iterators and creates a new iterator over both in sequence. <a href=\"devela/all/trait.Iterator.html#method.chain\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.zip\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/iter/traits/iterator.rs.html#612-615\">Source</a></span><a href=\"#method.zip\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Iterator.html#method.zip\" class=\"fn\">zip</a>&lt;U&gt;(self, other: U) -&gt; <a class=\"struct\" href=\"devela/all/struct.IterZip.html\" title=\"struct devela::all::IterZip\">Zip</a>&lt;Self, &lt;U as <a class=\"trait\" href=\"devela/all/trait.IteratorInto.html\" title=\"trait devela::all::IteratorInto\">IntoIterator</a>&gt;::<a class=\"associatedtype\" href=\"devela/all/trait.IteratorInto.html#associatedtype.IntoIter\" title=\"type devela::all::IteratorInto::IntoIter\">IntoIter</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Zip&lt;Self, &lt;U as IntoIterator&gt;::IntoIter&gt;\">ⓘ</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"devela/all/trait.Sized.html\" title=\"trait devela::all::Sized\">Sized</a>,\n    U: <a class=\"trait\" href=\"devela/all/trait.IteratorInto.html\" title=\"trait devela::all::IteratorInto\">IntoIterator</a>,</div></h4></section></summary><div class='docblock'>‘Zips up’ two iterators into a single iterator of pairs. <a href=\"devela/all/trait.Iterator.html#method.zip\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.intersperse\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/iter/traits/iterator.rs.html#655-658\">Source</a><a href=\"#method.intersperse\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Iterator.html#method.intersperse\" class=\"fn\">intersperse</a>(self, separator: Self::<a class=\"associatedtype\" href=\"devela/all/trait.Iterator.html#associatedtype.Item\" title=\"type devela::all::Iterator::Item\">Item</a>) -&gt; <a class=\"struct\" href=\"devela/_core/iter/struct.Intersperse.html\" title=\"struct devela::_core::iter::Intersperse\">Intersperse</a>&lt;Self&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Intersperse&lt;Self&gt;\">ⓘ</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"devela/all/trait.Sized.html\" title=\"trait devela::all::Sized\">Sized</a>,\n    Self::<a class=\"associatedtype\" href=\"devela/all/trait.Iterator.html#associatedtype.Item\" title=\"type devela::all::Iterator::Item\">Item</a>: <a class=\"trait\" href=\"devela/code/trait.Clone.html\" title=\"trait devela::code::Clone\">Clone</a>,</div></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>iter_intersperse</code>)</span></div></span><div class='docblock'>Creates a new iterator which places a copy of <code>separator</code> between adjacent\nitems of the original iterator. <a href=\"devela/all/trait.Iterator.html#method.intersperse\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.intersperse_with\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/iter/traits/iterator.rs.html#713-716\">Source</a><a href=\"#method.intersperse_with\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Iterator.html#method.intersperse_with\" class=\"fn\">intersperse_with</a>&lt;G&gt;(self, separator: G) -&gt; <a class=\"struct\" href=\"devela/_core/iter/struct.IntersperseWith.html\" title=\"struct devela::_core::iter::IntersperseWith\">IntersperseWith</a>&lt;Self, G&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"IntersperseWith&lt;Self, G&gt;\">ⓘ</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"devela/all/trait.Sized.html\" title=\"trait devela::all::Sized\">Sized</a>,\n    G: <a class=\"trait\" href=\"devela/all/trait.FnMut.html\" title=\"trait devela::all::FnMut\">FnMut</a>() -&gt; Self::<a class=\"associatedtype\" href=\"devela/all/trait.Iterator.html#associatedtype.Item\" title=\"type devela::all::Iterator::Item\">Item</a>,</div></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>iter_intersperse</code>)</span></div></span><div class='docblock'>Creates a new iterator which places an item generated by <code>separator</code>\nbetween adjacent items of the original iterator. <a href=\"devela/all/trait.Iterator.html#method.intersperse_with\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.map\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/iter/traits/iterator.rs.html#772-775\">Source</a></span><a href=\"#method.map\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Iterator.html#method.map\" class=\"fn\">map</a>&lt;B, F&gt;(self, f: F) -&gt; <a class=\"struct\" href=\"devela/all/struct.IterMap.html\" title=\"struct devela::all::IterMap\">Map</a>&lt;Self, F&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Map&lt;Self, F&gt;\">ⓘ</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"devela/all/trait.Sized.html\" title=\"trait devela::all::Sized\">Sized</a>,\n    F: <a class=\"trait\" href=\"devela/all/trait.FnMut.html\" title=\"trait devela::all::FnMut\">FnMut</a>(Self::<a class=\"associatedtype\" href=\"devela/all/trait.Iterator.html#associatedtype.Item\" title=\"type devela::all::Iterator::Item\">Item</a>) -&gt; B,</div></h4></section></summary><div class='docblock'>Takes a closure and creates an iterator which calls that closure on each\nelement. <a href=\"devela/all/trait.Iterator.html#method.map\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.for_each\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/iter/traits/iterator.rs.html#817-820\">Source</a></span><a href=\"#method.for_each\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Iterator.html#method.for_each\" class=\"fn\">for_each</a>&lt;F&gt;(self, f: F)<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"devela/all/trait.Sized.html\" title=\"trait devela::all::Sized\">Sized</a>,\n    F: <a class=\"trait\" href=\"devela/all/trait.FnMut.html\" title=\"trait devela::all::FnMut\">FnMut</a>(Self::<a class=\"associatedtype\" href=\"devela/all/trait.Iterator.html#associatedtype.Item\" title=\"type devela::all::Iterator::Item\">Item</a>),</div></h4></section></summary><div class='docblock'>Calls a closure on each element of an iterator. <a href=\"devela/all/trait.Iterator.html#method.for_each\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.filter\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/iter/traits/iterator.rs.html#892-895\">Source</a></span><a href=\"#method.filter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Iterator.html#method.filter\" class=\"fn\">filter</a>&lt;P&gt;(self, predicate: P) -&gt; <a class=\"struct\" href=\"devela/all/struct.IterFilter.html\" title=\"struct devela::all::IterFilter\">Filter</a>&lt;Self, P&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Filter&lt;Self, P&gt;\">ⓘ</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"devela/all/trait.Sized.html\" title=\"trait devela::all::Sized\">Sized</a>,\n    P: <a class=\"trait\" href=\"devela/all/trait.FnMut.html\" title=\"trait devela::all::FnMut\">FnMut</a>(&amp;Self::<a class=\"associatedtype\" href=\"devela/all/trait.Iterator.html#associatedtype.Item\" title=\"type devela::all::Iterator::Item\">Item</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a>,</div></h4></section></summary><div class='docblock'>Creates an iterator which uses a closure to determine if an element\nshould be yielded. <a href=\"devela/all/trait.Iterator.html#method.filter\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.filter_map\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/iter/traits/iterator.rs.html#937-940\">Source</a></span><a href=\"#method.filter_map\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Iterator.html#method.filter_map\" class=\"fn\">filter_map</a>&lt;B, F&gt;(self, f: F) -&gt; <a class=\"struct\" href=\"devela/all/struct.IterFilterMap.html\" title=\"struct devela::all::IterFilterMap\">FilterMap</a>&lt;Self, F&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"FilterMap&lt;Self, F&gt;\">ⓘ</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"devela/all/trait.Sized.html\" title=\"trait devela::all::Sized\">Sized</a>,\n    F: <a class=\"trait\" href=\"devela/all/trait.FnMut.html\" title=\"trait devela::all::FnMut\">FnMut</a>(Self::<a class=\"associatedtype\" href=\"devela/all/trait.Iterator.html#associatedtype.Item\" title=\"type devela::all::Iterator::Item\">Item</a>) -&gt; <a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;B&gt;,</div></h4></section></summary><div class='docblock'>Creates an iterator that both filters and maps. <a href=\"devela/all/trait.Iterator.html#method.filter_map\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.enumerate\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/iter/traits/iterator.rs.html#984-986\">Source</a></span><a href=\"#method.enumerate\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Iterator.html#method.enumerate\" class=\"fn\">enumerate</a>(self) -&gt; <a class=\"struct\" href=\"devela/all/struct.IterEnumerate.html\" title=\"struct devela::all::IterEnumerate\">Enumerate</a>&lt;Self&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Enumerate&lt;Self&gt;\">ⓘ</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"devela/all/trait.Sized.html\" title=\"trait devela::all::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Creates an iterator which gives the current iteration count as well as\nthe next value. <a href=\"devela/all/trait.Iterator.html#method.enumerate\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.peekable\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/iter/traits/iterator.rs.html#1055-1057\">Source</a></span><a href=\"#method.peekable\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Iterator.html#method.peekable\" class=\"fn\">peekable</a>(self) -&gt; <a class=\"struct\" href=\"devela/all/struct.IterPeekable.html\" title=\"struct devela::all::IterPeekable\">Peekable</a>&lt;Self&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Peekable&lt;Self&gt;\">ⓘ</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"devela/all/trait.Sized.html\" title=\"trait devela::all::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Creates an iterator which can use the <a href=\"devela/all/struct.IterPeekable.html#method.peek\" title=\"method devela::all::IterPeekable::peek\"><code>peek</code></a> and <a href=\"devela/all/struct.IterPeekable.html#method.peek_mut\" title=\"method devela::all::IterPeekable::peek_mut\"><code>peek_mut</code></a> methods\nto look at the next element of the iterator without consuming it. See\ntheir documentation for more information. <a href=\"devela/all/trait.Iterator.html#method.peekable\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.skip_while\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/iter/traits/iterator.rs.html#1120-1123\">Source</a></span><a href=\"#method.skip_while\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Iterator.html#method.skip_while\" class=\"fn\">skip_while</a>&lt;P&gt;(self, predicate: P) -&gt; <a class=\"struct\" href=\"devela/all/struct.IterSkipWhile.html\" title=\"struct devela::all::IterSkipWhile\">SkipWhile</a>&lt;Self, P&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"SkipWhile&lt;Self, P&gt;\">ⓘ</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"devela/all/trait.Sized.html\" title=\"trait devela::all::Sized\">Sized</a>,\n    P: <a class=\"trait\" href=\"devela/all/trait.FnMut.html\" title=\"trait devela::all::FnMut\">FnMut</a>(&amp;Self::<a class=\"associatedtype\" href=\"devela/all/trait.Iterator.html#associatedtype.Item\" title=\"type devela::all::Iterator::Item\">Item</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a>,</div></h4></section></summary><div class='docblock'>Creates an iterator that <a href=\"devela/all/trait.Iterator.html#method.skip\" title=\"method devela::all::Iterator::skip\"><code>skip</code></a>s elements based on a predicate. <a href=\"devela/all/trait.Iterator.html#method.skip_while\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.take_while\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/iter/traits/iterator.rs.html#1198-1201\">Source</a></span><a href=\"#method.take_while\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Iterator.html#method.take_while\" class=\"fn\">take_while</a>&lt;P&gt;(self, predicate: P) -&gt; <a class=\"struct\" href=\"devela/all/struct.IterTakeWhile.html\" title=\"struct devela::all::IterTakeWhile\">TakeWhile</a>&lt;Self, P&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"TakeWhile&lt;Self, P&gt;\">ⓘ</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"devela/all/trait.Sized.html\" title=\"trait devela::all::Sized\">Sized</a>,\n    P: <a class=\"trait\" href=\"devela/all/trait.FnMut.html\" title=\"trait devela::all::FnMut\">FnMut</a>(&amp;Self::<a class=\"associatedtype\" href=\"devela/all/trait.Iterator.html#associatedtype.Item\" title=\"type devela::all::Iterator::Item\">Item</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a>,</div></h4></section></summary><div class='docblock'>Creates an iterator that yields elements based on a predicate. <a href=\"devela/all/trait.Iterator.html#method.take_while\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.map_while\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.57.0\">1.57.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/iter/traits/iterator.rs.html#1286-1289\">Source</a></span><a href=\"#method.map_while\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Iterator.html#method.map_while\" class=\"fn\">map_while</a>&lt;B, P&gt;(self, predicate: P) -&gt; <a class=\"struct\" href=\"devela/all/struct.IterMapWhile.html\" title=\"struct devela::all::IterMapWhile\">MapWhile</a>&lt;Self, P&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"MapWhile&lt;Self, P&gt;\">ⓘ</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"devela/all/trait.Sized.html\" title=\"trait devela::all::Sized\">Sized</a>,\n    P: <a class=\"trait\" href=\"devela/all/trait.FnMut.html\" title=\"trait devela::all::FnMut\">FnMut</a>(Self::<a class=\"associatedtype\" href=\"devela/all/trait.Iterator.html#associatedtype.Item\" title=\"type devela::all::Iterator::Item\">Item</a>) -&gt; <a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;B&gt;,</div></h4></section></summary><div class='docblock'>Creates an iterator that both yields elements based on a predicate and maps. <a href=\"devela/all/trait.Iterator.html#method.map_while\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.skip\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/iter/traits/iterator.rs.html#1315-1317\">Source</a></span><a href=\"#method.skip\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Iterator.html#method.skip\" class=\"fn\">skip</a>(self, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"struct\" href=\"devela/all/struct.IterSkip.html\" title=\"struct devela::all::IterSkip\">Skip</a>&lt;Self&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Skip&lt;Self&gt;\">ⓘ</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"devela/all/trait.Sized.html\" title=\"trait devela::all::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Creates an iterator that skips the first <code>n</code> elements. <a href=\"devela/all/trait.Iterator.html#method.skip\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.take\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/iter/traits/iterator.rs.html#1387-1389\">Source</a></span><a href=\"#method.take\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Iterator.html#method.take\" class=\"fn\">take</a>(self, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"struct\" href=\"devela/all/struct.IterTake.html\" title=\"struct devela::all::IterTake\">Take</a>&lt;Self&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Take&lt;Self&gt;\">ⓘ</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"devela/all/trait.Sized.html\" title=\"trait devela::all::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Creates an iterator that yields the first <code>n</code> elements, or fewer\nif the underlying iterator ends sooner. <a href=\"devela/all/trait.Iterator.html#method.take\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.scan\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/iter/traits/iterator.rs.html#1434-1437\">Source</a></span><a href=\"#method.scan\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Iterator.html#method.scan\" class=\"fn\">scan</a>&lt;St, B, F&gt;(self, initial_state: St, f: F) -&gt; <a class=\"struct\" href=\"devela/all/struct.IterScan.html\" title=\"struct devela::all::IterScan\">Scan</a>&lt;Self, St, F&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Scan&lt;Self, St, F&gt;\">ⓘ</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"devela/all/trait.Sized.html\" title=\"trait devela::all::Sized\">Sized</a>,\n    F: <a class=\"trait\" href=\"devela/all/trait.FnMut.html\" title=\"trait devela::all::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut St</a>, Self::<a class=\"associatedtype\" href=\"devela/all/trait.Iterator.html#associatedtype.Item\" title=\"type devela::all::Iterator::Item\">Item</a>) -&gt; <a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;B&gt;,</div></h4></section></summary><div class='docblock'>An iterator adapter which, like <a href=\"devela/all/trait.Iterator.html#method.fold\" title=\"method devela::all::Iterator::fold\"><code>fold</code></a>, holds internal state, but\nunlike <a href=\"devela/all/trait.Iterator.html#method.fold\" title=\"method devela::all::Iterator::fold\"><code>fold</code></a>, produces a new iterator. <a href=\"devela/all/trait.Iterator.html#method.scan\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.flat_map\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/iter/traits/iterator.rs.html#1472-1476\">Source</a></span><a href=\"#method.flat_map\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Iterator.html#method.flat_map\" class=\"fn\">flat_map</a>&lt;U, F&gt;(self, f: F) -&gt; <a class=\"struct\" href=\"devela/all/struct.IterFlatMap.html\" title=\"struct devela::all::IterFlatMap\">FlatMap</a>&lt;Self, U, F&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"FlatMap&lt;Self, U, F&gt;\">ⓘ</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"devela/all/trait.Sized.html\" title=\"trait devela::all::Sized\">Sized</a>,\n    U: <a class=\"trait\" href=\"devela/all/trait.IteratorInto.html\" title=\"trait devela::all::IteratorInto\">IntoIterator</a>,\n    F: <a class=\"trait\" href=\"devela/all/trait.FnMut.html\" title=\"trait devela::all::FnMut\">FnMut</a>(Self::<a class=\"associatedtype\" href=\"devela/all/trait.Iterator.html#associatedtype.Item\" title=\"type devela::all::Iterator::Item\">Item</a>) -&gt; U,</div></h4></section></summary><div class='docblock'>Creates an iterator that works like map, but flattens nested structure. <a href=\"devela/all/trait.Iterator.html#method.flat_map\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.flatten\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.29.0\">1.29.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/iter/traits/iterator.rs.html#1556-1559\">Source</a></span><a href=\"#method.flatten\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Iterator.html#method.flatten\" class=\"fn\">flatten</a>(self) -&gt; <a class=\"struct\" href=\"devela/all/struct.IterFlatten.html\" title=\"struct devela::all::IterFlatten\">Flatten</a>&lt;Self&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Flatten&lt;Self&gt;\">ⓘ</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"devela/all/trait.Sized.html\" title=\"trait devela::all::Sized\">Sized</a>,\n    Self::<a class=\"associatedtype\" href=\"devela/all/trait.Iterator.html#associatedtype.Item\" title=\"type devela::all::Iterator::Item\">Item</a>: <a class=\"trait\" href=\"devela/all/trait.IteratorInto.html\" title=\"trait devela::all::IteratorInto\">IntoIterator</a>,</div></h4></section></summary><div class='docblock'>Creates an iterator that flattens nested structure. <a href=\"devela/all/trait.Iterator.html#method.flatten\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.map_windows\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/iter/traits/iterator.rs.html#1712-1715\">Source</a><a href=\"#method.map_windows\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Iterator.html#method.map_windows\" class=\"fn\">map_windows</a>&lt;F, R, const N: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt;(self, f: F) -&gt; <a class=\"struct\" href=\"devela/_core/iter/struct.MapWindows.html\" title=\"struct devela::_core::iter::MapWindows\">MapWindows</a>&lt;Self, F, N&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"MapWindows&lt;Self, F, N&gt;\">ⓘ</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"devela/all/trait.Sized.html\" title=\"trait devela::all::Sized\">Sized</a>,\n    F: <a class=\"trait\" href=\"devela/all/trait.FnMut.html\" title=\"trait devela::all::FnMut\">FnMut</a>(&amp;[Self::<a class=\"associatedtype\" href=\"devela/all/trait.Iterator.html#associatedtype.Item\" title=\"type devela::all::Iterator::Item\">Item</a>; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">N</a>]) -&gt; R,</div></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>iter_map_windows</code>)</span></div></span><div class='docblock'>Calls the given function <code>f</code> for each contiguous window of size <code>N</code> over\n<code>self</code> and returns an iterator over the outputs of <code>f</code>. Like <a href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html#method.windows\" title=\"method slice::windows\"><code>slice::windows()</code></a>,\nthe windows during mapping overlap as well. <a href=\"devela/all/trait.Iterator.html#method.map_windows\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.fuse\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/iter/traits/iterator.rs.html#1774-1776\">Source</a></span><a href=\"#method.fuse\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Iterator.html#method.fuse\" class=\"fn\">fuse</a>(self) -&gt; <a class=\"struct\" href=\"devela/all/struct.IterFuse.html\" title=\"struct devela::all::IterFuse\">Fuse</a>&lt;Self&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Fuse&lt;Self&gt;\">ⓘ</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"devela/all/trait.Sized.html\" title=\"trait devela::all::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Creates an iterator which ends after the first <a href=\"devela/all/enum.Option.html#variant.None\" title=\"variant devela::all::Option::None\"><code>None</code></a>. <a href=\"devela/all/trait.Iterator.html#method.fuse\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.inspect\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/iter/traits/iterator.rs.html#1858-1861\">Source</a></span><a href=\"#method.inspect\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Iterator.html#method.inspect\" class=\"fn\">inspect</a>&lt;F&gt;(self, f: F) -&gt; <a class=\"struct\" href=\"devela/all/struct.IterInspect.html\" title=\"struct devela::all::IterInspect\">Inspect</a>&lt;Self, F&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Inspect&lt;Self, F&gt;\">ⓘ</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"devela/all/trait.Sized.html\" title=\"trait devela::all::Sized\">Sized</a>,\n    F: <a class=\"trait\" href=\"devela/all/trait.FnMut.html\" title=\"trait devela::all::FnMut\">FnMut</a>(&amp;Self::<a class=\"associatedtype\" href=\"devela/all/trait.Iterator.html#associatedtype.Item\" title=\"type devela::all::Iterator::Item\">Item</a>),</div></h4></section></summary><div class='docblock'>Does something with each element of an iterator, passing the value on. <a href=\"devela/all/trait.Iterator.html#method.inspect\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.by_ref\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/iter/traits/iterator.rs.html#1895-1897\">Source</a></span><a href=\"#method.by_ref\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Iterator.html#method.by_ref\" class=\"fn\">by_ref</a>(&amp;mut self) -&gt; &amp;mut Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"devela/all/trait.Sized.html\" title=\"trait devela::all::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Creates a “by reference” adapter for this instance of <code>Iterator</code>. <a href=\"devela/all/trait.Iterator.html#method.by_ref\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.collect\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/iter/traits/iterator.rs.html#2014-2016\">Source</a></span><a href=\"#method.collect\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Iterator.html#method.collect\" class=\"fn\">collect</a>&lt;B&gt;(self) -&gt; B<div class=\"where\">where\n    B: <a class=\"trait\" href=\"devela/all/trait.IteratorFrom.html\" title=\"trait devela::all::IteratorFrom\">FromIterator</a>&lt;Self::<a class=\"associatedtype\" href=\"devela/all/trait.Iterator.html#associatedtype.Item\" title=\"type devela::all::Iterator::Item\">Item</a>&gt;,\n    Self: <a class=\"trait\" href=\"devela/all/trait.Sized.html\" title=\"trait devela::all::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Transforms an iterator into a collection. <a href=\"devela/all/trait.Iterator.html#method.collect\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_collect\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/iter/traits/iterator.rs.html#2101-2105\">Source</a><a href=\"#method.try_collect\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Iterator.html#method.try_collect\" class=\"fn\">try_collect</a>&lt;B&gt;(\n    &amp;mut self,\n) -&gt; &lt;&lt;Self::<a class=\"associatedtype\" href=\"devela/all/trait.Iterator.html#associatedtype.Item\" title=\"type devela::all::Iterator::Item\">Item</a> as <a class=\"trait\" href=\"devela/_core/ops/trait.Try.html\" title=\"trait devela::_core::ops::Try\">Try</a>&gt;::<a class=\"associatedtype\" href=\"devela/_core/ops/trait.Try.html#associatedtype.Residual\" title=\"type devela::_core::ops::Try::Residual\">Residual</a> as <a class=\"trait\" href=\"devela/_core/ops/trait.Residual.html\" title=\"trait devela::_core::ops::Residual\">Residual</a>&lt;B&gt;&gt;::<a class=\"associatedtype\" href=\"devela/_core/ops/trait.Residual.html#associatedtype.TryType\" title=\"type devela::_core::ops::Residual::TryType\">TryType</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"devela/all/trait.Sized.html\" title=\"trait devela::all::Sized\">Sized</a>,\n    Self::<a class=\"associatedtype\" href=\"devela/all/trait.Iterator.html#associatedtype.Item\" title=\"type devela::all::Iterator::Item\">Item</a>: <a class=\"trait\" href=\"devela/_core/ops/trait.Try.html\" title=\"trait devela::_core::ops::Try\">Try</a>,\n    &lt;Self::<a class=\"associatedtype\" href=\"devela/all/trait.Iterator.html#associatedtype.Item\" title=\"type devela::all::Iterator::Item\">Item</a> as <a class=\"trait\" href=\"devela/_core/ops/trait.Try.html\" title=\"trait devela::_core::ops::Try\">Try</a>&gt;::<a class=\"associatedtype\" href=\"devela/_core/ops/trait.Try.html#associatedtype.Residual\" title=\"type devela::_core::ops::Try::Residual\">Residual</a>: <a class=\"trait\" href=\"devela/_core/ops/trait.Residual.html\" title=\"trait devela::_core::ops::Residual\">Residual</a>&lt;B&gt;,\n    B: <a class=\"trait\" href=\"devela/all/trait.IteratorFrom.html\" title=\"trait devela::all::IteratorFrom\">FromIterator</a>&lt;&lt;Self::<a class=\"associatedtype\" href=\"devela/all/trait.Iterator.html#associatedtype.Item\" title=\"type devela::all::Iterator::Item\">Item</a> as <a class=\"trait\" href=\"devela/_core/ops/trait.Try.html\" title=\"trait devela::_core::ops::Try\">Try</a>&gt;::<a class=\"associatedtype\" href=\"devela/_core/ops/trait.Try.html#associatedtype.Output\" title=\"type devela::_core::ops::Try::Output\">Output</a>&gt;,</div></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>iterator_try_collect</code>)</span></div></span><div class='docblock'>Fallibly transforms an iterator into a collection, short circuiting if\na failure is encountered. <a href=\"devela/all/trait.Iterator.html#method.try_collect\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.collect_into\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/iter/traits/iterator.rs.html#2173-2175\">Source</a><a href=\"#method.collect_into\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Iterator.html#method.collect_into\" class=\"fn\">collect_into</a>&lt;E&gt;(self, collection: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut E</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut E</a><div class=\"where\">where\n    E: <a class=\"trait\" href=\"devela/all/trait.IteratorExtend.html\" title=\"trait devela::all::IteratorExtend\">Extend</a>&lt;Self::<a class=\"associatedtype\" href=\"devela/all/trait.Iterator.html#associatedtype.Item\" title=\"type devela::all::Iterator::Item\">Item</a>&gt;,\n    Self: <a class=\"trait\" href=\"devela/all/trait.Sized.html\" title=\"trait devela::all::Sized\">Sized</a>,</div></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>iter_collect_into</code>)</span></div></span><div class='docblock'>Collects all the items from an iterator into a collection. <a href=\"devela/all/trait.Iterator.html#method.collect_into\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.partition\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/iter/traits/iterator.rs.html#2205-2209\">Source</a></span><a href=\"#method.partition\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Iterator.html#method.partition\" class=\"fn\">partition</a>&lt;B, F&gt;(self, f: F) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(B, B)</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"(B, B)\">ⓘ</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"devela/all/trait.Sized.html\" title=\"trait devela::all::Sized\">Sized</a>,\n    B: <a class=\"trait\" href=\"devela/code/trait.Default.html\" title=\"trait devela::code::Default\">Default</a> + <a class=\"trait\" href=\"devela/all/trait.IteratorExtend.html\" title=\"trait devela::all::IteratorExtend\">Extend</a>&lt;Self::<a class=\"associatedtype\" href=\"devela/all/trait.Iterator.html#associatedtype.Item\" title=\"type devela::all::Iterator::Item\">Item</a>&gt;,\n    F: <a class=\"trait\" href=\"devela/all/trait.FnMut.html\" title=\"trait devela::all::FnMut\">FnMut</a>(&amp;Self::<a class=\"associatedtype\" href=\"devela/all/trait.Iterator.html#associatedtype.Item\" title=\"type devela::all::Iterator::Item\">Item</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a>,</div></h4></section></summary><div class='docblock'>Consumes an iterator, creating two collections from it. <a href=\"devela/all/trait.Iterator.html#method.partition\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.partition_in_place\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/iter/traits/iterator.rs.html#2267-2270\">Source</a><a href=\"#method.partition_in_place\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Iterator.html#method.partition_in_place\" class=\"fn\">partition_in_place</a>&lt;'a, T, P&gt;(self, predicate: P) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a><div class=\"where\">where\n    T: 'a,\n    Self: <a class=\"trait\" href=\"devela/all/trait.Sized.html\" title=\"trait devela::all::Sized\">Sized</a> + <a class=\"trait\" href=\"devela/all/trait.IteratorDoubleEnded.html\" title=\"trait devela::all::IteratorDoubleEnded\">DoubleEndedIterator</a>&lt;Item = <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;'a mut T</a>&gt;,\n    P: <a class=\"trait\" href=\"devela/all/trait.FnMut.html\" title=\"trait devela::all::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;T</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a>,</div></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>iter_partition_in_place</code>)</span></div></span><div class='docblock'>Reorders the elements of this iterator <em>in-place</em> according to the given predicate,\nsuch that all those that return <code>true</code> precede all those that return <code>false</code>.\nReturns the number of <code>true</code> elements found. <a href=\"devela/all/trait.Iterator.html#method.partition_in_place\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_partitioned\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/iter/traits/iterator.rs.html#2324-2327\">Source</a><a href=\"#method.is_partitioned\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Iterator.html#method.is_partitioned\" class=\"fn\">is_partitioned</a>&lt;P&gt;(self, predicate: P) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"devela/all/trait.Sized.html\" title=\"trait devela::all::Sized\">Sized</a>,\n    P: <a class=\"trait\" href=\"devela/all/trait.FnMut.html\" title=\"trait devela::all::FnMut\">FnMut</a>(Self::<a class=\"associatedtype\" href=\"devela/all/trait.Iterator.html#associatedtype.Item\" title=\"type devela::all::Iterator::Item\">Item</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a>,</div></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>iter_is_partitioned</code>)</span></div></span><div class='docblock'>Checks if the elements of this iterator are partitioned according to the given predicate,\nsuch that all those that return <code>true</code> precede all those that return <code>false</code>. <a href=\"devela/all/trait.Iterator.html#method.is_partitioned\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_fold\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.27.0\">1.27.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/iter/traits/iterator.rs.html#2418-2422\">Source</a></span><a href=\"#method.try_fold\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Iterator.html#method.try_fold\" class=\"fn\">try_fold</a>&lt;B, F, R&gt;(&amp;mut self, init: B, f: F) -&gt; R<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"devela/all/trait.Sized.html\" title=\"trait devela::all::Sized\">Sized</a>,\n    F: <a class=\"trait\" href=\"devela/all/trait.FnMut.html\" title=\"trait devela::all::FnMut\">FnMut</a>(B, Self::<a class=\"associatedtype\" href=\"devela/all/trait.Iterator.html#associatedtype.Item\" title=\"type devela::all::Iterator::Item\">Item</a>) -&gt; R,\n    R: <a class=\"trait\" href=\"devela/_core/ops/trait.Try.html\" title=\"trait devela::_core::ops::Try\">Try</a>&lt;Output = B&gt;,</div></h4></section></summary><div class='docblock'>An iterator method that applies a function as long as it returns\nsuccessfully, producing a single, final value. <a href=\"devela/all/trait.Iterator.html#method.try_fold\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_for_each\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.27.0\">1.27.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/iter/traits/iterator.rs.html#2476-2480\">Source</a></span><a href=\"#method.try_for_each\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Iterator.html#method.try_for_each\" class=\"fn\">try_for_each</a>&lt;F, R&gt;(&amp;mut self, f: F) -&gt; R<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"devela/all/trait.Sized.html\" title=\"trait devela::all::Sized\">Sized</a>,\n    F: <a class=\"trait\" href=\"devela/all/trait.FnMut.html\" title=\"trait devela::all::FnMut\">FnMut</a>(Self::<a class=\"associatedtype\" href=\"devela/all/trait.Iterator.html#associatedtype.Item\" title=\"type devela::all::Iterator::Item\">Item</a>) -&gt; R,\n    R: <a class=\"trait\" href=\"devela/_core/ops/trait.Try.html\" title=\"trait devela::_core::ops::Try\">Try</a>&lt;Output = <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>&gt;,</div></h4></section></summary><div class='docblock'>An iterator method that applies a fallible function to each item in the\niterator, stopping at the first error and returning that error. <a href=\"devela/all/trait.Iterator.html#method.try_for_each\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.fold\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/iter/traits/iterator.rs.html#2595-2598\">Source</a></span><a href=\"#method.fold\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Iterator.html#method.fold\" class=\"fn\">fold</a>&lt;B, F&gt;(self, init: B, f: F) -&gt; B<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"devela/all/trait.Sized.html\" title=\"trait devela::all::Sized\">Sized</a>,\n    F: <a class=\"trait\" href=\"devela/all/trait.FnMut.html\" title=\"trait devela::all::FnMut\">FnMut</a>(B, Self::<a class=\"associatedtype\" href=\"devela/all/trait.Iterator.html#associatedtype.Item\" title=\"type devela::all::Iterator::Item\">Item</a>) -&gt; B,</div></h4></section></summary><div class='docblock'>Folds every element into an accumulator by applying an operation,\nreturning the final result. <a href=\"devela/all/trait.Iterator.html#method.fold\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.reduce\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.51.0\">1.51.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/iter/traits/iterator.rs.html#2632-2635\">Source</a></span><a href=\"#method.reduce\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Iterator.html#method.reduce\" class=\"fn\">reduce</a>&lt;F&gt;(self, f: F) -&gt; <a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;Self::<a class=\"associatedtype\" href=\"devela/all/trait.Iterator.html#associatedtype.Item\" title=\"type devela::all::Iterator::Item\">Item</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Option&lt;Self::Item&gt;\">ⓘ</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"devela/all/trait.Sized.html\" title=\"trait devela::all::Sized\">Sized</a>,\n    F: <a class=\"trait\" href=\"devela/all/trait.FnMut.html\" title=\"trait devela::all::FnMut\">FnMut</a>(Self::<a class=\"associatedtype\" href=\"devela/all/trait.Iterator.html#associatedtype.Item\" title=\"type devela::all::Iterator::Item\">Item</a>, Self::<a class=\"associatedtype\" href=\"devela/all/trait.Iterator.html#associatedtype.Item\" title=\"type devela::all::Iterator::Item\">Item</a>) -&gt; Self::<a class=\"associatedtype\" href=\"devela/all/trait.Iterator.html#associatedtype.Item\" title=\"type devela::all::Iterator::Item\">Item</a>,</div></h4></section></summary><div class='docblock'>Reduces the elements to a single one, by repeatedly applying a reducing\noperation. <a href=\"devela/all/trait.Iterator.html#method.reduce\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_reduce\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/iter/traits/iterator.rs.html#2703-2709\">Source</a><a href=\"#method.try_reduce\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Iterator.html#method.try_reduce\" class=\"fn\">try_reduce</a>&lt;R&gt;(\n    &amp;mut self,\n    f: impl <a class=\"trait\" href=\"devela/all/trait.FnMut.html\" title=\"trait devela::all::FnMut\">FnMut</a>(Self::<a class=\"associatedtype\" href=\"devela/all/trait.Iterator.html#associatedtype.Item\" title=\"type devela::all::Iterator::Item\">Item</a>, Self::<a class=\"associatedtype\" href=\"devela/all/trait.Iterator.html#associatedtype.Item\" title=\"type devela::all::Iterator::Item\">Item</a>) -&gt; R,\n) -&gt; &lt;&lt;R as <a class=\"trait\" href=\"devela/_core/ops/trait.Try.html\" title=\"trait devela::_core::ops::Try\">Try</a>&gt;::<a class=\"associatedtype\" href=\"devela/_core/ops/trait.Try.html#associatedtype.Residual\" title=\"type devela::_core::ops::Try::Residual\">Residual</a> as <a class=\"trait\" href=\"devela/_core/ops/trait.Residual.html\" title=\"trait devela::_core::ops::Residual\">Residual</a>&lt;<a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;&lt;R as <a class=\"trait\" href=\"devela/_core/ops/trait.Try.html\" title=\"trait devela::_core::ops::Try\">Try</a>&gt;::<a class=\"associatedtype\" href=\"devela/_core/ops/trait.Try.html#associatedtype.Output\" title=\"type devela::_core::ops::Try::Output\">Output</a>&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"devela/_core/ops/trait.Residual.html#associatedtype.TryType\" title=\"type devela::_core::ops::Residual::TryType\">TryType</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"devela/all/trait.Sized.html\" title=\"trait devela::all::Sized\">Sized</a>,\n    R: <a class=\"trait\" href=\"devela/_core/ops/trait.Try.html\" title=\"trait devela::_core::ops::Try\">Try</a>&lt;Output = Self::<a class=\"associatedtype\" href=\"devela/all/trait.Iterator.html#associatedtype.Item\" title=\"type devela::all::Iterator::Item\">Item</a>&gt;,\n    &lt;R as <a class=\"trait\" href=\"devela/_core/ops/trait.Try.html\" title=\"trait devela::_core::ops::Try\">Try</a>&gt;::<a class=\"associatedtype\" href=\"devela/_core/ops/trait.Try.html#associatedtype.Residual\" title=\"type devela::_core::ops::Try::Residual\">Residual</a>: <a class=\"trait\" href=\"devela/_core/ops/trait.Residual.html\" title=\"trait devela::_core::ops::Residual\">Residual</a>&lt;<a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;Self::<a class=\"associatedtype\" href=\"devela/all/trait.Iterator.html#associatedtype.Item\" title=\"type devela::all::Iterator::Item\">Item</a>&gt;&gt;,</div></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>iterator_try_reduce</code>)</span></div></span><div class='docblock'>Reduces the elements to a single one by repeatedly applying a reducing operation. If the\nclosure returns a failure, the failure is propagated back to the caller immediately. <a href=\"devela/all/trait.Iterator.html#method.try_reduce\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.all\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/iter/traits/iterator.rs.html#2761-2764\">Source</a></span><a href=\"#method.all\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Iterator.html#method.all\" class=\"fn\">all</a>&lt;F&gt;(&amp;mut self, f: F) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"devela/all/trait.Sized.html\" title=\"trait devela::all::Sized\">Sized</a>,\n    F: <a class=\"trait\" href=\"devela/all/trait.FnMut.html\" title=\"trait devela::all::FnMut\">FnMut</a>(Self::<a class=\"associatedtype\" href=\"devela/all/trait.Iterator.html#associatedtype.Item\" title=\"type devela::all::Iterator::Item\">Item</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a>,</div></h4></section></summary><div class='docblock'>Tests if every element of the iterator matches a predicate. <a href=\"devela/all/trait.Iterator.html#method.all\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.any\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/iter/traits/iterator.rs.html#2814-2817\">Source</a></span><a href=\"#method.any\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Iterator.html#method.any\" class=\"fn\">any</a>&lt;F&gt;(&amp;mut self, f: F) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"devela/all/trait.Sized.html\" title=\"trait devela::all::Sized\">Sized</a>,\n    F: <a class=\"trait\" href=\"devela/all/trait.FnMut.html\" title=\"trait devela::all::FnMut\">FnMut</a>(Self::<a class=\"associatedtype\" href=\"devela/all/trait.Iterator.html#associatedtype.Item\" title=\"type devela::all::Iterator::Item\">Item</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a>,</div></h4></section></summary><div class='docblock'>Tests if any element of the iterator matches a predicate. <a href=\"devela/all/trait.Iterator.html#method.any\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.find\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/iter/traits/iterator.rs.html#2876-2879\">Source</a></span><a href=\"#method.find\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Iterator.html#method.find\" class=\"fn\">find</a>&lt;P&gt;(&amp;mut self, predicate: P) -&gt; <a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;Self::<a class=\"associatedtype\" href=\"devela/all/trait.Iterator.html#associatedtype.Item\" title=\"type devela::all::Iterator::Item\">Item</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Option&lt;Self::Item&gt;\">ⓘ</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"devela/all/trait.Sized.html\" title=\"trait devela::all::Sized\">Sized</a>,\n    P: <a class=\"trait\" href=\"devela/all/trait.FnMut.html\" title=\"trait devela::all::FnMut\">FnMut</a>(&amp;Self::<a class=\"associatedtype\" href=\"devela/all/trait.Iterator.html#associatedtype.Item\" title=\"type devela::all::Iterator::Item\">Item</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a>,</div></h4></section></summary><div class='docblock'>Searches for an element of an iterator that satisfies a predicate. <a href=\"devela/all/trait.Iterator.html#method.find\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.find_map\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.30.0\">1.30.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/iter/traits/iterator.rs.html#2907-2910\">Source</a></span><a href=\"#method.find_map\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Iterator.html#method.find_map\" class=\"fn\">find_map</a>&lt;B, F&gt;(&amp;mut self, f: F) -&gt; <a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;B&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Option&lt;B&gt;\">ⓘ</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"devela/all/trait.Sized.html\" title=\"trait devela::all::Sized\">Sized</a>,\n    F: <a class=\"trait\" href=\"devela/all/trait.FnMut.html\" title=\"trait devela::all::FnMut\">FnMut</a>(Self::<a class=\"associatedtype\" href=\"devela/all/trait.Iterator.html#associatedtype.Item\" title=\"type devela::all::Iterator::Item\">Item</a>) -&gt; <a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;B&gt;,</div></h4></section></summary><div class='docblock'>Applies function to the elements of iterator and returns\nthe first non-none result. <a href=\"devela/all/trait.Iterator.html#method.find_map\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_find\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/iter/traits/iterator.rs.html#2965-2971\">Source</a><a href=\"#method.try_find\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Iterator.html#method.try_find\" class=\"fn\">try_find</a>&lt;R&gt;(\n    &amp;mut self,\n    f: impl <a class=\"trait\" href=\"devela/all/trait.FnMut.html\" title=\"trait devela::all::FnMut\">FnMut</a>(&amp;Self::<a class=\"associatedtype\" href=\"devela/all/trait.Iterator.html#associatedtype.Item\" title=\"type devela::all::Iterator::Item\">Item</a>) -&gt; R,\n) -&gt; &lt;&lt;R as <a class=\"trait\" href=\"devela/_core/ops/trait.Try.html\" title=\"trait devela::_core::ops::Try\">Try</a>&gt;::<a class=\"associatedtype\" href=\"devela/_core/ops/trait.Try.html#associatedtype.Residual\" title=\"type devela::_core::ops::Try::Residual\">Residual</a> as <a class=\"trait\" href=\"devela/_core/ops/trait.Residual.html\" title=\"trait devela::_core::ops::Residual\">Residual</a>&lt;<a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;Self::<a class=\"associatedtype\" href=\"devela/all/trait.Iterator.html#associatedtype.Item\" title=\"type devela::all::Iterator::Item\">Item</a>&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"devela/_core/ops/trait.Residual.html#associatedtype.TryType\" title=\"type devela::_core::ops::Residual::TryType\">TryType</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"devela/all/trait.Sized.html\" title=\"trait devela::all::Sized\">Sized</a>,\n    R: <a class=\"trait\" href=\"devela/_core/ops/trait.Try.html\" title=\"trait devela::_core::ops::Try\">Try</a>&lt;Output = <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a>&gt;,\n    &lt;R as <a class=\"trait\" href=\"devela/_core/ops/trait.Try.html\" title=\"trait devela::_core::ops::Try\">Try</a>&gt;::<a class=\"associatedtype\" href=\"devela/_core/ops/trait.Try.html#associatedtype.Residual\" title=\"type devela::_core::ops::Try::Residual\">Residual</a>: <a class=\"trait\" href=\"devela/_core/ops/trait.Residual.html\" title=\"trait devela::_core::ops::Residual\">Residual</a>&lt;<a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;Self::<a class=\"associatedtype\" href=\"devela/all/trait.Iterator.html#associatedtype.Item\" title=\"type devela::all::Iterator::Item\">Item</a>&gt;&gt;,</div></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>try_find</code>)</span></div></span><div class='docblock'>Applies function to the elements of iterator and returns\nthe first true result or the first error. <a href=\"devela/all/trait.Iterator.html#method.try_find\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.position\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/iter/traits/iterator.rs.html#3048-3051\">Source</a></span><a href=\"#method.position\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Iterator.html#method.position\" class=\"fn\">position</a>&lt;P&gt;(&amp;mut self, predicate: P) -&gt; <a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Option&lt;usize&gt;\">ⓘ</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"devela/all/trait.Sized.html\" title=\"trait devela::all::Sized\">Sized</a>,\n    P: <a class=\"trait\" href=\"devela/all/trait.FnMut.html\" title=\"trait devela::all::FnMut\">FnMut</a>(Self::<a class=\"associatedtype\" href=\"devela/all/trait.Iterator.html#associatedtype.Item\" title=\"type devela::all::Iterator::Item\">Item</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a>,</div></h4></section></summary><div class='docblock'>Searches for an element in an iterator, returning its index. <a href=\"devela/all/trait.Iterator.html#method.position\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.rposition\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/iter/traits/iterator.rs.html#3113-3116\">Source</a></span><a href=\"#method.rposition\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Iterator.html#method.rposition\" class=\"fn\">rposition</a>&lt;P&gt;(&amp;mut self, predicate: P) -&gt; <a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Option&lt;usize&gt;\">ⓘ</a><div class=\"where\">where\n    P: <a class=\"trait\" href=\"devela/all/trait.FnMut.html\" title=\"trait devela::all::FnMut\">FnMut</a>(Self::<a class=\"associatedtype\" href=\"devela/all/trait.Iterator.html#associatedtype.Item\" title=\"type devela::all::Iterator::Item\">Item</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a>,\n    Self: <a class=\"trait\" href=\"devela/all/trait.Sized.html\" title=\"trait devela::all::Sized\">Sized</a> + <a class=\"trait\" href=\"devela/all/trait.IteratorExactSize.html\" title=\"trait devela::all::IteratorExactSize\">ExactSizeIterator</a> + <a class=\"trait\" href=\"devela/all/trait.IteratorDoubleEnded.html\" title=\"trait devela::all::IteratorDoubleEnded\">DoubleEndedIterator</a>,</div></h4></section></summary><div class='docblock'>Searches for an element in an iterator from the right, returning its\nindex. <a href=\"devela/all/trait.Iterator.html#method.rposition\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.max\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/iter/traits/iterator.rs.html#3162-3165\">Source</a></span><a href=\"#method.max\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Iterator.html#method.max\" class=\"fn\">max</a>(self) -&gt; <a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;Self::<a class=\"associatedtype\" href=\"devela/all/trait.Iterator.html#associatedtype.Item\" title=\"type devela::all::Iterator::Item\">Item</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Option&lt;Self::Item&gt;\">ⓘ</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"devela/all/trait.Sized.html\" title=\"trait devela::all::Sized\">Sized</a>,\n    Self::<a class=\"associatedtype\" href=\"devela/all/trait.Iterator.html#associatedtype.Item\" title=\"type devela::all::Iterator::Item\">Item</a>: <a class=\"trait\" href=\"devela/all/trait.Ord.html\" title=\"trait devela::all::Ord\">Ord</a>,</div></h4></section></summary><div class='docblock'>Returns the maximum element of an iterator. <a href=\"devela/all/trait.Iterator.html#method.max\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.min\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/iter/traits/iterator.rs.html#3198-3201\">Source</a></span><a href=\"#method.min\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Iterator.html#method.min\" class=\"fn\">min</a>(self) -&gt; <a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;Self::<a class=\"associatedtype\" href=\"devela/all/trait.Iterator.html#associatedtype.Item\" title=\"type devela::all::Iterator::Item\">Item</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Option&lt;Self::Item&gt;\">ⓘ</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"devela/all/trait.Sized.html\" title=\"trait devela::all::Sized\">Sized</a>,\n    Self::<a class=\"associatedtype\" href=\"devela/all/trait.Iterator.html#associatedtype.Item\" title=\"type devela::all::Iterator::Item\">Item</a>: <a class=\"trait\" href=\"devela/all/trait.Ord.html\" title=\"trait devela::all::Ord\">Ord</a>,</div></h4></section></summary><div class='docblock'>Returns the minimum element of an iterator. <a href=\"devela/all/trait.Iterator.html#method.min\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.max_by_key\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.6.0\">1.6.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/iter/traits/iterator.rs.html#3220-3223\">Source</a></span><a href=\"#method.max_by_key\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Iterator.html#method.max_by_key\" class=\"fn\">max_by_key</a>&lt;B, F&gt;(self, f: F) -&gt; <a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;Self::<a class=\"associatedtype\" href=\"devela/all/trait.Iterator.html#associatedtype.Item\" title=\"type devela::all::Iterator::Item\">Item</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Option&lt;Self::Item&gt;\">ⓘ</a><div class=\"where\">where\n    B: <a class=\"trait\" href=\"devela/all/trait.Ord.html\" title=\"trait devela::all::Ord\">Ord</a>,\n    Self: <a class=\"trait\" href=\"devela/all/trait.Sized.html\" title=\"trait devela::all::Sized\">Sized</a>,\n    F: <a class=\"trait\" href=\"devela/all/trait.FnMut.html\" title=\"trait devela::all::FnMut\">FnMut</a>(&amp;Self::<a class=\"associatedtype\" href=\"devela/all/trait.Iterator.html#associatedtype.Item\" title=\"type devela::all::Iterator::Item\">Item</a>) -&gt; B,</div></h4></section></summary><div class='docblock'>Returns the element that gives the maximum value from the\nspecified function. <a href=\"devela/all/trait.Iterator.html#method.max_by_key\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.max_by\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.15.0\">1.15.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/iter/traits/iterator.rs.html#3253-3256\">Source</a></span><a href=\"#method.max_by\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Iterator.html#method.max_by\" class=\"fn\">max_by</a>&lt;F&gt;(self, compare: F) -&gt; <a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;Self::<a class=\"associatedtype\" href=\"devela/all/trait.Iterator.html#associatedtype.Item\" title=\"type devela::all::Iterator::Item\">Item</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Option&lt;Self::Item&gt;\">ⓘ</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"devela/all/trait.Sized.html\" title=\"trait devela::all::Sized\">Sized</a>,\n    F: <a class=\"trait\" href=\"devela/all/trait.FnMut.html\" title=\"trait devela::all::FnMut\">FnMut</a>(&amp;Self::<a class=\"associatedtype\" href=\"devela/all/trait.Iterator.html#associatedtype.Item\" title=\"type devela::all::Iterator::Item\">Item</a>, &amp;Self::<a class=\"associatedtype\" href=\"devela/all/trait.Iterator.html#associatedtype.Item\" title=\"type devela::all::Iterator::Item\">Item</a>) -&gt; <a class=\"enum\" href=\"devela/all/enum.Ordering.html\" title=\"enum devela::all::Ordering\">Ordering</a>,</div></h4></section></summary><div class='docblock'>Returns the element that gives the maximum value with respect to the\nspecified comparison function. <a href=\"devela/all/trait.Iterator.html#method.max_by\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.min_by_key\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.6.0\">1.6.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/iter/traits/iterator.rs.html#3280-3283\">Source</a></span><a href=\"#method.min_by_key\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Iterator.html#method.min_by_key\" class=\"fn\">min_by_key</a>&lt;B, F&gt;(self, f: F) -&gt; <a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;Self::<a class=\"associatedtype\" href=\"devela/all/trait.Iterator.html#associatedtype.Item\" title=\"type devela::all::Iterator::Item\">Item</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Option&lt;Self::Item&gt;\">ⓘ</a><div class=\"where\">where\n    B: <a class=\"trait\" href=\"devela/all/trait.Ord.html\" title=\"trait devela::all::Ord\">Ord</a>,\n    Self: <a class=\"trait\" href=\"devela/all/trait.Sized.html\" title=\"trait devela::all::Sized\">Sized</a>,\n    F: <a class=\"trait\" href=\"devela/all/trait.FnMut.html\" title=\"trait devela::all::FnMut\">FnMut</a>(&amp;Self::<a class=\"associatedtype\" href=\"devela/all/trait.Iterator.html#associatedtype.Item\" title=\"type devela::all::Iterator::Item\">Item</a>) -&gt; B,</div></h4></section></summary><div class='docblock'>Returns the element that gives the minimum value from the\nspecified function. <a href=\"devela/all/trait.Iterator.html#method.min_by_key\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.min_by\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.15.0\">1.15.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/iter/traits/iterator.rs.html#3313-3316\">Source</a></span><a href=\"#method.min_by\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Iterator.html#method.min_by\" class=\"fn\">min_by</a>&lt;F&gt;(self, compare: F) -&gt; <a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;Self::<a class=\"associatedtype\" href=\"devela/all/trait.Iterator.html#associatedtype.Item\" title=\"type devela::all::Iterator::Item\">Item</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Option&lt;Self::Item&gt;\">ⓘ</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"devela/all/trait.Sized.html\" title=\"trait devela::all::Sized\">Sized</a>,\n    F: <a class=\"trait\" href=\"devela/all/trait.FnMut.html\" title=\"trait devela::all::FnMut\">FnMut</a>(&amp;Self::<a class=\"associatedtype\" href=\"devela/all/trait.Iterator.html#associatedtype.Item\" title=\"type devela::all::Iterator::Item\">Item</a>, &amp;Self::<a class=\"associatedtype\" href=\"devela/all/trait.Iterator.html#associatedtype.Item\" title=\"type devela::all::Iterator::Item\">Item</a>) -&gt; <a class=\"enum\" href=\"devela/all/enum.Ordering.html\" title=\"enum devela::all::Ordering\">Ordering</a>,</div></h4></section></summary><div class='docblock'>Returns the element that gives the minimum value with respect to the\nspecified comparison function. <a href=\"devela/all/trait.Iterator.html#method.min_by\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.rev\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/iter/traits/iterator.rs.html#3350-3352\">Source</a></span><a href=\"#method.rev\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Iterator.html#method.rev\" class=\"fn\">rev</a>(self) -&gt; <a class=\"struct\" href=\"devela/all/struct.IterRev.html\" title=\"struct devela::all::IterRev\">Rev</a>&lt;Self&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Rev&lt;Self&gt;\">ⓘ</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"devela/all/trait.Sized.html\" title=\"trait devela::all::Sized\">Sized</a> + <a class=\"trait\" href=\"devela/all/trait.IteratorDoubleEnded.html\" title=\"trait devela::all::IteratorDoubleEnded\">DoubleEndedIterator</a>,</div></h4></section></summary><div class='docblock'>Reverses an iterator’s direction. <a href=\"devela/all/trait.Iterator.html#method.rev\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unzip\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/iter/traits/iterator.rs.html#3386-3390\">Source</a></span><a href=\"#method.unzip\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Iterator.html#method.unzip\" class=\"fn\">unzip</a>&lt;A, B, FromA, FromB&gt;(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(FromA, FromB)</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"(FromA, FromB)\">ⓘ</a><div class=\"where\">where\n    FromA: <a class=\"trait\" href=\"devela/code/trait.Default.html\" title=\"trait devela::code::Default\">Default</a> + <a class=\"trait\" href=\"devela/all/trait.IteratorExtend.html\" title=\"trait devela::all::IteratorExtend\">Extend</a>&lt;A&gt;,\n    FromB: <a class=\"trait\" href=\"devela/code/trait.Default.html\" title=\"trait devela::code::Default\">Default</a> + <a class=\"trait\" href=\"devela/all/trait.IteratorExtend.html\" title=\"trait devela::all::IteratorExtend\">Extend</a>&lt;B&gt;,\n    Self: <a class=\"trait\" href=\"devela/all/trait.Sized.html\" title=\"trait devela::all::Sized\">Sized</a> + <a class=\"trait\" href=\"devela/all/trait.Iterator.html\" title=\"trait devela::all::Iterator\">Iterator</a>&lt;Item = <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(A, B)</a>&gt;,</div></h4></section></summary><div class='docblock'>Converts an iterator of pairs into a pair of containers. <a href=\"devela/all/trait.Iterator.html#method.unzip\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.copied\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.36.0\">1.36.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/iter/traits/iterator.rs.html#3417-3420\">Source</a></span><a href=\"#method.copied\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Iterator.html#method.copied\" class=\"fn\">copied</a>&lt;'a, T&gt;(self) -&gt; <a class=\"struct\" href=\"devela/all/struct.IterCopied.html\" title=\"struct devela::all::IterCopied\">Copied</a>&lt;Self&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Copied&lt;Self&gt;\">ⓘ</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"devela/all/trait.Copy.html\" title=\"trait devela::all::Copy\">Copy</a> + 'a,\n    Self: <a class=\"trait\" href=\"devela/all/trait.Sized.html\" title=\"trait devela::all::Sized\">Sized</a> + <a class=\"trait\" href=\"devela/all/trait.Iterator.html\" title=\"trait devela::all::Iterator\">Iterator</a>&lt;Item = <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;'a T</a>&gt;,</div></h4></section></summary><div class='docblock'>Creates an iterator which copies all of its elements. <a href=\"devela/all/trait.Iterator.html#method.copied\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.cloned\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/iter/traits/iterator.rs.html#3465-3468\">Source</a></span><a href=\"#method.cloned\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Iterator.html#method.cloned\" class=\"fn\">cloned</a>&lt;'a, T&gt;(self) -&gt; <a class=\"struct\" href=\"devela/all/struct.IterCloned.html\" title=\"struct devela::all::IterCloned\">Cloned</a>&lt;Self&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Cloned&lt;Self&gt;\">ⓘ</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"devela/code/trait.Clone.html\" title=\"trait devela::code::Clone\">Clone</a> + 'a,\n    Self: <a class=\"trait\" href=\"devela/all/trait.Sized.html\" title=\"trait devela::all::Sized\">Sized</a> + <a class=\"trait\" href=\"devela/all/trait.Iterator.html\" title=\"trait devela::all::Iterator\">Iterator</a>&lt;Item = <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;'a T</a>&gt;,</div></h4></section></summary><div class='docblock'>Creates an iterator which <a href=\"devela/code/trait.Clone.html#tymethod.clone\" title=\"method devela::code::Clone::clone\"><code>clone</code></a>s all of its elements. <a href=\"devela/all/trait.Iterator.html#method.cloned\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.cycle\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/iter/traits/iterator.rs.html#3496-3498\">Source</a></span><a href=\"#method.cycle\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Iterator.html#method.cycle\" class=\"fn\">cycle</a>(self) -&gt; <a class=\"struct\" href=\"devela/all/struct.IterCycle.html\" title=\"struct devela::all::IterCycle\">Cycle</a>&lt;Self&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Cycle&lt;Self&gt;\">ⓘ</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"devela/all/trait.Sized.html\" title=\"trait devela::all::Sized\">Sized</a> + <a class=\"trait\" href=\"devela/code/trait.Clone.html\" title=\"trait devela::code::Clone\">Clone</a>,</div></h4></section></summary><div class='docblock'>Repeats an iterator endlessly. <a href=\"devela/all/trait.Iterator.html#method.cycle\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.array_chunks\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/iter/traits/iterator.rs.html#3539-3541\">Source</a><a href=\"#method.array_chunks\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Iterator.html#method.array_chunks\" class=\"fn\">array_chunks</a>&lt;const N: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt;(self) -&gt; <a class=\"struct\" href=\"devela/_core/iter/struct.ArrayChunks.html\" title=\"struct devela::_core::iter::ArrayChunks\">ArrayChunks</a>&lt;Self, N&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"ArrayChunks&lt;Self, N&gt;\">ⓘ</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"devela/all/trait.Sized.html\" title=\"trait devela::all::Sized\">Sized</a>,</div></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>iter_array_chunks</code>)</span></div></span><div class='docblock'>Returns an iterator over <code>N</code> elements of the iterator at a time. <a href=\"devela/all/trait.Iterator.html#method.array_chunks\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.sum\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.11.0\">1.11.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/iter/traits/iterator.rs.html#3575-3578\">Source</a></span><a href=\"#method.sum\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Iterator.html#method.sum\" class=\"fn\">sum</a>&lt;S&gt;(self) -&gt; S<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"devela/all/trait.Sized.html\" title=\"trait devela::all::Sized\">Sized</a>,\n    S: <a class=\"trait\" href=\"devela/all/trait.IteratorSum.html\" title=\"trait devela::all::IteratorSum\">Sum</a>&lt;Self::<a class=\"associatedtype\" href=\"devela/all/trait.Iterator.html#associatedtype.Item\" title=\"type devela::all::Iterator::Item\">Item</a>&gt;,</div></h4></section></summary><div class='docblock'>Sums the elements of an iterator. <a href=\"devela/all/trait.Iterator.html#method.sum\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.product\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.11.0\">1.11.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/iter/traits/iterator.rs.html#3607-3610\">Source</a></span><a href=\"#method.product\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Iterator.html#method.product\" class=\"fn\">product</a>&lt;P&gt;(self) -&gt; P<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"devela/all/trait.Sized.html\" title=\"trait devela::all::Sized\">Sized</a>,\n    P: <a class=\"trait\" href=\"devela/all/trait.IteratorProduct.html\" title=\"trait devela::all::IteratorProduct\">Product</a>&lt;Self::<a class=\"associatedtype\" href=\"devela/all/trait.Iterator.html#associatedtype.Item\" title=\"type devela::all::Iterator::Item\">Item</a>&gt;,</div></h4></section></summary><div class='docblock'>Iterates over the entire iterator, multiplying all the elements <a href=\"devela/all/trait.Iterator.html#method.product\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.cmp\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.5.0\">1.5.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/iter/traits/iterator.rs.html#3628-3632\">Source</a></span><a href=\"#method.cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Iterator.html#method.cmp\" class=\"fn\">cmp</a>&lt;I&gt;(self, other: I) -&gt; <a class=\"enum\" href=\"devela/all/enum.Ordering.html\" title=\"enum devela::all::Ordering\">Ordering</a><div class=\"where\">where\n    I: <a class=\"trait\" href=\"devela/all/trait.IteratorInto.html\" title=\"trait devela::all::IteratorInto\">IntoIterator</a>&lt;Item = Self::<a class=\"associatedtype\" href=\"devela/all/trait.Iterator.html#associatedtype.Item\" title=\"type devela::all::Iterator::Item\">Item</a>&gt;,\n    Self::<a class=\"associatedtype\" href=\"devela/all/trait.Iterator.html#associatedtype.Item\" title=\"type devela::all::Iterator::Item\">Item</a>: <a class=\"trait\" href=\"devela/all/trait.Ord.html\" title=\"trait devela::all::Ord\">Ord</a>,\n    Self: <a class=\"trait\" href=\"devela/all/trait.Sized.html\" title=\"trait devela::all::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'><a href=\"devela/all/trait.Ord.html#lexicographical-comparison\" title=\"trait devela::all::Ord\">Lexicographically</a> compares the elements of this <a href=\"devela/all/trait.Iterator.html\" title=\"trait devela::all::Iterator\"><code>Iterator</code></a> with those\nof another. <a href=\"devela/all/trait.Iterator.html#method.cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.cmp_by\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/iter/traits/iterator.rs.html#3655-3659\">Source</a><a href=\"#method.cmp_by\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Iterator.html#method.cmp_by\" class=\"fn\">cmp_by</a>&lt;I, F&gt;(self, other: I, cmp: F) -&gt; <a class=\"enum\" href=\"devela/all/enum.Ordering.html\" title=\"enum devela::all::Ordering\">Ordering</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"devela/all/trait.Sized.html\" title=\"trait devela::all::Sized\">Sized</a>,\n    I: <a class=\"trait\" href=\"devela/all/trait.IteratorInto.html\" title=\"trait devela::all::IteratorInto\">IntoIterator</a>,\n    F: <a class=\"trait\" href=\"devela/all/trait.FnMut.html\" title=\"trait devela::all::FnMut\">FnMut</a>(Self::<a class=\"associatedtype\" href=\"devela/all/trait.Iterator.html#associatedtype.Item\" title=\"type devela::all::Iterator::Item\">Item</a>, &lt;I as <a class=\"trait\" href=\"devela/all/trait.IteratorInto.html\" title=\"trait devela::all::IteratorInto\">IntoIterator</a>&gt;::<a class=\"associatedtype\" href=\"devela/all/trait.IteratorInto.html#associatedtype.Item\" title=\"type devela::all::IteratorInto::Item\">Item</a>) -&gt; <a class=\"enum\" href=\"devela/all/enum.Ordering.html\" title=\"enum devela::all::Ordering\">Ordering</a>,</div></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>iter_order_by</code>)</span></div></span><div class='docblock'><a href=\"devela/all/trait.Ord.html#lexicographical-comparison\" title=\"trait devela::all::Ord\">Lexicographically</a> compares the elements of this <a href=\"devela/all/trait.Iterator.html\" title=\"trait devela::all::Iterator\"><code>Iterator</code></a> with those\nof another with respect to the specified comparison function. <a href=\"devela/all/trait.Iterator.html#method.cmp_by\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.partial_cmp\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.5.0\">1.5.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/iter/traits/iterator.rs.html#3711-3715\">Source</a></span><a href=\"#method.partial_cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Iterator.html#method.partial_cmp\" class=\"fn\">partial_cmp</a>&lt;I&gt;(self, other: I) -&gt; <a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;<a class=\"enum\" href=\"devela/all/enum.Ordering.html\" title=\"enum devela::all::Ordering\">Ordering</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Option&lt;Ordering&gt;\">ⓘ</a><div class=\"where\">where\n    I: <a class=\"trait\" href=\"devela/all/trait.IteratorInto.html\" title=\"trait devela::all::IteratorInto\">IntoIterator</a>,\n    Self::<a class=\"associatedtype\" href=\"devela/all/trait.Iterator.html#associatedtype.Item\" title=\"type devela::all::Iterator::Item\">Item</a>: <a class=\"trait\" href=\"devela/all/trait.PartialOrd.html\" title=\"trait devela::all::PartialOrd\">PartialOrd</a>&lt;&lt;I as <a class=\"trait\" href=\"devela/all/trait.IteratorInto.html\" title=\"trait devela::all::IteratorInto\">IntoIterator</a>&gt;::<a class=\"associatedtype\" href=\"devela/all/trait.IteratorInto.html#associatedtype.Item\" title=\"type devela::all::IteratorInto::Item\">Item</a>&gt;,\n    Self: <a class=\"trait\" href=\"devela/all/trait.Sized.html\" title=\"trait devela::all::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'><a href=\"devela/all/trait.Ord.html#lexicographical-comparison\" title=\"trait devela::all::Ord\">Lexicographically</a> compares the <a href=\"devela/all/trait.PartialOrd.html\" title=\"trait devela::all::PartialOrd\"><code>PartialOrd</code></a> elements of\nthis <a href=\"devela/all/trait.Iterator.html\" title=\"trait devela::all::Iterator\"><code>Iterator</code></a> with those of another. The comparison works like short-circuit\nevaluation, returning a result without comparing the remaining elements.\nAs soon as an order can be determined, the evaluation stops and a result is returned. <a href=\"devela/all/trait.Iterator.html#method.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.partial_cmp_by\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/iter/traits/iterator.rs.html#3747-3751\">Source</a><a href=\"#method.partial_cmp_by\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Iterator.html#method.partial_cmp_by\" class=\"fn\">partial_cmp_by</a>&lt;I, F&gt;(self, other: I, partial_cmp: F) -&gt; <a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;<a class=\"enum\" href=\"devela/all/enum.Ordering.html\" title=\"enum devela::all::Ordering\">Ordering</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Option&lt;Ordering&gt;\">ⓘ</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"devela/all/trait.Sized.html\" title=\"trait devela::all::Sized\">Sized</a>,\n    I: <a class=\"trait\" href=\"devela/all/trait.IteratorInto.html\" title=\"trait devela::all::IteratorInto\">IntoIterator</a>,\n    F: <a class=\"trait\" href=\"devela/all/trait.FnMut.html\" title=\"trait devela::all::FnMut\">FnMut</a>(Self::<a class=\"associatedtype\" href=\"devela/all/trait.Iterator.html#associatedtype.Item\" title=\"type devela::all::Iterator::Item\">Item</a>, &lt;I as <a class=\"trait\" href=\"devela/all/trait.IteratorInto.html\" title=\"trait devela::all::IteratorInto\">IntoIterator</a>&gt;::<a class=\"associatedtype\" href=\"devela/all/trait.IteratorInto.html#associatedtype.Item\" title=\"type devela::all::IteratorInto::Item\">Item</a>) -&gt; <a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;<a class=\"enum\" href=\"devela/all/enum.Ordering.html\" title=\"enum devela::all::Ordering\">Ordering</a>&gt;,</div></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>iter_order_by</code>)</span></div></span><div class='docblock'><a href=\"devela/all/trait.Ord.html#lexicographical-comparison\" title=\"trait devela::all::Ord\">Lexicographically</a> compares the elements of this <a href=\"devela/all/trait.Iterator.html\" title=\"trait devela::all::Iterator\"><code>Iterator</code></a> with those\nof another with respect to the specified comparison function. <a href=\"devela/all/trait.Iterator.html#method.partial_cmp_by\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.5.0\">1.5.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/iter/traits/iterator.rs.html#3780-3784\">Source</a></span><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Iterator.html#method.eq\" class=\"fn\">eq</a>&lt;I&gt;(self, other: I) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a><div class=\"where\">where\n    I: <a class=\"trait\" href=\"devela/all/trait.IteratorInto.html\" title=\"trait devela::all::IteratorInto\">IntoIterator</a>,\n    Self::<a class=\"associatedtype\" href=\"devela/all/trait.Iterator.html#associatedtype.Item\" title=\"type devela::all::Iterator::Item\">Item</a>: <a class=\"trait\" href=\"devela/all/trait.PartialEq.html\" title=\"trait devela::all::PartialEq\">PartialEq</a>&lt;&lt;I as <a class=\"trait\" href=\"devela/all/trait.IteratorInto.html\" title=\"trait devela::all::IteratorInto\">IntoIterator</a>&gt;::<a class=\"associatedtype\" href=\"devela/all/trait.IteratorInto.html#associatedtype.Item\" title=\"type devela::all::IteratorInto::Item\">Item</a>&gt;,\n    Self: <a class=\"trait\" href=\"devela/all/trait.Sized.html\" title=\"trait devela::all::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Determines if the elements of this <a href=\"devela/all/trait.Iterator.html\" title=\"trait devela::all::Iterator\"><code>Iterator</code></a> are equal to those of\nanother. <a href=\"devela/all/trait.Iterator.html#method.eq\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq_by\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/iter/traits/iterator.rs.html#3803-3807\">Source</a><a href=\"#method.eq_by\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Iterator.html#method.eq_by\" class=\"fn\">eq_by</a>&lt;I, F&gt;(self, other: I, eq: F) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"devela/all/trait.Sized.html\" title=\"trait devela::all::Sized\">Sized</a>,\n    I: <a class=\"trait\" href=\"devela/all/trait.IteratorInto.html\" title=\"trait devela::all::IteratorInto\">IntoIterator</a>,\n    F: <a class=\"trait\" href=\"devela/all/trait.FnMut.html\" title=\"trait devela::all::FnMut\">FnMut</a>(Self::<a class=\"associatedtype\" href=\"devela/all/trait.Iterator.html#associatedtype.Item\" title=\"type devela::all::Iterator::Item\">Item</a>, &lt;I as <a class=\"trait\" href=\"devela/all/trait.IteratorInto.html\" title=\"trait devela::all::IteratorInto\">IntoIterator</a>&gt;::<a class=\"associatedtype\" href=\"devela/all/trait.IteratorInto.html#associatedtype.Item\" title=\"type devela::all::IteratorInto::Item\">Item</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a>,</div></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>iter_order_by</code>)</span></div></span><div class='docblock'>Determines if the elements of this <a href=\"devela/all/trait.Iterator.html\" title=\"trait devela::all::Iterator\"><code>Iterator</code></a> are equal to those of\nanother with respect to the specified equality function. <a href=\"devela/all/trait.Iterator.html#method.eq_by\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.5.0\">1.5.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/iter/traits/iterator.rs.html#3835-3839\">Source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Iterator.html#method.ne\" class=\"fn\">ne</a>&lt;I&gt;(self, other: I) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a><div class=\"where\">where\n    I: <a class=\"trait\" href=\"devela/all/trait.IteratorInto.html\" title=\"trait devela::all::IteratorInto\">IntoIterator</a>,\n    Self::<a class=\"associatedtype\" href=\"devela/all/trait.Iterator.html#associatedtype.Item\" title=\"type devela::all::Iterator::Item\">Item</a>: <a class=\"trait\" href=\"devela/all/trait.PartialEq.html\" title=\"trait devela::all::PartialEq\">PartialEq</a>&lt;&lt;I as <a class=\"trait\" href=\"devela/all/trait.IteratorInto.html\" title=\"trait devela::all::IteratorInto\">IntoIterator</a>&gt;::<a class=\"associatedtype\" href=\"devela/all/trait.IteratorInto.html#associatedtype.Item\" title=\"type devela::all::IteratorInto::Item\">Item</a>&gt;,\n    Self: <a class=\"trait\" href=\"devela/all/trait.Sized.html\" title=\"trait devela::all::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Determines if the elements of this <a href=\"devela/all/trait.Iterator.html\" title=\"trait devela::all::Iterator\"><code>Iterator</code></a> are not equal to those of\nanother. <a href=\"devela/all/trait.Iterator.html#method.ne\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.5.0\">1.5.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/iter/traits/iterator.rs.html#3856-3860\">Source</a></span><a href=\"#method.lt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Iterator.html#method.lt\" class=\"fn\">lt</a>&lt;I&gt;(self, other: I) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a><div class=\"where\">where\n    I: <a class=\"trait\" href=\"devela/all/trait.IteratorInto.html\" title=\"trait devela::all::IteratorInto\">IntoIterator</a>,\n    Self::<a class=\"associatedtype\" href=\"devela/all/trait.Iterator.html#associatedtype.Item\" title=\"type devela::all::Iterator::Item\">Item</a>: <a class=\"trait\" href=\"devela/all/trait.PartialOrd.html\" title=\"trait devela::all::PartialOrd\">PartialOrd</a>&lt;&lt;I as <a class=\"trait\" href=\"devela/all/trait.IteratorInto.html\" title=\"trait devela::all::IteratorInto\">IntoIterator</a>&gt;::<a class=\"associatedtype\" href=\"devela/all/trait.IteratorInto.html#associatedtype.Item\" title=\"type devela::all::IteratorInto::Item\">Item</a>&gt;,\n    Self: <a class=\"trait\" href=\"devela/all/trait.Sized.html\" title=\"trait devela::all::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Determines if the elements of this <a href=\"devela/all/trait.Iterator.html\" title=\"trait devela::all::Iterator\"><code>Iterator</code></a> are <a href=\"devela/all/trait.Ord.html#lexicographical-comparison\" title=\"trait devela::all::Ord\">lexicographically</a>\nless than those of another. <a href=\"devela/all/trait.Iterator.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.le\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.5.0\">1.5.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/iter/traits/iterator.rs.html#3877-3881\">Source</a></span><a href=\"#method.le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Iterator.html#method.le\" class=\"fn\">le</a>&lt;I&gt;(self, other: I) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a><div class=\"where\">where\n    I: <a class=\"trait\" href=\"devela/all/trait.IteratorInto.html\" title=\"trait devela::all::IteratorInto\">IntoIterator</a>,\n    Self::<a class=\"associatedtype\" href=\"devela/all/trait.Iterator.html#associatedtype.Item\" title=\"type devela::all::Iterator::Item\">Item</a>: <a class=\"trait\" href=\"devela/all/trait.PartialOrd.html\" title=\"trait devela::all::PartialOrd\">PartialOrd</a>&lt;&lt;I as <a class=\"trait\" href=\"devela/all/trait.IteratorInto.html\" title=\"trait devela::all::IteratorInto\">IntoIterator</a>&gt;::<a class=\"associatedtype\" href=\"devela/all/trait.IteratorInto.html#associatedtype.Item\" title=\"type devela::all::IteratorInto::Item\">Item</a>&gt;,\n    Self: <a class=\"trait\" href=\"devela/all/trait.Sized.html\" title=\"trait devela::all::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Determines if the elements of this <a href=\"devela/all/trait.Iterator.html\" title=\"trait devela::all::Iterator\"><code>Iterator</code></a> are <a href=\"devela/all/trait.Ord.html#lexicographical-comparison\" title=\"trait devela::all::Ord\">lexicographically</a>\nless or equal to those of another. <a href=\"devela/all/trait.Iterator.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.gt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.5.0\">1.5.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/iter/traits/iterator.rs.html#3898-3902\">Source</a></span><a href=\"#method.gt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Iterator.html#method.gt\" class=\"fn\">gt</a>&lt;I&gt;(self, other: I) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a><div class=\"where\">where\n    I: <a class=\"trait\" href=\"devela/all/trait.IteratorInto.html\" title=\"trait devela::all::IteratorInto\">IntoIterator</a>,\n    Self::<a class=\"associatedtype\" href=\"devela/all/trait.Iterator.html#associatedtype.Item\" title=\"type devela::all::Iterator::Item\">Item</a>: <a class=\"trait\" href=\"devela/all/trait.PartialOrd.html\" title=\"trait devela::all::PartialOrd\">PartialOrd</a>&lt;&lt;I as <a class=\"trait\" href=\"devela/all/trait.IteratorInto.html\" title=\"trait devela::all::IteratorInto\">IntoIterator</a>&gt;::<a class=\"associatedtype\" href=\"devela/all/trait.IteratorInto.html#associatedtype.Item\" title=\"type devela::all::IteratorInto::Item\">Item</a>&gt;,\n    Self: <a class=\"trait\" href=\"devela/all/trait.Sized.html\" title=\"trait devela::all::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Determines if the elements of this <a href=\"devela/all/trait.Iterator.html\" title=\"trait devela::all::Iterator\"><code>Iterator</code></a> are <a href=\"devela/all/trait.Ord.html#lexicographical-comparison\" title=\"trait devela::all::Ord\">lexicographically</a>\ngreater than those of another. <a href=\"devela/all/trait.Iterator.html#method.gt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ge\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.5.0\">1.5.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/iter/traits/iterator.rs.html#3919-3923\">Source</a></span><a href=\"#method.ge\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Iterator.html#method.ge\" class=\"fn\">ge</a>&lt;I&gt;(self, other: I) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a><div class=\"where\">where\n    I: <a class=\"trait\" href=\"devela/all/trait.IteratorInto.html\" title=\"trait devela::all::IteratorInto\">IntoIterator</a>,\n    Self::<a class=\"associatedtype\" href=\"devela/all/trait.Iterator.html#associatedtype.Item\" title=\"type devela::all::Iterator::Item\">Item</a>: <a class=\"trait\" href=\"devela/all/trait.PartialOrd.html\" title=\"trait devela::all::PartialOrd\">PartialOrd</a>&lt;&lt;I as <a class=\"trait\" href=\"devela/all/trait.IteratorInto.html\" title=\"trait devela::all::IteratorInto\">IntoIterator</a>&gt;::<a class=\"associatedtype\" href=\"devela/all/trait.IteratorInto.html#associatedtype.Item\" title=\"type devela::all::IteratorInto::Item\">Item</a>&gt;,\n    Self: <a class=\"trait\" href=\"devela/all/trait.Sized.html\" title=\"trait devela::all::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Determines if the elements of this <a href=\"devela/all/trait.Iterator.html\" title=\"trait devela::all::Iterator\"><code>Iterator</code></a> are <a href=\"devela/all/trait.Ord.html#lexicographical-comparison\" title=\"trait devela::all::Ord\">lexicographically</a>\ngreater than or equal to those of another. <a href=\"devela/all/trait.Iterator.html#method.ge\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_sorted\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.82.0\">1.82.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/iter/traits/iterator.rs.html#3948-3951\">Source</a></span><a href=\"#method.is_sorted\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Iterator.html#method.is_sorted\" class=\"fn\">is_sorted</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"devela/all/trait.Sized.html\" title=\"trait devela::all::Sized\">Sized</a>,\n    Self::<a class=\"associatedtype\" href=\"devela/all/trait.Iterator.html#associatedtype.Item\" title=\"type devela::all::Iterator::Item\">Item</a>: <a class=\"trait\" href=\"devela/all/trait.PartialOrd.html\" title=\"trait devela::all::PartialOrd\">PartialOrd</a>,</div></h4></section></summary><div class='docblock'>Checks if the elements of this iterator are sorted. <a href=\"devela/all/trait.Iterator.html#method.is_sorted\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_sorted_by\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.82.0\">1.82.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/iter/traits/iterator.rs.html#3974-3977\">Source</a></span><a href=\"#method.is_sorted_by\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Iterator.html#method.is_sorted_by\" class=\"fn\">is_sorted_by</a>&lt;F&gt;(self, compare: F) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"devela/all/trait.Sized.html\" title=\"trait devela::all::Sized\">Sized</a>,\n    F: <a class=\"trait\" href=\"devela/all/trait.FnMut.html\" title=\"trait devela::all::FnMut\">FnMut</a>(&amp;Self::<a class=\"associatedtype\" href=\"devela/all/trait.Iterator.html#associatedtype.Item\" title=\"type devela::all::Iterator::Item\">Item</a>, &amp;Self::<a class=\"associatedtype\" href=\"devela/all/trait.Iterator.html#associatedtype.Item\" title=\"type devela::all::Iterator::Item\">Item</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a>,</div></h4></section></summary><div class='docblock'>Checks if the elements of this iterator are sorted using the given comparator function. <a href=\"devela/all/trait.Iterator.html#method.is_sorted_by\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_sorted_by_key\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.82.0\">1.82.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/iter/traits/iterator.rs.html#4018-4022\">Source</a></span><a href=\"#method.is_sorted_by_key\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Iterator.html#method.is_sorted_by_key\" class=\"fn\">is_sorted_by_key</a>&lt;F, K&gt;(self, f: F) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"devela/all/trait.Sized.html\" title=\"trait devela::all::Sized\">Sized</a>,\n    F: <a class=\"trait\" href=\"devela/all/trait.FnMut.html\" title=\"trait devela::all::FnMut\">FnMut</a>(Self::<a class=\"associatedtype\" href=\"devela/all/trait.Iterator.html#associatedtype.Item\" title=\"type devela::all::Iterator::Item\">Item</a>) -&gt; K,\n    K: <a class=\"trait\" href=\"devela/all/trait.PartialOrd.html\" title=\"trait devela::all::PartialOrd\">PartialOrd</a>,</div></h4></section></summary><div class='docblock'>Checks if the elements of this iterator are sorted using the given key extraction\nfunction. <a href=\"devela/all/trait.Iterator.html#method.is_sorted_by_key\">Read more</a></div></details></div></details>","Iterator","devela::_dep::sdl2::timer::TimerCallback","devela::_dep::toml_edit::ArrayIntoIter","devela::_dep::toml_edit::ArrayIter","devela::_dep::toml_edit::ArrayIterMut","devela::_dep::toml_edit::ArrayOfTablesIntoIter","devela::_dep::toml_edit::ArrayOfTablesIter","devela::_dep::toml_edit::ArrayOfTablesIterMut","devela::_dep::toml_edit::InlineTableIntoIter","devela::_dep::toml_edit::InlineTableIter","devela::_dep::toml_edit::InlineTableIterMut","devela::_dep::toml_edit::IntoIter","devela::_dep::toml_edit::Iter","devela::_dep::toml_edit::IterMut"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Log-for-Box%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/log/0.4.27/src/log/lib.rs.html#1236-1238\">Source</a><a href=\"#impl-Log-for-Box%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"devela/all/trait.Logger.html\" title=\"trait devela::all::Logger\">Log</a> for <a class=\"struct\" href=\"devela/all/struct.Box.html\" title=\"struct devela::all::Box\">Box</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"devela/all/trait.Logger.html\" title=\"trait devela::all::Logger\">Log</a> + ?<a class=\"trait\" href=\"devela/all/trait.Sized.html\" title=\"trait devela::all::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.enabled\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/log/0.4.27/src/log/lib.rs.html#1240\">Source</a><a href=\"#method.enabled\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Logger.html#tymethod.enabled\" class=\"fn\">enabled</a>(&amp;self, metadata: &amp;<a class=\"struct\" href=\"devela/all/struct.LogMetadata.html\" title=\"struct devela::all::LogMetadata\">Metadata</a>&lt;'_&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Determines if a log message with the specified metadata would be\nlogged. <a href=\"devela/all/trait.Logger.html#tymethod.enabled\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.log\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/log/0.4.27/src/log/lib.rs.html#1244\">Source</a><a href=\"#method.log\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Logger.html#tymethod.log\" class=\"fn\">log</a>(&amp;self, record: &amp;<a class=\"struct\" href=\"devela/all/struct.LogRecord.html\" title=\"struct devela::all::LogRecord\">Record</a>&lt;'_&gt;)</h4></section></summary><div class='docblock'>Logs the <code>Record</code>. <a href=\"devela/all/trait.Logger.html#tymethod.log\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.flush\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/log/0.4.27/src/log/lib.rs.html#1247\">Source</a><a href=\"#method.flush\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Logger.html#tymethod.flush\" class=\"fn\">flush</a>(&amp;self)</h4></section></summary><div class='docblock'>Flushes any buffered records. <a href=\"devela/all/trait.Logger.html#tymethod.flush\">Read more</a></div></details></div></details>","Log","devela::_dep::sdl2::timer::TimerCallback","devela::_dep::toml_edit::ArrayIntoIter","devela::_dep::toml_edit::ArrayIter","devela::_dep::toml_edit::ArrayIterMut","devela::_dep::toml_edit::ArrayOfTablesIntoIter","devela::_dep::toml_edit::ArrayOfTablesIter","devela::_dep::toml_edit::ArrayOfTablesIterMut","devela::_dep::toml_edit::InlineTableIntoIter","devela::_dep::toml_edit::InlineTableIter","devela::_dep::toml_edit::InlineTableIterMut","devela::_dep::toml_edit::IntoIter","devela::_dep::toml_edit::Iter","devela::_dep::toml_edit::IterMut"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Ord-for-Box%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/boxed.rs.html#1851\">Source</a></span><a href=\"#impl-Ord-for-Box%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"devela/all/trait.Ord.html\" title=\"trait devela::all::Ord\">Ord</a> for <a class=\"struct\" href=\"devela/all/struct.Box.html\" title=\"struct devela::all::Box\">Box</a>&lt;T, A&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"devela/all/trait.Ord.html\" title=\"trait devela::all::Ord\">Ord</a> + ?<a class=\"trait\" href=\"devela/all/trait.Sized.html\" title=\"trait devela::all::Sized\">Sized</a>,\n    A: <a class=\"trait\" href=\"devela/_core/alloc/trait.Allocator.html\" title=\"trait devela::_core::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/boxed.rs.html#1853\">Source</a><a href=\"#method.cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Ord.html#tymethod.cmp\" class=\"fn\">cmp</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"devela/all/struct.Box.html\" title=\"struct devela::all::Box\">Box</a>&lt;T, A&gt;) -&gt; <a class=\"enum\" href=\"devela/all/enum.Ordering.html\" title=\"enum devela::all::Ordering\">Ordering</a></h4></section></summary><div class='docblock'>This method returns an <a href=\"devela/all/enum.Ordering.html\" title=\"enum devela::all::Ordering\"><code>Ordering</code></a> between <code>self</code> and <code>other</code>. <a href=\"devela/all/trait.Ord.html#tymethod.cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.max\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1013-1015\">Source</a></span><a href=\"#method.max\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Ord.html#method.max\" class=\"fn\">max</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"devela/all/trait.Sized.html\" title=\"trait devela::all::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Compares and returns the maximum of two values. <a href=\"devela/all/trait.Ord.html#method.max\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.min\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1052-1054\">Source</a></span><a href=\"#method.min\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Ord.html#method.min\" class=\"fn\">min</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"devela/all/trait.Sized.html\" title=\"trait devela::all::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Compares and returns the minimum of two values. <a href=\"devela/all/trait.Ord.html#method.min\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clamp\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.50.0\">1.50.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1078-1080\">Source</a></span><a href=\"#method.clamp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Ord.html#method.clamp\" class=\"fn\">clamp</a>(self, min: Self, max: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"devela/all/trait.Sized.html\" title=\"trait devela::all::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Restrict a value to a certain interval. <a href=\"devela/all/trait.Ord.html#method.clamp\">Read more</a></div></details></div></details>","Ord","devela::_dep::sdl2::timer::TimerCallback","devela::_dep::toml_edit::ArrayIntoIter","devela::_dep::toml_edit::ArrayIter","devela::_dep::toml_edit::ArrayIterMut","devela::_dep::toml_edit::ArrayOfTablesIntoIter","devela::_dep::toml_edit::ArrayOfTablesIter","devela::_dep::toml_edit::ArrayOfTablesIterMut","devela::_dep::toml_edit::InlineTableIntoIter","devela::_dep::toml_edit::InlineTableIter","devela::_dep::toml_edit::InlineTableIterMut","devela::_dep::toml_edit::IntoIter","devela::_dep::toml_edit::Iter","devela::_dep::toml_edit::IterMut"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq-for-Box%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/boxed.rs.html#1815\">Source</a></span><a href=\"#impl-PartialEq-for-Box%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"devela/all/trait.PartialEq.html\" title=\"trait devela::all::PartialEq\">PartialEq</a> for <a class=\"struct\" href=\"devela/all/struct.Box.html\" title=\"struct devela::all::Box\">Box</a>&lt;T, A&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"devela/all/trait.PartialEq.html\" title=\"trait devela::all::PartialEq\">PartialEq</a> + ?<a class=\"trait\" href=\"devela/all/trait.Sized.html\" title=\"trait devela::all::Sized\">Sized</a>,\n    A: <a class=\"trait\" href=\"devela/_core/alloc/trait.Allocator.html\" title=\"trait devela::_core::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/boxed.rs.html#1817\">Source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"devela/all/struct.Box.html\" title=\"struct devela::all::Box\">Box</a>&lt;T, A&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/boxed.rs.html#1821\">Source</a><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"devela/all/struct.Box.html\" title=\"struct devela::all::Box\">Box</a>&lt;T, A&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq","devela::_dep::sdl2::timer::TimerCallback","devela::_dep::toml_edit::ArrayIntoIter","devela::_dep::toml_edit::ArrayIter","devela::_dep::toml_edit::ArrayIterMut","devela::_dep::toml_edit::ArrayOfTablesIntoIter","devela::_dep::toml_edit::ArrayOfTablesIter","devela::_dep::toml_edit::ArrayOfTablesIterMut","devela::_dep::toml_edit::InlineTableIntoIter","devela::_dep::toml_edit::InlineTableIter","devela::_dep::toml_edit::InlineTableIterMut","devela::_dep::toml_edit::IntoIter","devela::_dep::toml_edit::Iter","devela::_dep::toml_edit::IterMut"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialOrd-for-Box%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/boxed.rs.html#1827\">Source</a></span><a href=\"#impl-PartialOrd-for-Box%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"devela/all/trait.PartialOrd.html\" title=\"trait devela::all::PartialOrd\">PartialOrd</a> for <a class=\"struct\" href=\"devela/all/struct.Box.html\" title=\"struct devela::all::Box\">Box</a>&lt;T, A&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"devela/all/trait.PartialOrd.html\" title=\"trait devela::all::PartialOrd\">PartialOrd</a> + ?<a class=\"trait\" href=\"devela/all/trait.Sized.html\" title=\"trait devela::all::Sized\">Sized</a>,\n    A: <a class=\"trait\" href=\"devela/_core/alloc/trait.Allocator.html\" title=\"trait devela::_core::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.partial_cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/boxed.rs.html#1829\">Source</a><a href=\"#method.partial_cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"devela/all/struct.Box.html\" title=\"struct devela::all::Box\">Box</a>&lt;T, A&gt;) -&gt; <a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;<a class=\"enum\" href=\"devela/all/enum.Ordering.html\" title=\"enum devela::all::Ordering\">Ordering</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Option&lt;Ordering&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"devela/all/trait.PartialOrd.html#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/boxed.rs.html#1833\">Source</a><a href=\"#method.lt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"devela/all/struct.Box.html\" title=\"struct devela::all::Box\">Box</a>&lt;T, A&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"devela/all/trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.le\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/boxed.rs.html#1837\">Source</a><a href=\"#method.le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"devela/all/struct.Box.html\" title=\"struct devela::all::Box\">Box</a>&lt;T, A&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the\n<code>&lt;=</code> operator. <a href=\"devela/all/trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ge\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/boxed.rs.html#1841\">Source</a><a href=\"#method.ge\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"devela/all/struct.Box.html\" title=\"struct devela::all::Box\">Box</a>&lt;T, A&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by\nthe <code>&gt;=</code> operator. <a href=\"devela/all/trait.PartialOrd.html#method.ge\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.gt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/boxed.rs.html#1845\">Source</a><a href=\"#method.gt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"devela/all/struct.Box.html\" title=\"struct devela::all::Box\">Box</a>&lt;T, A&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code>\noperator. <a href=\"devela/all/trait.PartialOrd.html#method.gt\">Read more</a></div></details></div></details>","PartialOrd","devela::_dep::sdl2::timer::TimerCallback","devela::_dep::toml_edit::ArrayIntoIter","devela::_dep::toml_edit::ArrayIter","devela::_dep::toml_edit::ArrayIterMut","devela::_dep::toml_edit::ArrayOfTablesIntoIter","devela::_dep::toml_edit::ArrayOfTablesIter","devela::_dep::toml_edit::ArrayOfTablesIterMut","devela::_dep::toml_edit::InlineTableIntoIter","devela::_dep::toml_edit::InlineTableIter","devela::_dep::toml_edit::InlineTableIterMut","devela::_dep::toml_edit::IntoIter","devela::_dep::toml_edit::Iter","devela::_dep::toml_edit::IterMut"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Pointer-for-Box%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/boxed.rs.html#1935\">Source</a></span><a href=\"#impl-Pointer-for-Box%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"devela/all/trait.Pointer.html\" title=\"trait devela::all::Pointer\">Pointer</a> for <a class=\"struct\" href=\"devela/all/struct.Box.html\" title=\"struct devela::all::Box\">Box</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"devela/_core/alloc/trait.Allocator.html\" title=\"trait devela::_core::alloc::Allocator\">Allocator</a>,\n    T: ?<a class=\"trait\" href=\"devela/all/trait.Sized.html\" title=\"trait devela::all::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/boxed.rs.html#1936\">Source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Pointer.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"devela/all/struct.Formatter.html\" title=\"struct devela::all::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"devela/all/struct.FmtError.html\" title=\"struct devela::all::FmtError\">Error</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;(), Error&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"devela/all/trait.Pointer.html#tymethod.fmt\">Read more</a></div></details></div></details>","Pointer","devela::_dep::sdl2::timer::TimerCallback","devela::_dep::toml_edit::ArrayIntoIter","devela::_dep::toml_edit::ArrayIter","devela::_dep::toml_edit::ArrayIterMut","devela::_dep::toml_edit::ArrayOfTablesIntoIter","devela::_dep::toml_edit::ArrayOfTablesIter","devela::_dep::toml_edit::ArrayOfTablesIterMut","devela::_dep::toml_edit::InlineTableIntoIter","devela::_dep::toml_edit::InlineTableIter","devela::_dep::toml_edit::InlineTableIterMut","devela::_dep::toml_edit::IntoIter","devela::_dep::toml_edit::Iter","devela::_dep::toml_edit::IterMut"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Read-for-Box%3CR%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/std/io/impls.rs.html#152\">Source</a></span><a href=\"#impl-Read-for-Box%3CR%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;R&gt; <a class=\"trait\" href=\"devela/all/trait.IoRead.html\" title=\"trait devela::all::IoRead\">Read</a> for <a class=\"struct\" href=\"devela/all/struct.Box.html\" title=\"struct devela::all::Box\">Box</a>&lt;R&gt;<div class=\"where\">where\n    R: <a class=\"trait\" href=\"devela/all/trait.IoRead.html\" title=\"trait devela::all::IoRead\">Read</a> + ?<a class=\"trait\" href=\"devela/all/trait.Sized.html\" title=\"trait devela::all::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.read\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/std/io/impls.rs.html#154\">Source</a><a href=\"#method.read\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.IoRead.html#tymethod.read\" class=\"fn\">read</a>(&amp;mut self, buf: &amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>]) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, <a class=\"struct\" href=\"devela/all/struct.IoError.html\" title=\"struct devela::all::IoError\">Error</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;usize, Error&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Pull some bytes from this source into the specified buffer, returning\nhow many bytes were read. <a href=\"devela/all/trait.IoRead.html#tymethod.read\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.read_buf\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/std/io/impls.rs.html#159\">Source</a><a href=\"#method.read_buf\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.IoRead.html#method.read_buf\" class=\"fn\">read_buf</a>(&amp;mut self, cursor: <a class=\"struct\" href=\"devela/_core/io/struct.BorrowedCursor.html\" title=\"struct devela::_core::io::BorrowedCursor\">BorrowedCursor</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"devela/all/struct.IoError.html\" title=\"struct devela::all::IoError\">Error</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;(), Error&gt;\">ⓘ</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>read_buf</code>)</span></div></span><div class='docblock'>Pull some bytes from this source into the specified buffer. <a href=\"devela/all/trait.IoRead.html#method.read_buf\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.read_vectored\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/std/io/impls.rs.html#164\">Source</a><a href=\"#method.read_vectored\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.IoRead.html#method.read_vectored\" class=\"fn\">read_vectored</a>(&amp;mut self, bufs: &amp;mut [<a class=\"struct\" href=\"devela/all/struct.IoSliceMut.html\" title=\"struct devela::all::IoSliceMut\">IoSliceMut</a>&lt;'_&gt;]) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, <a class=\"struct\" href=\"devela/all/struct.IoError.html\" title=\"struct devela::all::IoError\">Error</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;usize, Error&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Like <code>read</code>, except that it reads into a slice of buffers. <a href=\"devela/all/trait.IoRead.html#method.read_vectored\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_read_vectored\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/std/io/impls.rs.html#169\">Source</a><a href=\"#method.is_read_vectored\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.IoRead.html#method.is_read_vectored\" class=\"fn\">is_read_vectored</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>can_vector</code>)</span></div></span><div class='docblock'>Determines if this <code>Read</code>er has an efficient <code>read_vectored</code>\nimplementation. <a href=\"devela/all/trait.IoRead.html#method.is_read_vectored\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.read_to_end\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/std/io/impls.rs.html#174\">Source</a><a href=\"#method.read_to_end\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.IoRead.html#method.read_to_end\" class=\"fn\">read_to_end</a>(&amp;mut self, buf: &amp;mut <a class=\"struct\" href=\"devela/all/struct.Vec.html\" title=\"struct devela::all::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, <a class=\"struct\" href=\"devela/all/struct.IoError.html\" title=\"struct devela::all::IoError\">Error</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;usize, Error&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Reads all bytes until EOF in this source, placing them into <code>buf</code>. <a href=\"devela/all/trait.IoRead.html#method.read_to_end\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.read_to_string\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/std/io/impls.rs.html#179\">Source</a><a href=\"#method.read_to_string\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.IoRead.html#method.read_to_string\" class=\"fn\">read_to_string</a>(&amp;mut self, buf: &amp;mut <a class=\"struct\" href=\"devela/all/struct.String.html\" title=\"struct devela::all::String\">String</a>) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, <a class=\"struct\" href=\"devela/all/struct.IoError.html\" title=\"struct devela::all::IoError\">Error</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;usize, Error&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Reads all bytes until EOF in this source, appending them to <code>buf</code>. <a href=\"devela/all/trait.IoRead.html#method.read_to_string\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.read_exact\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/std/io/impls.rs.html#184\">Source</a><a href=\"#method.read_exact\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.IoRead.html#method.read_exact\" class=\"fn\">read_exact</a>(&amp;mut self, buf: &amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>]) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"devela/all/struct.IoError.html\" title=\"struct devela::all::IoError\">Error</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;(), Error&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Reads the exact number of bytes required to fill <code>buf</code>. <a href=\"devela/all/trait.IoRead.html#method.read_exact\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.read_buf_exact\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/std/io/impls.rs.html#189\">Source</a><a href=\"#method.read_buf_exact\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.IoRead.html#method.read_buf_exact\" class=\"fn\">read_buf_exact</a>(&amp;mut self, cursor: <a class=\"struct\" href=\"devela/_core/io/struct.BorrowedCursor.html\" title=\"struct devela::_core::io::BorrowedCursor\">BorrowedCursor</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"devela/all/struct.IoError.html\" title=\"struct devela::all::IoError\">Error</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;(), Error&gt;\">ⓘ</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>read_buf</code>)</span></div></span><div class='docblock'>Reads the exact number of bytes required to fill <code>cursor</code>. <a href=\"devela/all/trait.IoRead.html#method.read_buf_exact\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.by_ref\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/std/io/mod.rs.html#1119-1121\">Source</a></span><a href=\"#method.by_ref\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.IoRead.html#method.by_ref\" class=\"fn\">by_ref</a>(&amp;mut self) -&gt; &amp;mut Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"devela/all/trait.Sized.html\" title=\"trait devela::all::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Creates a “by reference” adaptor for this instance of <code>Read</code>. <a href=\"devela/all/trait.IoRead.html#method.by_ref\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bytes\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/std/io/mod.rs.html#1162-1164\">Source</a></span><a href=\"#method.bytes\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.IoRead.html#method.bytes\" class=\"fn\">bytes</a>(self) -&gt; <a class=\"struct\" href=\"devela/all/struct.IoBytes.html\" title=\"struct devela::all::IoBytes\">Bytes</a>&lt;Self&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Bytes&lt;Self&gt;\">ⓘ</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"devela/all/trait.Sized.html\" title=\"trait devela::all::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Transforms this <code>Read</code> instance to an <a href=\"devela/all/trait.Iterator.html\" title=\"trait devela::all::Iterator\"><code>Iterator</code></a> over its bytes. <a href=\"devela/all/trait.IoRead.html#method.bytes\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.chain\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/std/io/mod.rs.html#1200-1202\">Source</a></span><a href=\"#method.chain\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.IoRead.html#method.chain\" class=\"fn\">chain</a>&lt;R&gt;(self, next: R) -&gt; <a class=\"struct\" href=\"devela/all/struct.IoChain.html\" title=\"struct devela::all::IoChain\">Chain</a>&lt;Self, R&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Chain&lt;Self, R&gt;\">ⓘ</a><div class=\"where\">where\n    R: <a class=\"trait\" href=\"devela/all/trait.IoRead.html\" title=\"trait devela::all::IoRead\">Read</a>,\n    Self: <a class=\"trait\" href=\"devela/all/trait.Sized.html\" title=\"trait devela::all::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Creates an adapter which will chain this stream with another. <a href=\"devela/all/trait.IoRead.html#method.chain\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.take\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/std/io/mod.rs.html#1239-1241\">Source</a></span><a href=\"#method.take\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.IoRead.html#method.take\" class=\"fn\">take</a>(self, limit: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u64.html\">u64</a>) -&gt; <a class=\"struct\" href=\"devela/all/struct.IoTake.html\" title=\"struct devela::all::IoTake\">Take</a>&lt;Self&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Take&lt;Self&gt;\">ⓘ</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"devela/all/trait.Sized.html\" title=\"trait devela::all::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Creates an adapter which will read at most <code>limit</code> bytes from it. <a href=\"devela/all/trait.IoRead.html#method.take\">Read more</a></div></details></div></details>","Read","devela::_dep::sdl2::timer::TimerCallback","devela::_dep::toml_edit::ArrayIntoIter","devela::_dep::toml_edit::ArrayIter","devela::_dep::toml_edit::ArrayIterMut","devela::_dep::toml_edit::ArrayOfTablesIntoIter","devela::_dep::toml_edit::ArrayOfTablesIter","devela::_dep::toml_edit::ArrayOfTablesIterMut","devela::_dep::toml_edit::InlineTableIntoIter","devela::_dep::toml_edit::InlineTableIter","devela::_dep::toml_edit::InlineTableIterMut","devela::_dep::toml_edit::IntoIter","devela::_dep::toml_edit::Iter","devela::_dep::toml_edit::IterMut"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Seek-for-Box%3CS%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/std/io/impls.rs.html#231\">Source</a></span><a href=\"#impl-Seek-for-Box%3CS%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;S&gt; <a class=\"trait\" href=\"devela/all/trait.IoSeek.html\" title=\"trait devela::all::IoSeek\">Seek</a> for <a class=\"struct\" href=\"devela/all/struct.Box.html\" title=\"struct devela::all::Box\">Box</a>&lt;S&gt;<div class=\"where\">where\n    S: <a class=\"trait\" href=\"devela/all/trait.IoSeek.html\" title=\"trait devela::all::IoSeek\">Seek</a> + ?<a class=\"trait\" href=\"devela/all/trait.Sized.html\" title=\"trait devela::all::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.seek\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/std/io/impls.rs.html#233\">Source</a><a href=\"#method.seek\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.IoSeek.html#tymethod.seek\" class=\"fn\">seek</a>(&amp;mut self, pos: <a class=\"enum\" href=\"devela/_dep/_std/io/enum.SeekFrom.html\" title=\"enum devela::_dep::_std::io::SeekFrom\">SeekFrom</a>) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u64.html\">u64</a>, <a class=\"struct\" href=\"devela/all/struct.IoError.html\" title=\"struct devela::all::IoError\">Error</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;u64, Error&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Seek to an offset, in bytes, in a stream. <a href=\"devela/all/trait.IoSeek.html#tymethod.seek\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.rewind\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/std/io/impls.rs.html#238\">Source</a><a href=\"#method.rewind\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.IoSeek.html#method.rewind\" class=\"fn\">rewind</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"devela/all/struct.IoError.html\" title=\"struct devela::all::IoError\">Error</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;(), Error&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Rewind to the beginning of a stream. <a href=\"devela/all/trait.IoSeek.html#method.rewind\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.stream_len\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/std/io/impls.rs.html#243\">Source</a><a href=\"#method.stream_len\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.IoSeek.html#method.stream_len\" class=\"fn\">stream_len</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u64.html\">u64</a>, <a class=\"struct\" href=\"devela/all/struct.IoError.html\" title=\"struct devela::all::IoError\">Error</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;u64, Error&gt;\">ⓘ</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>seek_stream_len</code>)</span></div></span><div class='docblock'>Returns the length of this stream (in bytes). <a href=\"devela/all/trait.IoSeek.html#method.stream_len\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.stream_position\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/std/io/impls.rs.html#248\">Source</a><a href=\"#method.stream_position\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.IoSeek.html#method.stream_position\" class=\"fn\">stream_position</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u64.html\">u64</a>, <a class=\"struct\" href=\"devela/all/struct.IoError.html\" title=\"struct devela::all::IoError\">Error</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;u64, Error&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Returns the current seek position from the start of the stream. <a href=\"devela/all/trait.IoSeek.html#method.stream_position\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.seek_relative\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/std/io/impls.rs.html#253\">Source</a><a href=\"#method.seek_relative\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.IoSeek.html#method.seek_relative\" class=\"fn\">seek_relative</a>(&amp;mut self, offset: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i64.html\">i64</a>) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"devela/all/struct.IoError.html\" title=\"struct devela::all::IoError\">Error</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;(), Error&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Seeks relative to the current position. <a href=\"devela/all/trait.IoSeek.html#method.seek_relative\">Read more</a></div></details></div></details>","Seek","devela::_dep::sdl2::timer::TimerCallback","devela::_dep::toml_edit::ArrayIntoIter","devela::_dep::toml_edit::ArrayIter","devela::_dep::toml_edit::ArrayIterMut","devela::_dep::toml_edit::ArrayOfTablesIntoIter","devela::_dep::toml_edit::ArrayOfTablesIter","devela::_dep::toml_edit::ArrayOfTablesIterMut","devela::_dep::toml_edit::InlineTableIntoIter","devela::_dep::toml_edit::InlineTableIter","devela::_dep::toml_edit::InlineTableIterMut","devela::_dep::toml_edit::IntoIter","devela::_dep::toml_edit::Iter","devela::_dep::toml_edit::IterMut"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Serialize-for-Box%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/serde/1.0.219/src/serde/ser/impls.rs.html#535-539\">Source</a><a href=\"#impl-Serialize-for-Box%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"devela/_dep/serde/trait.Serialize.html\" title=\"trait devela::_dep::serde::Serialize\">Serialize</a> for <a class=\"struct\" href=\"devela/all/struct.Box.html\" title=\"struct devela::all::Box\">Box</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"devela/_dep/serde/trait.Serialize.html\" title=\"trait devela::_dep::serde::Serialize\">Serialize</a> + ?<a class=\"trait\" href=\"devela/all/trait.Sized.html\" title=\"trait devela::all::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.serialize\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/serde/1.0.219/src/serde/ser/impls.rs.html#535-539\">Source</a><a href=\"#method.serialize\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/_dep/serde/trait.Serialize.html#tymethod.serialize\" class=\"fn\">serialize</a>&lt;S&gt;(\n    &amp;self,\n    serializer: S,\n) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;&lt;S as <a class=\"trait\" href=\"devela/_dep/serde/trait.Serializer.html\" title=\"trait devela::_dep::serde::Serializer\">Serializer</a>&gt;::<a class=\"associatedtype\" href=\"devela/_dep/serde/trait.Serializer.html#associatedtype.Ok\" title=\"type devela::_dep::serde::Serializer::Ok\">Ok</a>, &lt;S as <a class=\"trait\" href=\"devela/_dep/serde/trait.Serializer.html\" title=\"trait devela::_dep::serde::Serializer\">Serializer</a>&gt;::<a class=\"associatedtype\" href=\"devela/_dep/serde/trait.Serializer.html#associatedtype.Error\" title=\"type devela::_dep::serde::Serializer::Error\">Error</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;&lt;S as Serializer&gt;::Ok, &lt;S as Serializer&gt;::Error&gt;\">ⓘ</a><div class=\"where\">where\n    S: <a class=\"trait\" href=\"devela/_dep/serde/trait.Serializer.html\" title=\"trait devela::_dep::serde::Serializer\">Serializer</a>,</div></h4></section></summary><div class='docblock'>Serialize this value into the given Serde serializer. <a href=\"devela/_dep/serde/trait.Serialize.html#tymethod.serialize\">Read more</a></div></details></div></details>","Serialize","devela::_dep::sdl2::timer::TimerCallback","devela::_dep::toml_edit::ArrayIntoIter","devela::_dep::toml_edit::ArrayIter","devela::_dep::toml_edit::ArrayIterMut","devela::_dep::toml_edit::ArrayOfTablesIntoIter","devela::_dep::toml_edit::ArrayOfTablesIter","devela::_dep::toml_edit::ArrayOfTablesIterMut","devela::_dep::toml_edit::InlineTableIntoIter","devela::_dep::toml_edit::InlineTableIter","devela::_dep::toml_edit::InlineTableIterMut","devela::_dep::toml_edit::IntoIter","devela::_dep::toml_edit::Iter","devela::_dep::toml_edit::IterMut"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Source-for-Box%3CT%3E\" class=\"impl\"><a href=\"#impl-Source-for-Box%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; Source for <a class=\"struct\" href=\"devela/all/struct.Box.html\" title=\"struct devela::all::Box\">Box</a>&lt;T&gt;<div class=\"where\">where\n    T: Source + ?<a class=\"trait\" href=\"devela/all/trait.Sized.html\" title=\"trait devela::all::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.register\" class=\"method trait-impl\"><a href=\"#method.register\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">register</a>(\n    &amp;mut self,\n    registry: &amp;Registry,\n    token: Token,\n    interests: Interest,\n) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"devela/all/struct.IoError.html\" title=\"struct devela::all::IoError\">Error</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;(), Error&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Register <code>self</code> with the given <code>Registry</code> instance. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.reregister\" class=\"method trait-impl\"><a href=\"#method.reregister\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">reregister</a>(\n    &amp;mut self,\n    registry: &amp;Registry,\n    token: Token,\n    interests: Interest,\n) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"devela/all/struct.IoError.html\" title=\"struct devela::all::IoError\">Error</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;(), Error&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Re-register <code>self</code> with the given <code>Registry</code> instance. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.deregister\" class=\"method trait-impl\"><a href=\"#method.deregister\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">deregister</a>(&amp;mut self, registry: &amp;Registry) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"devela/all/struct.IoError.html\" title=\"struct devela::all::IoError\">Error</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;(), Error&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Deregister <code>self</code> from the given <code>Registry</code> instance. <a>Read more</a></div></details></div></details>","Source","devela::_dep::sdl2::timer::TimerCallback","devela::_dep::toml_edit::ArrayIntoIter","devela::_dep::toml_edit::ArrayIter","devela::_dep::toml_edit::ArrayIterMut","devela::_dep::toml_edit::ArrayOfTablesIntoIter","devela::_dep::toml_edit::ArrayOfTablesIter","devela::_dep::toml_edit::ArrayOfTablesIterMut","devela::_dep::toml_edit::InlineTableIntoIter","devela::_dep::toml_edit::InlineTableIter","devela::_dep::toml_edit::InlineTableIterMut","devela::_dep::toml_edit::IntoIter","devela::_dep::toml_edit::Iter","devela::_dep::toml_edit::IterMut"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Transport-for-Box%3CT%3E\" class=\"impl\"><a href=\"#impl-Transport-for-Box%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"devela/_dep/ureq/unversioned/transport/trait.Transport.html\" title=\"trait devela::_dep::ureq::unversioned::transport::Transport\">Transport</a> for <a class=\"struct\" href=\"devela/all/struct.Box.html\" title=\"struct devela::all::Box\">Box</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"devela/_dep/ureq/unversioned/transport/trait.Transport.html\" title=\"trait devela::_dep::ureq::unversioned::transport::Transport\">Transport</a> + ?<a class=\"trait\" href=\"devela/all/trait.Sized.html\" title=\"trait devela::all::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.buffers\" class=\"method trait-impl\"><a href=\"#method.buffers\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/_dep/ureq/unversioned/transport/trait.Transport.html#tymethod.buffers\" class=\"fn\">buffers</a>(&amp;mut self) -&gt; &amp;mut dyn <a class=\"trait\" href=\"devela/_dep/ureq/unversioned/transport/trait.Buffers.html\" title=\"trait devela::_dep::ureq::unversioned::transport::Buffers\">Buffers</a></h4></section></summary><div class='docblock'>Provide buffers for this transport.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.transmit_output\" class=\"method trait-impl\"><a href=\"#method.transmit_output\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/_dep/ureq/unversioned/transport/trait.Transport.html#tymethod.transmit_output\" class=\"fn\">transmit_output</a>(\n    &amp;mut self,\n    amount: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>,\n    timeout: <a class=\"struct\" href=\"devela/_dep/ureq/unversioned/transport/struct.NextTimeout.html\" title=\"struct devela::_dep::ureq::unversioned::transport::NextTimeout\">NextTimeout</a>,\n) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"enum\" href=\"devela/_dep/ureq/enum.Error.html\" title=\"enum devela::_dep::ureq::Error\">Error</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;(), Error&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Transmit <code>amount</code> of the output buffer. ureq will always transmit the entirety\nof the data written to the output buffer. It is expected that the transport will\ntransmit the entire requested <code>amount</code>. <a href=\"devela/_dep/ureq/unversioned/transport/trait.Transport.html#tymethod.transmit_output\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.await_input\" class=\"method trait-impl\"><a href=\"#method.await_input\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/_dep/ureq/unversioned/transport/trait.Transport.html#tymethod.await_input\" class=\"fn\">await_input</a>(&amp;mut self, timeout: <a class=\"struct\" href=\"devela/_dep/ureq/unversioned/transport/struct.NextTimeout.html\" title=\"struct devela::_dep::ureq::unversioned::transport::NextTimeout\">NextTimeout</a>) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a>, <a class=\"enum\" href=\"devela/_dep/ureq/enum.Error.html\" title=\"enum devela::_dep::ureq::Error\">Error</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;bool, Error&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Wait for input and fill the buffer. <a href=\"devela/_dep/ureq/unversioned/transport/trait.Transport.html#tymethod.await_input\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_open\" class=\"method trait-impl\"><a href=\"#method.is_open\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/_dep/ureq/unversioned/transport/trait.Transport.html#tymethod.is_open\" class=\"fn\">is_open</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tell whether this transport is still functional. This must provide an accurate answer\nfor connection pooling to work.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_tls\" class=\"method trait-impl\"><a href=\"#method.is_tls\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/_dep/ureq/unversioned/transport/trait.Transport.html#method.is_tls\" class=\"fn\">is_tls</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Whether the transport is TLS. <a href=\"devela/_dep/ureq/unversioned/transport/trait.Transport.html#method.is_tls\">Read more</a></div></details></div></details>","Transport","devela::_dep::sdl2::timer::TimerCallback","devela::_dep::toml_edit::ArrayIntoIter","devela::_dep::toml_edit::ArrayIter","devela::_dep::toml_edit::ArrayIterMut","devela::_dep::toml_edit::ArrayOfTablesIntoIter","devela::_dep::toml_edit::ArrayOfTablesIter","devela::_dep::toml_edit::ArrayOfTablesIterMut","devela::_dep::toml_edit::InlineTableIntoIter","devela::_dep::toml_edit::InlineTableIter","devela::_dep::toml_edit::InlineTableIterMut","devela::_dep::toml_edit::IntoIter","devela::_dep::toml_edit::Iter","devela::_dep::toml_edit::IterMut"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Write-for-Box%3CW%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/std/io/impls.rs.html#194\">Source</a></span><a href=\"#impl-Write-for-Box%3CW%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;W&gt; <a class=\"trait\" href=\"devela/all/trait.IoWrite.html\" title=\"trait devela::all::IoWrite\">Write</a> for <a class=\"struct\" href=\"devela/all/struct.Box.html\" title=\"struct devela::all::Box\">Box</a>&lt;W&gt;<div class=\"where\">where\n    W: <a class=\"trait\" href=\"devela/all/trait.IoWrite.html\" title=\"trait devela::all::IoWrite\">Write</a> + ?<a class=\"trait\" href=\"devela/all/trait.Sized.html\" title=\"trait devela::all::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.write\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/std/io/impls.rs.html#196\">Source</a><a href=\"#method.write\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.IoWrite.html#tymethod.write\" class=\"fn\">write</a>(&amp;mut self, buf: &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>]) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, <a class=\"struct\" href=\"devela/all/struct.IoError.html\" title=\"struct devela::all::IoError\">Error</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;usize, Error&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Writes a buffer into this writer, returning how many bytes were written. <a href=\"devela/all/trait.IoWrite.html#tymethod.write\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.write_vectored\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/std/io/impls.rs.html#201\">Source</a><a href=\"#method.write_vectored\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.IoWrite.html#method.write_vectored\" class=\"fn\">write_vectored</a>(&amp;mut self, bufs: &amp;[<a class=\"struct\" href=\"devela/all/struct.IoSlice.html\" title=\"struct devela::all::IoSlice\">IoSlice</a>&lt;'_&gt;]) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, <a class=\"struct\" href=\"devela/all/struct.IoError.html\" title=\"struct devela::all::IoError\">Error</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;usize, Error&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Like <a href=\"devela/all/trait.IoWrite.html#tymethod.write\" title=\"method devela::all::IoWrite::write\"><code>write</code></a>, except that it writes from a slice of buffers. <a href=\"devela/all/trait.IoWrite.html#method.write_vectored\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_write_vectored\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/std/io/impls.rs.html#206\">Source</a><a href=\"#method.is_write_vectored\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.IoWrite.html#method.is_write_vectored\" class=\"fn\">is_write_vectored</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>can_vector</code>)</span></div></span><div class='docblock'>Determines if this <code>Write</code>r has an efficient <a href=\"devela/all/trait.IoWrite.html#method.write_vectored\" title=\"method devela::all::IoWrite::write_vectored\"><code>write_vectored</code></a>\nimplementation. <a href=\"devela/all/trait.IoWrite.html#method.is_write_vectored\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.flush\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/std/io/impls.rs.html#211\">Source</a><a href=\"#method.flush\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.IoWrite.html#tymethod.flush\" class=\"fn\">flush</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"devela/all/struct.IoError.html\" title=\"struct devela::all::IoError\">Error</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;(), Error&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Flushes this output stream, ensuring that all intermediately buffered\ncontents reach their destination. <a href=\"devela/all/trait.IoWrite.html#tymethod.flush\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.write_all\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/std/io/impls.rs.html#216\">Source</a><a href=\"#method.write_all\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.IoWrite.html#method.write_all\" class=\"fn\">write_all</a>(&amp;mut self, buf: &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>]) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"devela/all/struct.IoError.html\" title=\"struct devela::all::IoError\">Error</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;(), Error&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Attempts to write an entire buffer into this writer. <a href=\"devela/all/trait.IoWrite.html#method.write_all\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.write_all_vectored\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/std/io/impls.rs.html#221\">Source</a><a href=\"#method.write_all_vectored\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.IoWrite.html#method.write_all_vectored\" class=\"fn\">write_all_vectored</a>(&amp;mut self, bufs: &amp;mut [<a class=\"struct\" href=\"devela/all/struct.IoSlice.html\" title=\"struct devela::all::IoSlice\">IoSlice</a>&lt;'_&gt;]) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"devela/all/struct.IoError.html\" title=\"struct devela::all::IoError\">Error</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;(), Error&gt;\">ⓘ</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>write_all_vectored</code>)</span></div></span><div class='docblock'>Attempts to write multiple buffers into this writer. <a href=\"devela/all/trait.IoWrite.html#method.write_all_vectored\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.write_fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/std/io/impls.rs.html#226\">Source</a><a href=\"#method.write_fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.IoWrite.html#method.write_fmt\" class=\"fn\">write_fmt</a>(&amp;mut self, fmt: <a class=\"struct\" href=\"devela/all/struct.FmtArguments.html\" title=\"struct devela::all::FmtArguments\">Arguments</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"devela/all/struct.IoError.html\" title=\"struct devela::all::IoError\">Error</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;(), Error&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Writes a formatted string into this writer, returning any error\nencountered. <a href=\"devela/all/trait.IoWrite.html#method.write_fmt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.by_ref\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/std/io/mod.rs.html#1980-1982\">Source</a></span><a href=\"#method.by_ref\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.IoWrite.html#method.by_ref\" class=\"fn\">by_ref</a>(&amp;mut self) -&gt; &amp;mut Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"devela/all/trait.Sized.html\" title=\"trait devela::all::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Creates a “by reference” adapter for this instance of <code>Write</code>. <a href=\"devela/all/trait.IoWrite.html#method.by_ref\">Read more</a></div></details></div></details>","Write","devela::_dep::sdl2::timer::TimerCallback","devela::_dep::toml_edit::ArrayIntoIter","devela::_dep::toml_edit::ArrayIter","devela::_dep::toml_edit::ArrayIterMut","devela::_dep::toml_edit::ArrayOfTablesIntoIter","devela::_dep::toml_edit::ArrayOfTablesIter","devela::_dep::toml_edit::ArrayOfTablesIterMut","devela::_dep::toml_edit::InlineTableIntoIter","devela::_dep::toml_edit::InlineTableIter","devela::_dep::toml_edit::InlineTableIterMut","devela::_dep::toml_edit::IntoIter","devela::_dep::toml_edit::Iter","devela::_dep::toml_edit::IterMut"],["<section id=\"impl-CoerceUnsized%3CBox%3CU,+A%3E%3E-for-Box%3CT,+A%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/boxed.rs.html#2019\">Source</a><a href=\"#impl-CoerceUnsized%3CBox%3CU,+A%3E%3E-for-Box%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U, A&gt; <a class=\"trait\" href=\"devela/_core/ops/trait.CoerceUnsized.html\" title=\"trait devela::_core::ops::CoerceUnsized\">CoerceUnsized</a>&lt;<a class=\"struct\" href=\"devela/all/struct.Box.html\" title=\"struct devela::all::Box\">Box</a>&lt;U, A&gt;&gt; for <a class=\"struct\" href=\"devela/all/struct.Box.html\" title=\"struct devela::all::Box\">Box</a>&lt;T, A&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"devela/_core/marker/trait.Unsize.html\" title=\"trait devela::_core::marker::Unsize\">Unsize</a>&lt;U&gt; + ?<a class=\"trait\" href=\"devela/all/trait.Sized.html\" title=\"trait devela::all::Sized\">Sized</a>,\n    A: <a class=\"trait\" href=\"devela/_core/alloc/trait.Allocator.html\" title=\"trait devela::_core::alloc::Allocator\">Allocator</a>,\n    U: ?<a class=\"trait\" href=\"devela/all/trait.Sized.html\" title=\"trait devela::all::Sized\">Sized</a>,</div></h3></section>","CoerceUnsized<Box<U, A>>","devela::_dep::sdl2::timer::TimerCallback","devela::_dep::toml_edit::ArrayIntoIter","devela::_dep::toml_edit::ArrayIter","devela::_dep::toml_edit::ArrayIterMut","devela::_dep::toml_edit::ArrayOfTablesIntoIter","devela::_dep::toml_edit::ArrayOfTablesIter","devela::_dep::toml_edit::ArrayOfTablesIterMut","devela::_dep::toml_edit::InlineTableIntoIter","devela::_dep::toml_edit::InlineTableIter","devela::_dep::toml_edit::InlineTableIterMut","devela::_dep::toml_edit::IntoIter","devela::_dep::toml_edit::Iter","devela::_dep::toml_edit::IterMut"],["<section id=\"impl-DerefPure-for-Box%3CT,+A%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/boxed.rs.html#1961\">Source</a><a href=\"#impl-DerefPure-for-Box%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"devela/_core/ops/trait.DerefPure.html\" title=\"trait devela::_core::ops::DerefPure\">DerefPure</a> for <a class=\"struct\" href=\"devela/all/struct.Box.html\" title=\"struct devela::all::Box\">Box</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"devela/_core/alloc/trait.Allocator.html\" title=\"trait devela::_core::alloc::Allocator\">Allocator</a>,\n    T: ?<a class=\"trait\" href=\"devela/all/trait.Sized.html\" title=\"trait devela::all::Sized\">Sized</a>,</div></h3></section>","DerefPure","devela::_dep::sdl2::timer::TimerCallback","devela::_dep::toml_edit::ArrayIntoIter","devela::_dep::toml_edit::ArrayIter","devela::_dep::toml_edit::ArrayIterMut","devela::_dep::toml_edit::ArrayOfTablesIntoIter","devela::_dep::toml_edit::ArrayOfTablesIter","devela::_dep::toml_edit::ArrayOfTablesIterMut","devela::_dep::toml_edit::InlineTableIntoIter","devela::_dep::toml_edit::InlineTableIter","devela::_dep::toml_edit::InlineTableIterMut","devela::_dep::toml_edit::IntoIter","devela::_dep::toml_edit::Iter","devela::_dep::toml_edit::IterMut"],["<section id=\"impl-DispatchFromDyn%3CBox%3CU%3E%3E-for-Box%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/boxed.rs.html#2028\">Source</a><a href=\"#impl-DispatchFromDyn%3CBox%3CU%3E%3E-for-Box%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"devela/_core/ops/trait.DispatchFromDyn.html\" title=\"trait devela::_core::ops::DispatchFromDyn\">DispatchFromDyn</a>&lt;<a class=\"struct\" href=\"devela/all/struct.Box.html\" title=\"struct devela::all::Box\">Box</a>&lt;U&gt;&gt; for <a class=\"struct\" href=\"devela/all/struct.Box.html\" title=\"struct devela::all::Box\">Box</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"devela/_core/marker/trait.Unsize.html\" title=\"trait devela::_core::marker::Unsize\">Unsize</a>&lt;U&gt; + ?<a class=\"trait\" href=\"devela/all/trait.Sized.html\" title=\"trait devela::all::Sized\">Sized</a>,\n    U: ?<a class=\"trait\" href=\"devela/all/trait.Sized.html\" title=\"trait devela::all::Sized\">Sized</a>,</div></h3></section>","DispatchFromDyn<Box<U>>","devela::_dep::sdl2::timer::TimerCallback","devela::_dep::toml_edit::ArrayIntoIter","devela::_dep::toml_edit::ArrayIter","devela::_dep::toml_edit::ArrayIterMut","devela::_dep::toml_edit::ArrayOfTablesIntoIter","devela::_dep::toml_edit::ArrayOfTablesIter","devela::_dep::toml_edit::ArrayOfTablesIterMut","devela::_dep::toml_edit::InlineTableIntoIter","devela::_dep::toml_edit::InlineTableIter","devela::_dep::toml_edit::InlineTableIterMut","devela::_dep::toml_edit::IntoIter","devela::_dep::toml_edit::Iter","devela::_dep::toml_edit::IterMut"],["<section id=\"impl-Eq-for-Box%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/boxed.rs.html#1859\">Source</a></span><a href=\"#impl-Eq-for-Box%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"devela/all/trait.Eq.html\" title=\"trait devela::all::Eq\">Eq</a> for <a class=\"struct\" href=\"devela/all/struct.Box.html\" title=\"struct devela::all::Box\">Box</a>&lt;T, A&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"devela/all/trait.Eq.html\" title=\"trait devela::all::Eq\">Eq</a> + ?<a class=\"trait\" href=\"devela/all/trait.Sized.html\" title=\"trait devela::all::Sized\">Sized</a>,\n    A: <a class=\"trait\" href=\"devela/_core/alloc/trait.Allocator.html\" title=\"trait devela::_core::alloc::Allocator\">Allocator</a>,</div></h3></section>","Eq","devela::_dep::sdl2::timer::TimerCallback","devela::_dep::toml_edit::ArrayIntoIter","devela::_dep::toml_edit::ArrayIter","devela::_dep::toml_edit::ArrayIterMut","devela::_dep::toml_edit::ArrayOfTablesIntoIter","devela::_dep::toml_edit::ArrayOfTablesIter","devela::_dep::toml_edit::ArrayOfTablesIterMut","devela::_dep::toml_edit::InlineTableIntoIter","devela::_dep::toml_edit::InlineTableIter","devela::_dep::toml_edit::InlineTableIterMut","devela::_dep::toml_edit::IntoIter","devela::_dep::toml_edit::Iter","devela::_dep::toml_edit::IterMut"],["<section id=\"impl-FusedIterator-for-Box%3CI,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.26.0\">1.26.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/boxed/iter.rs.html#80\">Source</a></span><a href=\"#impl-FusedIterator-for-Box%3CI,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;I, A&gt; <a class=\"trait\" href=\"devela/all/trait.IteratorFused.html\" title=\"trait devela::all::IteratorFused\">FusedIterator</a> for <a class=\"struct\" href=\"devela/all/struct.Box.html\" title=\"struct devela::all::Box\">Box</a>&lt;I, A&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"devela/all/trait.IteratorFused.html\" title=\"trait devela::all::IteratorFused\">FusedIterator</a> + ?<a class=\"trait\" href=\"devela/all/trait.Sized.html\" title=\"trait devela::all::Sized\">Sized</a>,\n    A: <a class=\"trait\" href=\"devela/_core/alloc/trait.Allocator.html\" title=\"trait devela::_core::alloc::Allocator\">Allocator</a>,</div></h3></section>","FusedIterator","devela::_dep::sdl2::timer::TimerCallback","devela::_dep::toml_edit::ArrayIntoIter","devela::_dep::toml_edit::ArrayIter","devela::_dep::toml_edit::ArrayIterMut","devela::_dep::toml_edit::ArrayOfTablesIntoIter","devela::_dep::toml_edit::ArrayOfTablesIter","devela::_dep::toml_edit::ArrayOfTablesIterMut","devela::_dep::toml_edit::InlineTableIntoIter","devela::_dep::toml_edit::InlineTableIter","devela::_dep::toml_edit::InlineTableIterMut","devela::_dep::toml_edit::IntoIter","devela::_dep::toml_edit::Iter","devela::_dep::toml_edit::IterMut"],["<section id=\"impl-PinCoerceUnsized-for-Box%3CT,+A%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/boxed.rs.html#2022\">Source</a><a href=\"#impl-PinCoerceUnsized-for-Box%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"devela/_core/pin/trait.PinCoerceUnsized.html\" title=\"trait devela::_core::pin::PinCoerceUnsized\">PinCoerceUnsized</a> for <a class=\"struct\" href=\"devela/all/struct.Box.html\" title=\"struct devela::all::Box\">Box</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"devela/_core/alloc/trait.Allocator.html\" title=\"trait devela::_core::alloc::Allocator\">Allocator</a>,\n    T: ?<a class=\"trait\" href=\"devela/all/trait.Sized.html\" title=\"trait devela::all::Sized\">Sized</a>,</div></h3></section>","PinCoerceUnsized","devela::_dep::sdl2::timer::TimerCallback","devela::_dep::toml_edit::ArrayIntoIter","devela::_dep::toml_edit::ArrayIter","devela::_dep::toml_edit::ArrayIterMut","devela::_dep::toml_edit::ArrayOfTablesIntoIter","devela::_dep::toml_edit::ArrayOfTablesIter","devela::_dep::toml_edit::ArrayOfTablesIterMut","devela::_dep::toml_edit::InlineTableIntoIter","devela::_dep::toml_edit::InlineTableIter","devela::_dep::toml_edit::InlineTableIterMut","devela::_dep::toml_edit::IntoIter","devela::_dep::toml_edit::Iter","devela::_dep::toml_edit::IterMut"],["<section id=\"impl-Unpin-for-Box%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.33.0\">1.33.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/boxed.rs.html#2081\">Source</a></span><a href=\"#impl-Unpin-for-Box%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"devela/all/trait.Unpin.html\" title=\"trait devela::all::Unpin\">Unpin</a> for <a class=\"struct\" href=\"devela/all/struct.Box.html\" title=\"struct devela::all::Box\">Box</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"devela/_core/alloc/trait.Allocator.html\" title=\"trait devela::_core::alloc::Allocator\">Allocator</a>,\n    T: ?<a class=\"trait\" href=\"devela/all/trait.Sized.html\" title=\"trait devela::all::Sized\">Sized</a>,</div></h3></section>","Unpin","devela::_dep::sdl2::timer::TimerCallback","devela::_dep::toml_edit::ArrayIntoIter","devela::_dep::toml_edit::ArrayIter","devela::_dep::toml_edit::ArrayIterMut","devela::_dep::toml_edit::ArrayOfTablesIntoIter","devela::_dep::toml_edit::ArrayOfTablesIter","devela::_dep::toml_edit::ArrayOfTablesIterMut","devela::_dep::toml_edit::InlineTableIntoIter","devela::_dep::toml_edit::InlineTableIter","devela::_dep::toml_edit::InlineTableIterMut","devela::_dep::toml_edit::IntoIter","devela::_dep::toml_edit::Iter","devela::_dep::toml_edit::IterMut"],["<section id=\"impl-ZeroableInOption-for-Box%3CT%3E\" class=\"impl\"><a href=\"#impl-ZeroableInOption-for-Box%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"devela/_dep/bytemuck/trait.ZeroableInOption.html\" title=\"trait devela::_dep::bytemuck::ZeroableInOption\">ZeroableInOption</a> for <a class=\"struct\" href=\"devela/all/struct.Box.html\" title=\"struct devela::all::Box\">Box</a>&lt;T&gt;<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"devela/all/trait.Sized.html\" title=\"trait devela::all::Sized\">Sized</a>,</div></h3></section>","ZeroableInOption","devela::_dep::sdl2::timer::TimerCallback","devela::_dep::toml_edit::ArrayIntoIter","devela::_dep::toml_edit::ArrayIter","devela::_dep::toml_edit::ArrayIterMut","devela::_dep::toml_edit::ArrayOfTablesIntoIter","devela::_dep::toml_edit::ArrayOfTablesIter","devela::_dep::toml_edit::ArrayOfTablesIterMut","devela::_dep::toml_edit::InlineTableIntoIter","devela::_dep::toml_edit::InlineTableIter","devela::_dep::toml_edit::InlineTableIterMut","devela::_dep::toml_edit::IntoIter","devela::_dep::toml_edit::Iter","devela::_dep::toml_edit::IterMut"]]]]);
    if (window.register_type_impls) {
        window.register_type_impls(type_impls);
    } else {
        window.pending_type_impls = type_impls;
    }
})()
//{"start":55,"fragment_lengths":[520658]}