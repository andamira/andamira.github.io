(function() {
    var type_impls = Object.fromEntries([["devela",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Add%3C%26BigInt%3E-for-i32\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-bigint/0.4/src/num_bigint/bigint/addition.rs.html#165\">Source</a><a href=\"#impl-Add%3C%26BigInt%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"devela/all/trait.Add.html\" title=\"trait devela::all::Add\">Add</a>&lt;&amp;<a class=\"struct\" href=\"https://docs.rs/num-bigint/0.4/num_bigint/bigint/struct.BigInt.html\" title=\"struct num_bigint::bigint::BigInt\">BigInt</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-bigint/0.4/src/num_bigint/bigint/addition.rs.html#165\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"devela/all/trait.Add.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"https://docs.rs/num-bigint/0.4/num_bigint/bigint/struct.BigInt.html\" title=\"struct num_bigint::bigint::BigInt\">BigInt</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>+</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.add\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-bigint/0.4/src/num_bigint/bigint/addition.rs.html#165\">Source</a><a href=\"#method.add\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Add.html#tymethod.add\" class=\"fn\">add</a>(self, other: &amp;<a class=\"struct\" href=\"https://docs.rs/num-bigint/0.4/num_bigint/bigint/struct.BigInt.html\" title=\"struct num_bigint::bigint::BigInt\">BigInt</a>) -&gt; <a class=\"struct\" href=\"https://docs.rs/num-bigint/0.4/num_bigint/bigint/struct.BigInt.html\" title=\"struct num_bigint::bigint::BigInt\">BigInt</a></h4></section></summary><div class='docblock'>Performs the <code>+</code> operation. <a href=\"devela/all/trait.Add.html#tymethod.add\">Read more</a></div></details></div></details>","Add<&BigInt>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Add%3C%26IVec2%3E-for-i32\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/glam/0.30.5/src/glam/i32/ivec2.rs.html#1196\">Source</a><a href=\"#impl-Add%3C%26IVec2%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"devela/all/trait.Add.html\" title=\"trait devela::all::Add\">Add</a>&lt;&amp;<a class=\"struct\" href=\"https://docs.rs/glam/0.30.5/glam/i32/ivec2/struct.IVec2.html\" title=\"struct glam::i32::ivec2::IVec2\">IVec2</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/glam/0.30.5/src/glam/i32/ivec2.rs.html#1197\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"devela/all/trait.Add.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"https://docs.rs/glam/0.30.5/glam/i32/ivec2/struct.IVec2.html\" title=\"struct glam::i32::ivec2::IVec2\">IVec2</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>+</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.add\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/glam/0.30.5/src/glam/i32/ivec2.rs.html#1199\">Source</a><a href=\"#method.add\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Add.html#tymethod.add\" class=\"fn\">add</a>(self, rhs: &amp;<a class=\"struct\" href=\"https://docs.rs/glam/0.30.5/glam/i32/ivec2/struct.IVec2.html\" title=\"struct glam::i32::ivec2::IVec2\">IVec2</a>) -&gt; <a class=\"struct\" href=\"https://docs.rs/glam/0.30.5/glam/i32/ivec2/struct.IVec2.html\" title=\"struct glam::i32::ivec2::IVec2\">IVec2</a></h4></section></summary><div class='docblock'>Performs the <code>+</code> operation. <a href=\"devela/all/trait.Add.html#tymethod.add\">Read more</a></div></details></div></details>","Add<&IVec2>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Add%3C%26IVec3%3E-for-i32\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/glam/0.30.5/src/glam/i32/ivec3.rs.html#1301\">Source</a><a href=\"#impl-Add%3C%26IVec3%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"devela/all/trait.Add.html\" title=\"trait devela::all::Add\">Add</a>&lt;&amp;<a class=\"struct\" href=\"https://docs.rs/glam/0.30.5/glam/i32/ivec3/struct.IVec3.html\" title=\"struct glam::i32::ivec3::IVec3\">IVec3</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/glam/0.30.5/src/glam/i32/ivec3.rs.html#1302\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"devela/all/trait.Add.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"https://docs.rs/glam/0.30.5/glam/i32/ivec3/struct.IVec3.html\" title=\"struct glam::i32::ivec3::IVec3\">IVec3</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>+</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.add\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/glam/0.30.5/src/glam/i32/ivec3.rs.html#1304\">Source</a><a href=\"#method.add\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Add.html#tymethod.add\" class=\"fn\">add</a>(self, rhs: &amp;<a class=\"struct\" href=\"https://docs.rs/glam/0.30.5/glam/i32/ivec3/struct.IVec3.html\" title=\"struct glam::i32::ivec3::IVec3\">IVec3</a>) -&gt; <a class=\"struct\" href=\"https://docs.rs/glam/0.30.5/glam/i32/ivec3/struct.IVec3.html\" title=\"struct glam::i32::ivec3::IVec3\">IVec3</a></h4></section></summary><div class='docblock'>Performs the <code>+</code> operation. <a href=\"devela/all/trait.Add.html#tymethod.add\">Read more</a></div></details></div></details>","Add<&IVec3>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Add%3C%26IVec4%3E-for-i32\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/glam/0.30.5/src/glam/i32/ivec4.rs.html#1396\">Source</a><a href=\"#impl-Add%3C%26IVec4%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"devela/all/trait.Add.html\" title=\"trait devela::all::Add\">Add</a>&lt;&amp;<a class=\"struct\" href=\"https://docs.rs/glam/0.30.5/glam/i32/ivec4/struct.IVec4.html\" title=\"struct glam::i32::ivec4::IVec4\">IVec4</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/glam/0.30.5/src/glam/i32/ivec4.rs.html#1397\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"devela/all/trait.Add.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"https://docs.rs/glam/0.30.5/glam/i32/ivec4/struct.IVec4.html\" title=\"struct glam::i32::ivec4::IVec4\">IVec4</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>+</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.add\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/glam/0.30.5/src/glam/i32/ivec4.rs.html#1399\">Source</a><a href=\"#method.add\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Add.html#tymethod.add\" class=\"fn\">add</a>(self, rhs: &amp;<a class=\"struct\" href=\"https://docs.rs/glam/0.30.5/glam/i32/ivec4/struct.IVec4.html\" title=\"struct glam::i32::ivec4::IVec4\">IVec4</a>) -&gt; <a class=\"struct\" href=\"https://docs.rs/glam/0.30.5/glam/i32/ivec4/struct.IVec4.html\" title=\"struct glam::i32::ivec4::IVec4\">IVec4</a></h4></section></summary><div class='docblock'>Performs the <code>+</code> operation. <a href=\"devela/all/trait.Add.html#tymethod.add\">Read more</a></div></details></div></details>","Add<&IVec4>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Add%3C%26i32%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/143802\" title=\"Tracking issue for const_ops\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/arith.rs.html#115\">Source</a></span><a href=\"#impl-Add%3C%26i32%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"devela/all/trait.Add.html\" title=\"trait devela::all::Add\">Add</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/arith.rs.html#115\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"devela/all/trait.Add.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> as <a class=\"trait\" href=\"devela/all/trait.Add.html\" title=\"trait devela::all::Add\">Add</a>&gt;::<a class=\"associatedtype\" href=\"devela/all/trait.Add.html#associatedtype.Output\" title=\"type devela::all::Add::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>+</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.add\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/arith.rs.html#115\">Source</a><a href=\"#method.add\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Add.html#tymethod.add\" class=\"fn\">add</a>(self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>) -&gt; &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> as <a class=\"trait\" href=\"devela/all/trait.Add.html\" title=\"trait devela::all::Add\">Add</a>&gt;::<a class=\"associatedtype\" href=\"devela/all/trait.Add.html#associatedtype.Output\" title=\"type devela::all::Add::Output\">Output</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&lt;i32 as Add&gt;::Output\">ⓘ</a></h4></section></summary><div class='docblock'>Performs the <code>+</code> operation. <a href=\"devela/all/trait.Add.html#tymethod.add\">Read more</a></div></details></div></details>","Add<&i32>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Add%3CBigInt%3E-for-i32\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-bigint/0.4/src/num_bigint/bigint/addition.rs.html#165\">Source</a><a href=\"#impl-Add%3CBigInt%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"devela/all/trait.Add.html\" title=\"trait devela::all::Add\">Add</a>&lt;<a class=\"struct\" href=\"https://docs.rs/num-bigint/0.4/num_bigint/bigint/struct.BigInt.html\" title=\"struct num_bigint::bigint::BigInt\">BigInt</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-bigint/0.4/src/num_bigint/bigint/addition.rs.html#165\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"devela/all/trait.Add.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"https://docs.rs/num-bigint/0.4/num_bigint/bigint/struct.BigInt.html\" title=\"struct num_bigint::bigint::BigInt\">BigInt</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>+</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.add\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-bigint/0.4/src/num_bigint/bigint/addition.rs.html#165\">Source</a><a href=\"#method.add\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Add.html#tymethod.add\" class=\"fn\">add</a>(self, other: <a class=\"struct\" href=\"https://docs.rs/num-bigint/0.4/num_bigint/bigint/struct.BigInt.html\" title=\"struct num_bigint::bigint::BigInt\">BigInt</a>) -&gt; <a class=\"struct\" href=\"https://docs.rs/num-bigint/0.4/num_bigint/bigint/struct.BigInt.html\" title=\"struct num_bigint::bigint::BigInt\">BigInt</a></h4></section></summary><div class='docblock'>Performs the <code>+</code> operation. <a href=\"devela/all/trait.Add.html#tymethod.add\">Read more</a></div></details></div></details>","Add<BigInt>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Add%3CIVec2%3E-for-i32\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/glam/0.30.5/src/glam/i32/ivec2.rs.html#1185\">Source</a><a href=\"#impl-Add%3CIVec2%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"devela/all/trait.Add.html\" title=\"trait devela::all::Add\">Add</a>&lt;<a class=\"struct\" href=\"https://docs.rs/glam/0.30.5/glam/i32/ivec2/struct.IVec2.html\" title=\"struct glam::i32::ivec2::IVec2\">IVec2</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/glam/0.30.5/src/glam/i32/ivec2.rs.html#1186\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"devela/all/trait.Add.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"https://docs.rs/glam/0.30.5/glam/i32/ivec2/struct.IVec2.html\" title=\"struct glam::i32::ivec2::IVec2\">IVec2</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>+</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.add\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/glam/0.30.5/src/glam/i32/ivec2.rs.html#1188\">Source</a><a href=\"#method.add\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Add.html#tymethod.add\" class=\"fn\">add</a>(self, rhs: <a class=\"struct\" href=\"https://docs.rs/glam/0.30.5/glam/i32/ivec2/struct.IVec2.html\" title=\"struct glam::i32::ivec2::IVec2\">IVec2</a>) -&gt; <a class=\"struct\" href=\"https://docs.rs/glam/0.30.5/glam/i32/ivec2/struct.IVec2.html\" title=\"struct glam::i32::ivec2::IVec2\">IVec2</a></h4></section></summary><div class='docblock'>Performs the <code>+</code> operation. <a href=\"devela/all/trait.Add.html#tymethod.add\">Read more</a></div></details></div></details>","Add<IVec2>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Add%3CIVec3%3E-for-i32\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/glam/0.30.5/src/glam/i32/ivec3.rs.html#1289\">Source</a><a href=\"#impl-Add%3CIVec3%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"devela/all/trait.Add.html\" title=\"trait devela::all::Add\">Add</a>&lt;<a class=\"struct\" href=\"https://docs.rs/glam/0.30.5/glam/i32/ivec3/struct.IVec3.html\" title=\"struct glam::i32::ivec3::IVec3\">IVec3</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/glam/0.30.5/src/glam/i32/ivec3.rs.html#1290\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"devela/all/trait.Add.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"https://docs.rs/glam/0.30.5/glam/i32/ivec3/struct.IVec3.html\" title=\"struct glam::i32::ivec3::IVec3\">IVec3</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>+</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.add\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/glam/0.30.5/src/glam/i32/ivec3.rs.html#1292\">Source</a><a href=\"#method.add\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Add.html#tymethod.add\" class=\"fn\">add</a>(self, rhs: <a class=\"struct\" href=\"https://docs.rs/glam/0.30.5/glam/i32/ivec3/struct.IVec3.html\" title=\"struct glam::i32::ivec3::IVec3\">IVec3</a>) -&gt; <a class=\"struct\" href=\"https://docs.rs/glam/0.30.5/glam/i32/ivec3/struct.IVec3.html\" title=\"struct glam::i32::ivec3::IVec3\">IVec3</a></h4></section></summary><div class='docblock'>Performs the <code>+</code> operation. <a href=\"devela/all/trait.Add.html#tymethod.add\">Read more</a></div></details></div></details>","Add<IVec3>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Add%3CIVec4%3E-for-i32\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/glam/0.30.5/src/glam/i32/ivec4.rs.html#1383\">Source</a><a href=\"#impl-Add%3CIVec4%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"devela/all/trait.Add.html\" title=\"trait devela::all::Add\">Add</a>&lt;<a class=\"struct\" href=\"https://docs.rs/glam/0.30.5/glam/i32/ivec4/struct.IVec4.html\" title=\"struct glam::i32::ivec4::IVec4\">IVec4</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/glam/0.30.5/src/glam/i32/ivec4.rs.html#1384\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"devela/all/trait.Add.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"https://docs.rs/glam/0.30.5/glam/i32/ivec4/struct.IVec4.html\" title=\"struct glam::i32::ivec4::IVec4\">IVec4</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>+</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.add\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/glam/0.30.5/src/glam/i32/ivec4.rs.html#1386\">Source</a><a href=\"#method.add\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Add.html#tymethod.add\" class=\"fn\">add</a>(self, rhs: <a class=\"struct\" href=\"https://docs.rs/glam/0.30.5/glam/i32/ivec4/struct.IVec4.html\" title=\"struct glam::i32::ivec4::IVec4\">IVec4</a>) -&gt; <a class=\"struct\" href=\"https://docs.rs/glam/0.30.5/glam/i32/ivec4/struct.IVec4.html\" title=\"struct glam::i32::ivec4::IVec4\">IVec4</a></h4></section></summary><div class='docblock'>Performs the <code>+</code> operation. <a href=\"devela/all/trait.Add.html#tymethod.add\">Read more</a></div></details></div></details>","Add<IVec4>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Add%3CWeekday%3E-for-i32\" class=\"impl\"><a href=\"#impl-Add%3CWeekday%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"devela/all/trait.Add.html\" title=\"trait devela::all::Add\">Add</a>&lt;Weekday&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"devela/all/trait.Add.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = Weekday</h4></section></summary><div class='docblock'>The resulting type after applying the <code>+</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.add\" class=\"method trait-impl\"><a href=\"#method.add\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Add.html#tymethod.add\" class=\"fn\">add</a>(self, rhs: Weekday) -&gt; Weekday</h4></section></summary><div class='docblock'>Performs the <code>+</code> operation. <a href=\"devela/all/trait.Add.html#tymethod.add\">Read more</a></div></details></div></details>","Add<Weekday>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Add%3Ci32x4%3E-for-i32\" class=\"impl\"><a href=\"#impl-Add%3Ci32x4%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"devela/all/trait.Add.html\" title=\"trait devela::all::Add\">Add</a>&lt;i32x4&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"devela/all/trait.Add.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = i32x4</h4></section></summary><div class='docblock'>The resulting type after applying the <code>+</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.add\" class=\"method trait-impl\"><a href=\"#method.add\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Add.html#tymethod.add\" class=\"fn\">add</a>(self, rhs: i32x4) -&gt; &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> as <a class=\"trait\" href=\"devela/all/trait.Add.html\" title=\"trait devela::all::Add\">Add</a>&lt;i32x4&gt;&gt;::<a class=\"associatedtype\" href=\"devela/all/trait.Add.html#associatedtype.Output\" title=\"type devela::all::Add::Output\">Output</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&lt;i32 as Add&lt;i32x4&gt;&gt;::Output\">ⓘ</a></h4></section></summary><div class='docblock'>Performs the <code>+</code> operation. <a href=\"devela/all/trait.Add.html#tymethod.add\">Read more</a></div></details></div></details>","Add<i32x4>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Add%3Ci32x8%3E-for-i32\" class=\"impl\"><a href=\"#impl-Add%3Ci32x8%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"devela/all/trait.Add.html\" title=\"trait devela::all::Add\">Add</a>&lt;i32x8&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"devela/all/trait.Add.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = i32x8</h4></section></summary><div class='docblock'>The resulting type after applying the <code>+</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.add\" class=\"method trait-impl\"><a href=\"#method.add\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Add.html#tymethod.add\" class=\"fn\">add</a>(self, rhs: i32x8) -&gt; &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> as <a class=\"trait\" href=\"devela/all/trait.Add.html\" title=\"trait devela::all::Add\">Add</a>&lt;i32x8&gt;&gt;::<a class=\"associatedtype\" href=\"devela/all/trait.Add.html#associatedtype.Output\" title=\"type devela::all::Add::Output\">Output</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&lt;i32 as Add&lt;i32x8&gt;&gt;::Output\">ⓘ</a></h4></section></summary><div class='docblock'>Performs the <code>+</code> operation. <a href=\"devela/all/trait.Add.html#tymethod.add\">Read more</a></div></details></div></details>","Add<i32x8>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Add-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/143802\" title=\"Tracking issue for const_ops\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/arith.rs.html#115\">Source</a></span><a href=\"#impl-Add-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"devela/all/trait.Add.html\" title=\"trait devela::all::Add\">Add</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/arith.rs.html#115\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"devela/all/trait.Add.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>+</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.add\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/arith.rs.html#115\">Source</a><a href=\"#method.add\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Add.html#tymethod.add\" class=\"fn\">add</a>(self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a></h4></section></summary><div class='docblock'>Performs the <code>+</code> operation. <a href=\"devela/all/trait.Add.html#tymethod.add\">Read more</a></div></details></div></details>","Add","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AddAssign%3C%26i32%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0, const unstable\">1.22.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/143802\" title=\"Tracking issue for const_ops\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/arith.rs.html#807\">Source</a></span><a href=\"#impl-AddAssign%3C%26i32%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"devela/all/trait.AddAssign.html\" title=\"trait devela::all::AddAssign\">AddAssign</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.add_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/arith.rs.html#807\">Source</a><a href=\"#method.add_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.AddAssign.html#tymethod.add_assign\" class=\"fn\">add_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>)</h4></section></summary><div class='docblock'>Performs the <code>+=</code> operation. <a href=\"devela/all/trait.AddAssign.html#tymethod.add_assign\">Read more</a></div></details></div></details>","AddAssign<&i32>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AddAssign-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0, const unstable\">1.8.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/143802\" title=\"Tracking issue for const_ops\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/arith.rs.html#807\">Source</a></span><a href=\"#impl-AddAssign-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"devela/all/trait.AddAssign.html\" title=\"trait devela::all::AddAssign\">AddAssign</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.add_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/arith.rs.html#807\">Source</a><a href=\"#method.add_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.AddAssign.html#tymethod.add_assign\" class=\"fn\">add_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>)</h4></section></summary><div class='docblock'>Performs the <code>+=</code> operation. <a href=\"devela/all/trait.AddAssign.html#tymethod.add_assign\">Read more</a></div></details></div></details>","AddAssign","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsPrimitive%3Cf32%3E-for-i32\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/cast.rs.html#760\">Source</a><a href=\"#impl-AsPrimitive%3Cf32%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://docs.rs/num-traits/0.2/num_traits/cast/trait.AsPrimitive.html\" title=\"trait num_traits::cast::AsPrimitive\">AsPrimitive</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.f32.html\">f32</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/cast.rs.html#760\">Source</a><a href=\"#method.as_\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/cast/trait.AsPrimitive.html#tymethod.as_\" class=\"fn\">as_</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.f32.html\">f32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"f32\">ⓘ</a></h4></section></summary><div class='docblock'>Convert a value to another, using the <code>as</code> operator.</div></details></div></details>","AsPrimitive<f32>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsPrimitive%3Cf64%3E-for-i32\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/cast.rs.html#760\">Source</a><a href=\"#impl-AsPrimitive%3Cf64%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://docs.rs/num-traits/0.2/num_traits/cast/trait.AsPrimitive.html\" title=\"trait num_traits::cast::AsPrimitive\">AsPrimitive</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.f64.html\">f64</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/cast.rs.html#760\">Source</a><a href=\"#method.as_\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/cast/trait.AsPrimitive.html#tymethod.as_\" class=\"fn\">as_</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.f64.html\">f64</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"f64\">ⓘ</a></h4></section></summary><div class='docblock'>Convert a value to another, using the <code>as</code> operator.</div></details></div></details>","AsPrimitive<f64>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsPrimitive%3Ci128%3E-for-i32\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/cast.rs.html#760\">Source</a><a href=\"#impl-AsPrimitive%3Ci128%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://docs.rs/num-traits/0.2/num_traits/cast/trait.AsPrimitive.html\" title=\"trait num_traits::cast::AsPrimitive\">AsPrimitive</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i128.html\">i128</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/cast.rs.html#760\">Source</a><a href=\"#method.as_\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/cast/trait.AsPrimitive.html#tymethod.as_\" class=\"fn\">as_</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i128.html\">i128</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i128\">ⓘ</a></h4></section></summary><div class='docblock'>Convert a value to another, using the <code>as</code> operator.</div></details></div></details>","AsPrimitive<i128>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsPrimitive%3Ci16%3E-for-i32\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/cast.rs.html#760\">Source</a><a href=\"#impl-AsPrimitive%3Ci16%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://docs.rs/num-traits/0.2/num_traits/cast/trait.AsPrimitive.html\" title=\"trait num_traits::cast::AsPrimitive\">AsPrimitive</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i16.html\">i16</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/cast.rs.html#760\">Source</a><a href=\"#method.as_\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/cast/trait.AsPrimitive.html#tymethod.as_\" class=\"fn\">as_</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i16.html\">i16</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i16\">ⓘ</a></h4></section></summary><div class='docblock'>Convert a value to another, using the <code>as</code> operator.</div></details></div></details>","AsPrimitive<i16>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsPrimitive%3Ci32%3E-for-i32\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/cast.rs.html#760\">Source</a><a href=\"#impl-AsPrimitive%3Ci32%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://docs.rs/num-traits/0.2/num_traits/cast/trait.AsPrimitive.html\" title=\"trait num_traits::cast::AsPrimitive\">AsPrimitive</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/cast.rs.html#760\">Source</a><a href=\"#method.as_\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/cast/trait.AsPrimitive.html#tymethod.as_\" class=\"fn\">as_</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a></h4></section></summary><div class='docblock'>Convert a value to another, using the <code>as</code> operator.</div></details></div></details>","AsPrimitive<i32>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsPrimitive%3Ci64%3E-for-i32\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/cast.rs.html#760\">Source</a><a href=\"#impl-AsPrimitive%3Ci64%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://docs.rs/num-traits/0.2/num_traits/cast/trait.AsPrimitive.html\" title=\"trait num_traits::cast::AsPrimitive\">AsPrimitive</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/cast.rs.html#760\">Source</a><a href=\"#method.as_\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/cast/trait.AsPrimitive.html#tymethod.as_\" class=\"fn\">as_</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i64.html\">i64</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i64\">ⓘ</a></h4></section></summary><div class='docblock'>Convert a value to another, using the <code>as</code> operator.</div></details></div></details>","AsPrimitive<i64>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsPrimitive%3Ci8%3E-for-i32\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/cast.rs.html#760\">Source</a><a href=\"#impl-AsPrimitive%3Ci8%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://docs.rs/num-traits/0.2/num_traits/cast/trait.AsPrimitive.html\" title=\"trait num_traits::cast::AsPrimitive\">AsPrimitive</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/cast.rs.html#760\">Source</a><a href=\"#method.as_\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/cast/trait.AsPrimitive.html#tymethod.as_\" class=\"fn\">as_</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i8.html\">i8</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i8\">ⓘ</a></h4></section></summary><div class='docblock'>Convert a value to another, using the <code>as</code> operator.</div></details></div></details>","AsPrimitive<i8>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsPrimitive%3Cisize%3E-for-i32\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/cast.rs.html#760\">Source</a><a href=\"#impl-AsPrimitive%3Cisize%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://docs.rs/num-traits/0.2/num_traits/cast/trait.AsPrimitive.html\" title=\"trait num_traits::cast::AsPrimitive\">AsPrimitive</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.isize.html\">isize</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/cast.rs.html#760\">Source</a><a href=\"#method.as_\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/cast/trait.AsPrimitive.html#tymethod.as_\" class=\"fn\">as_</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.isize.html\">isize</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"isize\">ⓘ</a></h4></section></summary><div class='docblock'>Convert a value to another, using the <code>as</code> operator.</div></details></div></details>","AsPrimitive<isize>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsPrimitive%3Cu128%3E-for-i32\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/cast.rs.html#760\">Source</a><a href=\"#impl-AsPrimitive%3Cu128%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://docs.rs/num-traits/0.2/num_traits/cast/trait.AsPrimitive.html\" title=\"trait num_traits::cast::AsPrimitive\">AsPrimitive</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u128.html\">u128</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/cast.rs.html#760\">Source</a><a href=\"#method.as_\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/cast/trait.AsPrimitive.html#tymethod.as_\" class=\"fn\">as_</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u128.html\">u128</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"u128\">ⓘ</a></h4></section></summary><div class='docblock'>Convert a value to another, using the <code>as</code> operator.</div></details></div></details>","AsPrimitive<u128>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsPrimitive%3Cu16%3E-for-i32\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/cast.rs.html#760\">Source</a><a href=\"#impl-AsPrimitive%3Cu16%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://docs.rs/num-traits/0.2/num_traits/cast/trait.AsPrimitive.html\" title=\"trait num_traits::cast::AsPrimitive\">AsPrimitive</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u16.html\">u16</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/cast.rs.html#760\">Source</a><a href=\"#method.as_\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/cast/trait.AsPrimitive.html#tymethod.as_\" class=\"fn\">as_</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u16.html\">u16</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"u16\">ⓘ</a></h4></section></summary><div class='docblock'>Convert a value to another, using the <code>as</code> operator.</div></details></div></details>","AsPrimitive<u16>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsPrimitive%3Cu32%3E-for-i32\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/cast.rs.html#760\">Source</a><a href=\"#impl-AsPrimitive%3Cu32%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://docs.rs/num-traits/0.2/num_traits/cast/trait.AsPrimitive.html\" title=\"trait num_traits::cast::AsPrimitive\">AsPrimitive</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/cast.rs.html#760\">Source</a><a href=\"#method.as_\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/cast/trait.AsPrimitive.html#tymethod.as_\" class=\"fn\">as_</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"u32\">ⓘ</a></h4></section></summary><div class='docblock'>Convert a value to another, using the <code>as</code> operator.</div></details></div></details>","AsPrimitive<u32>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsPrimitive%3Cu64%3E-for-i32\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/cast.rs.html#760\">Source</a><a href=\"#impl-AsPrimitive%3Cu64%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://docs.rs/num-traits/0.2/num_traits/cast/trait.AsPrimitive.html\" title=\"trait num_traits::cast::AsPrimitive\">AsPrimitive</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u64.html\">u64</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/cast.rs.html#760\">Source</a><a href=\"#method.as_\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/cast/trait.AsPrimitive.html#tymethod.as_\" class=\"fn\">as_</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u64.html\">u64</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"u64\">ⓘ</a></h4></section></summary><div class='docblock'>Convert a value to another, using the <code>as</code> operator.</div></details></div></details>","AsPrimitive<u64>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsPrimitive%3Cu8%3E-for-i32\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/cast.rs.html#760\">Source</a><a href=\"#impl-AsPrimitive%3Cu8%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://docs.rs/num-traits/0.2/num_traits/cast/trait.AsPrimitive.html\" title=\"trait num_traits::cast::AsPrimitive\">AsPrimitive</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/cast.rs.html#760\">Source</a><a href=\"#method.as_\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/cast/trait.AsPrimitive.html#tymethod.as_\" class=\"fn\">as_</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"u8\">ⓘ</a></h4></section></summary><div class='docblock'>Convert a value to another, using the <code>as</code> operator.</div></details></div></details>","AsPrimitive<u8>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsPrimitive%3Cusize%3E-for-i32\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/cast.rs.html#760\">Source</a><a href=\"#impl-AsPrimitive%3Cusize%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://docs.rs/num-traits/0.2/num_traits/cast/trait.AsPrimitive.html\" title=\"trait num_traits::cast::AsPrimitive\">AsPrimitive</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/cast.rs.html#760\">Source</a><a href=\"#method.as_\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/cast/trait.AsPrimitive.html#tymethod.as_\" class=\"fn\">as_</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"usize\">ⓘ</a></h4></section></summary><div class='docblock'>Convert a value to another, using the <code>as</code> operator.</div></details></div></details>","AsPrimitive<usize>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsRawFd-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.48.0\">1.48.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/std/os/fd/raw.rs.html#145\">Source</a></span><a href=\"#impl-AsRawFd-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/std/os/fd/raw/trait.AsRawFd.html\" title=\"trait std::os::fd::raw::AsRawFd\">AsRawFd</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_raw_fd\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/std/os/fd/raw.rs.html#147\">Source</a><a href=\"#method.as_raw_fd\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/std/os/fd/raw/trait.AsRawFd.html#tymethod.as_raw_fd\" class=\"fn\">as_raw_fd</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a></h4></section></summary><div class='docblock'>Extracts the raw file descriptor. <a href=\"https://doc.rust-lang.org/nightly/std/os/fd/raw/trait.AsRawFd.html#tymethod.as_raw_fd\">Read more</a></div></details></div></details>","AsRawFd","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AtomicPrimitive-for-i32\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/sync/atomic.rs.html#300\">Source</a><a href=\"#impl-AtomicPrimitive-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/sync/atomic/trait.AtomicPrimitive.html\" title=\"trait core::sync::atomic::AtomicPrimitive\">AtomicPrimitive</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.AtomicInner\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/sync/atomic.rs.html#300\">Source</a><a href=\"#associatedtype.AtomicInner\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/sync/atomic/trait.AtomicPrimitive.html#associatedtype.AtomicInner\" class=\"associatedtype\">AtomicInner</a> = <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/sync/atomic/struct.AtomicI32.html\" title=\"struct core::sync::atomic::AtomicI32\">AtomicI32</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>atomic_internals</code>)</span></div></span><div class='docblock'>Temporary implementation detail.</div></details></div></details>","AtomicPrimitive","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AudioFormatNum-for-i32\" class=\"impl\"><a href=\"#impl-AudioFormatNum-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl AudioFormatNum for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3><div class=\"docblock\"><p><code>AUDIO_S32</code></p>\n</div></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedconstant.SILENCE\" class=\"associatedconstant trait-impl\"><a href=\"#associatedconstant.SILENCE\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a class=\"constant\">SILENCE</a>: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> = 0i32</h4></section></summary><div class='docblock'>The appropriately typed silence value for the audio format used. <a>Read more</a></div></details><section id=\"method.audio_format\" class=\"method trait-impl\"><a href=\"#method.audio_format\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">audio_format</a>() -&gt; AudioFormat</h4></section></div></details>","AudioFormatNum","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Binary-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/fmt/num.rs.html#75\">Source</a></span><a href=\"#impl-Binary-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"devela/all/trait.Binary.html\" title=\"trait devela::all::Binary\">Binary</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/fmt/num.rs.html#75\">Source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Binary.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"devela/all/struct.Formatter.html\" title=\"struct devela::all::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"devela/all/struct.FmtError.html\" title=\"struct devela::all::FmtError\">Error</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;(), Error&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Format signed integers in the two’s-complement form.</p>\n</div></details></div></details>","Binary","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitAnd%3C%26i32%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/143802\" title=\"Tracking issue for const_ops\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#189\">Source</a></span><a href=\"#impl-BitAnd%3C%26i32%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"devela/all/trait.BitAnd.html\" title=\"trait devela::all::BitAnd\">BitAnd</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#189\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"devela/all/trait.BitAnd.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> as <a class=\"trait\" href=\"devela/all/trait.BitAnd.html\" title=\"trait devela::all::BitAnd\">BitAnd</a>&gt;::<a class=\"associatedtype\" href=\"devela/all/trait.BitAnd.html#associatedtype.Output\" title=\"type devela::all::BitAnd::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&amp;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitand\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#189\">Source</a><a href=\"#method.bitand\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.BitAnd.html#tymethod.bitand\" class=\"fn\">bitand</a>(self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>) -&gt; &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> as <a class=\"trait\" href=\"devela/all/trait.BitAnd.html\" title=\"trait devela::all::BitAnd\">BitAnd</a>&gt;::<a class=\"associatedtype\" href=\"devela/all/trait.BitAnd.html#associatedtype.Output\" title=\"type devela::all::BitAnd::Output\">Output</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&lt;i32 as BitAnd&gt;::Output\">ⓘ</a></h4></section></summary><div class='docblock'>Performs the <code>&amp;</code> operation. <a href=\"devela/all/trait.BitAnd.html#tymethod.bitand\">Read more</a></div></details></div></details>","BitAnd<&i32>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitAnd-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/143802\" title=\"Tracking issue for const_ops\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#189\">Source</a></span><a href=\"#impl-BitAnd-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"devela/all/trait.BitAnd.html\" title=\"trait devela::all::BitAnd\">BitAnd</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#189\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"devela/all/trait.BitAnd.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&amp;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitand\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#189\">Source</a><a href=\"#method.bitand\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.BitAnd.html#tymethod.bitand\" class=\"fn\">bitand</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a></h4></section></summary><div class='docblock'>Performs the <code>&amp;</code> operation. <a href=\"devela/all/trait.BitAnd.html#tymethod.bitand\">Read more</a></div></details></div></details>","BitAnd","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitAndAssign%3C%26i32%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0, const unstable\">1.22.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/143802\" title=\"Tracking issue for const_ops\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#762\">Source</a></span><a href=\"#impl-BitAndAssign%3C%26i32%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"devela/all/trait.BitAndAssign.html\" title=\"trait devela::all::BitAndAssign\">BitAndAssign</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitand_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#762\">Source</a><a href=\"#method.bitand_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.BitAndAssign.html#tymethod.bitand_assign\" class=\"fn\">bitand_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>)</h4></section></summary><div class='docblock'>Performs the <code>&amp;=</code> operation. <a href=\"devela/all/trait.BitAndAssign.html#tymethod.bitand_assign\">Read more</a></div></details></div></details>","BitAndAssign<&i32>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitAndAssign-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0, const unstable\">1.8.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/143802\" title=\"Tracking issue for const_ops\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#762\">Source</a></span><a href=\"#impl-BitAndAssign-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"devela/all/trait.BitAndAssign.html\" title=\"trait devela::all::BitAndAssign\">BitAndAssign</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitand_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#762\">Source</a><a href=\"#method.bitand_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.BitAndAssign.html#tymethod.bitand_assign\" class=\"fn\">bitand_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>)</h4></section></summary><div class='docblock'>Performs the <code>&amp;=</code> operation. <a href=\"devela/all/trait.BitAndAssign.html#tymethod.bitand_assign\">Read more</a></div></details></div></details>","BitAndAssign","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitOps-for-i32\" class=\"impl\"><a class=\"src rightside\" href=\"src/devela/data/bit/ops.rs.html#451\">Source</a><a href=\"#impl-BitOps-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"devela/data/trait.BitOps.html\" title=\"trait devela::data::BitOps\">BitOps</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Inner\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/devela/data/bit/ops.rs.html#451\">Source</a><a href=\"#associatedtype.Inner\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"devela/data/trait.BitOps.html#associatedtype.Inner\" class=\"associatedtype\">Inner</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h4></section></summary><div class='docblock'>The inner type for the bit representation.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bit_mask_range\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/data/bit/ops.rs.html#451\">Source</a><a href=\"#method.bit_mask_range\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/data/trait.BitOps.html#tymethod.bit_mask_range\" class=\"fn\">bit_mask_range</a>(start: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>, end: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>) -&gt; Self</h4></section></summary><div class='docblock'>Returns a bitmask of ones from the <code>[start..=end]</code> range. <a href=\"devela/data/trait.BitOps.html#tymethod.bit_mask_range\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bit_mask_checked_range\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/data/bit/ops.rs.html#451\">Source</a><a href=\"#method.bit_mask_checked_range\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/data/trait.BitOps.html#tymethod.bit_mask_checked_range\" class=\"fn\">bit_mask_checked_range</a>(\n    start: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>,\n    end: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>,\n) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;Self, <a class=\"enum\" href=\"devela/all/enum.MismatchedBounds.html\" title=\"enum devela::all::MismatchedBounds\">MismatchedBounds</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;Self, MismatchedBounds&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Returns a bitmask of ones from the <code>[start..=end]</code> checked range. <a href=\"devela/data/trait.BitOps.html#tymethod.bit_mask_checked_range\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bit_get_range\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/data/bit/ops.rs.html#451\">Source</a><a href=\"#method.bit_get_range\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/data/trait.BitOps.html#tymethod.bit_get_range\" class=\"fn\">bit_get_range</a>(self, start: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>, end: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>) -&gt; Self</h4></section></summary><div class='docblock'>Gets the bits in <code>self</code> from the <code>[start..=end]</code> range. <a href=\"devela/data/trait.BitOps.html#tymethod.bit_get_range\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bit_get_checked_range\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/data/bit/ops.rs.html#451\">Source</a><a href=\"#method.bit_get_checked_range\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/data/trait.BitOps.html#tymethod.bit_get_checked_range\" class=\"fn\">bit_get_checked_range</a>(\n    self,\n    start: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>,\n    end: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>,\n) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;Self, <a class=\"enum\" href=\"devela/all/enum.MismatchedBounds.html\" title=\"enum devela::all::MismatchedBounds\">MismatchedBounds</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;Self, MismatchedBounds&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Gets the bits in <code>self</code> from the <code>[start..=end]</code> checked range. <a href=\"devela/data/trait.BitOps.html#tymethod.bit_get_checked_range\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bit_get_value_range\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/data/bit/ops.rs.html#451\">Source</a><a href=\"#method.bit_get_value_range\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/data/trait.BitOps.html#tymethod.bit_get_value_range\" class=\"fn\">bit_get_value_range</a>(self, start: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>, end: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>) -&gt; Self</h4></section></summary><div class='docblock'>Gets the rightwards shifted bits in <code>self</code> from the <code>[start..=end]</code> range. <a href=\"devela/data/trait.BitOps.html#tymethod.bit_get_value_range\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bit_get_value_checked_range\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/data/bit/ops.rs.html#451\">Source</a><a href=\"#method.bit_get_value_checked_range\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/data/trait.BitOps.html#tymethod.bit_get_value_checked_range\" class=\"fn\">bit_get_value_checked_range</a>(\n    self,\n    start: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>,\n    end: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>,\n) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;Self, <a class=\"enum\" href=\"devela/all/enum.MismatchedBounds.html\" title=\"enum devela::all::MismatchedBounds\">MismatchedBounds</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;Self, MismatchedBounds&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Gets the rightwards shifted bits in <code>self</code> from the <code>[start..=end]</code> checked range. <a href=\"devela/data/trait.BitOps.html#tymethod.bit_get_value_checked_range\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bit_set_range\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/data/bit/ops.rs.html#451\">Source</a><a href=\"#method.bit_set_range\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/data/trait.BitOps.html#tymethod.bit_set_range\" class=\"fn\">bit_set_range</a>(self, start: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>, end: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>) -&gt; Self</h4></section></summary><div class='docblock'>Sets the bits in <code>self</code> to 1 from the <code>[start..=end]</code> range. <a href=\"devela/data/trait.BitOps.html#tymethod.bit_set_range\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bit_set_checked_range\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/data/bit/ops.rs.html#451\">Source</a><a href=\"#method.bit_set_checked_range\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/data/trait.BitOps.html#tymethod.bit_set_checked_range\" class=\"fn\">bit_set_checked_range</a>(\n    self,\n    start: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>,\n    end: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>,\n) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;Self, <a class=\"enum\" href=\"devela/all/enum.MismatchedBounds.html\" title=\"enum devela::all::MismatchedBounds\">MismatchedBounds</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;Self, MismatchedBounds&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Sets the bits in <code>self</code> to 1 from the <code>[start..=end]</code> checked range. <a href=\"devela/data/trait.BitOps.html#tymethod.bit_set_checked_range\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bit_set_value_range\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/data/bit/ops.rs.html#451\">Source</a><a href=\"#method.bit_set_value_range\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/data/trait.BitOps.html#tymethod.bit_set_value_range\" class=\"fn\">bit_set_value_range</a>(self, value: Self::<a class=\"associatedtype\" href=\"devela/data/trait.BitOps.html#associatedtype.Inner\" title=\"type devela::data::BitOps::Inner\">Inner</a>, start: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>, end: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>) -&gt; Self</h4></section></summary><div class='docblock'>Sets the given <code>value</code> into the bits from the <code>[start..=end]</code> range. <a href=\"devela/data/trait.BitOps.html#tymethod.bit_set_value_range\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bit_set_value_checked_range\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/data/bit/ops.rs.html#451\">Source</a><a href=\"#method.bit_set_value_checked_range\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/data/trait.BitOps.html#tymethod.bit_set_value_checked_range\" class=\"fn\">bit_set_value_checked_range</a>(\n    self,\n    value: Self::<a class=\"associatedtype\" href=\"devela/data/trait.BitOps.html#associatedtype.Inner\" title=\"type devela::data::BitOps::Inner\">Inner</a>,\n    start: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>,\n    end: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>,\n) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;Self, <a class=\"enum\" href=\"devela/all/enum.MismatchedBounds.html\" title=\"enum devela::all::MismatchedBounds\">MismatchedBounds</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;Self, MismatchedBounds&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Sets the given <code>value</code> into the bits from the <code>[start..=end]</code> checked range. <a href=\"devela/data/trait.BitOps.html#tymethod.bit_set_value_checked_range\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bit_set_checked_value_checked_range\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/data/bit/ops.rs.html#451\">Source</a><a href=\"#method.bit_set_checked_value_checked_range\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/data/trait.BitOps.html#tymethod.bit_set_checked_value_checked_range\" class=\"fn\">bit_set_checked_value_checked_range</a>(\n    self,\n    value: Self::<a class=\"associatedtype\" href=\"devela/data/trait.BitOps.html#associatedtype.Inner\" title=\"type devela::data::BitOps::Inner\">Inner</a>,\n    start: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>,\n    end: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>,\n) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;Self, <a class=\"enum\" href=\"devela/all/enum.MismatchedBounds.html\" title=\"enum devela::all::MismatchedBounds\">MismatchedBounds</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;Self, MismatchedBounds&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Sets the given checked <code>value</code> into the bits from the <code>[start..=end]</code> checked range. <a href=\"devela/data/trait.BitOps.html#tymethod.bit_set_checked_value_checked_range\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bit_unset_range\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/data/bit/ops.rs.html#451\">Source</a><a href=\"#method.bit_unset_range\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/data/trait.BitOps.html#tymethod.bit_unset_range\" class=\"fn\">bit_unset_range</a>(self, start: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>, end: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>) -&gt; Self</h4></section></summary><div class='docblock'>Unsets the bits in <code>self</code> to 0 from the <code>[start..=end]</code> range. <a href=\"devela/data/trait.BitOps.html#tymethod.bit_unset_range\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bit_unset_checked_range\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/data/bit/ops.rs.html#451\">Source</a><a href=\"#method.bit_unset_checked_range\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/data/trait.BitOps.html#tymethod.bit_unset_checked_range\" class=\"fn\">bit_unset_checked_range</a>(\n    self,\n    start: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>,\n    end: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>,\n) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;Self, <a class=\"enum\" href=\"devela/all/enum.MismatchedBounds.html\" title=\"enum devela::all::MismatchedBounds\">MismatchedBounds</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;Self, MismatchedBounds&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Unsets the bits in <code>self</code> to 0 from the <code>[start..=end]</code> checked range. <a href=\"devela/data/trait.BitOps.html#tymethod.bit_unset_checked_range\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bit_flip_range\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/data/bit/ops.rs.html#451\">Source</a><a href=\"#method.bit_flip_range\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/data/trait.BitOps.html#tymethod.bit_flip_range\" class=\"fn\">bit_flip_range</a>(self, start: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>, end: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>) -&gt; Self</h4></section></summary><div class='docblock'>Flips the bits in <code>self</code> from the <code>[start..=end]</code> range. <a href=\"devela/data/trait.BitOps.html#tymethod.bit_flip_range\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bit_flip_checked_range\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/data/bit/ops.rs.html#451\">Source</a><a href=\"#method.bit_flip_checked_range\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/data/trait.BitOps.html#tymethod.bit_flip_checked_range\" class=\"fn\">bit_flip_checked_range</a>(\n    self,\n    start: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>,\n    end: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>,\n) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;Self, <a class=\"enum\" href=\"devela/all/enum.MismatchedBounds.html\" title=\"enum devela::all::MismatchedBounds\">MismatchedBounds</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;Self, MismatchedBounds&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Flips the bits in <code>self</code> from the <code>[start..=end]</code> checked range. <a href=\"devela/data/trait.BitOps.html#tymethod.bit_flip_checked_range\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bit_reverse_range\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/data/bit/ops.rs.html#451\">Source</a><a href=\"#method.bit_reverse_range\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/data/trait.BitOps.html#tymethod.bit_reverse_range\" class=\"fn\">bit_reverse_range</a>(self, start: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>, end: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>) -&gt; Self</h4></section></summary><div class='docblock'>Reverses the order of the bits in <code>self</code> from the <code>[start..=end]</code> range. <a href=\"devela/data/trait.BitOps.html#tymethod.bit_reverse_range\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bit_reverse_checked_range\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/data/bit/ops.rs.html#451\">Source</a><a href=\"#method.bit_reverse_checked_range\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/data/trait.BitOps.html#tymethod.bit_reverse_checked_range\" class=\"fn\">bit_reverse_checked_range</a>(\n    self,\n    start: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>,\n    end: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>,\n) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;Self, <a class=\"enum\" href=\"devela/all/enum.MismatchedBounds.html\" title=\"enum devela::all::MismatchedBounds\">MismatchedBounds</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;Self, MismatchedBounds&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Reverses the order of the bits in <code>self</code> from the <code>[start..=end]</code> checked range. <a href=\"devela/data/trait.BitOps.html#tymethod.bit_reverse_checked_range\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bit_count_ones_range\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/data/bit/ops.rs.html#451\">Source</a><a href=\"#method.bit_count_ones_range\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/data/trait.BitOps.html#tymethod.bit_count_ones_range\" class=\"fn\">bit_count_ones_range</a>(self, start: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>, end: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"u32\">ⓘ</a></h4></section></summary><div class='docblock'>Counts the number of 1s in <code>bits</code> from the <code>[start..=end]</code> range. <a href=\"devela/data/trait.BitOps.html#tymethod.bit_count_ones_range\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bit_count_ones_checked_range\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/data/bit/ops.rs.html#451\">Source</a><a href=\"#method.bit_count_ones_checked_range\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/data/trait.BitOps.html#tymethod.bit_count_ones_checked_range\" class=\"fn\">bit_count_ones_checked_range</a>(\n    self,\n    start: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>,\n    end: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>,\n) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>, <a class=\"enum\" href=\"devela/all/enum.MismatchedBounds.html\" title=\"enum devela::all::MismatchedBounds\">MismatchedBounds</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;u32, MismatchedBounds&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Counts the number of 1s in <code>bits</code> from the <code>[start..=end]</code> checked range. <a href=\"devela/data/trait.BitOps.html#tymethod.bit_count_ones_checked_range\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bit_count_zeros_range\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/data/bit/ops.rs.html#451\">Source</a><a href=\"#method.bit_count_zeros_range\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/data/trait.BitOps.html#tymethod.bit_count_zeros_range\" class=\"fn\">bit_count_zeros_range</a>(self, start: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>, end: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"u32\">ⓘ</a></h4></section></summary><div class='docblock'>Counts the number of 0s in <code>bits</code> from the <code>[start..=end]</code> range. <a href=\"devela/data/trait.BitOps.html#tymethod.bit_count_zeros_range\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bit_count_zeros_checked_range\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/data/bit/ops.rs.html#451\">Source</a><a href=\"#method.bit_count_zeros_checked_range\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/data/trait.BitOps.html#tymethod.bit_count_zeros_checked_range\" class=\"fn\">bit_count_zeros_checked_range</a>(\n    self,\n    start: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>,\n    end: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>,\n) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>, <a class=\"enum\" href=\"devela/all/enum.MismatchedBounds.html\" title=\"enum devela::all::MismatchedBounds\">MismatchedBounds</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;u32, MismatchedBounds&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Counts the number of 0s in <code>bits</code> from the <code>[start..=end]</code> checked range. <a href=\"devela/data/trait.BitOps.html#tymethod.bit_count_zeros_checked_range\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bit_find_first_one_range\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/data/bit/ops.rs.html#451\">Source</a><a href=\"#method.bit_find_first_one_range\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/data/trait.BitOps.html#tymethod.bit_find_first_one_range\" class=\"fn\">bit_find_first_one_range</a>(self, start: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>, end: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>) -&gt; <a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Option&lt;u32&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Finds the index of the first 1 in <code>bits</code> from the <code>[start..=end]</code> range. <a href=\"devela/data/trait.BitOps.html#tymethod.bit_find_first_one_range\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bit_find_first_one_checked_range\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/data/bit/ops.rs.html#451\">Source</a><a href=\"#method.bit_find_first_one_checked_range\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/data/trait.BitOps.html#tymethod.bit_find_first_one_checked_range\" class=\"fn\">bit_find_first_one_checked_range</a>(\n    self,\n    start: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>,\n    end: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>,\n) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>&gt;, <a class=\"enum\" href=\"devela/all/enum.MismatchedBounds.html\" title=\"enum devela::all::MismatchedBounds\">MismatchedBounds</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;Option&lt;u32&gt;, MismatchedBounds&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Finds the index of the first 1 in <code>bits</code> from the <code>[start..=end]</code> checked range. <a href=\"devela/data/trait.BitOps.html#tymethod.bit_find_first_one_checked_range\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bit_find_first_zero_range\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/data/bit/ops.rs.html#451\">Source</a><a href=\"#method.bit_find_first_zero_range\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/data/trait.BitOps.html#tymethod.bit_find_first_zero_range\" class=\"fn\">bit_find_first_zero_range</a>(self, start: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>, end: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>) -&gt; <a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Option&lt;u32&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Finds the index of the first 0 in <code>bits</code> from the <code>[start..=end]</code> range. <a href=\"devela/data/trait.BitOps.html#tymethod.bit_find_first_zero_range\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bit_find_first_zero_checked_range\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/data/bit/ops.rs.html#451\">Source</a><a href=\"#method.bit_find_first_zero_checked_range\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/data/trait.BitOps.html#tymethod.bit_find_first_zero_checked_range\" class=\"fn\">bit_find_first_zero_checked_range</a>(\n    self,\n    start: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>,\n    end: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>,\n) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>&gt;, <a class=\"enum\" href=\"devela/all/enum.MismatchedBounds.html\" title=\"enum devela::all::MismatchedBounds\">MismatchedBounds</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;Option&lt;u32&gt;, MismatchedBounds&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Finds the index of the first 0 in <code>bits</code> from the <code>[start..=end]</code> checked range. <a href=\"devela/data/trait.BitOps.html#tymethod.bit_find_first_zero_checked_range\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bit_find_last_one_range\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/data/bit/ops.rs.html#451\">Source</a><a href=\"#method.bit_find_last_one_range\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/data/trait.BitOps.html#tymethod.bit_find_last_one_range\" class=\"fn\">bit_find_last_one_range</a>(self, start: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>, end: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>) -&gt; <a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Option&lt;u32&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Finds the index of the last 1 in <code>bits</code> from the <code>[start..=end]</code> range. <a href=\"devela/data/trait.BitOps.html#tymethod.bit_find_last_one_range\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bit_find_last_one_checked_range\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/data/bit/ops.rs.html#451\">Source</a><a href=\"#method.bit_find_last_one_checked_range\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/data/trait.BitOps.html#tymethod.bit_find_last_one_checked_range\" class=\"fn\">bit_find_last_one_checked_range</a>(\n    self,\n    start: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>,\n    end: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>,\n) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>&gt;, <a class=\"enum\" href=\"devela/all/enum.MismatchedBounds.html\" title=\"enum devela::all::MismatchedBounds\">MismatchedBounds</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;Option&lt;u32&gt;, MismatchedBounds&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Finds the index of the last 1 in <code>bits</code> from the <code>[start..=end]</code> checked range. <a href=\"devela/data/trait.BitOps.html#tymethod.bit_find_last_one_checked_range\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bit_find_last_zero_range\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/data/bit/ops.rs.html#451\">Source</a><a href=\"#method.bit_find_last_zero_range\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/data/trait.BitOps.html#tymethod.bit_find_last_zero_range\" class=\"fn\">bit_find_last_zero_range</a>(self, start: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>, end: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>) -&gt; <a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Option&lt;u32&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Finds the index of the last 0 in <code>bits</code> from the <code>[start..=end]</code> range. <a href=\"devela/data/trait.BitOps.html#tymethod.bit_find_last_zero_range\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bit_find_last_zero_checked_range\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/data/bit/ops.rs.html#451\">Source</a><a href=\"#method.bit_find_last_zero_checked_range\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/data/trait.BitOps.html#tymethod.bit_find_last_zero_checked_range\" class=\"fn\">bit_find_last_zero_checked_range</a>(\n    self,\n    start: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>,\n    end: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>,\n) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>&gt;, <a class=\"enum\" href=\"devela/all/enum.MismatchedBounds.html\" title=\"enum devela::all::MismatchedBounds\">MismatchedBounds</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;Option&lt;u32&gt;, MismatchedBounds&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Finds the index of the last 0 in <code>bits</code> from the <code>[start..=end]</code> checked range. <a href=\"devela/data/trait.BitOps.html#tymethod.bit_find_last_zero_checked_range\">Read more</a></div></details></div></details>","BitOps","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitOr%3C%26i32%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/143802\" title=\"Tracking issue for const_ops\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#294\">Source</a></span><a href=\"#impl-BitOr%3C%26i32%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"devela/all/trait.BitOr.html\" title=\"trait devela::all::BitOr\">BitOr</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#294\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"devela/all/trait.BitOr.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> as <a class=\"trait\" href=\"devela/all/trait.BitOr.html\" title=\"trait devela::all::BitOr\">BitOr</a>&gt;::<a class=\"associatedtype\" href=\"devela/all/trait.BitOr.html#associatedtype.Output\" title=\"type devela::all::BitOr::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>|</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitor\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#294\">Source</a><a href=\"#method.bitor\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.BitOr.html#tymethod.bitor\" class=\"fn\">bitor</a>(self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>) -&gt; &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> as <a class=\"trait\" href=\"devela/all/trait.BitOr.html\" title=\"trait devela::all::BitOr\">BitOr</a>&gt;::<a class=\"associatedtype\" href=\"devela/all/trait.BitOr.html#associatedtype.Output\" title=\"type devela::all::BitOr::Output\">Output</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&lt;i32 as BitOr&gt;::Output\">ⓘ</a></h4></section></summary><div class='docblock'>Performs the <code>|</code> operation. <a href=\"devela/all/trait.BitOr.html#tymethod.bitor\">Read more</a></div></details></div></details>","BitOr<&i32>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitOr-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/143802\" title=\"Tracking issue for const_ops\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#294\">Source</a></span><a href=\"#impl-BitOr-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"devela/all/trait.BitOr.html\" title=\"trait devela::all::BitOr\">BitOr</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#294\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"devela/all/trait.BitOr.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>|</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitor\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#294\">Source</a><a href=\"#method.bitor\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.BitOr.html#tymethod.bitor\" class=\"fn\">bitor</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a></h4></section></summary><div class='docblock'>Performs the <code>|</code> operation. <a href=\"devela/all/trait.BitOr.html#tymethod.bitor\">Read more</a></div></details></div></details>","BitOr","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitOrAssign%3C%26i32%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0, const unstable\">1.22.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/143802\" title=\"Tracking issue for const_ops\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#838\">Source</a></span><a href=\"#impl-BitOrAssign%3C%26i32%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"devela/all/trait.BitOrAssign.html\" title=\"trait devela::all::BitOrAssign\">BitOrAssign</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitor_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#838\">Source</a><a href=\"#method.bitor_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.BitOrAssign.html#tymethod.bitor_assign\" class=\"fn\">bitor_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>)</h4></section></summary><div class='docblock'>Performs the <code>|=</code> operation. <a href=\"devela/all/trait.BitOrAssign.html#tymethod.bitor_assign\">Read more</a></div></details></div></details>","BitOrAssign<&i32>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitOrAssign-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0, const unstable\">1.8.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/143802\" title=\"Tracking issue for const_ops\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#838\">Source</a></span><a href=\"#impl-BitOrAssign-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"devela/all/trait.BitOrAssign.html\" title=\"trait devela::all::BitOrAssign\">BitOrAssign</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitor_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#838\">Source</a><a href=\"#method.bitor_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.BitOrAssign.html#tymethod.bitor_assign\" class=\"fn\">bitor_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>)</h4></section></summary><div class='docblock'>Performs the <code>|=</code> operation. <a href=\"devela/all/trait.BitOrAssign.html#tymethod.bitor_assign\">Read more</a></div></details></div></details>","BitOrAssign","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitSized%3C32%3E-for-i32\" class=\"impl\"><a class=\"src rightside\" href=\"src/devela/sys/mem/size/bit.rs.html#179\">Source</a><a href=\"#impl-BitSized%3C32%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"devela/all/trait.BitSized.html\" title=\"trait devela::all::BitSized\">BitSized</a>&lt;32&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedconstant.BIT_SIZE\" class=\"associatedconstant trait-impl\"><a class=\"src rightside\" href=\"src/devela/sys/mem/size/bit.rs.html#53-59\">Source</a><a href=\"#associatedconstant.BIT_SIZE\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a href=\"devela/all/trait.BitSized.html#associatedconstant.BIT_SIZE\" class=\"constant\">BIT_SIZE</a>: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a> = _</h4></section></summary><div class='docblock'>The bit size of this type (only the relevant data part, without padding). <a href=\"devela/all/trait.BitSized.html#associatedconstant.BIT_SIZE\">Read more</a></div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.MIN_BYTE_SIZE\" class=\"associatedconstant trait-impl\"><a class=\"src rightside\" href=\"src/devela/sys/mem/size/bit.rs.html#68-74\">Source</a><a href=\"#associatedconstant.MIN_BYTE_SIZE\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a href=\"devela/all/trait.BitSized.html#associatedconstant.MIN_BYTE_SIZE\" class=\"constant\">MIN_BYTE_SIZE</a>: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a> = _</h4></section></summary><div class='docblock'>The rounded up byte size for this type. <a href=\"devela/all/trait.BitSized.html#associatedconstant.MIN_BYTE_SIZE\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bit_size\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/sys/mem/size/bit.rs.html#81-83\">Source</a><a href=\"#method.bit_size\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.BitSized.html#method.bit_size\" class=\"fn\">bit_size</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"usize\">ⓘ</a></h4></section></summary><div class='docblock'>Returns the bit size of this type (only the relevant data part, without padding). <a href=\"devela/all/trait.BitSized.html#method.bit_size\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.min_byte_size\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/sys/mem/size/bit.rs.html#93-95\">Source</a><a href=\"#method.min_byte_size\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.BitSized.html#method.min_byte_size\" class=\"fn\">min_byte_size</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"usize\">ⓘ</a></h4></section></summary><div class='docblock'>Returns the rounded up byte size for this type. <a href=\"devela/all/trait.BitSized.html#method.min_byte_size\">Read more</a></div></details></div></details>","BitSized<32>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitXor%3C%26i32%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/143802\" title=\"Tracking issue for const_ops\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#399\">Source</a></span><a href=\"#impl-BitXor%3C%26i32%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"devela/all/trait.BitXor.html\" title=\"trait devela::all::BitXor\">BitXor</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#399\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"devela/all/trait.BitXor.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> as <a class=\"trait\" href=\"devela/all/trait.BitXor.html\" title=\"trait devela::all::BitXor\">BitXor</a>&gt;::<a class=\"associatedtype\" href=\"devela/all/trait.BitXor.html#associatedtype.Output\" title=\"type devela::all::BitXor::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>^</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitxor\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#399\">Source</a><a href=\"#method.bitxor\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.BitXor.html#tymethod.bitxor\" class=\"fn\">bitxor</a>(self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>) -&gt; &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> as <a class=\"trait\" href=\"devela/all/trait.BitXor.html\" title=\"trait devela::all::BitXor\">BitXor</a>&gt;::<a class=\"associatedtype\" href=\"devela/all/trait.BitXor.html#associatedtype.Output\" title=\"type devela::all::BitXor::Output\">Output</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&lt;i32 as BitXor&gt;::Output\">ⓘ</a></h4></section></summary><div class='docblock'>Performs the <code>^</code> operation. <a href=\"devela/all/trait.BitXor.html#tymethod.bitxor\">Read more</a></div></details></div></details>","BitXor<&i32>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitXor-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/143802\" title=\"Tracking issue for const_ops\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#399\">Source</a></span><a href=\"#impl-BitXor-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"devela/all/trait.BitXor.html\" title=\"trait devela::all::BitXor\">BitXor</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#399\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"devela/all/trait.BitXor.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>^</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitxor\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#399\">Source</a><a href=\"#method.bitxor\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.BitXor.html#tymethod.bitxor\" class=\"fn\">bitxor</a>(self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a></h4></section></summary><div class='docblock'>Performs the <code>^</code> operation. <a href=\"devela/all/trait.BitXor.html#tymethod.bitxor\">Read more</a></div></details></div></details>","BitXor","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitXorAssign%3C%26i32%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0, const unstable\">1.22.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/143802\" title=\"Tracking issue for const_ops\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#914\">Source</a></span><a href=\"#impl-BitXorAssign%3C%26i32%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"devela/all/trait.BitXorAssign.html\" title=\"trait devela::all::BitXorAssign\">BitXorAssign</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitxor_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#914\">Source</a><a href=\"#method.bitxor_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.BitXorAssign.html#tymethod.bitxor_assign\" class=\"fn\">bitxor_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>)</h4></section></summary><div class='docblock'>Performs the <code>^=</code> operation. <a href=\"devela/all/trait.BitXorAssign.html#tymethod.bitxor_assign\">Read more</a></div></details></div></details>","BitXorAssign<&i32>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitXorAssign-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0, const unstable\">1.8.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/143802\" title=\"Tracking issue for const_ops\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#914\">Source</a></span><a href=\"#impl-BitXorAssign-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"devela/all/trait.BitXorAssign.html\" title=\"trait devela::all::BitXorAssign\">BitXorAssign</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitxor_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#914\">Source</a><a href=\"#method.bitxor_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.BitXorAssign.html#tymethod.bitxor_assign\" class=\"fn\">bitxor_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>)</h4></section></summary><div class='docblock'>Performs the <code>^=</code> operation. <a href=\"devela/all/trait.BitXorAssign.html#tymethod.bitxor_assign\">Read more</a></div></details></div></details>","BitXorAssign","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Bits-for-i32\" class=\"impl\"><a href=\"#impl-Bits-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl Bits for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedconstant.EMPTY\" class=\"associatedconstant trait-impl\"><a href=\"#associatedconstant.EMPTY\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a class=\"constant\">EMPTY</a>: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> = 0i32</h4></section></summary><div class='docblock'>A value with all bits unset.</div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.ALL\" class=\"associatedconstant trait-impl\"><a href=\"#associatedconstant.ALL\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a class=\"constant\">ALL</a>: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> = -1i32</h4></section></summary><div class='docblock'>A value with all bits set.</div></details></div></details>","Bits","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Bounded-for-i32\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/bounds.rs.html#67\">Source</a><a href=\"#impl-Bounded-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://docs.rs/num-traits/0.2/num_traits/bounds/trait.Bounded.html\" title=\"trait num_traits::bounds::Bounded\">Bounded</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.min_value\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/bounds.rs.html#67\">Source</a><a href=\"#method.min_value\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/bounds/trait.Bounded.html#tymethod.min_value\" class=\"fn\">min_value</a>() -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a></h4></section></summary><div class='docblock'>Returns the smallest finite number this type can represent</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.max_value\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/bounds.rs.html#67\">Source</a><a href=\"#method.max_value\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/bounds/trait.Bounded.html#tymethod.max_value\" class=\"fn\">max_value</a>() -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a></h4></section></summary><div class='docblock'>Returns the largest finite number this type can represent</div></details></div></details>","Bounded","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-CarryingMulAdd-for-i32\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/intrinsics/fallback.rs.html#35-46\">Source</a><a href=\"#impl-CarryingMulAdd-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/intrinsics/fallback/trait.CarryingMulAdd.html\" title=\"trait core::intrinsics::fallback::CarryingMulAdd\">CarryingMulAdd</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Unsigned\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/intrinsics/fallback.rs.html#35-46\">Source</a><a href=\"#associatedtype.Unsigned\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/intrinsics/fallback/trait.CarryingMulAdd.html#associatedtype.Unsigned\" class=\"associatedtype\">Unsigned</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>core_intrinsics_fallbacks</code>)</span></div></span></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.carrying_mul_add\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/intrinsics/fallback.rs.html#35-46\">Source</a><a href=\"#method.carrying_mul_add\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/intrinsics/fallback/trait.CarryingMulAdd.html#tymethod.carrying_mul_add\" class=\"fn\">carrying_mul_add</a>(self, a: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>, b: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>, c: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>) -&gt; (<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>) <a href=\"#\" class=\"tooltip\" data-notable-ty=\"(u32, i32)\">ⓘ</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>core_intrinsics_fallbacks</code>)</span></div></span></details></div></details>","CarryingMulAdd","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-CheckedAdd-for-i32\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/ops/checked.rs.html#31\">Source</a><a href=\"#impl-CheckedAdd-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://docs.rs/num-traits/0.2/num_traits/ops/checked/trait.CheckedAdd.html\" title=\"trait num_traits::ops::checked::CheckedAdd\">CheckedAdd</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_add\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/ops/checked.rs.html#31\">Source</a><a href=\"#method.checked_add\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/ops/checked/trait.CheckedAdd.html#tymethod.checked_add\" class=\"fn\">checked_add</a>(&amp;self, v: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>) -&gt; <a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Option&lt;i32&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Adds two numbers, checking for overflow. If overflow happens, <code>None</code> is\nreturned.</div></details></div></details>","CheckedAdd","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-CheckedDiv-for-i32\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/ops/checked.rs.html#96\">Source</a><a href=\"#impl-CheckedDiv-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://docs.rs/num-traits/0.2/num_traits/ops/checked/trait.CheckedDiv.html\" title=\"trait num_traits::ops::checked::CheckedDiv\">CheckedDiv</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_div\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/ops/checked.rs.html#96\">Source</a><a href=\"#method.checked_div\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/ops/checked/trait.CheckedDiv.html#tymethod.checked_div\" class=\"fn\">checked_div</a>(&amp;self, v: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>) -&gt; <a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Option&lt;i32&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Divides two numbers, checking for underflow, overflow and division by\nzero. If any of that happens, <code>None</code> is returned.</div></details></div></details>","CheckedDiv","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-CheckedEuclid-for-i32\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/ops/euclid.rs.html#184\">Source</a><a href=\"#impl-CheckedEuclid-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://docs.rs/num-traits/0.2/num_traits/ops/euclid/trait.CheckedEuclid.html\" title=\"trait num_traits::ops::euclid::CheckedEuclid\">CheckedEuclid</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_div_euclid\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/ops/euclid.rs.html#184\">Source</a><a href=\"#method.checked_div_euclid\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/ops/euclid/trait.CheckedEuclid.html#tymethod.checked_div_euclid\" class=\"fn\">checked_div_euclid</a>(&amp;self, v: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>) -&gt; <a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Option&lt;i32&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Performs euclid division that returns <code>None</code> instead of panicking on division by zero\nand instead of wrapping around on underflow and overflow.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_rem_euclid\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/ops/euclid.rs.html#184\">Source</a><a href=\"#method.checked_rem_euclid\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/ops/euclid/trait.CheckedEuclid.html#tymethod.checked_rem_euclid\" class=\"fn\">checked_rem_euclid</a>(&amp;self, v: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>) -&gt; <a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Option&lt;i32&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Finds the euclid remainder of dividing two numbers, checking for underflow, overflow and\ndivision by zero. If any of that happens, <code>None</code> is returned.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_div_rem_euclid\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/ops/euclid.rs.html#163\">Source</a><a href=\"#method.checked_div_rem_euclid\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/ops/euclid/trait.CheckedEuclid.html#method.checked_div_rem_euclid\" class=\"fn\">checked_div_rem_euclid</a>(&amp;self, v: &amp;Self) -&gt; <a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;(Self, Self)&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Option&lt;(Self, Self)&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Returns both the quotient and remainder from checked Euclidean division. <a href=\"https://docs.rs/num-traits/0.2/num_traits/ops/euclid/trait.CheckedEuclid.html#method.checked_div_rem_euclid\">Read more</a></div></details></div></details>","CheckedEuclid","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-CheckedMul-for-i32\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/ops/checked.rs.html#74\">Source</a><a href=\"#impl-CheckedMul-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://docs.rs/num-traits/0.2/num_traits/ops/checked/trait.CheckedMul.html\" title=\"trait num_traits::ops::checked::CheckedMul\">CheckedMul</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_mul\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/ops/checked.rs.html#74\">Source</a><a href=\"#method.checked_mul\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/ops/checked/trait.CheckedMul.html#tymethod.checked_mul\" class=\"fn\">checked_mul</a>(&amp;self, v: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>) -&gt; <a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Option&lt;i32&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Multiplies two numbers, checking for underflow or overflow. If underflow\nor overflow happens, <code>None</code> is returned.</div></details></div></details>","CheckedMul","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-CheckedNeg-for-i32\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/ops/checked.rs.html#181\">Source</a><a href=\"#impl-CheckedNeg-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://docs.rs/num-traits/0.2/num_traits/ops/checked/trait.CheckedNeg.html\" title=\"trait num_traits::ops::checked::CheckedNeg\">CheckedNeg</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_neg\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/ops/checked.rs.html#181\">Source</a><a href=\"#method.checked_neg\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/ops/checked/trait.CheckedNeg.html#tymethod.checked_neg\" class=\"fn\">checked_neg</a>(&amp;self) -&gt; <a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Option&lt;i32&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Negates a number, returning <code>None</code> for results that can’t be represented, like signed <code>MIN</code>\nvalues that can’t be positive, or non-zero unsigned values that can’t be negative. <a href=\"https://docs.rs/num-traits/0.2/num_traits/ops/checked/trait.CheckedNeg.html#tymethod.checked_neg\">Read more</a></div></details></div></details>","CheckedNeg","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-CheckedRem-for-i32\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/ops/checked.rs.html#135\">Source</a><a href=\"#impl-CheckedRem-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://docs.rs/num-traits/0.2/num_traits/ops/checked/trait.CheckedRem.html\" title=\"trait num_traits::ops::checked::CheckedRem\">CheckedRem</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_rem\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/ops/checked.rs.html#135\">Source</a><a href=\"#method.checked_rem\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/ops/checked/trait.CheckedRem.html#tymethod.checked_rem\" class=\"fn\">checked_rem</a>(&amp;self, v: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>) -&gt; <a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Option&lt;i32&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Finds the remainder of dividing two numbers, checking for underflow, overflow and division\nby zero. If any of that happens, <code>None</code> is returned. <a href=\"https://docs.rs/num-traits/0.2/num_traits/ops/checked/trait.CheckedRem.html#tymethod.checked_rem\">Read more</a></div></details></div></details>","CheckedRem","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-CheckedShl-for-i32\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/ops/checked.rs.html#225\">Source</a><a href=\"#impl-CheckedShl-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://docs.rs/num-traits/0.2/num_traits/ops/checked/trait.CheckedShl.html\" title=\"trait num_traits::ops::checked::CheckedShl\">CheckedShl</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_shl\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/ops/checked.rs.html#225\">Source</a><a href=\"#method.checked_shl\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/ops/checked/trait.CheckedShl.html#tymethod.checked_shl\" class=\"fn\">checked_shl</a>(&amp;self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>) -&gt; <a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Option&lt;i32&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Checked shift left. Computes <code>self &lt;&lt; rhs</code>, returning <code>None</code>\nif <code>rhs</code> is larger than or equal to the number of bits in <code>self</code>. <a href=\"https://docs.rs/num-traits/0.2/num_traits/ops/checked/trait.CheckedShl.html#tymethod.checked_shl\">Read more</a></div></details></div></details>","CheckedShl","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-CheckedShr-for-i32\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/ops/checked.rs.html#258\">Source</a><a href=\"#impl-CheckedShr-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://docs.rs/num-traits/0.2/num_traits/ops/checked/trait.CheckedShr.html\" title=\"trait num_traits::ops::checked::CheckedShr\">CheckedShr</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_shr\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/ops/checked.rs.html#258\">Source</a><a href=\"#method.checked_shr\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/ops/checked/trait.CheckedShr.html#tymethod.checked_shr\" class=\"fn\">checked_shr</a>(&amp;self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>) -&gt; <a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Option&lt;i32&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Checked shift right. Computes <code>self &gt;&gt; rhs</code>, returning <code>None</code>\nif <code>rhs</code> is larger than or equal to the number of bits in <code>self</code>. <a href=\"https://docs.rs/num-traits/0.2/num_traits/ops/checked/trait.CheckedShr.html#tymethod.checked_shr\">Read more</a></div></details></div></details>","CheckedShr","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-CheckedSub-for-i32\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/ops/checked.rs.html#52\">Source</a><a href=\"#impl-CheckedSub-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://docs.rs/num-traits/0.2/num_traits/ops/checked/trait.CheckedSub.html\" title=\"trait num_traits::ops::checked::CheckedSub\">CheckedSub</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_sub\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/ops/checked.rs.html#52\">Source</a><a href=\"#method.checked_sub\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/ops/checked/trait.CheckedSub.html#tymethod.checked_sub\" class=\"fn\">checked_sub</a>(&amp;self, v: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>) -&gt; <a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Option&lt;i32&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Subtracts two numbers, checking for underflow. If underflow happens,\n<code>None</code> is returned.</div></details></div></details>","CheckedSub","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/clone.rs.html#589-594\">Source</a></span><a href=\"#impl-Clone-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"devela/code/trait.Clone.html\" title=\"trait devela::code::Clone\">Clone</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/clone.rs.html#589-594\">Source</a><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/code/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a></h4></section></summary><div class='docblock'>Returns a duplicate of the value. <a href=\"devela/code/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/clone.rs.html#246-248\">Source</a></span><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/code/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: &amp;Self)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a href=\"devela/code/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details>","Clone","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ConditionallySelectable-for-i32\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/subtle/2.6.0/src/subtle/lib.rs.html#543\">Source</a><a href=\"#impl-ConditionallySelectable-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://docs.rs/subtle/2.6.0/subtle/trait.ConditionallySelectable.html\" title=\"trait subtle::ConditionallySelectable\">ConditionallySelectable</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.conditional_select\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/subtle/2.6.0/src/subtle/lib.rs.html#543\">Source</a><a href=\"#method.conditional_select\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/subtle/2.6.0/subtle/trait.ConditionallySelectable.html#tymethod.conditional_select\" class=\"fn\">conditional_select</a>(a: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>, b: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>, choice: <a class=\"struct\" href=\"https://docs.rs/subtle/2.6.0/subtle/struct.Choice.html\" title=\"struct subtle::Choice\">Choice</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a></h4></section></summary><div class='docblock'>Select <code>a</code> or <code>b</code> according to <code>choice</code>. <a href=\"https://docs.rs/subtle/2.6.0/subtle/trait.ConditionallySelectable.html#tymethod.conditional_select\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.conditional_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/subtle/2.6.0/src/subtle/lib.rs.html#543\">Source</a><a href=\"#method.conditional_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/subtle/2.6.0/subtle/trait.ConditionallySelectable.html#method.conditional_assign\" class=\"fn\">conditional_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>, choice: <a class=\"struct\" href=\"https://docs.rs/subtle/2.6.0/subtle/struct.Choice.html\" title=\"struct subtle::Choice\">Choice</a>)</h4></section></summary><div class='docblock'>Conditionally assign <code>other</code> to <code>self</code>, according to <code>choice</code>. <a href=\"https://docs.rs/subtle/2.6.0/subtle/trait.ConditionallySelectable.html#method.conditional_assign\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.conditional_swap\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/subtle/2.6.0/src/subtle/lib.rs.html#543\">Source</a><a href=\"#method.conditional_swap\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/subtle/2.6.0/subtle/trait.ConditionallySelectable.html#method.conditional_swap\" class=\"fn\">conditional_swap</a>(a: &amp;mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>, b: &amp;mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>, choice: <a class=\"struct\" href=\"https://docs.rs/subtle/2.6.0/subtle/struct.Choice.html\" title=\"struct subtle::Choice\">Choice</a>)</h4></section></summary><div class='docblock'>Conditionally swap <code>self</code> and <code>other</code> if <code>choice == 1</code>; otherwise,\nreassign both unto themselves. <a href=\"https://docs.rs/subtle/2.6.0/subtle/trait.ConditionallySelectable.html#method.conditional_swap\">Read more</a></div></details></div></details>","ConditionallySelectable","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ConstDefault-for-i32\" class=\"impl\"><a class=\"src rightside\" href=\"src/devela/code/default.rs.html#159\">Source</a><a href=\"#impl-ConstDefault-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"devela/code/trait.ConstDefault.html\" title=\"trait devela::code::ConstDefault\">ConstDefault</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedconstant.DEFAULT\" class=\"associatedconstant trait-impl\"><a class=\"src rightside\" href=\"src/devela/code/default.rs.html#159\">Source</a><a href=\"#associatedconstant.DEFAULT\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a href=\"devela/code/trait.ConstDefault.html#associatedconstant.DEFAULT\" class=\"constant\">DEFAULT</a>: Self = 0i32</h4></section></summary><div class='docblock'>Returns the compile-time “default value” for a type.</div></details></div></details>","ConstDefault","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ConstOne-for-i32\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/identities.rs.html#172\">Source</a><a href=\"#impl-ConstOne-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://docs.rs/num-traits/0.2/num_traits/identities/trait.ConstOne.html\" title=\"trait num_traits::identities::ConstOne\">ConstOne</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedconstant.ONE\" class=\"associatedconstant trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/identities.rs.html#172\">Source</a><a href=\"#associatedconstant.ONE\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a href=\"https://docs.rs/num-traits/0.2/num_traits/identities/trait.ConstOne.html#associatedconstant.ONE\" class=\"constant\">ONE</a>: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> = 1i32</h4></section></summary><div class='docblock'>The multiplicative identity element of <code>Self</code>, <code>1</code>.</div></details></div></details>","ConstOne","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ConstZero-for-i32\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/identities.rs.html#67\">Source</a><a href=\"#impl-ConstZero-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://docs.rs/num-traits/0.2/num_traits/identities/trait.ConstZero.html\" title=\"trait num_traits::identities::ConstZero\">ConstZero</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedconstant.ZERO\" class=\"associatedconstant trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/identities.rs.html#67\">Source</a><a href=\"#associatedconstant.ZERO\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a href=\"https://docs.rs/num-traits/0.2/num_traits/identities/trait.ConstZero.html#associatedconstant.ZERO\" class=\"constant\">ZERO</a>: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> = 0i32</h4></section></summary><div class='docblock'>The additive identity element of <code>Self</code>, <code>0</code>.</div></details></div></details>","ConstZero","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ConstantTimeEq-for-i32\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/subtle/2.6.0/src/subtle/lib.rs.html#372\">Source</a><a href=\"#impl-ConstantTimeEq-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://docs.rs/subtle/2.6.0/subtle/trait.ConstantTimeEq.html\" title=\"trait subtle::ConstantTimeEq\">ConstantTimeEq</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.ct_eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/subtle/2.6.0/src/subtle/lib.rs.html#372\">Source</a><a href=\"#method.ct_eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/subtle/2.6.0/subtle/trait.ConstantTimeEq.html#tymethod.ct_eq\" class=\"fn\">ct_eq</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>) -&gt; <a class=\"struct\" href=\"https://docs.rs/subtle/2.6.0/subtle/struct.Choice.html\" title=\"struct subtle::Choice\">Choice</a></h4></section></summary><div class='docblock'>Determine if two items are equal. <a href=\"https://docs.rs/subtle/2.6.0/subtle/trait.ConstantTimeEq.html#tymethod.ct_eq\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ct_ne\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/subtle/2.6.0/src/subtle/lib.rs.html#284\">Source</a><a href=\"#method.ct_ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/subtle/2.6.0/subtle/trait.ConstantTimeEq.html#method.ct_ne\" class=\"fn\">ct_ne</a>(&amp;self, other: &amp;Self) -&gt; <a class=\"struct\" href=\"https://docs.rs/subtle/2.6.0/subtle/struct.Choice.html\" title=\"struct subtle::Choice\">Choice</a></h4></section></summary><div class='docblock'>Determine if two items are NOT equal. <a href=\"https://docs.rs/subtle/2.6.0/subtle/trait.ConstantTimeEq.html#method.ct_ne\">Read more</a></div></details></div></details>","ConstantTimeEq","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Contiguous-for-i32\" class=\"impl\"><a href=\"#impl-Contiguous-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl Contiguous for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedconstant.MAX_VALUE\" class=\"associatedconstant trait-impl\"><a href=\"#associatedconstant.MAX_VALUE\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a class=\"constant\">MAX_VALUE</a>: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> = 2_147_483_647i32</h4></section></summary><div class='docblock'>The upper <em>inclusive</em> bound for valid instances of this type.</div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.MIN_VALUE\" class=\"associatedconstant trait-impl\"><a href=\"#associatedconstant.MIN_VALUE\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a class=\"constant\">MIN_VALUE</a>: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> = -2_147_483_648i32</h4></section></summary><div class='docblock'>The lower <em>inclusive</em> bound for valid instances of this type.</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Int\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Int\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Int</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h4></section></summary><div class='docblock'>The primitive integer type with an identical representation to this\ntype. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_integer\" class=\"method trait-impl\"><a href=\"#method.from_integer\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">from_integer</a>(value: Self::Int) -&gt; <a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;Self&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Option&lt;Self&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>If <code>value</code> is within the range for valid instances of this type,\nreturns <code>Some(converted_value)</code>, otherwise, returns <code>None</code>. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_integer\" class=\"method trait-impl\"><a href=\"#method.into_integer\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">into_integer</a>(self) -&gt; Self::Int</h4></section></summary><div class='docblock'>Perform the conversion from <code>C</code> into the underlying integral type. This\nmostly exists otherwise generic code would need unsafe for the <code>value as integer</code> <a>Read more</a></div></details></div></details>","Contiguous","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/fmt/num.rs.html#552-555\">Source</a></span><a href=\"#impl-Debug-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"devela/all/trait.Debug.html\" title=\"trait devela::all::Debug\">Debug</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/fmt/num.rs.html#552-555\">Source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"devela/all/struct.Formatter.html\" title=\"struct devela::all::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"devela/all/struct.FmtError.html\" title=\"struct devela::all::FmtError\">Error</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;(), Error&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"devela/all/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Default-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/143894\" title=\"Tracking issue for const_default\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/default.rs.html#180\">Source</a></span><a href=\"#impl-Default-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"devela/code/trait.Default.html\" title=\"trait devela::code::Default\">Default</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.default\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/default.rs.html#180\">Source</a><a href=\"#method.default\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/code/trait.Default.html#tymethod.default\" class=\"fn\">default</a>() -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Returns the default value of <code>0</code></p>\n</div></details></div></details>","Default","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Deserialize%3C'de%3E-for-i32\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/serde/1.0.221/src/serde_core/de/impls.rs.html#391-397\">Source</a><a href=\"#impl-Deserialize%3C'de%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'de&gt; <a class=\"trait\" href=\"https://docs.rs/serde/1.0.221/serde_core/de/trait.Deserialize.html\" title=\"trait serde_core::de::Deserialize\">Deserialize</a>&lt;'de&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.deserialize\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/serde/1.0.221/src/serde_core/de/impls.rs.html#391-397\">Source</a><a href=\"#method.deserialize\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/serde/1.0.221/serde_core/de/trait.Deserialize.html#tymethod.deserialize\" class=\"fn\">deserialize</a>&lt;D&gt;(\n    deserializer: D,\n) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>, &lt;D as <a class=\"trait\" href=\"https://docs.rs/serde/1.0.221/serde_core/de/trait.Deserializer.html\" title=\"trait serde_core::de::Deserializer\">Deserializer</a>&lt;'de&gt;&gt;::<a class=\"associatedtype\" href=\"https://docs.rs/serde/1.0.221/serde_core/de/trait.Deserializer.html#associatedtype.Error\" title=\"type serde_core::de::Deserializer::Error\">Error</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;i32, &lt;D as Deserializer&lt;&#39;de&gt;&gt;::Error&gt;\">ⓘ</a><div class=\"where\">where\n    D: <a class=\"trait\" href=\"https://docs.rs/serde/1.0.221/serde_core/de/trait.Deserializer.html\" title=\"trait serde_core::de::Deserializer\">Deserializer</a>&lt;'de&gt;,</div></h4></section></summary><div class='docblock'>Deserialize this value from the given Serde deserializer. <a href=\"https://docs.rs/serde/1.0.221/serde_core/de/trait.Deserialize.html#tymethod.deserialize\">Read more</a></div></details></div></details>","Deserialize<'de>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-DisjointBitOr-for-i32\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/intrinsics/fallback.rs.html#146-150\">Source</a><a href=\"#impl-DisjointBitOr-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/intrinsics/fallback/trait.DisjointBitOr.html\" title=\"trait core::intrinsics::fallback::DisjointBitOr\">DisjointBitOr</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.disjoint_bitor\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/intrinsics/fallback.rs.html#146-150\">Source</a><a href=\"#method.disjoint_bitor\" class=\"anchor\">§</a><h4 class=\"code-header\">unsafe fn <a href=\"https://doc.rust-lang.org/nightly/core/intrinsics/fallback/trait.DisjointBitOr.html#tymethod.disjoint_bitor\" class=\"fn\">disjoint_bitor</a>(self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>core_intrinsics_fallbacks</code>)</span></div></span><div class='docblock'>See <a href=\"https://doc.rust-lang.org/nightly/core/intrinsics/fn.disjoint_bitor.html\" title=\"fn core::intrinsics::disjoint_bitor\"><code>super::disjoint_bitor</code></a>; we just need the trait indirection to handle\ndifferent types since calling intrinsics with generics doesn’t work.</div></details></div></details>","DisjointBitOr","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Display-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/fmt/num.rs.html#562\">Source</a></span><a href=\"#impl-Display-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"devela/all/trait.Display.html\" title=\"trait devela::all::Display\">Display</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/fmt/num.rs.html#562\">Source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Display.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"devela/all/struct.Formatter.html\" title=\"struct devela::all::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"devela/all/struct.FmtError.html\" title=\"struct devela::all::FmtError\">Error</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;(), Error&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"devela/all/trait.Display.html#tymethod.fmt\">Read more</a></div></details></div></details>","Display","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Div%3C%26BigInt%3E-for-i32\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-bigint/0.4/src/num_bigint/bigint/division.rs.html#121\">Source</a><a href=\"#impl-Div%3C%26BigInt%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"devela/all/trait.Div.html\" title=\"trait devela::all::Div\">Div</a>&lt;&amp;<a class=\"struct\" href=\"https://docs.rs/num-bigint/0.4/num_bigint/bigint/struct.BigInt.html\" title=\"struct num_bigint::bigint::BigInt\">BigInt</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-bigint/0.4/src/num_bigint/bigint/division.rs.html#121\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"devela/all/trait.Div.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"https://docs.rs/num-bigint/0.4/num_bigint/bigint/struct.BigInt.html\" title=\"struct num_bigint::bigint::BigInt\">BigInt</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>/</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.div\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-bigint/0.4/src/num_bigint/bigint/division.rs.html#121\">Source</a><a href=\"#method.div\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Div.html#tymethod.div\" class=\"fn\">div</a>(self, other: &amp;<a class=\"struct\" href=\"https://docs.rs/num-bigint/0.4/num_bigint/bigint/struct.BigInt.html\" title=\"struct num_bigint::bigint::BigInt\">BigInt</a>) -&gt; <a class=\"struct\" href=\"https://docs.rs/num-bigint/0.4/num_bigint/bigint/struct.BigInt.html\" title=\"struct num_bigint::bigint::BigInt\">BigInt</a></h4></section></summary><div class='docblock'>Performs the <code>/</code> operation. <a href=\"devela/all/trait.Div.html#tymethod.div\">Read more</a></div></details></div></details>","Div<&BigInt>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Div%3C%26IVec2%3E-for-i32\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/glam/0.30.5/src/glam/i32/ivec2.rs.html#926\">Source</a><a href=\"#impl-Div%3C%26IVec2%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"devela/all/trait.Div.html\" title=\"trait devela::all::Div\">Div</a>&lt;&amp;<a class=\"struct\" href=\"https://docs.rs/glam/0.30.5/glam/i32/ivec2/struct.IVec2.html\" title=\"struct glam::i32::ivec2::IVec2\">IVec2</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/glam/0.30.5/src/glam/i32/ivec2.rs.html#927\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"devela/all/trait.Div.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"https://docs.rs/glam/0.30.5/glam/i32/ivec2/struct.IVec2.html\" title=\"struct glam::i32::ivec2::IVec2\">IVec2</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>/</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.div\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/glam/0.30.5/src/glam/i32/ivec2.rs.html#929\">Source</a><a href=\"#method.div\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Div.html#tymethod.div\" class=\"fn\">div</a>(self, rhs: &amp;<a class=\"struct\" href=\"https://docs.rs/glam/0.30.5/glam/i32/ivec2/struct.IVec2.html\" title=\"struct glam::i32::ivec2::IVec2\">IVec2</a>) -&gt; <a class=\"struct\" href=\"https://docs.rs/glam/0.30.5/glam/i32/ivec2/struct.IVec2.html\" title=\"struct glam::i32::ivec2::IVec2\">IVec2</a></h4></section></summary><div class='docblock'>Performs the <code>/</code> operation. <a href=\"devela/all/trait.Div.html#tymethod.div\">Read more</a></div></details></div></details>","Div<&IVec2>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Div%3C%26IVec3%3E-for-i32\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/glam/0.30.5/src/glam/i32/ivec3.rs.html#1021\">Source</a><a href=\"#impl-Div%3C%26IVec3%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"devela/all/trait.Div.html\" title=\"trait devela::all::Div\">Div</a>&lt;&amp;<a class=\"struct\" href=\"https://docs.rs/glam/0.30.5/glam/i32/ivec3/struct.IVec3.html\" title=\"struct glam::i32::ivec3::IVec3\">IVec3</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/glam/0.30.5/src/glam/i32/ivec3.rs.html#1022\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"devela/all/trait.Div.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"https://docs.rs/glam/0.30.5/glam/i32/ivec3/struct.IVec3.html\" title=\"struct glam::i32::ivec3::IVec3\">IVec3</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>/</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.div\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/glam/0.30.5/src/glam/i32/ivec3.rs.html#1024\">Source</a><a href=\"#method.div\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Div.html#tymethod.div\" class=\"fn\">div</a>(self, rhs: &amp;<a class=\"struct\" href=\"https://docs.rs/glam/0.30.5/glam/i32/ivec3/struct.IVec3.html\" title=\"struct glam::i32::ivec3::IVec3\">IVec3</a>) -&gt; <a class=\"struct\" href=\"https://docs.rs/glam/0.30.5/glam/i32/ivec3/struct.IVec3.html\" title=\"struct glam::i32::ivec3::IVec3\">IVec3</a></h4></section></summary><div class='docblock'>Performs the <code>/</code> operation. <a href=\"devela/all/trait.Div.html#tymethod.div\">Read more</a></div></details></div></details>","Div<&IVec3>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Div%3C%26IVec4%3E-for-i32\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/glam/0.30.5/src/glam/i32/ivec4.rs.html#1106\">Source</a><a href=\"#impl-Div%3C%26IVec4%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"devela/all/trait.Div.html\" title=\"trait devela::all::Div\">Div</a>&lt;&amp;<a class=\"struct\" href=\"https://docs.rs/glam/0.30.5/glam/i32/ivec4/struct.IVec4.html\" title=\"struct glam::i32::ivec4::IVec4\">IVec4</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/glam/0.30.5/src/glam/i32/ivec4.rs.html#1107\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"devela/all/trait.Div.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"https://docs.rs/glam/0.30.5/glam/i32/ivec4/struct.IVec4.html\" title=\"struct glam::i32::ivec4::IVec4\">IVec4</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>/</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.div\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/glam/0.30.5/src/glam/i32/ivec4.rs.html#1109\">Source</a><a href=\"#method.div\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Div.html#tymethod.div\" class=\"fn\">div</a>(self, rhs: &amp;<a class=\"struct\" href=\"https://docs.rs/glam/0.30.5/glam/i32/ivec4/struct.IVec4.html\" title=\"struct glam::i32::ivec4::IVec4\">IVec4</a>) -&gt; <a class=\"struct\" href=\"https://docs.rs/glam/0.30.5/glam/i32/ivec4/struct.IVec4.html\" title=\"struct glam::i32::ivec4::IVec4\">IVec4</a></h4></section></summary><div class='docblock'>Performs the <code>/</code> operation. <a href=\"devela/all/trait.Div.html#tymethod.div\">Read more</a></div></details></div></details>","Div<&IVec4>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Div%3C%26i32%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/143802\" title=\"Tracking issue for const_ops\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/arith.rs.html#508-511\">Source</a></span><a href=\"#impl-Div%3C%26i32%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"devela/all/trait.Div.html\" title=\"trait devela::all::Div\">Div</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/arith.rs.html#508-511\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"devela/all/trait.Div.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> as <a class=\"trait\" href=\"devela/all/trait.Div.html\" title=\"trait devela::all::Div\">Div</a>&gt;::<a class=\"associatedtype\" href=\"devela/all/trait.Div.html#associatedtype.Output\" title=\"type devela::all::Div::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>/</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.div\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/arith.rs.html#508-511\">Source</a><a href=\"#method.div\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Div.html#tymethod.div\" class=\"fn\">div</a>(self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>) -&gt; &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> as <a class=\"trait\" href=\"devela/all/trait.Div.html\" title=\"trait devela::all::Div\">Div</a>&gt;::<a class=\"associatedtype\" href=\"devela/all/trait.Div.html#associatedtype.Output\" title=\"type devela::all::Div::Output\">Output</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&lt;i32 as Div&gt;::Output\">ⓘ</a></h4></section></summary><div class='docblock'>Performs the <code>/</code> operation. <a href=\"devela/all/trait.Div.html#tymethod.div\">Read more</a></div></details></div></details>","Div<&i32>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Div%3CBigInt%3E-for-i32\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-bigint/0.4/src/num_bigint/bigint/division.rs.html#150\">Source</a><a href=\"#impl-Div%3CBigInt%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"devela/all/trait.Div.html\" title=\"trait devela::all::Div\">Div</a>&lt;<a class=\"struct\" href=\"https://docs.rs/num-bigint/0.4/num_bigint/bigint/struct.BigInt.html\" title=\"struct num_bigint::bigint::BigInt\">BigInt</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-bigint/0.4/src/num_bigint/bigint/division.rs.html#151\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"devela/all/trait.Div.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"https://docs.rs/num-bigint/0.4/num_bigint/bigint/struct.BigInt.html\" title=\"struct num_bigint::bigint::BigInt\">BigInt</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>/</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.div\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-bigint/0.4/src/num_bigint/bigint/division.rs.html#154\">Source</a><a href=\"#method.div\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Div.html#tymethod.div\" class=\"fn\">div</a>(self, other: <a class=\"struct\" href=\"https://docs.rs/num-bigint/0.4/num_bigint/bigint/struct.BigInt.html\" title=\"struct num_bigint::bigint::BigInt\">BigInt</a>) -&gt; <a class=\"struct\" href=\"https://docs.rs/num-bigint/0.4/num_bigint/bigint/struct.BigInt.html\" title=\"struct num_bigint::bigint::BigInt\">BigInt</a></h4></section></summary><div class='docblock'>Performs the <code>/</code> operation. <a href=\"devela/all/trait.Div.html#tymethod.div\">Read more</a></div></details></div></details>","Div<BigInt>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Div%3CDivisor%3Ci32%3E%3E-for-i32\" class=\"impl\"><a href=\"#impl-Div%3CDivisor%3Ci32%3E%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"devela/all/trait.Div.html\" title=\"trait devela::all::Div\">Div</a>&lt;<a class=\"struct\" href=\"devela/num/struct.Divisor.html\" title=\"struct devela::num::Divisor\">Divisor</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>&gt;&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"devela/all/trait.Div.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>/</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.div\" class=\"method trait-impl\"><a href=\"#method.div\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Div.html#tymethod.div\" class=\"fn\">div</a>(self, rhs: <a class=\"struct\" href=\"devela/num/struct.Divisor.html\" title=\"struct devela::num::Divisor\">Divisor</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>&gt;) -&gt; &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> as <a class=\"trait\" href=\"devela/all/trait.Div.html\" title=\"trait devela::all::Div\">Div</a>&lt;<a class=\"struct\" href=\"devela/num/struct.Divisor.html\" title=\"struct devela::num::Divisor\">Divisor</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"devela/all/trait.Div.html#associatedtype.Output\" title=\"type devela::all::Div::Output\">Output</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&lt;i32 as Div&lt;Divisor&lt;i32&gt;&gt;&gt;::Output\">ⓘ</a></h4></section></summary><div class='docblock'>Performs the <code>/</code> operation. <a href=\"devela/all/trait.Div.html#tymethod.div\">Read more</a></div></details></div></details>","Div<Divisor<i32>>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Div%3CIVec2%3E-for-i32\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/glam/0.30.5/src/glam/i32/ivec2.rs.html#915\">Source</a><a href=\"#impl-Div%3CIVec2%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"devela/all/trait.Div.html\" title=\"trait devela::all::Div\">Div</a>&lt;<a class=\"struct\" href=\"https://docs.rs/glam/0.30.5/glam/i32/ivec2/struct.IVec2.html\" title=\"struct glam::i32::ivec2::IVec2\">IVec2</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/glam/0.30.5/src/glam/i32/ivec2.rs.html#916\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"devela/all/trait.Div.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"https://docs.rs/glam/0.30.5/glam/i32/ivec2/struct.IVec2.html\" title=\"struct glam::i32::ivec2::IVec2\">IVec2</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>/</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.div\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/glam/0.30.5/src/glam/i32/ivec2.rs.html#918\">Source</a><a href=\"#method.div\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Div.html#tymethod.div\" class=\"fn\">div</a>(self, rhs: <a class=\"struct\" href=\"https://docs.rs/glam/0.30.5/glam/i32/ivec2/struct.IVec2.html\" title=\"struct glam::i32::ivec2::IVec2\">IVec2</a>) -&gt; <a class=\"struct\" href=\"https://docs.rs/glam/0.30.5/glam/i32/ivec2/struct.IVec2.html\" title=\"struct glam::i32::ivec2::IVec2\">IVec2</a></h4></section></summary><div class='docblock'>Performs the <code>/</code> operation. <a href=\"devela/all/trait.Div.html#tymethod.div\">Read more</a></div></details></div></details>","Div<IVec2>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Div%3CIVec3%3E-for-i32\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/glam/0.30.5/src/glam/i32/ivec3.rs.html#1009\">Source</a><a href=\"#impl-Div%3CIVec3%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"devela/all/trait.Div.html\" title=\"trait devela::all::Div\">Div</a>&lt;<a class=\"struct\" href=\"https://docs.rs/glam/0.30.5/glam/i32/ivec3/struct.IVec3.html\" title=\"struct glam::i32::ivec3::IVec3\">IVec3</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/glam/0.30.5/src/glam/i32/ivec3.rs.html#1010\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"devela/all/trait.Div.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"https://docs.rs/glam/0.30.5/glam/i32/ivec3/struct.IVec3.html\" title=\"struct glam::i32::ivec3::IVec3\">IVec3</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>/</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.div\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/glam/0.30.5/src/glam/i32/ivec3.rs.html#1012\">Source</a><a href=\"#method.div\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Div.html#tymethod.div\" class=\"fn\">div</a>(self, rhs: <a class=\"struct\" href=\"https://docs.rs/glam/0.30.5/glam/i32/ivec3/struct.IVec3.html\" title=\"struct glam::i32::ivec3::IVec3\">IVec3</a>) -&gt; <a class=\"struct\" href=\"https://docs.rs/glam/0.30.5/glam/i32/ivec3/struct.IVec3.html\" title=\"struct glam::i32::ivec3::IVec3\">IVec3</a></h4></section></summary><div class='docblock'>Performs the <code>/</code> operation. <a href=\"devela/all/trait.Div.html#tymethod.div\">Read more</a></div></details></div></details>","Div<IVec3>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Div%3CIVec4%3E-for-i32\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/glam/0.30.5/src/glam/i32/ivec4.rs.html#1093\">Source</a><a href=\"#impl-Div%3CIVec4%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"devela/all/trait.Div.html\" title=\"trait devela::all::Div\">Div</a>&lt;<a class=\"struct\" href=\"https://docs.rs/glam/0.30.5/glam/i32/ivec4/struct.IVec4.html\" title=\"struct glam::i32::ivec4::IVec4\">IVec4</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/glam/0.30.5/src/glam/i32/ivec4.rs.html#1094\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"devela/all/trait.Div.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"https://docs.rs/glam/0.30.5/glam/i32/ivec4/struct.IVec4.html\" title=\"struct glam::i32::ivec4::IVec4\">IVec4</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>/</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.div\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/glam/0.30.5/src/glam/i32/ivec4.rs.html#1096\">Source</a><a href=\"#method.div\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Div.html#tymethod.div\" class=\"fn\">div</a>(self, rhs: <a class=\"struct\" href=\"https://docs.rs/glam/0.30.5/glam/i32/ivec4/struct.IVec4.html\" title=\"struct glam::i32::ivec4::IVec4\">IVec4</a>) -&gt; <a class=\"struct\" href=\"https://docs.rs/glam/0.30.5/glam/i32/ivec4/struct.IVec4.html\" title=\"struct glam::i32::ivec4::IVec4\">IVec4</a></h4></section></summary><div class='docblock'>Performs the <code>/</code> operation. <a href=\"devela/all/trait.Div.html#tymethod.div\">Read more</a></div></details></div></details>","Div<IVec4>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Div-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/143802\" title=\"Tracking issue for const_ops\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/arith.rs.html#508-511\">Source</a></span><a href=\"#impl-Div-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"devela/all/trait.Div.html\" title=\"trait devela::all::Div\">Div</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3><div class=\"docblock\"><p>This operation rounds towards zero, truncating any\nfractional part of the exact result.</p>\n</div></section></summary><div class=\"docblock\"><h4 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h4>\n<p>This operation will panic if <code>other == 0</code> or the division results in overflow.</p>\n</div><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/arith.rs.html#508-511\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"devela/all/trait.Div.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>/</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.div\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/arith.rs.html#508-511\">Source</a><a href=\"#method.div\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Div.html#tymethod.div\" class=\"fn\">div</a>(self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a></h4></section></summary><div class='docblock'>Performs the <code>/</code> operation. <a href=\"devela/all/trait.Div.html#tymethod.div\">Read more</a></div></details></div></details>","Div","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-DivAssign%3C%26i32%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0, const unstable\">1.22.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/143802\" title=\"Tracking issue for const_ops\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/arith.rs.html#1004\">Source</a></span><a href=\"#impl-DivAssign%3C%26i32%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"devela/all/trait.DivAssign.html\" title=\"trait devela::all::DivAssign\">DivAssign</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.div_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/arith.rs.html#1004\">Source</a><a href=\"#method.div_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.DivAssign.html#tymethod.div_assign\" class=\"fn\">div_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>)</h4></section></summary><div class='docblock'>Performs the <code>/=</code> operation. <a href=\"devela/all/trait.DivAssign.html#tymethod.div_assign\">Read more</a></div></details></div></details>","DivAssign<&i32>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-DivAssign%3CDivisor%3Ci32%3E%3E-for-i32\" class=\"impl\"><a href=\"#impl-DivAssign%3CDivisor%3Ci32%3E%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"devela/all/trait.DivAssign.html\" title=\"trait devela::all::DivAssign\">DivAssign</a>&lt;<a class=\"struct\" href=\"devela/num/struct.Divisor.html\" title=\"struct devela::num::Divisor\">Divisor</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>&gt;&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.div_assign\" class=\"method trait-impl\"><a href=\"#method.div_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.DivAssign.html#tymethod.div_assign\" class=\"fn\">div_assign</a>(&amp;mut self, rhs: <a class=\"struct\" href=\"devela/num/struct.Divisor.html\" title=\"struct devela::num::Divisor\">Divisor</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>&gt;)</h4></section></summary><div class='docblock'>Performs the <code>/=</code> operation. <a href=\"devela/all/trait.DivAssign.html#tymethod.div_assign\">Read more</a></div></details></div></details>","DivAssign<Divisor<i32>>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-DivAssign-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0, const unstable\">1.8.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/143802\" title=\"Tracking issue for const_ops\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/arith.rs.html#1004\">Source</a></span><a href=\"#impl-DivAssign-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"devela/all/trait.DivAssign.html\" title=\"trait devela::all::DivAssign\">DivAssign</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.div_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/arith.rs.html#1004\">Source</a><a href=\"#method.div_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.DivAssign.html#tymethod.div_assign\" class=\"fn\">div_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>)</h4></section></summary><div class='docblock'>Performs the <code>/=</code> operation. <a href=\"devela/all/trait.DivAssign.html#tymethod.div_assign\">Read more</a></div></details></div></details>","DivAssign","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Element-for-i32\" class=\"impl\"><a href=\"#impl-Element-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl Element for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_compatible_format\" class=\"method trait-impl\"><a href=\"#method.is_compatible_format\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">is_compatible_format</a>(format: &amp;<a class=\"struct\" href=\"devela/all/struct.CStr.html\" title=\"struct devela::all::CStr\">CStr</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Gets whether the element specified in the format string is potentially compatible.\nAlignment and size are checked separately from this function.</div></details></div></details>","Element","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ErrnoSentinel-for-i32\" class=\"impl\"><a href=\"#impl-ErrnoSentinel-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl ErrnoSentinel for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><section id=\"method.sentinel\" class=\"method trait-impl\"><a href=\"#method.sentinel\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">sentinel</a>() -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a></h4></section></div></details>","ErrnoSentinel","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Euclid-for-i32\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/ops/euclid.rs.html#88\">Source</a><a href=\"#impl-Euclid-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://docs.rs/num-traits/0.2/num_traits/ops/euclid/trait.Euclid.html\" title=\"trait num_traits::ops::euclid::Euclid\">Euclid</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.div_euclid\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/ops/euclid.rs.html#88\">Source</a><a href=\"#method.div_euclid\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/ops/euclid/trait.Euclid.html#tymethod.div_euclid\" class=\"fn\">div_euclid</a>(&amp;self, v: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a></h4></section></summary><div class='docblock'>Calculates Euclidean division, the matching method for <code>rem_euclid</code>. <a href=\"https://docs.rs/num-traits/0.2/num_traits/ops/euclid/trait.Euclid.html#tymethod.div_euclid\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.rem_euclid\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/ops/euclid.rs.html#88\">Source</a><a href=\"#method.rem_euclid\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/ops/euclid/trait.Euclid.html#tymethod.rem_euclid\" class=\"fn\">rem_euclid</a>(&amp;self, v: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a></h4></section></summary><div class='docblock'>Calculates the least nonnegative remainder of <code>self (mod v)</code>. <a href=\"https://docs.rs/num-traits/0.2/num_traits/ops/euclid/trait.Euclid.html#tymethod.rem_euclid\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.div_rem_euclid\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/ops/euclid.rs.html#67\">Source</a><a href=\"#method.div_rem_euclid\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/ops/euclid/trait.Euclid.html#method.div_rem_euclid\" class=\"fn\">div_rem_euclid</a>(&amp;self, v: &amp;Self) -&gt; (Self, Self) <a href=\"#\" class=\"tooltip\" data-notable-ty=\"(Self, Self)\">ⓘ</a></h4></section></summary><div class='docblock'>Returns both the quotient and remainder from Euclidean division. <a href=\"https://docs.rs/num-traits/0.2/num_traits/ops/euclid/trait.Euclid.html#method.div_rem_euclid\">Read more</a></div></details></div></details>","Euclid","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CCodecBe%3Ci32%3E%3E-for-i32\" class=\"impl\"><a class=\"src rightside\" href=\"src/devela/data/codec/encode/combinators.rs.html#176\">Source</a><a href=\"#impl-From%3CCodecBe%3Ci32%3E%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"devela/code/trait.From.html\" title=\"trait devela::code::From\">From</a>&lt;<a class=\"struct\" href=\"devela/all/struct.CodecBe.html\" title=\"struct devela::all::CodecBe\">CodecBe</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>&gt;&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/data/codec/encode/combinators.rs.html#176\">Source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/code/trait.From.html#tymethod.from\" class=\"fn\">from</a>(be: <a class=\"struct\" href=\"devela/all/struct.CodecBe.html\" title=\"struct devela::all::CodecBe\">CodecBe</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>&gt;) -&gt; Self</h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<CodecBe<i32>>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CCodecLe%3Ci32%3E%3E-for-i32\" class=\"impl\"><a class=\"src rightside\" href=\"src/devela/data/codec/encode/combinators.rs.html#176\">Source</a><a href=\"#impl-From%3CCodecLe%3Ci32%3E%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"devela/code/trait.From.html\" title=\"trait devela::code::From\">From</a>&lt;<a class=\"struct\" href=\"devela/all/struct.CodecLe.html\" title=\"struct devela::all::CodecLe\">CodecLe</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>&gt;&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/data/codec/encode/combinators.rs.html#176\">Source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/code/trait.From.html#tymethod.from\" class=\"fn\">from</a>(be: <a class=\"struct\" href=\"devela/all/struct.CodecLe.html\" title=\"struct devela::all::CodecLe\">CodecLe</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>&gt;) -&gt; Self</h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<CodecLe<i32>>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CColorSpace%3E-for-i32\" class=\"impl\"><a href=\"#impl-From%3CColorSpace%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"devela/code/trait.From.html\" title=\"trait devela::code::From\">From</a>&lt;ColorSpace&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/code/trait.From.html#tymethod.from\" class=\"fn\">from</a>(value: ColorSpace) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a></h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<ColorSpace>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CComparison%3E-for-i32\" class=\"impl\"><a href=\"#impl-From%3CComparison%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"devela/code/trait.From.html\" title=\"trait devela::code::From\">From</a>&lt;Comparison&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/code/trait.From.html#tymethod.from\" class=\"fn\">from</a>(value: Comparison) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a></h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<Comparison>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CCompliance%3E-for-i32\" class=\"impl\"><a href=\"#impl-From%3CCompliance%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"devela/code/trait.From.html\" title=\"trait devela::code::From\">From</a>&lt;Compliance&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/code/trait.From.html#tymethod.from\" class=\"fn\">from</a>(value: Compliance) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a></h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<Compliance>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CCompressionStrategy%3E-for-i32\" class=\"impl\"><a href=\"#impl-From%3CCompressionStrategy%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"devela/code/trait.From.html\" title=\"trait devela::code::From\">From</a>&lt;CompressionStrategy&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/code/trait.From.html#tymethod.from\" class=\"fn\">from</a>(value: CompressionStrategy) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a></h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<CompressionStrategy>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CConstant%3E-for-i32\" class=\"impl\"><a href=\"#impl-From%3CConstant%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"devela/code/trait.From.html\" title=\"trait devela::code::From\">From</a>&lt;Constant&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/code/trait.From.html#tymethod.from\" class=\"fn\">from</a>(c: Constant) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a></h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<Constant>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CDecision%3E-for-i32\" class=\"impl\"><a href=\"#impl-From%3CDecision%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"devela/code/trait.From.html\" title=\"trait devela::code::From\">From</a>&lt;Decision&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/code/trait.From.html#tymethod.from\" class=\"fn\">from</a>(value: Decision) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a></h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<Decision>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CError%3E-for-i32\" class=\"impl\"><a href=\"#impl-From%3CError%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"devela/code/trait.From.html\" title=\"trait devela::code::From\">From</a>&lt;Error&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/code/trait.From.html#tymethod.from\" class=\"fn\">from</a>(value: Error) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a></h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<Error>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CKeycode%3E-for-i32\" class=\"impl\"><a href=\"#impl-From%3CKeycode%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"devela/code/trait.From.html\" title=\"trait devela::code::From\">From</a>&lt;Keycode&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/code/trait.From.html#tymethod.from\" class=\"fn\">from</a>(val: Keycode) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a></h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<Keycode>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CLevel%3E-for-i32\" class=\"impl\"><a href=\"#impl-From%3CLevel%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"devela/code/trait.From.html\" title=\"trait devela::code::From\">From</a>&lt;Level&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/code/trait.From.html#tymethod.from\" class=\"fn\">from</a>(value: Level) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a></h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<Level>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CMotionEstimation%3E-for-i32\" class=\"impl\"><a href=\"#impl-From%3CMotionEstimation%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"devela/code/trait.From.html\" title=\"trait devela::code::From\">From</a>&lt;MotionEstimation&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/code/trait.From.html#tymethod.from\" class=\"fn\">from</a>(value: MotionEstimation) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a></h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<MotionEstimation>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CNonValueI32%3CV%3E%3E-for-i32\" class=\"impl\"><a href=\"#impl-From%3CNonValueI32%3CV%3E%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;const V: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>&gt; <a class=\"trait\" href=\"devela/code/trait.From.html\" title=\"trait devela::code::From\">From</a>&lt;<a class=\"struct\" href=\"devela/all/struct.NonValueI32.html\" title=\"struct devela::all::NonValueI32\">NonValueI32</a>&lt;V&gt;&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/code/trait.From.html#tymethod.from\" class=\"fn\">from</a>(value: <a class=\"struct\" href=\"devela/all/struct.NonValueI32.html\" title=\"struct devela::all::NonValueI32\">NonValueI32</a>&lt;V&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a></h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<NonValueI32<V>>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CPollTimeout%3E-for-i32\" class=\"impl\"><a href=\"#impl-From%3CPollTimeout%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"devela/code/trait.From.html\" title=\"trait devela::code::From\">From</a>&lt;PollTimeout&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/code/trait.From.html#tymethod.from\" class=\"fn\">from</a>(x: PollTimeout) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a></h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<PollTimeout>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CProfile%3E-for-i32\" class=\"impl\"><a href=\"#impl-From%3CProfile%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"devela/code/trait.From.html\" title=\"trait devela::code::From\">From</a>&lt;Profile&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/code/trait.From.html#tymethod.from\" class=\"fn\">from</a>(value: Profile) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a></h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<Profile>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CSign%3E-for-i32\" class=\"impl\"><a href=\"#impl-From%3CSign%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"devela/code/trait.From.html\" title=\"trait devela::code::From\">From</a>&lt;<a class=\"enum\" href=\"devela/all/enum.Sign.html\" title=\"enum devela::all::Sign\">Sign</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/code/trait.From.html#tymethod.from\" class=\"fn\">from</a>(s: <a class=\"enum\" href=\"devela/all/enum.Sign.html\" title=\"enum devela::all::Sign\">Sign</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Returns 0 if <code>None</code>, 1 if <code>Positive</code> and -1 if <code>Negative</code>.</p>\n</div></details></div></details>","From<Sign>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CSignalKind%3E-for-i32\" class=\"impl\"><a href=\"#impl-From%3CSignalKind%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"devela/code/trait.From.html\" title=\"trait devela::code::From\">From</a>&lt;SignalKind&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/code/trait.From.html#tymethod.from\" class=\"fn\">from</a>(kind: SignalKind) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a></h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<SignalKind>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CType%3E-for-i32\" class=\"impl\"><a href=\"#impl-From%3CType%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"devela/code/trait.From.html\" title=\"trait devela::code::From\">From</a>&lt;Type&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/code/trait.From.html#tymethod.from\" class=\"fn\">from</a>(value: Type) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a></h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<Type>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3Cbool%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.28.0, const unstable\">1.28.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/74935\" title=\"Tracking issue for const_try\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/convert/num.rs.html#94\">Source</a></span><a href=\"#impl-From%3Cbool%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"devela/code/trait.From.html\" title=\"trait devela::code::From\">From</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/convert/num.rs.html#94\">Source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/code/trait.From.html#tymethod.from\" class=\"fn\">from</a>(small: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Converts a <a href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\" title=\"primitive bool\"><code>bool</code></a> to <a href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\" title=\"primitive i32\"><code>i32</code></a> losslessly.\nThe resulting value is <code>0</code> for <code>false</code> and <code>1</code> for <code>true</code> values.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(i32::from(<span class=\"bool-val\">true</span>), <span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(i32::from(<span class=\"bool-val\">false</span>), <span class=\"number\">0</span>);</code></pre></div>\n</div></details></div></details>","From<bool>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3Ci16%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.5.0, const unstable\">1.5.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/74935\" title=\"Tracking issue for const_try\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/convert/num.rs.html#118\">Source</a></span><a href=\"#impl-From%3Ci16%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"devela/code/trait.From.html\" title=\"trait devela::code::From\">From</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i16.html\">i16</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/convert/num.rs.html#118\">Source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/code/trait.From.html#tymethod.from\" class=\"fn\">from</a>(small: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i16.html\">i16</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Converts <a href=\"https://doc.rust-lang.org/nightly/std/primitive.i16.html\" title=\"primitive i16\"><code>i16</code></a> to <a href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\" title=\"primitive i32\"><code>i32</code></a> losslessly.</p>\n</div></details></div></details>","From<i16>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3Ci8%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.5.0, const unstable\">1.5.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/74935\" title=\"Tracking issue for const_try\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/convert/num.rs.html#114\">Source</a></span><a href=\"#impl-From%3Ci8%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"devela/code/trait.From.html\" title=\"trait devela::code::From\">From</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/convert/num.rs.html#114\">Source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/code/trait.From.html#tymethod.from\" class=\"fn\">from</a>(small: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i8.html\">i8</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Converts <a href=\"https://doc.rust-lang.org/nightly/std/primitive.i8.html\" title=\"primitive i8\"><code>i8</code></a> to <a href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\" title=\"primitive i32\"><code>i32</code></a> losslessly.</p>\n</div></details></div></details>","From<i8>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3Cri128%3CMIN,+MAX%3E%3E-for-i32\" class=\"impl\"><a href=\"#impl-From%3Cri128%3CMIN,+MAX%3E%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;const MIN: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i128.html\">i128</a>, const MAX: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i128.html\">i128</a>&gt; <a class=\"trait\" href=\"devela/code/trait.From.html\" title=\"trait devela::code::From\">From</a>&lt;ri128&lt;MIN, MAX&gt;&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/code/trait.From.html#tymethod.from\" class=\"fn\">from</a>(r: ri128&lt;MIN, MAX&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a></h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<ri128<MIN, MAX>>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3Cri16%3CMIN,+MAX%3E%3E-for-i32\" class=\"impl\"><a href=\"#impl-From%3Cri16%3CMIN,+MAX%3E%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;const MIN: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i128.html\">i128</a>, const MAX: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i128.html\">i128</a>&gt; <a class=\"trait\" href=\"devela/code/trait.From.html\" title=\"trait devela::code::From\">From</a>&lt;ri16&lt;MIN, MAX&gt;&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/code/trait.From.html#tymethod.from\" class=\"fn\">from</a>(r: ri16&lt;MIN, MAX&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a></h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<ri16<MIN, MAX>>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3Cri32%3CMIN,+MAX%3E%3E-for-i32\" class=\"impl\"><a href=\"#impl-From%3Cri32%3CMIN,+MAX%3E%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;const MIN: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i128.html\">i128</a>, const MAX: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i128.html\">i128</a>&gt; <a class=\"trait\" href=\"devela/code/trait.From.html\" title=\"trait devela::code::From\">From</a>&lt;ri32&lt;MIN, MAX&gt;&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/code/trait.From.html#tymethod.from\" class=\"fn\">from</a>(r: ri32&lt;MIN, MAX&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a></h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<ri32<MIN, MAX>>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3Cri64%3CMIN,+MAX%3E%3E-for-i32\" class=\"impl\"><a href=\"#impl-From%3Cri64%3CMIN,+MAX%3E%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;const MIN: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i128.html\">i128</a>, const MAX: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i128.html\">i128</a>&gt; <a class=\"trait\" href=\"devela/code/trait.From.html\" title=\"trait devela::code::From\">From</a>&lt;ri64&lt;MIN, MAX&gt;&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/code/trait.From.html#tymethod.from\" class=\"fn\">from</a>(r: ri64&lt;MIN, MAX&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a></h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<ri64<MIN, MAX>>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3Cri8%3CMIN,+MAX%3E%3E-for-i32\" class=\"impl\"><a href=\"#impl-From%3Cri8%3CMIN,+MAX%3E%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;const MIN: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i128.html\">i128</a>, const MAX: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i128.html\">i128</a>&gt; <a class=\"trait\" href=\"devela/code/trait.From.html\" title=\"trait devela::code::From\">From</a>&lt;ri8&lt;MIN, MAX&gt;&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/code/trait.From.html#tymethod.from\" class=\"fn\">from</a>(r: ri8&lt;MIN, MAX&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a></h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<ri8<MIN, MAX>>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3Cu16%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.5.0, const unstable\">1.5.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/74935\" title=\"Tracking issue for const_try\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/convert/num.rs.html#130\">Source</a></span><a href=\"#impl-From%3Cu16%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"devela/code/trait.From.html\" title=\"trait devela::code::From\">From</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u16.html\">u16</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/convert/num.rs.html#130\">Source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/code/trait.From.html#tymethod.from\" class=\"fn\">from</a>(small: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Converts <a href=\"https://doc.rust-lang.org/nightly/std/primitive.u16.html\" title=\"primitive u16\"><code>u16</code></a> to <a href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\" title=\"primitive i32\"><code>i32</code></a> losslessly.</p>\n</div></details></div></details>","From<u16>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3Cu8%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.5.0, const unstable\">1.5.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/74935\" title=\"Tracking issue for const_try\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/convert/num.rs.html#127\">Source</a></span><a href=\"#impl-From%3Cu8%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"devela/code/trait.From.html\" title=\"trait devela::code::From\">From</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/convert/num.rs.html#127\">Source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/code/trait.From.html#tymethod.from\" class=\"fn\">from</a>(small: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Converts <a href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\" title=\"primitive u8\"><code>u8</code></a> to <a href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\" title=\"primitive i32\"><code>i32</code></a> losslessly.</p>\n</div></details></div></details>","From<u8>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromBytes-for-i32\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/ops/bytes.rs.html#247\">Source</a><a href=\"#impl-FromBytes-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://docs.rs/num-traits/0.2/num_traits/ops/bytes/trait.FromBytes.html\" title=\"trait num_traits::ops::bytes::FromBytes\">FromBytes</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><section id=\"associatedtype.Bytes\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/ops/bytes.rs.html#247\">Source</a><a href=\"#associatedtype.Bytes\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://docs.rs/num-traits/0.2/num_traits/ops/bytes/trait.FromBytes.html#associatedtype.Bytes\" class=\"associatedtype\">Bytes</a> = [<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">4</a>]</h4></section><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_be_bytes\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/ops/bytes.rs.html#247\">Source</a><a href=\"#method.from_be_bytes\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/ops/bytes/trait.FromBytes.html#tymethod.from_be_bytes\" class=\"fn\">from_be_bytes</a>(bytes: &amp;&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> as <a class=\"trait\" href=\"https://docs.rs/num-traits/0.2/num_traits/ops/bytes/trait.FromBytes.html\" title=\"trait num_traits::ops::bytes::FromBytes\">FromBytes</a>&gt;::<a class=\"associatedtype\" href=\"https://docs.rs/num-traits/0.2/num_traits/ops/bytes/trait.FromBytes.html#associatedtype.Bytes\" title=\"type num_traits::ops::bytes::FromBytes::Bytes\">Bytes</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a></h4></section></summary><div class='docblock'>Create a number from its representation as a byte array in big endian. <a href=\"https://docs.rs/num-traits/0.2/num_traits/ops/bytes/trait.FromBytes.html#tymethod.from_be_bytes\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_le_bytes\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/ops/bytes.rs.html#247\">Source</a><a href=\"#method.from_le_bytes\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/ops/bytes/trait.FromBytes.html#tymethod.from_le_bytes\" class=\"fn\">from_le_bytes</a>(bytes: &amp;&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> as <a class=\"trait\" href=\"https://docs.rs/num-traits/0.2/num_traits/ops/bytes/trait.FromBytes.html\" title=\"trait num_traits::ops::bytes::FromBytes\">FromBytes</a>&gt;::<a class=\"associatedtype\" href=\"https://docs.rs/num-traits/0.2/num_traits/ops/bytes/trait.FromBytes.html#associatedtype.Bytes\" title=\"type num_traits::ops::bytes::FromBytes::Bytes\">Bytes</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a></h4></section></summary><div class='docblock'>Create a number from its representation as a byte array in little endian. <a href=\"https://docs.rs/num-traits/0.2/num_traits/ops/bytes/trait.FromBytes.html#tymethod.from_le_bytes\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_ne_bytes\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/ops/bytes.rs.html#247\">Source</a><a href=\"#method.from_ne_bytes\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/ops/bytes/trait.FromBytes.html#method.from_ne_bytes\" class=\"fn\">from_ne_bytes</a>(bytes: &amp;&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> as <a class=\"trait\" href=\"https://docs.rs/num-traits/0.2/num_traits/ops/bytes/trait.FromBytes.html\" title=\"trait num_traits::ops::bytes::FromBytes\">FromBytes</a>&gt;::<a class=\"associatedtype\" href=\"https://docs.rs/num-traits/0.2/num_traits/ops/bytes/trait.FromBytes.html#associatedtype.Bytes\" title=\"type num_traits::ops::bytes::FromBytes::Bytes\">Bytes</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a></h4></section></summary><div class='docblock'>Create a number from its memory representation as a byte array in native endianness. <a href=\"https://docs.rs/num-traits/0.2/num_traits/ops/bytes/trait.FromBytes.html#method.from_ne_bytes\">Read more</a></div></details></div></details>","FromBytes","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromData-for-i32\" class=\"impl\"><a href=\"#impl-FromData-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl FromData for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedconstant.SIZE\" class=\"associatedconstant trait-impl\"><a href=\"#associatedconstant.SIZE\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a class=\"constant\">SIZE</a>: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a> = 4usize</h4></section></summary><div class='docblock'>Object’s raw data size. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.parse\" class=\"method trait-impl\"><a href=\"#method.parse\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">parse</a>(data: &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>]) -&gt; <a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Option&lt;i32&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Parses an object from a raw data.</div></details></div></details>","FromData","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromPrimitive-for-i32\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/cast.rs.html#563\">Source</a><a href=\"#impl-FromPrimitive-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://docs.rs/num-traits/0.2/num_traits/cast/trait.FromPrimitive.html\" title=\"trait num_traits::cast::FromPrimitive\">FromPrimitive</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_isize\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/cast.rs.html#563\">Source</a><a href=\"#method.from_isize\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/cast/trait.FromPrimitive.html#method.from_isize\" class=\"fn\">from_isize</a>(n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.isize.html\">isize</a>) -&gt; <a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Option&lt;i32&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Converts an <code>isize</code> to return an optional value of this type. If the\nvalue cannot be represented by this type, then <code>None</code> is returned.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_i8\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/cast.rs.html#563\">Source</a><a href=\"#method.from_i8\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/cast/trait.FromPrimitive.html#method.from_i8\" class=\"fn\">from_i8</a>(n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i8.html\">i8</a>) -&gt; <a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Option&lt;i32&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Converts an <code>i8</code> to return an optional value of this type. If the\nvalue cannot be represented by this type, then <code>None</code> is returned.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_i16\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/cast.rs.html#563\">Source</a><a href=\"#method.from_i16\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/cast/trait.FromPrimitive.html#method.from_i16\" class=\"fn\">from_i16</a>(n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i16.html\">i16</a>) -&gt; <a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Option&lt;i32&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Converts an <code>i16</code> to return an optional value of this type. If the\nvalue cannot be represented by this type, then <code>None</code> is returned.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_i32\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/cast.rs.html#563\">Source</a><a href=\"#method.from_i32\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/cast/trait.FromPrimitive.html#method.from_i32\" class=\"fn\">from_i32</a>(n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>) -&gt; <a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Option&lt;i32&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Converts an <code>i32</code> to return an optional value of this type. If the\nvalue cannot be represented by this type, then <code>None</code> is returned.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_i64\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/cast.rs.html#563\">Source</a><a href=\"#method.from_i64\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/cast/trait.FromPrimitive.html#tymethod.from_i64\" class=\"fn\">from_i64</a>(n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i64.html\">i64</a>) -&gt; <a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Option&lt;i32&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Converts an <code>i64</code> to return an optional value of this type. If the\nvalue cannot be represented by this type, then <code>None</code> is returned.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_i128\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/cast.rs.html#563\">Source</a><a href=\"#method.from_i128\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/cast/trait.FromPrimitive.html#method.from_i128\" class=\"fn\">from_i128</a>(n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i128.html\">i128</a>) -&gt; <a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Option&lt;i32&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Converts an <code>i128</code> to return an optional value of this type. If the\nvalue cannot be represented by this type, then <code>None</code> is returned. <a href=\"https://docs.rs/num-traits/0.2/num_traits/cast/trait.FromPrimitive.html#method.from_i128\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_usize\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/cast.rs.html#563\">Source</a><a href=\"#method.from_usize\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/cast/trait.FromPrimitive.html#method.from_usize\" class=\"fn\">from_usize</a>(n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Option&lt;i32&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Converts a <code>usize</code> to return an optional value of this type. If the\nvalue cannot be represented by this type, then <code>None</code> is returned.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_u8\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/cast.rs.html#563\">Source</a><a href=\"#method.from_u8\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/cast/trait.FromPrimitive.html#method.from_u8\" class=\"fn\">from_u8</a>(n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>) -&gt; <a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Option&lt;i32&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Converts an <code>u8</code> to return an optional value of this type. If the\nvalue cannot be represented by this type, then <code>None</code> is returned.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_u16\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/cast.rs.html#563\">Source</a><a href=\"#method.from_u16\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/cast/trait.FromPrimitive.html#method.from_u16\" class=\"fn\">from_u16</a>(n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Option&lt;i32&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Converts an <code>u16</code> to return an optional value of this type. If the\nvalue cannot be represented by this type, then <code>None</code> is returned.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_u32\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/cast.rs.html#563\">Source</a><a href=\"#method.from_u32\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/cast/trait.FromPrimitive.html#method.from_u32\" class=\"fn\">from_u32</a>(n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>) -&gt; <a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Option&lt;i32&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Converts an <code>u32</code> to return an optional value of this type. If the\nvalue cannot be represented by this type, then <code>None</code> is returned.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_u64\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/cast.rs.html#563\">Source</a><a href=\"#method.from_u64\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/cast/trait.FromPrimitive.html#tymethod.from_u64\" class=\"fn\">from_u64</a>(n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u64.html\">u64</a>) -&gt; <a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Option&lt;i32&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Converts an <code>u64</code> to return an optional value of this type. If the\nvalue cannot be represented by this type, then <code>None</code> is returned.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_u128\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/cast.rs.html#563\">Source</a><a href=\"#method.from_u128\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/cast/trait.FromPrimitive.html#method.from_u128\" class=\"fn\">from_u128</a>(n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u128.html\">u128</a>) -&gt; <a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Option&lt;i32&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Converts an <code>u128</code> to return an optional value of this type. If the\nvalue cannot be represented by this type, then <code>None</code> is returned. <a href=\"https://docs.rs/num-traits/0.2/num_traits/cast/trait.FromPrimitive.html#method.from_u128\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_f32\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/cast.rs.html#563\">Source</a><a href=\"#method.from_f32\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/cast/trait.FromPrimitive.html#method.from_f32\" class=\"fn\">from_f32</a>(n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.f32.html\">f32</a>) -&gt; <a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Option&lt;i32&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Converts a <code>f32</code> to return an optional value of this type. If the\nvalue cannot be represented by this type, then <code>None</code> is returned.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_f64\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/cast.rs.html#563\">Source</a><a href=\"#method.from_f64\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/cast/trait.FromPrimitive.html#method.from_f64\" class=\"fn\">from_f64</a>(n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.f64.html\">f64</a>) -&gt; <a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Option&lt;i32&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Converts a <code>f64</code> to return an optional value of this type. If the\nvalue cannot be represented by this type, then <code>None</code> is returned. <a href=\"https://docs.rs/num-traits/0.2/num_traits/cast/trait.FromPrimitive.html#method.from_f64\">Read more</a></div></details></div></details>","FromPrimitive","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromPyObject%3C'py%3E-for-i32\" class=\"impl\"><a href=\"#impl-FromPyObject%3C'py%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'py&gt; FromPyObject&lt;'py&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.extract_bound\" class=\"method trait-impl\"><a href=\"#method.extract_bound\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">extract_bound</a>(obj: &amp;Bound&lt;'_, PyAny&gt;) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>, PyErr&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;i32, PyErr&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Extracts <code>Self</code> from the bound smart pointer <code>obj</code>. <a>Read more</a></div></details></div></details>","FromPyObject<'py>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromRawFd-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.48.0\">1.48.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/std/os/fd/raw.rs.html#159\">Source</a></span><a href=\"#impl-FromRawFd-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/std/os/fd/raw/trait.FromRawFd.html\" title=\"trait std::os::fd::raw::FromRawFd\">FromRawFd</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_raw_fd\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/std/os/fd/raw.rs.html#161\">Source</a><a href=\"#method.from_raw_fd\" class=\"anchor\">§</a><h4 class=\"code-header\">unsafe fn <a href=\"https://doc.rust-lang.org/nightly/std/os/fd/raw/trait.FromRawFd.html#tymethod.from_raw_fd\" class=\"fn\">from_raw_fd</a>(fd: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a></h4></section></summary><div class='docblock'>Constructs a new instance of <code>Self</code> from the given raw file\ndescriptor. <a href=\"https://doc.rust-lang.org/nightly/std/os/fd/raw/trait.FromRawFd.html#tymethod.from_raw_fd\">Read more</a></div></details></div></details>","FromRawFd","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromSample%3CI24%3E-for-i32\" class=\"impl\"><a href=\"#impl-FromSample%3CI24%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl FromSample&lt;I24&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><section id=\"method.from_sample_\" class=\"method trait-impl\"><a href=\"#method.from_sample_\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">from_sample_</a>(s: I24) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a></h4></section></div></details>","FromSample<I24>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromSample%3CI48%3E-for-i32\" class=\"impl\"><a href=\"#impl-FromSample%3CI48%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl FromSample&lt;I48&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><section id=\"method.from_sample_\" class=\"method trait-impl\"><a href=\"#method.from_sample_\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">from_sample_</a>(s: I48) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a></h4></section></div></details>","FromSample<I48>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromSample%3CU24%3E-for-i32\" class=\"impl\"><a href=\"#impl-FromSample%3CU24%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl FromSample&lt;U24&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><section id=\"method.from_sample_\" class=\"method trait-impl\"><a href=\"#method.from_sample_\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">from_sample_</a>(s: U24) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a></h4></section></div></details>","FromSample<U24>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromSample%3CU48%3E-for-i32\" class=\"impl\"><a href=\"#impl-FromSample%3CU48%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl FromSample&lt;U48&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><section id=\"method.from_sample_\" class=\"method trait-impl\"><a href=\"#method.from_sample_\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">from_sample_</a>(s: U48) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a></h4></section></div></details>","FromSample<U48>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromSample%3Cf32%3E-for-i32\" class=\"impl\"><a href=\"#impl-FromSample%3Cf32%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl FromSample&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.f32.html\">f32</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><section id=\"method.from_sample\" class=\"method trait-impl\"><a href=\"#method.from_sample\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">from_sample</a>(s: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.f32.html\">f32</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a></h4></section></div></details>","FromSample<f32>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromSample%3Cf32%3E-for-i32\" class=\"impl\"><a href=\"#impl-FromSample%3Cf32%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl FromSample&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.f32.html\">f32</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><section id=\"method.from_sample_\" class=\"method trait-impl\"><a href=\"#method.from_sample_\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">from_sample_</a>(s: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.f32.html\">f32</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a></h4></section></div></details>","FromSample<f32>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromSample%3Cf64%3E-for-i32\" class=\"impl\"><a href=\"#impl-FromSample%3Cf64%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl FromSample&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.f64.html\">f64</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><section id=\"method.from_sample\" class=\"method trait-impl\"><a href=\"#method.from_sample\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">from_sample</a>(s: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.f64.html\">f64</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a></h4></section></div></details>","FromSample<f64>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromSample%3Cf64%3E-for-i32\" class=\"impl\"><a href=\"#impl-FromSample%3Cf64%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl FromSample&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.f64.html\">f64</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><section id=\"method.from_sample_\" class=\"method trait-impl\"><a href=\"#method.from_sample_\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">from_sample_</a>(s: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.f64.html\">f64</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a></h4></section></div></details>","FromSample<f64>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromSample%3Ci16%3E-for-i32\" class=\"impl\"><a href=\"#impl-FromSample%3Ci16%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl FromSample&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i16.html\">i16</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><section id=\"method.from_sample\" class=\"method trait-impl\"><a href=\"#method.from_sample\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">from_sample</a>(s: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i16.html\">i16</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a></h4></section></div></details>","FromSample<i16>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromSample%3Ci16%3E-for-i32\" class=\"impl\"><a href=\"#impl-FromSample%3Ci16%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl FromSample&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i16.html\">i16</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><section id=\"method.from_sample_\" class=\"method trait-impl\"><a href=\"#method.from_sample_\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">from_sample_</a>(s: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i16.html\">i16</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a></h4></section></div></details>","FromSample<i16>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromSample%3Ci24%3E-for-i32\" class=\"impl\"><a href=\"#impl-FromSample%3Ci24%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl FromSample&lt;i24&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><section id=\"method.from_sample\" class=\"method trait-impl\"><a href=\"#method.from_sample\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">from_sample</a>(s: i24) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a></h4></section></div></details>","FromSample<i24>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromSample%3Ci32%3E-for-i32\" class=\"impl\"><a href=\"#impl-FromSample%3Ci32%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl FromSample&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><section id=\"method.from_sample\" class=\"method trait-impl\"><a href=\"#method.from_sample\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">from_sample</a>(s: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a></h4></section></div></details>","FromSample<i32>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromSample%3Ci64%3E-for-i32\" class=\"impl\"><a href=\"#impl-FromSample%3Ci64%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl FromSample&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><section id=\"method.from_sample_\" class=\"method trait-impl\"><a href=\"#method.from_sample_\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">from_sample_</a>(s: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a></h4></section></div></details>","FromSample<i64>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromSample%3Ci8%3E-for-i32\" class=\"impl\"><a href=\"#impl-FromSample%3Ci8%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl FromSample&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><section id=\"method.from_sample\" class=\"method trait-impl\"><a href=\"#method.from_sample\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">from_sample</a>(s: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i8.html\">i8</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a></h4></section></div></details>","FromSample<i8>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromSample%3Ci8%3E-for-i32\" class=\"impl\"><a href=\"#impl-FromSample%3Ci8%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl FromSample&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><section id=\"method.from_sample_\" class=\"method trait-impl\"><a href=\"#method.from_sample_\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">from_sample_</a>(s: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i8.html\">i8</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a></h4></section></div></details>","FromSample<i8>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromSample%3Cu16%3E-for-i32\" class=\"impl\"><a href=\"#impl-FromSample%3Cu16%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl FromSample&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u16.html\">u16</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><section id=\"method.from_sample\" class=\"method trait-impl\"><a href=\"#method.from_sample\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">from_sample</a>(s: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a></h4></section></div></details>","FromSample<u16>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromSample%3Cu16%3E-for-i32\" class=\"impl\"><a href=\"#impl-FromSample%3Cu16%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl FromSample&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u16.html\">u16</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><section id=\"method.from_sample_\" class=\"method trait-impl\"><a href=\"#method.from_sample_\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">from_sample_</a>(s: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a></h4></section></div></details>","FromSample<u16>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromSample%3Cu24%3E-for-i32\" class=\"impl\"><a href=\"#impl-FromSample%3Cu24%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl FromSample&lt;u24&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><section id=\"method.from_sample\" class=\"method trait-impl\"><a href=\"#method.from_sample\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">from_sample</a>(s: u24) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a></h4></section></div></details>","FromSample<u24>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromSample%3Cu32%3E-for-i32\" class=\"impl\"><a href=\"#impl-FromSample%3Cu32%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl FromSample&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><section id=\"method.from_sample\" class=\"method trait-impl\"><a href=\"#method.from_sample\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">from_sample</a>(s: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a></h4></section></div></details>","FromSample<u32>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromSample%3Cu32%3E-for-i32\" class=\"impl\"><a href=\"#impl-FromSample%3Cu32%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl FromSample&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><section id=\"method.from_sample_\" class=\"method trait-impl\"><a href=\"#method.from_sample_\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">from_sample_</a>(s: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a></h4></section></div></details>","FromSample<u32>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromSample%3Cu64%3E-for-i32\" class=\"impl\"><a href=\"#impl-FromSample%3Cu64%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl FromSample&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u64.html\">u64</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><section id=\"method.from_sample_\" class=\"method trait-impl\"><a href=\"#method.from_sample_\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">from_sample_</a>(s: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u64.html\">u64</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a></h4></section></div></details>","FromSample<u64>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromSample%3Cu8%3E-for-i32\" class=\"impl\"><a href=\"#impl-FromSample%3Cu8%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl FromSample&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><section id=\"method.from_sample\" class=\"method trait-impl\"><a href=\"#method.from_sample\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">from_sample</a>(s: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a></h4></section></div></details>","FromSample<u8>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromSample%3Cu8%3E-for-i32\" class=\"impl\"><a href=\"#impl-FromSample%3Cu8%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl FromSample&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><section id=\"method.from_sample_\" class=\"method trait-impl\"><a href=\"#method.from_sample_\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">from_sample_</a>(s: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a></h4></section></div></details>","FromSample<u8>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromStr-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/74935\" title=\"Tracking issue for const_try\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/num/mod.rs.html#1630\">Source</a></span><a href=\"#impl-FromStr-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"devela/all/trait.FromStr.html\" title=\"trait devela::all::FromStr\">FromStr</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_str\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/num/mod.rs.html#1630\">Source</a><a href=\"#method.from_str\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.FromStr.html#tymethod.from_str\" class=\"fn\">from_str</a>(src: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.str.html\">str</a>) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>, <a class=\"struct\" href=\"devela/all/struct.ParseIntError.html\" title=\"struct devela::all::ParseIntError\">ParseIntError</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;i32, ParseIntError&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Parses an integer from a string slice with decimal digits.</p>\n<p>The characters are expected to be an optional\n<code>+</code> or <code>-</code>\nsign followed by only digits. Leading and trailing non-digit characters (including\nwhitespace) represent an error. Underscores (which are accepted in Rust literals)\nalso represent an error.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::str::FromStr;\n\n<span class=\"macro\">assert_eq!</span>(i32::from_str(<span class=\"string\">\"+10\"</span>), <span class=\"prelude-val\">Ok</span>(<span class=\"number\">10</span>));</code></pre></div>\n<p>Trailing space returns error:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert!</span>(i32::from_str(<span class=\"string\">\"1 \"</span>).is_err());</code></pre></div>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Err\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/num/mod.rs.html#1630\">Source</a><a href=\"#associatedtype.Err\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"devela/all/trait.FromStr.html#associatedtype.Err\" class=\"associatedtype\">Err</a> = <a class=\"struct\" href=\"devela/all/struct.ParseIntError.html\" title=\"struct devela::all::ParseIntError\">ParseIntError</a></h4></section></summary><div class='docblock'>The associated error which can be returned from parsing.</div></details></div></details>","FromStr","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Hash-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/hash/mod.rs.html#829-842\">Source</a></span><a href=\"#impl-Hash-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"devela/all/trait.Hash.html\" title=\"trait devela::all::Hash\">Hash</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/hash/mod.rs.html#829-842\">Source</a><a href=\"#method.hash\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Hash.html#tymethod.hash\" class=\"fn\">hash</a>&lt;H&gt;(&amp;self, state: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut H</a>)<div class=\"where\">where\n    H: <a class=\"trait\" href=\"devela/all/trait.Hasher.html\" title=\"trait devela::all::Hasher\">Hasher</a>,</div></h4></section></summary><div class='docblock'>Feeds this value into the given <a href=\"devela/all/trait.Hasher.html\" title=\"trait devela::all::Hasher\"><code>Hasher</code></a>. <a href=\"devela/all/trait.Hash.html#tymethod.hash\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash_slice\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/hash/mod.rs.html#829-842\">Source</a><a href=\"#method.hash_slice\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Hash.html#method.hash_slice\" class=\"fn\">hash_slice</a>&lt;H&gt;(data: &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>], state: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut H</a>)<div class=\"where\">where\n    H: <a class=\"trait\" href=\"devela/all/trait.Hasher.html\" title=\"trait devela::all::Hasher\">Hasher</a>,</div></h4></section></summary><div class='docblock'>Feeds a slice of this type into the given <a href=\"devela/all/trait.Hasher.html\" title=\"trait devela::all::Hasher\"><code>Hasher</code></a>. <a href=\"devela/all/trait.Hash.html#method.hash_slice\">Read more</a></div></details></div></details>","Hash","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Integer-for-i32\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/itoa/1.0.15/src/itoa/lib.rs.html#218\">Source</a><a href=\"#impl-Integer-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://docs.rs/itoa/1.0.15/itoa/trait.Integer.html\" title=\"trait itoa::Integer\">Integer</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedconstant.MAX_STR_LEN\" class=\"associatedconstant trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/itoa/1.0.15/src/itoa/lib.rs.html#218\">Source</a><a href=\"#associatedconstant.MAX_STR_LEN\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a href=\"https://docs.rs/itoa/1.0.15/itoa/trait.Integer.html#associatedconstant.MAX_STR_LEN\" class=\"constant\">MAX_STR_LEN</a>: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a> = 11usize</h4></section></summary><div class='docblock'>The maximum length of string that formatting an integer of this type can\nproduce on the current target platform.</div></details></div></details>","Integer","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Integer-for-i32\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-integer/0.1/src/num_integer/lib.rs.html#843\">Source</a><a href=\"#impl-Integer-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://docs.rs/num-integer/0.1/num_integer/trait.Integer.html\" title=\"trait num_integer::Integer\">Integer</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.div_floor\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-integer/0.1/src/num_integer/lib.rs.html#843\">Source</a><a href=\"#method.div_floor\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-integer/0.1/num_integer/trait.Integer.html#tymethod.div_floor\" class=\"fn\">div_floor</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Floored integer division</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.mod_floor\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-integer/0.1/src/num_integer/lib.rs.html#843\">Source</a><a href=\"#method.mod_floor\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-integer/0.1/num_integer/trait.Integer.html#tymethod.mod_floor\" class=\"fn\">mod_floor</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Floored integer modulo</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.div_mod_floor\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-integer/0.1/src/num_integer/lib.rs.html#843\">Source</a><a href=\"#method.div_mod_floor\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-integer/0.1/num_integer/trait.Integer.html#method.div_mod_floor\" class=\"fn\">div_mod_floor</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>) -&gt; (<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>) <a href=\"#\" class=\"tooltip\" data-notable-ty=\"(i32, i32)\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Calculates <code>div_floor</code> and <code>mod_floor</code> simultaneously</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.gcd\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-integer/0.1/src/num_integer/lib.rs.html#843\">Source</a><a href=\"#method.gcd\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-integer/0.1/num_integer/trait.Integer.html#tymethod.gcd\" class=\"fn\">gcd</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Calculates the Greatest Common Divisor (GCD) of the number and\n<code>other</code>. The result is always non-negative.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lcm\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-integer/0.1/src/num_integer/lib.rs.html#843\">Source</a><a href=\"#method.lcm\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-integer/0.1/num_integer/trait.Integer.html#tymethod.lcm\" class=\"fn\">lcm</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Calculates the Lowest Common Multiple (LCM) of the number and\n<code>other</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.gcd_lcm\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-integer/0.1/src/num_integer/lib.rs.html#843\">Source</a><a href=\"#method.gcd_lcm\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-integer/0.1/num_integer/trait.Integer.html#method.gcd_lcm\" class=\"fn\">gcd_lcm</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>) -&gt; (<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>) <a href=\"#\" class=\"tooltip\" data-notable-ty=\"(i32, i32)\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Calculates the Greatest Common Divisor (GCD) and\nLowest Common Multiple (LCM) of the number and <code>other</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_multiple_of\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-integer/0.1/src/num_integer/lib.rs.html#843\">Source</a><a href=\"#method.is_multiple_of\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-integer/0.1/num_integer/trait.Integer.html#tymethod.is_multiple_of\" class=\"fn\">is_multiple_of</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if the number is a multiple of <code>other</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_even\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-integer/0.1/src/num_integer/lib.rs.html#843\">Source</a><a href=\"#method.is_even\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-integer/0.1/num_integer/trait.Integer.html#tymethod.is_even\" class=\"fn\">is_even</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if the number is divisible by <code>2</code></p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_odd\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-integer/0.1/src/num_integer/lib.rs.html#843\">Source</a><a href=\"#method.is_odd\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-integer/0.1/num_integer/trait.Integer.html#tymethod.is_odd\" class=\"fn\">is_odd</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if the number is not divisible by <code>2</code></p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.div_rem\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-integer/0.1/src/num_integer/lib.rs.html#843\">Source</a><a href=\"#method.div_rem\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-integer/0.1/num_integer/trait.Integer.html#tymethod.div_rem\" class=\"fn\">div_rem</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>) -&gt; (<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>) <a href=\"#\" class=\"tooltip\" data-notable-ty=\"(i32, i32)\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Simultaneous truncated integer division and modulus.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.next_multiple_of\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-integer/0.1/src/num_integer/lib.rs.html#843\">Source</a><a href=\"#method.next_multiple_of\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-integer/0.1/num_integer/trait.Integer.html#method.next_multiple_of\" class=\"fn\">next_multiple_of</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Rounds up to nearest multiple of argument.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.prev_multiple_of\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-integer/0.1/src/num_integer/lib.rs.html#843\">Source</a><a href=\"#method.prev_multiple_of\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-integer/0.1/num_integer/trait.Integer.html#method.prev_multiple_of\" class=\"fn\">prev_multiple_of</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Rounds down to nearest multiple of argument.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.div_ceil\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-integer/0.1/src/num_integer/lib.rs.html#843\">Source</a><a href=\"#method.div_ceil\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-integer/0.1/num_integer/trait.Integer.html#method.div_ceil\" class=\"fn\">div_ceil</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a></h4></section></summary><div class='docblock'>Ceiled integer division. <a href=\"https://docs.rs/num-integer/0.1/num_integer/trait.Integer.html#method.div_ceil\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extended_gcd_lcm\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-integer/0.1/src/num_integer/lib.rs.html#843\">Source</a><a href=\"#method.extended_gcd_lcm\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-integer/0.1/num_integer/trait.Integer.html#method.extended_gcd_lcm\" class=\"fn\">extended_gcd_lcm</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>) -&gt; (<a class=\"struct\" href=\"https://docs.rs/num-integer/0.1/num_integer/struct.ExtendedGcd.html\" title=\"struct num_integer::ExtendedGcd\">ExtendedGcd</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>&gt;, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>) <a href=\"#\" class=\"tooltip\" data-notable-ty=\"(ExtendedGcd&lt;i32&gt;, i32)\">ⓘ</a></h4></section></summary><div class='docblock'>Greatest common divisor, least common multiple, and Bézout coefficients.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extended_gcd\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-integer/0.1/src/num_integer/lib.rs.html#159-161\">Source</a><a href=\"#method.extended_gcd\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-integer/0.1/num_integer/trait.Integer.html#method.extended_gcd\" class=\"fn\">extended_gcd</a>(&amp;self, other: &amp;Self) -&gt; <a class=\"struct\" href=\"https://docs.rs/num-integer/0.1/num_integer/struct.ExtendedGcd.html\" title=\"struct num_integer::ExtendedGcd\">ExtendedGcd</a>&lt;Self&gt;<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"devela/code/trait.Clone.html\" title=\"trait devela::code::Clone\">Clone</a>,</div></h4></section></summary><div class='docblock'>Greatest common divisor and Bézout coefficients. <a href=\"https://docs.rs/num-integer/0.1/num_integer/trait.Integer.html#method.extended_gcd\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.divides\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-integer/0.1/src/num_integer/lib.rs.html#206\">Source</a><a href=\"#method.divides\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-integer/0.1/num_integer/trait.Integer.html#method.divides\" class=\"fn\">divides</a>(&amp;self, other: &amp;Self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecated: Please use is_multiple_of instead</span></div></span><div class='docblock'>Deprecated, use <code>is_multiple_of</code> instead.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.dec\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-integer/0.1/src/num_integer/lib.rs.html#353-355\">Source</a><a href=\"#method.dec\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-integer/0.1/num_integer/trait.Integer.html#method.dec\" class=\"fn\">dec</a>(&amp;mut self)<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"devela/code/trait.Clone.html\" title=\"trait devela::code::Clone\">Clone</a>,</div></h4></section></summary><div class='docblock'>Decrements self by one. <a href=\"https://docs.rs/num-integer/0.1/num_integer/trait.Integer.html#method.dec\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.inc\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-integer/0.1/src/num_integer/lib.rs.html#370-372\">Source</a><a href=\"#method.inc\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-integer/0.1/num_integer/trait.Integer.html#method.inc\" class=\"fn\">inc</a>(&amp;mut self)<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"devela/code/trait.Clone.html\" title=\"trait devela::code::Clone\">Clone</a>,</div></h4></section></summary><div class='docblock'>Increments self by one. <a href=\"https://docs.rs/num-integer/0.1/num_integer/trait.Integer.html#method.inc\">Read more</a></div></details></div></details>","Integer","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IntoDeserializer%3C'de,+E%3E-for-i32\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/serde/1.0.221/src/serde_core/de/value.rs.html#331\">Source</a><a href=\"#impl-IntoDeserializer%3C'de,+E%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'de, E&gt; <a class=\"trait\" href=\"https://docs.rs/serde/1.0.221/serde_core/de/trait.IntoDeserializer.html\" title=\"trait serde_core::de::IntoDeserializer\">IntoDeserializer</a>&lt;'de, E&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a><div class=\"where\">where\n    E: <a class=\"trait\" href=\"https://docs.rs/serde/1.0.221/serde_core/de/trait.Error.html\" title=\"trait serde_core::de::Error\">Error</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Deserializer\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/serde/1.0.221/src/serde_core/de/value.rs.html#331\">Source</a><a href=\"#associatedtype.Deserializer\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://docs.rs/serde/1.0.221/serde_core/de/trait.IntoDeserializer.html#associatedtype.Deserializer\" class=\"associatedtype\">Deserializer</a> = <a class=\"struct\" href=\"https://docs.rs/serde/1.0.221/serde_core/de/value/struct.I32Deserializer.html\" title=\"struct serde_core::de::value::I32Deserializer\">I32Deserializer</a>&lt;E&gt;</h4></section></summary><div class='docblock'>The type of the deserializer being converted into.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_deserializer\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/serde/1.0.221/src/serde_core/de/value.rs.html#331\">Source</a><a href=\"#method.into_deserializer\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/serde/1.0.221/serde_core/de/trait.IntoDeserializer.html#tymethod.into_deserializer\" class=\"fn\">into_deserializer</a>(self) -&gt; <a class=\"struct\" href=\"https://docs.rs/serde/1.0.221/serde_core/de/value/struct.I32Deserializer.html\" title=\"struct serde_core::de::value::I32Deserializer\">I32Deserializer</a>&lt;E&gt;</h4></section></summary><div class='docblock'>Convert this value into a deserializer.</div></details></div></details>","IntoDeserializer<'de, E>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IntoPyObject%3C'py%3E-for-i32\" class=\"impl\"><a href=\"#impl-IntoPyObject%3C'py%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'py&gt; IntoPyObject&lt;'py&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Target\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Target\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Target</a> = PyInt</h4></section></summary><div class='docblock'>The Python output type</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Output</a> = Bound&lt;'py, &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> as IntoPyObject&lt;'py&gt;&gt;::Target&gt;</h4></section></summary><div class='docblock'>The smart pointer type to use. <a>Read more</a></div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Error</a> = <a class=\"enum\" href=\"devela/code/enum.Infallible.html\" title=\"enum devela::code::Infallible\">Infallible</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_pyobject\" class=\"method trait-impl\"><a href=\"#method.into_pyobject\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">into_pyobject</a>(\n    self,\n    py: Python&lt;'py&gt;,\n) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> as IntoPyObject&lt;'py&gt;&gt;::Output, &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> as IntoPyObject&lt;'py&gt;&gt;::Error&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;&lt;i32 as IntoPyObject&lt;&#39;py&gt;&gt;::Output, &lt;i32 as IntoPyObject&lt;&#39;py&gt;&gt;::Error&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Performs the conversion.</div></details></div></details>","IntoPyObject<'py>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IntoRawFd-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.48.0\">1.48.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/std/os/fd/raw.rs.html#152\">Source</a></span><a href=\"#impl-IntoRawFd-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/std/os/fd/raw/trait.IntoRawFd.html\" title=\"trait std::os::fd::raw::IntoRawFd\">IntoRawFd</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_raw_fd\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/std/os/fd/raw.rs.html#154\">Source</a><a href=\"#method.into_raw_fd\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/std/os/fd/raw/trait.IntoRawFd.html#tymethod.into_raw_fd\" class=\"fn\">into_raw_fd</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a></h4></section></summary><div class='docblock'>Consumes this object, returning the raw underlying file descriptor. <a href=\"https://doc.rust-lang.org/nightly/std/os/fd/raw/trait.IntoRawFd.html#tymethod.into_raw_fd\">Read more</a></div></details></div></details>","IntoRawFd","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IoFormat-for-i32\" class=\"impl\"><a href=\"#impl-IoFormat-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl IoFormat for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><section id=\"associatedconstant.FORMAT\" class=\"associatedconstant trait-impl\"><a href=\"#associatedconstant.FORMAT\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a class=\"constant\">FORMAT</a>: Format = Format::S32LE</h4></section></div></details>","IoFormat","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IteratorProduct%3C%26i32%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.12.0\">1.12.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/iter/traits/accum.rs.html#204\">Source</a></span><a href=\"#impl-IteratorProduct%3C%26i32%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"devela/all/trait.IteratorProduct.html\" title=\"trait devela::all::IteratorProduct\">Product</a>&lt;&amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.product\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/iter/traits/accum.rs.html#204\">Source</a><a href=\"#method.product\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.IteratorProduct.html#tymethod.product\" class=\"fn\">product</a>&lt;I&gt;(iter: I) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a><div class=\"where\">where\n    I: <a class=\"trait\" href=\"devela/all/trait.Iterator.html\" title=\"trait devela::all::Iterator\">Iterator</a>&lt;Item = &amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>&gt;,</div></h4></section></summary><div class='docblock'>Takes an iterator and generates <code>Self</code> from the elements by multiplying\nthe items.</div></details></div></details>","Product<&'a i32>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IteratorProduct-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.12.0\">1.12.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/iter/traits/accum.rs.html#204\">Source</a></span><a href=\"#impl-IteratorProduct-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"devela/all/trait.IteratorProduct.html\" title=\"trait devela::all::IteratorProduct\">Product</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.product\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/iter/traits/accum.rs.html#204\">Source</a><a href=\"#method.product\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.IteratorProduct.html#tymethod.product\" class=\"fn\">product</a>&lt;I&gt;(iter: I) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a><div class=\"where\">where\n    I: <a class=\"trait\" href=\"devela/all/trait.Iterator.html\" title=\"trait devela::all::Iterator\">Iterator</a>&lt;Item = <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>&gt;,</div></h4></section></summary><div class='docblock'>Takes an iterator and generates <code>Self</code> from the elements by multiplying\nthe items.</div></details></div></details>","Product","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IteratorSum%3C%26i32%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.12.0\">1.12.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/iter/traits/accum.rs.html#204\">Source</a></span><a href=\"#impl-IteratorSum%3C%26i32%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"devela/all/trait.IteratorSum.html\" title=\"trait devela::all::IteratorSum\">Sum</a>&lt;&amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.sum\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/iter/traits/accum.rs.html#204\">Source</a><a href=\"#method.sum\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.IteratorSum.html#tymethod.sum\" class=\"fn\">sum</a>&lt;I&gt;(iter: I) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a><div class=\"where\">where\n    I: <a class=\"trait\" href=\"devela/all/trait.Iterator.html\" title=\"trait devela::all::Iterator\">Iterator</a>&lt;Item = &amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>&gt;,</div></h4></section></summary><div class='docblock'>Takes an iterator and generates <code>Self</code> from the elements by “summing up”\nthe items.</div></details></div></details>","Sum<&'a i32>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IteratorSum-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.12.0\">1.12.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/iter/traits/accum.rs.html#204\">Source</a></span><a href=\"#impl-IteratorSum-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"devela/all/trait.IteratorSum.html\" title=\"trait devela::all::IteratorSum\">Sum</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.sum\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/iter/traits/accum.rs.html#204\">Source</a><a href=\"#method.sum\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.IteratorSum.html#tymethod.sum\" class=\"fn\">sum</a>&lt;I&gt;(iter: I) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a><div class=\"where\">where\n    I: <a class=\"trait\" href=\"devela/all/trait.Iterator.html\" title=\"trait devela::all::Iterator\">Iterator</a>&lt;Item = <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>&gt;,</div></h4></section></summary><div class='docblock'>Takes an iterator and generates <code>Self</code> from the elements by “summing up”\nthe items.</div></details></div></details>","Sum","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-LowerExp-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.42.0\">1.42.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/fmt/num.rs.html#563\">Source</a></span><a href=\"#impl-LowerExp-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"devela/all/trait.LowerExp.html\" title=\"trait devela::all::LowerExp\">LowerExp</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/fmt/num.rs.html#563\">Source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.LowerExp.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"devela/all/struct.Formatter.html\" title=\"struct devela::all::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"devela/all/struct.FmtError.html\" title=\"struct devela::all::FmtError\">Error</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;(), Error&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"devela/all/trait.LowerExp.html#tymethod.fmt\">Read more</a></div></details></div></details>","LowerExp","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-LowerHex-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/fmt/num.rs.html#75\">Source</a></span><a href=\"#impl-LowerHex-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"devela/all/trait.LowerHex.html\" title=\"trait devela::all::LowerHex\">LowerHex</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/fmt/num.rs.html#75\">Source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.LowerHex.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"devela/all/struct.Formatter.html\" title=\"struct devela::all::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"devela/all/struct.FmtError.html\" title=\"struct devela::all::FmtError\">Error</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;(), Error&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Format signed integers in the two’s-complement form.</p>\n</div></details></div></details>","LowerHex","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-MaybeDither%3Cf32%3E-for-i32\" class=\"impl\"><a href=\"#impl-MaybeDither%3Cf32%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl MaybeDither&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.f32.html\">f32</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><section id=\"associatedconstant.DITHERABLE\" class=\"associatedconstant trait-impl\"><a href=\"#associatedconstant.DITHERABLE\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a class=\"constant\">DITHERABLE</a>: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a> = false</h4></section><section id=\"method.maybe_dither\" class=\"method trait-impl\"><a href=\"#method.maybe_dither\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">maybe_dither</a>&lt;D&gt;(self, _: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut D</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a><div class=\"where\">where\n    D: Dither&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.f32.html\">f32</a>&gt;,</div></h4></section></div></details>","MaybeDither<f32>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-MaybeDither%3Cf64%3E-for-i32\" class=\"impl\"><a href=\"#impl-MaybeDither%3Cf64%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl MaybeDither&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.f64.html\">f64</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><section id=\"associatedconstant.DITHERABLE\" class=\"associatedconstant trait-impl\"><a href=\"#associatedconstant.DITHERABLE\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a class=\"constant\">DITHERABLE</a>: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a> = false</h4></section><section id=\"method.maybe_dither\" class=\"method trait-impl\"><a href=\"#method.maybe_dither\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">maybe_dither</a>&lt;D&gt;(self, _: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut D</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a><div class=\"where\">where\n    D: Dither&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.f64.html\">f64</a>&gt;,</div></h4></section></div></details>","MaybeDither<f64>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-MaybeDither%3Ci16%3E-for-i32\" class=\"impl\"><a href=\"#impl-MaybeDither%3Ci16%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl MaybeDither&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i16.html\">i16</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><section id=\"associatedconstant.DITHERABLE\" class=\"associatedconstant trait-impl\"><a href=\"#associatedconstant.DITHERABLE\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a class=\"constant\">DITHERABLE</a>: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a> = true</h4></section><section id=\"method.maybe_dither\" class=\"method trait-impl\"><a href=\"#method.maybe_dither\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">maybe_dither</a>&lt;D&gt;(self, dither: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut D</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a><div class=\"where\">where\n    D: Dither&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i16.html\">i16</a>&gt;,</div></h4></section></div></details>","MaybeDither<i16>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-MaybeDither%3Ci24%3E-for-i32\" class=\"impl\"><a href=\"#impl-MaybeDither%3Ci24%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl MaybeDither&lt;i24&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><section id=\"associatedconstant.DITHERABLE\" class=\"associatedconstant trait-impl\"><a href=\"#associatedconstant.DITHERABLE\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a class=\"constant\">DITHERABLE</a>: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a> = true</h4></section><section id=\"method.maybe_dither\" class=\"method trait-impl\"><a href=\"#method.maybe_dither\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">maybe_dither</a>&lt;D&gt;(self, dither: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut D</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a><div class=\"where\">where\n    D: Dither&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>, i24&gt;,</div></h4></section></div></details>","MaybeDither<i24>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-MaybeDither%3Ci32%3E-for-i32\" class=\"impl\"><a href=\"#impl-MaybeDither%3Ci32%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl MaybeDither&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><section id=\"associatedconstant.DITHERABLE\" class=\"associatedconstant trait-impl\"><a href=\"#associatedconstant.DITHERABLE\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a class=\"constant\">DITHERABLE</a>: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a> = false</h4></section><section id=\"method.maybe_dither\" class=\"method trait-impl\"><a href=\"#method.maybe_dither\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">maybe_dither</a>&lt;D&gt;(self, _: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut D</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a><div class=\"where\">where\n    D: Dither&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>&gt;,</div></h4></section></div></details>","MaybeDither<i32>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-MaybeDither%3Ci8%3E-for-i32\" class=\"impl\"><a href=\"#impl-MaybeDither%3Ci8%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl MaybeDither&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><section id=\"associatedconstant.DITHERABLE\" class=\"associatedconstant trait-impl\"><a href=\"#associatedconstant.DITHERABLE\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a class=\"constant\">DITHERABLE</a>: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a> = true</h4></section><section id=\"method.maybe_dither\" class=\"method trait-impl\"><a href=\"#method.maybe_dither\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">maybe_dither</a>&lt;D&gt;(self, dither: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut D</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a><div class=\"where\">where\n    D: Dither&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i8.html\">i8</a>&gt;,</div></h4></section></div></details>","MaybeDither<i8>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-MaybeDither%3Cu16%3E-for-i32\" class=\"impl\"><a href=\"#impl-MaybeDither%3Cu16%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl MaybeDither&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u16.html\">u16</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><section id=\"associatedconstant.DITHERABLE\" class=\"associatedconstant trait-impl\"><a href=\"#associatedconstant.DITHERABLE\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a class=\"constant\">DITHERABLE</a>: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a> = true</h4></section><section id=\"method.maybe_dither\" class=\"method trait-impl\"><a href=\"#method.maybe_dither\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">maybe_dither</a>&lt;D&gt;(self, dither: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut D</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a><div class=\"where\">where\n    D: Dither&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u16.html\">u16</a>&gt;,</div></h4></section></div></details>","MaybeDither<u16>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-MaybeDither%3Cu24%3E-for-i32\" class=\"impl\"><a href=\"#impl-MaybeDither%3Cu24%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl MaybeDither&lt;u24&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><section id=\"associatedconstant.DITHERABLE\" class=\"associatedconstant trait-impl\"><a href=\"#associatedconstant.DITHERABLE\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a class=\"constant\">DITHERABLE</a>: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a> = true</h4></section><section id=\"method.maybe_dither\" class=\"method trait-impl\"><a href=\"#method.maybe_dither\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">maybe_dither</a>&lt;D&gt;(self, dither: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut D</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a><div class=\"where\">where\n    D: Dither&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>, u24&gt;,</div></h4></section></div></details>","MaybeDither<u24>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-MaybeDither%3Cu32%3E-for-i32\" class=\"impl\"><a href=\"#impl-MaybeDither%3Cu32%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl MaybeDither&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><section id=\"associatedconstant.DITHERABLE\" class=\"associatedconstant trait-impl\"><a href=\"#associatedconstant.DITHERABLE\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a class=\"constant\">DITHERABLE</a>: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a> = false</h4></section><section id=\"method.maybe_dither\" class=\"method trait-impl\"><a href=\"#method.maybe_dither\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">maybe_dither</a>&lt;D&gt;(self, _: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut D</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a><div class=\"where\">where\n    D: Dither&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>&gt;,</div></h4></section></div></details>","MaybeDither<u32>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-MaybeDither%3Cu8%3E-for-i32\" class=\"impl\"><a href=\"#impl-MaybeDither%3Cu8%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl MaybeDither&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><section id=\"associatedconstant.DITHERABLE\" class=\"associatedconstant trait-impl\"><a href=\"#associatedconstant.DITHERABLE\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a class=\"constant\">DITHERABLE</a>: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a> = true</h4></section><section id=\"method.maybe_dither\" class=\"method trait-impl\"><a href=\"#method.maybe_dither\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">maybe_dither</a>&lt;D&gt;(self, dither: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut D</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a><div class=\"where\">where\n    D: Dither&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;,</div></h4></section></div></details>","MaybeDither<u8>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-MemPod-for-i32\" class=\"impl\"><a class=\"src rightside\" href=\"src/devela/sys/mem/pod.rs.html#138\">Source</a><a href=\"#impl-MemPod-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"devela/all/trait.MemPod.html\" title=\"trait devela::all::MemPod\">MemPod</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3><span class=\"item-info\"><div class=\"stab portability\">Available on <strong>crate feature <code>unsafe_layout</code></strong> only.</div></span></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.zeroed\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/sys/mem/pod.rs.html#72-75\">Source</a><a href=\"#method.zeroed\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.MemPod.html#method.zeroed\" class=\"fn\">zeroed</a>() -&gt; Self</h4></section></summary><div class='docblock'>Returns a new instance contrcuted from zeroes.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_bytes\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/sys/mem/pod.rs.html#81-105\">Source</a><a href=\"#method.from_bytes\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.MemPod.html#method.from_bytes\" class=\"fn\">from_bytes</a>(bytes: &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>]) -&gt; Self</h4></section></summary><div class='docblock'>Returns a new instance constructed from the given bytes. <a href=\"devela/all/trait.MemPod.html#method.from_bytes\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_bytes\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/sys/mem/pod.rs.html#109-113\">Source</a><a href=\"#method.as_bytes\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.MemPod.html#method.as_bytes\" class=\"fn\">as_bytes</a>(&amp;self) -&gt; &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>] <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&amp;[u8]\">ⓘ</a></h4></section></summary><div class='docblock'>Returns the instance’s data as a slice of bytes.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_bytes_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/sys/mem/pod.rs.html#117-121\">Source</a><a href=\"#method.as_bytes_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.MemPod.html#method.as_bytes_mut\" class=\"fn\">as_bytes_mut</a>(&amp;mut self) -&gt; &amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>] <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&amp;mut [u8]\">ⓘ</a></h4></section></summary><div class='docblock'>Returns the instance’s data as a mutable slice of bytes.</div></details></div></details>","MemPod","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Mul%3C%26BigInt%3E-for-i32\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-bigint/0.4/src/num_bigint/bigint/multiplication.rs.html#131\">Source</a><a href=\"#impl-Mul%3C%26BigInt%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"devela/all/trait.Mul.html\" title=\"trait devela::all::Mul\">Mul</a>&lt;&amp;<a class=\"struct\" href=\"https://docs.rs/num-bigint/0.4/num_bigint/bigint/struct.BigInt.html\" title=\"struct num_bigint::bigint::BigInt\">BigInt</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-bigint/0.4/src/num_bigint/bigint/multiplication.rs.html#131\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"devela/all/trait.Mul.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"https://docs.rs/num-bigint/0.4/num_bigint/bigint/struct.BigInt.html\" title=\"struct num_bigint::bigint::BigInt\">BigInt</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>*</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.mul\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-bigint/0.4/src/num_bigint/bigint/multiplication.rs.html#131\">Source</a><a href=\"#method.mul\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Mul.html#tymethod.mul\" class=\"fn\">mul</a>(self, other: &amp;<a class=\"struct\" href=\"https://docs.rs/num-bigint/0.4/num_bigint/bigint/struct.BigInt.html\" title=\"struct num_bigint::bigint::BigInt\">BigInt</a>) -&gt; <a class=\"struct\" href=\"https://docs.rs/num-bigint/0.4/num_bigint/bigint/struct.BigInt.html\" title=\"struct num_bigint::bigint::BigInt\">BigInt</a></h4></section></summary><div class='docblock'>Performs the <code>*</code> operation. <a href=\"devela/all/trait.Mul.html#tymethod.mul\">Read more</a></div></details></div></details>","Mul<&BigInt>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Mul%3C%26IVec2%3E-for-i32\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/glam/0.30.5/src/glam/i32/ivec2.rs.html#1061\">Source</a><a href=\"#impl-Mul%3C%26IVec2%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"devela/all/trait.Mul.html\" title=\"trait devela::all::Mul\">Mul</a>&lt;&amp;<a class=\"struct\" href=\"https://docs.rs/glam/0.30.5/glam/i32/ivec2/struct.IVec2.html\" title=\"struct glam::i32::ivec2::IVec2\">IVec2</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/glam/0.30.5/src/glam/i32/ivec2.rs.html#1062\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"devela/all/trait.Mul.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"https://docs.rs/glam/0.30.5/glam/i32/ivec2/struct.IVec2.html\" title=\"struct glam::i32::ivec2::IVec2\">IVec2</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>*</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.mul\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/glam/0.30.5/src/glam/i32/ivec2.rs.html#1064\">Source</a><a href=\"#method.mul\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Mul.html#tymethod.mul\" class=\"fn\">mul</a>(self, rhs: &amp;<a class=\"struct\" href=\"https://docs.rs/glam/0.30.5/glam/i32/ivec2/struct.IVec2.html\" title=\"struct glam::i32::ivec2::IVec2\">IVec2</a>) -&gt; <a class=\"struct\" href=\"https://docs.rs/glam/0.30.5/glam/i32/ivec2/struct.IVec2.html\" title=\"struct glam::i32::ivec2::IVec2\">IVec2</a></h4></section></summary><div class='docblock'>Performs the <code>*</code> operation. <a href=\"devela/all/trait.Mul.html#tymethod.mul\">Read more</a></div></details></div></details>","Mul<&IVec2>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Mul%3C%26IVec3%3E-for-i32\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/glam/0.30.5/src/glam/i32/ivec3.rs.html#1161\">Source</a><a href=\"#impl-Mul%3C%26IVec3%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"devela/all/trait.Mul.html\" title=\"trait devela::all::Mul\">Mul</a>&lt;&amp;<a class=\"struct\" href=\"https://docs.rs/glam/0.30.5/glam/i32/ivec3/struct.IVec3.html\" title=\"struct glam::i32::ivec3::IVec3\">IVec3</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/glam/0.30.5/src/glam/i32/ivec3.rs.html#1162\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"devela/all/trait.Mul.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"https://docs.rs/glam/0.30.5/glam/i32/ivec3/struct.IVec3.html\" title=\"struct glam::i32::ivec3::IVec3\">IVec3</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>*</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.mul\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/glam/0.30.5/src/glam/i32/ivec3.rs.html#1164\">Source</a><a href=\"#method.mul\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Mul.html#tymethod.mul\" class=\"fn\">mul</a>(self, rhs: &amp;<a class=\"struct\" href=\"https://docs.rs/glam/0.30.5/glam/i32/ivec3/struct.IVec3.html\" title=\"struct glam::i32::ivec3::IVec3\">IVec3</a>) -&gt; <a class=\"struct\" href=\"https://docs.rs/glam/0.30.5/glam/i32/ivec3/struct.IVec3.html\" title=\"struct glam::i32::ivec3::IVec3\">IVec3</a></h4></section></summary><div class='docblock'>Performs the <code>*</code> operation. <a href=\"devela/all/trait.Mul.html#tymethod.mul\">Read more</a></div></details></div></details>","Mul<&IVec3>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Mul%3C%26IVec4%3E-for-i32\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/glam/0.30.5/src/glam/i32/ivec4.rs.html#1251\">Source</a><a href=\"#impl-Mul%3C%26IVec4%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"devela/all/trait.Mul.html\" title=\"trait devela::all::Mul\">Mul</a>&lt;&amp;<a class=\"struct\" href=\"https://docs.rs/glam/0.30.5/glam/i32/ivec4/struct.IVec4.html\" title=\"struct glam::i32::ivec4::IVec4\">IVec4</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/glam/0.30.5/src/glam/i32/ivec4.rs.html#1252\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"devela/all/trait.Mul.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"https://docs.rs/glam/0.30.5/glam/i32/ivec4/struct.IVec4.html\" title=\"struct glam::i32::ivec4::IVec4\">IVec4</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>*</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.mul\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/glam/0.30.5/src/glam/i32/ivec4.rs.html#1254\">Source</a><a href=\"#method.mul\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Mul.html#tymethod.mul\" class=\"fn\">mul</a>(self, rhs: &amp;<a class=\"struct\" href=\"https://docs.rs/glam/0.30.5/glam/i32/ivec4/struct.IVec4.html\" title=\"struct glam::i32::ivec4::IVec4\">IVec4</a>) -&gt; <a class=\"struct\" href=\"https://docs.rs/glam/0.30.5/glam/i32/ivec4/struct.IVec4.html\" title=\"struct glam::i32::ivec4::IVec4\">IVec4</a></h4></section></summary><div class='docblock'>Performs the <code>*</code> operation. <a href=\"devela/all/trait.Mul.html#tymethod.mul\">Read more</a></div></details></div></details>","Mul<&IVec4>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Mul%3C%26i32%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/143802\" title=\"Tracking issue for const_ops\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/arith.rs.html#364\">Source</a></span><a href=\"#impl-Mul%3C%26i32%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"devela/all/trait.Mul.html\" title=\"trait devela::all::Mul\">Mul</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/arith.rs.html#364\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"devela/all/trait.Mul.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> as <a class=\"trait\" href=\"devela/all/trait.Mul.html\" title=\"trait devela::all::Mul\">Mul</a>&gt;::<a class=\"associatedtype\" href=\"devela/all/trait.Mul.html#associatedtype.Output\" title=\"type devela::all::Mul::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>*</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.mul\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/arith.rs.html#364\">Source</a><a href=\"#method.mul\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Mul.html#tymethod.mul\" class=\"fn\">mul</a>(self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>) -&gt; &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> as <a class=\"trait\" href=\"devela/all/trait.Mul.html\" title=\"trait devela::all::Mul\">Mul</a>&gt;::<a class=\"associatedtype\" href=\"devela/all/trait.Mul.html#associatedtype.Output\" title=\"type devela::all::Mul::Output\">Output</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&lt;i32 as Mul&gt;::Output\">ⓘ</a></h4></section></summary><div class='docblock'>Performs the <code>*</code> operation. <a href=\"devela/all/trait.Mul.html#tymethod.mul\">Read more</a></div></details></div></details>","Mul<&i32>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Mul%3CBigInt%3E-for-i32\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-bigint/0.4/src/num_bigint/bigint/multiplication.rs.html#131\">Source</a><a href=\"#impl-Mul%3CBigInt%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"devela/all/trait.Mul.html\" title=\"trait devela::all::Mul\">Mul</a>&lt;<a class=\"struct\" href=\"https://docs.rs/num-bigint/0.4/num_bigint/bigint/struct.BigInt.html\" title=\"struct num_bigint::bigint::BigInt\">BigInt</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-bigint/0.4/src/num_bigint/bigint/multiplication.rs.html#131\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"devela/all/trait.Mul.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"https://docs.rs/num-bigint/0.4/num_bigint/bigint/struct.BigInt.html\" title=\"struct num_bigint::bigint::BigInt\">BigInt</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>*</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.mul\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-bigint/0.4/src/num_bigint/bigint/multiplication.rs.html#131\">Source</a><a href=\"#method.mul\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Mul.html#tymethod.mul\" class=\"fn\">mul</a>(self, other: <a class=\"struct\" href=\"https://docs.rs/num-bigint/0.4/num_bigint/bigint/struct.BigInt.html\" title=\"struct num_bigint::bigint::BigInt\">BigInt</a>) -&gt; <a class=\"struct\" href=\"https://docs.rs/num-bigint/0.4/num_bigint/bigint/struct.BigInt.html\" title=\"struct num_bigint::bigint::BigInt\">BigInt</a></h4></section></summary><div class='docblock'>Performs the <code>*</code> operation. <a href=\"devela/all/trait.Mul.html#tymethod.mul\">Read more</a></div></details></div></details>","Mul<BigInt>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Mul%3CIVec2%3E-for-i32\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/glam/0.30.5/src/glam/i32/ivec2.rs.html#1050\">Source</a><a href=\"#impl-Mul%3CIVec2%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"devela/all/trait.Mul.html\" title=\"trait devela::all::Mul\">Mul</a>&lt;<a class=\"struct\" href=\"https://docs.rs/glam/0.30.5/glam/i32/ivec2/struct.IVec2.html\" title=\"struct glam::i32::ivec2::IVec2\">IVec2</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/glam/0.30.5/src/glam/i32/ivec2.rs.html#1051\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"devela/all/trait.Mul.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"https://docs.rs/glam/0.30.5/glam/i32/ivec2/struct.IVec2.html\" title=\"struct glam::i32::ivec2::IVec2\">IVec2</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>*</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.mul\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/glam/0.30.5/src/glam/i32/ivec2.rs.html#1053\">Source</a><a href=\"#method.mul\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Mul.html#tymethod.mul\" class=\"fn\">mul</a>(self, rhs: <a class=\"struct\" href=\"https://docs.rs/glam/0.30.5/glam/i32/ivec2/struct.IVec2.html\" title=\"struct glam::i32::ivec2::IVec2\">IVec2</a>) -&gt; <a class=\"struct\" href=\"https://docs.rs/glam/0.30.5/glam/i32/ivec2/struct.IVec2.html\" title=\"struct glam::i32::ivec2::IVec2\">IVec2</a></h4></section></summary><div class='docblock'>Performs the <code>*</code> operation. <a href=\"devela/all/trait.Mul.html#tymethod.mul\">Read more</a></div></details></div></details>","Mul<IVec2>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Mul%3CIVec3%3E-for-i32\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/glam/0.30.5/src/glam/i32/ivec3.rs.html#1149\">Source</a><a href=\"#impl-Mul%3CIVec3%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"devela/all/trait.Mul.html\" title=\"trait devela::all::Mul\">Mul</a>&lt;<a class=\"struct\" href=\"https://docs.rs/glam/0.30.5/glam/i32/ivec3/struct.IVec3.html\" title=\"struct glam::i32::ivec3::IVec3\">IVec3</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/glam/0.30.5/src/glam/i32/ivec3.rs.html#1150\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"devela/all/trait.Mul.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"https://docs.rs/glam/0.30.5/glam/i32/ivec3/struct.IVec3.html\" title=\"struct glam::i32::ivec3::IVec3\">IVec3</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>*</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.mul\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/glam/0.30.5/src/glam/i32/ivec3.rs.html#1152\">Source</a><a href=\"#method.mul\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Mul.html#tymethod.mul\" class=\"fn\">mul</a>(self, rhs: <a class=\"struct\" href=\"https://docs.rs/glam/0.30.5/glam/i32/ivec3/struct.IVec3.html\" title=\"struct glam::i32::ivec3::IVec3\">IVec3</a>) -&gt; <a class=\"struct\" href=\"https://docs.rs/glam/0.30.5/glam/i32/ivec3/struct.IVec3.html\" title=\"struct glam::i32::ivec3::IVec3\">IVec3</a></h4></section></summary><div class='docblock'>Performs the <code>*</code> operation. <a href=\"devela/all/trait.Mul.html#tymethod.mul\">Read more</a></div></details></div></details>","Mul<IVec3>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Mul%3CIVec4%3E-for-i32\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/glam/0.30.5/src/glam/i32/ivec4.rs.html#1238\">Source</a><a href=\"#impl-Mul%3CIVec4%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"devela/all/trait.Mul.html\" title=\"trait devela::all::Mul\">Mul</a>&lt;<a class=\"struct\" href=\"https://docs.rs/glam/0.30.5/glam/i32/ivec4/struct.IVec4.html\" title=\"struct glam::i32::ivec4::IVec4\">IVec4</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/glam/0.30.5/src/glam/i32/ivec4.rs.html#1239\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"devela/all/trait.Mul.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"https://docs.rs/glam/0.30.5/glam/i32/ivec4/struct.IVec4.html\" title=\"struct glam::i32::ivec4::IVec4\">IVec4</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>*</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.mul\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/glam/0.30.5/src/glam/i32/ivec4.rs.html#1241\">Source</a><a href=\"#method.mul\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Mul.html#tymethod.mul\" class=\"fn\">mul</a>(self, rhs: <a class=\"struct\" href=\"https://docs.rs/glam/0.30.5/glam/i32/ivec4/struct.IVec4.html\" title=\"struct glam::i32::ivec4::IVec4\">IVec4</a>) -&gt; <a class=\"struct\" href=\"https://docs.rs/glam/0.30.5/glam/i32/ivec4/struct.IVec4.html\" title=\"struct glam::i32::ivec4::IVec4\">IVec4</a></h4></section></summary><div class='docblock'>Performs the <code>*</code> operation. <a href=\"devela/all/trait.Mul.html#tymethod.mul\">Read more</a></div></details></div></details>","Mul<IVec4>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Mul%3CSignedDuration%3E-for-i32\" class=\"impl\"><a href=\"#impl-Mul%3CSignedDuration%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"devela/all/trait.Mul.html\" title=\"trait devela::all::Mul\">Mul</a>&lt;SignedDuration&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"devela/all/trait.Mul.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = SignedDuration</h4></section></summary><div class='docblock'>The resulting type after applying the <code>*</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.mul\" class=\"method trait-impl\"><a href=\"#method.mul\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Mul.html#tymethod.mul\" class=\"fn\">mul</a>(self, rhs: SignedDuration) -&gt; SignedDuration</h4></section></summary><div class='docblock'>Performs the <code>*</code> operation. <a href=\"devela/all/trait.Mul.html#tymethod.mul\">Read more</a></div></details></div></details>","Mul<SignedDuration>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Mul%3CTimeDelta%3E-for-i32\" class=\"impl\"><a class=\"src rightside\" href=\"src/devela/phys/time/delta/ops.rs.html#413-416\">Source</a><a href=\"#impl-Mul%3CTimeDelta%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"devela/all/trait.Mul.html\" title=\"trait devela::all::Mul\">Mul</a>&lt;<a class=\"struct\" href=\"devela/all/struct.TimeDelta.html\" title=\"struct devela::all::TimeDelta\">TimeDelta</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/devela/phys/time/delta/ops.rs.html#414\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"devela/all/trait.Mul.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"devela/all/struct.TimeDelta.html\" title=\"struct devela::all::TimeDelta\">TimeDelta</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>*</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.mul\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/phys/time/delta/ops.rs.html#415\">Source</a><a href=\"#method.mul\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Mul.html#tymethod.mul\" class=\"fn\">mul</a>(self, rhs: <a class=\"struct\" href=\"devela/all/struct.TimeDelta.html\" title=\"struct devela::all::TimeDelta\">TimeDelta</a>) -&gt; <a class=\"struct\" href=\"devela/all/struct.TimeDelta.html\" title=\"struct devela::all::TimeDelta\">TimeDelta</a></h4></section></summary><div class='docblock'>Performs the <code>*</code> operation. <a href=\"devela/all/trait.Mul.html#tymethod.mul\">Read more</a></div></details></div></details>","Mul<TimeDelta>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Mul%3Ci32x4%3E-for-i32\" class=\"impl\"><a href=\"#impl-Mul%3Ci32x4%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"devela/all/trait.Mul.html\" title=\"trait devela::all::Mul\">Mul</a>&lt;i32x4&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"devela/all/trait.Mul.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = i32x4</h4></section></summary><div class='docblock'>The resulting type after applying the <code>*</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.mul\" class=\"method trait-impl\"><a href=\"#method.mul\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Mul.html#tymethod.mul\" class=\"fn\">mul</a>(self, rhs: i32x4) -&gt; &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> as <a class=\"trait\" href=\"devela/all/trait.Mul.html\" title=\"trait devela::all::Mul\">Mul</a>&lt;i32x4&gt;&gt;::<a class=\"associatedtype\" href=\"devela/all/trait.Mul.html#associatedtype.Output\" title=\"type devela::all::Mul::Output\">Output</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&lt;i32 as Mul&lt;i32x4&gt;&gt;::Output\">ⓘ</a></h4></section></summary><div class='docblock'>Performs the <code>*</code> operation. <a href=\"devela/all/trait.Mul.html#tymethod.mul\">Read more</a></div></details></div></details>","Mul<i32x4>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Mul%3Ci32x8%3E-for-i32\" class=\"impl\"><a href=\"#impl-Mul%3Ci32x8%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"devela/all/trait.Mul.html\" title=\"trait devela::all::Mul\">Mul</a>&lt;i32x8&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"devela/all/trait.Mul.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = i32x8</h4></section></summary><div class='docblock'>The resulting type after applying the <code>*</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.mul\" class=\"method trait-impl\"><a href=\"#method.mul\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Mul.html#tymethod.mul\" class=\"fn\">mul</a>(self, rhs: i32x8) -&gt; &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> as <a class=\"trait\" href=\"devela/all/trait.Mul.html\" title=\"trait devela::all::Mul\">Mul</a>&lt;i32x8&gt;&gt;::<a class=\"associatedtype\" href=\"devela/all/trait.Mul.html#associatedtype.Output\" title=\"type devela::all::Mul::Output\">Output</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&lt;i32 as Mul&lt;i32x8&gt;&gt;::Output\">ⓘ</a></h4></section></summary><div class='docblock'>Performs the <code>*</code> operation. <a href=\"devela/all/trait.Mul.html#tymethod.mul\">Read more</a></div></details></div></details>","Mul<i32x8>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Mul-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/143802\" title=\"Tracking issue for const_ops\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/arith.rs.html#364\">Source</a></span><a href=\"#impl-Mul-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"devela/all/trait.Mul.html\" title=\"trait devela::all::Mul\">Mul</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/arith.rs.html#364\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"devela/all/trait.Mul.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>*</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.mul\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/arith.rs.html#364\">Source</a><a href=\"#method.mul\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Mul.html#tymethod.mul\" class=\"fn\">mul</a>(self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a></h4></section></summary><div class='docblock'>Performs the <code>*</code> operation. <a href=\"devela/all/trait.Mul.html#tymethod.mul\">Read more</a></div></details></div></details>","Mul","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-MulAdd-for-i32\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/ops/mul_add.rs.html#70\">Source</a><a href=\"#impl-MulAdd-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://docs.rs/num-traits/0.2/num_traits/ops/mul_add/trait.MulAdd.html\" title=\"trait num_traits::ops::mul_add::MulAdd\">MulAdd</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/ops/mul_add.rs.html#70\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://docs.rs/num-traits/0.2/num_traits/ops/mul_add/trait.MulAdd.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h4></section></summary><div class='docblock'>The resulting type after applying the fused multiply-add.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.mul_add\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/ops/mul_add.rs.html#70\">Source</a><a href=\"#method.mul_add\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/ops/mul_add/trait.MulAdd.html#tymethod.mul_add\" class=\"fn\">mul_add</a>(self, a: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>, b: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>) -&gt; &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> as <a class=\"trait\" href=\"https://docs.rs/num-traits/0.2/num_traits/ops/mul_add/trait.MulAdd.html\" title=\"trait num_traits::ops::mul_add::MulAdd\">MulAdd</a>&gt;::<a class=\"associatedtype\" href=\"https://docs.rs/num-traits/0.2/num_traits/ops/mul_add/trait.MulAdd.html#associatedtype.Output\" title=\"type num_traits::ops::mul_add::MulAdd::Output\">Output</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&lt;i32 as MulAdd&gt;::Output\">ⓘ</a></h4></section></summary><div class='docblock'>Performs the fused multiply-add operation <code>(self * a) + b</code></div></details></div></details>","MulAdd","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-MulAddAssign-for-i32\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/ops/mul_add.rs.html#100\">Source</a><a href=\"#impl-MulAddAssign-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://docs.rs/num-traits/0.2/num_traits/ops/mul_add/trait.MulAddAssign.html\" title=\"trait num_traits::ops::mul_add::MulAddAssign\">MulAddAssign</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.mul_add_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/ops/mul_add.rs.html#100\">Source</a><a href=\"#method.mul_add_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/ops/mul_add/trait.MulAddAssign.html#tymethod.mul_add_assign\" class=\"fn\">mul_add_assign</a>(&amp;mut self, a: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>, b: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>)</h4></section></summary><div class='docblock'>Performs the fused multiply-add assignment operation <code>*self = (*self * a) + b</code></div></details></div></details>","MulAddAssign","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-MulAssign%3C%26i32%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0, const unstable\">1.22.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/143802\" title=\"Tracking issue for const_ops\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/arith.rs.html#942\">Source</a></span><a href=\"#impl-MulAssign%3C%26i32%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"devela/all/trait.MulAssign.html\" title=\"trait devela::all::MulAssign\">MulAssign</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.mul_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/arith.rs.html#942\">Source</a><a href=\"#method.mul_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.MulAssign.html#tymethod.mul_assign\" class=\"fn\">mul_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>)</h4></section></summary><div class='docblock'>Performs the <code>*=</code> operation. <a href=\"devela/all/trait.MulAssign.html#tymethod.mul_assign\">Read more</a></div></details></div></details>","MulAssign<&i32>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-MulAssign-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0, const unstable\">1.8.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/143802\" title=\"Tracking issue for const_ops\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/arith.rs.html#942\">Source</a></span><a href=\"#impl-MulAssign-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"devela/all/trait.MulAssign.html\" title=\"trait devela::all::MulAssign\">MulAssign</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.mul_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/arith.rs.html#942\">Source</a><a href=\"#method.mul_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.MulAssign.html#tymethod.mul_assign\" class=\"fn\">mul_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>)</h4></section></summary><div class='docblock'>Performs the <code>*=</code> operation. <a href=\"devela/all/trait.MulAssign.html#tymethod.mul_assign\">Read more</a></div></details></div></details>","MulAssign","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Neg-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/143802\" title=\"Tracking issue for const_ops\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/arith.rs.html#735\">Source</a></span><a href=\"#impl-Neg-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"devela/all/trait.Neg.html\" title=\"trait devela::all::Neg\">Neg</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/arith.rs.html#735\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"devela/all/trait.Neg.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>-</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.neg\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/arith.rs.html#735\">Source</a><a href=\"#method.neg\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Neg.html#tymethod.neg\" class=\"fn\">neg</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a></h4></section></summary><div class='docblock'>Performs the unary <code>-</code> operation. <a href=\"devela/all/trait.Neg.html#tymethod.neg\">Read more</a></div></details></div></details>","Neg","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Not-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/143802\" title=\"Tracking issue for const_ops\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#73\">Source</a></span><a href=\"#impl-Not-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"devela/all/trait.Not.html\" title=\"trait devela::all::Not\">Not</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#73\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"devela/all/trait.Not.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>!</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.not\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#73\">Source</a><a href=\"#method.not\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Not.html#tymethod.not\" class=\"fn\">not</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a></h4></section></summary><div class='docblock'>Performs the unary <code>!</code> operation. <a href=\"devela/all/trait.Not.html#tymethod.not\">Read more</a></div></details></div></details>","Not","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Num-for-i32\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/lib.rs.html#175\">Source</a><a href=\"#impl-Num-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://docs.rs/num-traits/0.2/num_traits/trait.Num.html\" title=\"trait num_traits::Num\">Num</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><section id=\"associatedtype.FromStrRadixErr\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/lib.rs.html#175\">Source</a><a href=\"#associatedtype.FromStrRadixErr\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://docs.rs/num-traits/0.2/num_traits/trait.Num.html#associatedtype.FromStrRadixErr\" class=\"associatedtype\">FromStrRadixErr</a> = <a class=\"struct\" href=\"devela/all/struct.ParseIntError.html\" title=\"struct devela::all::ParseIntError\">ParseIntError</a></h4></section><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_str_radix\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/lib.rs.html#175\">Source</a><a href=\"#method.from_str_radix\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/trait.Num.html#tymethod.from_str_radix\" class=\"fn\">from_str_radix</a>(s: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.str.html\">str</a>, radix: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>, <a class=\"struct\" href=\"devela/all/struct.ParseIntError.html\" title=\"struct devela::all::ParseIntError\">ParseIntError</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;i32, ParseIntError&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Convert from a string and radix (typically <code>2..=36</code>). <a href=\"https://docs.rs/num-traits/0.2/num_traits/trait.Num.html#tymethod.from_str_radix\">Read more</a></div></details></div></details>","Num","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Num-for-i32\" class=\"impl\"><a class=\"src rightside\" href=\"src/devela/num/traits/impls.rs.html#397\">Source</a><a href=\"#impl-Num-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"devela/num/trait.Num.html\" title=\"trait devela::num::Num\">Num</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Inner\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/devela/num/traits/impls.rs.html#397\">Source</a><a href=\"#associatedtype.Inner\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"devela/num/trait.Num.html#associatedtype.Inner\" class=\"associatedtype\">Inner</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h4></section></summary><div class='docblock'>The internal representation of this numeric type.</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Out\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/devela/num/traits/impls.rs.html#397\">Source</a><a href=\"#associatedtype.Out\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"devela/num/trait.Num.html#associatedtype.Out\" class=\"associatedtype\">Out</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h4></section></summary><div class='docblock'>The output type for operations.</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Rhs\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/devela/num/traits/impls.rs.html#397\">Source</a><a href=\"#associatedtype.Rhs\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"devela/num/trait.Num.html#associatedtype.Rhs\" class=\"associatedtype\">Rhs</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h4></section></summary><div class='docblock'>The right hand side type for operations.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.num_into\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/num/traits/impls.rs.html#397\">Source</a><a href=\"#method.num_into\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/num/trait.Num.html#tymethod.num_into\" class=\"fn\">num_into</a>(self) -&gt; Self::<a class=\"associatedtype\" href=\"devela/num/trait.Num.html#associatedtype.Inner\" title=\"type devela::num::Num::Inner\">Inner</a></h4></section></summary><div class='docblock'>Returns the inner <code>self</code> representation.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.num_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/num/traits/impls.rs.html#397\">Source</a><a href=\"#method.num_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/num/trait.Num.html#method.num_from\" class=\"fn\">num_from</a>(from: Self::<a class=\"associatedtype\" href=\"devela/num/trait.Num.html#associatedtype.Inner\" title=\"type devela::num::Num::Inner\">Inner</a>) -&gt; <a class=\"type\" href=\"devela/num/type.NumResult.html\" title=\"type devela::num::NumResult\">Result</a>&lt;Self&gt;</h4></section></summary><div class='docblock'>Returns <code>Self</code> if given a valid <code>value</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.num_from_ref\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/num/traits/impls.rs.html#397\">Source</a><a href=\"#method.num_from_ref\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/num/trait.Num.html#method.num_from_ref\" class=\"fn\">num_from_ref</a>(from: &amp;Self::<a class=\"associatedtype\" href=\"devela/num/trait.Num.html#associatedtype.Inner\" title=\"type devela::num::Num::Inner\">Inner</a>) -&gt; <a class=\"type\" href=\"devela/num/type.NumResult.html\" title=\"type devela::num::NumResult\">Result</a>&lt;Self&gt;</h4></section></summary><div class='docblock'>Returns <code>Self</code> if given a valid <code>&amp;value</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.num_set\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/num/traits/impls.rs.html#397\">Source</a><a href=\"#method.num_set\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/num/trait.Num.html#method.num_set\" class=\"fn\">num_set</a>(&amp;mut self, value: Self::<a class=\"associatedtype\" href=\"devela/num/trait.Num.html#associatedtype.Inner\" title=\"type devela::num::Num::Inner\">Inner</a>) -&gt; <a class=\"type\" href=\"devela/num/type.NumResult.html\" title=\"type devela::num::NumResult\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>&gt;</h4></section></summary><div class='docblock'>Sets <code>self</code> to the given valid <code>value</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.num_set_ref\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/num/traits/impls.rs.html#397\">Source</a><a href=\"#method.num_set_ref\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/num/trait.Num.html#method.num_set_ref\" class=\"fn\">num_set_ref</a>(&amp;mut self, value: &amp;Self::<a class=\"associatedtype\" href=\"devela/num/trait.Num.html#associatedtype.Inner\" title=\"type devela::num::Num::Inner\">Inner</a>) -&gt; <a class=\"type\" href=\"devela/num/type.NumResult.html\" title=\"type devela::num::NumResult\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>&gt;</h4></section></summary><div class='docblock'>Sets <code>self</code> to the given valid <code>&amp;value</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.num_is_zero\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/num/traits/impls.rs.html#397\">Source</a><a href=\"#method.num_is_zero\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/num/trait.Num.html#method.num_is_zero\" class=\"fn\">num_is_zero</a>(&amp;self) -&gt; <a class=\"type\" href=\"devela/num/type.NumResult.html\" title=\"type devela::num::NumResult\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a>&gt;</h4></section></summary><div class='docblock'>Returns <code>true</code> if <code>self</code> is zero.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.num_is_one\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/num/traits/impls.rs.html#397\">Source</a><a href=\"#method.num_is_one\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/num/trait.Num.html#method.num_is_one\" class=\"fn\">num_is_one</a>(&amp;self) -&gt; <a class=\"type\" href=\"devela/num/type.NumResult.html\" title=\"type devela::num::NumResult\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a>&gt;</h4></section></summary><div class='docblock'>Returns <code>true</code> if <code>self</code> is one.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.num_get_zero\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/num/traits/impls.rs.html#397\">Source</a><a href=\"#method.num_get_zero\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/num/trait.Num.html#method.num_get_zero\" class=\"fn\">num_get_zero</a>() -&gt; <a class=\"type\" href=\"devela/num/type.NumResult.html\" title=\"type devela::num::NumResult\">Result</a>&lt;Self&gt;</h4></section></summary><div class='docblock'>Returns the number zero.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.num_get_one\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/num/traits/impls.rs.html#397\">Source</a><a href=\"#method.num_get_one\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/num/trait.Num.html#method.num_get_one\" class=\"fn\">num_get_one</a>() -&gt; <a class=\"type\" href=\"devela/num/type.NumResult.html\" title=\"type devela::num::NumResult\">Result</a>&lt;Self&gt;</h4></section></summary><div class='docblock'>Returns the number one.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.num_set_zero\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/num/traits/impls.rs.html#397\">Source</a><a href=\"#method.num_set_zero\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/num/trait.Num.html#method.num_set_zero\" class=\"fn\">num_set_zero</a>(&amp;mut self) -&gt; <a class=\"type\" href=\"devela/num/type.NumResult.html\" title=\"type devela::num::NumResult\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>&gt;</h4></section></summary><div class='docblock'>Sets <code>self</code> to <code>0</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.num_set_one\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/num/traits/impls.rs.html#397\">Source</a><a href=\"#method.num_set_one\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/num/trait.Num.html#method.num_set_one\" class=\"fn\">num_set_one</a>(&amp;mut self) -&gt; <a class=\"type\" href=\"devela/num/type.NumResult.html\" title=\"type devela::num::NumResult\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>&gt;</h4></section></summary><div class='docblock'>Sets the number to one.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.num_add\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/num/traits/impls.rs.html#397\">Source</a><a href=\"#method.num_add\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/num/trait.Num.html#method.num_add\" class=\"fn\">num_add</a>(self, other: Self) -&gt; <a class=\"type\" href=\"devela/num/type.NumResult.html\" title=\"type devela::num::NumResult\">Result</a>&lt;Self::<a class=\"associatedtype\" href=\"devela/num/trait.Num.html#associatedtype.Out\" title=\"type devela::num::Num::Out\">Out</a>&gt;</h4></section></summary><div class='docblock'>Computes <code>self + rhs</code> (addition).</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.num_ref_add\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/num/traits/impls.rs.html#397\">Source</a><a href=\"#method.num_ref_add\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/num/trait.Num.html#method.num_ref_add\" class=\"fn\">num_ref_add</a>(&amp;self, other: &amp;Self) -&gt; <a class=\"type\" href=\"devela/num/type.NumResult.html\" title=\"type devela::num::NumResult\">Result</a>&lt;Self::<a class=\"associatedtype\" href=\"devela/num/trait.Num.html#associatedtype.Out\" title=\"type devela::num::Num::Out\">Out</a>&gt;</h4></section></summary><div class='docblock'><em>Like <a href=\"devela/num/trait.Num.html#method.num_add\"><code>num_add</code></a> but takes the arguments by reference.</em></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.num_ref_add_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/num/traits/impls.rs.html#397\">Source</a><a href=\"#method.num_ref_add_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/num/trait.Num.html#method.num_ref_add_assign\" class=\"fn\">num_ref_add_assign</a>(&amp;mut self, other: &amp;Self) -&gt; <a class=\"type\" href=\"devela/num/type.NumResult.html\" title=\"type devela::num::NumResult\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>&gt;</h4></section></summary><div class='docblock'>Computes <code>&amp;mut self += rhs;</code> (addition).</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.num_mul\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/num/traits/impls.rs.html#397\">Source</a><a href=\"#method.num_mul\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/num/trait.Num.html#method.num_mul\" class=\"fn\">num_mul</a>(self, other: Self) -&gt; <a class=\"type\" href=\"devela/num/type.NumResult.html\" title=\"type devela::num::NumResult\">Result</a>&lt;Self::<a class=\"associatedtype\" href=\"devela/num/trait.Num.html#associatedtype.Out\" title=\"type devela::num::Num::Out\">Out</a>&gt;</h4></section></summary><div class='docblock'>Computes <code>self * rhs</code> (multiplication).</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.num_ref_mul\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/num/traits/impls.rs.html#397\">Source</a><a href=\"#method.num_ref_mul\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/num/trait.Num.html#method.num_ref_mul\" class=\"fn\">num_ref_mul</a>(&amp;self, other: &amp;Self) -&gt; <a class=\"type\" href=\"devela/num/type.NumResult.html\" title=\"type devela::num::NumResult\">Result</a>&lt;Self::<a class=\"associatedtype\" href=\"devela/num/trait.Num.html#associatedtype.Out\" title=\"type devela::num::Num::Out\">Out</a>&gt;</h4></section></summary><div class='docblock'><em>Like <a href=\"devela/num/trait.Num.html#method.num_mul\"><code>num_mul</code></a> but takes the arguments by reference.</em></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.num_ref_mul_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/num/traits/impls.rs.html#397\">Source</a><a href=\"#method.num_ref_mul_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/num/trait.Num.html#method.num_ref_mul_assign\" class=\"fn\">num_ref_mul_assign</a>(&amp;mut self, other: &amp;Self) -&gt; <a class=\"type\" href=\"devela/num/type.NumResult.html\" title=\"type devela::num::NumResult\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>&gt;</h4></section></summary><div class='docblock'>Computes <code>&amp;mut self *= rhs;</code> (multiplication).</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.num_sub\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/num/traits/impls.rs.html#397\">Source</a><a href=\"#method.num_sub\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/num/trait.Num.html#method.num_sub\" class=\"fn\">num_sub</a>(self, other: Self) -&gt; <a class=\"type\" href=\"devela/num/type.NumResult.html\" title=\"type devela::num::NumResult\">Result</a>&lt;Self::<a class=\"associatedtype\" href=\"devela/num/trait.Num.html#associatedtype.Out\" title=\"type devela::num::Num::Out\">Out</a>&gt;</h4></section></summary><div class='docblock'>Computes <code>self - rhs</code> (subtraction).</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.num_ref_sub\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/num/traits/impls.rs.html#397\">Source</a><a href=\"#method.num_ref_sub\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/num/trait.Num.html#method.num_ref_sub\" class=\"fn\">num_ref_sub</a>(&amp;self, other: &amp;Self) -&gt; <a class=\"type\" href=\"devela/num/type.NumResult.html\" title=\"type devela::num::NumResult\">Result</a>&lt;Self::<a class=\"associatedtype\" href=\"devela/num/trait.Num.html#associatedtype.Out\" title=\"type devela::num::Num::Out\">Out</a>&gt;</h4></section></summary><div class='docblock'><em>Like <a href=\"devela/num/trait.Num.html#method.num_sub\"><code>num_sub</code></a> but takes the arguments by reference.</em></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.num_ref_sub_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/num/traits/impls.rs.html#397\">Source</a><a href=\"#method.num_ref_sub_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/num/trait.Num.html#method.num_ref_sub_assign\" class=\"fn\">num_ref_sub_assign</a>(&amp;mut self, other: &amp;Self) -&gt; <a class=\"type\" href=\"devela/num/type.NumResult.html\" title=\"type devela::num::NumResult\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>&gt;</h4></section></summary><div class='docblock'>Computes <code>&amp;mut self -= rhs;</code> (subtraction).</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.num_div\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/num/traits/impls.rs.html#397\">Source</a><a href=\"#method.num_div\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/num/trait.Num.html#method.num_div\" class=\"fn\">num_div</a>(self, other: Self) -&gt; <a class=\"type\" href=\"devela/num/type.NumResult.html\" title=\"type devela::num::NumResult\">Result</a>&lt;Self::<a class=\"associatedtype\" href=\"devela/num/trait.Num.html#associatedtype.Out\" title=\"type devela::num::Num::Out\">Out</a>&gt;</h4></section></summary><div class='docblock'>Computes <code>self / rhs</code> (division).</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.num_ref_div\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/num/traits/impls.rs.html#397\">Source</a><a href=\"#method.num_ref_div\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/num/trait.Num.html#method.num_ref_div\" class=\"fn\">num_ref_div</a>(&amp;self, other: &amp;Self) -&gt; <a class=\"type\" href=\"devela/num/type.NumResult.html\" title=\"type devela::num::NumResult\">Result</a>&lt;Self::<a class=\"associatedtype\" href=\"devela/num/trait.Num.html#associatedtype.Out\" title=\"type devela::num::Num::Out\">Out</a>&gt;</h4></section></summary><div class='docblock'><em>Like <a href=\"devela/num/trait.Num.html#method.num_div\"><code>num_div</code></a> but takes the arguments by reference.</em></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.num_ref_div_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/num/traits/impls.rs.html#397\">Source</a><a href=\"#method.num_ref_div_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/num/trait.Num.html#method.num_ref_div_assign\" class=\"fn\">num_ref_div_assign</a>(&amp;mut self, other: &amp;Self) -&gt; <a class=\"type\" href=\"devela/num/type.NumResult.html\" title=\"type devela::num::NumResult\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>&gt;</h4></section></summary><div class='docblock'>Computes <code>&amp;mut self /= rhs;</code> (division).</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.num_rem\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/num/traits/impls.rs.html#397\">Source</a><a href=\"#method.num_rem\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/num/trait.Num.html#method.num_rem\" class=\"fn\">num_rem</a>(self, other: Self) -&gt; <a class=\"type\" href=\"devela/num/type.NumResult.html\" title=\"type devela::num::NumResult\">Result</a>&lt;Self::<a class=\"associatedtype\" href=\"devela/num/trait.Num.html#associatedtype.Out\" title=\"type devela::num::Num::Out\">Out</a>&gt;</h4></section></summary><div class='docblock'>Computes <code>self % rhs</code> (remainder).</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.num_ref_rem\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/num/traits/impls.rs.html#397\">Source</a><a href=\"#method.num_ref_rem\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/num/trait.Num.html#method.num_ref_rem\" class=\"fn\">num_ref_rem</a>(&amp;self, other: &amp;Self) -&gt; <a class=\"type\" href=\"devela/num/type.NumResult.html\" title=\"type devela::num::NumResult\">Result</a>&lt;Self::<a class=\"associatedtype\" href=\"devela/num/trait.Num.html#associatedtype.Out\" title=\"type devela::num::Num::Out\">Out</a>&gt;</h4></section></summary><div class='docblock'><em>Like <a href=\"devela/num/trait.Num.html#method.num_rem\"><code>num_rem</code></a> but takes the arguments by reference.</em></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.num_ref_rem_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/num/traits/impls.rs.html#397\">Source</a><a href=\"#method.num_ref_rem_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/num/trait.Num.html#method.num_ref_rem_assign\" class=\"fn\">num_ref_rem_assign</a>(&amp;mut self, other: &amp;Self) -&gt; <a class=\"type\" href=\"devela/num/type.NumResult.html\" title=\"type devela::num::NumResult\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>&gt;</h4></section></summary><div class='docblock'>Computes <code>&amp;mut self %= rhs;</code> (remainder).</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.num_neg\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/num/traits/impls.rs.html#397\">Source</a><a href=\"#method.num_neg\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/num/trait.Num.html#method.num_neg\" class=\"fn\">num_neg</a>(self) -&gt; <a class=\"type\" href=\"devela/num/type.NumResult.html\" title=\"type devela::num::NumResult\">Result</a>&lt;Self::<a class=\"associatedtype\" href=\"devela/num/trait.Num.html#associatedtype.Out\" title=\"type devela::num::Num::Out\">Out</a>&gt;</h4></section></summary><div class='docblock'>Computes <code>-self</code> (additive inverse).</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.num_ref_neg\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/num/traits/impls.rs.html#397\">Source</a><a href=\"#method.num_ref_neg\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/num/trait.Num.html#method.num_ref_neg\" class=\"fn\">num_ref_neg</a>(&amp;self) -&gt; <a class=\"type\" href=\"devela/num/type.NumResult.html\" title=\"type devela::num::NumResult\">Result</a>&lt;Self::<a class=\"associatedtype\" href=\"devela/num/trait.Num.html#associatedtype.Out\" title=\"type devela::num::Num::Out\">Out</a>&gt;</h4></section></summary><div class='docblock'><em>Like <a href=\"devela/num/trait.Num.html#method.num_neg\"><code>num_neg</code></a> but takes the arguments by reference.</em></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.num_abs\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/num/traits/impls.rs.html#397\">Source</a><a href=\"#method.num_abs\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/num/trait.Num.html#method.num_abs\" class=\"fn\">num_abs</a>(self) -&gt; <a class=\"type\" href=\"devela/num/type.NumResult.html\" title=\"type devela::num::NumResult\">Result</a>&lt;Self::<a class=\"associatedtype\" href=\"devela/num/trait.Num.html#associatedtype.Out\" title=\"type devela::num::Num::Out\">Out</a>&gt;</h4></section></summary><div class='docblock'>Computes <code>|self|</code> (absolute value).</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.num_ref_abs\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/num/traits/impls.rs.html#397\">Source</a><a href=\"#method.num_ref_abs\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/num/trait.Num.html#method.num_ref_abs\" class=\"fn\">num_ref_abs</a>(&amp;self) -&gt; <a class=\"type\" href=\"devela/num/type.NumResult.html\" title=\"type devela::num::NumResult\">Result</a>&lt;Self::<a class=\"associatedtype\" href=\"devela/num/trait.Num.html#associatedtype.Out\" title=\"type devela::num::Num::Out\">Out</a>&gt;</h4></section></summary><div class='docblock'><em>Like <a href=\"devela/num/trait.Num.html#method.num_abs\"><code>num_abs</code></a> but takes the arguments by reference.</em></div></details></div></details>","Num","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-NumBufferTrait-for-i32\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/fmt/num_buffer.rs.html#26-33\">Source</a><a href=\"#impl-NumBufferTrait-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/num_buffer/trait.NumBufferTrait.html\" title=\"trait core::fmt::num_buffer::NumBufferTrait\">NumBufferTrait</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedconstant.BUF_SIZE\" class=\"associatedconstant trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/fmt/num_buffer.rs.html#26-33\">Source</a><a href=\"#associatedconstant.BUF_SIZE\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a href=\"https://doc.rust-lang.org/nightly/core/fmt/num_buffer/trait.NumBufferTrait.html#associatedconstant.BUF_SIZE\" class=\"constant\">BUF_SIZE</a>: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a> = 11usize</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>int_format_into</code>)</span></div></span><div class='docblock'>Maximum number of digits in decimal base of the implemented integer.</div></details></div></details>","NumBufferTrait","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-NumCast-for-i32\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/cast.rs.html#691\">Source</a><a href=\"#impl-NumCast-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://docs.rs/num-traits/0.2/num_traits/cast/trait.NumCast.html\" title=\"trait num_traits::cast::NumCast\">NumCast</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/cast.rs.html#691\">Source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/cast/trait.NumCast.html#tymethod.from\" class=\"fn\">from</a>&lt;N&gt;(n: N) -&gt; <a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Option&lt;i32&gt;\">ⓘ</a><div class=\"where\">where\n    N: <a class=\"trait\" href=\"https://docs.rs/num-traits/0.2/num_traits/cast/trait.ToPrimitive.html\" title=\"trait num_traits::cast::ToPrimitive\">ToPrimitive</a>,</div></h4></section></summary><div class='docblock'>Creates a number from another value that can be converted into\na primitive via the <code>ToPrimitive</code> trait. If the source value cannot be\nrepresented by the target type, then <code>None</code> is returned. <a href=\"https://docs.rs/num-traits/0.2/num_traits/cast/trait.NumCast.html#tymethod.from\">Read more</a></div></details></div></details>","NumCast","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-NumConst-for-i32\" class=\"impl\"><a class=\"src rightside\" href=\"src/devela/num/traits/constants.rs.html#325\">Source</a><a href=\"#impl-NumConst-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"devela/num/trait.NumConst.html\" title=\"trait devela::num::NumConst\">NumConst</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedconstant.NUM_IS_BIG\" class=\"associatedconstant trait-impl\"><a class=\"src rightside\" href=\"src/devela/num/traits/constants.rs.html#325\">Source</a><a href=\"#associatedconstant.NUM_IS_BIG\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a href=\"devela/num/trait.NumConst.html#associatedconstant.NUM_IS_BIG\" class=\"constant\">NUM_IS_BIG</a>: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a> = false</h4></section></summary><div class='docblock'>Whether the number can represent big quantities.</div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.NUM_IS_INT\" class=\"associatedconstant trait-impl\"><a class=\"src rightside\" href=\"src/devela/num/traits/constants.rs.html#325\">Source</a><a href=\"#associatedconstant.NUM_IS_INT\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a href=\"devela/num/trait.NumConst.html#associatedconstant.NUM_IS_INT\" class=\"constant\">NUM_IS_INT</a>: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a> = true</h4></section></summary><div class='docblock'>Whether the number uses an integer representation.</div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.NUM_IS_FLOAT\" class=\"associatedconstant trait-impl\"><a class=\"src rightside\" href=\"src/devela/num/traits/constants.rs.html#325\">Source</a><a href=\"#associatedconstant.NUM_IS_FLOAT\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a href=\"devela/num/trait.NumConst.html#associatedconstant.NUM_IS_FLOAT\" class=\"constant\">NUM_IS_FLOAT</a>: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a> = false</h4></section></summary><div class='docblock'>Whether the number uses a floating-point representation.</div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.NUM_IS_FIXED\" class=\"associatedconstant trait-impl\"><a class=\"src rightside\" href=\"src/devela/num/traits/constants.rs.html#325\">Source</a><a href=\"#associatedconstant.NUM_IS_FIXED\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a href=\"devela/num/trait.NumConst.html#associatedconstant.NUM_IS_FIXED\" class=\"constant\">NUM_IS_FIXED</a>: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a> = false</h4></section></summary><div class='docblock'>Whether the number uses a fixed-point representation.</div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.NUM_IS_SIGNED\" class=\"associatedconstant trait-impl\"><a class=\"src rightside\" href=\"src/devela/num/traits/constants.rs.html#325\">Source</a><a href=\"#associatedconstant.NUM_IS_SIGNED\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a href=\"devela/num/trait.NumConst.html#associatedconstant.NUM_IS_SIGNED\" class=\"constant\">NUM_IS_SIGNED</a>: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a> = true</h4></section></summary><div class='docblock'>Whether the number includes the sign.</div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.NUM_IS_NICHE\" class=\"associatedconstant trait-impl\"><a class=\"src rightside\" href=\"src/devela/num/traits/constants.rs.html#325\">Source</a><a href=\"#associatedconstant.NUM_IS_NICHE\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a href=\"devela/num/trait.NumConst.html#associatedconstant.NUM_IS_NICHE\" class=\"constant\">NUM_IS_NICHE</a>: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a> = false</h4></section></summary><div class='docblock'>Whether the number has a memory niche optimization.</div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.NUM_ZERO\" class=\"associatedconstant trait-impl\"><a class=\"src rightside\" href=\"src/devela/num/traits/constants.rs.html#325\">Source</a><a href=\"#associatedconstant.NUM_ZERO\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a href=\"devela/num/trait.NumConst.html#associatedconstant.NUM_ZERO\" class=\"constant\">NUM_ZERO</a>: <a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>&gt;</h4></section></summary><div class='docblock'>The additive identity (<code>0</code>), if applicable.</div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.NUM_ONE\" class=\"associatedconstant trait-impl\"><a class=\"src rightside\" href=\"src/devela/num/traits/constants.rs.html#325\">Source</a><a href=\"#associatedconstant.NUM_ONE\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a href=\"devela/num/trait.NumConst.html#associatedconstant.NUM_ONE\" class=\"constant\">NUM_ONE</a>: <a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>&gt;</h4></section></summary><div class='docblock'>The multiplicative identity (<code>1</code>).</div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.NUM_TWO\" class=\"associatedconstant trait-impl\"><a class=\"src rightside\" href=\"src/devela/num/traits/constants.rs.html#325\">Source</a><a href=\"#associatedconstant.NUM_TWO\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a href=\"devela/num/trait.NumConst.html#associatedconstant.NUM_TWO\" class=\"constant\">NUM_TWO</a>: <a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>&gt;</h4></section></summary><div class='docblock'>The only even prime and the fundamental doubling factor (<code>2</code>).</div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.NUM_THREE\" class=\"associatedconstant trait-impl\"><a class=\"src rightside\" href=\"src/devela/num/traits/constants.rs.html#325\">Source</a><a href=\"#associatedconstant.NUM_THREE\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a href=\"devela/num/trait.NumConst.html#associatedconstant.NUM_THREE\" class=\"constant\">NUM_THREE</a>: <a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>&gt;</h4></section></summary><div class='docblock'>The smallest odd prime and the first nontrivial divisor (<code>3</code>).</div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.NUM_NEG_ONE\" class=\"associatedconstant trait-impl\"><a class=\"src rightside\" href=\"src/devela/num/traits/constants.rs.html#325\">Source</a><a href=\"#associatedconstant.NUM_NEG_ONE\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a href=\"devela/num/trait.NumConst.html#associatedconstant.NUM_NEG_ONE\" class=\"constant\">NUM_NEG_ONE</a>: <a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>&gt;</h4></section></summary><div class='docblock'>The additive inverse of <code>ONE</code> (<code>-1</code>), if applicable.</div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.NUM_MIN\" class=\"associatedconstant trait-impl\"><a class=\"src rightside\" href=\"src/devela/num/traits/constants.rs.html#325\">Source</a><a href=\"#associatedconstant.NUM_MIN\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a href=\"devela/num/trait.NumConst.html#associatedconstant.NUM_MIN\" class=\"constant\">NUM_MIN</a>: <a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>&gt;</h4></section></summary><div class='docblock'>The smallest representable value.</div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.NUM_MAX\" class=\"associatedconstant trait-impl\"><a class=\"src rightside\" href=\"src/devela/num/traits/constants.rs.html#325\">Source</a><a href=\"#associatedconstant.NUM_MAX\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a href=\"devela/num/trait.NumConst.html#associatedconstant.NUM_MAX\" class=\"constant\">NUM_MAX</a>: <a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>&gt;</h4></section></summary><div class='docblock'>The greatest representable value.</div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.NUM_MIN_POSITIVE\" class=\"associatedconstant trait-impl\"><a class=\"src rightside\" href=\"src/devela/num/traits/constants.rs.html#325\">Source</a><a href=\"#associatedconstant.NUM_MIN_POSITIVE\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a href=\"devela/num/trait.NumConst.html#associatedconstant.NUM_MIN_POSITIVE\" class=\"constant\">NUM_MIN_POSITIVE</a>: <a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>&gt;</h4></section></summary><div class='docblock'>The smallest representable positive value.</div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.NUM_MAX_NEGATIVE\" class=\"associatedconstant trait-impl\"><a class=\"src rightside\" href=\"src/devela/num/traits/constants.rs.html#325\">Source</a><a href=\"#associatedconstant.NUM_MAX_NEGATIVE\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a href=\"devela/num/trait.NumConst.html#associatedconstant.NUM_MAX_NEGATIVE\" class=\"constant\">NUM_MAX_NEGATIVE</a>: <a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>&gt;</h4></section></summary><div class='docblock'>The greatest representable negative value, if applicable.</div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.NUM_MIN_NORM\" class=\"associatedconstant trait-impl\"><a class=\"src rightside\" href=\"src/devela/num/traits/constants.rs.html#325\">Source</a><a href=\"#associatedconstant.NUM_MIN_NORM\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a href=\"devela/num/trait.NumConst.html#associatedconstant.NUM_MIN_NORM\" class=\"constant\">NUM_MIN_NORM</a>: <a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>&gt;</h4></section></summary><div class='docblock'>The smallest normalized value (e.g. 0.0 for float, <code>MIN</code> for integers).</div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.NUM_MAX_NORM\" class=\"associatedconstant trait-impl\"><a class=\"src rightside\" href=\"src/devela/num/traits/constants.rs.html#325\">Source</a><a href=\"#associatedconstant.NUM_MAX_NORM\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a href=\"devela/num/trait.NumConst.html#associatedconstant.NUM_MAX_NORM\" class=\"constant\">NUM_MAX_NORM</a>: <a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>&gt;</h4></section></summary><div class='docblock'>The greatest normalized value (e.g. 1.0 for float, <code>MAX</code> for integers).</div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.NUM_MAX_POWER_OF_TWO\" class=\"associatedconstant trait-impl\"><a class=\"src rightside\" href=\"src/devela/num/traits/constants.rs.html#325\">Source</a><a href=\"#associatedconstant.NUM_MAX_POWER_OF_TWO\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a href=\"devela/num/trait.NumConst.html#associatedconstant.NUM_MAX_POWER_OF_TWO\" class=\"constant\">NUM_MAX_POWER_OF_TWO</a>: <a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>&gt;</h4></section></summary><div class='docblock'>The maximum representable power of two within the type’s range. <a href=\"devela/num/trait.NumConst.html#associatedconstant.NUM_MAX_POWER_OF_TWO\">Read more</a></div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Num\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/devela/num/traits/constants.rs.html#325\">Source</a><a href=\"#associatedtype.Num\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"devela/num/trait.NumConst.html#associatedtype.Num\" class=\"associatedtype\">Num</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h4></section></summary><div class='docblock'>The underlying numeric type implementing this trait.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_num_zero\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/num/traits/constants.rs.html#88-90\">Source</a><a href=\"#method.is_num_zero\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/num/trait.NumConst.html#method.is_num_zero\" class=\"fn\">is_num_zero</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Whether <code>self</code> is equal to <a href=\"devela/num/trait.NumConst.html#associatedconstant.NUM_ZERO\"><code>NUM_ZERO</code></a>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_num_one\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/num/traits/constants.rs.html#93-95\">Source</a><a href=\"#method.is_num_one\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/num/trait.NumConst.html#method.is_num_one\" class=\"fn\">is_num_one</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Whether <code>self</code> is equal to <a href=\"devela/num/trait.NumConst.html#associatedconstant.NUM_ONE\"><code>NUM_ONE</code></a>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_num_two\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/num/traits/constants.rs.html#98-100\">Source</a><a href=\"#method.is_num_two\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/num/trait.NumConst.html#method.is_num_two\" class=\"fn\">is_num_two</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Whether <code>self</code> is equal to <a href=\"devela/num/trait.NumConst.html#associatedconstant.NUM_TWO\"><code>NUM_TWO</code></a>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_num_three\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/num/traits/constants.rs.html#103-105\">Source</a><a href=\"#method.is_num_three\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/num/trait.NumConst.html#method.is_num_three\" class=\"fn\">is_num_three</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Whether <code>self</code> is equal to <a href=\"devela/num/trait.NumConst.html#associatedconstant.NUM_THREE\"><code>NUM_THREE</code></a>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_num_neg_one\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/num/traits/constants.rs.html#108-110\">Source</a><a href=\"#method.is_num_neg_one\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/num/trait.NumConst.html#method.is_num_neg_one\" class=\"fn\">is_num_neg_one</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Whether <code>self</code> is equal to <a href=\"devela/num/trait.NumConst.html#associatedconstant.NUM_NEG_ONE\"><code>NUM_NEG_ONE</code></a>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_num_min\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/num/traits/constants.rs.html#113-115\">Source</a><a href=\"#method.is_num_min\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/num/trait.NumConst.html#method.is_num_min\" class=\"fn\">is_num_min</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Whether <code>self</code> is equal to <a href=\"devela/num/trait.NumConst.html#associatedconstant.NUM_MIN\"><code>NUM_MIN</code></a>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_num_max\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/num/traits/constants.rs.html#118-120\">Source</a><a href=\"#method.is_num_max\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/num/trait.NumConst.html#method.is_num_max\" class=\"fn\">is_num_max</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Whether <code>self</code> is equal to <a href=\"devela/num/trait.NumConst.html#associatedconstant.NUM_MAX\"><code>NUM_MAX</code></a>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_num_min_positive\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/num/traits/constants.rs.html#123-125\">Source</a><a href=\"#method.is_num_min_positive\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/num/trait.NumConst.html#method.is_num_min_positive\" class=\"fn\">is_num_min_positive</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Whether <code>self</code> is equal to <code>Some(</code><a href=\"devela/num/trait.NumConst.html#associatedconstant.NUM_MIN_POSITIVE\"><code>NUM_MIN_POSITIVE</code></a><code>)</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_num_max_negative\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/num/traits/constants.rs.html#128-130\">Source</a><a href=\"#method.is_num_max_negative\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/num/trait.NumConst.html#method.is_num_max_negative\" class=\"fn\">is_num_max_negative</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Whether <code>self</code> is equal to <a href=\"devela/num/trait.NumConst.html#associatedconstant.NUM_MAX_NEGATIVE\"><code>NUM_MAX_NEGATIVE</code></a>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_num_min_norm\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/num/traits/constants.rs.html#133-135\">Source</a><a href=\"#method.is_num_min_norm\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/num/trait.NumConst.html#method.is_num_min_norm\" class=\"fn\">is_num_min_norm</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Whether <code>self</code> is equal to <a href=\"devela/num/trait.NumConst.html#associatedconstant.NUM_MIN_NORM\"><code>NUM_MIN_NORM</code></a>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_num_max_norm\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/num/traits/constants.rs.html#138-140\">Source</a><a href=\"#method.is_num_max_norm\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/num/trait.NumConst.html#method.is_num_max_norm\" class=\"fn\">is_num_max_norm</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Whether <code>self</code> is equal to <a href=\"devela/num/trait.NumConst.html#associatedconstant.NUM_MAX_NORM\"><code>NUM_MAX_NORM</code></a>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_num_max_power_of_two\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/num/traits/constants.rs.html#143-145\">Source</a><a href=\"#method.is_num_max_power_of_two\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/num/trait.NumConst.html#method.is_num_max_power_of_two\" class=\"fn\">is_num_max_power_of_two</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Whether <code>self</code> is equal to <a href=\"devela/num/trait.NumConst.html#associatedconstant.NUM_MAX_POWER_OF_TWO\"><code>NUM_MAX_POWER_OF_TWO</code></a>.</div></details></div></details>","NumConst","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-NumInt-for-i32\" class=\"impl\"><a class=\"src rightside\" href=\"src/devela/num/int/num_trait/impls.rs.html#387\">Source</a><a href=\"#impl-NumInt-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"devela/num/trait.NumInt.html\" title=\"trait devela::num::NumInt\">NumInt</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.OutI\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/devela/num/int/num_trait/impls.rs.html#387\">Source</a><a href=\"#associatedtype.OutI\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"devela/num/trait.NumInt.html#associatedtype.OutI\" class=\"associatedtype\">OutI</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h4></section></summary><div class='docblock'>Specifically signed output type for some operations (▶ <code>int_gcd_ext</code>).</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.int_digital_root\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/num/int/num_trait/impls.rs.html#387\">Source</a><a href=\"#method.int_digital_root\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/num/trait.NumInt.html#method.int_digital_root\" class=\"fn\">int_digital_root</a>(self) -&gt; <a class=\"type\" href=\"devela/num/type.IntResult.html\" title=\"type devela::num::IntResult\">Result</a>&lt;Self::<a class=\"associatedtype\" href=\"devela/num/trait.Num.html#associatedtype.Out\" title=\"type devela::num::Num::Out\">Out</a>&gt;</h4></section></summary><div class='docblock'>Returns the digital root in base 10. <a href=\"devela/num/trait.NumInt.html#method.int_digital_root\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.int_ref_digital_root\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/num/int/num_trait/impls.rs.html#387\">Source</a><a href=\"#method.int_ref_digital_root\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/num/trait.NumInt.html#method.int_ref_digital_root\" class=\"fn\">int_ref_digital_root</a>(&amp;self) -&gt; <a class=\"type\" href=\"devela/num/type.IntResult.html\" title=\"type devela::num::IntResult\">Result</a>&lt;Self::<a class=\"associatedtype\" href=\"devela/num/trait.Num.html#associatedtype.Out\" title=\"type devela::num::Num::Out\">Out</a>&gt;</h4></section></summary><div class='docblock'>Similar to <a href=\"devela/num/trait.NumInt.html#method.int_digital_root\">int_digital_root</a>, but operates on references instead of values.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.int_digital_root_base\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/num/int/num_trait/impls.rs.html#387\">Source</a><a href=\"#method.int_digital_root_base\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/num/trait.NumInt.html#method.int_digital_root_base\" class=\"fn\">int_digital_root_base</a>(self, base: Self::<a class=\"associatedtype\" href=\"devela/num/trait.Num.html#associatedtype.Rhs\" title=\"type devela::num::Num::Rhs\">Rhs</a>) -&gt; <a class=\"type\" href=\"devela/num/type.IntResult.html\" title=\"type devela::num::IntResult\">Result</a>&lt;Self::<a class=\"associatedtype\" href=\"devela/num/trait.Num.html#associatedtype.Out\" title=\"type devela::num::Num::Out\">Out</a>&gt;</h4></section></summary><div class='docblock'>Returns the digital root in the given <code>base</code>. <a href=\"devela/num/trait.NumInt.html#method.int_digital_root_base\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.int_ref_digital_root_base\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/num/int/num_trait/impls.rs.html#387\">Source</a><a href=\"#method.int_ref_digital_root_base\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/num/trait.NumInt.html#method.int_ref_digital_root_base\" class=\"fn\">int_ref_digital_root_base</a>(&amp;self, base: &amp;Self::<a class=\"associatedtype\" href=\"devela/num/trait.Num.html#associatedtype.Rhs\" title=\"type devela::num::Num::Rhs\">Rhs</a>) -&gt; <a class=\"type\" href=\"devela/num/type.IntResult.html\" title=\"type devela::num::IntResult\">Result</a>&lt;Self::<a class=\"associatedtype\" href=\"devela/num/trait.Num.html#associatedtype.Out\" title=\"type devela::num::Num::Out\">Out</a>&gt;</h4></section></summary><div class='docblock'>Similar to <a href=\"devela/num/trait.NumInt.html#method.int_digital_root_base\">int_digital_root_base</a>, but operates on references instead of values.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.int_digits\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/num/int/num_trait/impls.rs.html#387\">Source</a><a href=\"#method.int_digits\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/num/trait.NumInt.html#method.int_digits\" class=\"fn\">int_digits</a>(self) -&gt; <a class=\"type\" href=\"devela/num/type.IntResult.html\" title=\"type devela::num::IntResult\">Result</a>&lt;Self::<a class=\"associatedtype\" href=\"devela/num/trait.Num.html#associatedtype.Out\" title=\"type devela::num::Num::Out\">Out</a>&gt;</h4></section></summary><div class='docblock'>Returns the number of digits in base 10. <a href=\"devela/num/trait.NumInt.html#method.int_digits\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.int_ref_digits\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/num/int/num_trait/impls.rs.html#387\">Source</a><a href=\"#method.int_ref_digits\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/num/trait.NumInt.html#method.int_ref_digits\" class=\"fn\">int_ref_digits</a>(&amp;self) -&gt; <a class=\"type\" href=\"devela/num/type.IntResult.html\" title=\"type devela::num::IntResult\">Result</a>&lt;Self::<a class=\"associatedtype\" href=\"devela/num/trait.Num.html#associatedtype.Out\" title=\"type devela::num::Num::Out\">Out</a>&gt;</h4></section></summary><div class='docblock'>Similar to <a href=\"devela/num/trait.NumInt.html#method.int_digits\">int_digits</a>, but operates on references instead of values.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.int_digits_sign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/num/int/num_trait/impls.rs.html#387\">Source</a><a href=\"#method.int_digits_sign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/num/trait.NumInt.html#method.int_digits_sign\" class=\"fn\">int_digits_sign</a>(self) -&gt; <a class=\"type\" href=\"devela/num/type.IntResult.html\" title=\"type devela::num::IntResult\">Result</a>&lt;Self::<a class=\"associatedtype\" href=\"devela/num/trait.Num.html#associatedtype.Out\" title=\"type devela::num::Num::Out\">Out</a>&gt;</h4></section></summary><div class='docblock'>Returns the number of digits in base 10 including the negative sign. <a href=\"devela/num/trait.NumInt.html#method.int_digits_sign\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.int_ref_digits_sign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/num/int/num_trait/impls.rs.html#387\">Source</a><a href=\"#method.int_ref_digits_sign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/num/trait.NumInt.html#method.int_ref_digits_sign\" class=\"fn\">int_ref_digits_sign</a>(&amp;self) -&gt; <a class=\"type\" href=\"devela/num/type.IntResult.html\" title=\"type devela::num::IntResult\">Result</a>&lt;Self::<a class=\"associatedtype\" href=\"devela/num/trait.Num.html#associatedtype.Out\" title=\"type devela::num::Num::Out\">Out</a>&gt;</h4></section></summary><div class='docblock'>Similar to <a href=\"devela/num/trait.NumInt.html#method.int_digits_sign\">int_digits_sign</a>, but operates on references instead of values.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.int_digits_base\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/num/int/num_trait/impls.rs.html#387\">Source</a><a href=\"#method.int_digits_base\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/num/trait.NumInt.html#method.int_digits_base\" class=\"fn\">int_digits_base</a>(self, base: Self::<a class=\"associatedtype\" href=\"devela/num/trait.Num.html#associatedtype.Rhs\" title=\"type devela::num::Num::Rhs\">Rhs</a>) -&gt; <a class=\"type\" href=\"devela/num/type.IntResult.html\" title=\"type devela::num::IntResult\">Result</a>&lt;Self::<a class=\"associatedtype\" href=\"devela/num/trait.Num.html#associatedtype.Out\" title=\"type devela::num::Num::Out\">Out</a>&gt;</h4></section></summary><div class='docblock'>Returns the number of digits in the given <code>base</code>. <a href=\"devela/num/trait.NumInt.html#method.int_digits_base\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.int_ref_digits_base\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/num/int/num_trait/impls.rs.html#387\">Source</a><a href=\"#method.int_ref_digits_base\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/num/trait.NumInt.html#method.int_ref_digits_base\" class=\"fn\">int_ref_digits_base</a>(&amp;self, base: &amp;Self::<a class=\"associatedtype\" href=\"devela/num/trait.Num.html#associatedtype.Rhs\" title=\"type devela::num::Num::Rhs\">Rhs</a>) -&gt; <a class=\"type\" href=\"devela/num/type.IntResult.html\" title=\"type devela::num::IntResult\">Result</a>&lt;Self::<a class=\"associatedtype\" href=\"devela/num/trait.Num.html#associatedtype.Out\" title=\"type devela::num::Num::Out\">Out</a>&gt;</h4></section></summary><div class='docblock'>Similar to <a href=\"devela/num/trait.NumInt.html#method.int_digits_base\">int_digits_base</a>, but operates on references instead of values.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.int_digits_base_sign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/num/int/num_trait/impls.rs.html#387\">Source</a><a href=\"#method.int_digits_base_sign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/num/trait.NumInt.html#method.int_digits_base_sign\" class=\"fn\">int_digits_base_sign</a>(self, base: Self::<a class=\"associatedtype\" href=\"devela/num/trait.Num.html#associatedtype.Rhs\" title=\"type devela::num::Num::Rhs\">Rhs</a>) -&gt; <a class=\"type\" href=\"devela/num/type.IntResult.html\" title=\"type devela::num::IntResult\">Result</a>&lt;Self::<a class=\"associatedtype\" href=\"devela/num/trait.Num.html#associatedtype.Out\" title=\"type devela::num::Num::Out\">Out</a>&gt;</h4></section></summary><div class='docblock'>Returns the number of digits in the given <code>base</code>. <a href=\"devela/num/trait.NumInt.html#method.int_digits_base_sign\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.int_ref_digits_base_sign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/num/int/num_trait/impls.rs.html#387\">Source</a><a href=\"#method.int_ref_digits_base_sign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/num/trait.NumInt.html#method.int_ref_digits_base_sign\" class=\"fn\">int_ref_digits_base_sign</a>(&amp;self, base: &amp;Self::<a class=\"associatedtype\" href=\"devela/num/trait.Num.html#associatedtype.Rhs\" title=\"type devela::num::Num::Rhs\">Rhs</a>) -&gt; <a class=\"type\" href=\"devela/num/type.IntResult.html\" title=\"type devela::num::IntResult\">Result</a>&lt;Self::<a class=\"associatedtype\" href=\"devela/num/trait.Num.html#associatedtype.Out\" title=\"type devela::num::Num::Out\">Out</a>&gt;</h4></section></summary><div class='docblock'>Similar to <a href=\"devela/num/trait.NumInt.html#method.int_digits_base_sign\">int_digits_base_sign</a>, but operates on references instead of values.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.int_abs\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/num/int/num_trait/impls.rs.html#387\">Source</a><a href=\"#method.int_abs\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/num/trait.NumInt.html#method.int_abs\" class=\"fn\">int_abs</a>(self) -&gt; <a class=\"type\" href=\"devela/num/type.IntResult.html\" title=\"type devela::num::IntResult\">Result</a>&lt;Self::<a class=\"associatedtype\" href=\"devela/num/trait.Num.html#associatedtype.Out\" title=\"type devela::num::Num::Out\">Out</a>&gt;</h4></section></summary><div class='docblock'>Returns the absolute value. <a href=\"devela/num/trait.NumInt.html#method.int_abs\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.int_ref_abs\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/num/int/num_trait/impls.rs.html#387\">Source</a><a href=\"#method.int_ref_abs\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/num/trait.NumInt.html#method.int_ref_abs\" class=\"fn\">int_ref_abs</a>(&amp;self) -&gt; <a class=\"type\" href=\"devela/num/type.IntResult.html\" title=\"type devela::num::IntResult\">Result</a>&lt;Self::<a class=\"associatedtype\" href=\"devela/num/trait.Num.html#associatedtype.Out\" title=\"type devela::num::Num::Out\">Out</a>&gt;</h4></section></summary><div class='docblock'>Similar to <a href=\"devela/num/trait.NumInt.html#method.int_abs\">int_abs</a>, but operates on references instead of values.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.int_is_even\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/num/int/num_trait/impls.rs.html#387\">Source</a><a href=\"#method.int_is_even\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/num/trait.NumInt.html#method.int_is_even\" class=\"fn\">int_is_even</a>(self) -&gt; <a class=\"type\" href=\"devela/num/type.IntResult.html\" title=\"type devela::num::IntResult\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a>&gt;</h4></section></summary><div class='docblock'>Returns <code>true</code> if <code>self</code> is even. <a href=\"devela/num/trait.NumInt.html#method.int_is_even\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.int_ref_is_even\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/num/int/num_trait/impls.rs.html#387\">Source</a><a href=\"#method.int_ref_is_even\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/num/trait.NumInt.html#method.int_ref_is_even\" class=\"fn\">int_ref_is_even</a>(&amp;self) -&gt; <a class=\"type\" href=\"devela/num/type.IntResult.html\" title=\"type devela::num::IntResult\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a>&gt;</h4></section></summary><div class='docblock'>Similar to <a href=\"devela/num/trait.NumInt.html#method.int_is_even\">int_is_even</a>, but operates on references instead of values.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.int_is_odd\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/num/int/num_trait/impls.rs.html#387\">Source</a><a href=\"#method.int_is_odd\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/num/trait.NumInt.html#method.int_is_odd\" class=\"fn\">int_is_odd</a>(self) -&gt; <a class=\"type\" href=\"devela/num/type.IntResult.html\" title=\"type devela::num::IntResult\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a>&gt;</h4></section></summary><div class='docblock'>Returns <code>true</code> if <code>self</code> is odd. <a href=\"devela/num/trait.NumInt.html#method.int_is_odd\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.int_ref_is_odd\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/num/int/num_trait/impls.rs.html#387\">Source</a><a href=\"#method.int_ref_is_odd\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/num/trait.NumInt.html#method.int_ref_is_odd\" class=\"fn\">int_ref_is_odd</a>(&amp;self) -&gt; <a class=\"type\" href=\"devela/num/type.IntResult.html\" title=\"type devela::num::IntResult\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a>&gt;</h4></section></summary><div class='docblock'>Similar to <a href=\"devela/num/trait.NumInt.html#method.int_is_odd\">int_is_odd</a>, but operates on references instead of values.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.int_gcd\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/num/int/num_trait/impls.rs.html#387\">Source</a><a href=\"#method.int_gcd\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/num/trait.NumInt.html#method.int_gcd\" class=\"fn\">int_gcd</a>(self, other: Self::<a class=\"associatedtype\" href=\"devela/num/trait.Num.html#associatedtype.Rhs\" title=\"type devela::num::Num::Rhs\">Rhs</a>) -&gt; <a class=\"type\" href=\"devela/num/type.IntResult.html\" title=\"type devela::num::IntResult\">Result</a>&lt;Self::<a class=\"associatedtype\" href=\"devela/num/trait.Num.html#associatedtype.Out\" title=\"type devela::num::Num::Out\">Out</a>&gt;</h4></section></summary><div class='docblock'>Returns the <abbr title=\"Greatest Common Divisor\">GCD</abbr>. <a href=\"devela/num/trait.NumInt.html#method.int_gcd\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.int_ref_gcd\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/num/int/num_trait/impls.rs.html#387\">Source</a><a href=\"#method.int_ref_gcd\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/num/trait.NumInt.html#method.int_ref_gcd\" class=\"fn\">int_ref_gcd</a>(&amp;self, other: &amp;Self::<a class=\"associatedtype\" href=\"devela/num/trait.Num.html#associatedtype.Rhs\" title=\"type devela::num::Num::Rhs\">Rhs</a>) -&gt; <a class=\"type\" href=\"devela/num/type.IntResult.html\" title=\"type devela::num::IntResult\">Result</a>&lt;Self::<a class=\"associatedtype\" href=\"devela/num/trait.Num.html#associatedtype.Out\" title=\"type devela::num::Num::Out\">Out</a>&gt;</h4></section></summary><div class='docblock'>Similar to <a href=\"devela/num/trait.NumInt.html#method.int_gcd\">int_gcd</a>, but operates on references instead of values.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.int_lcm\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/num/int/num_trait/impls.rs.html#387\">Source</a><a href=\"#method.int_lcm\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/num/trait.NumInt.html#method.int_lcm\" class=\"fn\">int_lcm</a>(self, other: Self::<a class=\"associatedtype\" href=\"devela/num/trait.Num.html#associatedtype.Rhs\" title=\"type devela::num::Num::Rhs\">Rhs</a>) -&gt; <a class=\"type\" href=\"devela/num/type.IntResult.html\" title=\"type devela::num::IntResult\">Result</a>&lt;Self::<a class=\"associatedtype\" href=\"devela/num/trait.Num.html#associatedtype.Out\" title=\"type devela::num::Num::Out\">Out</a>&gt;</h4></section></summary><div class='docblock'>Returns the <abbr title=\"Least Common Multiple\">LCM</abbr>. <a href=\"devela/num/trait.NumInt.html#method.int_lcm\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.int_ref_lcm\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/num/int/num_trait/impls.rs.html#387\">Source</a><a href=\"#method.int_ref_lcm\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/num/trait.NumInt.html#method.int_ref_lcm\" class=\"fn\">int_ref_lcm</a>(&amp;self, other: &amp;Self::<a class=\"associatedtype\" href=\"devela/num/trait.Num.html#associatedtype.Rhs\" title=\"type devela::num::Num::Rhs\">Rhs</a>) -&gt; <a class=\"type\" href=\"devela/num/type.IntResult.html\" title=\"type devela::num::IntResult\">Result</a>&lt;Self::<a class=\"associatedtype\" href=\"devela/num/trait.Num.html#associatedtype.Out\" title=\"type devela::num::Num::Out\">Out</a>&gt;</h4></section></summary><div class='docblock'>Similar to <a href=\"devela/num/trait.NumInt.html#method.int_lcm\">int_lcm</a>, but operates on references instead of values.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.int_scale\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/num/int/num_trait/impls.rs.html#387\">Source</a><a href=\"#method.int_scale\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/num/trait.NumInt.html#method.int_scale\" class=\"fn\">int_scale</a>(\n    self,\n    min: Self::<a class=\"associatedtype\" href=\"devela/num/trait.Num.html#associatedtype.Rhs\" title=\"type devela::num::Num::Rhs\">Rhs</a>,\n    max: Self::<a class=\"associatedtype\" href=\"devela/num/trait.Num.html#associatedtype.Rhs\" title=\"type devela::num::Num::Rhs\">Rhs</a>,\n    a: Self::<a class=\"associatedtype\" href=\"devela/num/trait.Num.html#associatedtype.Rhs\" title=\"type devela::num::Num::Rhs\">Rhs</a>,\n    b: Self::<a class=\"associatedtype\" href=\"devela/num/trait.Num.html#associatedtype.Rhs\" title=\"type devela::num::Num::Rhs\">Rhs</a>,\n) -&gt; <a class=\"type\" href=\"devela/num/type.IntResult.html\" title=\"type devela::num::IntResult\">Result</a>&lt;Self::<a class=\"associatedtype\" href=\"devela/num/trait.Num.html#associatedtype.Out\" title=\"type devela::num::Num::Out\">Out</a>&gt;<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"devela/all/trait.Sized.html\" title=\"trait devela::all::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Returns a scaled value in <code>[min..=max]</code> to a new range <code>[a..=b]</code>.\nIf the value lies outside of <code>[min..=max]</code> it will result in extrapolation. <a href=\"devela/num/trait.NumInt.html#method.int_scale\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.int_ref_scale\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/num/int/num_trait/impls.rs.html#387\">Source</a><a href=\"#method.int_ref_scale\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/num/trait.NumInt.html#method.int_ref_scale\" class=\"fn\">int_ref_scale</a>(\n    &amp;self,\n    min: &amp;Self::<a class=\"associatedtype\" href=\"devela/num/trait.Num.html#associatedtype.Rhs\" title=\"type devela::num::Num::Rhs\">Rhs</a>,\n    max: &amp;Self::<a class=\"associatedtype\" href=\"devela/num/trait.Num.html#associatedtype.Rhs\" title=\"type devela::num::Num::Rhs\">Rhs</a>,\n    a: &amp;Self::<a class=\"associatedtype\" href=\"devela/num/trait.Num.html#associatedtype.Rhs\" title=\"type devela::num::Num::Rhs\">Rhs</a>,\n    b: &amp;Self::<a class=\"associatedtype\" href=\"devela/num/trait.Num.html#associatedtype.Rhs\" title=\"type devela::num::Num::Rhs\">Rhs</a>,\n) -&gt; <a class=\"type\" href=\"devela/num/type.IntResult.html\" title=\"type devela::num::IntResult\">Result</a>&lt;Self::<a class=\"associatedtype\" href=\"devela/num/trait.Num.html#associatedtype.Out\" title=\"type devela::num::Num::Out\">Out</a>&gt;</h4></section></summary><div class='docblock'>Similar to <a href=\"devela/num/trait.NumInt.html#method.int_scale\">int_scale</a>, but operates on references instead of values.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.int_scale_wrap\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/num/int/num_trait/impls.rs.html#387\">Source</a><a href=\"#method.int_scale_wrap\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/num/trait.NumInt.html#method.int_scale_wrap\" class=\"fn\">int_scale_wrap</a>(\n    self,\n    min: Self::<a class=\"associatedtype\" href=\"devela/num/trait.Num.html#associatedtype.Rhs\" title=\"type devela::num::Num::Rhs\">Rhs</a>,\n    max: Self::<a class=\"associatedtype\" href=\"devela/num/trait.Num.html#associatedtype.Rhs\" title=\"type devela::num::Num::Rhs\">Rhs</a>,\n    a: Self::<a class=\"associatedtype\" href=\"devela/num/trait.Num.html#associatedtype.Rhs\" title=\"type devela::num::Num::Rhs\">Rhs</a>,\n    b: Self::<a class=\"associatedtype\" href=\"devela/num/trait.Num.html#associatedtype.Rhs\" title=\"type devela::num::Num::Rhs\">Rhs</a>,\n) -&gt; <a class=\"type\" href=\"devela/num/type.IntResult.html\" title=\"type devela::num::IntResult\">Result</a>&lt;Self::<a class=\"associatedtype\" href=\"devela/num/trait.Num.html#associatedtype.Out\" title=\"type devela::num::Num::Out\">Out</a>&gt;<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"devela/all/trait.Sized.html\" title=\"trait devela::all::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Returns a scaled value between <code>[min..=max]</code> to a new range <code>[a..=b]</code>. <a href=\"devela/num/trait.NumInt.html#method.int_scale_wrap\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.int_ref_scale_wrap\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/num/int/num_trait/impls.rs.html#387\">Source</a><a href=\"#method.int_ref_scale_wrap\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/num/trait.NumInt.html#method.int_ref_scale_wrap\" class=\"fn\">int_ref_scale_wrap</a>(\n    &amp;self,\n    min: &amp;Self::<a class=\"associatedtype\" href=\"devela/num/trait.Num.html#associatedtype.Rhs\" title=\"type devela::num::Num::Rhs\">Rhs</a>,\n    max: &amp;Self::<a class=\"associatedtype\" href=\"devela/num/trait.Num.html#associatedtype.Rhs\" title=\"type devela::num::Num::Rhs\">Rhs</a>,\n    a: &amp;Self::<a class=\"associatedtype\" href=\"devela/num/trait.Num.html#associatedtype.Rhs\" title=\"type devela::num::Num::Rhs\">Rhs</a>,\n    b: &amp;Self::<a class=\"associatedtype\" href=\"devela/num/trait.Num.html#associatedtype.Rhs\" title=\"type devela::num::Num::Rhs\">Rhs</a>,\n) -&gt; <a class=\"type\" href=\"devela/num/type.IntResult.html\" title=\"type devela::num::IntResult\">Result</a>&lt;Self::<a class=\"associatedtype\" href=\"devela/num/trait.Num.html#associatedtype.Out\" title=\"type devela::num::Num::Out\">Out</a>&gt;</h4></section></summary><div class='docblock'>Similar to <a href=\"devela/num/trait.NumInt.html#method.int_scale_wrap\">int_scale_wrap</a>, but operates on references instead of values.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.int_factorial\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/num/int/num_trait/impls.rs.html#387\">Source</a><a href=\"#method.int_factorial\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/num/trait.NumInt.html#method.int_factorial\" class=\"fn\">int_factorial</a>(self) -&gt; <a class=\"type\" href=\"devela/num/type.IntResult.html\" title=\"type devela::num::IntResult\">Result</a>&lt;Self::<a class=\"associatedtype\" href=\"devela/num/trait.Num.html#associatedtype.Out\" title=\"type devela::num::Num::Out\">Out</a>&gt;</h4></section></summary><div class='docblock'>Returns the factorial. <a href=\"devela/num/trait.NumInt.html#method.int_factorial\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.int_ref_factorial\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/num/int/num_trait/impls.rs.html#387\">Source</a><a href=\"#method.int_ref_factorial\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/num/trait.NumInt.html#method.int_ref_factorial\" class=\"fn\">int_ref_factorial</a>(&amp;self) -&gt; <a class=\"type\" href=\"devela/num/type.IntResult.html\" title=\"type devela::num::IntResult\">Result</a>&lt;Self::<a class=\"associatedtype\" href=\"devela/num/trait.Num.html#associatedtype.Out\" title=\"type devela::num::Num::Out\">Out</a>&gt;</h4></section></summary><div class='docblock'>Similar to <a href=\"devela/num/trait.NumInt.html#method.int_factorial\">int_factorial</a>, but operates on references instead of values.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.int_subfactorial\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/num/int/num_trait/impls.rs.html#387\">Source</a><a href=\"#method.int_subfactorial\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/num/trait.NumInt.html#method.int_subfactorial\" class=\"fn\">int_subfactorial</a>(self) -&gt; <a class=\"type\" href=\"devela/num/type.IntResult.html\" title=\"type devela::num::IntResult\">Result</a>&lt;Self::<a class=\"associatedtype\" href=\"devela/num/trait.Num.html#associatedtype.Out\" title=\"type devela::num::Num::Out\">Out</a>&gt;</h4></section></summary><div class='docblock'>Returns the subfactorial, or the number of derangements. <a href=\"devela/num/trait.NumInt.html#method.int_subfactorial\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.int_ref_subfactorial\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/num/int/num_trait/impls.rs.html#387\">Source</a><a href=\"#method.int_ref_subfactorial\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/num/trait.NumInt.html#method.int_ref_subfactorial\" class=\"fn\">int_ref_subfactorial</a>(&amp;self) -&gt; <a class=\"type\" href=\"devela/num/type.IntResult.html\" title=\"type devela::num::IntResult\">Result</a>&lt;Self::<a class=\"associatedtype\" href=\"devela/num/trait.Num.html#associatedtype.Out\" title=\"type devela::num::Num::Out\">Out</a>&gt;</h4></section></summary><div class='docblock'>Similar to <a href=\"devela/num/trait.NumInt.html#method.int_subfactorial\">int_subfactorial</a>, but operates on references instead of values.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.int_permute\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/num/int/num_trait/impls.rs.html#387\">Source</a><a href=\"#method.int_permute\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/num/trait.NumInt.html#method.int_permute\" class=\"fn\">int_permute</a>(self, r: Self) -&gt; <a class=\"type\" href=\"devela/num/type.IntResult.html\" title=\"type devela::num::IntResult\">Result</a>&lt;Self::<a class=\"associatedtype\" href=\"devela/num/trait.Num.html#associatedtype.Out\" title=\"type devela::num::Num::Out\">Out</a>&gt;</h4></section></summary><div class='docblock'>Returns the number of permutations of <code>n</code> items taken <code>r</code> at a time, ordered. <a href=\"devela/num/trait.NumInt.html#method.int_permute\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.int_ref_permute\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/num/int/num_trait/impls.rs.html#387\">Source</a><a href=\"#method.int_ref_permute\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/num/trait.NumInt.html#method.int_ref_permute\" class=\"fn\">int_ref_permute</a>(&amp;self, r: &amp;Self) -&gt; <a class=\"type\" href=\"devela/num/type.IntResult.html\" title=\"type devela::num::IntResult\">Result</a>&lt;Self::<a class=\"associatedtype\" href=\"devela/num/trait.Num.html#associatedtype.Out\" title=\"type devela::num::Num::Out\">Out</a>&gt;</h4></section></summary><div class='docblock'>Similar to <a href=\"devela/num/trait.NumInt.html#method.int_permute\">int_permute</a>, but operates on references instead of values.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.int_permute_rep\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/num/int/num_trait/impls.rs.html#387\">Source</a><a href=\"#method.int_permute_rep\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/num/trait.NumInt.html#method.int_permute_rep\" class=\"fn\">int_permute_rep</a>(self, r: Self) -&gt; <a class=\"type\" href=\"devela/num/type.IntResult.html\" title=\"type devela::num::IntResult\">Result</a>&lt;Self::<a class=\"associatedtype\" href=\"devela/num/trait.Num.html#associatedtype.Out\" title=\"type devela::num::Num::Out\">Out</a>&gt;</h4></section></summary><div class='docblock'>Returns the number of permutations of n<code>items taken</code>r` at a time with repetitions,\nordered. <a href=\"devela/num/trait.NumInt.html#method.int_permute_rep\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.int_ref_permute_rep\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/num/int/num_trait/impls.rs.html#387\">Source</a><a href=\"#method.int_ref_permute_rep\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/num/trait.NumInt.html#method.int_ref_permute_rep\" class=\"fn\">int_ref_permute_rep</a>(&amp;self, r: &amp;Self) -&gt; <a class=\"type\" href=\"devela/num/type.IntResult.html\" title=\"type devela::num::IntResult\">Result</a>&lt;Self::<a class=\"associatedtype\" href=\"devela/num/trait.Num.html#associatedtype.Out\" title=\"type devela::num::Num::Out\">Out</a>&gt;</h4></section></summary><div class='docblock'>Similar to <a href=\"devela/num/trait.NumInt.html#method.int_permute_rep\">int_permute_rep</a>, but operates on references instead of values.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.int_combine\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/num/int/num_trait/impls.rs.html#387\">Source</a><a href=\"#method.int_combine\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/num/trait.NumInt.html#method.int_combine\" class=\"fn\">int_combine</a>(self, r: Self) -&gt; <a class=\"type\" href=\"devela/num/type.IntResult.html\" title=\"type devela::num::IntResult\">Result</a>&lt;Self::<a class=\"associatedtype\" href=\"devela/num/trait.Num.html#associatedtype.Out\" title=\"type devela::num::Num::Out\">Out</a>&gt;</h4></section></summary><div class='docblock'>Returns the number of combinations of <code>n</code> items taken <code>r</code> at a time, unordered. <a href=\"devela/num/trait.NumInt.html#method.int_combine\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.int_ref_combine\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/num/int/num_trait/impls.rs.html#387\">Source</a><a href=\"#method.int_ref_combine\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/num/trait.NumInt.html#method.int_ref_combine\" class=\"fn\">int_ref_combine</a>(&amp;self, r: &amp;Self) -&gt; <a class=\"type\" href=\"devela/num/type.IntResult.html\" title=\"type devela::num::IntResult\">Result</a>&lt;Self::<a class=\"associatedtype\" href=\"devela/num/trait.Num.html#associatedtype.Out\" title=\"type devela::num::Num::Out\">Out</a>&gt;</h4></section></summary><div class='docblock'>Similar to <a href=\"devela/num/trait.NumInt.html#method.int_combine\">int_combine</a>, but operates on references instead of values.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.int_combine_rep\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/num/int/num_trait/impls.rs.html#387\">Source</a><a href=\"#method.int_combine_rep\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/num/trait.NumInt.html#method.int_combine_rep\" class=\"fn\">int_combine_rep</a>(self, r: Self) -&gt; <a class=\"type\" href=\"devela/num/type.IntResult.html\" title=\"type devela::num::IntResult\">Result</a>&lt;Self::<a class=\"associatedtype\" href=\"devela/num/trait.Num.html#associatedtype.Out\" title=\"type devela::num::Num::Out\">Out</a>&gt;</h4></section></summary><div class='docblock'>Returns the number of permutations of <code>n</code> items taken <code>r</code> at a time with repetitions,\nunordered. <a href=\"devela/num/trait.NumInt.html#method.int_combine_rep\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.int_ref_combine_rep\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/num/int/num_trait/impls.rs.html#387\">Source</a><a href=\"#method.int_ref_combine_rep\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/num/trait.NumInt.html#method.int_ref_combine_rep\" class=\"fn\">int_ref_combine_rep</a>(&amp;self, r: &amp;Self) -&gt; <a class=\"type\" href=\"devela/num/type.IntResult.html\" title=\"type devela::num::IntResult\">Result</a>&lt;Self::<a class=\"associatedtype\" href=\"devela/num/trait.Num.html#associatedtype.Out\" title=\"type devela::num::Num::Out\">Out</a>&gt;</h4></section></summary><div class='docblock'>Similar to <a href=\"devela/num/trait.NumInt.html#method.int_combine_rep\">int_combine_rep</a>, but operates on references instead of values.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.int_div_rem\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/num/int/num_trait/impls.rs.html#387\">Source</a><a href=\"#method.int_div_rem\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/num/trait.NumInt.html#method.int_div_rem\" class=\"fn\">int_div_rem</a>(self, b: Self::<a class=\"associatedtype\" href=\"devela/num/trait.Num.html#associatedtype.Rhs\" title=\"type devela::num::Num::Rhs\">Rhs</a>) -&gt; <a class=\"type\" href=\"devela/num/type.IntResult.html\" title=\"type devela::num::IntResult\">Result</a>&lt;[Self::<a class=\"associatedtype\" href=\"devela/num/trait.Num.html#associatedtype.Out\" title=\"type devela::num::Num::Out\">Out</a>; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">2</a>]&gt;</h4></section></summary><div class='docblock'>Returns the truncated quotient and the remainder. <a href=\"devela/num/trait.NumInt.html#method.int_div_rem\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.int_div_ceil\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/num/int/num_trait/impls.rs.html#387\">Source</a><a href=\"#method.int_div_ceil\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/num/trait.NumInt.html#method.int_div_ceil\" class=\"fn\">int_div_ceil</a>(self, b: Self) -&gt; <a class=\"type\" href=\"devela/num/type.IntResult.html\" title=\"type devela::num::IntResult\">Result</a>&lt;Self::<a class=\"associatedtype\" href=\"devela/num/trait.Num.html#associatedtype.Out\" title=\"type devela::num::Num::Out\">Out</a>&gt;</h4></section></summary><div class='docblock'>Returns the quotient, rounding the result towards positive infinity. <a href=\"devela/num/trait.NumInt.html#method.int_div_ceil\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.int_div_floor\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/num/int/num_trait/impls.rs.html#387\">Source</a><a href=\"#method.int_div_floor\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/num/trait.NumInt.html#method.int_div_floor\" class=\"fn\">int_div_floor</a>(self, b: Self) -&gt; <a class=\"type\" href=\"devela/num/type.IntResult.html\" title=\"type devela::num::IntResult\">Result</a>&lt;Self::<a class=\"associatedtype\" href=\"devela/num/trait.Num.html#associatedtype.Out\" title=\"type devela::num::Num::Out\">Out</a>&gt;</h4></section></summary><div class='docblock'>Returns the quotient, rounding the result towards negative infinity. <a href=\"devela/num/trait.NumInt.html#method.int_div_floor\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.int_div_ties_away\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/num/int/num_trait/impls.rs.html#387\">Source</a><a href=\"#method.int_div_ties_away\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/num/trait.NumInt.html#method.int_div_ties_away\" class=\"fn\">int_div_ties_away</a>(self, b: Self) -&gt; <a class=\"type\" href=\"devela/num/type.IntResult.html\" title=\"type devela::num::IntResult\">Result</a>&lt;Self::<a class=\"associatedtype\" href=\"devela/num/trait.Num.html#associatedtype.Out\" title=\"type devela::num::Num::Out\">Out</a>&gt;</h4></section></summary><div class='docblock'>Returns the quotient, rounding ties away from zero. <a href=\"devela/num/trait.NumInt.html#method.int_div_ties_away\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.int_div_ties_towards\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/num/int/num_trait/impls.rs.html#387\">Source</a><a href=\"#method.int_div_ties_towards\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/num/trait.NumInt.html#method.int_div_ties_towards\" class=\"fn\">int_div_ties_towards</a>(self, b: Self) -&gt; <a class=\"type\" href=\"devela/num/type.IntResult.html\" title=\"type devela::num::IntResult\">Result</a>&lt;Self::<a class=\"associatedtype\" href=\"devela/num/trait.Num.html#associatedtype.Out\" title=\"type devela::num::Num::Out\">Out</a>&gt;</h4></section></summary><div class='docblock'>Returns the quotient, rounding ties towards from zero. <a href=\"devela/num/trait.NumInt.html#method.int_div_ties_towards\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.int_div_ties_even\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/num/int/num_trait/impls.rs.html#387\">Source</a><a href=\"#method.int_div_ties_even\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/num/trait.NumInt.html#method.int_div_ties_even\" class=\"fn\">int_div_ties_even</a>(self, b: Self) -&gt; <a class=\"type\" href=\"devela/num/type.IntResult.html\" title=\"type devela::num::IntResult\">Result</a>&lt;Self::<a class=\"associatedtype\" href=\"devela/num/trait.Num.html#associatedtype.Out\" title=\"type devela::num::Num::Out\">Out</a>&gt;</h4></section></summary><div class='docblock'>Returns the quotient, rounding ties to the nearest even number. <a href=\"devela/num/trait.NumInt.html#method.int_div_ties_even\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.int_div_ties_odd\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/num/int/num_trait/impls.rs.html#387\">Source</a><a href=\"#method.int_div_ties_odd\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/num/trait.NumInt.html#method.int_div_ties_odd\" class=\"fn\">int_div_ties_odd</a>(self, b: Self) -&gt; <a class=\"type\" href=\"devela/num/type.IntResult.html\" title=\"type devela::num::IntResult\">Result</a>&lt;Self::<a class=\"associatedtype\" href=\"devela/num/trait.Num.html#associatedtype.Out\" title=\"type devela::num::Num::Out\">Out</a>&gt;</h4></section></summary><div class='docblock'>Returns the quotient, rounding ties to the nearest odd number. <a href=\"devela/num/trait.NumInt.html#method.int_div_ties_odd\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.int_factors\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/num/int/num_trait/impls.rs.html#387\">Source</a><a href=\"#method.int_factors\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/num/trait.NumInt.html#method.int_factors\" class=\"fn\">int_factors</a>(self) -&gt; <a class=\"type\" href=\"devela/num/type.IntResult.html\" title=\"type devela::num::IntResult\">Result</a>&lt;<a class=\"struct\" href=\"devela/all/struct.Vec.html\" title=\"struct devela::all::Vec\">Vec</a>&lt;Self::<a class=\"associatedtype\" href=\"devela/num/trait.Num.html#associatedtype.Out\" title=\"type devela::num::Num::Out\">Out</a>&gt;&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab portability\">Available on <strong>crate feature <code>alloc</code></strong> only.</div></span><div class='docblock'>Returns the factors (including 1 and self). <a href=\"devela/num/trait.NumInt.html#method.int_factors\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.int_ref_factors\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/num/int/num_trait/impls.rs.html#387\">Source</a><a href=\"#method.int_ref_factors\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/num/trait.NumInt.html#method.int_ref_factors\" class=\"fn\">int_ref_factors</a>(&amp;self) -&gt; <a class=\"type\" href=\"devela/num/type.IntResult.html\" title=\"type devela::num::IntResult\">Result</a>&lt;<a class=\"struct\" href=\"devela/all/struct.Vec.html\" title=\"struct devela::all::Vec\">Vec</a>&lt;Self::<a class=\"associatedtype\" href=\"devela/num/trait.Num.html#associatedtype.Out\" title=\"type devela::num::Num::Out\">Out</a>&gt;&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab portability\">Available on <strong>crate feature <code>alloc</code></strong> only.</div></span><div class='docblock'>Similar to <a href=\"devela/num/trait.NumInt.html#method.int_factors\">int_factors</a>, but operates on references instead of values.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.int_factors_proper\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/num/int/num_trait/impls.rs.html#387\">Source</a><a href=\"#method.int_factors_proper\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/num/trait.NumInt.html#method.int_factors_proper\" class=\"fn\">int_factors_proper</a>(self) -&gt; <a class=\"type\" href=\"devela/num/type.IntResult.html\" title=\"type devela::num::IntResult\">Result</a>&lt;<a class=\"struct\" href=\"devela/all/struct.Vec.html\" title=\"struct devela::all::Vec\">Vec</a>&lt;Self::<a class=\"associatedtype\" href=\"devela/num/trait.Num.html#associatedtype.Out\" title=\"type devela::num::Num::Out\">Out</a>&gt;&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab portability\">Available on <strong>crate feature <code>alloc</code></strong> only.</div></span><div class='docblock'>Returns the proper factors. <a href=\"devela/num/trait.NumInt.html#method.int_factors_proper\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.int_ref_factors_proper\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/num/int/num_trait/impls.rs.html#387\">Source</a><a href=\"#method.int_ref_factors_proper\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/num/trait.NumInt.html#method.int_ref_factors_proper\" class=\"fn\">int_ref_factors_proper</a>(&amp;self) -&gt; <a class=\"type\" href=\"devela/num/type.IntResult.html\" title=\"type devela::num::IntResult\">Result</a>&lt;<a class=\"struct\" href=\"devela/all/struct.Vec.html\" title=\"struct devela::all::Vec\">Vec</a>&lt;Self::<a class=\"associatedtype\" href=\"devela/num/trait.Num.html#associatedtype.Out\" title=\"type devela::num::Num::Out\">Out</a>&gt;&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab portability\">Available on <strong>crate feature <code>alloc</code></strong> only.</div></span><div class='docblock'>Similar to <a href=\"devela/num/trait.NumInt.html#method.int_factors_proper\">int_factors_proper</a>, but operates on references instead of values.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.int_factors_prime\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/num/int/num_trait/impls.rs.html#387\">Source</a><a href=\"#method.int_factors_prime\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/num/trait.NumInt.html#method.int_factors_prime\" class=\"fn\">int_factors_prime</a>(self) -&gt; <a class=\"type\" href=\"devela/num/type.IntResult.html\" title=\"type devela::num::IntResult\">Result</a>&lt;<a class=\"struct\" href=\"devela/all/struct.Vec.html\" title=\"struct devela::all::Vec\">Vec</a>&lt;Self::<a class=\"associatedtype\" href=\"devela/num/trait.Num.html#associatedtype.Out\" title=\"type devela::num::Num::Out\">Out</a>&gt;&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab portability\">Available on <strong>crate feature <code>alloc</code></strong> only.</div></span><div class='docblock'>Returns the prime factors. <a href=\"devela/num/trait.NumInt.html#method.int_factors_prime\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.int_ref_factors_prime\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/num/int/num_trait/impls.rs.html#387\">Source</a><a href=\"#method.int_ref_factors_prime\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/num/trait.NumInt.html#method.int_ref_factors_prime\" class=\"fn\">int_ref_factors_prime</a>(&amp;self) -&gt; <a class=\"type\" href=\"devela/num/type.IntResult.html\" title=\"type devela::num::IntResult\">Result</a>&lt;<a class=\"struct\" href=\"devela/all/struct.Vec.html\" title=\"struct devela::all::Vec\">Vec</a>&lt;Self::<a class=\"associatedtype\" href=\"devela/num/trait.Num.html#associatedtype.Out\" title=\"type devela::num::Num::Out\">Out</a>&gt;&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab portability\">Available on <strong>crate feature <code>alloc</code></strong> only.</div></span><div class='docblock'>Similar to <a href=\"devela/num/trait.NumInt.html#method.int_factors_prime\">int_factors_prime</a>, but operates on references instead of values.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.int_factors_prime_unique\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/num/int/num_trait/impls.rs.html#387\">Source</a><a href=\"#method.int_factors_prime_unique\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/num/trait.NumInt.html#method.int_factors_prime_unique\" class=\"fn\">int_factors_prime_unique</a>(self) -&gt; <a class=\"type\" href=\"devela/num/type.IntResult.html\" title=\"type devela::num::IntResult\">Result</a>&lt;<a class=\"struct\" href=\"devela/all/struct.Vec.html\" title=\"struct devela::all::Vec\">Vec</a>&lt;Self::<a class=\"associatedtype\" href=\"devela/num/trait.Num.html#associatedtype.Out\" title=\"type devela::num::Num::Out\">Out</a>&gt;&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab portability\">Available on <strong>crate feature <code>alloc</code></strong> only.</div></span><div class='docblock'>Returns the unique prime factors. <a href=\"devela/num/trait.NumInt.html#method.int_factors_prime_unique\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.int_ref_factors_prime_unique\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/num/int/num_trait/impls.rs.html#387\">Source</a><a href=\"#method.int_ref_factors_prime_unique\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/num/trait.NumInt.html#method.int_ref_factors_prime_unique\" class=\"fn\">int_ref_factors_prime_unique</a>(&amp;self) -&gt; <a class=\"type\" href=\"devela/num/type.IntResult.html\" title=\"type devela::num::IntResult\">Result</a>&lt;<a class=\"struct\" href=\"devela/all/struct.Vec.html\" title=\"struct devela::all::Vec\">Vec</a>&lt;Self::<a class=\"associatedtype\" href=\"devela/num/trait.Num.html#associatedtype.Out\" title=\"type devela::num::Num::Out\">Out</a>&gt;&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab portability\">Available on <strong>crate feature <code>alloc</code></strong> only.</div></span><div class='docblock'>Similar to <a href=\"devela/num/trait.NumInt.html#method.int_factors_prime_unique\">int_factors_prime_unique</a>, but operates on references instead of values.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.int_factors_buf\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/num/int/num_trait/impls.rs.html#387\">Source</a><a href=\"#method.int_factors_buf\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/num/trait.NumInt.html#method.int_factors_buf\" class=\"fn\">int_factors_buf</a>(\n    self,\n    fbuf: &amp;mut [Self::<a class=\"associatedtype\" href=\"devela/num/trait.Num.html#associatedtype.Out\" title=\"type devela::num::Num::Out\">Out</a>],\n    upfbuf: &amp;mut [Self::<a class=\"associatedtype\" href=\"devela/num/trait.Num.html#associatedtype.Out\" title=\"type devela::num::Num::Out\">Out</a>],\n) -&gt; <a class=\"type\" href=\"devela/num/type.IntResult.html\" title=\"type devela::num::IntResult\">Result</a>&lt;(<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>)&gt;</h4></section></summary><div class='docblock'>Writes the factors in <code>fbuf</code>, and the unique prime factors in <code>upfbuf</code>. <a href=\"devela/num/trait.NumInt.html#method.int_factors_buf\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.int_ref_factors_buf\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/num/int/num_trait/impls.rs.html#387\">Source</a><a href=\"#method.int_ref_factors_buf\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/num/trait.NumInt.html#method.int_ref_factors_buf\" class=\"fn\">int_ref_factors_buf</a>(\n    &amp;self,\n    fbuf: &amp;mut [Self::<a class=\"associatedtype\" href=\"devela/num/trait.Num.html#associatedtype.Out\" title=\"type devela::num::Num::Out\">Out</a>],\n    upfbuf: &amp;mut [Self::<a class=\"associatedtype\" href=\"devela/num/trait.Num.html#associatedtype.Out\" title=\"type devela::num::Num::Out\">Out</a>],\n) -&gt; <a class=\"type\" href=\"devela/num/type.IntResult.html\" title=\"type devela::num::IntResult\">Result</a>&lt;(<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>)&gt;</h4></section></summary><div class='docblock'>Similar to <a href=\"devela/num/trait.NumInt.html#method.int_factors_buf\">int_factors_buf</a>, but operates on references instead of values.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.int_factors_proper_buf\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/num/int/num_trait/impls.rs.html#387\">Source</a><a href=\"#method.int_factors_proper_buf\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/num/trait.NumInt.html#method.int_factors_proper_buf\" class=\"fn\">int_factors_proper_buf</a>(\n    self,\n    fbuf: &amp;mut [Self],\n    upfbuf: &amp;mut [Self],\n) -&gt; <a class=\"type\" href=\"devela/num/type.IntResult.html\" title=\"type devela::num::IntResult\">Result</a>&lt;(<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>)&gt;</h4></section></summary><div class='docblock'>Writes the proper factors in <code>fbuf</code>, and the unique prime factors in <code>upfbuf</code>. <a href=\"devela/num/trait.NumInt.html#method.int_factors_proper_buf\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.int_ref_factors_proper_buf\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/num/int/num_trait/impls.rs.html#387\">Source</a><a href=\"#method.int_ref_factors_proper_buf\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/num/trait.NumInt.html#method.int_ref_factors_proper_buf\" class=\"fn\">int_ref_factors_proper_buf</a>(\n    &amp;self,\n    fbuf: &amp;mut [Self::<a class=\"associatedtype\" href=\"devela/num/trait.Num.html#associatedtype.Out\" title=\"type devela::num::Num::Out\">Out</a>],\n    upfbuf: &amp;mut [Self::<a class=\"associatedtype\" href=\"devela/num/trait.Num.html#associatedtype.Out\" title=\"type devela::num::Num::Out\">Out</a>],\n) -&gt; <a class=\"type\" href=\"devela/num/type.IntResult.html\" title=\"type devela::num::IntResult\">Result</a>&lt;(<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>)&gt;</h4></section></summary><div class='docblock'>Similar to <a href=\"devela/num/trait.NumInt.html#method.int_factors_proper_buf\">int_factors_proper_buf</a>, but operates on references instead of values.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.int_factors_prime_buf\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/num/int/num_trait/impls.rs.html#387\">Source</a><a href=\"#method.int_factors_prime_buf\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/num/trait.NumInt.html#method.int_factors_prime_buf\" class=\"fn\">int_factors_prime_buf</a>(self, buffer: &amp;mut [Self]) -&gt; <a class=\"type\" href=\"devela/num/type.IntResult.html\" title=\"type devela::num::IntResult\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt;</h4></section></summary><div class='docblock'>Writes the prime factors in the given <code>buffer</code>. <a href=\"devela/num/trait.NumInt.html#method.int_factors_prime_buf\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.int_ref_factors_prime_buf\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/num/int/num_trait/impls.rs.html#387\">Source</a><a href=\"#method.int_ref_factors_prime_buf\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/num/trait.NumInt.html#method.int_ref_factors_prime_buf\" class=\"fn\">int_ref_factors_prime_buf</a>(&amp;self, buffer: &amp;mut [Self::<a class=\"associatedtype\" href=\"devela/num/trait.Num.html#associatedtype.Out\" title=\"type devela::num::Num::Out\">Out</a>]) -&gt; <a class=\"type\" href=\"devela/num/type.IntResult.html\" title=\"type devela::num::IntResult\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt;</h4></section></summary><div class='docblock'>Similar to <a href=\"devela/num/trait.NumInt.html#method.int_factors_prime_buf\">int_factors_prime_buf</a>, but operates on references instead of values.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.int_factors_prime_unique_buf\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/num/int/num_trait/impls.rs.html#387\">Source</a><a href=\"#method.int_factors_prime_unique_buf\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/num/trait.NumInt.html#method.int_factors_prime_unique_buf\" class=\"fn\">int_factors_prime_unique_buf</a>(self, buffer: &amp;mut [Self]) -&gt; <a class=\"type\" href=\"devela/num/type.IntResult.html\" title=\"type devela::num::IntResult\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt;</h4></section></summary><div class='docblock'>Writes the prime factors in the given <code>buffer</code>. <a href=\"devela/num/trait.NumInt.html#method.int_factors_prime_unique_buf\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.int_ref_factors_prime_unique_buf\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/num/int/num_trait/impls.rs.html#387\">Source</a><a href=\"#method.int_ref_factors_prime_unique_buf\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/num/trait.NumInt.html#method.int_ref_factors_prime_unique_buf\" class=\"fn\">int_ref_factors_prime_unique_buf</a>(\n    &amp;self,\n    buffer: &amp;mut [Self::<a class=\"associatedtype\" href=\"devela/num/trait.Num.html#associatedtype.Out\" title=\"type devela::num::Num::Out\">Out</a>],\n) -&gt; <a class=\"type\" href=\"devela/num/type.IntResult.html\" title=\"type devela::num::IntResult\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt;</h4></section></summary><div class='docblock'>Similar to <a href=\"devela/num/trait.NumInt.html#method.int_factors_prime_unique_buf\">int_factors_prime_unique_buf</a>, but operates on references instead of values.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.int_modulo\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/num/int/num_trait/impls.rs.html#387\">Source</a><a href=\"#method.int_modulo\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/num/trait.NumInt.html#method.int_modulo\" class=\"fn\">int_modulo</a>(self, modulus: Self) -&gt; <a class=\"type\" href=\"devela/num/type.IntResult.html\" title=\"type devela::num::IntResult\">Result</a>&lt;Self&gt;</h4></section></summary><div class='docblock'>Computes the non-negative modulo of <code>self</code> over |<code>modulus</code>|. <a href=\"devela/num/trait.NumInt.html#method.int_modulo\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.int_ref_modulo\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/num/int/num_trait/impls.rs.html#387\">Source</a><a href=\"#method.int_ref_modulo\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/num/trait.NumInt.html#method.int_ref_modulo\" class=\"fn\">int_ref_modulo</a>(&amp;self, modulus: &amp;Self) -&gt; <a class=\"type\" href=\"devela/num/type.IntResult.html\" title=\"type devela::num::IntResult\">Result</a>&lt;Self&gt;</h4></section></summary><div class='docblock'>Similar to <a href=\"devela/num/trait.NumInt.html#method.int_modulo\">int_modulo</a>, but operates on references instead of values.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.int_modulo_add\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/num/int/num_trait/impls.rs.html#387\">Source</a><a href=\"#method.int_modulo_add\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/num/trait.NumInt.html#method.int_modulo_add\" class=\"fn\">int_modulo_add</a>(self, other: Self, modulus: Self) -&gt; <a class=\"type\" href=\"devela/num/type.IntResult.html\" title=\"type devela::num::IntResult\">Result</a>&lt;Self&gt;</h4></section></summary><div class='docblock'>Computes the modulo of <code>self + other</code> over |<code>modulus</code>|. <a href=\"devela/num/trait.NumInt.html#method.int_modulo_add\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.int_ref_modulo_add\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/num/int/num_trait/impls.rs.html#387\">Source</a><a href=\"#method.int_ref_modulo_add\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/num/trait.NumInt.html#method.int_ref_modulo_add\" class=\"fn\">int_ref_modulo_add</a>(&amp;self, other: &amp;Self, modulus: &amp;Self) -&gt; <a class=\"type\" href=\"devela/num/type.IntResult.html\" title=\"type devela::num::IntResult\">Result</a>&lt;Self&gt;</h4></section></summary><div class='docblock'>Similar to <a href=\"devela/num/trait.NumInt.html#method.int_modulo_add\">int_modulo_add</a>, but operates on references instead of values.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.int_modulo_add_cycles\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/num/int/num_trait/impls.rs.html#387\">Source</a><a href=\"#method.int_modulo_add_cycles\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/num/trait.NumInt.html#method.int_modulo_add_cycles\" class=\"fn\">int_modulo_add_cycles</a>(\n    self,\n    other: Self,\n    modulus: Self,\n) -&gt; <a class=\"type\" href=\"devela/num/type.IntResult.html\" title=\"type devela::num::IntResult\">Result</a>&lt;<a class=\"struct\" href=\"devela/all/struct.ValueQuant.html\" title=\"struct devela::all::ValueQuant\">ValueQuant</a>&lt;Self, Self&gt;&gt;</h4></section></summary><div class='docblock'>Computes the modulo of <code>self + other</code> over |<code>modulus</code>|,\nand the number of cycles the result is reduced. <a href=\"devela/num/trait.NumInt.html#method.int_modulo_add_cycles\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.int_ref_modulo_add_cycles\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/num/int/num_trait/impls.rs.html#387\">Source</a><a href=\"#method.int_ref_modulo_add_cycles\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/num/trait.NumInt.html#method.int_ref_modulo_add_cycles\" class=\"fn\">int_ref_modulo_add_cycles</a>(\n    &amp;self,\n    other: &amp;Self,\n    modulus: &amp;Self,\n) -&gt; <a class=\"type\" href=\"devela/num/type.IntResult.html\" title=\"type devela::num::IntResult\">Result</a>&lt;<a class=\"struct\" href=\"devela/all/struct.ValueQuant.html\" title=\"struct devela::all::ValueQuant\">ValueQuant</a>&lt;Self, Self&gt;&gt;</h4></section></summary><div class='docblock'>Similar to <a href=\"devela/num/trait.NumInt.html#method.int_modulo_add_cycles\">int_modulo_add_cycles</a>, but operates on references instead of values.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.int_modulo_add_inv\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/num/int/num_trait/impls.rs.html#387\">Source</a><a href=\"#method.int_modulo_add_inv\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/num/trait.NumInt.html#method.int_modulo_add_inv\" class=\"fn\">int_modulo_add_inv</a>(self, modulus: Self) -&gt; <a class=\"type\" href=\"devela/num/type.IntResult.html\" title=\"type devela::num::IntResult\">Result</a>&lt;Self&gt;</h4></section></summary><div class='docblock'>Calculates the modular additive inverse. <a href=\"devela/num/trait.NumInt.html#method.int_modulo_add_inv\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.int_ref_modulo_add_inv\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/num/int/num_trait/impls.rs.html#387\">Source</a><a href=\"#method.int_ref_modulo_add_inv\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/num/trait.NumInt.html#method.int_ref_modulo_add_inv\" class=\"fn\">int_ref_modulo_add_inv</a>(&amp;self, modulus: &amp;Self) -&gt; <a class=\"type\" href=\"devela/num/type.IntResult.html\" title=\"type devela::num::IntResult\">Result</a>&lt;Self&gt;</h4></section></summary><div class='docblock'>Similar to <a href=\"devela/num/trait.NumInt.html#method.int_modulo_add_inv\">int_modulo_add_inv</a>, but operates on references instead of values.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.int_modulo_sub\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/num/int/num_trait/impls.rs.html#387\">Source</a><a href=\"#method.int_modulo_sub\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/num/trait.NumInt.html#method.int_modulo_sub\" class=\"fn\">int_modulo_sub</a>(self, other: Self, modulus: Self) -&gt; <a class=\"type\" href=\"devela/num/type.IntResult.html\" title=\"type devela::num::IntResult\">Result</a>&lt;Self&gt;</h4></section></summary><div class='docblock'>Computes the modulo of <code>self - other</code> over |<code>modulus</code>|. <a href=\"devela/num/trait.NumInt.html#method.int_modulo_sub\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.int_ref_modulo_sub\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/num/int/num_trait/impls.rs.html#387\">Source</a><a href=\"#method.int_ref_modulo_sub\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/num/trait.NumInt.html#method.int_ref_modulo_sub\" class=\"fn\">int_ref_modulo_sub</a>(&amp;self, other: &amp;Self, modulus: &amp;Self) -&gt; <a class=\"type\" href=\"devela/num/type.IntResult.html\" title=\"type devela::num::IntResult\">Result</a>&lt;Self&gt;</h4></section></summary><div class='docblock'>Similar to <a href=\"devela/num/trait.NumInt.html#method.int_modulo_sub\">int_modulo_sub</a>, but operates on references instead of values.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.int_modulo_sub_cycles\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/num/int/num_trait/impls.rs.html#387\">Source</a><a href=\"#method.int_modulo_sub_cycles\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/num/trait.NumInt.html#method.int_modulo_sub_cycles\" class=\"fn\">int_modulo_sub_cycles</a>(\n    self,\n    other: Self,\n    modulus: Self,\n) -&gt; <a class=\"type\" href=\"devela/num/type.IntResult.html\" title=\"type devela::num::IntResult\">Result</a>&lt;<a class=\"struct\" href=\"devela/all/struct.ValueQuant.html\" title=\"struct devela::all::ValueQuant\">ValueQuant</a>&lt;Self, Self&gt;&gt;</h4></section></summary><div class='docblock'>Computes the modulo of <code>self - other</code> over |<code>modulus</code>|,\nand the number of cycles the result is reduced. <a href=\"devela/num/trait.NumInt.html#method.int_modulo_sub_cycles\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.int_ref_modulo_sub_cycles\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/num/int/num_trait/impls.rs.html#387\">Source</a><a href=\"#method.int_ref_modulo_sub_cycles\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/num/trait.NumInt.html#method.int_ref_modulo_sub_cycles\" class=\"fn\">int_ref_modulo_sub_cycles</a>(\n    &amp;self,\n    other: &amp;Self,\n    modulus: &amp;Self,\n) -&gt; <a class=\"type\" href=\"devela/num/type.IntResult.html\" title=\"type devela::num::IntResult\">Result</a>&lt;<a class=\"struct\" href=\"devela/all/struct.ValueQuant.html\" title=\"struct devela::all::ValueQuant\">ValueQuant</a>&lt;Self, Self&gt;&gt;</h4></section></summary><div class='docblock'>Similar to <a href=\"devela/num/trait.NumInt.html#method.int_modulo_sub_cycles\">int_modulo_sub_cycles</a>, but operates on references instead of values.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.int_modulo_mul\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/num/int/num_trait/impls.rs.html#387\">Source</a><a href=\"#method.int_modulo_mul\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/num/trait.NumInt.html#method.int_modulo_mul\" class=\"fn\">int_modulo_mul</a>(self, other: Self, modulus: Self) -&gt; <a class=\"type\" href=\"devela/num/type.IntResult.html\" title=\"type devela::num::IntResult\">Result</a>&lt;Self&gt;</h4></section></summary><div class='docblock'>Computes the modulo of <code>self + other</code> over |<code>modulus</code>|. <a href=\"devela/num/trait.NumInt.html#method.int_modulo_mul\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.int_ref_modulo_mul\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/num/int/num_trait/impls.rs.html#387\">Source</a><a href=\"#method.int_ref_modulo_mul\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/num/trait.NumInt.html#method.int_ref_modulo_mul\" class=\"fn\">int_ref_modulo_mul</a>(&amp;self, other: &amp;Self, modulus: &amp;Self) -&gt; <a class=\"type\" href=\"devela/num/type.IntResult.html\" title=\"type devela::num::IntResult\">Result</a>&lt;Self&gt;</h4></section></summary><div class='docblock'>Similar to <a href=\"devela/num/trait.NumInt.html#method.int_modulo_mul\">int_modulo_mul</a>, but operates on references instead of values.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.int_modulo_mul_cycles\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/num/int/num_trait/impls.rs.html#387\">Source</a><a href=\"#method.int_modulo_mul_cycles\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/num/trait.NumInt.html#method.int_modulo_mul_cycles\" class=\"fn\">int_modulo_mul_cycles</a>(\n    self,\n    other: Self,\n    modulus: Self,\n) -&gt; <a class=\"type\" href=\"devela/num/type.IntResult.html\" title=\"type devela::num::IntResult\">Result</a>&lt;<a class=\"struct\" href=\"devela/all/struct.ValueQuant.html\" title=\"struct devela::all::ValueQuant\">ValueQuant</a>&lt;Self, Self&gt;&gt;</h4></section></summary><div class='docblock'>Computes the modulo of <code>self + other</code> over |<code>modulus</code>|,\nand the number of cycles the result is reduced. <a href=\"devela/num/trait.NumInt.html#method.int_modulo_mul_cycles\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.int_ref_modulo_mul_cycles\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/num/int/num_trait/impls.rs.html#387\">Source</a><a href=\"#method.int_ref_modulo_mul_cycles\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/num/trait.NumInt.html#method.int_ref_modulo_mul_cycles\" class=\"fn\">int_ref_modulo_mul_cycles</a>(\n    &amp;self,\n    other: &amp;Self,\n    modulus: &amp;Self,\n) -&gt; <a class=\"type\" href=\"devela/num/type.IntResult.html\" title=\"type devela::num::IntResult\">Result</a>&lt;<a class=\"struct\" href=\"devela/all/struct.ValueQuant.html\" title=\"struct devela::all::ValueQuant\">ValueQuant</a>&lt;Self, Self&gt;&gt;</h4></section></summary><div class='docblock'>Similar to <a href=\"devela/num/trait.NumInt.html#method.int_modulo_mul_cycles\">int_modulo_mul_cycles</a>, but operates on references instead of values.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.int_is_prime\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/num/int/num_trait/impls.rs.html#387\">Source</a><a href=\"#method.int_is_prime\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/num/trait.NumInt.html#method.int_is_prime\" class=\"fn\">int_is_prime</a>(self) -&gt; <a class=\"type\" href=\"devela/num/type.IntResult.html\" title=\"type devela::num::IntResult\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a>&gt;</h4></section></summary><div class='docblock'>Returns <code>true</code> if <code>n</code> is prime. <a href=\"devela/num/trait.NumInt.html#method.int_is_prime\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.int_ref_is_prime\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/num/int/num_trait/impls.rs.html#387\">Source</a><a href=\"#method.int_ref_is_prime\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/num/trait.NumInt.html#method.int_ref_is_prime\" class=\"fn\">int_ref_is_prime</a>(&amp;self) -&gt; <a class=\"type\" href=\"devela/num/type.IntResult.html\" title=\"type devela::num::IntResult\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a>&gt;</h4></section></summary><div class='docblock'>Similar to <a href=\"devela/num/trait.NumInt.html#method.int_is_prime\">int_is_prime</a>, but operates on references instead of values.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.int_prime_nth\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/num/int/num_trait/impls.rs.html#387\">Source</a><a href=\"#method.int_prime_nth\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/num/trait.NumInt.html#method.int_prime_nth\" class=\"fn\">int_prime_nth</a>(self) -&gt; <a class=\"type\" href=\"devela/num/type.IntResult.html\" title=\"type devela::num::IntResult\">Result</a>&lt;Self::<a class=\"associatedtype\" href=\"devela/num/trait.Num.html#associatedtype.Out\" title=\"type devela::num::Num::Out\">Out</a>&gt;</h4></section></summary><div class='docblock'>Finds the 0-indexed <code>nth</code> prime number. <a href=\"devela/num/trait.NumInt.html#method.int_prime_nth\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.int_ref_prime_nth\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/num/int/num_trait/impls.rs.html#387\">Source</a><a href=\"#method.int_ref_prime_nth\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/num/trait.NumInt.html#method.int_ref_prime_nth\" class=\"fn\">int_ref_prime_nth</a>(&amp;self) -&gt; <a class=\"type\" href=\"devela/num/type.IntResult.html\" title=\"type devela::num::IntResult\">Result</a>&lt;Self::<a class=\"associatedtype\" href=\"devela/num/trait.Num.html#associatedtype.Out\" title=\"type devela::num::Num::Out\">Out</a>&gt;</h4></section></summary><div class='docblock'>Similar to <a href=\"devela/num/trait.NumInt.html#method.int_prime_nth\">int_prime_nth</a>, but operates on references instead of values.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.int_prime_pi\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/num/int/num_trait/impls.rs.html#387\">Source</a><a href=\"#method.int_prime_pi\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/num/trait.NumInt.html#method.int_prime_pi\" class=\"fn\">int_prime_pi</a>(self) -&gt; <a class=\"type\" href=\"devela/num/type.IntResult.html\" title=\"type devela::num::IntResult\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt;</h4></section></summary><div class='docblock'>Counts the number of primes upto and including <code>n</code>. <a href=\"devela/num/trait.NumInt.html#method.int_prime_pi\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.int_ref_prime_pi\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/num/int/num_trait/impls.rs.html#387\">Source</a><a href=\"#method.int_ref_prime_pi\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/num/trait.NumInt.html#method.int_ref_prime_pi\" class=\"fn\">int_ref_prime_pi</a>(&amp;self) -&gt; <a class=\"type\" href=\"devela/num/type.IntResult.html\" title=\"type devela::num::IntResult\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt;</h4></section></summary><div class='docblock'>Similar to <a href=\"devela/num/trait.NumInt.html#method.int_prime_pi\">int_prime_pi</a>, but operates on references instead of values.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.int_totient\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/num/int/num_trait/impls.rs.html#387\">Source</a><a href=\"#method.int_totient\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/num/trait.NumInt.html#method.int_totient\" class=\"fn\">int_totient</a>(self) -&gt; <a class=\"type\" href=\"devela/num/type.IntResult.html\" title=\"type devela::num::IntResult\">Result</a>&lt;Self::<a class=\"associatedtype\" href=\"devela/num/trait.Num.html#associatedtype.Out\" title=\"type devela::num::Num::Out\">Out</a>&gt;</h4></section></summary><div class='docblock'>Counts the number of integers $&lt;|n|$ that are relatively prime to <code>n</code>. <a href=\"devela/num/trait.NumInt.html#method.int_totient\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.int_ref_totient\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/num/int/num_trait/impls.rs.html#387\">Source</a><a href=\"#method.int_ref_totient\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/num/trait.NumInt.html#method.int_ref_totient\" class=\"fn\">int_ref_totient</a>(&amp;self) -&gt; <a class=\"type\" href=\"devela/num/type.IntResult.html\" title=\"type devela::num::IntResult\">Result</a>&lt;Self::<a class=\"associatedtype\" href=\"devela/num/trait.Num.html#associatedtype.Out\" title=\"type devela::num::Num::Out\">Out</a>&gt;</h4></section></summary><div class='docblock'>Similar to <a href=\"devela/num/trait.NumInt.html#method.int_totient\">int_totient</a>, but operates on references instead of values.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.int_is_square\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/num/int/num_trait/impls.rs.html#387\">Source</a><a href=\"#method.int_is_square\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/num/trait.NumInt.html#method.int_is_square\" class=\"fn\">int_is_square</a>(self) -&gt; <a class=\"type\" href=\"devela/num/type.IntResult.html\" title=\"type devela::num::IntResult\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a>&gt;</h4></section></summary><div class='docblock'>Returns <code>true</code> if it’s a perfect square. <a href=\"devela/num/trait.NumInt.html#method.int_is_square\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.int_ref_is_square\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/num/int/num_trait/impls.rs.html#387\">Source</a><a href=\"#method.int_ref_is_square\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/num/trait.NumInt.html#method.int_ref_is_square\" class=\"fn\">int_ref_is_square</a>(&amp;self) -&gt; <a class=\"type\" href=\"devela/num/type.IntResult.html\" title=\"type devela::num::IntResult\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a>&gt;</h4></section></summary><div class='docblock'>Similar to <a href=\"devela/num/trait.NumInt.html#method.int_is_square\">int_is_square</a>, but operates on references instead of values.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.int_root_ceil\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/num/int/num_trait/impls.rs.html#387\">Source</a><a href=\"#method.int_root_ceil\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/num/trait.NumInt.html#method.int_root_ceil\" class=\"fn\">int_root_ceil</a>(self, nth: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>) -&gt; <a class=\"type\" href=\"devela/num/type.IntResult.html\" title=\"type devela::num::IntResult\">Result</a>&lt;Self::<a class=\"associatedtype\" href=\"devela/num/trait.Num.html#associatedtype.Out\" title=\"type devela::num::Num::Out\">Out</a>&gt;</h4></section></summary><div class='docblock'>Returns the ceiled integer <code>nth</code> root. <a href=\"devela/num/trait.NumInt.html#method.int_root_ceil\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.int_ref_root_ceil\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/num/int/num_trait/impls.rs.html#387\">Source</a><a href=\"#method.int_ref_root_ceil\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/num/trait.NumInt.html#method.int_ref_root_ceil\" class=\"fn\">int_ref_root_ceil</a>(&amp;self, nth: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>) -&gt; <a class=\"type\" href=\"devela/num/type.IntResult.html\" title=\"type devela::num::IntResult\">Result</a>&lt;Self::<a class=\"associatedtype\" href=\"devela/num/trait.Num.html#associatedtype.Out\" title=\"type devela::num::Num::Out\">Out</a>&gt;</h4></section></summary><div class='docblock'>Similar to <a href=\"devela/num/trait.NumInt.html#method.int_root_ceil\">int_root_ceil</a>, but operates on references instead of values.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.int_root_floor\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/num/int/num_trait/impls.rs.html#387\">Source</a><a href=\"#method.int_root_floor\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/num/trait.NumInt.html#method.int_root_floor\" class=\"fn\">int_root_floor</a>(self, nth: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>) -&gt; <a class=\"type\" href=\"devela/num/type.IntResult.html\" title=\"type devela::num::IntResult\">Result</a>&lt;Self::<a class=\"associatedtype\" href=\"devela/num/trait.Num.html#associatedtype.Out\" title=\"type devela::num::Num::Out\">Out</a>&gt;</h4></section></summary><div class='docblock'>Returns the floored integer <code>nth</code> root. <a href=\"devela/num/trait.NumInt.html#method.int_root_floor\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.int_ref_root_floor\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/num/int/num_trait/impls.rs.html#387\">Source</a><a href=\"#method.int_ref_root_floor\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/num/trait.NumInt.html#method.int_ref_root_floor\" class=\"fn\">int_ref_root_floor</a>(&amp;self, nth: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>) -&gt; <a class=\"type\" href=\"devela/num/type.IntResult.html\" title=\"type devela::num::IntResult\">Result</a>&lt;Self::<a class=\"associatedtype\" href=\"devela/num/trait.Num.html#associatedtype.Out\" title=\"type devela::num::Num::Out\">Out</a>&gt;</h4></section></summary><div class='docblock'>Similar to <a href=\"devela/num/trait.NumInt.html#method.int_root_floor\">int_root_floor</a>, but operates on references instead of values.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.int_gcd_ext\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/num/int/num_trait/impls.rs.html#387\">Source</a><a href=\"#method.int_gcd_ext\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/num/trait.NumInt.html#method.int_gcd_ext\" class=\"fn\">int_gcd_ext</a>(\n    self,\n    other: Self::<a class=\"associatedtype\" href=\"devela/num/trait.Num.html#associatedtype.Rhs\" title=\"type devela::num::Num::Rhs\">Rhs</a>,\n) -&gt; <a class=\"type\" href=\"devela/num/type.IntResult.html\" title=\"type devela::num::IntResult\">Result</a>&lt;<a class=\"struct\" href=\"devela/num/struct.GcdReturn.html\" title=\"struct devela::num::GcdReturn\">GcdReturn</a>&lt;Self::<a class=\"associatedtype\" href=\"devela/num/trait.Num.html#associatedtype.Out\" title=\"type devela::num::Num::Out\">Out</a>, Self::<a class=\"associatedtype\" href=\"devela/num/trait.NumInt.html#associatedtype.OutI\" title=\"type devela::num::NumInt::OutI\">OutI</a>&gt;&gt;</h4></section></summary><div class='docblock'>Returns the <abbr title=\"Greatest Common Divisor\">GCD</abbr> and the Bézout coeficients. <a href=\"devela/num/trait.NumInt.html#method.int_gcd_ext\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.int_ref_gcd_ext\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/num/int/num_trait/impls.rs.html#387\">Source</a><a href=\"#method.int_ref_gcd_ext\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/num/trait.NumInt.html#method.int_ref_gcd_ext\" class=\"fn\">int_ref_gcd_ext</a>(\n    &amp;self,\n    other: &amp;Self::<a class=\"associatedtype\" href=\"devela/num/trait.Num.html#associatedtype.Rhs\" title=\"type devela::num::Num::Rhs\">Rhs</a>,\n) -&gt; <a class=\"type\" href=\"devela/num/type.IntResult.html\" title=\"type devela::num::IntResult\">Result</a>&lt;<a class=\"struct\" href=\"devela/num/struct.GcdReturn.html\" title=\"struct devela::num::GcdReturn\">GcdReturn</a>&lt;Self::<a class=\"associatedtype\" href=\"devela/num/trait.Num.html#associatedtype.Out\" title=\"type devela::num::Num::Out\">Out</a>, Self::<a class=\"associatedtype\" href=\"devela/num/trait.NumInt.html#associatedtype.OutI\" title=\"type devela::num::NumInt::OutI\">OutI</a>&gt;&gt;</h4></section></summary><div class='docblock'>Similar to <a href=\"devela/num/trait.NumInt.html#method.int_gcd_ext\">int_gcd_ext</a>, but operates on references instead of values.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.int_midpoint\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/num/int/num_trait/impls.rs.html#387\">Source</a><a href=\"#method.int_midpoint\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/num/trait.NumInt.html#method.int_midpoint\" class=\"fn\">int_midpoint</a>(self, other: Self::<a class=\"associatedtype\" href=\"devela/num/trait.Num.html#associatedtype.Rhs\" title=\"type devela::num::Num::Rhs\">Rhs</a>) -&gt; <a class=\"type\" href=\"devela/num/type.IntResult.html\" title=\"type devela::num::IntResult\">Result</a>&lt;Self::<a class=\"associatedtype\" href=\"devela/num/trait.Num.html#associatedtype.Out\" title=\"type devela::num::Num::Out\">Out</a>&gt;</h4></section></summary><div class='docblock'>Returns the midpoint of <code>self</code> and <code>other</code>. <a href=\"devela/num/trait.NumInt.html#method.int_midpoint\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.int_ref_midpoint\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/num/int/num_trait/impls.rs.html#387\">Source</a><a href=\"#method.int_ref_midpoint\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/num/trait.NumInt.html#method.int_ref_midpoint\" class=\"fn\">int_ref_midpoint</a>(&amp;self, other: &amp;Self::<a class=\"associatedtype\" href=\"devela/num/trait.Num.html#associatedtype.Rhs\" title=\"type devela::num::Num::Rhs\">Rhs</a>) -&gt; <a class=\"type\" href=\"devela/num/type.IntResult.html\" title=\"type devela::num::IntResult\">Result</a>&lt;Self::<a class=\"associatedtype\" href=\"devela/num/trait.Num.html#associatedtype.Out\" title=\"type devela::num::Num::Out\">Out</a>&gt;</h4></section></summary><div class='docblock'>Similar to <a href=\"devela/num/trait.NumInt.html#method.int_midpoint\">int_midpoint</a>, but operates on references instead of values.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.int_modulo_mul_inv\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/num/int/num_trait/impls.rs.html#387\">Source</a><a href=\"#method.int_modulo_mul_inv\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/num/trait.NumInt.html#method.int_modulo_mul_inv\" class=\"fn\">int_modulo_mul_inv</a>(self, modulus: Self) -&gt; <a class=\"type\" href=\"devela/num/type.IntResult.html\" title=\"type devela::num::IntResult\">Result</a>&lt;Self&gt;</h4></section></summary><div class='docblock'>Calculates the modular multiplicative inverse. <a href=\"devela/num/trait.NumInt.html#method.int_modulo_mul_inv\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.int_ref_modulo_mul_inv\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/num/int/num_trait/impls.rs.html#387\">Source</a><a href=\"#method.int_ref_modulo_mul_inv\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/num/trait.NumInt.html#method.int_ref_modulo_mul_inv\" class=\"fn\">int_ref_modulo_mul_inv</a>(&amp;self, modulus: &amp;Self) -&gt; <a class=\"type\" href=\"devela/num/type.IntResult.html\" title=\"type devela::num::IntResult\">Result</a>&lt;Self&gt;</h4></section></summary><div class='docblock'>Similar to <a href=\"devela/num/trait.NumInt.html#method.int_modulo_mul_inv\">int_modulo_mul_inv</a>, but operates on references instead of values.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.int_modulo_div\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/num/int/num_trait/impls.rs.html#387\">Source</a><a href=\"#method.int_modulo_div\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/num/trait.NumInt.html#method.int_modulo_div\" class=\"fn\">int_modulo_div</a>(self, other: Self, modulus: Self) -&gt; <a class=\"type\" href=\"devela/num/type.IntResult.html\" title=\"type devela::num::IntResult\">Result</a>&lt;Self&gt;</h4></section></summary><div class='docblock'>Computes <code>self / other</code> over |<code>modulus</code>|. <a href=\"devela/num/trait.NumInt.html#method.int_modulo_div\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.int_ref_modulo_div\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/num/int/num_trait/impls.rs.html#387\">Source</a><a href=\"#method.int_ref_modulo_div\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/num/trait.NumInt.html#method.int_ref_modulo_div\" class=\"fn\">int_ref_modulo_div</a>(&amp;self, other: &amp;Self, modulus: &amp;Self) -&gt; <a class=\"type\" href=\"devela/num/type.IntResult.html\" title=\"type devela::num::IntResult\">Result</a>&lt;Self&gt;</h4></section></summary><div class='docblock'>Similar to <a href=\"devela/num/trait.NumInt.html#method.int_modulo_div\">int_modulo_div</a>, but operates on references instead of values.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.int_sqrt_ceil\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/num/int/num_trait/impls.rs.html#387\">Source</a><a href=\"#method.int_sqrt_ceil\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/num/trait.NumInt.html#method.int_sqrt_ceil\" class=\"fn\">int_sqrt_ceil</a>(self) -&gt; <a class=\"type\" href=\"devela/num/type.IntResult.html\" title=\"type devela::num::IntResult\">Result</a>&lt;Self::<a class=\"associatedtype\" href=\"devela/num/trait.Num.html#associatedtype.Out\" title=\"type devela::num::Num::Out\">Out</a>&gt;</h4></section></summary><div class='docblock'>Returns the ceiled integer square root. <a href=\"devela/num/trait.NumInt.html#method.int_sqrt_ceil\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.int_ref_sqrt_ceil\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/num/int/num_trait/impls.rs.html#387\">Source</a><a href=\"#method.int_ref_sqrt_ceil\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/num/trait.NumInt.html#method.int_ref_sqrt_ceil\" class=\"fn\">int_ref_sqrt_ceil</a>(&amp;self) -&gt; <a class=\"type\" href=\"devela/num/type.IntResult.html\" title=\"type devela::num::IntResult\">Result</a>&lt;Self::<a class=\"associatedtype\" href=\"devela/num/trait.Num.html#associatedtype.Out\" title=\"type devela::num::Num::Out\">Out</a>&gt;</h4></section></summary><div class='docblock'>Similar to <a href=\"devela/num/trait.NumInt.html#method.int_sqrt_ceil\">int_sqrt_ceil</a>, but operates on references instead of values.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.int_sqrt_floor\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/num/int/num_trait/impls.rs.html#387\">Source</a><a href=\"#method.int_sqrt_floor\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/num/trait.NumInt.html#method.int_sqrt_floor\" class=\"fn\">int_sqrt_floor</a>(self) -&gt; <a class=\"type\" href=\"devela/num/type.IntResult.html\" title=\"type devela::num::IntResult\">Result</a>&lt;Self::<a class=\"associatedtype\" href=\"devela/num/trait.Num.html#associatedtype.Out\" title=\"type devela::num::Num::Out\">Out</a>&gt;</h4></section></summary><div class='docblock'>Returns the floored integer square root. <a href=\"devela/num/trait.NumInt.html#method.int_sqrt_floor\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.int_ref_sqrt_floor\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/num/int/num_trait/impls.rs.html#387\">Source</a><a href=\"#method.int_ref_sqrt_floor\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/num/trait.NumInt.html#method.int_ref_sqrt_floor\" class=\"fn\">int_ref_sqrt_floor</a>(&amp;self) -&gt; <a class=\"type\" href=\"devela/num/type.IntResult.html\" title=\"type devela::num::IntResult\">Result</a>&lt;Self::<a class=\"associatedtype\" href=\"devela/num/trait.Num.html#associatedtype.Out\" title=\"type devela::num::Num::Out\">Out</a>&gt;</h4></section></summary><div class='docblock'>Similar to <a href=\"devela/num/trait.NumInt.html#method.int_sqrt_floor\">int_sqrt_floor</a>, but operates on references instead of values.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.int_sqrt_round\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/num/int/num_trait/impls.rs.html#387\">Source</a><a href=\"#method.int_sqrt_round\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/num/trait.NumInt.html#method.int_sqrt_round\" class=\"fn\">int_sqrt_round</a>(self) -&gt; <a class=\"type\" href=\"devela/num/type.IntResult.html\" title=\"type devela::num::IntResult\">Result</a>&lt;Self::<a class=\"associatedtype\" href=\"devela/num/trait.Num.html#associatedtype.Out\" title=\"type devela::num::Num::Out\">Out</a>&gt;</h4></section></summary><div class='docblock'>Returns the rounded integer square root. <a href=\"devela/num/trait.NumInt.html#method.int_sqrt_round\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.int_ref_sqrt_round\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/num/int/num_trait/impls.rs.html#387\">Source</a><a href=\"#method.int_ref_sqrt_round\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/num/trait.NumInt.html#method.int_ref_sqrt_round\" class=\"fn\">int_ref_sqrt_round</a>(&amp;self) -&gt; <a class=\"type\" href=\"devela/num/type.IntResult.html\" title=\"type devela::num::IntResult\">Result</a>&lt;Self::<a class=\"associatedtype\" href=\"devela/num/trait.Num.html#associatedtype.Out\" title=\"type devela::num::Num::Out\">Out</a>&gt;</h4></section></summary><div class='docblock'>Similar to <a href=\"devela/num/trait.NumInt.html#method.int_sqrt_round\">int_sqrt_round</a>, but operates on references instead of values.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.int_ref_div_rem\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/num/int/num_trait/mod.rs.html#355\">Source</a><a href=\"#method.int_ref_div_rem\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/num/trait.NumInt.html#method.int_ref_div_rem\" class=\"fn\">int_ref_div_rem</a>(&amp;self, b: &amp;Self::<a class=\"associatedtype\" href=\"devela/num/trait.Num.html#associatedtype.Rhs\" title=\"type devela::num::Num::Rhs\">Rhs</a>) -&gt; <a class=\"type\" href=\"devela/num/type.IntResult.html\" title=\"type devela::num::IntResult\">Result</a>&lt;[Self::<a class=\"associatedtype\" href=\"devela/num/trait.Num.html#associatedtype.Out\" title=\"type devela::num::Num::Out\">Out</a>; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">2</a>]&gt;</h4></section></summary><div class='docblock'>Similar to <a href=\"devela/num/trait.NumInt.html#method.int_div_rem\">int_div_rem</a>, but operates on references instead of values.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.int_ref_div_ceil\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/num/int/num_trait/mod.rs.html#364\">Source</a><a href=\"#method.int_ref_div_ceil\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/num/trait.NumInt.html#method.int_ref_div_ceil\" class=\"fn\">int_ref_div_ceil</a>(&amp;self, b: &amp;Self::<a class=\"associatedtype\" href=\"devela/num/trait.Num.html#associatedtype.Rhs\" title=\"type devela::num::Num::Rhs\">Rhs</a>) -&gt; <a class=\"type\" href=\"devela/num/type.IntResult.html\" title=\"type devela::num::IntResult\">Result</a>&lt;Self::<a class=\"associatedtype\" href=\"devela/num/trait.Num.html#associatedtype.Out\" title=\"type devela::num::Num::Out\">Out</a>&gt;</h4></section></summary><div class='docblock'>Similar to <a href=\"devela/num/trait.NumInt.html#method.int_div_ceil\">int_div_ceil</a>, but operates on references instead of values.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.int_ref_div_floor\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/num/int/num_trait/mod.rs.html#372\">Source</a><a href=\"#method.int_ref_div_floor\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/num/trait.NumInt.html#method.int_ref_div_floor\" class=\"fn\">int_ref_div_floor</a>(&amp;self, b: &amp;Self::<a class=\"associatedtype\" href=\"devela/num/trait.Num.html#associatedtype.Rhs\" title=\"type devela::num::Num::Rhs\">Rhs</a>) -&gt; <a class=\"type\" href=\"devela/num/type.IntResult.html\" title=\"type devela::num::IntResult\">Result</a>&lt;Self::<a class=\"associatedtype\" href=\"devela/num/trait.Num.html#associatedtype.Out\" title=\"type devela::num::Num::Out\">Out</a>&gt;</h4></section></summary><div class='docblock'>Similar to <a href=\"devela/num/trait.NumInt.html#method.int_div_floor\">int_div_floor</a>, but operates on references instead of values.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.int_ref_div_ties_away\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/num/int/num_trait/mod.rs.html#378\">Source</a><a href=\"#method.int_ref_div_ties_away\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/num/trait.NumInt.html#method.int_ref_div_ties_away\" class=\"fn\">int_ref_div_ties_away</a>(&amp;self, b: &amp;Self::<a class=\"associatedtype\" href=\"devela/num/trait.Num.html#associatedtype.Rhs\" title=\"type devela::num::Num::Rhs\">Rhs</a>) -&gt; <a class=\"type\" href=\"devela/num/type.IntResult.html\" title=\"type devela::num::IntResult\">Result</a>&lt;Self::<a class=\"associatedtype\" href=\"devela/num/trait.Num.html#associatedtype.Out\" title=\"type devela::num::Num::Out\">Out</a>&gt;</h4></section></summary><div class='docblock'>Similar to <a href=\"devela/num/trait.NumInt.html#method.int_div_ties_away\">int_div_ties_away</a>, but operates on references instead of values.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.int_ref_div_ties_towards\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/num/int/num_trait/mod.rs.html#384\">Source</a><a href=\"#method.int_ref_div_ties_towards\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/num/trait.NumInt.html#method.int_ref_div_ties_towards\" class=\"fn\">int_ref_div_ties_towards</a>(&amp;self, b: &amp;Self::<a class=\"associatedtype\" href=\"devela/num/trait.Num.html#associatedtype.Rhs\" title=\"type devela::num::Num::Rhs\">Rhs</a>) -&gt; <a class=\"type\" href=\"devela/num/type.IntResult.html\" title=\"type devela::num::IntResult\">Result</a>&lt;Self::<a class=\"associatedtype\" href=\"devela/num/trait.Num.html#associatedtype.Out\" title=\"type devela::num::Num::Out\">Out</a>&gt;</h4></section></summary><div class='docblock'>Similar to <a href=\"devela/num/trait.NumInt.html#method.int_div_ties_towards\">int_div_ties_towards</a>, but operates on references instead of values.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.int_ref_div_ties_even\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/num/int/num_trait/mod.rs.html#390\">Source</a><a href=\"#method.int_ref_div_ties_even\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/num/trait.NumInt.html#method.int_ref_div_ties_even\" class=\"fn\">int_ref_div_ties_even</a>(&amp;self, b: &amp;Self::<a class=\"associatedtype\" href=\"devela/num/trait.Num.html#associatedtype.Rhs\" title=\"type devela::num::Num::Rhs\">Rhs</a>) -&gt; <a class=\"type\" href=\"devela/num/type.IntResult.html\" title=\"type devela::num::IntResult\">Result</a>&lt;Self::<a class=\"associatedtype\" href=\"devela/num/trait.Num.html#associatedtype.Out\" title=\"type devela::num::Num::Out\">Out</a>&gt;</h4></section></summary><div class='docblock'>Similar to <a href=\"devela/num/trait.NumInt.html#method.int_div_ties_even\">int_div_ties_even</a>, but operates on references instead of values.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.int_ref_div_ties_odd\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/num/int/num_trait/mod.rs.html#396\">Source</a><a href=\"#method.int_ref_div_ties_odd\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/num/trait.NumInt.html#method.int_ref_div_ties_odd\" class=\"fn\">int_ref_div_ties_odd</a>(&amp;self, b: &amp;Self::<a class=\"associatedtype\" href=\"devela/num/trait.Num.html#associatedtype.Rhs\" title=\"type devela::num::Num::Rhs\">Rhs</a>) -&gt; <a class=\"type\" href=\"devela/num/type.IntResult.html\" title=\"type devela::num::IntResult\">Result</a>&lt;Self::<a class=\"associatedtype\" href=\"devela/num/trait.Num.html#associatedtype.Out\" title=\"type devela::num::Num::Out\">Out</a>&gt;</h4></section></summary><div class='docblock'>Similar to <a href=\"devela/num/trait.NumInt.html#method.int_div_ties_odd\">int_div_ties_odd</a>, but operates on references instead of values.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.int_modulo_cycles\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/num/int/num_trait/mod.rs.html#731-732\">Source</a><a href=\"#method.int_modulo_cycles\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/num/trait.NumInt.html#method.int_modulo_cycles\" class=\"fn\">int_modulo_cycles</a>(\n    self,\n    modulus: Self::<a class=\"associatedtype\" href=\"devela/num/trait.Num.html#associatedtype.Rhs\" title=\"type devela::num::Num::Rhs\">Rhs</a>,\n) -&gt; <a class=\"type\" href=\"devela/num/type.IntResult.html\" title=\"type devela::num::IntResult\">Result</a>&lt;<a class=\"struct\" href=\"devela/all/struct.ValueQuant.html\" title=\"struct devela::all::ValueQuant\">ValueQuant</a>&lt;Self::<a class=\"associatedtype\" href=\"devela/num/trait.Num.html#associatedtype.Out\" title=\"type devela::num::Num::Out\">Out</a>, Self::<a class=\"associatedtype\" href=\"devela/num/trait.Num.html#associatedtype.Out\" title=\"type devela::num::Num::Out\">Out</a>&gt;&gt;<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"devela/all/trait.Sized.html\" title=\"trait devela::all::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Computes the non-negative modulo of <code>self</code> over |<code>modulus</code>|,\nand the number of cycles it is reduced. <a href=\"devela/num/trait.NumInt.html#method.int_modulo_cycles\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.int_ref_modulo_cycles\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/num/int/num_trait/mod.rs.html#734-735\">Source</a><a href=\"#method.int_ref_modulo_cycles\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/num/trait.NumInt.html#method.int_ref_modulo_cycles\" class=\"fn\">int_ref_modulo_cycles</a>(\n    &amp;self,\n    modulus: &amp;Self::<a class=\"associatedtype\" href=\"devela/num/trait.Num.html#associatedtype.Rhs\" title=\"type devela::num::Num::Rhs\">Rhs</a>,\n) -&gt; <a class=\"type\" href=\"devela/num/type.IntResult.html\" title=\"type devela::num::IntResult\">Result</a>&lt;<a class=\"struct\" href=\"devela/all/struct.ValueQuant.html\" title=\"struct devela::all::ValueQuant\">ValueQuant</a>&lt;Self::<a class=\"associatedtype\" href=\"devela/num/trait.Num.html#associatedtype.Out\" title=\"type devela::num::Num::Out\">Out</a>, Self::<a class=\"associatedtype\" href=\"devela/num/trait.Num.html#associatedtype.Out\" title=\"type devela::num::Num::Out\">Out</a>&gt;&gt;<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"devela/all/trait.Sized.html\" title=\"trait devela::all::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Similar to <a href=\"devela/num/trait.NumInt.html#method.int_modulo_cycles\">int_modulo_cycles</a>, but operates on references instead of values.</div></details></div></details>","NumInt","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-NumToStr%3Ci32%3E-for-i32\" class=\"impl\"><a href=\"#impl-NumToStr%3Ci32%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"devela/all/trait.NumToStr.html\" title=\"trait devela::all::NumToStr\">NumToStr</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_bytes_base\" class=\"method trait-impl\"><a href=\"#method.to_bytes_base\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.NumToStr.html#tymethod.to_bytes_base\" class=\"fn\">to_bytes_base</a>(self, base: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>, string: &amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>]) -&gt; &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>] <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&amp;[u8]\">ⓘ</a></h4></section></summary><div class='docblock'>Given a base for encoding and a mutable byte slice, write the number\ninto the byte slice and return the indice where the inner string begins.\nThe inner string can be extracted by slicing the byte slice from\nthat indice. <a href=\"devela/all/trait.NumToStr.html#tymethod.to_bytes_base\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_str_base\" class=\"method trait-impl\"><a href=\"#method.to_str_base\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.NumToStr.html#tymethod.to_str_base\" class=\"fn\">to_str_base</a>(self, base: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>, buf: &amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>]) -&gt; &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.str.html\">str</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&amp;str\">ⓘ</a></h4></section></summary><div class='docblock'>Convenience method for quickly getting a string from the input’s array buffer.</div></details></div></details>","NumToStr<i32>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Octal-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/fmt/num.rs.html#75\">Source</a></span><a href=\"#impl-Octal-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"devela/all/trait.Octal.html\" title=\"trait devela::all::Octal\">Octal</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/fmt/num.rs.html#75\">Source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Octal.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"devela/all/struct.Formatter.html\" title=\"struct devela::all::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"devela/all/struct.FmtError.html\" title=\"struct devela::all::FmtError\">Error</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;(), Error&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Format signed integers in the two’s-complement form.</p>\n</div></details></div></details>","Octal","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-One-for-i32\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/identities.rs.html#172\">Source</a><a href=\"#impl-One-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://docs.rs/num-traits/0.2/num_traits/identities/trait.One.html\" title=\"trait num_traits::identities::One\">One</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.one\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/identities.rs.html#172\">Source</a><a href=\"#method.one\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/identities/trait.One.html#tymethod.one\" class=\"fn\">one</a>() -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a></h4></section></summary><div class='docblock'>Returns the multiplicative identity element of <code>Self</code>, <code>1</code>. <a href=\"https://docs.rs/num-traits/0.2/num_traits/identities/trait.One.html#tymethod.one\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_one\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/identities.rs.html#172\">Source</a><a href=\"#method.is_one\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/identities/trait.One.html#method.is_one\" class=\"fn\">is_one</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Returns <code>true</code> if <code>self</code> is equal to the multiplicative identity. <a href=\"https://docs.rs/num-traits/0.2/num_traits/identities/trait.One.html#method.is_one\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.set_one\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/identities.rs.html#118\">Source</a><a href=\"#method.set_one\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/identities/trait.One.html#method.set_one\" class=\"fn\">set_one</a>(&amp;mut self)</h4></section></summary><div class='docblock'>Sets <code>self</code> to the multiplicative identity element of <code>Self</code>, <code>1</code>.</div></details></div></details>","One","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Ord-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1999\">Source</a></span><a href=\"#impl-Ord-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"devela/all/trait.Ord.html\" title=\"trait devela::all::Ord\">Ord</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1999\">Source</a><a href=\"#method.cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Ord.html#tymethod.cmp\" class=\"fn\">cmp</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>) -&gt; <a class=\"enum\" href=\"devela/all/enum.Ordering.html\" title=\"enum devela::all::Ordering\">Ordering</a></h4></section></summary><div class='docblock'>This method returns an <a href=\"devela/all/enum.Ordering.html\" title=\"enum devela::all::Ordering\"><code>Ordering</code></a> between <code>self</code> and <code>other</code>. <a href=\"devela/all/trait.Ord.html#tymethod.cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.max\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1013-1015\">Source</a></span><a href=\"#method.max\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Ord.html#method.max\" class=\"fn\">max</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"devela/all/trait.Sized.html\" title=\"trait devela::all::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Compares and returns the maximum of two values. <a href=\"devela/all/trait.Ord.html#method.max\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.min\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1052-1054\">Source</a></span><a href=\"#method.min\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Ord.html#method.min\" class=\"fn\">min</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"devela/all/trait.Sized.html\" title=\"trait devela::all::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Compares and returns the minimum of two values. <a href=\"devela/all/trait.Ord.html#method.min\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clamp\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.50.0\">1.50.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1078-1080\">Source</a></span><a href=\"#method.clamp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Ord.html#method.clamp\" class=\"fn\">clamp</a>(self, min: Self, max: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"devela/all/trait.Sized.html\" title=\"trait devela::all::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Restrict a value to a certain interval. <a href=\"devela/all/trait.Ord.html#method.clamp\">Read more</a></div></details></div></details>","Ord","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-OverflowingAdd-for-i32\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/ops/overflowing.rs.html#32\">Source</a><a href=\"#impl-OverflowingAdd-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://docs.rs/num-traits/0.2/num_traits/ops/overflowing/trait.OverflowingAdd.html\" title=\"trait num_traits::ops::overflowing::OverflowingAdd\">OverflowingAdd</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_add\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/ops/overflowing.rs.html#32\">Source</a><a href=\"#method.overflowing_add\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/ops/overflowing/trait.OverflowingAdd.html#tymethod.overflowing_add\" class=\"fn\">overflowing_add</a>(&amp;self, v: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>) -&gt; (<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a>) <a href=\"#\" class=\"tooltip\" data-notable-ty=\"(i32, bool)\">ⓘ</a></h4></section></summary><div class='docblock'>Returns a tuple of the sum along with a boolean indicating whether an arithmetic overflow would occur.\nIf an overflow would have occurred then the wrapped value is returned.</div></details></div></details>","OverflowingAdd","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-OverflowingMul-for-i32\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/ops/overflowing.rs.html#74\">Source</a><a href=\"#impl-OverflowingMul-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://docs.rs/num-traits/0.2/num_traits/ops/overflowing/trait.OverflowingMul.html\" title=\"trait num_traits::ops::overflowing::OverflowingMul\">OverflowingMul</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_mul\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/ops/overflowing.rs.html#74\">Source</a><a href=\"#method.overflowing_mul\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/ops/overflowing/trait.OverflowingMul.html#tymethod.overflowing_mul\" class=\"fn\">overflowing_mul</a>(&amp;self, v: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>) -&gt; (<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a>) <a href=\"#\" class=\"tooltip\" data-notable-ty=\"(i32, bool)\">ⓘ</a></h4></section></summary><div class='docblock'>Returns a tuple of the product along with a boolean indicating whether an arithmetic overflow would occur.\nIf an overflow would have occurred then the wrapped value is returned.</div></details></div></details>","OverflowingMul","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-OverflowingSub-for-i32\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/ops/overflowing.rs.html#53\">Source</a><a href=\"#impl-OverflowingSub-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://docs.rs/num-traits/0.2/num_traits/ops/overflowing/trait.OverflowingSub.html\" title=\"trait num_traits::ops::overflowing::OverflowingSub\">OverflowingSub</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_sub\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/ops/overflowing.rs.html#53\">Source</a><a href=\"#method.overflowing_sub\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/ops/overflowing/trait.OverflowingSub.html#tymethod.overflowing_sub\" class=\"fn\">overflowing_sub</a>(&amp;self, v: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>) -&gt; (<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a>) <a href=\"#\" class=\"tooltip\" data-notable-ty=\"(i32, bool)\">ⓘ</a></h4></section></summary><div class='docblock'>Returns a tuple of the difference along with a boolean indicating whether an arithmetic overflow would occur.\nIf an overflow would have occurred then the wrapped value is returned.</div></details></div></details>","OverflowingSub","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ParseHex-for-i32\" class=\"impl\"><a href=\"#impl-ParseHex-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl ParseHex for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.parse_hex\" class=\"method trait-impl\"><a href=\"#method.parse_hex\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">parse_hex</a>(input: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.str.html\">str</a>) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>, ParseError&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;i32, ParseError&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Parse the value from hex.</div></details></div></details>","ParseHex","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3CBound%3C'_,+PyInt%3E%3E-for-i32\" class=\"impl\"><a href=\"#impl-PartialEq%3CBound%3C'_,+PyInt%3E%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"devela/all/trait.PartialEq.html\" title=\"trait devela::all::PartialEq\">PartialEq</a>&lt;Bound&lt;'_, PyInt&gt;&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;Bound&lt;'_, PyInt&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#265\">Source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq<Bound<'_, PyInt>>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/143800\" title=\"Tracking issue for const_cmp\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1845-1847\">Source</a></span><a href=\"#impl-PartialEq-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"devela/all/trait.PartialEq.html\" title=\"trait devela::all::PartialEq\">PartialEq</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1845-1847\">Source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1845-1847\">Source</a><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialOrd-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1999\">Source</a></span><a href=\"#impl-PartialOrd-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"devela/all/trait.PartialOrd.html\" title=\"trait devela::all::PartialOrd\">PartialOrd</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.partial_cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1999\">Source</a><a href=\"#method.partial_cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>) -&gt; <a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;<a class=\"enum\" href=\"devela/all/enum.Ordering.html\" title=\"enum devela::all::Ordering\">Ordering</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Option&lt;Ordering&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"devela/all/trait.PartialOrd.html#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1999\">Source</a><a href=\"#method.lt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"devela/all/trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.le\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1999\">Source</a><a href=\"#method.le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the\n<code>&lt;=</code> operator. <a href=\"devela/all/trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.gt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1999\">Source</a><a href=\"#method.gt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code>\noperator. <a href=\"devela/all/trait.PartialOrd.html#method.gt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ge\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1999\">Source</a><a href=\"#method.ge\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by\nthe <code>&gt;=</code> operator. <a href=\"devela/all/trait.PartialOrd.html#method.ge\">Read more</a></div></details></div></details>","PartialOrd","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Pow%3C%26u16%3E-for-i32\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/pow.rs.html#90\">Source</a><a href=\"#impl-Pow%3C%26u16%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"https://docs.rs/num-traits/0.2/num_traits/pow/trait.Pow.html\" title=\"trait num_traits::pow::Pow\">Pow</a>&lt;&amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u16.html\">u16</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/pow.rs.html#90\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://docs.rs/num-traits/0.2/num_traits/pow/trait.Pow.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h4></section></summary><div class='docblock'>The result after applying the operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.pow\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/pow.rs.html#90\">Source</a><a href=\"#method.pow\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/pow/trait.Pow.html#tymethod.pow\" class=\"fn\">pow</a>(self, rhs: &amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a></h4></section></summary><div class='docblock'>Returns <code>self</code> to the power <code>rhs</code>. <a href=\"https://docs.rs/num-traits/0.2/num_traits/pow/trait.Pow.html#tymethod.pow\">Read more</a></div></details></div></details>","Pow<&'a u16>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Pow%3C%26u32%3E-for-i32\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/pow.rs.html#91\">Source</a><a href=\"#impl-Pow%3C%26u32%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"https://docs.rs/num-traits/0.2/num_traits/pow/trait.Pow.html\" title=\"trait num_traits::pow::Pow\">Pow</a>&lt;&amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/pow.rs.html#91\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://docs.rs/num-traits/0.2/num_traits/pow/trait.Pow.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h4></section></summary><div class='docblock'>The result after applying the operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.pow\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/pow.rs.html#91\">Source</a><a href=\"#method.pow\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/pow/trait.Pow.html#tymethod.pow\" class=\"fn\">pow</a>(self, rhs: &amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a></h4></section></summary><div class='docblock'>Returns <code>self</code> to the power <code>rhs</code>. <a href=\"https://docs.rs/num-traits/0.2/num_traits/pow/trait.Pow.html#tymethod.pow\">Read more</a></div></details></div></details>","Pow<&'a u32>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Pow%3C%26u8%3E-for-i32\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/pow.rs.html#89\">Source</a><a href=\"#impl-Pow%3C%26u8%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"https://docs.rs/num-traits/0.2/num_traits/pow/trait.Pow.html\" title=\"trait num_traits::pow::Pow\">Pow</a>&lt;&amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/pow.rs.html#89\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://docs.rs/num-traits/0.2/num_traits/pow/trait.Pow.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h4></section></summary><div class='docblock'>The result after applying the operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.pow\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/pow.rs.html#89\">Source</a><a href=\"#method.pow\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/pow/trait.Pow.html#tymethod.pow\" class=\"fn\">pow</a>(self, rhs: &amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a></h4></section></summary><div class='docblock'>Returns <code>self</code> to the power <code>rhs</code>. <a href=\"https://docs.rs/num-traits/0.2/num_traits/pow/trait.Pow.html#tymethod.pow\">Read more</a></div></details></div></details>","Pow<&'a u8>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Pow%3C%26usize%3E-for-i32\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/pow.rs.html#92\">Source</a><a href=\"#impl-Pow%3C%26usize%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"https://docs.rs/num-traits/0.2/num_traits/pow/trait.Pow.html\" title=\"trait num_traits::pow::Pow\">Pow</a>&lt;&amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/pow.rs.html#92\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://docs.rs/num-traits/0.2/num_traits/pow/trait.Pow.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h4></section></summary><div class='docblock'>The result after applying the operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.pow\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/pow.rs.html#92\">Source</a><a href=\"#method.pow\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/pow/trait.Pow.html#tymethod.pow\" class=\"fn\">pow</a>(self, rhs: &amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a></h4></section></summary><div class='docblock'>Returns <code>self</code> to the power <code>rhs</code>. <a href=\"https://docs.rs/num-traits/0.2/num_traits/pow/trait.Pow.html#tymethod.pow\">Read more</a></div></details></div></details>","Pow<&'a usize>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Pow%3Cu16%3E-for-i32\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/pow.rs.html#90\">Source</a><a href=\"#impl-Pow%3Cu16%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://docs.rs/num-traits/0.2/num_traits/pow/trait.Pow.html\" title=\"trait num_traits::pow::Pow\">Pow</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u16.html\">u16</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/pow.rs.html#90\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://docs.rs/num-traits/0.2/num_traits/pow/trait.Pow.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h4></section></summary><div class='docblock'>The result after applying the operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.pow\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/pow.rs.html#90\">Source</a><a href=\"#method.pow\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/pow/trait.Pow.html#tymethod.pow\" class=\"fn\">pow</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a></h4></section></summary><div class='docblock'>Returns <code>self</code> to the power <code>rhs</code>. <a href=\"https://docs.rs/num-traits/0.2/num_traits/pow/trait.Pow.html#tymethod.pow\">Read more</a></div></details></div></details>","Pow<u16>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Pow%3Cu32%3E-for-i32\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/pow.rs.html#91\">Source</a><a href=\"#impl-Pow%3Cu32%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://docs.rs/num-traits/0.2/num_traits/pow/trait.Pow.html\" title=\"trait num_traits::pow::Pow\">Pow</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/pow.rs.html#91\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://docs.rs/num-traits/0.2/num_traits/pow/trait.Pow.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h4></section></summary><div class='docblock'>The result after applying the operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.pow\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/pow.rs.html#91\">Source</a><a href=\"#method.pow\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/pow/trait.Pow.html#tymethod.pow\" class=\"fn\">pow</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a></h4></section></summary><div class='docblock'>Returns <code>self</code> to the power <code>rhs</code>. <a href=\"https://docs.rs/num-traits/0.2/num_traits/pow/trait.Pow.html#tymethod.pow\">Read more</a></div></details></div></details>","Pow<u32>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Pow%3Cu8%3E-for-i32\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/pow.rs.html#89\">Source</a><a href=\"#impl-Pow%3Cu8%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://docs.rs/num-traits/0.2/num_traits/pow/trait.Pow.html\" title=\"trait num_traits::pow::Pow\">Pow</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/pow.rs.html#89\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://docs.rs/num-traits/0.2/num_traits/pow/trait.Pow.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h4></section></summary><div class='docblock'>The result after applying the operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.pow\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/pow.rs.html#89\">Source</a><a href=\"#method.pow\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/pow/trait.Pow.html#tymethod.pow\" class=\"fn\">pow</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a></h4></section></summary><div class='docblock'>Returns <code>self</code> to the power <code>rhs</code>. <a href=\"https://docs.rs/num-traits/0.2/num_traits/pow/trait.Pow.html#tymethod.pow\">Read more</a></div></details></div></details>","Pow<u8>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Pow%3Cusize%3E-for-i32\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/pow.rs.html#92\">Source</a><a href=\"#impl-Pow%3Cusize%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://docs.rs/num-traits/0.2/num_traits/pow/trait.Pow.html\" title=\"trait num_traits::pow::Pow\">Pow</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/pow.rs.html#92\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://docs.rs/num-traits/0.2/num_traits/pow/trait.Pow.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h4></section></summary><div class='docblock'>The result after applying the operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.pow\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/pow.rs.html#92\">Source</a><a href=\"#method.pow\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/pow/trait.Pow.html#tymethod.pow\" class=\"fn\">pow</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a></h4></section></summary><div class='docblock'>Returns <code>self</code> to the power <code>rhs</code>. <a href=\"https://docs.rs/num-traits/0.2/num_traits/pow/trait.Pow.html#tymethod.pow\">Read more</a></div></details></div></details>","Pow<usize>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PrimInt-for-i32\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/int.rs.html#504\">Source</a><a href=\"#impl-PrimInt-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://docs.rs/num-traits/0.2/num_traits/int/trait.PrimInt.html\" title=\"trait num_traits::int::PrimInt\">PrimInt</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.count_ones\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/int.rs.html#504\">Source</a><a href=\"#method.count_ones\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/int/trait.PrimInt.html#tymethod.count_ones\" class=\"fn\">count_ones</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"u32\">ⓘ</a></h4></section></summary><div class='docblock'>Returns the number of ones in the binary representation of <code>self</code>. <a href=\"https://docs.rs/num-traits/0.2/num_traits/int/trait.PrimInt.html#tymethod.count_ones\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.count_zeros\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/int.rs.html#504\">Source</a><a href=\"#method.count_zeros\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/int/trait.PrimInt.html#tymethod.count_zeros\" class=\"fn\">count_zeros</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"u32\">ⓘ</a></h4></section></summary><div class='docblock'>Returns the number of zeros in the binary representation of <code>self</code>. <a href=\"https://docs.rs/num-traits/0.2/num_traits/int/trait.PrimInt.html#tymethod.count_zeros\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.leading_ones\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/int.rs.html#504\">Source</a><a href=\"#method.leading_ones\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/int/trait.PrimInt.html#method.leading_ones\" class=\"fn\">leading_ones</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"u32\">ⓘ</a></h4></section></summary><div class='docblock'>Returns the number of leading ones in the binary representation\nof <code>self</code>. <a href=\"https://docs.rs/num-traits/0.2/num_traits/int/trait.PrimInt.html#method.leading_ones\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.leading_zeros\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/int.rs.html#504\">Source</a><a href=\"#method.leading_zeros\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/int/trait.PrimInt.html#tymethod.leading_zeros\" class=\"fn\">leading_zeros</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"u32\">ⓘ</a></h4></section></summary><div class='docblock'>Returns the number of leading zeros in the binary representation\nof <code>self</code>. <a href=\"https://docs.rs/num-traits/0.2/num_traits/int/trait.PrimInt.html#tymethod.leading_zeros\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.trailing_ones\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/int.rs.html#504\">Source</a><a href=\"#method.trailing_ones\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/int/trait.PrimInt.html#method.trailing_ones\" class=\"fn\">trailing_ones</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"u32\">ⓘ</a></h4></section></summary><div class='docblock'>Returns the number of trailing ones in the binary representation\nof <code>self</code>. <a href=\"https://docs.rs/num-traits/0.2/num_traits/int/trait.PrimInt.html#method.trailing_ones\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.trailing_zeros\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/int.rs.html#504\">Source</a><a href=\"#method.trailing_zeros\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/int/trait.PrimInt.html#tymethod.trailing_zeros\" class=\"fn\">trailing_zeros</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"u32\">ⓘ</a></h4></section></summary><div class='docblock'>Returns the number of trailing zeros in the binary representation\nof <code>self</code>. <a href=\"https://docs.rs/num-traits/0.2/num_traits/int/trait.PrimInt.html#tymethod.trailing_zeros\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.rotate_left\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/int.rs.html#504\">Source</a><a href=\"#method.rotate_left\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/int/trait.PrimInt.html#tymethod.rotate_left\" class=\"fn\">rotate_left</a>(self, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a></h4></section></summary><div class='docblock'>Shifts the bits to the left by a specified amount, <code>n</code>, wrapping\nthe truncated bits to the end of the resulting integer. <a href=\"https://docs.rs/num-traits/0.2/num_traits/int/trait.PrimInt.html#tymethod.rotate_left\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.rotate_right\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/int.rs.html#504\">Source</a><a href=\"#method.rotate_right\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/int/trait.PrimInt.html#tymethod.rotate_right\" class=\"fn\">rotate_right</a>(self, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a></h4></section></summary><div class='docblock'>Shifts the bits to the right by a specified amount, <code>n</code>, wrapping\nthe truncated bits to the beginning of the resulting integer. <a href=\"https://docs.rs/num-traits/0.2/num_traits/int/trait.PrimInt.html#tymethod.rotate_right\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.signed_shl\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/int.rs.html#504\">Source</a><a href=\"#method.signed_shl\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/int/trait.PrimInt.html#tymethod.signed_shl\" class=\"fn\">signed_shl</a>(self, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a></h4></section></summary><div class='docblock'>Shifts the bits to the left by a specified amount, <code>n</code>, filling\nzeros in the least significant bits. <a href=\"https://docs.rs/num-traits/0.2/num_traits/int/trait.PrimInt.html#tymethod.signed_shl\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.signed_shr\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/int.rs.html#504\">Source</a><a href=\"#method.signed_shr\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/int/trait.PrimInt.html#tymethod.signed_shr\" class=\"fn\">signed_shr</a>(self, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a></h4></section></summary><div class='docblock'>Shifts the bits to the right by a specified amount, <code>n</code>, copying\nthe “sign bit” in the most significant bits even for unsigned types. <a href=\"https://docs.rs/num-traits/0.2/num_traits/int/trait.PrimInt.html#tymethod.signed_shr\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unsigned_shl\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/int.rs.html#504\">Source</a><a href=\"#method.unsigned_shl\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/int/trait.PrimInt.html#tymethod.unsigned_shl\" class=\"fn\">unsigned_shl</a>(self, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a></h4></section></summary><div class='docblock'>Shifts the bits to the left by a specified amount, <code>n</code>, filling\nzeros in the least significant bits. <a href=\"https://docs.rs/num-traits/0.2/num_traits/int/trait.PrimInt.html#tymethod.unsigned_shl\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unsigned_shr\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/int.rs.html#504\">Source</a><a href=\"#method.unsigned_shr\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/int/trait.PrimInt.html#tymethod.unsigned_shr\" class=\"fn\">unsigned_shr</a>(self, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a></h4></section></summary><div class='docblock'>Shifts the bits to the right by a specified amount, <code>n</code>, filling\nzeros in the most significant bits. <a href=\"https://docs.rs/num-traits/0.2/num_traits/int/trait.PrimInt.html#tymethod.unsigned_shr\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.swap_bytes\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/int.rs.html#504\">Source</a><a href=\"#method.swap_bytes\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/int/trait.PrimInt.html#tymethod.swap_bytes\" class=\"fn\">swap_bytes</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a></h4></section></summary><div class='docblock'>Reverses the byte order of the integer. <a href=\"https://docs.rs/num-traits/0.2/num_traits/int/trait.PrimInt.html#tymethod.swap_bytes\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.reverse_bits\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/int.rs.html#504\">Source</a><a href=\"#method.reverse_bits\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/int/trait.PrimInt.html#method.reverse_bits\" class=\"fn\">reverse_bits</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a></h4></section></summary><div class='docblock'>Reverses the order of bits in the integer. <a href=\"https://docs.rs/num-traits/0.2/num_traits/int/trait.PrimInt.html#method.reverse_bits\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_be\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/int.rs.html#504\">Source</a><a href=\"#method.from_be\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/int/trait.PrimInt.html#tymethod.from_be\" class=\"fn\">from_be</a>(x: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a></h4></section></summary><div class='docblock'>Convert an integer from big endian to the target’s endianness. <a href=\"https://docs.rs/num-traits/0.2/num_traits/int/trait.PrimInt.html#tymethod.from_be\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_le\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/int.rs.html#504\">Source</a><a href=\"#method.from_le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/int/trait.PrimInt.html#tymethod.from_le\" class=\"fn\">from_le</a>(x: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a></h4></section></summary><div class='docblock'>Convert an integer from little endian to the target’s endianness. <a href=\"https://docs.rs/num-traits/0.2/num_traits/int/trait.PrimInt.html#tymethod.from_le\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_be\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/int.rs.html#504\">Source</a><a href=\"#method.to_be\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/int/trait.PrimInt.html#tymethod.to_be\" class=\"fn\">to_be</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a></h4></section></summary><div class='docblock'>Convert <code>self</code> to big endian from the target’s endianness. <a href=\"https://docs.rs/num-traits/0.2/num_traits/int/trait.PrimInt.html#tymethod.to_be\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_le\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/int.rs.html#504\">Source</a><a href=\"#method.to_le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/int/trait.PrimInt.html#tymethod.to_le\" class=\"fn\">to_le</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a></h4></section></summary><div class='docblock'>Convert <code>self</code> to little endian from the target’s endianness. <a href=\"https://docs.rs/num-traits/0.2/num_traits/int/trait.PrimInt.html#tymethod.to_le\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.pow\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/int.rs.html#504\">Source</a><a href=\"#method.pow\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/int/trait.PrimInt.html#tymethod.pow\" class=\"fn\">pow</a>(self, exp: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a></h4></section></summary><div class='docblock'>Raises self to the power of <code>exp</code>, using exponentiation by squaring. <a href=\"https://docs.rs/num-traits/0.2/num_traits/int/trait.PrimInt.html#tymethod.pow\">Read more</a></div></details></div></details>","PrimInt","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Primitive-for-i32\" class=\"impl\"><a href=\"#impl-Primitive-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl Primitive for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedconstant.DEFAULT_MAX_VALUE\" class=\"associatedconstant trait-impl\"><a href=\"#associatedconstant.DEFAULT_MAX_VALUE\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a class=\"constant\">DEFAULT_MAX_VALUE</a>: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> = 2_147_483_647i32</h4></section></summary><div class='docblock'>The maximum value for this type of primitive within the context of color.\nFor floats, the maximum is <code>1.0</code>, whereas the integer types inherit their usual maximum values.</div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.DEFAULT_MIN_VALUE\" class=\"associatedconstant trait-impl\"><a href=\"#associatedconstant.DEFAULT_MIN_VALUE\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a class=\"constant\">DEFAULT_MIN_VALUE</a>: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> = -2_147_483_648i32</h4></section></summary><div class='docblock'>The minimum value for this type of primitive within the context of color.\nFor floats, the minimum is <code>0.0</code>, whereas the integer types inherit their usual minimum values.</div></details></div></details>","Primitive","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PrimitiveCast-for-i32\" class=\"impl\"><a class=\"src rightside\" href=\"src/devela/num/primitive/cast.rs.html#285\">Source</a><a href=\"#impl-PrimitiveCast-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"devela/num/trait.PrimitiveCast.html\" title=\"trait devela::num::PrimitiveCast\">PrimitiveCast</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_cast_to_u8\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/num/primitive/cast.rs.html#285\">Source</a><a href=\"#method.checked_cast_to_u8\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/num/trait.PrimitiveCast.html#tymethod.checked_cast_to_u8\" class=\"fn\">checked_cast_to_u8</a>(self) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>, <a class=\"struct\" href=\"devela/num/struct.Overflow.html\" title=\"struct devela::num::Overflow\">Overflow</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;u8, Overflow&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Casts <code>self</code> to <code>u8</code> with range check.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_cast_to_u16\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/num/primitive/cast.rs.html#285\">Source</a><a href=\"#method.checked_cast_to_u16\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/num/trait.PrimitiveCast.html#tymethod.checked_cast_to_u16\" class=\"fn\">checked_cast_to_u16</a>(self) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u16.html\">u16</a>, <a class=\"struct\" href=\"devela/num/struct.Overflow.html\" title=\"struct devela::num::Overflow\">Overflow</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;u16, Overflow&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Casts <code>self</code> to <code>u16</code> with range check.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_cast_to_u32\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/num/primitive/cast.rs.html#285\">Source</a><a href=\"#method.checked_cast_to_u32\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/num/trait.PrimitiveCast.html#tymethod.checked_cast_to_u32\" class=\"fn\">checked_cast_to_u32</a>(self) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>, <a class=\"struct\" href=\"devela/num/struct.Overflow.html\" title=\"struct devela::num::Overflow\">Overflow</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;u32, Overflow&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Casts <code>self</code> to <code>u32</code> with range check.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_cast_to_u64\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/num/primitive/cast.rs.html#285\">Source</a><a href=\"#method.checked_cast_to_u64\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/num/trait.PrimitiveCast.html#tymethod.checked_cast_to_u64\" class=\"fn\">checked_cast_to_u64</a>(self) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u64.html\">u64</a>, <a class=\"struct\" href=\"devela/num/struct.Overflow.html\" title=\"struct devela::num::Overflow\">Overflow</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;u64, Overflow&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Casts <code>self</code> to <code>u64</code> with range check.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_cast_to_u128\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/num/primitive/cast.rs.html#285\">Source</a><a href=\"#method.checked_cast_to_u128\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/num/trait.PrimitiveCast.html#tymethod.checked_cast_to_u128\" class=\"fn\">checked_cast_to_u128</a>(self) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u128.html\">u128</a>, <a class=\"struct\" href=\"devela/num/struct.Overflow.html\" title=\"struct devela::num::Overflow\">Overflow</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;u128, Overflow&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Casts <code>self</code> to <code>u128</code> with range check.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_cast_to_usize\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/num/primitive/cast.rs.html#285\">Source</a><a href=\"#method.checked_cast_to_usize\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/num/trait.PrimitiveCast.html#tymethod.checked_cast_to_usize\" class=\"fn\">checked_cast_to_usize</a>(self) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, <a class=\"struct\" href=\"devela/num/struct.Overflow.html\" title=\"struct devela::num::Overflow\">Overflow</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;usize, Overflow&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Casts <code>self</code> to <code>usize</code> with range check.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_cast_to_usize_up\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/num/primitive/cast.rs.html#285\">Source</a><a href=\"#method.checked_cast_to_usize_up\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/num/trait.PrimitiveCast.html#tymethod.checked_cast_to_usize_up\" class=\"fn\">checked_cast_to_usize_up</a>(self) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"type\" href=\"devela/num/type.usize_up.html\" title=\"type devela::num::usize_up\">usize_up</a>, <a class=\"struct\" href=\"devela/num/struct.Overflow.html\" title=\"struct devela::num::Overflow\">Overflow</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;usize_up, Overflow&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Casts <code>self</code> to <code>usize_up</code> with range check.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_cast_to_usize_down\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/num/primitive/cast.rs.html#285\">Source</a><a href=\"#method.checked_cast_to_usize_down\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/num/trait.PrimitiveCast.html#tymethod.checked_cast_to_usize_down\" class=\"fn\">checked_cast_to_usize_down</a>(self) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"type\" href=\"devela/num/type.usize_down.html\" title=\"type devela::num::usize_down\">usize_down</a>, <a class=\"struct\" href=\"devela/num/struct.Overflow.html\" title=\"struct devela::num::Overflow\">Overflow</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;usize_down, Overflow&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Casts <code>self</code> to <code>usize_down</code> with range check.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_cast_to_i8\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/num/primitive/cast.rs.html#285\">Source</a><a href=\"#method.checked_cast_to_i8\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/num/trait.PrimitiveCast.html#tymethod.checked_cast_to_i8\" class=\"fn\">checked_cast_to_i8</a>(self) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i8.html\">i8</a>, <a class=\"struct\" href=\"devela/num/struct.Overflow.html\" title=\"struct devela::num::Overflow\">Overflow</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;i8, Overflow&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Casts <code>self</code> to <code>i8</code> with range check.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_cast_to_i16\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/num/primitive/cast.rs.html#285\">Source</a><a href=\"#method.checked_cast_to_i16\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/num/trait.PrimitiveCast.html#tymethod.checked_cast_to_i16\" class=\"fn\">checked_cast_to_i16</a>(self) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i16.html\">i16</a>, <a class=\"struct\" href=\"devela/num/struct.Overflow.html\" title=\"struct devela::num::Overflow\">Overflow</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;i16, Overflow&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Casts <code>self</code> to <code>i16</code> with range check.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_cast_to_i32\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/num/primitive/cast.rs.html#285\">Source</a><a href=\"#method.checked_cast_to_i32\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/num/trait.PrimitiveCast.html#tymethod.checked_cast_to_i32\" class=\"fn\">checked_cast_to_i32</a>(self) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>, <a class=\"struct\" href=\"devela/num/struct.Overflow.html\" title=\"struct devela::num::Overflow\">Overflow</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;i32, Overflow&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Casts <code>self</code> to <code>i32</code> with range check.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_cast_to_i64\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/num/primitive/cast.rs.html#285\">Source</a><a href=\"#method.checked_cast_to_i64\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/num/trait.PrimitiveCast.html#tymethod.checked_cast_to_i64\" class=\"fn\">checked_cast_to_i64</a>(self) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i64.html\">i64</a>, <a class=\"struct\" href=\"devela/num/struct.Overflow.html\" title=\"struct devela::num::Overflow\">Overflow</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;i64, Overflow&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Casts <code>self</code> to <code>i64</code> with range check.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_cast_to_i128\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/num/primitive/cast.rs.html#285\">Source</a><a href=\"#method.checked_cast_to_i128\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/num/trait.PrimitiveCast.html#tymethod.checked_cast_to_i128\" class=\"fn\">checked_cast_to_i128</a>(self) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i128.html\">i128</a>, <a class=\"struct\" href=\"devela/num/struct.Overflow.html\" title=\"struct devela::num::Overflow\">Overflow</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;i128, Overflow&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Casts <code>self</code> to <code>i128</code> with range check.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_cast_to_isize\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/num/primitive/cast.rs.html#285\">Source</a><a href=\"#method.checked_cast_to_isize\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/num/trait.PrimitiveCast.html#tymethod.checked_cast_to_isize\" class=\"fn\">checked_cast_to_isize</a>(self) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.isize.html\">isize</a>, <a class=\"struct\" href=\"devela/num/struct.Overflow.html\" title=\"struct devela::num::Overflow\">Overflow</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;isize, Overflow&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Casts <code>self</code> to <code>isize</code> with range check.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_cast_to_isize_up\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/num/primitive/cast.rs.html#285\">Source</a><a href=\"#method.checked_cast_to_isize_up\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/num/trait.PrimitiveCast.html#tymethod.checked_cast_to_isize_up\" class=\"fn\">checked_cast_to_isize_up</a>(self) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"type\" href=\"devela/num/type.isize_up.html\" title=\"type devela::num::isize_up\">isize_up</a>, <a class=\"struct\" href=\"devela/num/struct.Overflow.html\" title=\"struct devela::num::Overflow\">Overflow</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;isize_up, Overflow&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Casts <code>self</code> to <code>isize_up</code> with range check.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_cast_to_isize_down\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/num/primitive/cast.rs.html#285\">Source</a><a href=\"#method.checked_cast_to_isize_down\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/num/trait.PrimitiveCast.html#tymethod.checked_cast_to_isize_down\" class=\"fn\">checked_cast_to_isize_down</a>(self) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"type\" href=\"devela/num/type.isize_down.html\" title=\"type devela::num::isize_down\">isize_down</a>, <a class=\"struct\" href=\"devela/num/struct.Overflow.html\" title=\"struct devela::num::Overflow\">Overflow</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;isize_down, Overflow&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Casts <code>self</code> to <code>isize_down</code> with range check.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_cast_to_u8\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/num/primitive/cast.rs.html#285\">Source</a><a href=\"#method.saturating_cast_to_u8\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/num/trait.PrimitiveCast.html#tymethod.saturating_cast_to_u8\" class=\"fn\">saturating_cast_to_u8</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"u8\">ⓘ</a></h4></section></summary><div class='docblock'>Casts <code>self</code> to <code>u8</code> clamping at the numeric bounds.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_cast_to_u16\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/num/primitive/cast.rs.html#285\">Source</a><a href=\"#method.saturating_cast_to_u16\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/num/trait.PrimitiveCast.html#tymethod.saturating_cast_to_u16\" class=\"fn\">saturating_cast_to_u16</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u16.html\">u16</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"u16\">ⓘ</a></h4></section></summary><div class='docblock'>Casts <code>self</code> to <code>u16</code> clamping at the numeric bounds.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_cast_to_u32\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/num/primitive/cast.rs.html#285\">Source</a><a href=\"#method.saturating_cast_to_u32\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/num/trait.PrimitiveCast.html#tymethod.saturating_cast_to_u32\" class=\"fn\">saturating_cast_to_u32</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"u32\">ⓘ</a></h4></section></summary><div class='docblock'>Casts <code>self</code> to <code>u32</code> clamping at the numeric bounds.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_cast_to_u64\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/num/primitive/cast.rs.html#285\">Source</a><a href=\"#method.saturating_cast_to_u64\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/num/trait.PrimitiveCast.html#tymethod.saturating_cast_to_u64\" class=\"fn\">saturating_cast_to_u64</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u64.html\">u64</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"u64\">ⓘ</a></h4></section></summary><div class='docblock'>Casts <code>self</code> to <code>u64</code> clamping at the numeric bounds.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_cast_to_u128\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/num/primitive/cast.rs.html#285\">Source</a><a href=\"#method.saturating_cast_to_u128\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/num/trait.PrimitiveCast.html#tymethod.saturating_cast_to_u128\" class=\"fn\">saturating_cast_to_u128</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u128.html\">u128</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"u128\">ⓘ</a></h4></section></summary><div class='docblock'>Casts <code>self</code> to <code>u128</code> clamping at the numeric bounds.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_cast_to_usize\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/num/primitive/cast.rs.html#285\">Source</a><a href=\"#method.saturating_cast_to_usize\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/num/trait.PrimitiveCast.html#tymethod.saturating_cast_to_usize\" class=\"fn\">saturating_cast_to_usize</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"usize\">ⓘ</a></h4></section></summary><div class='docblock'>Casts <code>self</code> to <code>usize</code> clamping at the numeric bounds.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_cast_to_usize_up\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/num/primitive/cast.rs.html#285\">Source</a><a href=\"#method.saturating_cast_to_usize_up\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/num/trait.PrimitiveCast.html#tymethod.saturating_cast_to_usize_up\" class=\"fn\">saturating_cast_to_usize_up</a>(self) -&gt; <a class=\"type\" href=\"devela/num/type.usize_up.html\" title=\"type devela::num::usize_up\">usize_up</a></h4></section></summary><div class='docblock'>Casts <code>self</code> to <code>usize_up</code> clamping at the numeric bounds.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_cast_to_usize_down\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/num/primitive/cast.rs.html#285\">Source</a><a href=\"#method.saturating_cast_to_usize_down\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/num/trait.PrimitiveCast.html#tymethod.saturating_cast_to_usize_down\" class=\"fn\">saturating_cast_to_usize_down</a>(self) -&gt; <a class=\"type\" href=\"devela/num/type.usize_down.html\" title=\"type devela::num::usize_down\">usize_down</a></h4></section></summary><div class='docblock'>Casts <code>self</code> to <code>usize_down</code> clamping at the numeric bounds.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_cast_to_i8\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/num/primitive/cast.rs.html#285\">Source</a><a href=\"#method.saturating_cast_to_i8\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/num/trait.PrimitiveCast.html#tymethod.saturating_cast_to_i8\" class=\"fn\">saturating_cast_to_i8</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i8.html\">i8</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i8\">ⓘ</a></h4></section></summary><div class='docblock'>Casts <code>self</code> to <code>i8</code> clamping at the numeric bounds.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_cast_to_i16\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/num/primitive/cast.rs.html#285\">Source</a><a href=\"#method.saturating_cast_to_i16\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/num/trait.PrimitiveCast.html#tymethod.saturating_cast_to_i16\" class=\"fn\">saturating_cast_to_i16</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i16.html\">i16</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i16\">ⓘ</a></h4></section></summary><div class='docblock'>Casts <code>self</code> to <code>i16</code> clamping at the numeric bounds.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_cast_to_i32\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/num/primitive/cast.rs.html#285\">Source</a><a href=\"#method.saturating_cast_to_i32\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/num/trait.PrimitiveCast.html#tymethod.saturating_cast_to_i32\" class=\"fn\">saturating_cast_to_i32</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a></h4></section></summary><div class='docblock'>Casts <code>self</code> to <code>i32</code> clamping at the numeric bounds.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_cast_to_i64\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/num/primitive/cast.rs.html#285\">Source</a><a href=\"#method.saturating_cast_to_i64\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/num/trait.PrimitiveCast.html#tymethod.saturating_cast_to_i64\" class=\"fn\">saturating_cast_to_i64</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i64.html\">i64</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i64\">ⓘ</a></h4></section></summary><div class='docblock'>Casts <code>self</code> to <code>i64</code> clamping at the numeric bounds.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_cast_to_i128\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/num/primitive/cast.rs.html#285\">Source</a><a href=\"#method.saturating_cast_to_i128\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/num/trait.PrimitiveCast.html#tymethod.saturating_cast_to_i128\" class=\"fn\">saturating_cast_to_i128</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i128.html\">i128</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i128\">ⓘ</a></h4></section></summary><div class='docblock'>Casts <code>self</code> to <code>i128</code> clamping at the numeric bounds.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_cast_to_isize\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/num/primitive/cast.rs.html#285\">Source</a><a href=\"#method.saturating_cast_to_isize\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/num/trait.PrimitiveCast.html#tymethod.saturating_cast_to_isize\" class=\"fn\">saturating_cast_to_isize</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.isize.html\">isize</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"isize\">ⓘ</a></h4></section></summary><div class='docblock'>Casts <code>self</code> to <code>isize</code> clamping at the numeric bounds.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_cast_to_isize_up\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/num/primitive/cast.rs.html#285\">Source</a><a href=\"#method.saturating_cast_to_isize_up\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/num/trait.PrimitiveCast.html#tymethod.saturating_cast_to_isize_up\" class=\"fn\">saturating_cast_to_isize_up</a>(self) -&gt; <a class=\"type\" href=\"devela/num/type.isize_up.html\" title=\"type devela::num::isize_up\">isize_up</a></h4></section></summary><div class='docblock'>Casts <code>self</code> to <code>isize_up</code> clamping at the numeric bounds.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_cast_to_isize_down\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/num/primitive/cast.rs.html#285\">Source</a><a href=\"#method.saturating_cast_to_isize_down\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/num/trait.PrimitiveCast.html#tymethod.saturating_cast_to_isize_down\" class=\"fn\">saturating_cast_to_isize_down</a>(self) -&gt; <a class=\"type\" href=\"devela/num/type.isize_down.html\" title=\"type devela::num::isize_down\">isize_down</a></h4></section></summary><div class='docblock'>Casts <code>self</code> to <code>isize_down</code> clamping at the numeric bounds.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_cast_to_u8\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/num/primitive/cast.rs.html#285\">Source</a><a href=\"#method.wrapping_cast_to_u8\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/num/trait.PrimitiveCast.html#tymethod.wrapping_cast_to_u8\" class=\"fn\">wrapping_cast_to_u8</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"u8\">ⓘ</a></h4></section></summary><div class='docblock'>Casts <code>self</code> to <code>u8</code> wrapping at the numeric bounds.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_cast_to_u16\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/num/primitive/cast.rs.html#285\">Source</a><a href=\"#method.wrapping_cast_to_u16\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/num/trait.PrimitiveCast.html#tymethod.wrapping_cast_to_u16\" class=\"fn\">wrapping_cast_to_u16</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u16.html\">u16</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"u16\">ⓘ</a></h4></section></summary><div class='docblock'>Casts <code>self</code> to <code>u16</code> wrapping at the numeric bounds.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_cast_to_u32\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/num/primitive/cast.rs.html#285\">Source</a><a href=\"#method.wrapping_cast_to_u32\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/num/trait.PrimitiveCast.html#tymethod.wrapping_cast_to_u32\" class=\"fn\">wrapping_cast_to_u32</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"u32\">ⓘ</a></h4></section></summary><div class='docblock'>Casts <code>self</code> to <code>u32</code> wrapping at the numeric bounds.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_cast_to_u64\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/num/primitive/cast.rs.html#285\">Source</a><a href=\"#method.wrapping_cast_to_u64\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/num/trait.PrimitiveCast.html#tymethod.wrapping_cast_to_u64\" class=\"fn\">wrapping_cast_to_u64</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u64.html\">u64</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"u64\">ⓘ</a></h4></section></summary><div class='docblock'>Casts <code>self</code> to <code>u64</code> wrapping at the numeric bounds.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_cast_to_u128\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/num/primitive/cast.rs.html#285\">Source</a><a href=\"#method.wrapping_cast_to_u128\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/num/trait.PrimitiveCast.html#tymethod.wrapping_cast_to_u128\" class=\"fn\">wrapping_cast_to_u128</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u128.html\">u128</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"u128\">ⓘ</a></h4></section></summary><div class='docblock'>Casts <code>self</code> to <code>u128</code> wrapping at the numeric bounds.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_cast_to_usize\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/num/primitive/cast.rs.html#285\">Source</a><a href=\"#method.wrapping_cast_to_usize\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/num/trait.PrimitiveCast.html#tymethod.wrapping_cast_to_usize\" class=\"fn\">wrapping_cast_to_usize</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"usize\">ⓘ</a></h4></section></summary><div class='docblock'>Casts <code>self</code> to <code>usize</code> wrapping at the numeric bounds.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_cast_to_usize_up\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/num/primitive/cast.rs.html#285\">Source</a><a href=\"#method.wrapping_cast_to_usize_up\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/num/trait.PrimitiveCast.html#tymethod.wrapping_cast_to_usize_up\" class=\"fn\">wrapping_cast_to_usize_up</a>(self) -&gt; <a class=\"type\" href=\"devela/num/type.usize_up.html\" title=\"type devela::num::usize_up\">usize_up</a></h4></section></summary><div class='docblock'>Casts <code>self</code> to <code>usize_up</code> wrapping at the numeric bounds.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_cast_to_usize_down\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/num/primitive/cast.rs.html#285\">Source</a><a href=\"#method.wrapping_cast_to_usize_down\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/num/trait.PrimitiveCast.html#tymethod.wrapping_cast_to_usize_down\" class=\"fn\">wrapping_cast_to_usize_down</a>(self) -&gt; <a class=\"type\" href=\"devela/num/type.usize_down.html\" title=\"type devela::num::usize_down\">usize_down</a></h4></section></summary><div class='docblock'>Casts <code>self</code> to <code>usize_down</code> wrapping at the numeric bounds.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_cast_to_i8\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/num/primitive/cast.rs.html#285\">Source</a><a href=\"#method.wrapping_cast_to_i8\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/num/trait.PrimitiveCast.html#tymethod.wrapping_cast_to_i8\" class=\"fn\">wrapping_cast_to_i8</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i8.html\">i8</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i8\">ⓘ</a></h4></section></summary><div class='docblock'>Casts <code>self</code> to <code>i8</code> wrapping at the numeric bounds.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_cast_to_i16\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/num/primitive/cast.rs.html#285\">Source</a><a href=\"#method.wrapping_cast_to_i16\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/num/trait.PrimitiveCast.html#tymethod.wrapping_cast_to_i16\" class=\"fn\">wrapping_cast_to_i16</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i16.html\">i16</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i16\">ⓘ</a></h4></section></summary><div class='docblock'>Casts <code>self</code> to <code>i16</code> wrapping at the numeric bounds.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_cast_to_i32\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/num/primitive/cast.rs.html#285\">Source</a><a href=\"#method.wrapping_cast_to_i32\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/num/trait.PrimitiveCast.html#tymethod.wrapping_cast_to_i32\" class=\"fn\">wrapping_cast_to_i32</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a></h4></section></summary><div class='docblock'>Casts <code>self</code> to <code>i32</code> wrapping at the numeric bounds.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_cast_to_i64\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/num/primitive/cast.rs.html#285\">Source</a><a href=\"#method.wrapping_cast_to_i64\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/num/trait.PrimitiveCast.html#tymethod.wrapping_cast_to_i64\" class=\"fn\">wrapping_cast_to_i64</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i64.html\">i64</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i64\">ⓘ</a></h4></section></summary><div class='docblock'>Casts <code>self</code> to <code>i64</code> wrapping at the numeric bounds.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_cast_to_i128\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/num/primitive/cast.rs.html#285\">Source</a><a href=\"#method.wrapping_cast_to_i128\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/num/trait.PrimitiveCast.html#tymethod.wrapping_cast_to_i128\" class=\"fn\">wrapping_cast_to_i128</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i128.html\">i128</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i128\">ⓘ</a></h4></section></summary><div class='docblock'>Casts <code>self</code> to <code>i128</code> wrapping at the numeric bounds.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_cast_to_isize\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/num/primitive/cast.rs.html#285\">Source</a><a href=\"#method.wrapping_cast_to_isize\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/num/trait.PrimitiveCast.html#tymethod.wrapping_cast_to_isize\" class=\"fn\">wrapping_cast_to_isize</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.isize.html\">isize</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"isize\">ⓘ</a></h4></section></summary><div class='docblock'>Casts <code>self</code> to <code>isize</code> wrapping at the numeric bounds.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_cast_to_isize_up\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/num/primitive/cast.rs.html#285\">Source</a><a href=\"#method.wrapping_cast_to_isize_up\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/num/trait.PrimitiveCast.html#tymethod.wrapping_cast_to_isize_up\" class=\"fn\">wrapping_cast_to_isize_up</a>(self) -&gt; <a class=\"type\" href=\"devela/num/type.isize_up.html\" title=\"type devela::num::isize_up\">isize_up</a></h4></section></summary><div class='docblock'>Casts <code>self</code> to <code>isize_up</code> wrapping at the numeric bounds.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_cast_to_isize_down\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/num/primitive/cast.rs.html#285\">Source</a><a href=\"#method.wrapping_cast_to_isize_down\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/num/trait.PrimitiveCast.html#tymethod.wrapping_cast_to_isize_down\" class=\"fn\">wrapping_cast_to_isize_down</a>(self) -&gt; <a class=\"type\" href=\"devela/num/type.isize_down.html\" title=\"type devela::num::isize_down\">isize_down</a></h4></section></summary><div class='docblock'>Casts <code>self</code> to <code>isize_down</code> wrapping at the numeric bounds.</div></details></div></details>","PrimitiveCast","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-RangePattern-for-i32\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/pat.rs.html#59-62\">Source</a><a href=\"#impl-RangePattern-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/pat/trait.RangePattern.html\" title=\"trait core::pat::RangePattern\">RangePattern</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedconstant.MIN\" class=\"associatedconstant trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/pat.rs.html#59-62\">Source</a><a href=\"#associatedconstant.MIN\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a href=\"https://doc.rust-lang.org/nightly/core/pat/trait.RangePattern.html#associatedconstant.MIN\" class=\"constant\">MIN</a>: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> = -2_147_483_648i32</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>pattern_type_range_trait</code>)</span></div></span><div class='docblock'>Trait version of the inherent <code>MIN</code> assoc const.</div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.MAX\" class=\"associatedconstant trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/pat.rs.html#59-62\">Source</a><a href=\"#associatedconstant.MAX\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a href=\"https://doc.rust-lang.org/nightly/core/pat/trait.RangePattern.html#associatedconstant.MAX\" class=\"constant\">MAX</a>: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> = 2_147_483_647i32</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>pattern_type_range_trait</code>)</span></div></span><div class='docblock'>Trait version of the inherent <code>MIN</code> assoc const.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.sub_one\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/pat.rs.html#59-62\">Source</a><a href=\"#method.sub_one\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/pat/trait.RangePattern.html#tymethod.sub_one\" class=\"fn\">sub_one</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>pattern_type_range_trait</code>)</span></div></span><div class='docblock'>A compile-time helper to subtract 1 for exclusive ranges.</div></details></div></details>","RangePattern","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-RawSample-for-i32\" class=\"impl\"><a href=\"#impl-RawSample-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl RawSample for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.RawType\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.RawType\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">RawType</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h4></section></summary><div class='docblock'>The <code>RawType</code> is a primitive data type, or fixed-size byte array, that is the final binary\nrepresentation of the sample when written out to a byte-buffer.</div></details><section id=\"method.into_raw_sample\" class=\"method trait-impl\"><a href=\"#method.into_raw_sample\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">into_raw_sample</a>(self) -&gt; &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> as RawSample&gt;::RawType <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&lt;i32 as RawSample&gt;::RawType\">ⓘ</a></h4></section></div></details>","RawSample","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Rem%3C%26BigInt%3E-for-i32\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-bigint/0.4/src/num_bigint/bigint/division.rs.html#352\">Source</a><a href=\"#impl-Rem%3C%26BigInt%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"devela/all/trait.Rem.html\" title=\"trait devela::all::Rem\">Rem</a>&lt;&amp;<a class=\"struct\" href=\"https://docs.rs/num-bigint/0.4/num_bigint/bigint/struct.BigInt.html\" title=\"struct num_bigint::bigint::BigInt\">BigInt</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-bigint/0.4/src/num_bigint/bigint/division.rs.html#352\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"devela/all/trait.Rem.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"https://docs.rs/num-bigint/0.4/num_bigint/bigint/struct.BigInt.html\" title=\"struct num_bigint::bigint::BigInt\">BigInt</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>%</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.rem\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-bigint/0.4/src/num_bigint/bigint/division.rs.html#352\">Source</a><a href=\"#method.rem\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Rem.html#tymethod.rem\" class=\"fn\">rem</a>(self, other: &amp;<a class=\"struct\" href=\"https://docs.rs/num-bigint/0.4/num_bigint/bigint/struct.BigInt.html\" title=\"struct num_bigint::bigint::BigInt\">BigInt</a>) -&gt; <a class=\"struct\" href=\"https://docs.rs/num-bigint/0.4/num_bigint/bigint/struct.BigInt.html\" title=\"struct num_bigint::bigint::BigInt\">BigInt</a></h4></section></summary><div class='docblock'>Performs the <code>%</code> operation. <a href=\"devela/all/trait.Rem.html#tymethod.rem\">Read more</a></div></details></div></details>","Rem<&BigInt>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Rem%3C%26IVec2%3E-for-i32\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/glam/0.30.5/src/glam/i32/ivec2.rs.html#1466\">Source</a><a href=\"#impl-Rem%3C%26IVec2%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"devela/all/trait.Rem.html\" title=\"trait devela::all::Rem\">Rem</a>&lt;&amp;<a class=\"struct\" href=\"https://docs.rs/glam/0.30.5/glam/i32/ivec2/struct.IVec2.html\" title=\"struct glam::i32::ivec2::IVec2\">IVec2</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/glam/0.30.5/src/glam/i32/ivec2.rs.html#1467\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"devela/all/trait.Rem.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"https://docs.rs/glam/0.30.5/glam/i32/ivec2/struct.IVec2.html\" title=\"struct glam::i32::ivec2::IVec2\">IVec2</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>%</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.rem\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/glam/0.30.5/src/glam/i32/ivec2.rs.html#1469\">Source</a><a href=\"#method.rem\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Rem.html#tymethod.rem\" class=\"fn\">rem</a>(self, rhs: &amp;<a class=\"struct\" href=\"https://docs.rs/glam/0.30.5/glam/i32/ivec2/struct.IVec2.html\" title=\"struct glam::i32::ivec2::IVec2\">IVec2</a>) -&gt; <a class=\"struct\" href=\"https://docs.rs/glam/0.30.5/glam/i32/ivec2/struct.IVec2.html\" title=\"struct glam::i32::ivec2::IVec2\">IVec2</a></h4></section></summary><div class='docblock'>Performs the <code>%</code> operation. <a href=\"devela/all/trait.Rem.html#tymethod.rem\">Read more</a></div></details></div></details>","Rem<&IVec2>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Rem%3C%26IVec3%3E-for-i32\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/glam/0.30.5/src/glam/i32/ivec3.rs.html#1581\">Source</a><a href=\"#impl-Rem%3C%26IVec3%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"devela/all/trait.Rem.html\" title=\"trait devela::all::Rem\">Rem</a>&lt;&amp;<a class=\"struct\" href=\"https://docs.rs/glam/0.30.5/glam/i32/ivec3/struct.IVec3.html\" title=\"struct glam::i32::ivec3::IVec3\">IVec3</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/glam/0.30.5/src/glam/i32/ivec3.rs.html#1582\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"devela/all/trait.Rem.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"https://docs.rs/glam/0.30.5/glam/i32/ivec3/struct.IVec3.html\" title=\"struct glam::i32::ivec3::IVec3\">IVec3</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>%</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.rem\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/glam/0.30.5/src/glam/i32/ivec3.rs.html#1584\">Source</a><a href=\"#method.rem\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Rem.html#tymethod.rem\" class=\"fn\">rem</a>(self, rhs: &amp;<a class=\"struct\" href=\"https://docs.rs/glam/0.30.5/glam/i32/ivec3/struct.IVec3.html\" title=\"struct glam::i32::ivec3::IVec3\">IVec3</a>) -&gt; <a class=\"struct\" href=\"https://docs.rs/glam/0.30.5/glam/i32/ivec3/struct.IVec3.html\" title=\"struct glam::i32::ivec3::IVec3\">IVec3</a></h4></section></summary><div class='docblock'>Performs the <code>%</code> operation. <a href=\"devela/all/trait.Rem.html#tymethod.rem\">Read more</a></div></details></div></details>","Rem<&IVec3>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Rem%3C%26IVec4%3E-for-i32\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/glam/0.30.5/src/glam/i32/ivec4.rs.html#1686\">Source</a><a href=\"#impl-Rem%3C%26IVec4%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"devela/all/trait.Rem.html\" title=\"trait devela::all::Rem\">Rem</a>&lt;&amp;<a class=\"struct\" href=\"https://docs.rs/glam/0.30.5/glam/i32/ivec4/struct.IVec4.html\" title=\"struct glam::i32::ivec4::IVec4\">IVec4</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/glam/0.30.5/src/glam/i32/ivec4.rs.html#1687\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"devela/all/trait.Rem.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"https://docs.rs/glam/0.30.5/glam/i32/ivec4/struct.IVec4.html\" title=\"struct glam::i32::ivec4::IVec4\">IVec4</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>%</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.rem\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/glam/0.30.5/src/glam/i32/ivec4.rs.html#1689\">Source</a><a href=\"#method.rem\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Rem.html#tymethod.rem\" class=\"fn\">rem</a>(self, rhs: &amp;<a class=\"struct\" href=\"https://docs.rs/glam/0.30.5/glam/i32/ivec4/struct.IVec4.html\" title=\"struct glam::i32::ivec4::IVec4\">IVec4</a>) -&gt; <a class=\"struct\" href=\"https://docs.rs/glam/0.30.5/glam/i32/ivec4/struct.IVec4.html\" title=\"struct glam::i32::ivec4::IVec4\">IVec4</a></h4></section></summary><div class='docblock'>Performs the <code>%</code> operation. <a href=\"devela/all/trait.Rem.html#tymethod.rem\">Read more</a></div></details></div></details>","Rem<&IVec4>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Rem%3C%26i32%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/143802\" title=\"Tracking issue for const_ops\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/arith.rs.html#618-621\">Source</a></span><a href=\"#impl-Rem%3C%26i32%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"devela/all/trait.Rem.html\" title=\"trait devela::all::Rem\">Rem</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/arith.rs.html#618-621\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"devela/all/trait.Rem.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> as <a class=\"trait\" href=\"devela/all/trait.Rem.html\" title=\"trait devela::all::Rem\">Rem</a>&gt;::<a class=\"associatedtype\" href=\"devela/all/trait.Rem.html#associatedtype.Output\" title=\"type devela::all::Rem::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>%</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.rem\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/arith.rs.html#618-621\">Source</a><a href=\"#method.rem\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Rem.html#tymethod.rem\" class=\"fn\">rem</a>(self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>) -&gt; &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> as <a class=\"trait\" href=\"devela/all/trait.Rem.html\" title=\"trait devela::all::Rem\">Rem</a>&gt;::<a class=\"associatedtype\" href=\"devela/all/trait.Rem.html#associatedtype.Output\" title=\"type devela::all::Rem::Output\">Output</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&lt;i32 as Rem&gt;::Output\">ⓘ</a></h4></section></summary><div class='docblock'>Performs the <code>%</code> operation. <a href=\"devela/all/trait.Rem.html#tymethod.rem\">Read more</a></div></details></div></details>","Rem<&i32>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Rem%3CBigInt%3E-for-i32\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-bigint/0.4/src/num_bigint/bigint/division.rs.html#372\">Source</a><a href=\"#impl-Rem%3CBigInt%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"devela/all/trait.Rem.html\" title=\"trait devela::all::Rem\">Rem</a>&lt;<a class=\"struct\" href=\"https://docs.rs/num-bigint/0.4/num_bigint/bigint/struct.BigInt.html\" title=\"struct num_bigint::bigint::BigInt\">BigInt</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-bigint/0.4/src/num_bigint/bigint/division.rs.html#373\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"devela/all/trait.Rem.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"https://docs.rs/num-bigint/0.4/num_bigint/bigint/struct.BigInt.html\" title=\"struct num_bigint::bigint::BigInt\">BigInt</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>%</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.rem\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-bigint/0.4/src/num_bigint/bigint/division.rs.html#376\">Source</a><a href=\"#method.rem\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Rem.html#tymethod.rem\" class=\"fn\">rem</a>(self, other: <a class=\"struct\" href=\"https://docs.rs/num-bigint/0.4/num_bigint/bigint/struct.BigInt.html\" title=\"struct num_bigint::bigint::BigInt\">BigInt</a>) -&gt; <a class=\"struct\" href=\"https://docs.rs/num-bigint/0.4/num_bigint/bigint/struct.BigInt.html\" title=\"struct num_bigint::bigint::BigInt\">BigInt</a></h4></section></summary><div class='docblock'>Performs the <code>%</code> operation. <a href=\"devela/all/trait.Rem.html#tymethod.rem\">Read more</a></div></details></div></details>","Rem<BigInt>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Rem%3CDivisor%3Ci32%3E%3E-for-i32\" class=\"impl\"><a href=\"#impl-Rem%3CDivisor%3Ci32%3E%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"devela/all/trait.Rem.html\" title=\"trait devela::all::Rem\">Rem</a>&lt;<a class=\"struct\" href=\"devela/num/struct.Divisor.html\" title=\"struct devela::num::Divisor\">Divisor</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>&gt;&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"devela/all/trait.Rem.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>%</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.rem\" class=\"method trait-impl\"><a href=\"#method.rem\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Rem.html#tymethod.rem\" class=\"fn\">rem</a>(self, rhs: <a class=\"struct\" href=\"devela/num/struct.Divisor.html\" title=\"struct devela::num::Divisor\">Divisor</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>&gt;) -&gt; &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> as <a class=\"trait\" href=\"devela/all/trait.Rem.html\" title=\"trait devela::all::Rem\">Rem</a>&lt;<a class=\"struct\" href=\"devela/num/struct.Divisor.html\" title=\"struct devela::num::Divisor\">Divisor</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"devela/all/trait.Rem.html#associatedtype.Output\" title=\"type devela::all::Rem::Output\">Output</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&lt;i32 as Rem&lt;Divisor&lt;i32&gt;&gt;&gt;::Output\">ⓘ</a></h4></section></summary><div class='docblock'>Performs the <code>%</code> operation. <a href=\"devela/all/trait.Rem.html#tymethod.rem\">Read more</a></div></details></div></details>","Rem<Divisor<i32>>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Rem%3CIVec2%3E-for-i32\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/glam/0.30.5/src/glam/i32/ivec2.rs.html#1455\">Source</a><a href=\"#impl-Rem%3CIVec2%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"devela/all/trait.Rem.html\" title=\"trait devela::all::Rem\">Rem</a>&lt;<a class=\"struct\" href=\"https://docs.rs/glam/0.30.5/glam/i32/ivec2/struct.IVec2.html\" title=\"struct glam::i32::ivec2::IVec2\">IVec2</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/glam/0.30.5/src/glam/i32/ivec2.rs.html#1456\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"devela/all/trait.Rem.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"https://docs.rs/glam/0.30.5/glam/i32/ivec2/struct.IVec2.html\" title=\"struct glam::i32::ivec2::IVec2\">IVec2</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>%</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.rem\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/glam/0.30.5/src/glam/i32/ivec2.rs.html#1458\">Source</a><a href=\"#method.rem\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Rem.html#tymethod.rem\" class=\"fn\">rem</a>(self, rhs: <a class=\"struct\" href=\"https://docs.rs/glam/0.30.5/glam/i32/ivec2/struct.IVec2.html\" title=\"struct glam::i32::ivec2::IVec2\">IVec2</a>) -&gt; <a class=\"struct\" href=\"https://docs.rs/glam/0.30.5/glam/i32/ivec2/struct.IVec2.html\" title=\"struct glam::i32::ivec2::IVec2\">IVec2</a></h4></section></summary><div class='docblock'>Performs the <code>%</code> operation. <a href=\"devela/all/trait.Rem.html#tymethod.rem\">Read more</a></div></details></div></details>","Rem<IVec2>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Rem%3CIVec3%3E-for-i32\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/glam/0.30.5/src/glam/i32/ivec3.rs.html#1569\">Source</a><a href=\"#impl-Rem%3CIVec3%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"devela/all/trait.Rem.html\" title=\"trait devela::all::Rem\">Rem</a>&lt;<a class=\"struct\" href=\"https://docs.rs/glam/0.30.5/glam/i32/ivec3/struct.IVec3.html\" title=\"struct glam::i32::ivec3::IVec3\">IVec3</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/glam/0.30.5/src/glam/i32/ivec3.rs.html#1570\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"devela/all/trait.Rem.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"https://docs.rs/glam/0.30.5/glam/i32/ivec3/struct.IVec3.html\" title=\"struct glam::i32::ivec3::IVec3\">IVec3</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>%</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.rem\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/glam/0.30.5/src/glam/i32/ivec3.rs.html#1572\">Source</a><a href=\"#method.rem\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Rem.html#tymethod.rem\" class=\"fn\">rem</a>(self, rhs: <a class=\"struct\" href=\"https://docs.rs/glam/0.30.5/glam/i32/ivec3/struct.IVec3.html\" title=\"struct glam::i32::ivec3::IVec3\">IVec3</a>) -&gt; <a class=\"struct\" href=\"https://docs.rs/glam/0.30.5/glam/i32/ivec3/struct.IVec3.html\" title=\"struct glam::i32::ivec3::IVec3\">IVec3</a></h4></section></summary><div class='docblock'>Performs the <code>%</code> operation. <a href=\"devela/all/trait.Rem.html#tymethod.rem\">Read more</a></div></details></div></details>","Rem<IVec3>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Rem%3CIVec4%3E-for-i32\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/glam/0.30.5/src/glam/i32/ivec4.rs.html#1673\">Source</a><a href=\"#impl-Rem%3CIVec4%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"devela/all/trait.Rem.html\" title=\"trait devela::all::Rem\">Rem</a>&lt;<a class=\"struct\" href=\"https://docs.rs/glam/0.30.5/glam/i32/ivec4/struct.IVec4.html\" title=\"struct glam::i32::ivec4::IVec4\">IVec4</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/glam/0.30.5/src/glam/i32/ivec4.rs.html#1674\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"devela/all/trait.Rem.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"https://docs.rs/glam/0.30.5/glam/i32/ivec4/struct.IVec4.html\" title=\"struct glam::i32::ivec4::IVec4\">IVec4</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>%</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.rem\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/glam/0.30.5/src/glam/i32/ivec4.rs.html#1676\">Source</a><a href=\"#method.rem\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Rem.html#tymethod.rem\" class=\"fn\">rem</a>(self, rhs: <a class=\"struct\" href=\"https://docs.rs/glam/0.30.5/glam/i32/ivec4/struct.IVec4.html\" title=\"struct glam::i32::ivec4::IVec4\">IVec4</a>) -&gt; <a class=\"struct\" href=\"https://docs.rs/glam/0.30.5/glam/i32/ivec4/struct.IVec4.html\" title=\"struct glam::i32::ivec4::IVec4\">IVec4</a></h4></section></summary><div class='docblock'>Performs the <code>%</code> operation. <a href=\"devela/all/trait.Rem.html#tymethod.rem\">Read more</a></div></details></div></details>","Rem<IVec4>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Rem-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/143802\" title=\"Tracking issue for const_ops\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/arith.rs.html#618-621\">Source</a></span><a href=\"#impl-Rem-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"devela/all/trait.Rem.html\" title=\"trait devela::all::Rem\">Rem</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3><div class=\"docblock\"><p>This operation satisfies <code>n % d == n - (n / d) * d</code>. The\nresult has the same sign as the left operand.</p>\n</div></section></summary><div class=\"docblock\"><h4 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h4>\n<p>This operation will panic if <code>other == 0</code> or if <code>self / other</code> results in overflow.</p>\n</div><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/arith.rs.html#618-621\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"devela/all/trait.Rem.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>%</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.rem\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/arith.rs.html#618-621\">Source</a><a href=\"#method.rem\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Rem.html#tymethod.rem\" class=\"fn\">rem</a>(self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a></h4></section></summary><div class='docblock'>Performs the <code>%</code> operation. <a href=\"devela/all/trait.Rem.html#tymethod.rem\">Read more</a></div></details></div></details>","Rem","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-RemAssign%3C%26BigUint%3E-for-i32\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-bigint/0.4/src/num_bigint/biguint/division.rs.html#598\">Source</a><a href=\"#impl-RemAssign%3C%26BigUint%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"devela/all/trait.RemAssign.html\" title=\"trait devela::all::RemAssign\">RemAssign</a>&lt;&amp;<a class=\"struct\" href=\"https://docs.rs/num-bigint/0.4/num_bigint/biguint/struct.BigUint.html\" title=\"struct num_bigint::biguint::BigUint\">BigUint</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.rem_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-bigint/0.4/src/num_bigint/biguint/division.rs.html#598\">Source</a><a href=\"#method.rem_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.RemAssign.html#tymethod.rem_assign\" class=\"fn\">rem_assign</a>(&amp;mut self, other: &amp;<a class=\"struct\" href=\"https://docs.rs/num-bigint/0.4/num_bigint/biguint/struct.BigUint.html\" title=\"struct num_bigint::biguint::BigUint\">BigUint</a>)</h4></section></summary><div class='docblock'>Performs the <code>%=</code> operation. <a href=\"devela/all/trait.RemAssign.html#tymethod.rem_assign\">Read more</a></div></details></div></details>","RemAssign<&BigUint>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-RemAssign%3C%26i32%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0, const unstable\">1.22.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/143802\" title=\"Tracking issue for const_ops\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/arith.rs.html#1070\">Source</a></span><a href=\"#impl-RemAssign%3C%26i32%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"devela/all/trait.RemAssign.html\" title=\"trait devela::all::RemAssign\">RemAssign</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.rem_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/arith.rs.html#1070\">Source</a><a href=\"#method.rem_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.RemAssign.html#tymethod.rem_assign\" class=\"fn\">rem_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>)</h4></section></summary><div class='docblock'>Performs the <code>%=</code> operation. <a href=\"devela/all/trait.RemAssign.html#tymethod.rem_assign\">Read more</a></div></details></div></details>","RemAssign<&i32>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-RemAssign%3CBigUint%3E-for-i32\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-bigint/0.4/src/num_bigint/biguint/division.rs.html#598\">Source</a><a href=\"#impl-RemAssign%3CBigUint%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"devela/all/trait.RemAssign.html\" title=\"trait devela::all::RemAssign\">RemAssign</a>&lt;<a class=\"struct\" href=\"https://docs.rs/num-bigint/0.4/num_bigint/biguint/struct.BigUint.html\" title=\"struct num_bigint::biguint::BigUint\">BigUint</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.rem_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-bigint/0.4/src/num_bigint/biguint/division.rs.html#598\">Source</a><a href=\"#method.rem_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.RemAssign.html#tymethod.rem_assign\" class=\"fn\">rem_assign</a>(&amp;mut self, other: <a class=\"struct\" href=\"https://docs.rs/num-bigint/0.4/num_bigint/biguint/struct.BigUint.html\" title=\"struct num_bigint::biguint::BigUint\">BigUint</a>)</h4></section></summary><div class='docblock'>Performs the <code>%=</code> operation. <a href=\"devela/all/trait.RemAssign.html#tymethod.rem_assign\">Read more</a></div></details></div></details>","RemAssign<BigUint>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-RemAssign%3CDivisor%3Ci32%3E%3E-for-i32\" class=\"impl\"><a href=\"#impl-RemAssign%3CDivisor%3Ci32%3E%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"devela/all/trait.RemAssign.html\" title=\"trait devela::all::RemAssign\">RemAssign</a>&lt;<a class=\"struct\" href=\"devela/num/struct.Divisor.html\" title=\"struct devela::num::Divisor\">Divisor</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>&gt;&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.rem_assign\" class=\"method trait-impl\"><a href=\"#method.rem_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.RemAssign.html#tymethod.rem_assign\" class=\"fn\">rem_assign</a>(&amp;mut self, rhs: <a class=\"struct\" href=\"devela/num/struct.Divisor.html\" title=\"struct devela::num::Divisor\">Divisor</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>&gt;)</h4></section></summary><div class='docblock'>Performs the <code>%=</code> operation. <a href=\"devela/all/trait.RemAssign.html#tymethod.rem_assign\">Read more</a></div></details></div></details>","RemAssign<Divisor<i32>>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-RemAssign-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0, const unstable\">1.8.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/143802\" title=\"Tracking issue for const_ops\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/arith.rs.html#1070\">Source</a></span><a href=\"#impl-RemAssign-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"devela/all/trait.RemAssign.html\" title=\"trait devela::all::RemAssign\">RemAssign</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.rem_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/arith.rs.html#1070\">Source</a><a href=\"#method.rem_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.RemAssign.html#tymethod.rem_assign\" class=\"fn\">rem_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>)</h4></section></summary><div class='docblock'>Performs the <code>%=</code> operation. <a href=\"devela/all/trait.RemAssign.html#tymethod.rem_assign\">Read more</a></div></details></div></details>","RemAssign","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Roots-for-i32\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-integer/0.1/src/num_integer/roots.rs.html#165\">Source</a><a href=\"#impl-Roots-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://docs.rs/num-integer/0.1/num_integer/roots/trait.Roots.html\" title=\"trait num_integer::roots::Roots\">Roots</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.nth_root\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-integer/0.1/src/num_integer/roots.rs.html#165\">Source</a><a href=\"#method.nth_root\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-integer/0.1/num_integer/roots/trait.Roots.html#tymethod.nth_root\" class=\"fn\">nth_root</a>(&amp;self, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a></h4></section></summary><div class='docblock'>Returns the truncated principal <code>n</code>th root of an integer\n– <code>if x &gt;= 0 { ⌊ⁿ√x⌋ } else { ⌈ⁿ√x⌉ }</code> <a href=\"https://docs.rs/num-integer/0.1/num_integer/roots/trait.Roots.html#tymethod.nth_root\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.sqrt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-integer/0.1/src/num_integer/roots.rs.html#165\">Source</a><a href=\"#method.sqrt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-integer/0.1/num_integer/roots/trait.Roots.html#method.sqrt\" class=\"fn\">sqrt</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a></h4></section></summary><div class='docblock'>Returns the truncated principal square root of an integer – <code>⌊√x⌋</code> <a href=\"https://docs.rs/num-integer/0.1/num_integer/roots/trait.Roots.html#method.sqrt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.cbrt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-integer/0.1/src/num_integer/roots.rs.html#165\">Source</a><a href=\"#method.cbrt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-integer/0.1/num_integer/roots/trait.Roots.html#method.cbrt\" class=\"fn\">cbrt</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a></h4></section></summary><div class='docblock'>Returns the truncated principal cube root of an integer –\n<code>if x &gt;= 0 { ⌊∛x⌋ } else { ⌈∛x⌉ }</code> <a href=\"https://docs.rs/num-integer/0.1/num_integer/roots/trait.Roots.html#method.cbrt\">Read more</a></div></details></div></details>","Roots","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Sample-for-i32\" class=\"impl\"><a href=\"#impl-Sample-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl Sample for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedconstant.EQUILIBRIUM\" class=\"associatedconstant trait-impl\"><a href=\"#associatedconstant.EQUILIBRIUM\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a class=\"constant\">EQUILIBRIUM</a>: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> = 0i32</h4></section></summary><div class='docblock'>The equilibrium value for the wave that this <code>Sample</code> type represents. This is normally the\nvalue that is equal distance from both the min and max ranges of the sample. <a>Read more</a></div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Signed\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Signed\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Signed</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h4></section></summary><div class='docblock'>When summing two samples of a signal together, it is necessary for both samples to be\nrepresented in some signed format. This associated <code>Addition</code> type represents the format to\nwhich <code>Self</code> should be converted for optimal <code>Addition</code> performance. <a>Read more</a></div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Float\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Float\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Float</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.f32.html\">f32</a></h4></section></summary><div class='docblock'>When multiplying two samples of a signal together, it is necessary for both samples to be\nrepresented in some signed, floating-point format. This associated <code>Multiplication</code> type\nrepresents the format to which <code>Self</code> should be converted for optimal <code>Multiplication</code>\nperformance. <a>Read more</a></div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.IDENTITY\" class=\"associatedconstant trait-impl\"><a href=\"#associatedconstant.IDENTITY\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a class=\"constant\">IDENTITY</a>: Self::Float = &lt;Self::Float as FloatSample&gt;::IDENTITY</h4></section></summary><div class='docblock'>The multiplicative identity of the signal. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_sample\" class=\"method trait-impl\"><a href=\"#method.to_sample\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">to_sample</a>&lt;S&gt;(self) -&gt; S<div class=\"where\">where\n    Self: ToSample&lt;S&gt;,</div></h4></section></summary><div class='docblock'>Convert <code>self</code> to any type that implements <code>FromSample&lt;Self&gt;</code>. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_sample\" class=\"method trait-impl\"><a href=\"#method.from_sample\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">from_sample</a>&lt;S&gt;(s: S) -&gt; Self<div class=\"where\">where\n    Self: FromSample&lt;S&gt;,</div></h4></section></summary><div class='docblock'>Create a <code>Self</code> from any type that implements <code>ToSample&lt;Self&gt;</code>. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_signed_sample\" class=\"method trait-impl\"><a href=\"#method.to_signed_sample\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">to_signed_sample</a>(self) -&gt; Self::Signed</h4></section></summary><div class='docblock'>Converts <code>self</code> to the equivalent <code>Sample</code> in the associated <code>Signed</code> format. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_float_sample\" class=\"method trait-impl\"><a href=\"#method.to_float_sample\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">to_float_sample</a>(self) -&gt; Self::Float</h4></section></summary><div class='docblock'>Converts <code>self</code> to the equivalent <code>Sample</code> in the associated <code>Float</code> format. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.add_amp\" class=\"method trait-impl\"><a href=\"#method.add_amp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">add_amp</a>(self, amp: Self::Signed) -&gt; Self</h4></section></summary><div class='docblock'>Adds (or “offsets”) the amplitude of the <code>Sample</code> by the given signed amplitude. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.mul_amp\" class=\"method trait-impl\"><a href=\"#method.mul_amp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">mul_amp</a>(self, amp: Self::Float) -&gt; Self</h4></section></summary><div class='docblock'>Multiplies (or “scales”) the amplitude of the <code>Sample</code> by the given float amplitude. <a>Read more</a></div></details></div></details>","Sample","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Sample-for-i32\" class=\"impl\"><a href=\"#impl-Sample-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl Sample for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedconstant.FORMAT\" class=\"associatedconstant trait-impl\"><a href=\"#associatedconstant.FORMAT\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a class=\"constant\">FORMAT</a>: SampleFormat = SampleFormat::S32</h4></section></summary><div class='docblock'>A unique enum value representing the sample format. This constant may be used to dynamically\nchoose how to process the sample at runtime.</div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.EFF_BITS\" class=\"associatedconstant trait-impl\"><a href=\"#associatedconstant.EFF_BITS\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a class=\"constant\">EFF_BITS</a>: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a> = 32u32</h4></section></summary><div class='docblock'>The effective number of bits of the valid (clamped) sample range. Quantifies the dynamic\nrange of the sample format in bits.</div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.MID\" class=\"associatedconstant trait-impl\"><a href=\"#associatedconstant.MID\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a class=\"constant\">MID</a>: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> = 0i32</h4></section></summary><div class='docblock'>The mid-point value between the maximum and minimum sample value. If a sample is set to this\nvalue it is silent.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clamped\" class=\"method trait-impl\"><a href=\"#method.clamped\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">clamped</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a></h4></section></summary><div class='docblock'>If the sample format does not use the full range of the underlying data type, returns the\nsample clamped to the valid range. Otherwise, returns the sample unchanged.</div></details></div></details>","Sample","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Sample-for-i32\" class=\"impl\"><a href=\"#impl-Sample-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl Sample for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><section id=\"method.is_valid\" class=\"method trait-impl\"><a href=\"#method.is_valid\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">is_valid</a>(format: Sample, _channels: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></div></details>","Sample","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Saturating-for-i32\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/ops/saturating.rs.html#31\">Source</a><a href=\"#impl-Saturating-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://docs.rs/num-traits/0.2/num_traits/ops/saturating/trait.Saturating.html\" title=\"trait num_traits::ops::saturating::Saturating\">Saturating</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_add\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/ops/saturating.rs.html#31\">Source</a><a href=\"#method.saturating_add\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/ops/saturating/trait.Saturating.html#tymethod.saturating_add\" class=\"fn\">saturating_add</a>(self, v: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a></h4></section></summary><div class='docblock'>Saturating addition operator.\nReturns a+b, saturating at the numeric bounds instead of overflowing.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_sub\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/ops/saturating.rs.html#31\">Source</a><a href=\"#method.saturating_sub\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/ops/saturating/trait.Saturating.html#tymethod.saturating_sub\" class=\"fn\">saturating_sub</a>(self, v: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a></h4></section></summary><div class='docblock'>Saturating subtraction operator.\nReturns a-b, saturating at the numeric bounds instead of overflowing.</div></details></div></details>","Saturating","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SaturatingAdd-for-i32\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/ops/saturating.rs.html#61\">Source</a><a href=\"#impl-SaturatingAdd-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://docs.rs/num-traits/0.2/num_traits/ops/saturating/trait.SaturatingAdd.html\" title=\"trait num_traits::ops::saturating::SaturatingAdd\">SaturatingAdd</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_add\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/ops/saturating.rs.html#61\">Source</a><a href=\"#method.saturating_add\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/ops/saturating/trait.SaturatingAdd.html#tymethod.saturating_add\" class=\"fn\">saturating_add</a>(&amp;self, v: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a></h4></section></summary><div class='docblock'>Saturating addition. Computes <code>self + other</code>, saturating at the relevant high or low boundary of\nthe type.</div></details></div></details>","SaturatingAdd","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SaturatingMul-for-i32\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/ops/saturating.rs.html#103\">Source</a><a href=\"#impl-SaturatingMul-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://docs.rs/num-traits/0.2/num_traits/ops/saturating/trait.SaturatingMul.html\" title=\"trait num_traits::ops::saturating::SaturatingMul\">SaturatingMul</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_mul\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/ops/saturating.rs.html#103\">Source</a><a href=\"#method.saturating_mul\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/ops/saturating/trait.SaturatingMul.html#tymethod.saturating_mul\" class=\"fn\">saturating_mul</a>(&amp;self, v: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a></h4></section></summary><div class='docblock'>Saturating multiplication. Computes <code>self * other</code>, saturating at the relevant high or low boundary of\nthe type.</div></details></div></details>","SaturatingMul","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SaturatingSub-for-i32\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/ops/saturating.rs.html#82\">Source</a><a href=\"#impl-SaturatingSub-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://docs.rs/num-traits/0.2/num_traits/ops/saturating/trait.SaturatingSub.html\" title=\"trait num_traits::ops::saturating::SaturatingSub\">SaturatingSub</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_sub\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/ops/saturating.rs.html#82\">Source</a><a href=\"#method.saturating_sub\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/ops/saturating/trait.SaturatingSub.html#tymethod.saturating_sub\" class=\"fn\">saturating_sub</a>(&amp;self, v: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a></h4></section></summary><div class='docblock'>Saturating subtraction. Computes <code>self - other</code>, saturating at the relevant high or low boundary of\nthe type.</div></details></div></details>","SaturatingSub","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Serialize-for-i32\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/serde/1.0.221/src/serde_core/ser/impls.rs.html#25\">Source</a><a href=\"#impl-Serialize-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://docs.rs/serde/1.0.221/serde_core/ser/trait.Serialize.html\" title=\"trait serde_core::ser::Serialize\">Serialize</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.serialize\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/serde/1.0.221/src/serde_core/ser/impls.rs.html#25\">Source</a><a href=\"#method.serialize\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/serde/1.0.221/serde_core/ser/trait.Serialize.html#tymethod.serialize\" class=\"fn\">serialize</a>&lt;S&gt;(\n    &amp;self,\n    serializer: S,\n) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;&lt;S as <a class=\"trait\" href=\"https://docs.rs/serde/1.0.221/serde_core/ser/trait.Serializer.html\" title=\"trait serde_core::ser::Serializer\">Serializer</a>&gt;::<a class=\"associatedtype\" href=\"https://docs.rs/serde/1.0.221/serde_core/ser/trait.Serializer.html#associatedtype.Ok\" title=\"type serde_core::ser::Serializer::Ok\">Ok</a>, &lt;S as <a class=\"trait\" href=\"https://docs.rs/serde/1.0.221/serde_core/ser/trait.Serializer.html\" title=\"trait serde_core::ser::Serializer\">Serializer</a>&gt;::<a class=\"associatedtype\" href=\"https://docs.rs/serde/1.0.221/serde_core/ser/trait.Serializer.html#associatedtype.Error\" title=\"type serde_core::ser::Serializer::Error\">Error</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;&lt;S as Serializer&gt;::Ok, &lt;S as Serializer&gt;::Error&gt;\">ⓘ</a><div class=\"where\">where\n    S: <a class=\"trait\" href=\"https://docs.rs/serde/1.0.221/serde_core/ser/trait.Serializer.html\" title=\"trait serde_core::ser::Serializer\">Serializer</a>,</div></h4></section></summary><div class='docblock'>Serialize this value into the given Serde serializer. <a href=\"https://docs.rs/serde/1.0.221/serde_core/ser/trait.Serialize.html#tymethod.serialize\">Read more</a></div></details></div></details>","Serialize","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3C%26i128%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/143802\" title=\"Tracking issue for const_ops\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#522\">Source</a></span><a href=\"#impl-Shl%3C%26i128%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shl.html\" title=\"trait core::ops::bit::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i128.html\">i128</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#522\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shl.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shl.html\" title=\"trait core::ops::bit::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i128.html\">i128</a>&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shl.html#associatedtype.Output\" title=\"type core::ops::bit::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#522\">Source</a><a href=\"#method.shl\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shl.html#tymethod.shl\" class=\"fn\">shl</a>(self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i128.html\">i128</a>) -&gt; &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shl.html\" title=\"trait core::ops::bit::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i128.html\">i128</a>&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shl.html#associatedtype.Output\" title=\"type core::ops::bit::Shl::Output\">Output</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&lt;i32 as Shl&lt;i128&gt;&gt;::Output\">ⓘ</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shl.html#tymethod.shl\">Read more</a></div></details></div></details>","Shl<&i128>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3C%26i16%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/143802\" title=\"Tracking issue for const_ops\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#522\">Source</a></span><a href=\"#impl-Shl%3C%26i16%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shl.html\" title=\"trait core::ops::bit::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i16.html\">i16</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#522\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shl.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shl.html\" title=\"trait core::ops::bit::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i16.html\">i16</a>&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shl.html#associatedtype.Output\" title=\"type core::ops::bit::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#522\">Source</a><a href=\"#method.shl\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shl.html#tymethod.shl\" class=\"fn\">shl</a>(self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i16.html\">i16</a>) -&gt; &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shl.html\" title=\"trait core::ops::bit::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i16.html\">i16</a>&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shl.html#associatedtype.Output\" title=\"type core::ops::bit::Shl::Output\">Output</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&lt;i32 as Shl&lt;i16&gt;&gt;::Output\">ⓘ</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shl.html#tymethod.shl\">Read more</a></div></details></div></details>","Shl<&i16>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3C%26i32%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/143802\" title=\"Tracking issue for const_ops\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#522\">Source</a></span><a href=\"#impl-Shl%3C%26i32%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shl.html\" title=\"trait core::ops::bit::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#522\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shl.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shl.html\" title=\"trait core::ops::bit::Shl\">Shl</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shl.html#associatedtype.Output\" title=\"type core::ops::bit::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#522\">Source</a><a href=\"#method.shl\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shl.html#tymethod.shl\" class=\"fn\">shl</a>(self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>) -&gt; &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shl.html\" title=\"trait core::ops::bit::Shl\">Shl</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shl.html#associatedtype.Output\" title=\"type core::ops::bit::Shl::Output\">Output</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&lt;i32 as Shl&gt;::Output\">ⓘ</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shl.html#tymethod.shl\">Read more</a></div></details></div></details>","Shl<&i32>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3C%26i64%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/143802\" title=\"Tracking issue for const_ops\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#522\">Source</a></span><a href=\"#impl-Shl%3C%26i64%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shl.html\" title=\"trait core::ops::bit::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#522\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shl.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shl.html\" title=\"trait core::ops::bit::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i64.html\">i64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shl.html#associatedtype.Output\" title=\"type core::ops::bit::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#522\">Source</a><a href=\"#method.shl\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shl.html#tymethod.shl\" class=\"fn\">shl</a>(self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i64.html\">i64</a>) -&gt; &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shl.html\" title=\"trait core::ops::bit::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i64.html\">i64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shl.html#associatedtype.Output\" title=\"type core::ops::bit::Shl::Output\">Output</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&lt;i32 as Shl&lt;i64&gt;&gt;::Output\">ⓘ</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shl.html#tymethod.shl\">Read more</a></div></details></div></details>","Shl<&i64>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3C%26i8%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/143802\" title=\"Tracking issue for const_ops\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#522\">Source</a></span><a href=\"#impl-Shl%3C%26i8%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shl.html\" title=\"trait core::ops::bit::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#522\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shl.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shl.html\" title=\"trait core::ops::bit::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i8.html\">i8</a>&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shl.html#associatedtype.Output\" title=\"type core::ops::bit::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#522\">Source</a><a href=\"#method.shl\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shl.html#tymethod.shl\" class=\"fn\">shl</a>(self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i8.html\">i8</a>) -&gt; &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shl.html\" title=\"trait core::ops::bit::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i8.html\">i8</a>&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shl.html#associatedtype.Output\" title=\"type core::ops::bit::Shl::Output\">Output</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&lt;i32 as Shl&lt;i8&gt;&gt;::Output\">ⓘ</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shl.html#tymethod.shl\">Read more</a></div></details></div></details>","Shl<&i8>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3C%26isize%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/143802\" title=\"Tracking issue for const_ops\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#522\">Source</a></span><a href=\"#impl-Shl%3C%26isize%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shl.html\" title=\"trait core::ops::bit::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.isize.html\">isize</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#522\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shl.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shl.html\" title=\"trait core::ops::bit::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.isize.html\">isize</a>&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shl.html#associatedtype.Output\" title=\"type core::ops::bit::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#522\">Source</a><a href=\"#method.shl\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shl.html#tymethod.shl\" class=\"fn\">shl</a>(self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.isize.html\">isize</a>) -&gt; &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shl.html\" title=\"trait core::ops::bit::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.isize.html\">isize</a>&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shl.html#associatedtype.Output\" title=\"type core::ops::bit::Shl::Output\">Output</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&lt;i32 as Shl&lt;isize&gt;&gt;::Output\">ⓘ</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shl.html#tymethod.shl\">Read more</a></div></details></div></details>","Shl<&isize>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3C%26u128%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/143802\" title=\"Tracking issue for const_ops\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#522\">Source</a></span><a href=\"#impl-Shl%3C%26u128%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shl.html\" title=\"trait core::ops::bit::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u128.html\">u128</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#522\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shl.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shl.html\" title=\"trait core::ops::bit::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u128.html\">u128</a>&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shl.html#associatedtype.Output\" title=\"type core::ops::bit::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#522\">Source</a><a href=\"#method.shl\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shl.html#tymethod.shl\" class=\"fn\">shl</a>(self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u128.html\">u128</a>) -&gt; &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shl.html\" title=\"trait core::ops::bit::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u128.html\">u128</a>&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shl.html#associatedtype.Output\" title=\"type core::ops::bit::Shl::Output\">Output</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&lt;i32 as Shl&lt;u128&gt;&gt;::Output\">ⓘ</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shl.html#tymethod.shl\">Read more</a></div></details></div></details>","Shl<&u128>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3C%26u16%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/143802\" title=\"Tracking issue for const_ops\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#522\">Source</a></span><a href=\"#impl-Shl%3C%26u16%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shl.html\" title=\"trait core::ops::bit::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u16.html\">u16</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#522\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shl.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shl.html\" title=\"trait core::ops::bit::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u16.html\">u16</a>&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shl.html#associatedtype.Output\" title=\"type core::ops::bit::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#522\">Source</a><a href=\"#method.shl\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shl.html#tymethod.shl\" class=\"fn\">shl</a>(self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u16.html\">u16</a>) -&gt; &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shl.html\" title=\"trait core::ops::bit::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u16.html\">u16</a>&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shl.html#associatedtype.Output\" title=\"type core::ops::bit::Shl::Output\">Output</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&lt;i32 as Shl&lt;u16&gt;&gt;::Output\">ⓘ</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shl.html#tymethod.shl\">Read more</a></div></details></div></details>","Shl<&u16>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3C%26u32%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/143802\" title=\"Tracking issue for const_ops\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#522\">Source</a></span><a href=\"#impl-Shl%3C%26u32%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shl.html\" title=\"trait core::ops::bit::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#522\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shl.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shl.html\" title=\"trait core::ops::bit::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shl.html#associatedtype.Output\" title=\"type core::ops::bit::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#522\">Source</a><a href=\"#method.shl\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shl.html#tymethod.shl\" class=\"fn\">shl</a>(self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>) -&gt; &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shl.html\" title=\"trait core::ops::bit::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shl.html#associatedtype.Output\" title=\"type core::ops::bit::Shl::Output\">Output</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&lt;i32 as Shl&lt;u32&gt;&gt;::Output\">ⓘ</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shl.html#tymethod.shl\">Read more</a></div></details></div></details>","Shl<&u32>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3C%26u64%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/143802\" title=\"Tracking issue for const_ops\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#522\">Source</a></span><a href=\"#impl-Shl%3C%26u64%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shl.html\" title=\"trait core::ops::bit::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u64.html\">u64</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#522\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shl.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shl.html\" title=\"trait core::ops::bit::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u64.html\">u64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shl.html#associatedtype.Output\" title=\"type core::ops::bit::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#522\">Source</a><a href=\"#method.shl\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shl.html#tymethod.shl\" class=\"fn\">shl</a>(self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u64.html\">u64</a>) -&gt; &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shl.html\" title=\"trait core::ops::bit::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u64.html\">u64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shl.html#associatedtype.Output\" title=\"type core::ops::bit::Shl::Output\">Output</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&lt;i32 as Shl&lt;u64&gt;&gt;::Output\">ⓘ</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shl.html#tymethod.shl\">Read more</a></div></details></div></details>","Shl<&u64>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3C%26u8%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/143802\" title=\"Tracking issue for const_ops\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#522\">Source</a></span><a href=\"#impl-Shl%3C%26u8%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shl.html\" title=\"trait core::ops::bit::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#522\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shl.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shl.html\" title=\"trait core::ops::bit::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shl.html#associatedtype.Output\" title=\"type core::ops::bit::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#522\">Source</a><a href=\"#method.shl\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shl.html#tymethod.shl\" class=\"fn\">shl</a>(self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>) -&gt; &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shl.html\" title=\"trait core::ops::bit::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shl.html#associatedtype.Output\" title=\"type core::ops::bit::Shl::Output\">Output</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&lt;i32 as Shl&lt;u8&gt;&gt;::Output\">ⓘ</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shl.html#tymethod.shl\">Read more</a></div></details></div></details>","Shl<&u8>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3C%26usize%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/143802\" title=\"Tracking issue for const_ops\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#522\">Source</a></span><a href=\"#impl-Shl%3C%26usize%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shl.html\" title=\"trait core::ops::bit::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#522\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shl.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shl.html\" title=\"trait core::ops::bit::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shl.html#associatedtype.Output\" title=\"type core::ops::bit::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#522\">Source</a><a href=\"#method.shl\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shl.html#tymethod.shl\" class=\"fn\">shl</a>(self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>) -&gt; &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shl.html\" title=\"trait core::ops::bit::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shl.html#associatedtype.Output\" title=\"type core::ops::bit::Shl::Output\">Output</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&lt;i32 as Shl&lt;usize&gt;&gt;::Output\">ⓘ</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shl.html#tymethod.shl\">Read more</a></div></details></div></details>","Shl<&usize>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3Ci128%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/143802\" title=\"Tracking issue for const_ops\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#522\">Source</a></span><a href=\"#impl-Shl%3Ci128%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shl.html\" title=\"trait core::ops::bit::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i128.html\">i128</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#522\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shl.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#522\">Source</a><a href=\"#method.shl\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shl.html#tymethod.shl\" class=\"fn\">shl</a>(self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i128.html\">i128</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shl.html#tymethod.shl\">Read more</a></div></details></div></details>","Shl<i128>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3Ci16%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/143802\" title=\"Tracking issue for const_ops\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#522\">Source</a></span><a href=\"#impl-Shl%3Ci16%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shl.html\" title=\"trait core::ops::bit::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i16.html\">i16</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#522\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shl.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#522\">Source</a><a href=\"#method.shl\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shl.html#tymethod.shl\" class=\"fn\">shl</a>(self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i16.html\">i16</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shl.html#tymethod.shl\">Read more</a></div></details></div></details>","Shl<i16>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3Ci64%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/143802\" title=\"Tracking issue for const_ops\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#522\">Source</a></span><a href=\"#impl-Shl%3Ci64%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shl.html\" title=\"trait core::ops::bit::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#522\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shl.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#522\">Source</a><a href=\"#method.shl\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shl.html#tymethod.shl\" class=\"fn\">shl</a>(self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shl.html#tymethod.shl\">Read more</a></div></details></div></details>","Shl<i64>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3Ci8%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/143802\" title=\"Tracking issue for const_ops\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#522\">Source</a></span><a href=\"#impl-Shl%3Ci8%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shl.html\" title=\"trait core::ops::bit::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#522\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shl.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#522\">Source</a><a href=\"#method.shl\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shl.html#tymethod.shl\" class=\"fn\">shl</a>(self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i8.html\">i8</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shl.html#tymethod.shl\">Read more</a></div></details></div></details>","Shl<i8>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3Cisize%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/143802\" title=\"Tracking issue for const_ops\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#522\">Source</a></span><a href=\"#impl-Shl%3Cisize%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shl.html\" title=\"trait core::ops::bit::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.isize.html\">isize</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#522\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shl.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#522\">Source</a><a href=\"#method.shl\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shl.html#tymethod.shl\" class=\"fn\">shl</a>(self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.isize.html\">isize</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shl.html#tymethod.shl\">Read more</a></div></details></div></details>","Shl<isize>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3Cu128%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/143802\" title=\"Tracking issue for const_ops\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#522\">Source</a></span><a href=\"#impl-Shl%3Cu128%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shl.html\" title=\"trait core::ops::bit::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u128.html\">u128</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#522\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shl.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#522\">Source</a><a href=\"#method.shl\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shl.html#tymethod.shl\" class=\"fn\">shl</a>(self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u128.html\">u128</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shl.html#tymethod.shl\">Read more</a></div></details></div></details>","Shl<u128>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3Cu16%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/143802\" title=\"Tracking issue for const_ops\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#522\">Source</a></span><a href=\"#impl-Shl%3Cu16%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shl.html\" title=\"trait core::ops::bit::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u16.html\">u16</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#522\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shl.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#522\">Source</a><a href=\"#method.shl\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shl.html#tymethod.shl\" class=\"fn\">shl</a>(self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shl.html#tymethod.shl\">Read more</a></div></details></div></details>","Shl<u16>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3Cu32%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/143802\" title=\"Tracking issue for const_ops\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#522\">Source</a></span><a href=\"#impl-Shl%3Cu32%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shl.html\" title=\"trait core::ops::bit::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#522\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shl.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#522\">Source</a><a href=\"#method.shl\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shl.html#tymethod.shl\" class=\"fn\">shl</a>(self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shl.html#tymethod.shl\">Read more</a></div></details></div></details>","Shl<u32>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3Cu64%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/143802\" title=\"Tracking issue for const_ops\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#522\">Source</a></span><a href=\"#impl-Shl%3Cu64%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shl.html\" title=\"trait core::ops::bit::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u64.html\">u64</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#522\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shl.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#522\">Source</a><a href=\"#method.shl\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shl.html#tymethod.shl\" class=\"fn\">shl</a>(self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u64.html\">u64</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shl.html#tymethod.shl\">Read more</a></div></details></div></details>","Shl<u64>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3Cu8%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/143802\" title=\"Tracking issue for const_ops\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#522\">Source</a></span><a href=\"#impl-Shl%3Cu8%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shl.html\" title=\"trait core::ops::bit::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#522\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shl.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#522\">Source</a><a href=\"#method.shl\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shl.html#tymethod.shl\" class=\"fn\">shl</a>(self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shl.html#tymethod.shl\">Read more</a></div></details></div></details>","Shl<u8>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3Cusize%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/143802\" title=\"Tracking issue for const_ops\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#522\">Source</a></span><a href=\"#impl-Shl%3Cusize%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shl.html\" title=\"trait core::ops::bit::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#522\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shl.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#522\">Source</a><a href=\"#method.shl\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shl.html#tymethod.shl\" class=\"fn\">shl</a>(self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shl.html#tymethod.shl\">Read more</a></div></details></div></details>","Shl<usize>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/143802\" title=\"Tracking issue for const_ops\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#522\">Source</a></span><a href=\"#impl-Shl-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shl.html\" title=\"trait core::ops::bit::Shl\">Shl</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#522\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shl.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#522\">Source</a><a href=\"#method.shl\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shl.html#tymethod.shl\" class=\"fn\">shl</a>(self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shl.html#tymethod.shl\">Read more</a></div></details></div></details>","Shl","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3C%26i128%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0, const unstable\">1.22.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/143802\" title=\"Tracking issue for const_ops\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#1001\">Source</a></span><a href=\"#impl-ShlAssign%3C%26i128%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.ShlAssign.html\" title=\"trait core::ops::bit::ShlAssign\">ShlAssign</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i128.html\">i128</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#1001\">Source</a><a href=\"#method.shl_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.ShlAssign.html#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i128.html\">i128</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.ShlAssign.html#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign<&i128>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3C%26i16%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0, const unstable\">1.22.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/143802\" title=\"Tracking issue for const_ops\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#1001\">Source</a></span><a href=\"#impl-ShlAssign%3C%26i16%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.ShlAssign.html\" title=\"trait core::ops::bit::ShlAssign\">ShlAssign</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i16.html\">i16</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#1001\">Source</a><a href=\"#method.shl_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.ShlAssign.html#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i16.html\">i16</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.ShlAssign.html#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign<&i16>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3C%26i32%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0, const unstable\">1.22.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/143802\" title=\"Tracking issue for const_ops\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#1001\">Source</a></span><a href=\"#impl-ShlAssign%3C%26i32%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.ShlAssign.html\" title=\"trait core::ops::bit::ShlAssign\">ShlAssign</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#1001\">Source</a><a href=\"#method.shl_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.ShlAssign.html#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.ShlAssign.html#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign<&i32>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3C%26i64%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0, const unstable\">1.22.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/143802\" title=\"Tracking issue for const_ops\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#1001\">Source</a></span><a href=\"#impl-ShlAssign%3C%26i64%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.ShlAssign.html\" title=\"trait core::ops::bit::ShlAssign\">ShlAssign</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#1001\">Source</a><a href=\"#method.shl_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.ShlAssign.html#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i64.html\">i64</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.ShlAssign.html#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign<&i64>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3C%26i8%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0, const unstable\">1.22.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/143802\" title=\"Tracking issue for const_ops\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#1001\">Source</a></span><a href=\"#impl-ShlAssign%3C%26i8%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.ShlAssign.html\" title=\"trait core::ops::bit::ShlAssign\">ShlAssign</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#1001\">Source</a><a href=\"#method.shl_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.ShlAssign.html#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i8.html\">i8</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.ShlAssign.html#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign<&i8>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3C%26isize%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0, const unstable\">1.22.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/143802\" title=\"Tracking issue for const_ops\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#1001\">Source</a></span><a href=\"#impl-ShlAssign%3C%26isize%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.ShlAssign.html\" title=\"trait core::ops::bit::ShlAssign\">ShlAssign</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.isize.html\">isize</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#1001\">Source</a><a href=\"#method.shl_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.ShlAssign.html#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.isize.html\">isize</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.ShlAssign.html#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign<&isize>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3C%26u128%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0, const unstable\">1.22.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/143802\" title=\"Tracking issue for const_ops\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#1001\">Source</a></span><a href=\"#impl-ShlAssign%3C%26u128%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.ShlAssign.html\" title=\"trait core::ops::bit::ShlAssign\">ShlAssign</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u128.html\">u128</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#1001\">Source</a><a href=\"#method.shl_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.ShlAssign.html#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u128.html\">u128</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.ShlAssign.html#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign<&u128>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3C%26u16%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0, const unstable\">1.22.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/143802\" title=\"Tracking issue for const_ops\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#1001\">Source</a></span><a href=\"#impl-ShlAssign%3C%26u16%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.ShlAssign.html\" title=\"trait core::ops::bit::ShlAssign\">ShlAssign</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u16.html\">u16</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#1001\">Source</a><a href=\"#method.shl_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.ShlAssign.html#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u16.html\">u16</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.ShlAssign.html#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign<&u16>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3C%26u32%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0, const unstable\">1.22.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/143802\" title=\"Tracking issue for const_ops\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#1001\">Source</a></span><a href=\"#impl-ShlAssign%3C%26u32%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.ShlAssign.html\" title=\"trait core::ops::bit::ShlAssign\">ShlAssign</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#1001\">Source</a><a href=\"#method.shl_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.ShlAssign.html#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.ShlAssign.html#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign<&u32>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3C%26u64%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0, const unstable\">1.22.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/143802\" title=\"Tracking issue for const_ops\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#1001\">Source</a></span><a href=\"#impl-ShlAssign%3C%26u64%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.ShlAssign.html\" title=\"trait core::ops::bit::ShlAssign\">ShlAssign</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u64.html\">u64</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#1001\">Source</a><a href=\"#method.shl_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.ShlAssign.html#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u64.html\">u64</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.ShlAssign.html#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign<&u64>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3C%26u8%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0, const unstable\">1.22.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/143802\" title=\"Tracking issue for const_ops\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#1001\">Source</a></span><a href=\"#impl-ShlAssign%3C%26u8%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.ShlAssign.html\" title=\"trait core::ops::bit::ShlAssign\">ShlAssign</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#1001\">Source</a><a href=\"#method.shl_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.ShlAssign.html#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.ShlAssign.html#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign<&u8>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3C%26usize%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0, const unstable\">1.22.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/143802\" title=\"Tracking issue for const_ops\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#1001\">Source</a></span><a href=\"#impl-ShlAssign%3C%26usize%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.ShlAssign.html\" title=\"trait core::ops::bit::ShlAssign\">ShlAssign</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#1001\">Source</a><a href=\"#method.shl_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.ShlAssign.html#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.ShlAssign.html#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign<&usize>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3Ci128%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0, const unstable\">1.8.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/143802\" title=\"Tracking issue for const_ops\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#1001\">Source</a></span><a href=\"#impl-ShlAssign%3Ci128%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.ShlAssign.html\" title=\"trait core::ops::bit::ShlAssign\">ShlAssign</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i128.html\">i128</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#1001\">Source</a><a href=\"#method.shl_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.ShlAssign.html#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i128.html\">i128</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.ShlAssign.html#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign<i128>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3Ci16%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0, const unstable\">1.8.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/143802\" title=\"Tracking issue for const_ops\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#1001\">Source</a></span><a href=\"#impl-ShlAssign%3Ci16%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.ShlAssign.html\" title=\"trait core::ops::bit::ShlAssign\">ShlAssign</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i16.html\">i16</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#1001\">Source</a><a href=\"#method.shl_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.ShlAssign.html#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i16.html\">i16</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.ShlAssign.html#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign<i16>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3Ci64%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0, const unstable\">1.8.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/143802\" title=\"Tracking issue for const_ops\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#1001\">Source</a></span><a href=\"#impl-ShlAssign%3Ci64%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.ShlAssign.html\" title=\"trait core::ops::bit::ShlAssign\">ShlAssign</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#1001\">Source</a><a href=\"#method.shl_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.ShlAssign.html#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i64.html\">i64</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.ShlAssign.html#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign<i64>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3Ci8%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0, const unstable\">1.8.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/143802\" title=\"Tracking issue for const_ops\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#1001\">Source</a></span><a href=\"#impl-ShlAssign%3Ci8%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.ShlAssign.html\" title=\"trait core::ops::bit::ShlAssign\">ShlAssign</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#1001\">Source</a><a href=\"#method.shl_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.ShlAssign.html#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i8.html\">i8</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.ShlAssign.html#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign<i8>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3Cisize%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0, const unstable\">1.8.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/143802\" title=\"Tracking issue for const_ops\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#1001\">Source</a></span><a href=\"#impl-ShlAssign%3Cisize%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.ShlAssign.html\" title=\"trait core::ops::bit::ShlAssign\">ShlAssign</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.isize.html\">isize</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#1001\">Source</a><a href=\"#method.shl_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.ShlAssign.html#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.isize.html\">isize</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.ShlAssign.html#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign<isize>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3Cu128%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0, const unstable\">1.8.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/143802\" title=\"Tracking issue for const_ops\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#1001\">Source</a></span><a href=\"#impl-ShlAssign%3Cu128%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.ShlAssign.html\" title=\"trait core::ops::bit::ShlAssign\">ShlAssign</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u128.html\">u128</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#1001\">Source</a><a href=\"#method.shl_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.ShlAssign.html#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u128.html\">u128</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.ShlAssign.html#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign<u128>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3Cu16%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0, const unstable\">1.8.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/143802\" title=\"Tracking issue for const_ops\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#1001\">Source</a></span><a href=\"#impl-ShlAssign%3Cu16%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.ShlAssign.html\" title=\"trait core::ops::bit::ShlAssign\">ShlAssign</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u16.html\">u16</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#1001\">Source</a><a href=\"#method.shl_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.ShlAssign.html#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u16.html\">u16</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.ShlAssign.html#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign<u16>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3Cu32%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0, const unstable\">1.8.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/143802\" title=\"Tracking issue for const_ops\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#1001\">Source</a></span><a href=\"#impl-ShlAssign%3Cu32%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.ShlAssign.html\" title=\"trait core::ops::bit::ShlAssign\">ShlAssign</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#1001\">Source</a><a href=\"#method.shl_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.ShlAssign.html#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.ShlAssign.html#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign<u32>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3Cu64%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0, const unstable\">1.8.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/143802\" title=\"Tracking issue for const_ops\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#1001\">Source</a></span><a href=\"#impl-ShlAssign%3Cu64%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.ShlAssign.html\" title=\"trait core::ops::bit::ShlAssign\">ShlAssign</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u64.html\">u64</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#1001\">Source</a><a href=\"#method.shl_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.ShlAssign.html#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u64.html\">u64</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.ShlAssign.html#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign<u64>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3Cu8%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0, const unstable\">1.8.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/143802\" title=\"Tracking issue for const_ops\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#1001\">Source</a></span><a href=\"#impl-ShlAssign%3Cu8%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.ShlAssign.html\" title=\"trait core::ops::bit::ShlAssign\">ShlAssign</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#1001\">Source</a><a href=\"#method.shl_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.ShlAssign.html#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.ShlAssign.html#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign<u8>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3Cusize%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0, const unstable\">1.8.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/143802\" title=\"Tracking issue for const_ops\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#1001\">Source</a></span><a href=\"#impl-ShlAssign%3Cusize%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.ShlAssign.html\" title=\"trait core::ops::bit::ShlAssign\">ShlAssign</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#1001\">Source</a><a href=\"#method.shl_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.ShlAssign.html#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.ShlAssign.html#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign<usize>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0, const unstable\">1.8.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/143802\" title=\"Tracking issue for const_ops\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#1001\">Source</a></span><a href=\"#impl-ShlAssign-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.ShlAssign.html\" title=\"trait core::ops::bit::ShlAssign\">ShlAssign</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#1001\">Source</a><a href=\"#method.shl_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.ShlAssign.html#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.ShlAssign.html#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3C%26i128%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/143802\" title=\"Tracking issue for const_ops\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#645\">Source</a></span><a href=\"#impl-Shr%3C%26i128%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shr.html\" title=\"trait core::ops::bit::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i128.html\">i128</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#645\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shr.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shr.html\" title=\"trait core::ops::bit::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i128.html\">i128</a>&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shr.html#associatedtype.Output\" title=\"type core::ops::bit::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#645\">Source</a><a href=\"#method.shr\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shr.html#tymethod.shr\" class=\"fn\">shr</a>(self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i128.html\">i128</a>) -&gt; &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shr.html\" title=\"trait core::ops::bit::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i128.html\">i128</a>&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shr.html#associatedtype.Output\" title=\"type core::ops::bit::Shr::Output\">Output</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&lt;i32 as Shr&lt;i128&gt;&gt;::Output\">ⓘ</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shr.html#tymethod.shr\">Read more</a></div></details></div></details>","Shr<&i128>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3C%26i16%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/143802\" title=\"Tracking issue for const_ops\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#645\">Source</a></span><a href=\"#impl-Shr%3C%26i16%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shr.html\" title=\"trait core::ops::bit::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i16.html\">i16</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#645\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shr.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shr.html\" title=\"trait core::ops::bit::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i16.html\">i16</a>&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shr.html#associatedtype.Output\" title=\"type core::ops::bit::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#645\">Source</a><a href=\"#method.shr\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shr.html#tymethod.shr\" class=\"fn\">shr</a>(self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i16.html\">i16</a>) -&gt; &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shr.html\" title=\"trait core::ops::bit::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i16.html\">i16</a>&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shr.html#associatedtype.Output\" title=\"type core::ops::bit::Shr::Output\">Output</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&lt;i32 as Shr&lt;i16&gt;&gt;::Output\">ⓘ</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shr.html#tymethod.shr\">Read more</a></div></details></div></details>","Shr<&i16>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3C%26i32%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/143802\" title=\"Tracking issue for const_ops\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#645\">Source</a></span><a href=\"#impl-Shr%3C%26i32%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shr.html\" title=\"trait core::ops::bit::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#645\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shr.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shr.html\" title=\"trait core::ops::bit::Shr\">Shr</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shr.html#associatedtype.Output\" title=\"type core::ops::bit::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#645\">Source</a><a href=\"#method.shr\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shr.html#tymethod.shr\" class=\"fn\">shr</a>(self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>) -&gt; &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shr.html\" title=\"trait core::ops::bit::Shr\">Shr</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shr.html#associatedtype.Output\" title=\"type core::ops::bit::Shr::Output\">Output</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&lt;i32 as Shr&gt;::Output\">ⓘ</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shr.html#tymethod.shr\">Read more</a></div></details></div></details>","Shr<&i32>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3C%26i64%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/143802\" title=\"Tracking issue for const_ops\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#645\">Source</a></span><a href=\"#impl-Shr%3C%26i64%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shr.html\" title=\"trait core::ops::bit::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#645\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shr.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shr.html\" title=\"trait core::ops::bit::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i64.html\">i64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shr.html#associatedtype.Output\" title=\"type core::ops::bit::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#645\">Source</a><a href=\"#method.shr\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shr.html#tymethod.shr\" class=\"fn\">shr</a>(self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i64.html\">i64</a>) -&gt; &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shr.html\" title=\"trait core::ops::bit::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i64.html\">i64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shr.html#associatedtype.Output\" title=\"type core::ops::bit::Shr::Output\">Output</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&lt;i32 as Shr&lt;i64&gt;&gt;::Output\">ⓘ</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shr.html#tymethod.shr\">Read more</a></div></details></div></details>","Shr<&i64>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3C%26i8%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/143802\" title=\"Tracking issue for const_ops\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#645\">Source</a></span><a href=\"#impl-Shr%3C%26i8%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shr.html\" title=\"trait core::ops::bit::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#645\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shr.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shr.html\" title=\"trait core::ops::bit::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i8.html\">i8</a>&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shr.html#associatedtype.Output\" title=\"type core::ops::bit::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#645\">Source</a><a href=\"#method.shr\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shr.html#tymethod.shr\" class=\"fn\">shr</a>(self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i8.html\">i8</a>) -&gt; &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shr.html\" title=\"trait core::ops::bit::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i8.html\">i8</a>&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shr.html#associatedtype.Output\" title=\"type core::ops::bit::Shr::Output\">Output</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&lt;i32 as Shr&lt;i8&gt;&gt;::Output\">ⓘ</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shr.html#tymethod.shr\">Read more</a></div></details></div></details>","Shr<&i8>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3C%26isize%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/143802\" title=\"Tracking issue for const_ops\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#645\">Source</a></span><a href=\"#impl-Shr%3C%26isize%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shr.html\" title=\"trait core::ops::bit::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.isize.html\">isize</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#645\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shr.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shr.html\" title=\"trait core::ops::bit::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.isize.html\">isize</a>&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shr.html#associatedtype.Output\" title=\"type core::ops::bit::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#645\">Source</a><a href=\"#method.shr\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shr.html#tymethod.shr\" class=\"fn\">shr</a>(self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.isize.html\">isize</a>) -&gt; &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shr.html\" title=\"trait core::ops::bit::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.isize.html\">isize</a>&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shr.html#associatedtype.Output\" title=\"type core::ops::bit::Shr::Output\">Output</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&lt;i32 as Shr&lt;isize&gt;&gt;::Output\">ⓘ</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shr.html#tymethod.shr\">Read more</a></div></details></div></details>","Shr<&isize>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3C%26u128%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/143802\" title=\"Tracking issue for const_ops\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#645\">Source</a></span><a href=\"#impl-Shr%3C%26u128%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shr.html\" title=\"trait core::ops::bit::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u128.html\">u128</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#645\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shr.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shr.html\" title=\"trait core::ops::bit::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u128.html\">u128</a>&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shr.html#associatedtype.Output\" title=\"type core::ops::bit::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#645\">Source</a><a href=\"#method.shr\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shr.html#tymethod.shr\" class=\"fn\">shr</a>(self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u128.html\">u128</a>) -&gt; &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shr.html\" title=\"trait core::ops::bit::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u128.html\">u128</a>&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shr.html#associatedtype.Output\" title=\"type core::ops::bit::Shr::Output\">Output</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&lt;i32 as Shr&lt;u128&gt;&gt;::Output\">ⓘ</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shr.html#tymethod.shr\">Read more</a></div></details></div></details>","Shr<&u128>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3C%26u16%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/143802\" title=\"Tracking issue for const_ops\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#645\">Source</a></span><a href=\"#impl-Shr%3C%26u16%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shr.html\" title=\"trait core::ops::bit::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u16.html\">u16</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#645\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shr.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shr.html\" title=\"trait core::ops::bit::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u16.html\">u16</a>&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shr.html#associatedtype.Output\" title=\"type core::ops::bit::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#645\">Source</a><a href=\"#method.shr\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shr.html#tymethod.shr\" class=\"fn\">shr</a>(self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u16.html\">u16</a>) -&gt; &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shr.html\" title=\"trait core::ops::bit::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u16.html\">u16</a>&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shr.html#associatedtype.Output\" title=\"type core::ops::bit::Shr::Output\">Output</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&lt;i32 as Shr&lt;u16&gt;&gt;::Output\">ⓘ</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shr.html#tymethod.shr\">Read more</a></div></details></div></details>","Shr<&u16>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3C%26u32%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/143802\" title=\"Tracking issue for const_ops\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#645\">Source</a></span><a href=\"#impl-Shr%3C%26u32%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shr.html\" title=\"trait core::ops::bit::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#645\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shr.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shr.html\" title=\"trait core::ops::bit::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shr.html#associatedtype.Output\" title=\"type core::ops::bit::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#645\">Source</a><a href=\"#method.shr\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shr.html#tymethod.shr\" class=\"fn\">shr</a>(self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>) -&gt; &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shr.html\" title=\"trait core::ops::bit::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shr.html#associatedtype.Output\" title=\"type core::ops::bit::Shr::Output\">Output</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&lt;i32 as Shr&lt;u32&gt;&gt;::Output\">ⓘ</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shr.html#tymethod.shr\">Read more</a></div></details></div></details>","Shr<&u32>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3C%26u64%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/143802\" title=\"Tracking issue for const_ops\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#645\">Source</a></span><a href=\"#impl-Shr%3C%26u64%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shr.html\" title=\"trait core::ops::bit::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u64.html\">u64</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#645\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shr.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shr.html\" title=\"trait core::ops::bit::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u64.html\">u64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shr.html#associatedtype.Output\" title=\"type core::ops::bit::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#645\">Source</a><a href=\"#method.shr\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shr.html#tymethod.shr\" class=\"fn\">shr</a>(self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u64.html\">u64</a>) -&gt; &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shr.html\" title=\"trait core::ops::bit::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u64.html\">u64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shr.html#associatedtype.Output\" title=\"type core::ops::bit::Shr::Output\">Output</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&lt;i32 as Shr&lt;u64&gt;&gt;::Output\">ⓘ</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shr.html#tymethod.shr\">Read more</a></div></details></div></details>","Shr<&u64>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3C%26u8%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/143802\" title=\"Tracking issue for const_ops\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#645\">Source</a></span><a href=\"#impl-Shr%3C%26u8%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shr.html\" title=\"trait core::ops::bit::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#645\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shr.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shr.html\" title=\"trait core::ops::bit::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shr.html#associatedtype.Output\" title=\"type core::ops::bit::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#645\">Source</a><a href=\"#method.shr\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shr.html#tymethod.shr\" class=\"fn\">shr</a>(self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>) -&gt; &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shr.html\" title=\"trait core::ops::bit::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shr.html#associatedtype.Output\" title=\"type core::ops::bit::Shr::Output\">Output</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&lt;i32 as Shr&lt;u8&gt;&gt;::Output\">ⓘ</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shr.html#tymethod.shr\">Read more</a></div></details></div></details>","Shr<&u8>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3C%26usize%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/143802\" title=\"Tracking issue for const_ops\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#645\">Source</a></span><a href=\"#impl-Shr%3C%26usize%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shr.html\" title=\"trait core::ops::bit::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#645\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shr.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shr.html\" title=\"trait core::ops::bit::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shr.html#associatedtype.Output\" title=\"type core::ops::bit::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#645\">Source</a><a href=\"#method.shr\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shr.html#tymethod.shr\" class=\"fn\">shr</a>(self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>) -&gt; &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shr.html\" title=\"trait core::ops::bit::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shr.html#associatedtype.Output\" title=\"type core::ops::bit::Shr::Output\">Output</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&lt;i32 as Shr&lt;usize&gt;&gt;::Output\">ⓘ</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shr.html#tymethod.shr\">Read more</a></div></details></div></details>","Shr<&usize>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3Ci128%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/143802\" title=\"Tracking issue for const_ops\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#645\">Source</a></span><a href=\"#impl-Shr%3Ci128%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shr.html\" title=\"trait core::ops::bit::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i128.html\">i128</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#645\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shr.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#645\">Source</a><a href=\"#method.shr\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shr.html#tymethod.shr\" class=\"fn\">shr</a>(self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i128.html\">i128</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shr.html#tymethod.shr\">Read more</a></div></details></div></details>","Shr<i128>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3Ci16%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/143802\" title=\"Tracking issue for const_ops\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#645\">Source</a></span><a href=\"#impl-Shr%3Ci16%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shr.html\" title=\"trait core::ops::bit::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i16.html\">i16</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#645\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shr.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#645\">Source</a><a href=\"#method.shr\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shr.html#tymethod.shr\" class=\"fn\">shr</a>(self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i16.html\">i16</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shr.html#tymethod.shr\">Read more</a></div></details></div></details>","Shr<i16>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3Ci64%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/143802\" title=\"Tracking issue for const_ops\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#645\">Source</a></span><a href=\"#impl-Shr%3Ci64%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shr.html\" title=\"trait core::ops::bit::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#645\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shr.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#645\">Source</a><a href=\"#method.shr\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shr.html#tymethod.shr\" class=\"fn\">shr</a>(self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shr.html#tymethod.shr\">Read more</a></div></details></div></details>","Shr<i64>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3Ci8%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/143802\" title=\"Tracking issue for const_ops\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#645\">Source</a></span><a href=\"#impl-Shr%3Ci8%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shr.html\" title=\"trait core::ops::bit::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#645\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shr.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#645\">Source</a><a href=\"#method.shr\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shr.html#tymethod.shr\" class=\"fn\">shr</a>(self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i8.html\">i8</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shr.html#tymethod.shr\">Read more</a></div></details></div></details>","Shr<i8>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3Cisize%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/143802\" title=\"Tracking issue for const_ops\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#645\">Source</a></span><a href=\"#impl-Shr%3Cisize%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shr.html\" title=\"trait core::ops::bit::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.isize.html\">isize</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#645\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shr.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#645\">Source</a><a href=\"#method.shr\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shr.html#tymethod.shr\" class=\"fn\">shr</a>(self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.isize.html\">isize</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shr.html#tymethod.shr\">Read more</a></div></details></div></details>","Shr<isize>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3Cu128%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/143802\" title=\"Tracking issue for const_ops\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#645\">Source</a></span><a href=\"#impl-Shr%3Cu128%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shr.html\" title=\"trait core::ops::bit::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u128.html\">u128</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#645\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shr.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#645\">Source</a><a href=\"#method.shr\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shr.html#tymethod.shr\" class=\"fn\">shr</a>(self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u128.html\">u128</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shr.html#tymethod.shr\">Read more</a></div></details></div></details>","Shr<u128>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3Cu16%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/143802\" title=\"Tracking issue for const_ops\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#645\">Source</a></span><a href=\"#impl-Shr%3Cu16%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shr.html\" title=\"trait core::ops::bit::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u16.html\">u16</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#645\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shr.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#645\">Source</a><a href=\"#method.shr\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shr.html#tymethod.shr\" class=\"fn\">shr</a>(self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shr.html#tymethod.shr\">Read more</a></div></details></div></details>","Shr<u16>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3Cu32%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/143802\" title=\"Tracking issue for const_ops\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#645\">Source</a></span><a href=\"#impl-Shr%3Cu32%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shr.html\" title=\"trait core::ops::bit::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#645\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shr.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#645\">Source</a><a href=\"#method.shr\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shr.html#tymethod.shr\" class=\"fn\">shr</a>(self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shr.html#tymethod.shr\">Read more</a></div></details></div></details>","Shr<u32>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3Cu64%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/143802\" title=\"Tracking issue for const_ops\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#645\">Source</a></span><a href=\"#impl-Shr%3Cu64%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shr.html\" title=\"trait core::ops::bit::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u64.html\">u64</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#645\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shr.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#645\">Source</a><a href=\"#method.shr\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shr.html#tymethod.shr\" class=\"fn\">shr</a>(self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u64.html\">u64</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shr.html#tymethod.shr\">Read more</a></div></details></div></details>","Shr<u64>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3Cu8%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/143802\" title=\"Tracking issue for const_ops\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#645\">Source</a></span><a href=\"#impl-Shr%3Cu8%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shr.html\" title=\"trait core::ops::bit::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#645\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shr.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#645\">Source</a><a href=\"#method.shr\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shr.html#tymethod.shr\" class=\"fn\">shr</a>(self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shr.html#tymethod.shr\">Read more</a></div></details></div></details>","Shr<u8>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3Cusize%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/143802\" title=\"Tracking issue for const_ops\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#645\">Source</a></span><a href=\"#impl-Shr%3Cusize%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shr.html\" title=\"trait core::ops::bit::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#645\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shr.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#645\">Source</a><a href=\"#method.shr\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shr.html#tymethod.shr\" class=\"fn\">shr</a>(self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shr.html#tymethod.shr\">Read more</a></div></details></div></details>","Shr<usize>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/143802\" title=\"Tracking issue for const_ops\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#645\">Source</a></span><a href=\"#impl-Shr-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shr.html\" title=\"trait core::ops::bit::Shr\">Shr</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#645\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shr.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#645\">Source</a><a href=\"#method.shr\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shr.html#tymethod.shr\" class=\"fn\">shr</a>(self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shr.html#tymethod.shr\">Read more</a></div></details></div></details>","Shr","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3C%26i128%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0, const unstable\">1.22.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/143802\" title=\"Tracking issue for const_ops\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#1088\">Source</a></span><a href=\"#impl-ShrAssign%3C%26i128%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.ShrAssign.html\" title=\"trait core::ops::bit::ShrAssign\">ShrAssign</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i128.html\">i128</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#1088\">Source</a><a href=\"#method.shr_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.ShrAssign.html#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i128.html\">i128</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.ShrAssign.html#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign<&i128>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3C%26i16%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0, const unstable\">1.22.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/143802\" title=\"Tracking issue for const_ops\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#1088\">Source</a></span><a href=\"#impl-ShrAssign%3C%26i16%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.ShrAssign.html\" title=\"trait core::ops::bit::ShrAssign\">ShrAssign</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i16.html\">i16</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#1088\">Source</a><a href=\"#method.shr_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.ShrAssign.html#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i16.html\">i16</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.ShrAssign.html#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign<&i16>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3C%26i32%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0, const unstable\">1.22.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/143802\" title=\"Tracking issue for const_ops\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#1088\">Source</a></span><a href=\"#impl-ShrAssign%3C%26i32%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.ShrAssign.html\" title=\"trait core::ops::bit::ShrAssign\">ShrAssign</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#1088\">Source</a><a href=\"#method.shr_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.ShrAssign.html#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.ShrAssign.html#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign<&i32>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3C%26i64%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0, const unstable\">1.22.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/143802\" title=\"Tracking issue for const_ops\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#1088\">Source</a></span><a href=\"#impl-ShrAssign%3C%26i64%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.ShrAssign.html\" title=\"trait core::ops::bit::ShrAssign\">ShrAssign</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#1088\">Source</a><a href=\"#method.shr_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.ShrAssign.html#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i64.html\">i64</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.ShrAssign.html#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign<&i64>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3C%26i8%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0, const unstable\">1.22.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/143802\" title=\"Tracking issue for const_ops\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#1088\">Source</a></span><a href=\"#impl-ShrAssign%3C%26i8%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.ShrAssign.html\" title=\"trait core::ops::bit::ShrAssign\">ShrAssign</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#1088\">Source</a><a href=\"#method.shr_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.ShrAssign.html#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i8.html\">i8</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.ShrAssign.html#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign<&i8>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3C%26isize%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0, const unstable\">1.22.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/143802\" title=\"Tracking issue for const_ops\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#1088\">Source</a></span><a href=\"#impl-ShrAssign%3C%26isize%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.ShrAssign.html\" title=\"trait core::ops::bit::ShrAssign\">ShrAssign</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.isize.html\">isize</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#1088\">Source</a><a href=\"#method.shr_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.ShrAssign.html#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.isize.html\">isize</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.ShrAssign.html#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign<&isize>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3C%26u128%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0, const unstable\">1.22.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/143802\" title=\"Tracking issue for const_ops\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#1088\">Source</a></span><a href=\"#impl-ShrAssign%3C%26u128%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.ShrAssign.html\" title=\"trait core::ops::bit::ShrAssign\">ShrAssign</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u128.html\">u128</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#1088\">Source</a><a href=\"#method.shr_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.ShrAssign.html#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u128.html\">u128</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.ShrAssign.html#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign<&u128>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3C%26u16%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0, const unstable\">1.22.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/143802\" title=\"Tracking issue for const_ops\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#1088\">Source</a></span><a href=\"#impl-ShrAssign%3C%26u16%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.ShrAssign.html\" title=\"trait core::ops::bit::ShrAssign\">ShrAssign</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u16.html\">u16</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#1088\">Source</a><a href=\"#method.shr_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.ShrAssign.html#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u16.html\">u16</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.ShrAssign.html#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign<&u16>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3C%26u32%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0, const unstable\">1.22.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/143802\" title=\"Tracking issue for const_ops\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#1088\">Source</a></span><a href=\"#impl-ShrAssign%3C%26u32%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.ShrAssign.html\" title=\"trait core::ops::bit::ShrAssign\">ShrAssign</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#1088\">Source</a><a href=\"#method.shr_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.ShrAssign.html#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.ShrAssign.html#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign<&u32>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3C%26u64%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0, const unstable\">1.22.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/143802\" title=\"Tracking issue for const_ops\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#1088\">Source</a></span><a href=\"#impl-ShrAssign%3C%26u64%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.ShrAssign.html\" title=\"trait core::ops::bit::ShrAssign\">ShrAssign</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u64.html\">u64</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#1088\">Source</a><a href=\"#method.shr_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.ShrAssign.html#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u64.html\">u64</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.ShrAssign.html#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign<&u64>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3C%26u8%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0, const unstable\">1.22.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/143802\" title=\"Tracking issue for const_ops\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#1088\">Source</a></span><a href=\"#impl-ShrAssign%3C%26u8%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.ShrAssign.html\" title=\"trait core::ops::bit::ShrAssign\">ShrAssign</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#1088\">Source</a><a href=\"#method.shr_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.ShrAssign.html#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.ShrAssign.html#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign<&u8>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3C%26usize%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0, const unstable\">1.22.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/143802\" title=\"Tracking issue for const_ops\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#1088\">Source</a></span><a href=\"#impl-ShrAssign%3C%26usize%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.ShrAssign.html\" title=\"trait core::ops::bit::ShrAssign\">ShrAssign</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#1088\">Source</a><a href=\"#method.shr_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.ShrAssign.html#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.ShrAssign.html#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign<&usize>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3Ci128%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0, const unstable\">1.8.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/143802\" title=\"Tracking issue for const_ops\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#1088\">Source</a></span><a href=\"#impl-ShrAssign%3Ci128%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.ShrAssign.html\" title=\"trait core::ops::bit::ShrAssign\">ShrAssign</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i128.html\">i128</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#1088\">Source</a><a href=\"#method.shr_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.ShrAssign.html#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i128.html\">i128</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.ShrAssign.html#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign<i128>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3Ci16%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0, const unstable\">1.8.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/143802\" title=\"Tracking issue for const_ops\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#1088\">Source</a></span><a href=\"#impl-ShrAssign%3Ci16%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.ShrAssign.html\" title=\"trait core::ops::bit::ShrAssign\">ShrAssign</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i16.html\">i16</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#1088\">Source</a><a href=\"#method.shr_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.ShrAssign.html#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i16.html\">i16</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.ShrAssign.html#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign<i16>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3Ci64%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0, const unstable\">1.8.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/143802\" title=\"Tracking issue for const_ops\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#1088\">Source</a></span><a href=\"#impl-ShrAssign%3Ci64%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.ShrAssign.html\" title=\"trait core::ops::bit::ShrAssign\">ShrAssign</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#1088\">Source</a><a href=\"#method.shr_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.ShrAssign.html#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i64.html\">i64</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.ShrAssign.html#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign<i64>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3Ci8%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0, const unstable\">1.8.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/143802\" title=\"Tracking issue for const_ops\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#1088\">Source</a></span><a href=\"#impl-ShrAssign%3Ci8%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.ShrAssign.html\" title=\"trait core::ops::bit::ShrAssign\">ShrAssign</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#1088\">Source</a><a href=\"#method.shr_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.ShrAssign.html#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i8.html\">i8</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.ShrAssign.html#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign<i8>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3Cisize%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0, const unstable\">1.8.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/143802\" title=\"Tracking issue for const_ops\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#1088\">Source</a></span><a href=\"#impl-ShrAssign%3Cisize%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.ShrAssign.html\" title=\"trait core::ops::bit::ShrAssign\">ShrAssign</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.isize.html\">isize</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#1088\">Source</a><a href=\"#method.shr_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.ShrAssign.html#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.isize.html\">isize</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.ShrAssign.html#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign<isize>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3Cu128%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0, const unstable\">1.8.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/143802\" title=\"Tracking issue for const_ops\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#1088\">Source</a></span><a href=\"#impl-ShrAssign%3Cu128%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.ShrAssign.html\" title=\"trait core::ops::bit::ShrAssign\">ShrAssign</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u128.html\">u128</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#1088\">Source</a><a href=\"#method.shr_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.ShrAssign.html#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u128.html\">u128</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.ShrAssign.html#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign<u128>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3Cu16%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0, const unstable\">1.8.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/143802\" title=\"Tracking issue for const_ops\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#1088\">Source</a></span><a href=\"#impl-ShrAssign%3Cu16%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.ShrAssign.html\" title=\"trait core::ops::bit::ShrAssign\">ShrAssign</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u16.html\">u16</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#1088\">Source</a><a href=\"#method.shr_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.ShrAssign.html#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u16.html\">u16</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.ShrAssign.html#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign<u16>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3Cu32%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0, const unstable\">1.8.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/143802\" title=\"Tracking issue for const_ops\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#1088\">Source</a></span><a href=\"#impl-ShrAssign%3Cu32%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.ShrAssign.html\" title=\"trait core::ops::bit::ShrAssign\">ShrAssign</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#1088\">Source</a><a href=\"#method.shr_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.ShrAssign.html#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.ShrAssign.html#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign<u32>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3Cu64%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0, const unstable\">1.8.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/143802\" title=\"Tracking issue for const_ops\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#1088\">Source</a></span><a href=\"#impl-ShrAssign%3Cu64%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.ShrAssign.html\" title=\"trait core::ops::bit::ShrAssign\">ShrAssign</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u64.html\">u64</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#1088\">Source</a><a href=\"#method.shr_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.ShrAssign.html#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u64.html\">u64</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.ShrAssign.html#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign<u64>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3Cu8%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0, const unstable\">1.8.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/143802\" title=\"Tracking issue for const_ops\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#1088\">Source</a></span><a href=\"#impl-ShrAssign%3Cu8%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.ShrAssign.html\" title=\"trait core::ops::bit::ShrAssign\">ShrAssign</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#1088\">Source</a><a href=\"#method.shr_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.ShrAssign.html#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.ShrAssign.html#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign<u8>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3Cusize%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0, const unstable\">1.8.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/143802\" title=\"Tracking issue for const_ops\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#1088\">Source</a></span><a href=\"#impl-ShrAssign%3Cusize%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.ShrAssign.html\" title=\"trait core::ops::bit::ShrAssign\">ShrAssign</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#1088\">Source</a><a href=\"#method.shr_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.ShrAssign.html#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.ShrAssign.html#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign<usize>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0, const unstable\">1.8.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/143802\" title=\"Tracking issue for const_ops\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#1088\">Source</a></span><a href=\"#impl-ShrAssign-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.ShrAssign.html\" title=\"trait core::ops::bit::ShrAssign\">ShrAssign</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/bit.rs.html#1088\">Source</a><a href=\"#method.shr_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.ShrAssign.html#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.ShrAssign.html#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Signed-for-i32\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/sign.rs.html#75\">Source</a><a href=\"#impl-Signed-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://docs.rs/num-traits/0.2/num_traits/sign/trait.Signed.html\" title=\"trait num_traits::sign::Signed\">Signed</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.abs\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/sign.rs.html#75\">Source</a><a href=\"#method.abs\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/sign/trait.Signed.html#tymethod.abs\" class=\"fn\">abs</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a></h4></section></summary><div class='docblock'>Computes the absolute value. <a href=\"https://docs.rs/num-traits/0.2/num_traits/sign/trait.Signed.html#tymethod.abs\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.abs_sub\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/sign.rs.html#75\">Source</a><a href=\"#method.abs_sub\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/sign/trait.Signed.html#tymethod.abs_sub\" class=\"fn\">abs_sub</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a></h4></section></summary><div class='docblock'>The positive difference of two numbers. <a href=\"https://docs.rs/num-traits/0.2/num_traits/sign/trait.Signed.html#tymethod.abs_sub\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.signum\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/sign.rs.html#75\">Source</a><a href=\"#method.signum\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/sign/trait.Signed.html#tymethod.signum\" class=\"fn\">signum</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a></h4></section></summary><div class='docblock'>Returns the sign of the number. <a href=\"https://docs.rs/num-traits/0.2/num_traits/sign/trait.Signed.html#tymethod.signum\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_positive\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/sign.rs.html#75\">Source</a><a href=\"#method.is_positive\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/sign/trait.Signed.html#tymethod.is_positive\" class=\"fn\">is_positive</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Returns true if the number is positive and false if the number is zero or negative.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_negative\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/sign.rs.html#75\">Source</a><a href=\"#method.is_negative\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/sign/trait.Signed.html#tymethod.is_negative\" class=\"fn\">is_negative</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Returns true if the number is negative and false if the number is zero or positive.</div></details></div></details>","Signed","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SimdElement-for-i32\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/portable-simd/crates/core_simd/src/vector.rs.html#1163\">Source</a><a href=\"#impl-SimdElement-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/core_simd/vector/trait.SimdElement.html\" title=\"trait core::core_simd::vector::SimdElement\">SimdElement</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Mask\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/portable-simd/crates/core_simd/src/vector.rs.html#1164\">Source</a><a href=\"#associatedtype.Mask\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/core_simd/vector/trait.SimdElement.html#associatedtype.Mask\" class=\"associatedtype\">Mask</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>)</span></div></span><div class='docblock'>The mask element type corresponding to this element type.</div></details></div></details>","SimdElement","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SizedSample-for-i32\" class=\"impl\"><a href=\"#impl-SizedSample-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl SizedSample for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><section id=\"associatedconstant.FORMAT\" class=\"associatedconstant trait-impl\"><a href=\"#associatedconstant.FORMAT\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a class=\"constant\">FORMAT</a>: SampleFormat = SampleFormat::I32</h4></section></div></details>","SizedSample","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Step-for-i32\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/iter/range.rs.html#427-430\">Source</a><a href=\"#impl-Step-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/range/trait.Step.html\" title=\"trait core::iter::range::Step\">Step</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.forward\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/iter/range.rs.html#427-430\">Source</a><a href=\"#method.forward\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/iter/range/trait.Step.html#method.forward\" class=\"fn\">forward</a>(start: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>step_trait</code>)</span></div></span><div class='docblock'>Returns the value that would be obtained by taking the <em>successor</em>\nof <code>self</code> <code>count</code> times. <a href=\"https://doc.rust-lang.org/nightly/core/iter/range/trait.Step.html#method.forward\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.backward\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/iter/range.rs.html#427-430\">Source</a><a href=\"#method.backward\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/iter/range/trait.Step.html#method.backward\" class=\"fn\">backward</a>(start: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>step_trait</code>)</span></div></span><div class='docblock'>Returns the value that would be obtained by taking the <em>predecessor</em>\nof <code>self</code> <code>count</code> times. <a href=\"https://doc.rust-lang.org/nightly/core/iter/range/trait.Step.html#method.backward\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.forward_unchecked\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/iter/range.rs.html#427-430\">Source</a><a href=\"#method.forward_unchecked\" class=\"anchor\">§</a><h4 class=\"code-header\">unsafe fn <a href=\"https://doc.rust-lang.org/nightly/core/iter/range/trait.Step.html#method.forward_unchecked\" class=\"fn\">forward_unchecked</a>(start: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>step_trait</code>)</span></div></span><div class='docblock'>Returns the value that would be obtained by taking the <em>successor</em>\nof <code>self</code> <code>count</code> times. <a href=\"https://doc.rust-lang.org/nightly/core/iter/range/trait.Step.html#method.forward_unchecked\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.backward_unchecked\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/iter/range.rs.html#427-430\">Source</a><a href=\"#method.backward_unchecked\" class=\"anchor\">§</a><h4 class=\"code-header\">unsafe fn <a href=\"https://doc.rust-lang.org/nightly/core/iter/range/trait.Step.html#method.backward_unchecked\" class=\"fn\">backward_unchecked</a>(start: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>step_trait</code>)</span></div></span><div class='docblock'>Returns the value that would be obtained by taking the <em>predecessor</em>\nof <code>self</code> <code>count</code> times. <a href=\"https://doc.rust-lang.org/nightly/core/iter/range/trait.Step.html#method.backward_unchecked\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.steps_between\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/iter/range.rs.html#427-430\">Source</a><a href=\"#method.steps_between\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/iter/range/trait.Step.html#tymethod.steps_between\" class=\"fn\">steps_between</a>(start: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>, end: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>) -&gt; (<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, <a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt;) <a href=\"#\" class=\"tooltip\" data-notable-ty=\"(usize, Option&lt;usize&gt;)\">ⓘ</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>step_trait</code>)</span></div></span><div class='docblock'>Returns the bounds on the number of <em>successor</em> steps required to get from <code>start</code> to <code>end</code>\nlike <a href=\"devela/all/trait.Iterator.html#method.size_hint\" title=\"method devela::all::Iterator::size_hint\"><code>Iterator::size_hint()</code></a>. <a href=\"https://doc.rust-lang.org/nightly/core/iter/range/trait.Step.html#tymethod.steps_between\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.forward_checked\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/iter/range.rs.html#427-430\">Source</a><a href=\"#method.forward_checked\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/iter/range/trait.Step.html#tymethod.forward_checked\" class=\"fn\">forward_checked</a>(start: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Option&lt;i32&gt;\">ⓘ</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>step_trait</code>)</span></div></span><div class='docblock'>Returns the value that would be obtained by taking the <em>successor</em>\nof <code>self</code> <code>count</code> times. <a href=\"https://doc.rust-lang.org/nightly/core/iter/range/trait.Step.html#tymethod.forward_checked\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.backward_checked\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/iter/range.rs.html#427-430\">Source</a><a href=\"#method.backward_checked\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/iter/range/trait.Step.html#tymethod.backward_checked\" class=\"fn\">backward_checked</a>(start: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Option&lt;i32&gt;\">ⓘ</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>step_trait</code>)</span></div></span><div class='docblock'>Returns the value that would be obtained by taking the <em>predecessor</em>\nof <code>self</code> <code>count</code> times. <a href=\"https://doc.rust-lang.org/nightly/core/iter/range/trait.Step.html#tymethod.backward_checked\">Read more</a></div></details></div></details>","Step","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Sub%3C%26BigInt%3E-for-i32\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-bigint/0.4/src/num_bigint/bigint/subtraction.rs.html#191\">Source</a><a href=\"#impl-Sub%3C%26BigInt%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"devela/all/trait.Sub.html\" title=\"trait devela::all::Sub\">Sub</a>&lt;&amp;<a class=\"struct\" href=\"https://docs.rs/num-bigint/0.4/num_bigint/bigint/struct.BigInt.html\" title=\"struct num_bigint::bigint::BigInt\">BigInt</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-bigint/0.4/src/num_bigint/bigint/subtraction.rs.html#191\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"devela/all/trait.Sub.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"https://docs.rs/num-bigint/0.4/num_bigint/bigint/struct.BigInt.html\" title=\"struct num_bigint::bigint::BigInt\">BigInt</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>-</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.sub\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-bigint/0.4/src/num_bigint/bigint/subtraction.rs.html#191\">Source</a><a href=\"#method.sub\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Sub.html#tymethod.sub\" class=\"fn\">sub</a>(self, other: &amp;<a class=\"struct\" href=\"https://docs.rs/num-bigint/0.4/num_bigint/bigint/struct.BigInt.html\" title=\"struct num_bigint::bigint::BigInt\">BigInt</a>) -&gt; <a class=\"struct\" href=\"https://docs.rs/num-bigint/0.4/num_bigint/bigint/struct.BigInt.html\" title=\"struct num_bigint::bigint::BigInt\">BigInt</a></h4></section></summary><div class='docblock'>Performs the <code>-</code> operation. <a href=\"devela/all/trait.Sub.html#tymethod.sub\">Read more</a></div></details></div></details>","Sub<&BigInt>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Sub%3C%26IVec2%3E-for-i32\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/glam/0.30.5/src/glam/i32/ivec2.rs.html#1331\">Source</a><a href=\"#impl-Sub%3C%26IVec2%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"devela/all/trait.Sub.html\" title=\"trait devela::all::Sub\">Sub</a>&lt;&amp;<a class=\"struct\" href=\"https://docs.rs/glam/0.30.5/glam/i32/ivec2/struct.IVec2.html\" title=\"struct glam::i32::ivec2::IVec2\">IVec2</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/glam/0.30.5/src/glam/i32/ivec2.rs.html#1332\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"devela/all/trait.Sub.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"https://docs.rs/glam/0.30.5/glam/i32/ivec2/struct.IVec2.html\" title=\"struct glam::i32::ivec2::IVec2\">IVec2</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>-</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.sub\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/glam/0.30.5/src/glam/i32/ivec2.rs.html#1334\">Source</a><a href=\"#method.sub\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Sub.html#tymethod.sub\" class=\"fn\">sub</a>(self, rhs: &amp;<a class=\"struct\" href=\"https://docs.rs/glam/0.30.5/glam/i32/ivec2/struct.IVec2.html\" title=\"struct glam::i32::ivec2::IVec2\">IVec2</a>) -&gt; <a class=\"struct\" href=\"https://docs.rs/glam/0.30.5/glam/i32/ivec2/struct.IVec2.html\" title=\"struct glam::i32::ivec2::IVec2\">IVec2</a></h4></section></summary><div class='docblock'>Performs the <code>-</code> operation. <a href=\"devela/all/trait.Sub.html#tymethod.sub\">Read more</a></div></details></div></details>","Sub<&IVec2>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Sub%3C%26IVec3%3E-for-i32\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/glam/0.30.5/src/glam/i32/ivec3.rs.html#1441\">Source</a><a href=\"#impl-Sub%3C%26IVec3%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"devela/all/trait.Sub.html\" title=\"trait devela::all::Sub\">Sub</a>&lt;&amp;<a class=\"struct\" href=\"https://docs.rs/glam/0.30.5/glam/i32/ivec3/struct.IVec3.html\" title=\"struct glam::i32::ivec3::IVec3\">IVec3</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/glam/0.30.5/src/glam/i32/ivec3.rs.html#1442\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"devela/all/trait.Sub.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"https://docs.rs/glam/0.30.5/glam/i32/ivec3/struct.IVec3.html\" title=\"struct glam::i32::ivec3::IVec3\">IVec3</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>-</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.sub\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/glam/0.30.5/src/glam/i32/ivec3.rs.html#1444\">Source</a><a href=\"#method.sub\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Sub.html#tymethod.sub\" class=\"fn\">sub</a>(self, rhs: &amp;<a class=\"struct\" href=\"https://docs.rs/glam/0.30.5/glam/i32/ivec3/struct.IVec3.html\" title=\"struct glam::i32::ivec3::IVec3\">IVec3</a>) -&gt; <a class=\"struct\" href=\"https://docs.rs/glam/0.30.5/glam/i32/ivec3/struct.IVec3.html\" title=\"struct glam::i32::ivec3::IVec3\">IVec3</a></h4></section></summary><div class='docblock'>Performs the <code>-</code> operation. <a href=\"devela/all/trait.Sub.html#tymethod.sub\">Read more</a></div></details></div></details>","Sub<&IVec3>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Sub%3C%26IVec4%3E-for-i32\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/glam/0.30.5/src/glam/i32/ivec4.rs.html#1541\">Source</a><a href=\"#impl-Sub%3C%26IVec4%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"devela/all/trait.Sub.html\" title=\"trait devela::all::Sub\">Sub</a>&lt;&amp;<a class=\"struct\" href=\"https://docs.rs/glam/0.30.5/glam/i32/ivec4/struct.IVec4.html\" title=\"struct glam::i32::ivec4::IVec4\">IVec4</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/glam/0.30.5/src/glam/i32/ivec4.rs.html#1542\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"devela/all/trait.Sub.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"https://docs.rs/glam/0.30.5/glam/i32/ivec4/struct.IVec4.html\" title=\"struct glam::i32::ivec4::IVec4\">IVec4</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>-</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.sub\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/glam/0.30.5/src/glam/i32/ivec4.rs.html#1544\">Source</a><a href=\"#method.sub\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Sub.html#tymethod.sub\" class=\"fn\">sub</a>(self, rhs: &amp;<a class=\"struct\" href=\"https://docs.rs/glam/0.30.5/glam/i32/ivec4/struct.IVec4.html\" title=\"struct glam::i32::ivec4::IVec4\">IVec4</a>) -&gt; <a class=\"struct\" href=\"https://docs.rs/glam/0.30.5/glam/i32/ivec4/struct.IVec4.html\" title=\"struct glam::i32::ivec4::IVec4\">IVec4</a></h4></section></summary><div class='docblock'>Performs the <code>-</code> operation. <a href=\"devela/all/trait.Sub.html#tymethod.sub\">Read more</a></div></details></div></details>","Sub<&IVec4>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Sub%3C%26i32%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/143802\" title=\"Tracking issue for const_ops\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/arith.rs.html#229\">Source</a></span><a href=\"#impl-Sub%3C%26i32%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"devela/all/trait.Sub.html\" title=\"trait devela::all::Sub\">Sub</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/arith.rs.html#229\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"devela/all/trait.Sub.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> as <a class=\"trait\" href=\"devela/all/trait.Sub.html\" title=\"trait devela::all::Sub\">Sub</a>&gt;::<a class=\"associatedtype\" href=\"devela/all/trait.Sub.html#associatedtype.Output\" title=\"type devela::all::Sub::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>-</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.sub\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/arith.rs.html#229\">Source</a><a href=\"#method.sub\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Sub.html#tymethod.sub\" class=\"fn\">sub</a>(self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>) -&gt; &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> as <a class=\"trait\" href=\"devela/all/trait.Sub.html\" title=\"trait devela::all::Sub\">Sub</a>&gt;::<a class=\"associatedtype\" href=\"devela/all/trait.Sub.html#associatedtype.Output\" title=\"type devela::all::Sub::Output\">Output</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&lt;i32 as Sub&gt;::Output\">ⓘ</a></h4></section></summary><div class='docblock'>Performs the <code>-</code> operation. <a href=\"devela/all/trait.Sub.html#tymethod.sub\">Read more</a></div></details></div></details>","Sub<&i32>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Sub%3CBigInt%3E-for-i32\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-bigint/0.4/src/num_bigint/bigint/subtraction.rs.html#216\">Source</a><a href=\"#impl-Sub%3CBigInt%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"devela/all/trait.Sub.html\" title=\"trait devela::all::Sub\">Sub</a>&lt;<a class=\"struct\" href=\"https://docs.rs/num-bigint/0.4/num_bigint/bigint/struct.BigInt.html\" title=\"struct num_bigint::bigint::BigInt\">BigInt</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-bigint/0.4/src/num_bigint/bigint/subtraction.rs.html#217\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"devela/all/trait.Sub.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"https://docs.rs/num-bigint/0.4/num_bigint/bigint/struct.BigInt.html\" title=\"struct num_bigint::bigint::BigInt\">BigInt</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>-</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.sub\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-bigint/0.4/src/num_bigint/bigint/subtraction.rs.html#220\">Source</a><a href=\"#method.sub\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Sub.html#tymethod.sub\" class=\"fn\">sub</a>(self, other: <a class=\"struct\" href=\"https://docs.rs/num-bigint/0.4/num_bigint/bigint/struct.BigInt.html\" title=\"struct num_bigint::bigint::BigInt\">BigInt</a>) -&gt; <a class=\"struct\" href=\"https://docs.rs/num-bigint/0.4/num_bigint/bigint/struct.BigInt.html\" title=\"struct num_bigint::bigint::BigInt\">BigInt</a></h4></section></summary><div class='docblock'>Performs the <code>-</code> operation. <a href=\"devela/all/trait.Sub.html#tymethod.sub\">Read more</a></div></details></div></details>","Sub<BigInt>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Sub%3CIVec2%3E-for-i32\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/glam/0.30.5/src/glam/i32/ivec2.rs.html#1320\">Source</a><a href=\"#impl-Sub%3CIVec2%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"devela/all/trait.Sub.html\" title=\"trait devela::all::Sub\">Sub</a>&lt;<a class=\"struct\" href=\"https://docs.rs/glam/0.30.5/glam/i32/ivec2/struct.IVec2.html\" title=\"struct glam::i32::ivec2::IVec2\">IVec2</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/glam/0.30.5/src/glam/i32/ivec2.rs.html#1321\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"devela/all/trait.Sub.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"https://docs.rs/glam/0.30.5/glam/i32/ivec2/struct.IVec2.html\" title=\"struct glam::i32::ivec2::IVec2\">IVec2</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>-</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.sub\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/glam/0.30.5/src/glam/i32/ivec2.rs.html#1323\">Source</a><a href=\"#method.sub\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Sub.html#tymethod.sub\" class=\"fn\">sub</a>(self, rhs: <a class=\"struct\" href=\"https://docs.rs/glam/0.30.5/glam/i32/ivec2/struct.IVec2.html\" title=\"struct glam::i32::ivec2::IVec2\">IVec2</a>) -&gt; <a class=\"struct\" href=\"https://docs.rs/glam/0.30.5/glam/i32/ivec2/struct.IVec2.html\" title=\"struct glam::i32::ivec2::IVec2\">IVec2</a></h4></section></summary><div class='docblock'>Performs the <code>-</code> operation. <a href=\"devela/all/trait.Sub.html#tymethod.sub\">Read more</a></div></details></div></details>","Sub<IVec2>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Sub%3CIVec3%3E-for-i32\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/glam/0.30.5/src/glam/i32/ivec3.rs.html#1429\">Source</a><a href=\"#impl-Sub%3CIVec3%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"devela/all/trait.Sub.html\" title=\"trait devela::all::Sub\">Sub</a>&lt;<a class=\"struct\" href=\"https://docs.rs/glam/0.30.5/glam/i32/ivec3/struct.IVec3.html\" title=\"struct glam::i32::ivec3::IVec3\">IVec3</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/glam/0.30.5/src/glam/i32/ivec3.rs.html#1430\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"devela/all/trait.Sub.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"https://docs.rs/glam/0.30.5/glam/i32/ivec3/struct.IVec3.html\" title=\"struct glam::i32::ivec3::IVec3\">IVec3</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>-</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.sub\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/glam/0.30.5/src/glam/i32/ivec3.rs.html#1432\">Source</a><a href=\"#method.sub\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Sub.html#tymethod.sub\" class=\"fn\">sub</a>(self, rhs: <a class=\"struct\" href=\"https://docs.rs/glam/0.30.5/glam/i32/ivec3/struct.IVec3.html\" title=\"struct glam::i32::ivec3::IVec3\">IVec3</a>) -&gt; <a class=\"struct\" href=\"https://docs.rs/glam/0.30.5/glam/i32/ivec3/struct.IVec3.html\" title=\"struct glam::i32::ivec3::IVec3\">IVec3</a></h4></section></summary><div class='docblock'>Performs the <code>-</code> operation. <a href=\"devela/all/trait.Sub.html#tymethod.sub\">Read more</a></div></details></div></details>","Sub<IVec3>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Sub%3CIVec4%3E-for-i32\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/glam/0.30.5/src/glam/i32/ivec4.rs.html#1528\">Source</a><a href=\"#impl-Sub%3CIVec4%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"devela/all/trait.Sub.html\" title=\"trait devela::all::Sub\">Sub</a>&lt;<a class=\"struct\" href=\"https://docs.rs/glam/0.30.5/glam/i32/ivec4/struct.IVec4.html\" title=\"struct glam::i32::ivec4::IVec4\">IVec4</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/glam/0.30.5/src/glam/i32/ivec4.rs.html#1529\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"devela/all/trait.Sub.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"https://docs.rs/glam/0.30.5/glam/i32/ivec4/struct.IVec4.html\" title=\"struct glam::i32::ivec4::IVec4\">IVec4</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>-</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.sub\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/glam/0.30.5/src/glam/i32/ivec4.rs.html#1531\">Source</a><a href=\"#method.sub\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Sub.html#tymethod.sub\" class=\"fn\">sub</a>(self, rhs: <a class=\"struct\" href=\"https://docs.rs/glam/0.30.5/glam/i32/ivec4/struct.IVec4.html\" title=\"struct glam::i32::ivec4::IVec4\">IVec4</a>) -&gt; <a class=\"struct\" href=\"https://docs.rs/glam/0.30.5/glam/i32/ivec4/struct.IVec4.html\" title=\"struct glam::i32::ivec4::IVec4\">IVec4</a></h4></section></summary><div class='docblock'>Performs the <code>-</code> operation. <a href=\"devela/all/trait.Sub.html#tymethod.sub\">Read more</a></div></details></div></details>","Sub<IVec4>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Sub%3Ci32x4%3E-for-i32\" class=\"impl\"><a href=\"#impl-Sub%3Ci32x4%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"devela/all/trait.Sub.html\" title=\"trait devela::all::Sub\">Sub</a>&lt;i32x4&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"devela/all/trait.Sub.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = i32x4</h4></section></summary><div class='docblock'>The resulting type after applying the <code>-</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.sub\" class=\"method trait-impl\"><a href=\"#method.sub\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Sub.html#tymethod.sub\" class=\"fn\">sub</a>(self, rhs: i32x4) -&gt; &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> as <a class=\"trait\" href=\"devela/all/trait.Sub.html\" title=\"trait devela::all::Sub\">Sub</a>&lt;i32x4&gt;&gt;::<a class=\"associatedtype\" href=\"devela/all/trait.Sub.html#associatedtype.Output\" title=\"type devela::all::Sub::Output\">Output</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&lt;i32 as Sub&lt;i32x4&gt;&gt;::Output\">ⓘ</a></h4></section></summary><div class='docblock'>Performs the <code>-</code> operation. <a href=\"devela/all/trait.Sub.html#tymethod.sub\">Read more</a></div></details></div></details>","Sub<i32x4>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Sub%3Ci32x8%3E-for-i32\" class=\"impl\"><a href=\"#impl-Sub%3Ci32x8%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"devela/all/trait.Sub.html\" title=\"trait devela::all::Sub\">Sub</a>&lt;i32x8&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"devela/all/trait.Sub.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = i32x8</h4></section></summary><div class='docblock'>The resulting type after applying the <code>-</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.sub\" class=\"method trait-impl\"><a href=\"#method.sub\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Sub.html#tymethod.sub\" class=\"fn\">sub</a>(self, rhs: i32x8) -&gt; &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> as <a class=\"trait\" href=\"devela/all/trait.Sub.html\" title=\"trait devela::all::Sub\">Sub</a>&lt;i32x8&gt;&gt;::<a class=\"associatedtype\" href=\"devela/all/trait.Sub.html#associatedtype.Output\" title=\"type devela::all::Sub::Output\">Output</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&lt;i32 as Sub&lt;i32x8&gt;&gt;::Output\">ⓘ</a></h4></section></summary><div class='docblock'>Performs the <code>-</code> operation. <a href=\"devela/all/trait.Sub.html#tymethod.sub\">Read more</a></div></details></div></details>","Sub<i32x8>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Sub-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/143802\" title=\"Tracking issue for const_ops\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/arith.rs.html#229\">Source</a></span><a href=\"#impl-Sub-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"devela/all/trait.Sub.html\" title=\"trait devela::all::Sub\">Sub</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/arith.rs.html#229\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"devela/all/trait.Sub.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>-</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.sub\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/arith.rs.html#229\">Source</a><a href=\"#method.sub\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Sub.html#tymethod.sub\" class=\"fn\">sub</a>(self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a></h4></section></summary><div class='docblock'>Performs the <code>-</code> operation. <a href=\"devela/all/trait.Sub.html#tymethod.sub\">Read more</a></div></details></div></details>","Sub","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SubAssign%3C%26i32%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0, const unstable\">1.22.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/143802\" title=\"Tracking issue for const_ops\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/arith.rs.html#879\">Source</a></span><a href=\"#impl-SubAssign%3C%26i32%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"devela/all/trait.SubAssign.html\" title=\"trait devela::all::SubAssign\">SubAssign</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.sub_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/arith.rs.html#879\">Source</a><a href=\"#method.sub_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.SubAssign.html#tymethod.sub_assign\" class=\"fn\">sub_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>)</h4></section></summary><div class='docblock'>Performs the <code>-=</code> operation. <a href=\"devela/all/trait.SubAssign.html#tymethod.sub_assign\">Read more</a></div></details></div></details>","SubAssign<&i32>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SubAssign-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0, const unstable\">1.8.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/143802\" title=\"Tracking issue for const_ops\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/arith.rs.html#879\">Source</a></span><a href=\"#impl-SubAssign-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"devela/all/trait.SubAssign.html\" title=\"trait devela::all::SubAssign\">SubAssign</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.sub_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/arith.rs.html#879\">Source</a><a href=\"#method.sub_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.SubAssign.html#tymethod.sub_assign\" class=\"fn\">sub_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>)</h4></section></summary><div class='docblock'>Performs the <code>-=</code> operation. <a href=\"devela/all/trait.SubAssign.html#tymethod.sub_assign\">Read more</a></div></details></div></details>","SubAssign","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ToBigInt-for-i32\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-bigint/0.4/src/num_bigint/bigint/convert.rs.html#349\">Source</a><a href=\"#impl-ToBigInt-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://docs.rs/num-bigint/0.4/num_bigint/bigint/trait.ToBigInt.html\" title=\"trait num_bigint::bigint::ToBigInt\">ToBigInt</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_bigint\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-bigint/0.4/src/num_bigint/bigint/convert.rs.html#349\">Source</a><a href=\"#method.to_bigint\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-bigint/0.4/num_bigint/bigint/trait.ToBigInt.html#tymethod.to_bigint\" class=\"fn\">to_bigint</a>(&amp;self) -&gt; <a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;<a class=\"struct\" href=\"https://docs.rs/num-bigint/0.4/num_bigint/bigint/struct.BigInt.html\" title=\"struct num_bigint::bigint::BigInt\">BigInt</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Option&lt;BigInt&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Converts the value of <code>self</code> to a <a href=\"https://docs.rs/num-bigint/0.4/num_bigint/bigint/struct.BigInt.html\" title=\"struct num_bigint::bigint::BigInt\"><code>BigInt</code></a>.</div></details></div></details>","ToBigInt","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ToBigUint-for-i32\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-bigint/0.4/src/num_bigint/biguint/convert.rs.html#576\">Source</a><a href=\"#impl-ToBigUint-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://docs.rs/num-bigint/0.4/num_bigint/biguint/trait.ToBigUint.html\" title=\"trait num_bigint::biguint::ToBigUint\">ToBigUint</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_biguint\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-bigint/0.4/src/num_bigint/biguint/convert.rs.html#576\">Source</a><a href=\"#method.to_biguint\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-bigint/0.4/num_bigint/biguint/trait.ToBigUint.html#tymethod.to_biguint\" class=\"fn\">to_biguint</a>(&amp;self) -&gt; <a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;<a class=\"struct\" href=\"https://docs.rs/num-bigint/0.4/num_bigint/biguint/struct.BigUint.html\" title=\"struct num_bigint::biguint::BigUint\">BigUint</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Option&lt;BigUint&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Converts the value of <code>self</code> to a <a href=\"https://docs.rs/num-bigint/0.4/num_bigint/biguint/struct.BigUint.html\" title=\"struct num_bigint::biguint::BigUint\"><code>BigUint</code></a>.</div></details></div></details>","ToBigUint","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ToBytes-for-i32\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/ops/bytes.rs.html#247\">Source</a><a href=\"#impl-ToBytes-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://docs.rs/num-traits/0.2/num_traits/ops/bytes/trait.ToBytes.html\" title=\"trait num_traits::ops::bytes::ToBytes\">ToBytes</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><section id=\"associatedtype.Bytes\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/ops/bytes.rs.html#247\">Source</a><a href=\"#associatedtype.Bytes\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://docs.rs/num-traits/0.2/num_traits/ops/bytes/trait.ToBytes.html#associatedtype.Bytes\" class=\"associatedtype\">Bytes</a> = [<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">4</a>]</h4></section><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_be_bytes\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/ops/bytes.rs.html#247\">Source</a><a href=\"#method.to_be_bytes\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/ops/bytes/trait.ToBytes.html#tymethod.to_be_bytes\" class=\"fn\">to_be_bytes</a>(&amp;self) -&gt; &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> as <a class=\"trait\" href=\"https://docs.rs/num-traits/0.2/num_traits/ops/bytes/trait.ToBytes.html\" title=\"trait num_traits::ops::bytes::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"https://docs.rs/num-traits/0.2/num_traits/ops/bytes/trait.ToBytes.html#associatedtype.Bytes\" title=\"type num_traits::ops::bytes::ToBytes::Bytes\">Bytes</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&lt;i32 as ToBytes&gt;::Bytes\">ⓘ</a></h4></section></summary><div class='docblock'>Return the memory representation of this number as a byte array in big-endian byte order. <a href=\"https://docs.rs/num-traits/0.2/num_traits/ops/bytes/trait.ToBytes.html#tymethod.to_be_bytes\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_le_bytes\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/ops/bytes.rs.html#247\">Source</a><a href=\"#method.to_le_bytes\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/ops/bytes/trait.ToBytes.html#tymethod.to_le_bytes\" class=\"fn\">to_le_bytes</a>(&amp;self) -&gt; &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> as <a class=\"trait\" href=\"https://docs.rs/num-traits/0.2/num_traits/ops/bytes/trait.ToBytes.html\" title=\"trait num_traits::ops::bytes::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"https://docs.rs/num-traits/0.2/num_traits/ops/bytes/trait.ToBytes.html#associatedtype.Bytes\" title=\"type num_traits::ops::bytes::ToBytes::Bytes\">Bytes</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&lt;i32 as ToBytes&gt;::Bytes\">ⓘ</a></h4></section></summary><div class='docblock'>Return the memory representation of this number as a byte array in little-endian byte order. <a href=\"https://docs.rs/num-traits/0.2/num_traits/ops/bytes/trait.ToBytes.html#tymethod.to_le_bytes\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_ne_bytes\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/ops/bytes.rs.html#247\">Source</a><a href=\"#method.to_ne_bytes\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/ops/bytes/trait.ToBytes.html#method.to_ne_bytes\" class=\"fn\">to_ne_bytes</a>(&amp;self) -&gt; &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> as <a class=\"trait\" href=\"https://docs.rs/num-traits/0.2/num_traits/ops/bytes/trait.ToBytes.html\" title=\"trait num_traits::ops::bytes::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"https://docs.rs/num-traits/0.2/num_traits/ops/bytes/trait.ToBytes.html#associatedtype.Bytes\" title=\"type num_traits::ops::bytes::ToBytes::Bytes\">Bytes</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&lt;i32 as ToBytes&gt;::Bytes\">ⓘ</a></h4></section></summary><div class='docblock'>Return the memory representation of this number as a byte array in native byte order. <a href=\"https://docs.rs/num-traits/0.2/num_traits/ops/bytes/trait.ToBytes.html#method.to_ne_bytes\">Read more</a></div></details></div></details>","ToBytes","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ToPrimitive-for-i32\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/cast.rs.html#195\">Source</a><a href=\"#impl-ToPrimitive-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://docs.rs/num-traits/0.2/num_traits/cast/trait.ToPrimitive.html\" title=\"trait num_traits::cast::ToPrimitive\">ToPrimitive</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_isize\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/cast.rs.html#195\">Source</a><a href=\"#method.to_isize\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/cast/trait.ToPrimitive.html#method.to_isize\" class=\"fn\">to_isize</a>(&amp;self) -&gt; <a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.isize.html\">isize</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Option&lt;isize&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Converts the value of <code>self</code> to an <code>isize</code>. If the value cannot be\nrepresented by an <code>isize</code>, then <code>None</code> is returned.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_i8\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/cast.rs.html#195\">Source</a><a href=\"#method.to_i8\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/cast/trait.ToPrimitive.html#method.to_i8\" class=\"fn\">to_i8</a>(&amp;self) -&gt; <a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i8.html\">i8</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Option&lt;i8&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Converts the value of <code>self</code> to an <code>i8</code>. If the value cannot be\nrepresented by an <code>i8</code>, then <code>None</code> is returned.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_i16\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/cast.rs.html#195\">Source</a><a href=\"#method.to_i16\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/cast/trait.ToPrimitive.html#method.to_i16\" class=\"fn\">to_i16</a>(&amp;self) -&gt; <a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i16.html\">i16</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Option&lt;i16&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Converts the value of <code>self</code> to an <code>i16</code>. If the value cannot be\nrepresented by an <code>i16</code>, then <code>None</code> is returned.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_i32\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/cast.rs.html#195\">Source</a><a href=\"#method.to_i32\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/cast/trait.ToPrimitive.html#method.to_i32\" class=\"fn\">to_i32</a>(&amp;self) -&gt; <a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Option&lt;i32&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Converts the value of <code>self</code> to an <code>i32</code>. If the value cannot be\nrepresented by an <code>i32</code>, then <code>None</code> is returned.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_i64\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/cast.rs.html#195\">Source</a><a href=\"#method.to_i64\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/cast/trait.ToPrimitive.html#tymethod.to_i64\" class=\"fn\">to_i64</a>(&amp;self) -&gt; <a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i64.html\">i64</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Option&lt;i64&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Converts the value of <code>self</code> to an <code>i64</code>. If the value cannot be\nrepresented by an <code>i64</code>, then <code>None</code> is returned.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_i128\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/cast.rs.html#195\">Source</a><a href=\"#method.to_i128\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/cast/trait.ToPrimitive.html#method.to_i128\" class=\"fn\">to_i128</a>(&amp;self) -&gt; <a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i128.html\">i128</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Option&lt;i128&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Converts the value of <code>self</code> to an <code>i128</code>. If the value cannot be\nrepresented by an <code>i128</code> (<code>i64</code> under the default implementation), then\n<code>None</code> is returned. <a href=\"https://docs.rs/num-traits/0.2/num_traits/cast/trait.ToPrimitive.html#method.to_i128\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_usize\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/cast.rs.html#195\">Source</a><a href=\"#method.to_usize\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/cast/trait.ToPrimitive.html#method.to_usize\" class=\"fn\">to_usize</a>(&amp;self) -&gt; <a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Option&lt;usize&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Converts the value of <code>self</code> to a <code>usize</code>. If the value cannot be\nrepresented by a <code>usize</code>, then <code>None</code> is returned.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_u8\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/cast.rs.html#195\">Source</a><a href=\"#method.to_u8\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/cast/trait.ToPrimitive.html#method.to_u8\" class=\"fn\">to_u8</a>(&amp;self) -&gt; <a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Option&lt;u8&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Converts the value of <code>self</code> to a <code>u8</code>. If the value cannot be\nrepresented by a <code>u8</code>, then <code>None</code> is returned.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_u16\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/cast.rs.html#195\">Source</a><a href=\"#method.to_u16\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/cast/trait.ToPrimitive.html#method.to_u16\" class=\"fn\">to_u16</a>(&amp;self) -&gt; <a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u16.html\">u16</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Option&lt;u16&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Converts the value of <code>self</code> to a <code>u16</code>. If the value cannot be\nrepresented by a <code>u16</code>, then <code>None</code> is returned.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_u32\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/cast.rs.html#195\">Source</a><a href=\"#method.to_u32\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/cast/trait.ToPrimitive.html#method.to_u32\" class=\"fn\">to_u32</a>(&amp;self) -&gt; <a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Option&lt;u32&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Converts the value of <code>self</code> to a <code>u32</code>. If the value cannot be\nrepresented by a <code>u32</code>, then <code>None</code> is returned.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_u64\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/cast.rs.html#195\">Source</a><a href=\"#method.to_u64\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/cast/trait.ToPrimitive.html#tymethod.to_u64\" class=\"fn\">to_u64</a>(&amp;self) -&gt; <a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u64.html\">u64</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Option&lt;u64&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Converts the value of <code>self</code> to a <code>u64</code>. If the value cannot be\nrepresented by a <code>u64</code>, then <code>None</code> is returned.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_u128\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/cast.rs.html#195\">Source</a><a href=\"#method.to_u128\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/cast/trait.ToPrimitive.html#method.to_u128\" class=\"fn\">to_u128</a>(&amp;self) -&gt; <a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u128.html\">u128</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Option&lt;u128&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Converts the value of <code>self</code> to a <code>u128</code>. If the value cannot be\nrepresented by a <code>u128</code> (<code>u64</code> under the default implementation), then\n<code>None</code> is returned. <a href=\"https://docs.rs/num-traits/0.2/num_traits/cast/trait.ToPrimitive.html#method.to_u128\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_f32\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/cast.rs.html#195\">Source</a><a href=\"#method.to_f32\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/cast/trait.ToPrimitive.html#method.to_f32\" class=\"fn\">to_f32</a>(&amp;self) -&gt; <a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.f32.html\">f32</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Option&lt;f32&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Converts the value of <code>self</code> to an <code>f32</code>. Overflows may map to positive\nor negative inifinity, otherwise <code>None</code> is returned if the value cannot\nbe represented by an <code>f32</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_f64\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/cast.rs.html#195\">Source</a><a href=\"#method.to_f64\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/cast/trait.ToPrimitive.html#method.to_f64\" class=\"fn\">to_f64</a>(&amp;self) -&gt; <a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.f64.html\">f64</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Option&lt;f64&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Converts the value of <code>self</code> to an <code>f64</code>. Overflows may map to positive\nor negative inifinity, otherwise <code>None</code> is returned if the value cannot\nbe represented by an <code>f64</code>. <a href=\"https://docs.rs/num-traits/0.2/num_traits/cast/trait.ToPrimitive.html#method.to_f64\">Read more</a></div></details></div></details>","ToPrimitive","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ToSpan-for-i32\" class=\"impl\"><a href=\"#impl-ToSpan-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl ToSpan for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.years\" class=\"method trait-impl\"><a href=\"#method.years\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">years</a>(self) -&gt; Span</h4></section></summary><div class='docblock'>Create a new span from this integer in units of years. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.months\" class=\"method trait-impl\"><a href=\"#method.months\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">months</a>(self) -&gt; Span</h4></section></summary><div class='docblock'>Create a new span from this integer in units of months. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.weeks\" class=\"method trait-impl\"><a href=\"#method.weeks\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">weeks</a>(self) -&gt; Span</h4></section></summary><div class='docblock'>Create a new span from this integer in units of weeks. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.days\" class=\"method trait-impl\"><a href=\"#method.days\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">days</a>(self) -&gt; Span</h4></section></summary><div class='docblock'>Create a new span from this integer in units of days. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.hours\" class=\"method trait-impl\"><a href=\"#method.hours\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">hours</a>(self) -&gt; Span</h4></section></summary><div class='docblock'>Create a new span from this integer in units of hours. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.minutes\" class=\"method trait-impl\"><a href=\"#method.minutes\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">minutes</a>(self) -&gt; Span</h4></section></summary><div class='docblock'>Create a new span from this integer in units of minutes. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.seconds\" class=\"method trait-impl\"><a href=\"#method.seconds\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">seconds</a>(self) -&gt; Span</h4></section></summary><div class='docblock'>Create a new span from this integer in units of seconds. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.milliseconds\" class=\"method trait-impl\"><a href=\"#method.milliseconds\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">milliseconds</a>(self) -&gt; Span</h4></section></summary><div class='docblock'>Create a new span from this integer in units of milliseconds. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.microseconds\" class=\"method trait-impl\"><a href=\"#method.microseconds\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">microseconds</a>(self) -&gt; Span</h4></section></summary><div class='docblock'>Create a new span from this integer in units of microseconds. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.nanoseconds\" class=\"method trait-impl\"><a href=\"#method.nanoseconds\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">nanoseconds</a>(self) -&gt; Span</h4></section></summary><div class='docblock'>Create a new span from this integer in units of nanoseconds. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.year\" class=\"method trait-impl\"><a href=\"#method.year\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">year</a>(self) -&gt; Span</h4></section></summary><div class='docblock'>Equivalent to <code>years()</code>, but reads better for singular units.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.month\" class=\"method trait-impl\"><a href=\"#method.month\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">month</a>(self) -&gt; Span</h4></section></summary><div class='docblock'>Equivalent to <code>months()</code>, but reads better for singular units.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.week\" class=\"method trait-impl\"><a href=\"#method.week\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">week</a>(self) -&gt; Span</h4></section></summary><div class='docblock'>Equivalent to <code>weeks()</code>, but reads better for singular units.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.day\" class=\"method trait-impl\"><a href=\"#method.day\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">day</a>(self) -&gt; Span</h4></section></summary><div class='docblock'>Equivalent to <code>days()</code>, but reads better for singular units.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.hour\" class=\"method trait-impl\"><a href=\"#method.hour\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">hour</a>(self) -&gt; Span</h4></section></summary><div class='docblock'>Equivalent to <code>hours()</code>, but reads better for singular units.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.minute\" class=\"method trait-impl\"><a href=\"#method.minute\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">minute</a>(self) -&gt; Span</h4></section></summary><div class='docblock'>Equivalent to <code>minutes()</code>, but reads better for singular units.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.second\" class=\"method trait-impl\"><a href=\"#method.second\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">second</a>(self) -&gt; Span</h4></section></summary><div class='docblock'>Equivalent to <code>seconds()</code>, but reads better for singular units.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.millisecond\" class=\"method trait-impl\"><a href=\"#method.millisecond\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">millisecond</a>(self) -&gt; Span</h4></section></summary><div class='docblock'>Equivalent to <code>milliseconds()</code>, but reads better for singular units.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.microsecond\" class=\"method trait-impl\"><a href=\"#method.microsecond\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">microsecond</a>(self) -&gt; Span</h4></section></summary><div class='docblock'>Equivalent to <code>microseconds()</code>, but reads better for singular units.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.nanosecond\" class=\"method trait-impl\"><a href=\"#method.nanosecond\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">nanosecond</a>(self) -&gt; Span</h4></section></summary><div class='docblock'>Equivalent to <code>nanoseconds()</code>, but reads better for singular units.</div></details></div></details>","ToSpan","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3C%26BigInt%3E-for-i32\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-bigint/0.4/src/num_bigint/bigint/convert.rs.html#138\">Source</a><a href=\"#impl-TryFrom%3C%26BigInt%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"devela/code/trait.TryFrom.html\" title=\"trait devela::code::TryFrom\">TryFrom</a>&lt;&amp;<a class=\"struct\" href=\"https://docs.rs/num-bigint/0.4/num_bigint/bigint/struct.BigInt.html\" title=\"struct num_bigint::bigint::BigInt\">BigInt</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-bigint/0.4/src/num_bigint/bigint/convert.rs.html#138\">Source</a><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"devela/code/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"https://docs.rs/num-bigint/0.4/num_bigint/struct.TryFromBigIntError.html\" title=\"struct num_bigint::TryFromBigIntError\">TryFromBigIntError</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>&gt;</h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-bigint/0.4/src/num_bigint/bigint/convert.rs.html#138\">Source</a><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/code/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(value: &amp;<a class=\"struct\" href=\"https://docs.rs/num-bigint/0.4/num_bigint/bigint/struct.BigInt.html\" title=\"struct num_bigint::bigint::BigInt\">BigInt</a>) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>, <a class=\"struct\" href=\"https://docs.rs/num-bigint/0.4/num_bigint/struct.TryFromBigIntError.html\" title=\"struct num_bigint::TryFromBigIntError\">TryFromBigIntError</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>&gt;&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;i32, TryFromBigIntError&lt;()&gt;&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Performs the conversion.</div></details></div></details>","TryFrom<&BigInt>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3C%26BigUint%3E-for-i32\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-bigint/0.4/src/num_bigint/biguint/convert.rs.html#425\">Source</a><a href=\"#impl-TryFrom%3C%26BigUint%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"devela/code/trait.TryFrom.html\" title=\"trait devela::code::TryFrom\">TryFrom</a>&lt;&amp;<a class=\"struct\" href=\"https://docs.rs/num-bigint/0.4/num_bigint/biguint/struct.BigUint.html\" title=\"struct num_bigint::biguint::BigUint\">BigUint</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-bigint/0.4/src/num_bigint/biguint/convert.rs.html#425\">Source</a><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"devela/code/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"https://docs.rs/num-bigint/0.4/num_bigint/struct.TryFromBigIntError.html\" title=\"struct num_bigint::TryFromBigIntError\">TryFromBigIntError</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>&gt;</h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-bigint/0.4/src/num_bigint/biguint/convert.rs.html#425\">Source</a><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/code/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(value: &amp;<a class=\"struct\" href=\"https://docs.rs/num-bigint/0.4/num_bigint/biguint/struct.BigUint.html\" title=\"struct num_bigint::biguint::BigUint\">BigUint</a>) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>, <a class=\"struct\" href=\"https://docs.rs/num-bigint/0.4/num_bigint/struct.TryFromBigIntError.html\" title=\"struct num_bigint::TryFromBigIntError\">TryFromBigIntError</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>&gt;&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;i32, TryFromBigIntError&lt;()&gt;&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Performs the conversion.</div></details></div></details>","TryFrom<&BigUint>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3CBigInt%3E-for-i32\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-bigint/0.4/src/num_bigint/bigint/convert.rs.html#138\">Source</a><a href=\"#impl-TryFrom%3CBigInt%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"devela/code/trait.TryFrom.html\" title=\"trait devela::code::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"https://docs.rs/num-bigint/0.4/num_bigint/bigint/struct.BigInt.html\" title=\"struct num_bigint::bigint::BigInt\">BigInt</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-bigint/0.4/src/num_bigint/bigint/convert.rs.html#138\">Source</a><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"devela/code/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"https://docs.rs/num-bigint/0.4/num_bigint/struct.TryFromBigIntError.html\" title=\"struct num_bigint::TryFromBigIntError\">TryFromBigIntError</a>&lt;<a class=\"struct\" href=\"https://docs.rs/num-bigint/0.4/num_bigint/bigint/struct.BigInt.html\" title=\"struct num_bigint::bigint::BigInt\">BigInt</a>&gt;</h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-bigint/0.4/src/num_bigint/bigint/convert.rs.html#138\">Source</a><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/code/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(value: <a class=\"struct\" href=\"https://docs.rs/num-bigint/0.4/num_bigint/bigint/struct.BigInt.html\" title=\"struct num_bigint::bigint::BigInt\">BigInt</a>) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>, <a class=\"struct\" href=\"https://docs.rs/num-bigint/0.4/num_bigint/struct.TryFromBigIntError.html\" title=\"struct num_bigint::TryFromBigIntError\">TryFromBigIntError</a>&lt;<a class=\"struct\" href=\"https://docs.rs/num-bigint/0.4/num_bigint/bigint/struct.BigInt.html\" title=\"struct num_bigint::bigint::BigInt\">BigInt</a>&gt;&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;i32, TryFromBigIntError&lt;BigInt&gt;&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Performs the conversion.</div></details></div></details>","TryFrom<BigInt>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3CBigUint%3E-for-i32\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-bigint/0.4/src/num_bigint/biguint/convert.rs.html#425\">Source</a><a href=\"#impl-TryFrom%3CBigUint%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"devela/code/trait.TryFrom.html\" title=\"trait devela::code::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"https://docs.rs/num-bigint/0.4/num_bigint/biguint/struct.BigUint.html\" title=\"struct num_bigint::biguint::BigUint\">BigUint</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-bigint/0.4/src/num_bigint/biguint/convert.rs.html#425\">Source</a><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"devela/code/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"https://docs.rs/num-bigint/0.4/num_bigint/struct.TryFromBigIntError.html\" title=\"struct num_bigint::TryFromBigIntError\">TryFromBigIntError</a>&lt;<a class=\"struct\" href=\"https://docs.rs/num-bigint/0.4/num_bigint/biguint/struct.BigUint.html\" title=\"struct num_bigint::biguint::BigUint\">BigUint</a>&gt;</h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-bigint/0.4/src/num_bigint/biguint/convert.rs.html#425\">Source</a><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/code/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(value: <a class=\"struct\" href=\"https://docs.rs/num-bigint/0.4/num_bigint/biguint/struct.BigUint.html\" title=\"struct num_bigint::biguint::BigUint\">BigUint</a>) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>, <a class=\"struct\" href=\"https://docs.rs/num-bigint/0.4/num_bigint/struct.TryFromBigIntError.html\" title=\"struct num_bigint::TryFromBigIntError\">TryFromBigIntError</a>&lt;<a class=\"struct\" href=\"https://docs.rs/num-bigint/0.4/num_bigint/biguint/struct.BigUint.html\" title=\"struct num_bigint::biguint::BigUint\">BigUint</a>&gt;&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;i32, TryFromBigIntError&lt;BigUint&gt;&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Performs the conversion.</div></details></div></details>","TryFrom<BigUint>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3CDataValue64CopyWith%3CV%3E%3E-for-i32\" class=\"impl\"><a class=\"src rightside\" href=\"src/devela/data/table/value/build.rs.html#96-245\">Source</a><a href=\"#impl-TryFrom%3CDataValue64CopyWith%3CV%3E%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;V: <a class=\"trait\" href=\"devela/all/trait.DataValueCopy.html\" title=\"trait devela::all::DataValueCopy\">DataValueCopy</a>&gt; <a class=\"trait\" href=\"devela/code/trait.TryFrom.html\" title=\"trait devela::code::TryFrom\">TryFrom</a>&lt;<a class=\"enum\" href=\"devela/all/enum.DataValue64CopyWith.html\" title=\"enum devela::all::DataValue64CopyWith\">DataValue64CopyWith</a>&lt;V&gt;&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/devela/data/table/value/build.rs.html#96-245\">Source</a><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"devela/code/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/data/table/value/build.rs.html#96-245\">Source</a><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/code/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(v: <a class=\"enum\" href=\"devela/all/enum.DataValue64CopyWith.html\" title=\"enum devela::all::DataValue64CopyWith\">DataValue64CopyWith</a>&lt;V&gt;) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;Self, Self::<a class=\"associatedtype\" href=\"devela/code/trait.TryFrom.html#associatedtype.Error\" title=\"type devela::code::TryFrom::Error\">Error</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;Self, Self::Error&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Performs the conversion.</div></details></div></details>","TryFrom<DataValue64CopyWith<V>>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3CUnitBi%3E-for-i32\" class=\"impl\"><a class=\"src rightside\" href=\"src/devela/num/unit/bi.rs.html#484\">Source</a><a href=\"#impl-TryFrom%3CUnitBi%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"devela/code/trait.TryFrom.html\" title=\"trait devela::code::TryFrom\">TryFrom</a>&lt;<a class=\"enum\" href=\"devela/num/enum.UnitBi.html\" title=\"enum devela::num::UnitBi\">UnitBi</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3><span class=\"item-info\"><div class=\"stab portability\">Available on <strong>crate feature <code>unit</code></strong> only.</div></span></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/devela/num/unit/bi.rs.html#484\">Source</a><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"devela/code/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"devela/num/struct.Overflow.html\" title=\"struct devela::num::Overflow\">Overflow</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/num/unit/bi.rs.html#484\">Source</a><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/code/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(from: <a class=\"enum\" href=\"devela/num/enum.UnitBi.html\" title=\"enum devela::num::UnitBi\">UnitBi</a>) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>, Self::<a class=\"associatedtype\" href=\"devela/code/trait.TryFrom.html#associatedtype.Error\" title=\"type devela::code::TryFrom::Error\">Error</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;i32, Self::Error&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Performs the conversion.</div></details></div></details>","TryFrom<UnitBi>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3CUnitSi%3E-for-i32\" class=\"impl\"><a class=\"src rightside\" href=\"src/devela/num/unit/si.rs.html#752\">Source</a><a href=\"#impl-TryFrom%3CUnitSi%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"devela/code/trait.TryFrom.html\" title=\"trait devela::code::TryFrom\">TryFrom</a>&lt;<a class=\"enum\" href=\"devela/num/enum.UnitSi.html\" title=\"enum devela::num::UnitSi\">UnitSi</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3><span class=\"item-info\"><div class=\"stab portability\">Available on <strong>crate feature <code>unit</code></strong> only.</div></span></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/devela/num/unit/si.rs.html#752\">Source</a><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"devela/code/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"devela/num/struct.Overflow.html\" title=\"struct devela::num::Overflow\">Overflow</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/num/unit/si.rs.html#752\">Source</a><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/code/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(from: <a class=\"enum\" href=\"devela/num/enum.UnitSi.html\" title=\"enum devela::num::UnitSi\">UnitSi</a>) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>, Self::<a class=\"associatedtype\" href=\"devela/code/trait.TryFrom.html#associatedtype.Error\" title=\"type devela::code::TryFrom::Error\">Error</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;i32, Self::Error&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Performs the conversion.</div></details></div></details>","TryFrom<UnitSi>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3Ci128%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0, const unstable\">1.34.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/74935\" title=\"Tracking issue for const_try\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/convert/num.rs.html#357\">Source</a></span><a href=\"#impl-TryFrom%3Ci128%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"devela/code/trait.TryFrom.html\" title=\"trait devela::code::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i128.html\">i128</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/convert/num.rs.html#357\">Source</a><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/code/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(u: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i128.html\">i128</a>) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>, &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> as <a class=\"trait\" href=\"devela/code/trait.TryFrom.html\" title=\"trait devela::code::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i128.html\">i128</a>&gt;&gt;::<a class=\"associatedtype\" href=\"devela/code/trait.TryFrom.html#associatedtype.Error\" title=\"type devela::code::TryFrom::Error\">Error</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;i32, &lt;i32 as TryFrom&lt;i128&gt;&gt;::Error&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Tries to create the target number type from a source\nnumber type. This returns an error if the source value\nis outside of the range of the target type.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/convert/num.rs.html#357\">Source</a><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"devela/code/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"devela/all/struct.TryFromIntError.html\" title=\"struct devela::all::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom<i128>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3Ci64%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0, const unstable\">1.34.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/74935\" title=\"Tracking issue for const_try\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/convert/num.rs.html#356\">Source</a></span><a href=\"#impl-TryFrom%3Ci64%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"devela/code/trait.TryFrom.html\" title=\"trait devela::code::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/convert/num.rs.html#356\">Source</a><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/code/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(u: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i64.html\">i64</a>) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>, &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> as <a class=\"trait\" href=\"devela/code/trait.TryFrom.html\" title=\"trait devela::code::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i64.html\">i64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"devela/code/trait.TryFrom.html#associatedtype.Error\" title=\"type devela::code::TryFrom::Error\">Error</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;i32, &lt;i32 as TryFrom&lt;i64&gt;&gt;::Error&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Tries to create the target number type from a source\nnumber type. This returns an error if the source value\nis outside of the range of the target type.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/convert/num.rs.html#356\">Source</a><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"devela/code/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"devela/all/struct.TryFromIntError.html\" title=\"struct devela::all::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom<i64>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3Cisize%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0, const unstable\">1.34.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/74935\" title=\"Tracking issue for const_try\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/convert/num.rs.html#439\">Source</a></span><a href=\"#impl-TryFrom%3Cisize%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"devela/code/trait.TryFrom.html\" title=\"trait devela::code::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.isize.html\">isize</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/convert/num.rs.html#439\">Source</a><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/code/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(u: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.isize.html\">isize</a>) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>, &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> as <a class=\"trait\" href=\"devela/code/trait.TryFrom.html\" title=\"trait devela::code::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.isize.html\">isize</a>&gt;&gt;::<a class=\"associatedtype\" href=\"devela/code/trait.TryFrom.html#associatedtype.Error\" title=\"type devela::code::TryFrom::Error\">Error</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;i32, &lt;i32 as TryFrom&lt;isize&gt;&gt;::Error&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Tries to create the target number type from a source\nnumber type. This returns an error if the source value\nis outside of the range of the target type.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/convert/num.rs.html#439\">Source</a><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"devela/code/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"devela/all/struct.TryFromIntError.html\" title=\"struct devela::all::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom<isize>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3Cu128%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0, const unstable\">1.34.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/74935\" title=\"Tracking issue for const_try\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/convert/num.rs.html#364\">Source</a></span><a href=\"#impl-TryFrom%3Cu128%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"devela/code/trait.TryFrom.html\" title=\"trait devela::code::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u128.html\">u128</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/convert/num.rs.html#364\">Source</a><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/code/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(u: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u128.html\">u128</a>) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>, &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> as <a class=\"trait\" href=\"devela/code/trait.TryFrom.html\" title=\"trait devela::code::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u128.html\">u128</a>&gt;&gt;::<a class=\"associatedtype\" href=\"devela/code/trait.TryFrom.html#associatedtype.Error\" title=\"type devela::code::TryFrom::Error\">Error</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;i32, &lt;i32 as TryFrom&lt;u128&gt;&gt;::Error&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Tries to create the target number type from a source\nnumber type. This returns an error if the source value\nis outside of the range of the target type.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/convert/num.rs.html#364\">Source</a><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"devela/code/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"devela/all/struct.TryFromIntError.html\" title=\"struct devela::all::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom<u128>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3Cu32%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0, const unstable\">1.34.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/74935\" title=\"Tracking issue for const_try\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/convert/num.rs.html#362\">Source</a></span><a href=\"#impl-TryFrom%3Cu32%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"devela/code/trait.TryFrom.html\" title=\"trait devela::code::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/convert/num.rs.html#362\">Source</a><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/code/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(u: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>, &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> as <a class=\"trait\" href=\"devela/code/trait.TryFrom.html\" title=\"trait devela::code::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"devela/code/trait.TryFrom.html#associatedtype.Error\" title=\"type devela::code::TryFrom::Error\">Error</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;i32, &lt;i32 as TryFrom&lt;u32&gt;&gt;::Error&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Tries to create the target number type from a source\nnumber type. This returns an error if the source value\nis outside of the range of the target type.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/convert/num.rs.html#362\">Source</a><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"devela/code/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"devela/all/struct.TryFromIntError.html\" title=\"struct devela::all::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom<u32>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3Cu64%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0, const unstable\">1.34.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/74935\" title=\"Tracking issue for const_try\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/convert/num.rs.html#363\">Source</a></span><a href=\"#impl-TryFrom%3Cu64%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"devela/code/trait.TryFrom.html\" title=\"trait devela::code::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u64.html\">u64</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/convert/num.rs.html#363\">Source</a><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/code/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(u: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u64.html\">u64</a>) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>, &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> as <a class=\"trait\" href=\"devela/code/trait.TryFrom.html\" title=\"trait devela::code::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u64.html\">u64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"devela/code/trait.TryFrom.html#associatedtype.Error\" title=\"type devela::code::TryFrom::Error\">Error</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;i32, &lt;i32 as TryFrom&lt;u64&gt;&gt;::Error&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Tries to create the target number type from a source\nnumber type. This returns an error if the source value\nis outside of the range of the target type.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/convert/num.rs.html#363\">Source</a><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"devela/code/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"devela/all/struct.TryFromIntError.html\" title=\"struct devela::all::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom<u64>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3Cusize%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0, const unstable\">1.34.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/74935\" title=\"Tracking issue for const_try\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/convert/num.rs.html#434\">Source</a></span><a href=\"#impl-TryFrom%3Cusize%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"devela/code/trait.TryFrom.html\" title=\"trait devela::code::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/convert/num.rs.html#434\">Source</a><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/code/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(u: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>, &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> as <a class=\"trait\" href=\"devela/code/trait.TryFrom.html\" title=\"trait devela::code::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt;&gt;::<a class=\"associatedtype\" href=\"devela/code/trait.TryFrom.html#associatedtype.Error\" title=\"type devela::code::TryFrom::Error\">Error</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;i32, &lt;i32 as TryFrom&lt;usize&gt;&gt;::Error&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Tries to create the target number type from a source\nnumber type. This returns an error if the source value\nis outside of the range of the target type.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/convert/num.rs.html#434\">Source</a><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"devela/code/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"devela/all/struct.TryFromIntError.html\" title=\"struct devela::all::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom<usize>","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-UpperExp-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.42.0\">1.42.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/fmt/num.rs.html#563\">Source</a></span><a href=\"#impl-UpperExp-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"devela/all/trait.UpperExp.html\" title=\"trait devela::all::UpperExp\">UpperExp</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/fmt/num.rs.html#563\">Source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.UpperExp.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"devela/all/struct.Formatter.html\" title=\"struct devela::all::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"devela/all/struct.FmtError.html\" title=\"struct devela::all::FmtError\">Error</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;(), Error&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"devela/all/trait.UpperExp.html#tymethod.fmt\">Read more</a></div></details></div></details>","UpperExp","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-UpperHex-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/fmt/num.rs.html#75\">Source</a></span><a href=\"#impl-UpperHex-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"devela/all/trait.UpperHex.html\" title=\"trait devela::all::UpperHex\">UpperHex</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/fmt/num.rs.html#75\">Source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.UpperHex.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"devela/all/struct.Formatter.html\" title=\"struct devela::all::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"devela/all/struct.FmtError.html\" title=\"struct devela::all::FmtError\">Error</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;(), Error&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Format signed integers in the two’s-complement form.</p>\n</div></details></div></details>","UpperHex","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-WrappingAdd-for-i32\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/ops/wrapping.rs.html#39\">Source</a><a href=\"#impl-WrappingAdd-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://docs.rs/num-traits/0.2/num_traits/ops/wrapping/trait.WrappingAdd.html\" title=\"trait num_traits::ops::wrapping::WrappingAdd\">WrappingAdd</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_add\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/ops/wrapping.rs.html#39\">Source</a><a href=\"#method.wrapping_add\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/ops/wrapping/trait.WrappingAdd.html#tymethod.wrapping_add\" class=\"fn\">wrapping_add</a>(&amp;self, v: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a></h4></section></summary><div class='docblock'>Wrapping (modular) addition. Computes <code>self + other</code>, wrapping around at the boundary of\nthe type.</div></details></div></details>","WrappingAdd","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-WrappingMul-for-i32\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/ops/wrapping.rs.html#81\">Source</a><a href=\"#impl-WrappingMul-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://docs.rs/num-traits/0.2/num_traits/ops/wrapping/trait.WrappingMul.html\" title=\"trait num_traits::ops::wrapping::WrappingMul\">WrappingMul</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_mul\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/ops/wrapping.rs.html#81\">Source</a><a href=\"#method.wrapping_mul\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/ops/wrapping/trait.WrappingMul.html#tymethod.wrapping_mul\" class=\"fn\">wrapping_mul</a>(&amp;self, v: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a></h4></section></summary><div class='docblock'>Wrapping (modular) multiplication. Computes <code>self * other</code>, wrapping around at the boundary\nof the type.</div></details></div></details>","WrappingMul","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-WrappingNeg-for-i32\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/ops/wrapping.rs.html#127\">Source</a><a href=\"#impl-WrappingNeg-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://docs.rs/num-traits/0.2/num_traits/ops/wrapping/trait.WrappingNeg.html\" title=\"trait num_traits::ops::wrapping::WrappingNeg\">WrappingNeg</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_neg\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/ops/wrapping.rs.html#127\">Source</a><a href=\"#method.wrapping_neg\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/ops/wrapping/trait.WrappingNeg.html#tymethod.wrapping_neg\" class=\"fn\">wrapping_neg</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a></h4></section></summary><div class='docblock'>Wrapping (modular) negation. Computes <code>-self</code>,\nwrapping around at the boundary of the type. <a href=\"https://docs.rs/num-traits/0.2/num_traits/ops/wrapping/trait.WrappingNeg.html#tymethod.wrapping_neg\">Read more</a></div></details></div></details>","WrappingNeg","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-WrappingShl-for-i32\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/ops/wrapping.rs.html#171\">Source</a><a href=\"#impl-WrappingShl-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://docs.rs/num-traits/0.2/num_traits/ops/wrapping/trait.WrappingShl.html\" title=\"trait num_traits::ops::wrapping::WrappingShl\">WrappingShl</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_shl\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/ops/wrapping.rs.html#171\">Source</a><a href=\"#method.wrapping_shl\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/ops/wrapping/trait.WrappingShl.html#tymethod.wrapping_shl\" class=\"fn\">wrapping_shl</a>(&amp;self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a></h4></section></summary><div class='docblock'>Panic-free bitwise shift-left; yields <code>self &lt;&lt; mask(rhs)</code>,\nwhere <code>mask</code> removes any high order bits of <code>rhs</code> that would\ncause the shift to exceed the bitwidth of the type. <a href=\"https://docs.rs/num-traits/0.2/num_traits/ops/wrapping/trait.WrappingShl.html#tymethod.wrapping_shl\">Read more</a></div></details></div></details>","WrappingShl","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-WrappingShr-for-i32\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/ops/wrapping.rs.html#204\">Source</a><a href=\"#impl-WrappingShr-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://docs.rs/num-traits/0.2/num_traits/ops/wrapping/trait.WrappingShr.html\" title=\"trait num_traits::ops::wrapping::WrappingShr\">WrappingShr</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_shr\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/ops/wrapping.rs.html#204\">Source</a><a href=\"#method.wrapping_shr\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/ops/wrapping/trait.WrappingShr.html#tymethod.wrapping_shr\" class=\"fn\">wrapping_shr</a>(&amp;self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a></h4></section></summary><div class='docblock'>Panic-free bitwise shift-right; yields <code>self &gt;&gt; mask(rhs)</code>,\nwhere <code>mask</code> removes any high order bits of <code>rhs</code> that would\ncause the shift to exceed the bitwidth of the type. <a href=\"https://docs.rs/num-traits/0.2/num_traits/ops/wrapping/trait.WrappingShr.html#tymethod.wrapping_shr\">Read more</a></div></details></div></details>","WrappingShr","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-WrappingSub-for-i32\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/ops/wrapping.rs.html#60\">Source</a><a href=\"#impl-WrappingSub-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://docs.rs/num-traits/0.2/num_traits/ops/wrapping/trait.WrappingSub.html\" title=\"trait num_traits::ops::wrapping::WrappingSub\">WrappingSub</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_sub\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/ops/wrapping.rs.html#60\">Source</a><a href=\"#method.wrapping_sub\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/ops/wrapping/trait.WrappingSub.html#tymethod.wrapping_sub\" class=\"fn\">wrapping_sub</a>(&amp;self, v: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a></h4></section></summary><div class='docblock'>Wrapping (modular) subtraction. Computes <code>self - other</code>, wrapping around at the boundary\nof the type.</div></details></div></details>","WrappingSub","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-WriteHex-for-i32\" class=\"impl\"><a href=\"#impl-WriteHex-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl WriteHex for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.write_hex\" class=\"method trait-impl\"><a href=\"#method.write_hex\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">write_hex</a>&lt;W&gt;(&amp;self, writer: W) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"devela/all/struct.FmtError.html\" title=\"struct devela::all::FmtError\">Error</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;(), Error&gt;\">ⓘ</a><div class=\"where\">where\n    W: <a class=\"trait\" href=\"devela/all/trait.FmtWrite.html\" title=\"trait devela::all::FmtWrite\">Write</a>,</div></h4></section></summary><div class='docblock'>Write the value as hex.</div></details></div></details>","WriteHex","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-WriteTomlValue-for-i32\" class=\"impl\"><a href=\"#impl-WriteTomlValue-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl WriteTomlValue for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><section id=\"method.write_toml_value\" class=\"method trait-impl\"><a href=\"#method.write_toml_value\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">write_toml_value</a>&lt;W&gt;(&amp;self, writer: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut W</a>) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"devela/all/struct.FmtError.html\" title=\"struct devela::all::FmtError\">Error</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;(), Error&gt;\">ⓘ</a><div class=\"where\">where\n    W: TomlWrite + ?<a class=\"trait\" href=\"devela/all/trait.Sized.html\" title=\"trait devela::all::Sized\">Sized</a>,</div></h4></section></div></details>","WriteTomlValue","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Zero-for-i32\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/identities.rs.html#67\">Source</a><a href=\"#impl-Zero-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://docs.rs/num-traits/0.2/num_traits/identities/trait.Zero.html\" title=\"trait num_traits::identities::Zero\">Zero</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.zero\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/identities.rs.html#67\">Source</a><a href=\"#method.zero\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/identities/trait.Zero.html#tymethod.zero\" class=\"fn\">zero</a>() -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a></h4></section></summary><div class='docblock'>Returns the additive identity element of <code>Self</code>, <code>0</code>. <a href=\"https://docs.rs/num-traits/0.2/num_traits/identities/trait.Zero.html#tymethod.zero\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_zero\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/identities.rs.html#67\">Source</a><a href=\"#method.is_zero\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/identities/trait.Zero.html#tymethod.is_zero\" class=\"fn\">is_zero</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Returns <code>true</code> if <code>self</code> is equal to the additive identity.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.set_zero\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/identities.rs.html#23\">Source</a><a href=\"#method.set_zero\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/identities/trait.Zero.html#method.set_zero\" class=\"fn\">set_zero</a>(&amp;mut self)</h4></section></summary><div class='docblock'>Sets <code>self</code> to the additive identity element of <code>Self</code>, <code>0</code>.</div></details></div></details>","Zero","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Zeroable-for-i32\" class=\"impl\"><a href=\"#impl-Zeroable-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl Zeroable for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.zeroed\" class=\"method trait-impl\"><a href=\"#method.zeroed\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">zeroed</a>() -&gt; Self</h4></section></summary><div class='docblock'>Calls <a href=\"https://doc.rust-lang.org/nightly/core/mem/fn.zeroed.html\" title=\"fn core::mem::zeroed\"><code>zeroed</code></a>. <a>Read more</a></div></details></div></details>","Zeroable","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-i32\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/fmt/num.rs.html#562\">Source</a><a href=\"#impl-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.format_into\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/fmt/num.rs.html#562\">Source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html#tymethod.format_into\" class=\"fn\">format_into</a>(self, buf: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/fmt/num_buffer/struct.NumBuffer.html\" title=\"struct core::fmt::num_buffer::NumBuffer\">NumBuffer</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>&gt;) -&gt; &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.str.html\">str</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&amp;str\">ⓘ</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>int_format_into</code>)</span></div></span></summary><div class=\"docblock\"><p>Allows users to write an integer (in signed decimal format) into a variable <code>buf</code> of\ntype <a href=\"https://doc.rust-lang.org/nightly/core/fmt/num_buffer/struct.NumBuffer.html\" title=\"struct core::fmt::num_buffer::NumBuffer\"><code>NumBuffer</code></a> that is passed by the caller by mutable reference.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(int_format_into)]\n</span><span class=\"kw\">use </span>core::fmt::NumBuffer;\n\n<span class=\"kw\">let </span>n = <span class=\"number\">0i32</span>;\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>buf = NumBuffer::new();\n<span class=\"macro\">assert_eq!</span>(n.format_into(<span class=\"kw-2\">&amp;mut </span>buf), <span class=\"string\">\"0\"</span>);\n\n<span class=\"kw\">let </span>n1 = <span class=\"number\">32i32</span>;\n<span class=\"macro\">assert_eq!</span>(n1.format_into(<span class=\"kw-2\">&amp;mut </span>buf), <span class=\"string\">\"32\"</span>);\n\n<span class=\"kw\">let </span>n2 = i32 :: MAX;\n<span class=\"macro\">assert_eq!</span>(n2.format_into(<span class=\"kw-2\">&amp;mut </span>buf), i32 :: MAX.to_string());</code></pre></div>\n</div></details></div></details>",0,"devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-i32\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/num/mod.rs.html#1630\">Source</a><a href=\"#impl-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_str_radix\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.82.0\">1.0.0 (const: 1.82.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/num/mod.rs.html#1630\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html#tymethod.from_str_radix\" class=\"fn\">from_str_radix</a>(src: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.str.html\">str</a>, radix: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>, <a class=\"struct\" href=\"devela/all/struct.ParseIntError.html\" title=\"struct devela::all::ParseIntError\">ParseIntError</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;i32, ParseIntError&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Parses an integer from a string slice with digits in a given base.</p>\n<p>The string is expected to be an optional\n<code>+</code> or <code>-</code>\nsign followed by only digits. Leading and trailing non-digit characters (including\nwhitespace) represent an error. Underscores (which are accepted in Rust literals)\nalso represent an error.</p>\n<p>Digits are a subset of these characters, depending on <code>radix</code>:</p>\n<ul>\n<li><code>0-9</code></li>\n<li><code>a-z</code></li>\n<li><code>A-Z</code></li>\n</ul>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>This function panics if <code>radix</code> is not in the range from 2 to 36.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(i32::from_str_radix(<span class=\"string\">\"A\"</span>, <span class=\"number\">16</span>), <span class=\"prelude-val\">Ok</span>(<span class=\"number\">10</span>));</code></pre></div>\n<p>Trailing space returns error:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert!</span>(i32::from_str_radix(<span class=\"string\">\"1 \"</span>, <span class=\"number\">10</span>).is_err());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_ascii\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/num/mod.rs.html#1630\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html#tymethod.from_ascii\" class=\"fn\">from_ascii</a>(src: &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>]) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>, <a class=\"struct\" href=\"devela/all/struct.ParseIntError.html\" title=\"struct devela::all::ParseIntError\">ParseIntError</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;i32, ParseIntError&gt;\">ⓘ</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>int_from_ascii</code>)</span></div></span></summary><div class=\"docblock\"><p>Parses an integer from an ASCII-byte slice with decimal digits.</p>\n<p>The characters are expected to be an optional\n<code>+</code> or <code>-</code>\nsign followed by only digits. Leading and trailing non-digit characters (including\nwhitespace) represent an error. Underscores (which are accepted in Rust literals)\nalso represent an error.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(int_from_ascii)]\n\n</span><span class=\"macro\">assert_eq!</span>(i32::from_ascii(<span class=\"string\">b\"+10\"</span>), <span class=\"prelude-val\">Ok</span>(<span class=\"number\">10</span>));</code></pre></div>\n<p>Trailing space returns error:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert!</span>(i32::from_ascii(<span class=\"string\">b\"1 \"</span>).is_err());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_ascii_radix\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/num/mod.rs.html#1630\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html#tymethod.from_ascii_radix\" class=\"fn\">from_ascii_radix</a>(\n    src: &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>],\n    radix: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>,\n) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>, <a class=\"struct\" href=\"devela/all/struct.ParseIntError.html\" title=\"struct devela::all::ParseIntError\">ParseIntError</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;i32, ParseIntError&gt;\">ⓘ</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>int_from_ascii</code>)</span></div></span></summary><div class=\"docblock\"><p>Parses an integer from an ASCII-byte slice with digits in a given base.</p>\n<p>The characters are expected to be an optional\n<code>+</code> or <code>-</code>\nsign followed by only digits. Leading and trailing non-digit characters (including\nwhitespace) represent an error. Underscores (which are accepted in Rust literals)\nalso represent an error.</p>\n<p>Digits are a subset of these characters, depending on <code>radix</code>:</p>\n<ul>\n<li><code>0-9</code></li>\n<li><code>a-z</code></li>\n<li><code>A-Z</code></li>\n</ul>\n<h5 id=\"panics-1\"><a class=\"doc-anchor\" href=\"#panics-1\">§</a>Panics</h5>\n<p>This function panics if <code>radix</code> is not in the range from 2 to 36.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(int_from_ascii)]\n\n</span><span class=\"macro\">assert_eq!</span>(i32::from_ascii_radix(<span class=\"string\">b\"A\"</span>, <span class=\"number\">16</span>), <span class=\"prelude-val\">Ok</span>(<span class=\"number\">10</span>));</code></pre></div>\n<p>Trailing space returns error:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert!</span>(i32::from_ascii_radix(<span class=\"string\">b\"1 \"</span>, <span class=\"number\">10</span>).is_err());</code></pre></div>\n</div></details></div></details>",0,"devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-i32\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/num/mod.rs.html#294\">Source</a><a href=\"#impl-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedconstant.MIN\" class=\"associatedconstant\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.43.0\">1.43.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/num/mod.rs.html#295-314\">Source</a></span><h4 class=\"code-header\">pub const <a href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html#associatedconstant.MIN\" class=\"constant\">MIN</a>: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> = -2_147_483_648i32</h4></section></summary><div class=\"docblock\"><p>The smallest value that can be represented by this integer type\n(−2<sup>31</sup>).</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(i32::MIN, -<span class=\"number\">2147483648</span>);</code></pre></div>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.MAX\" class=\"associatedconstant\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.43.0\">1.43.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/num/mod.rs.html#295-314\">Source</a></span><h4 class=\"code-header\">pub const <a href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html#associatedconstant.MAX\" class=\"constant\">MAX</a>: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> = 2_147_483_647i32</h4></section></summary><div class=\"docblock\"><p>The largest value that can be represented by this integer type\n(2<sup>31</sup> − 1).</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(i32::MAX, <span class=\"number\">2147483647</span>);</code></pre></div>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.BITS\" class=\"associatedconstant\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.53.0\">1.53.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/num/mod.rs.html#295-314\">Source</a></span><h4 class=\"code-header\">pub const <a href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html#associatedconstant.BITS\" class=\"constant\">BITS</a>: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a> = 32u32</h4></section></summary><div class=\"docblock\"><p>The size of this integer type in bits.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(i32::BITS, <span class=\"number\">32</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.count_ones\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/num/mod.rs.html#295-314\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html#tymethod.count_ones\" class=\"fn\">count_ones</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"u32\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Returns the number of ones in the binary representation of <code>self</code>.</p>\n<h5 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = <span class=\"number\">0b100_0000i32</span>;\n\n<span class=\"macro\">assert_eq!</span>(n.count_ones(), <span class=\"number\">1</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.count_zeros\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/num/mod.rs.html#295-314\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html#tymethod.count_zeros\" class=\"fn\">count_zeros</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"u32\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Returns the number of zeros in the binary representation of <code>self</code>.</p>\n<h5 id=\"examples-4\"><a class=\"doc-anchor\" href=\"#examples-4\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(i32::MAX.count_zeros(), <span class=\"number\">1</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.leading_zeros\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/num/mod.rs.html#295-314\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html#tymethod.leading_zeros\" class=\"fn\">leading_zeros</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"u32\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Returns the number of leading zeros in the binary representation of <code>self</code>.</p>\n<p>Depending on what you’re doing with the value, you might also be interested in the\n<a href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html#method.ilog2\" title=\"method i32::ilog2\"><code>ilog2</code></a> function which returns a consistent number, even if the type widens.</p>\n<h5 id=\"examples-5\"><a class=\"doc-anchor\" href=\"#examples-5\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = -<span class=\"number\">1i32</span>;\n\n<span class=\"macro\">assert_eq!</span>(n.leading_zeros(), <span class=\"number\">0</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.trailing_zeros\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/num/mod.rs.html#295-314\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html#tymethod.trailing_zeros\" class=\"fn\">trailing_zeros</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"u32\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Returns the number of trailing zeros in the binary representation of <code>self</code>.</p>\n<h5 id=\"examples-6\"><a class=\"doc-anchor\" href=\"#examples-6\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = -<span class=\"number\">4i32</span>;\n\n<span class=\"macro\">assert_eq!</span>(n.trailing_zeros(), <span class=\"number\">2</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.leading_ones\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.46.0, const since 1.46.0\">1.46.0 (const: 1.46.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/num/mod.rs.html#295-314\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html#tymethod.leading_ones\" class=\"fn\">leading_ones</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"u32\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Returns the number of leading ones in the binary representation of <code>self</code>.</p>\n<h5 id=\"examples-7\"><a class=\"doc-anchor\" href=\"#examples-7\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = -<span class=\"number\">1i32</span>;\n\n<span class=\"macro\">assert_eq!</span>(n.leading_ones(), <span class=\"number\">32</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.trailing_ones\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.46.0, const since 1.46.0\">1.46.0 (const: 1.46.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/num/mod.rs.html#295-314\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html#tymethod.trailing_ones\" class=\"fn\">trailing_ones</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"u32\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Returns the number of trailing ones in the binary representation of <code>self</code>.</p>\n<h5 id=\"examples-8\"><a class=\"doc-anchor\" href=\"#examples-8\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = <span class=\"number\">3i32</span>;\n\n<span class=\"macro\">assert_eq!</span>(n.trailing_ones(), <span class=\"number\">2</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.isolate_highest_one\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/num/mod.rs.html#295-314\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html#tymethod.isolate_highest_one\" class=\"fn\">isolate_highest_one</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>isolate_most_least_significant_one</code>)</span></div></span></summary><div class=\"docblock\"><p>Returns <code>self</code> with only the most significant bit set, or <code>0</code> if\nthe input is <code>0</code>.</p>\n<h5 id=\"examples-9\"><a class=\"doc-anchor\" href=\"#examples-9\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(isolate_most_least_significant_one)]\n\n</span><span class=\"kw\">let </span>n: i32 = <span class=\"number\">0b_01100100</span>;\n\n<span class=\"macro\">assert_eq!</span>(n.isolate_highest_one(), <span class=\"number\">0b_01000000</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">0_i32</span>.isolate_highest_one(), <span class=\"number\">0</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.isolate_lowest_one\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/num/mod.rs.html#295-314\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html#tymethod.isolate_lowest_one\" class=\"fn\">isolate_lowest_one</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>isolate_most_least_significant_one</code>)</span></div></span></summary><div class=\"docblock\"><p>Returns <code>self</code> with only the least significant bit set, or <code>0</code> if\nthe input is <code>0</code>.</p>\n<h5 id=\"examples-10\"><a class=\"doc-anchor\" href=\"#examples-10\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(isolate_most_least_significant_one)]\n\n</span><span class=\"kw\">let </span>n: i32 = <span class=\"number\">0b_01100100</span>;\n\n<span class=\"macro\">assert_eq!</span>(n.isolate_lowest_one(), <span class=\"number\">0b_00000100</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">0_i32</span>.isolate_lowest_one(), <span class=\"number\">0</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.highest_one\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/num/mod.rs.html#295-314\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html#tymethod.highest_one\" class=\"fn\">highest_one</a>(self) -&gt; <a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Option&lt;u32&gt;\">ⓘ</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>int_lowest_highest_one</code>)</span></div></span></summary><div class=\"docblock\"><p>Returns the index of the highest bit set to one in <code>self</code>, or <code>None</code>\nif <code>self</code> is <code>0</code>.</p>\n<h5 id=\"examples-11\"><a class=\"doc-anchor\" href=\"#examples-11\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(int_lowest_highest_one)]\n\n</span><span class=\"macro\">assert_eq!</span>(<span class=\"number\">0x0_i32</span>.highest_one(), <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">0x1_i32</span>.highest_one(), <span class=\"prelude-val\">Some</span>(<span class=\"number\">0</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">0x10_i32</span>.highest_one(), <span class=\"prelude-val\">Some</span>(<span class=\"number\">4</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">0x1f_i32</span>.highest_one(), <span class=\"prelude-val\">Some</span>(<span class=\"number\">4</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lowest_one\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/num/mod.rs.html#295-314\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html#tymethod.lowest_one\" class=\"fn\">lowest_one</a>(self) -&gt; <a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Option&lt;u32&gt;\">ⓘ</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>int_lowest_highest_one</code>)</span></div></span></summary><div class=\"docblock\"><p>Returns the index of the lowest bit set to one in <code>self</code>, or <code>None</code>\nif <code>self</code> is <code>0</code>.</p>\n<h5 id=\"examples-12\"><a class=\"doc-anchor\" href=\"#examples-12\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(int_lowest_highest_one)]\n\n</span><span class=\"macro\">assert_eq!</span>(<span class=\"number\">0x0_i32</span>.lowest_one(), <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">0x1_i32</span>.lowest_one(), <span class=\"prelude-val\">Some</span>(<span class=\"number\">0</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">0x10_i32</span>.lowest_one(), <span class=\"prelude-val\">Some</span>(<span class=\"number\">4</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">0x1f_i32</span>.lowest_one(), <span class=\"prelude-val\">Some</span>(<span class=\"number\">0</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.cast_unsigned\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.87.0, const since 1.87.0\">1.87.0 (const: 1.87.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/num/mod.rs.html#295-314\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html#tymethod.cast_unsigned\" class=\"fn\">cast_unsigned</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"u32\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Returns the bit pattern of <code>self</code> reinterpreted as an unsigned integer of the same size.</p>\n<p>This produces the same result as an <code>as</code> cast, but ensures that the bit-width remains\nthe same.</p>\n<h5 id=\"examples-13\"><a class=\"doc-anchor\" href=\"#examples-13\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = -<span class=\"number\">1i32</span>;\n\n<span class=\"macro\">assert_eq!</span>(n.cast_unsigned(), u32::MAX);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.rotate_left\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/num/mod.rs.html#295-314\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html#tymethod.rotate_left\" class=\"fn\">rotate_left</a>(self, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Shifts the bits to the left by a specified amount, <code>n</code>,\nwrapping the truncated bits to the end of the resulting integer.</p>\n<p>Please note this isn’t the same operation as the <code>&lt;&lt;</code> shifting operator!</p>\n<h5 id=\"examples-14\"><a class=\"doc-anchor\" href=\"#examples-14\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = <span class=\"number\">0x10000b3i32</span>;\n<span class=\"kw\">let </span>m = <span class=\"number\">0xb301</span>;\n\n<span class=\"macro\">assert_eq!</span>(n.rotate_left(<span class=\"number\">8</span>), m);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.rotate_right\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/num/mod.rs.html#295-314\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html#tymethod.rotate_right\" class=\"fn\">rotate_right</a>(self, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Shifts the bits to the right by a specified amount, <code>n</code>,\nwrapping the truncated bits to the beginning of the resulting\ninteger.</p>\n<p>Please note this isn’t the same operation as the <code>&gt;&gt;</code> shifting operator!</p>\n<h5 id=\"examples-15\"><a class=\"doc-anchor\" href=\"#examples-15\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = <span class=\"number\">0xb301i32</span>;\n<span class=\"kw\">let </span>m = <span class=\"number\">0x10000b3</span>;\n\n<span class=\"macro\">assert_eq!</span>(n.rotate_right(<span class=\"number\">8</span>), m);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.swap_bytes\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/num/mod.rs.html#295-314\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html#tymethod.swap_bytes\" class=\"fn\">swap_bytes</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Reverses the byte order of the integer.</p>\n<h5 id=\"examples-16\"><a class=\"doc-anchor\" href=\"#examples-16\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = <span class=\"number\">0x12345678i32</span>;\n\n<span class=\"kw\">let </span>m = n.swap_bytes();\n\n<span class=\"macro\">assert_eq!</span>(m, <span class=\"number\">0x78563412</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.reverse_bits\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.37.0, const since 1.37.0\">1.37.0 (const: 1.37.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/num/mod.rs.html#295-314\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html#tymethod.reverse_bits\" class=\"fn\">reverse_bits</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Reverses the order of bits in the integer. The least significant bit becomes the most significant bit,\nsecond least-significant bit becomes second most-significant bit, etc.</p>\n<h5 id=\"examples-17\"><a class=\"doc-anchor\" href=\"#examples-17\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = <span class=\"number\">0x12345678i32</span>;\n<span class=\"kw\">let </span>m = n.reverse_bits();\n\n<span class=\"macro\">assert_eq!</span>(m, <span class=\"number\">0x1e6a2c48</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">0</span>, <span class=\"number\">0i32</span>.reverse_bits());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_be\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/num/mod.rs.html#295-314\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html#tymethod.from_be\" class=\"fn\">from_be</a>(x: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Converts an integer from big endian to the target’s endianness.</p>\n<p>On big endian this is a no-op. On little endian the bytes are swapped.</p>\n<h5 id=\"examples-18\"><a class=\"doc-anchor\" href=\"#examples-18\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = <span class=\"number\">0x1Ai32</span>;\n\n<span class=\"kw\">if </span><span class=\"macro\">cfg!</span>(target_endian = <span class=\"string\">\"big\"</span>) {\n    <span class=\"macro\">assert_eq!</span>(i32::from_be(n), n)\n} <span class=\"kw\">else </span>{\n    <span class=\"macro\">assert_eq!</span>(i32::from_be(n), n.swap_bytes())\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_le\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/num/mod.rs.html#295-314\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html#tymethod.from_le\" class=\"fn\">from_le</a>(x: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Converts an integer from little endian to the target’s endianness.</p>\n<p>On little endian this is a no-op. On big endian the bytes are swapped.</p>\n<h5 id=\"examples-19\"><a class=\"doc-anchor\" href=\"#examples-19\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = <span class=\"number\">0x1Ai32</span>;\n\n<span class=\"kw\">if </span><span class=\"macro\">cfg!</span>(target_endian = <span class=\"string\">\"little\"</span>) {\n    <span class=\"macro\">assert_eq!</span>(i32::from_le(n), n)\n} <span class=\"kw\">else </span>{\n    <span class=\"macro\">assert_eq!</span>(i32::from_le(n), n.swap_bytes())\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_be\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/num/mod.rs.html#295-314\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html#tymethod.to_be\" class=\"fn\">to_be</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Converts <code>self</code> to big endian from the target’s endianness.</p>\n<p>On big endian this is a no-op. On little endian the bytes are swapped.</p>\n<h5 id=\"examples-20\"><a class=\"doc-anchor\" href=\"#examples-20\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = <span class=\"number\">0x1Ai32</span>;\n\n<span class=\"kw\">if </span><span class=\"macro\">cfg!</span>(target_endian = <span class=\"string\">\"big\"</span>) {\n    <span class=\"macro\">assert_eq!</span>(n.to_be(), n)\n} <span class=\"kw\">else </span>{\n    <span class=\"macro\">assert_eq!</span>(n.to_be(), n.swap_bytes())\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_le\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/num/mod.rs.html#295-314\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html#tymethod.to_le\" class=\"fn\">to_le</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Converts <code>self</code> to little endian from the target’s endianness.</p>\n<p>On little endian this is a no-op. On big endian the bytes are swapped.</p>\n<h5 id=\"examples-21\"><a class=\"doc-anchor\" href=\"#examples-21\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = <span class=\"number\">0x1Ai32</span>;\n\n<span class=\"kw\">if </span><span class=\"macro\">cfg!</span>(target_endian = <span class=\"string\">\"little\"</span>) {\n    <span class=\"macro\">assert_eq!</span>(n.to_le(), n)\n} <span class=\"kw\">else </span>{\n    <span class=\"macro\">assert_eq!</span>(n.to_le(), n.swap_bytes())\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_add\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.47.0\">1.0.0 (const: 1.47.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/num/mod.rs.html#295-314\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html#tymethod.checked_add\" class=\"fn\">checked_add</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>) -&gt; <a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Option&lt;i32&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Checked integer addition. Computes <code>self + rhs</code>, returning <code>None</code>\nif overflow occurred.</p>\n<h5 id=\"examples-22\"><a class=\"doc-anchor\" href=\"#examples-22\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>((i32::MAX - <span class=\"number\">2</span>).checked_add(<span class=\"number\">1</span>), <span class=\"prelude-val\">Some</span>(i32::MAX - <span class=\"number\">1</span>));\n<span class=\"macro\">assert_eq!</span>((i32::MAX - <span class=\"number\">2</span>).checked_add(<span class=\"number\">3</span>), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.strict_add\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.91.0, const since 1.91.0\">1.91.0 (const: 1.91.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/num/mod.rs.html#295-314\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html#tymethod.strict_add\" class=\"fn\">strict_add</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Strict integer addition. Computes <code>self + rhs</code>, panicking\nif overflow occurred.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5><h6 id=\"overflow-behavior\"><a class=\"doc-anchor\" href=\"#overflow-behavior\">§</a>Overflow behavior</h6>\n<p>This function will always panic on overflow, regardless of whether overflow checks are enabled.</p>\n<h5 id=\"examples-23\"><a class=\"doc-anchor\" href=\"#examples-23\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>((i32::MAX - <span class=\"number\">2</span>).strict_add(<span class=\"number\">1</span>), i32::MAX - <span class=\"number\">1</span>);</code></pre></div>\n<p>The following panics because of overflow:</p>\n\n<div class=\"example-wrap should_panic\"><a href=\"#\" class=\"tooltip\" title=\"This example panics\">ⓘ</a><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let _ </span>= (i32::MAX - <span class=\"number\">2</span>).strict_add(<span class=\"number\">3</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unchecked_add\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.79.0, const since 1.79.0\">1.79.0 (const: 1.79.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/num/mod.rs.html#295-314\">Source</a></span><h4 class=\"code-header\">pub const unsafe fn <a href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html#tymethod.unchecked_add\" class=\"fn\">unchecked_add</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Unchecked integer addition. Computes <code>self + rhs</code>, assuming overflow\ncannot occur.</p>\n<p>Calling <code>x.unchecked_add(y)</code> is semantically equivalent to calling\n<code>x.</code><a href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html#method.checked_add\" title=\"method i32::checked_add\"><code>checked_add</code></a><code>(y).</code><a href=\"option/enum.Option.html#method.unwrap_unchecked\"><code>unwrap_unchecked</code></a><code>()</code>.</p>\n<p>If you’re just trying to avoid the panic in debug mode, then <strong>do not</strong>\nuse this.  Instead, you’re looking for <a href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html#method.wrapping_add\" title=\"method i32::wrapping_add\"><code>wrapping_add</code></a>.</p>\n<h5 id=\"safety\"><a class=\"doc-anchor\" href=\"#safety\">§</a>Safety</h5>\n<p>This results in undefined behavior when\n<code>self + rhs &gt; i32::MAX</code> or <code>self + rhs &lt; i32::MIN</code>,\ni.e. when <a href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html#method.checked_add\" title=\"method i32::checked_add\"><code>checked_add</code></a> would return <code>None</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_add_unsigned\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.66.0, const since 1.66.0\">1.66.0 (const: 1.66.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/num/mod.rs.html#295-314\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html#tymethod.checked_add_unsigned\" class=\"fn\">checked_add_unsigned</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>) -&gt; <a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Option&lt;i32&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Checked addition with an unsigned integer. Computes <code>self + rhs</code>,\nreturning <code>None</code> if overflow occurred.</p>\n<h5 id=\"examples-24\"><a class=\"doc-anchor\" href=\"#examples-24\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">1i32</span>.checked_add_unsigned(<span class=\"number\">2</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">3</span>));\n<span class=\"macro\">assert_eq!</span>((i32::MAX - <span class=\"number\">2</span>).checked_add_unsigned(<span class=\"number\">3</span>), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.strict_add_unsigned\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.91.0, const since 1.91.0\">1.91.0 (const: 1.91.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/num/mod.rs.html#295-314\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html#tymethod.strict_add_unsigned\" class=\"fn\">strict_add_unsigned</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Strict addition with an unsigned integer. Computes <code>self + rhs</code>,\npanicking if overflow occurred.</p>\n<h5 id=\"panics-1\"><a class=\"doc-anchor\" href=\"#panics-1\">§</a>Panics</h5><h6 id=\"overflow-behavior-1\"><a class=\"doc-anchor\" href=\"#overflow-behavior-1\">§</a>Overflow behavior</h6>\n<p>This function will always panic on overflow, regardless of whether overflow checks are enabled.</p>\n<h5 id=\"examples-25\"><a class=\"doc-anchor\" href=\"#examples-25\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">1i32</span>.strict_add_unsigned(<span class=\"number\">2</span>), <span class=\"number\">3</span>);</code></pre></div>\n<p>The following panics because of overflow:</p>\n\n<div class=\"example-wrap should_panic\"><a href=\"#\" class=\"tooltip\" title=\"This example panics\">ⓘ</a><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let _ </span>= (i32::MAX - <span class=\"number\">2</span>).strict_add_unsigned(<span class=\"number\">3</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_sub\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.47.0\">1.0.0 (const: 1.47.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/num/mod.rs.html#295-314\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html#tymethod.checked_sub\" class=\"fn\">checked_sub</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>) -&gt; <a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Option&lt;i32&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Checked integer subtraction. Computes <code>self - rhs</code>, returning <code>None</code> if\noverflow occurred.</p>\n<h5 id=\"examples-26\"><a class=\"doc-anchor\" href=\"#examples-26\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>((i32::MIN + <span class=\"number\">2</span>).checked_sub(<span class=\"number\">1</span>), <span class=\"prelude-val\">Some</span>(i32::MIN + <span class=\"number\">1</span>));\n<span class=\"macro\">assert_eq!</span>((i32::MIN + <span class=\"number\">2</span>).checked_sub(<span class=\"number\">3</span>), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.strict_sub\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.91.0, const since 1.91.0\">1.91.0 (const: 1.91.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/num/mod.rs.html#295-314\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html#tymethod.strict_sub\" class=\"fn\">strict_sub</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Strict integer subtraction. Computes <code>self - rhs</code>, panicking if\noverflow occurred.</p>\n<h5 id=\"panics-2\"><a class=\"doc-anchor\" href=\"#panics-2\">§</a>Panics</h5><h6 id=\"overflow-behavior-2\"><a class=\"doc-anchor\" href=\"#overflow-behavior-2\">§</a>Overflow behavior</h6>\n<p>This function will always panic on overflow, regardless of whether overflow checks are enabled.</p>\n<h5 id=\"examples-27\"><a class=\"doc-anchor\" href=\"#examples-27\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>((i32::MIN + <span class=\"number\">2</span>).strict_sub(<span class=\"number\">1</span>), i32::MIN + <span class=\"number\">1</span>);</code></pre></div>\n<p>The following panics because of overflow:</p>\n\n<div class=\"example-wrap should_panic\"><a href=\"#\" class=\"tooltip\" title=\"This example panics\">ⓘ</a><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let _ </span>= (i32::MIN + <span class=\"number\">2</span>).strict_sub(<span class=\"number\">3</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unchecked_sub\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.79.0, const since 1.79.0\">1.79.0 (const: 1.79.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/num/mod.rs.html#295-314\">Source</a></span><h4 class=\"code-header\">pub const unsafe fn <a href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html#tymethod.unchecked_sub\" class=\"fn\">unchecked_sub</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Unchecked integer subtraction. Computes <code>self - rhs</code>, assuming overflow\ncannot occur.</p>\n<p>Calling <code>x.unchecked_sub(y)</code> is semantically equivalent to calling\n<code>x.</code><a href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html#method.checked_sub\" title=\"method i32::checked_sub\"><code>checked_sub</code></a><code>(y).</code><a href=\"option/enum.Option.html#method.unwrap_unchecked\"><code>unwrap_unchecked</code></a><code>()</code>.</p>\n<p>If you’re just trying to avoid the panic in debug mode, then <strong>do not</strong>\nuse this.  Instead, you’re looking for <a href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html#method.wrapping_sub\" title=\"method i32::wrapping_sub\"><code>wrapping_sub</code></a>.</p>\n<h5 id=\"safety-1\"><a class=\"doc-anchor\" href=\"#safety-1\">§</a>Safety</h5>\n<p>This results in undefined behavior when\n<code>self - rhs &gt; i32::MAX</code> or <code>self - rhs &lt; i32::MIN</code>,\ni.e. when <a href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html#method.checked_sub\" title=\"method i32::checked_sub\"><code>checked_sub</code></a> would return <code>None</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_sub_unsigned\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.66.0, const since 1.66.0\">1.66.0 (const: 1.66.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/num/mod.rs.html#295-314\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html#tymethod.checked_sub_unsigned\" class=\"fn\">checked_sub_unsigned</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>) -&gt; <a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Option&lt;i32&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Checked subtraction with an unsigned integer. Computes <code>self - rhs</code>,\nreturning <code>None</code> if overflow occurred.</p>\n<h5 id=\"examples-28\"><a class=\"doc-anchor\" href=\"#examples-28\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">1i32</span>.checked_sub_unsigned(<span class=\"number\">2</span>), <span class=\"prelude-val\">Some</span>(-<span class=\"number\">1</span>));\n<span class=\"macro\">assert_eq!</span>((i32::MIN + <span class=\"number\">2</span>).checked_sub_unsigned(<span class=\"number\">3</span>), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.strict_sub_unsigned\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.91.0, const since 1.91.0\">1.91.0 (const: 1.91.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/num/mod.rs.html#295-314\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html#tymethod.strict_sub_unsigned\" class=\"fn\">strict_sub_unsigned</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Strict subtraction with an unsigned integer. Computes <code>self - rhs</code>,\npanicking if overflow occurred.</p>\n<h5 id=\"panics-3\"><a class=\"doc-anchor\" href=\"#panics-3\">§</a>Panics</h5><h6 id=\"overflow-behavior-3\"><a class=\"doc-anchor\" href=\"#overflow-behavior-3\">§</a>Overflow behavior</h6>\n<p>This function will always panic on overflow, regardless of whether overflow checks are enabled.</p>\n<h5 id=\"examples-29\"><a class=\"doc-anchor\" href=\"#examples-29\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">1i32</span>.strict_sub_unsigned(<span class=\"number\">2</span>), -<span class=\"number\">1</span>);</code></pre></div>\n<p>The following panics because of overflow:</p>\n\n<div class=\"example-wrap should_panic\"><a href=\"#\" class=\"tooltip\" title=\"This example panics\">ⓘ</a><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let _ </span>= (i32::MIN + <span class=\"number\">2</span>).strict_sub_unsigned(<span class=\"number\">3</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_mul\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.47.0\">1.0.0 (const: 1.47.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/num/mod.rs.html#295-314\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html#tymethod.checked_mul\" class=\"fn\">checked_mul</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>) -&gt; <a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Option&lt;i32&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Checked integer multiplication. Computes <code>self * rhs</code>, returning <code>None</code> if\noverflow occurred.</p>\n<h5 id=\"examples-30\"><a class=\"doc-anchor\" href=\"#examples-30\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(i32::MAX.checked_mul(<span class=\"number\">1</span>), <span class=\"prelude-val\">Some</span>(i32::MAX));\n<span class=\"macro\">assert_eq!</span>(i32::MAX.checked_mul(<span class=\"number\">2</span>), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.strict_mul\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.91.0, const since 1.91.0\">1.91.0 (const: 1.91.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/num/mod.rs.html#295-314\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html#tymethod.strict_mul\" class=\"fn\">strict_mul</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Strict integer multiplication. Computes <code>self * rhs</code>, panicking if\noverflow occurred.</p>\n<h5 id=\"panics-4\"><a class=\"doc-anchor\" href=\"#panics-4\">§</a>Panics</h5><h6 id=\"overflow-behavior-4\"><a class=\"doc-anchor\" href=\"#overflow-behavior-4\">§</a>Overflow behavior</h6>\n<p>This function will always panic on overflow, regardless of whether overflow checks are enabled.</p>\n<h5 id=\"examples-31\"><a class=\"doc-anchor\" href=\"#examples-31\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(i32::MAX.strict_mul(<span class=\"number\">1</span>), i32::MAX);</code></pre></div>\n<p>The following panics because of overflow:</p>\n\n<div class=\"example-wrap should_panic\"><a href=\"#\" class=\"tooltip\" title=\"This example panics\">ⓘ</a><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let _ </span>= i32::MAX.strict_mul(<span class=\"number\">2</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unchecked_mul\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.79.0, const since 1.79.0\">1.79.0 (const: 1.79.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/num/mod.rs.html#295-314\">Source</a></span><h4 class=\"code-header\">pub const unsafe fn <a href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html#tymethod.unchecked_mul\" class=\"fn\">unchecked_mul</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Unchecked integer multiplication. Computes <code>self * rhs</code>, assuming overflow\ncannot occur.</p>\n<p>Calling <code>x.unchecked_mul(y)</code> is semantically equivalent to calling\n<code>x.</code><a href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html#method.checked_mul\" title=\"method i32::checked_mul\"><code>checked_mul</code></a><code>(y).</code><a href=\"option/enum.Option.html#method.unwrap_unchecked\"><code>unwrap_unchecked</code></a><code>()</code>.</p>\n<p>If you’re just trying to avoid the panic in debug mode, then <strong>do not</strong>\nuse this.  Instead, you’re looking for <a href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html#method.wrapping_mul\" title=\"method i32::wrapping_mul\"><code>wrapping_mul</code></a>.</p>\n<h5 id=\"safety-2\"><a class=\"doc-anchor\" href=\"#safety-2\">§</a>Safety</h5>\n<p>This results in undefined behavior when\n<code>self * rhs &gt; i32::MAX</code> or <code>self * rhs &lt; i32::MIN</code>,\ni.e. when <a href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html#method.checked_mul\" title=\"method i32::checked_mul\"><code>checked_mul</code></a> would return <code>None</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_div\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.52.0\">1.0.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/num/mod.rs.html#295-314\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html#tymethod.checked_div\" class=\"fn\">checked_div</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>) -&gt; <a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Option&lt;i32&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Checked integer division. Computes <code>self / rhs</code>, returning <code>None</code> if <code>rhs == 0</code>\nor the division results in overflow.</p>\n<h5 id=\"examples-32\"><a class=\"doc-anchor\" href=\"#examples-32\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>((i32::MIN + <span class=\"number\">1</span>).checked_div(-<span class=\"number\">1</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">2147483647</span>));\n<span class=\"macro\">assert_eq!</span>(i32::MIN.checked_div(-<span class=\"number\">1</span>), <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>((<span class=\"number\">1i32</span>).checked_div(<span class=\"number\">0</span>), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.strict_div\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.91.0, const since 1.91.0\">1.91.0 (const: 1.91.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/num/mod.rs.html#295-314\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html#tymethod.strict_div\" class=\"fn\">strict_div</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Strict integer division. Computes <code>self / rhs</code>, panicking\nif overflow occurred.</p>\n<h5 id=\"panics-5\"><a class=\"doc-anchor\" href=\"#panics-5\">§</a>Panics</h5>\n<p>This function will panic if <code>rhs</code> is zero.</p>\n<h6 id=\"overflow-behavior-5\"><a class=\"doc-anchor\" href=\"#overflow-behavior-5\">§</a>Overflow behavior</h6>\n<p>This function will always panic on overflow, regardless of whether overflow checks are enabled.</p>\n<p>The only case where such an overflow can occur is when one divides <code>MIN / -1</code> on a signed type (where\n<code>MIN</code> is the negative minimal value for the type); this is equivalent to <code>-MIN</code>, a positive value\nthat is too large to represent in the type.</p>\n<h5 id=\"examples-33\"><a class=\"doc-anchor\" href=\"#examples-33\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>((i32::MIN + <span class=\"number\">1</span>).strict_div(-<span class=\"number\">1</span>), <span class=\"number\">2147483647</span>);</code></pre></div>\n<p>The following panics because of overflow:</p>\n\n<div class=\"example-wrap should_panic\"><a href=\"#\" class=\"tooltip\" title=\"This example panics\">ⓘ</a><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let _ </span>= i32::MIN.strict_div(-<span class=\"number\">1</span>);</code></pre></div>\n<p>The following panics because of division by zero:</p>\n\n<div class=\"example-wrap should_panic\"><a href=\"#\" class=\"tooltip\" title=\"This example panics\">ⓘ</a><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let _ </span>= (<span class=\"number\">1i32</span>).strict_div(<span class=\"number\">0</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_div_euclid\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.38.0, const since 1.52.0\">1.38.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/num/mod.rs.html#295-314\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html#tymethod.checked_div_euclid\" class=\"fn\">checked_div_euclid</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>) -&gt; <a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Option&lt;i32&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Checked Euclidean division. Computes <code>self.div_euclid(rhs)</code>,\nreturning <code>None</code> if <code>rhs == 0</code> or the division results in overflow.</p>\n<h5 id=\"examples-34\"><a class=\"doc-anchor\" href=\"#examples-34\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>((i32::MIN + <span class=\"number\">1</span>).checked_div_euclid(-<span class=\"number\">1</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">2147483647</span>));\n<span class=\"macro\">assert_eq!</span>(i32::MIN.checked_div_euclid(-<span class=\"number\">1</span>), <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>((<span class=\"number\">1i32</span>).checked_div_euclid(<span class=\"number\">0</span>), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.strict_div_euclid\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.91.0, const since 1.91.0\">1.91.0 (const: 1.91.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/num/mod.rs.html#295-314\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html#tymethod.strict_div_euclid\" class=\"fn\">strict_div_euclid</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Strict Euclidean division. Computes <code>self.div_euclid(rhs)</code>, panicking\nif overflow occurred.</p>\n<h5 id=\"panics-6\"><a class=\"doc-anchor\" href=\"#panics-6\">§</a>Panics</h5>\n<p>This function will panic if <code>rhs</code> is zero.</p>\n<h6 id=\"overflow-behavior-6\"><a class=\"doc-anchor\" href=\"#overflow-behavior-6\">§</a>Overflow behavior</h6>\n<p>This function will always panic on overflow, regardless of whether overflow checks are enabled.</p>\n<p>The only case where such an overflow can occur is when one divides <code>MIN / -1</code> on a signed type (where\n<code>MIN</code> is the negative minimal value for the type); this is equivalent to <code>-MIN</code>, a positive value\nthat is too large to represent in the type.</p>\n<h5 id=\"examples-35\"><a class=\"doc-anchor\" href=\"#examples-35\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>((i32::MIN + <span class=\"number\">1</span>).strict_div_euclid(-<span class=\"number\">1</span>), <span class=\"number\">2147483647</span>);</code></pre></div>\n<p>The following panics because of overflow:</p>\n\n<div class=\"example-wrap should_panic\"><a href=\"#\" class=\"tooltip\" title=\"This example panics\">ⓘ</a><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let _ </span>= i32::MIN.strict_div_euclid(-<span class=\"number\">1</span>);</code></pre></div>\n<p>The following panics because of division by zero:</p>\n\n<div class=\"example-wrap should_panic\"><a href=\"#\" class=\"tooltip\" title=\"This example panics\">ⓘ</a><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let _ </span>= (<span class=\"number\">1i32</span>).strict_div_euclid(<span class=\"number\">0</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_exact_div\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/num/mod.rs.html#295-314\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html#tymethod.checked_exact_div\" class=\"fn\">checked_exact_div</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>) -&gt; <a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Option&lt;i32&gt;\">ⓘ</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>exact_div</code>)</span></div></span></summary><div class=\"docblock\"><p>Checked integer division without remainder. Computes <code>self / rhs</code>,\nreturning <code>None</code> if <code>rhs == 0</code>, the division results in overflow,\nor <code>self % rhs != 0</code>.</p>\n<h5 id=\"examples-36\"><a class=\"doc-anchor\" href=\"#examples-36\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(exact_div)]\n</span><span class=\"macro\">assert_eq!</span>((i32::MIN + <span class=\"number\">1</span>).checked_exact_div(-<span class=\"number\">1</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">2147483647</span>));\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">5i32</span>).checked_exact_div(<span class=\"number\">2</span>), <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(i32::MIN.checked_exact_div(-<span class=\"number\">1</span>), <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>((<span class=\"number\">1i32</span>).checked_exact_div(<span class=\"number\">0</span>), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.exact_div\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/num/mod.rs.html#295-314\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html#tymethod.exact_div\" class=\"fn\">exact_div</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>exact_div</code>)</span></div></span></summary><div class=\"docblock\"><p>Checked integer division without remainder. Computes <code>self / rhs</code>.</p>\n<h5 id=\"panics-7\"><a class=\"doc-anchor\" href=\"#panics-7\">§</a>Panics</h5>\n<p>This function will panic  if <code>rhs == 0</code>, the division results in overflow,\nor <code>self % rhs != 0</code>.</p>\n<h5 id=\"examples-37\"><a class=\"doc-anchor\" href=\"#examples-37\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(exact_div)]\n</span><span class=\"macro\">assert_eq!</span>(<span class=\"number\">64i32</span>.exact_div(<span class=\"number\">2</span>), <span class=\"number\">32</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">64i32</span>.exact_div(<span class=\"number\">32</span>), <span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>((i32::MIN + <span class=\"number\">1</span>).exact_div(-<span class=\"number\">1</span>), <span class=\"number\">2147483647</span>);</code></pre></div>\n\n<div class=\"example-wrap should_panic\"><a href=\"#\" class=\"tooltip\" title=\"This example panics\">ⓘ</a><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(exact_div)]\n</span><span class=\"kw\">let _ </span>= <span class=\"number\">65i32</span>.exact_div(<span class=\"number\">2</span>);</code></pre></div>\n\n<div class=\"example-wrap should_panic\"><a href=\"#\" class=\"tooltip\" title=\"This example panics\">ⓘ</a><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(exact_div)]\n</span><span class=\"kw\">let _ </span>= i32::MIN.exact_div(-<span class=\"number\">1</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unchecked_exact_div\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/num/mod.rs.html#295-314\">Source</a><h4 class=\"code-header\">pub const unsafe fn <a href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html#tymethod.unchecked_exact_div\" class=\"fn\">unchecked_exact_div</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>exact_div</code>)</span></div></span></summary><div class=\"docblock\"><p>Unchecked integer division without remainder. Computes <code>self / rhs</code>.</p>\n<h5 id=\"safety-3\"><a class=\"doc-anchor\" href=\"#safety-3\">§</a>Safety</h5>\n<p>This results in undefined behavior when <code>rhs == 0</code>, <code>self % rhs != 0</code>, or\n<code>self == i32::MIN &amp;&amp; rhs == -1</code>,\ni.e. when <a href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html#method.checked_exact_div\" title=\"method i32::checked_exact_div\"><code>checked_exact_div</code></a> would return <code>None</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_rem\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.52.0\">1.7.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/num/mod.rs.html#295-314\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html#tymethod.checked_rem\" class=\"fn\">checked_rem</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>) -&gt; <a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Option&lt;i32&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Checked integer remainder. Computes <code>self % rhs</code>, returning <code>None</code> if\n<code>rhs == 0</code> or the division results in overflow.</p>\n<h5 id=\"examples-38\"><a class=\"doc-anchor\" href=\"#examples-38\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5i32</span>.checked_rem(<span class=\"number\">2</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">1</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">5i32</span>.checked_rem(<span class=\"number\">0</span>), <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(i32::MIN.checked_rem(-<span class=\"number\">1</span>), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.strict_rem\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.91.0, const since 1.91.0\">1.91.0 (const: 1.91.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/num/mod.rs.html#295-314\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html#tymethod.strict_rem\" class=\"fn\">strict_rem</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Strict integer remainder. Computes <code>self % rhs</code>, panicking if\nthe division results in overflow.</p>\n<h5 id=\"panics-8\"><a class=\"doc-anchor\" href=\"#panics-8\">§</a>Panics</h5>\n<p>This function will panic if <code>rhs</code> is zero.</p>\n<h6 id=\"overflow-behavior-7\"><a class=\"doc-anchor\" href=\"#overflow-behavior-7\">§</a>Overflow behavior</h6>\n<p>This function will always panic on overflow, regardless of whether overflow checks are enabled.</p>\n<p>The only case where such an overflow can occur is <code>x % y</code> for <code>MIN / -1</code> on a\nsigned type (where <code>MIN</code> is the negative minimal value), which is invalid due to implementation artifacts.</p>\n<h5 id=\"examples-39\"><a class=\"doc-anchor\" href=\"#examples-39\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5i32</span>.strict_rem(<span class=\"number\">2</span>), <span class=\"number\">1</span>);</code></pre></div>\n<p>The following panics because of division by zero:</p>\n\n<div class=\"example-wrap should_panic\"><a href=\"#\" class=\"tooltip\" title=\"This example panics\">ⓘ</a><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let _ </span>= <span class=\"number\">5i32</span>.strict_rem(<span class=\"number\">0</span>);</code></pre></div>\n<p>The following panics because of overflow:</p>\n\n<div class=\"example-wrap should_panic\"><a href=\"#\" class=\"tooltip\" title=\"This example panics\">ⓘ</a><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let _ </span>= i32::MIN.strict_rem(-<span class=\"number\">1</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_rem_euclid\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.38.0, const since 1.52.0\">1.38.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/num/mod.rs.html#295-314\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html#tymethod.checked_rem_euclid\" class=\"fn\">checked_rem_euclid</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>) -&gt; <a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Option&lt;i32&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Checked Euclidean remainder. Computes <code>self.rem_euclid(rhs)</code>, returning <code>None</code>\nif <code>rhs == 0</code> or the division results in overflow.</p>\n<h5 id=\"examples-40\"><a class=\"doc-anchor\" href=\"#examples-40\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5i32</span>.checked_rem_euclid(<span class=\"number\">2</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">1</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">5i32</span>.checked_rem_euclid(<span class=\"number\">0</span>), <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(i32::MIN.checked_rem_euclid(-<span class=\"number\">1</span>), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.strict_rem_euclid\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.91.0, const since 1.91.0\">1.91.0 (const: 1.91.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/num/mod.rs.html#295-314\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html#tymethod.strict_rem_euclid\" class=\"fn\">strict_rem_euclid</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Strict Euclidean remainder. Computes <code>self.rem_euclid(rhs)</code>, panicking if\nthe division results in overflow.</p>\n<h5 id=\"panics-9\"><a class=\"doc-anchor\" href=\"#panics-9\">§</a>Panics</h5>\n<p>This function will panic if <code>rhs</code> is zero.</p>\n<h6 id=\"overflow-behavior-8\"><a class=\"doc-anchor\" href=\"#overflow-behavior-8\">§</a>Overflow behavior</h6>\n<p>This function will always panic on overflow, regardless of whether overflow checks are enabled.</p>\n<p>The only case where such an overflow can occur is <code>x % y</code> for <code>MIN / -1</code> on a\nsigned type (where <code>MIN</code> is the negative minimal value), which is invalid due to implementation artifacts.</p>\n<h5 id=\"examples-41\"><a class=\"doc-anchor\" href=\"#examples-41\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5i32</span>.strict_rem_euclid(<span class=\"number\">2</span>), <span class=\"number\">1</span>);</code></pre></div>\n<p>The following panics because of division by zero:</p>\n\n<div class=\"example-wrap should_panic\"><a href=\"#\" class=\"tooltip\" title=\"This example panics\">ⓘ</a><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let _ </span>= <span class=\"number\">5i32</span>.strict_rem_euclid(<span class=\"number\">0</span>);</code></pre></div>\n<p>The following panics because of overflow:</p>\n\n<div class=\"example-wrap should_panic\"><a href=\"#\" class=\"tooltip\" title=\"This example panics\">ⓘ</a><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let _ </span>= i32::MIN.strict_rem_euclid(-<span class=\"number\">1</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_neg\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.47.0\">1.7.0 (const: 1.47.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/num/mod.rs.html#295-314\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html#tymethod.checked_neg\" class=\"fn\">checked_neg</a>(self) -&gt; <a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Option&lt;i32&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Checked negation. Computes <code>-self</code>, returning <code>None</code> if <code>self == MIN</code>.</p>\n<h5 id=\"examples-42\"><a class=\"doc-anchor\" href=\"#examples-42\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5i32</span>.checked_neg(), <span class=\"prelude-val\">Some</span>(-<span class=\"number\">5</span>));\n<span class=\"macro\">assert_eq!</span>(i32::MIN.checked_neg(), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unchecked_neg\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/num/mod.rs.html#295-314\">Source</a><h4 class=\"code-header\">pub const unsafe fn <a href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html#tymethod.unchecked_neg\" class=\"fn\">unchecked_neg</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>unchecked_neg</code>)</span></div></span></summary><div class=\"docblock\"><p>Unchecked negation. Computes <code>-self</code>, assuming overflow cannot occur.</p>\n<h5 id=\"safety-4\"><a class=\"doc-anchor\" href=\"#safety-4\">§</a>Safety</h5>\n<p>This results in undefined behavior when\n<code>self == i32::MIN</code>,\ni.e. when <a href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html#method.checked_neg\" title=\"method i32::checked_neg\"><code>checked_neg</code></a> would return <code>None</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.strict_neg\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.91.0, const since 1.91.0\">1.91.0 (const: 1.91.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/num/mod.rs.html#295-314\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html#tymethod.strict_neg\" class=\"fn\">strict_neg</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Strict negation. Computes <code>-self</code>, panicking if <code>self == MIN</code>.</p>\n<h5 id=\"panics-10\"><a class=\"doc-anchor\" href=\"#panics-10\">§</a>Panics</h5><h6 id=\"overflow-behavior-9\"><a class=\"doc-anchor\" href=\"#overflow-behavior-9\">§</a>Overflow behavior</h6>\n<p>This function will always panic on overflow, regardless of whether overflow checks are enabled.</p>\n<h5 id=\"examples-43\"><a class=\"doc-anchor\" href=\"#examples-43\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5i32</span>.strict_neg(), -<span class=\"number\">5</span>);</code></pre></div>\n<p>The following panics because of overflow:</p>\n\n<div class=\"example-wrap should_panic\"><a href=\"#\" class=\"tooltip\" title=\"This example panics\">ⓘ</a><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let _ </span>= i32::MIN.strict_neg();</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_shl\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.47.0\">1.7.0 (const: 1.47.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/num/mod.rs.html#295-314\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html#tymethod.checked_shl\" class=\"fn\">checked_shl</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>) -&gt; <a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Option&lt;i32&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Checked shift left. Computes <code>self &lt;&lt; rhs</code>, returning <code>None</code> if <code>rhs</code> is larger\nthan or equal to the number of bits in <code>self</code>.</p>\n<h5 id=\"examples-44\"><a class=\"doc-anchor\" href=\"#examples-44\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">0x1i32</span>.checked_shl(<span class=\"number\">4</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">0x10</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">0x1i32</span>.checked_shl(<span class=\"number\">129</span>), <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">0x10i32</span>.checked_shl(<span class=\"number\">31</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">0</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.strict_shl\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.91.0, const since 1.91.0\">1.91.0 (const: 1.91.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/num/mod.rs.html#295-314\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html#tymethod.strict_shl\" class=\"fn\">strict_shl</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Strict shift left. Computes <code>self &lt;&lt; rhs</code>, panicking if <code>rhs</code> is larger\nthan or equal to the number of bits in <code>self</code>.</p>\n<h5 id=\"panics-11\"><a class=\"doc-anchor\" href=\"#panics-11\">§</a>Panics</h5><h6 id=\"overflow-behavior-10\"><a class=\"doc-anchor\" href=\"#overflow-behavior-10\">§</a>Overflow behavior</h6>\n<p>This function will always panic on overflow, regardless of whether overflow checks are enabled.</p>\n<h5 id=\"examples-45\"><a class=\"doc-anchor\" href=\"#examples-45\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">0x1i32</span>.strict_shl(<span class=\"number\">4</span>), <span class=\"number\">0x10</span>);</code></pre></div>\n<p>The following panics because of overflow:</p>\n\n<div class=\"example-wrap should_panic\"><a href=\"#\" class=\"tooltip\" title=\"This example panics\">ⓘ</a><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let _ </span>= <span class=\"number\">0x1i32</span>.strict_shl(<span class=\"number\">129</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unchecked_shl\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/num/mod.rs.html#295-314\">Source</a><h4 class=\"code-header\">pub const unsafe fn <a href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html#tymethod.unchecked_shl\" class=\"fn\">unchecked_shl</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>unchecked_shifts</code>)</span></div></span></summary><div class=\"docblock\"><p>Unchecked shift left. Computes <code>self &lt;&lt; rhs</code>, assuming that\n<code>rhs</code> is less than the number of bits in <code>self</code>.</p>\n<h5 id=\"safety-5\"><a class=\"doc-anchor\" href=\"#safety-5\">§</a>Safety</h5>\n<p>This results in undefined behavior if <code>rhs</code> is larger than\nor equal to the number of bits in <code>self</code>,\ni.e. when <a href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html#method.checked_shl\" title=\"method i32::checked_shl\"><code>checked_shl</code></a> would return <code>None</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unbounded_shl\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.87.0, const since 1.87.0\">1.87.0 (const: 1.87.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/num/mod.rs.html#295-314\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html#tymethod.unbounded_shl\" class=\"fn\">unbounded_shl</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Unbounded shift left. Computes <code>self &lt;&lt; rhs</code>, without bounding the value of <code>rhs</code>.</p>\n<p>If <code>rhs</code> is larger or equal to the number of bits in <code>self</code>,\nthe entire value is shifted out, and <code>0</code> is returned.</p>\n<h5 id=\"examples-46\"><a class=\"doc-anchor\" href=\"#examples-46\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">0x1i32</span>.unbounded_shl(<span class=\"number\">4</span>), <span class=\"number\">0x10</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">0x1i32</span>.unbounded_shl(<span class=\"number\">129</span>), <span class=\"number\">0</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_shr\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.47.0\">1.7.0 (const: 1.47.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/num/mod.rs.html#295-314\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html#tymethod.checked_shr\" class=\"fn\">checked_shr</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>) -&gt; <a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Option&lt;i32&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Checked shift right. Computes <code>self &gt;&gt; rhs</code>, returning <code>None</code> if <code>rhs</code> is\nlarger than or equal to the number of bits in <code>self</code>.</p>\n<h5 id=\"examples-47\"><a class=\"doc-anchor\" href=\"#examples-47\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">0x10i32</span>.checked_shr(<span class=\"number\">4</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">0x1</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">0x10i32</span>.checked_shr(<span class=\"number\">128</span>), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.strict_shr\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.91.0, const since 1.91.0\">1.91.0 (const: 1.91.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/num/mod.rs.html#295-314\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html#tymethod.strict_shr\" class=\"fn\">strict_shr</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Strict shift right. Computes <code>self &gt;&gt; rhs</code>, panicking <code>rhs</code> is\nlarger than or equal to the number of bits in <code>self</code>.</p>\n<h5 id=\"panics-12\"><a class=\"doc-anchor\" href=\"#panics-12\">§</a>Panics</h5><h6 id=\"overflow-behavior-11\"><a class=\"doc-anchor\" href=\"#overflow-behavior-11\">§</a>Overflow behavior</h6>\n<p>This function will always panic on overflow, regardless of whether overflow checks are enabled.</p>\n<h5 id=\"examples-48\"><a class=\"doc-anchor\" href=\"#examples-48\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">0x10i32</span>.strict_shr(<span class=\"number\">4</span>), <span class=\"number\">0x1</span>);</code></pre></div>\n<p>The following panics because of overflow:</p>\n\n<div class=\"example-wrap should_panic\"><a href=\"#\" class=\"tooltip\" title=\"This example panics\">ⓘ</a><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let _ </span>= <span class=\"number\">0x10i32</span>.strict_shr(<span class=\"number\">128</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unchecked_shr\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/num/mod.rs.html#295-314\">Source</a><h4 class=\"code-header\">pub const unsafe fn <a href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html#tymethod.unchecked_shr\" class=\"fn\">unchecked_shr</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>unchecked_shifts</code>)</span></div></span></summary><div class=\"docblock\"><p>Unchecked shift right. Computes <code>self &gt;&gt; rhs</code>, assuming that\n<code>rhs</code> is less than the number of bits in <code>self</code>.</p>\n<h5 id=\"safety-6\"><a class=\"doc-anchor\" href=\"#safety-6\">§</a>Safety</h5>\n<p>This results in undefined behavior if <code>rhs</code> is larger than\nor equal to the number of bits in <code>self</code>,\ni.e. when <a href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html#method.checked_shr\" title=\"method i32::checked_shr\"><code>checked_shr</code></a> would return <code>None</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unbounded_shr\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.87.0, const since 1.87.0\">1.87.0 (const: 1.87.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/num/mod.rs.html#295-314\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html#tymethod.unbounded_shr\" class=\"fn\">unbounded_shr</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Unbounded shift right. Computes <code>self &gt;&gt; rhs</code>, without bounding the value of <code>rhs</code>.</p>\n<p>If <code>rhs</code> is larger or equal to the number of bits in <code>self</code>,\nthe entire value is shifted out, which yields <code>0</code> for a positive number,\nand <code>-1</code> for a negative number.</p>\n<h5 id=\"examples-49\"><a class=\"doc-anchor\" href=\"#examples-49\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">0x10i32</span>.unbounded_shr(<span class=\"number\">4</span>), <span class=\"number\">0x1</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">0x10i32</span>.unbounded_shr(<span class=\"number\">129</span>), <span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>(i32::MIN.unbounded_shr(<span class=\"number\">129</span>), -<span class=\"number\">1</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_abs\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.13.0, const since 1.47.0\">1.13.0 (const: 1.47.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/num/mod.rs.html#295-314\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html#tymethod.checked_abs\" class=\"fn\">checked_abs</a>(self) -&gt; <a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Option&lt;i32&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Checked absolute value. Computes <code>self.abs()</code>, returning <code>None</code> if\n<code>self == MIN</code>.</p>\n<h5 id=\"examples-50\"><a class=\"doc-anchor\" href=\"#examples-50\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>((-<span class=\"number\">5i32</span>).checked_abs(), <span class=\"prelude-val\">Some</span>(<span class=\"number\">5</span>));\n<span class=\"macro\">assert_eq!</span>(i32::MIN.checked_abs(), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.strict_abs\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.91.0, const since 1.91.0\">1.91.0 (const: 1.91.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/num/mod.rs.html#295-314\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html#tymethod.strict_abs\" class=\"fn\">strict_abs</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Strict absolute value. Computes <code>self.abs()</code>, panicking if\n<code>self == MIN</code>.</p>\n<h5 id=\"panics-13\"><a class=\"doc-anchor\" href=\"#panics-13\">§</a>Panics</h5><h6 id=\"overflow-behavior-12\"><a class=\"doc-anchor\" href=\"#overflow-behavior-12\">§</a>Overflow behavior</h6>\n<p>This function will always panic on overflow, regardless of whether overflow checks are enabled.</p>\n<h5 id=\"examples-51\"><a class=\"doc-anchor\" href=\"#examples-51\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>((-<span class=\"number\">5i32</span>).strict_abs(), <span class=\"number\">5</span>);</code></pre></div>\n<p>The following panics because of overflow:</p>\n\n<div class=\"example-wrap should_panic\"><a href=\"#\" class=\"tooltip\" title=\"This example panics\">ⓘ</a><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let _ </span>= i32::MIN.strict_abs();</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_pow\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0, const since 1.50.0\">1.34.0 (const: 1.50.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/num/mod.rs.html#295-314\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html#tymethod.checked_pow\" class=\"fn\">checked_pow</a>(self, exp: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>) -&gt; <a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Option&lt;i32&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Checked exponentiation. Computes <code>self.pow(exp)</code>, returning <code>None</code> if\noverflow occurred.</p>\n<h5 id=\"examples-52\"><a class=\"doc-anchor\" href=\"#examples-52\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">8i32</span>.checked_pow(<span class=\"number\">2</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">64</span>));\n<span class=\"macro\">assert_eq!</span>(i32::MAX.checked_pow(<span class=\"number\">2</span>), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.strict_pow\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.91.0, const since 1.91.0\">1.91.0 (const: 1.91.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/num/mod.rs.html#295-314\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html#tymethod.strict_pow\" class=\"fn\">strict_pow</a>(self, exp: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Strict exponentiation. Computes <code>self.pow(exp)</code>, panicking if\noverflow occurred.</p>\n<h5 id=\"panics-14\"><a class=\"doc-anchor\" href=\"#panics-14\">§</a>Panics</h5><h6 id=\"overflow-behavior-13\"><a class=\"doc-anchor\" href=\"#overflow-behavior-13\">§</a>Overflow behavior</h6>\n<p>This function will always panic on overflow, regardless of whether overflow checks are enabled.</p>\n<h5 id=\"examples-53\"><a class=\"doc-anchor\" href=\"#examples-53\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">8i32</span>.strict_pow(<span class=\"number\">2</span>), <span class=\"number\">64</span>);</code></pre></div>\n<p>The following panics because of overflow:</p>\n\n<div class=\"example-wrap should_panic\"><a href=\"#\" class=\"tooltip\" title=\"This example panics\">ⓘ</a><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let _ </span>= i32::MAX.strict_pow(<span class=\"number\">2</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_isqrt\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.84.0, const since 1.84.0\">1.84.0 (const: 1.84.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/num/mod.rs.html#295-314\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html#tymethod.checked_isqrt\" class=\"fn\">checked_isqrt</a>(self) -&gt; <a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Option&lt;i32&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Returns the square root of the number, rounded down.</p>\n<p>Returns <code>None</code> if <code>self</code> is negative.</p>\n<h5 id=\"examples-54\"><a class=\"doc-anchor\" href=\"#examples-54\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">10i32</span>.checked_isqrt(), <span class=\"prelude-val\">Some</span>(<span class=\"number\">3</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_add\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.47.0\">1.0.0 (const: 1.47.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/num/mod.rs.html#295-314\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html#tymethod.saturating_add\" class=\"fn\">saturating_add</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Saturating integer addition. Computes <code>self + rhs</code>, saturating at the numeric\nbounds instead of overflowing.</p>\n<h5 id=\"examples-55\"><a class=\"doc-anchor\" href=\"#examples-55\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">100i32</span>.saturating_add(<span class=\"number\">1</span>), <span class=\"number\">101</span>);\n<span class=\"macro\">assert_eq!</span>(i32::MAX.saturating_add(<span class=\"number\">100</span>), i32::MAX);\n<span class=\"macro\">assert_eq!</span>(i32::MIN.saturating_add(-<span class=\"number\">1</span>), i32::MIN);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_add_unsigned\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.66.0, const since 1.66.0\">1.66.0 (const: 1.66.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/num/mod.rs.html#295-314\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html#tymethod.saturating_add_unsigned\" class=\"fn\">saturating_add_unsigned</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Saturating addition with an unsigned integer. Computes <code>self + rhs</code>,\nsaturating at the numeric bounds instead of overflowing.</p>\n<h5 id=\"examples-56\"><a class=\"doc-anchor\" href=\"#examples-56\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">1i32</span>.saturating_add_unsigned(<span class=\"number\">2</span>), <span class=\"number\">3</span>);\n<span class=\"macro\">assert_eq!</span>(i32::MAX.saturating_add_unsigned(<span class=\"number\">100</span>), i32::MAX);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_sub\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.47.0\">1.0.0 (const: 1.47.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/num/mod.rs.html#295-314\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html#tymethod.saturating_sub\" class=\"fn\">saturating_sub</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Saturating integer subtraction. Computes <code>self - rhs</code>, saturating at the\nnumeric bounds instead of overflowing.</p>\n<h5 id=\"examples-57\"><a class=\"doc-anchor\" href=\"#examples-57\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">100i32</span>.saturating_sub(<span class=\"number\">127</span>), -<span class=\"number\">27</span>);\n<span class=\"macro\">assert_eq!</span>(i32::MIN.saturating_sub(<span class=\"number\">100</span>), i32::MIN);\n<span class=\"macro\">assert_eq!</span>(i32::MAX.saturating_sub(-<span class=\"number\">1</span>), i32::MAX);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_sub_unsigned\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.66.0, const since 1.66.0\">1.66.0 (const: 1.66.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/num/mod.rs.html#295-314\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html#tymethod.saturating_sub_unsigned\" class=\"fn\">saturating_sub_unsigned</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Saturating subtraction with an unsigned integer. Computes <code>self - rhs</code>,\nsaturating at the numeric bounds instead of overflowing.</p>\n<h5 id=\"examples-58\"><a class=\"doc-anchor\" href=\"#examples-58\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">100i32</span>.saturating_sub_unsigned(<span class=\"number\">127</span>), -<span class=\"number\">27</span>);\n<span class=\"macro\">assert_eq!</span>(i32::MIN.saturating_sub_unsigned(<span class=\"number\">100</span>), i32::MIN);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_neg\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.45.0, const since 1.47.0\">1.45.0 (const: 1.47.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/num/mod.rs.html#295-314\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html#tymethod.saturating_neg\" class=\"fn\">saturating_neg</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Saturating integer negation. Computes <code>-self</code>, returning <code>MAX</code> if <code>self == MIN</code>\ninstead of overflowing.</p>\n<h5 id=\"examples-59\"><a class=\"doc-anchor\" href=\"#examples-59\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">100i32</span>.saturating_neg(), -<span class=\"number\">100</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">100i32</span>).saturating_neg(), <span class=\"number\">100</span>);\n<span class=\"macro\">assert_eq!</span>(i32::MIN.saturating_neg(), i32::MAX);\n<span class=\"macro\">assert_eq!</span>(i32::MAX.saturating_neg(), i32::MIN + <span class=\"number\">1</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_abs\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.45.0, const since 1.47.0\">1.45.0 (const: 1.47.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/num/mod.rs.html#295-314\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html#tymethod.saturating_abs\" class=\"fn\">saturating_abs</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Saturating absolute value. Computes <code>self.abs()</code>, returning <code>MAX</code> if <code>self == MIN</code> instead of overflowing.</p>\n<h5 id=\"examples-60\"><a class=\"doc-anchor\" href=\"#examples-60\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">100i32</span>.saturating_abs(), <span class=\"number\">100</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">100i32</span>).saturating_abs(), <span class=\"number\">100</span>);\n<span class=\"macro\">assert_eq!</span>(i32::MIN.saturating_abs(), i32::MAX);\n<span class=\"macro\">assert_eq!</span>((i32::MIN + <span class=\"number\">1</span>).saturating_abs(), i32::MAX);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_mul\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.47.0\">1.7.0 (const: 1.47.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/num/mod.rs.html#295-314\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html#tymethod.saturating_mul\" class=\"fn\">saturating_mul</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Saturating integer multiplication. Computes <code>self * rhs</code>, saturating at the\nnumeric bounds instead of overflowing.</p>\n<h5 id=\"examples-61\"><a class=\"doc-anchor\" href=\"#examples-61\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">10i32</span>.saturating_mul(<span class=\"number\">12</span>), <span class=\"number\">120</span>);\n<span class=\"macro\">assert_eq!</span>(i32::MAX.saturating_mul(<span class=\"number\">10</span>), i32::MAX);\n<span class=\"macro\">assert_eq!</span>(i32::MIN.saturating_mul(<span class=\"number\">10</span>), i32::MIN);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_div\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.58.0, const since 1.58.0\">1.58.0 (const: 1.58.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/num/mod.rs.html#295-314\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html#tymethod.saturating_div\" class=\"fn\">saturating_div</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Saturating integer division. Computes <code>self / rhs</code>, saturating at the\nnumeric bounds instead of overflowing.</p>\n<h5 id=\"panics-15\"><a class=\"doc-anchor\" href=\"#panics-15\">§</a>Panics</h5>\n<p>This function will panic if <code>rhs</code> is zero.</p>\n<h5 id=\"examples-62\"><a class=\"doc-anchor\" href=\"#examples-62\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5i32</span>.saturating_div(<span class=\"number\">2</span>), <span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(i32::MAX.saturating_div(-<span class=\"number\">1</span>), i32::MIN + <span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(i32::MIN.saturating_div(-<span class=\"number\">1</span>), i32::MAX);\n</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_pow\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0, const since 1.50.0\">1.34.0 (const: 1.50.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/num/mod.rs.html#295-314\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html#tymethod.saturating_pow\" class=\"fn\">saturating_pow</a>(self, exp: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Saturating integer exponentiation. Computes <code>self.pow(exp)</code>,\nsaturating at the numeric bounds instead of overflowing.</p>\n<h5 id=\"examples-63\"><a class=\"doc-anchor\" href=\"#examples-63\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>((-<span class=\"number\">4i32</span>).saturating_pow(<span class=\"number\">3</span>), -<span class=\"number\">64</span>);\n<span class=\"macro\">assert_eq!</span>(i32::MIN.saturating_pow(<span class=\"number\">2</span>), i32::MAX);\n<span class=\"macro\">assert_eq!</span>(i32::MIN.saturating_pow(<span class=\"number\">3</span>), i32::MIN);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_add\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/num/mod.rs.html#295-314\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html#tymethod.wrapping_add\" class=\"fn\">wrapping_add</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Wrapping (modular) addition. Computes <code>self + rhs</code>, wrapping around at the\nboundary of the type.</p>\n<h5 id=\"examples-64\"><a class=\"doc-anchor\" href=\"#examples-64\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">100i32</span>.wrapping_add(<span class=\"number\">27</span>), <span class=\"number\">127</span>);\n<span class=\"macro\">assert_eq!</span>(i32::MAX.wrapping_add(<span class=\"number\">2</span>), i32::MIN + <span class=\"number\">1</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_add_unsigned\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.66.0, const since 1.66.0\">1.66.0 (const: 1.66.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/num/mod.rs.html#295-314\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html#tymethod.wrapping_add_unsigned\" class=\"fn\">wrapping_add_unsigned</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Wrapping (modular) addition with an unsigned integer. Computes\n<code>self + rhs</code>, wrapping around at the boundary of the type.</p>\n<h5 id=\"examples-65\"><a class=\"doc-anchor\" href=\"#examples-65\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">100i32</span>.wrapping_add_unsigned(<span class=\"number\">27</span>), <span class=\"number\">127</span>);\n<span class=\"macro\">assert_eq!</span>(i32::MAX.wrapping_add_unsigned(<span class=\"number\">2</span>), i32::MIN + <span class=\"number\">1</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_sub\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/num/mod.rs.html#295-314\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html#tymethod.wrapping_sub\" class=\"fn\">wrapping_sub</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Wrapping (modular) subtraction. Computes <code>self - rhs</code>, wrapping around at the\nboundary of the type.</p>\n<h5 id=\"examples-66\"><a class=\"doc-anchor\" href=\"#examples-66\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">0i32</span>.wrapping_sub(<span class=\"number\">127</span>), -<span class=\"number\">127</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">2i32</span>).wrapping_sub(i32::MAX), i32::MAX);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_sub_unsigned\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.66.0, const since 1.66.0\">1.66.0 (const: 1.66.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/num/mod.rs.html#295-314\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html#tymethod.wrapping_sub_unsigned\" class=\"fn\">wrapping_sub_unsigned</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Wrapping (modular) subtraction with an unsigned integer. Computes\n<code>self - rhs</code>, wrapping around at the boundary of the type.</p>\n<h5 id=\"examples-67\"><a class=\"doc-anchor\" href=\"#examples-67\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">0i32</span>.wrapping_sub_unsigned(<span class=\"number\">127</span>), -<span class=\"number\">127</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">2i32</span>).wrapping_sub_unsigned(u32::MAX), -<span class=\"number\">1</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_mul\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/num/mod.rs.html#295-314\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html#tymethod.wrapping_mul\" class=\"fn\">wrapping_mul</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Wrapping (modular) multiplication. Computes <code>self * rhs</code>, wrapping around at\nthe boundary of the type.</p>\n<h5 id=\"examples-68\"><a class=\"doc-anchor\" href=\"#examples-68\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">10i32</span>.wrapping_mul(<span class=\"number\">12</span>), <span class=\"number\">120</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">11i8</span>.wrapping_mul(<span class=\"number\">12</span>), -<span class=\"number\">124</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_div\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.2.0, const since 1.52.0\">1.2.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/num/mod.rs.html#295-314\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html#tymethod.wrapping_div\" class=\"fn\">wrapping_div</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Wrapping (modular) division. Computes <code>self / rhs</code>, wrapping around at the\nboundary of the type.</p>\n<p>The only case where such wrapping can occur is when one divides <code>MIN / -1</code> on a signed type (where\n<code>MIN</code> is the negative minimal value for the type); this is equivalent to <code>-MIN</code>, a positive value\nthat is too large to represent in the type. In such a case, this function returns <code>MIN</code> itself.</p>\n<h5 id=\"panics-16\"><a class=\"doc-anchor\" href=\"#panics-16\">§</a>Panics</h5>\n<p>This function will panic if <code>rhs</code> is zero.</p>\n<h5 id=\"examples-69\"><a class=\"doc-anchor\" href=\"#examples-69\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">100i32</span>.wrapping_div(<span class=\"number\">10</span>), <span class=\"number\">10</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">128i8</span>).wrapping_div(-<span class=\"number\">1</span>), -<span class=\"number\">128</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_div_euclid\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.38.0, const since 1.52.0\">1.38.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/num/mod.rs.html#295-314\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html#tymethod.wrapping_div_euclid\" class=\"fn\">wrapping_div_euclid</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Wrapping Euclidean division. Computes <code>self.div_euclid(rhs)</code>,\nwrapping around at the boundary of the type.</p>\n<p>Wrapping will only occur in <code>MIN / -1</code> on a signed type (where <code>MIN</code> is the negative minimal value\nfor the type). This is equivalent to <code>-MIN</code>, a positive value that is too large to represent in the\ntype. In this case, this method returns <code>MIN</code> itself.</p>\n<h5 id=\"panics-17\"><a class=\"doc-anchor\" href=\"#panics-17\">§</a>Panics</h5>\n<p>This function will panic if <code>rhs</code> is zero.</p>\n<h5 id=\"examples-70\"><a class=\"doc-anchor\" href=\"#examples-70\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">100i32</span>.wrapping_div_euclid(<span class=\"number\">10</span>), <span class=\"number\">10</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">128i8</span>).wrapping_div_euclid(-<span class=\"number\">1</span>), -<span class=\"number\">128</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_rem\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.2.0, const since 1.52.0\">1.2.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/num/mod.rs.html#295-314\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html#tymethod.wrapping_rem\" class=\"fn\">wrapping_rem</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Wrapping (modular) remainder. Computes <code>self % rhs</code>, wrapping around at the\nboundary of the type.</p>\n<p>Such wrap-around never actually occurs mathematically; implementation artifacts make <code>x % y</code>\ninvalid for <code>MIN / -1</code> on a signed type (where <code>MIN</code> is the negative minimal value). In such a case,\nthis function returns <code>0</code>.</p>\n<h5 id=\"panics-18\"><a class=\"doc-anchor\" href=\"#panics-18\">§</a>Panics</h5>\n<p>This function will panic if <code>rhs</code> is zero.</p>\n<h5 id=\"examples-71\"><a class=\"doc-anchor\" href=\"#examples-71\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">100i32</span>.wrapping_rem(<span class=\"number\">10</span>), <span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">128i8</span>).wrapping_rem(-<span class=\"number\">1</span>), <span class=\"number\">0</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_rem_euclid\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.38.0, const since 1.52.0\">1.38.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/num/mod.rs.html#295-314\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html#tymethod.wrapping_rem_euclid\" class=\"fn\">wrapping_rem_euclid</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Wrapping Euclidean remainder. Computes <code>self.rem_euclid(rhs)</code>, wrapping around\nat the boundary of the type.</p>\n<p>Wrapping will only occur in <code>MIN % -1</code> on a signed type (where <code>MIN</code> is the negative minimal value\nfor the type). In this case, this method returns 0.</p>\n<h5 id=\"panics-19\"><a class=\"doc-anchor\" href=\"#panics-19\">§</a>Panics</h5>\n<p>This function will panic if <code>rhs</code> is zero.</p>\n<h5 id=\"examples-72\"><a class=\"doc-anchor\" href=\"#examples-72\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">100i32</span>.wrapping_rem_euclid(<span class=\"number\">10</span>), <span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">128i8</span>).wrapping_rem_euclid(-<span class=\"number\">1</span>), <span class=\"number\">0</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_neg\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.2.0, const since 1.32.0\">1.2.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/num/mod.rs.html#295-314\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html#tymethod.wrapping_neg\" class=\"fn\">wrapping_neg</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Wrapping (modular) negation. Computes <code>-self</code>, wrapping around at the boundary\nof the type.</p>\n<p>The only case where such wrapping can occur is when one negates <code>MIN</code> on a signed type (where <code>MIN</code>\nis the negative minimal value for the type); this is a positive value that is too large to represent\nin the type. In such a case, this function returns <code>MIN</code> itself.</p>\n<h5 id=\"examples-73\"><a class=\"doc-anchor\" href=\"#examples-73\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">100i32</span>.wrapping_neg(), -<span class=\"number\">100</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">100i32</span>).wrapping_neg(), <span class=\"number\">100</span>);\n<span class=\"macro\">assert_eq!</span>(i32::MIN.wrapping_neg(), i32::MIN);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_shl\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.2.0, const since 1.32.0\">1.2.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/num/mod.rs.html#295-314\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html#tymethod.wrapping_shl\" class=\"fn\">wrapping_shl</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Panic-free bitwise shift-left; yields <code>self &lt;&lt; mask(rhs)</code>, where <code>mask</code> removes\nany high-order bits of <code>rhs</code> that would cause the shift to exceed the bitwidth of the type.</p>\n<p>Note that this is <em>not</em> the same as a rotate-left; the RHS of a wrapping shift-left is restricted to\nthe range of the type, rather than the bits shifted out of the LHS being returned to the other end.\nThe primitive integer types all implement a <a href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html#method.rotate_left\" title=\"method i32::rotate_left\"><code>rotate_left</code></a> function,\nwhich may be what you want instead.</p>\n<h5 id=\"examples-74\"><a class=\"doc-anchor\" href=\"#examples-74\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>((-<span class=\"number\">1i32</span>).wrapping_shl(<span class=\"number\">7</span>), -<span class=\"number\">128</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">1i32</span>).wrapping_shl(<span class=\"number\">128</span>), -<span class=\"number\">1</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_shr\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.2.0, const since 1.32.0\">1.2.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/num/mod.rs.html#295-314\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html#tymethod.wrapping_shr\" class=\"fn\">wrapping_shr</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Panic-free bitwise shift-right; yields <code>self &gt;&gt; mask(rhs)</code>, where <code>mask</code>\nremoves any high-order bits of <code>rhs</code> that would cause the shift to exceed the bitwidth of the type.</p>\n<p>Note that this is <em>not</em> the same as a rotate-right; the RHS of a wrapping shift-right is restricted\nto the range of the type, rather than the bits shifted out of the LHS being returned to the other\nend. The primitive integer types all implement a <a href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html#method.rotate_right\" title=\"method i32::rotate_right\"><code>rotate_right</code></a> function,\nwhich may be what you want instead.</p>\n<h5 id=\"examples-75\"><a class=\"doc-anchor\" href=\"#examples-75\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>((-<span class=\"number\">128i32</span>).wrapping_shr(<span class=\"number\">7</span>), -<span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">128i16</span>).wrapping_shr(<span class=\"number\">64</span>), -<span class=\"number\">128</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_abs\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.13.0, const since 1.32.0\">1.13.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/num/mod.rs.html#295-314\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html#tymethod.wrapping_abs\" class=\"fn\">wrapping_abs</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Wrapping (modular) absolute value. Computes <code>self.abs()</code>, wrapping around at\nthe boundary of the type.</p>\n<p>The only case where such wrapping can occur is when one takes the absolute value of the negative\nminimal value for the type; this is a positive value that is too large to represent in the type. In\nsuch a case, this function returns <code>MIN</code> itself.</p>\n<h5 id=\"examples-76\"><a class=\"doc-anchor\" href=\"#examples-76\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">100i32</span>.wrapping_abs(), <span class=\"number\">100</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">100i32</span>).wrapping_abs(), <span class=\"number\">100</span>);\n<span class=\"macro\">assert_eq!</span>(i32::MIN.wrapping_abs(), i32::MIN);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">128i8</span>).wrapping_abs() <span class=\"kw\">as </span>u8, <span class=\"number\">128</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unsigned_abs\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.51.0, const since 1.51.0\">1.51.0 (const: 1.51.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/num/mod.rs.html#295-314\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html#tymethod.unsigned_abs\" class=\"fn\">unsigned_abs</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"u32\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Computes the absolute value of <code>self</code> without any wrapping\nor panicking.</p>\n<h5 id=\"examples-77\"><a class=\"doc-anchor\" href=\"#examples-77\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">100i32</span>.unsigned_abs(), <span class=\"number\">100u32</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">100i32</span>).unsigned_abs(), <span class=\"number\">100u32</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">128i8</span>).unsigned_abs(), <span class=\"number\">128u8</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_pow\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0, const since 1.50.0\">1.34.0 (const: 1.50.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/num/mod.rs.html#295-314\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html#tymethod.wrapping_pow\" class=\"fn\">wrapping_pow</a>(self, exp: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Wrapping (modular) exponentiation. Computes <code>self.pow(exp)</code>,\nwrapping around at the boundary of the type.</p>\n<h5 id=\"examples-78\"><a class=\"doc-anchor\" href=\"#examples-78\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">3i32</span>.wrapping_pow(<span class=\"number\">4</span>), <span class=\"number\">81</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">3i8</span>.wrapping_pow(<span class=\"number\">5</span>), -<span class=\"number\">13</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">3i8</span>.wrapping_pow(<span class=\"number\">6</span>), -<span class=\"number\">39</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_add\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.32.0\">1.7.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/num/mod.rs.html#295-314\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html#tymethod.overflowing_add\" class=\"fn\">overflowing_add</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>) -&gt; (<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a>) <a href=\"#\" class=\"tooltip\" data-notable-ty=\"(i32, bool)\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Calculates <code>self</code> + <code>rhs</code>.</p>\n<p>Returns a tuple of the addition along with a boolean indicating\nwhether an arithmetic overflow would occur. If an overflow would have\noccurred then the wrapped value is returned.</p>\n<h5 id=\"examples-79\"><a class=\"doc-anchor\" href=\"#examples-79\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5i32</span>.overflowing_add(<span class=\"number\">2</span>), (<span class=\"number\">7</span>, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>(i32::MAX.overflowing_add(<span class=\"number\">1</span>), (i32::MIN, <span class=\"bool-val\">true</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.carrying_add\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/num/mod.rs.html#295-314\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html#tymethod.carrying_add\" class=\"fn\">carrying_add</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>, carry: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a>) -&gt; (<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a>) <a href=\"#\" class=\"tooltip\" data-notable-ty=\"(i32, bool)\">ⓘ</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>bigint_helper_methods</code>)</span></div></span></summary><div class=\"docblock\"><p>Calculates <code>self</code> + <code>rhs</code> + <code>carry</code> and checks for overflow.</p>\n<p>Performs “ternary addition” of two integer operands and a carry-in\nbit, and returns a tuple of the sum along with a boolean indicating\nwhether an arithmetic overflow would occur. On overflow, the wrapped\nvalue is returned.</p>\n<p>This allows chaining together multiple additions to create a wider\naddition, and can be useful for bignum addition. This method should\nonly be used for the most significant word; for the less significant\nwords the unsigned method\n<a href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html#method.carrying_add\" title=\"method u32::carrying_add\"><code>u32::carrying_add</code></a>\nshould be used.</p>\n<p>The output boolean returned by this method is <em>not</em> a carry flag,\nand should <em>not</em> be added to a more significant word.</p>\n<p>If the input carry is false, this method is equivalent to\n<a href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html#method.overflowing_add\" title=\"method i32::overflowing_add\"><code>overflowing_add</code></a>.</p>\n<h5 id=\"examples-80\"><a class=\"doc-anchor\" href=\"#examples-80\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(bigint_helper_methods)]\n</span><span class=\"comment\">// Only the most significant word is signed.\n//\n//   10  MAX    (a = 10 × 2^32 + 2^32 - 1)\n// + -5    9    (b = -5 × 2^32 + 9)\n// ---------\n//    6    8    (sum = 6 × 2^32 + 8)\n\n</span><span class=\"kw\">let </span>(a1, a0): (i32, u32) = (<span class=\"number\">10</span>, u32::MAX);\n<span class=\"kw\">let </span>(b1, b0): (i32, u32) = (-<span class=\"number\">5</span>, <span class=\"number\">9</span>);\n<span class=\"kw\">let </span>carry0 = <span class=\"bool-val\">false</span>;\n\n<span class=\"comment\">// u32::carrying_add for the less significant words\n</span><span class=\"kw\">let </span>(sum0, carry1) = a0.carrying_add(b0, carry0);\n<span class=\"macro\">assert_eq!</span>(carry1, <span class=\"bool-val\">true</span>);\n\n<span class=\"comment\">// i32::carrying_add for the most significant word\n</span><span class=\"kw\">let </span>(sum1, overflow) = a1.carrying_add(b1, carry1);\n<span class=\"macro\">assert_eq!</span>(overflow, <span class=\"bool-val\">false</span>);\n\n<span class=\"macro\">assert_eq!</span>((sum1, sum0), (<span class=\"number\">6</span>, <span class=\"number\">8</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_add_unsigned\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.66.0, const since 1.66.0\">1.66.0 (const: 1.66.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/num/mod.rs.html#295-314\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html#tymethod.overflowing_add_unsigned\" class=\"fn\">overflowing_add_unsigned</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>) -&gt; (<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a>) <a href=\"#\" class=\"tooltip\" data-notable-ty=\"(i32, bool)\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Calculates <code>self</code> + <code>rhs</code> with an unsigned <code>rhs</code>.</p>\n<p>Returns a tuple of the addition along with a boolean indicating\nwhether an arithmetic overflow would occur. If an overflow would\nhave occurred then the wrapped value is returned.</p>\n<h5 id=\"examples-81\"><a class=\"doc-anchor\" href=\"#examples-81\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">1i32</span>.overflowing_add_unsigned(<span class=\"number\">2</span>), (<span class=\"number\">3</span>, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>((i32::MIN).overflowing_add_unsigned(u32::MAX), (i32::MAX, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>((i32::MAX - <span class=\"number\">2</span>).overflowing_add_unsigned(<span class=\"number\">3</span>), (i32::MIN, <span class=\"bool-val\">true</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_sub\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.32.0\">1.7.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/num/mod.rs.html#295-314\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html#tymethod.overflowing_sub\" class=\"fn\">overflowing_sub</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>) -&gt; (<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a>) <a href=\"#\" class=\"tooltip\" data-notable-ty=\"(i32, bool)\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Calculates <code>self</code> - <code>rhs</code>.</p>\n<p>Returns a tuple of the subtraction along with a boolean indicating whether an arithmetic overflow\nwould occur. If an overflow would have occurred then the wrapped value is returned.</p>\n<h5 id=\"examples-82\"><a class=\"doc-anchor\" href=\"#examples-82\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5i32</span>.overflowing_sub(<span class=\"number\">2</span>), (<span class=\"number\">3</span>, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>(i32::MIN.overflowing_sub(<span class=\"number\">1</span>), (i32::MAX, <span class=\"bool-val\">true</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.borrowing_sub\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/num/mod.rs.html#295-314\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html#tymethod.borrowing_sub\" class=\"fn\">borrowing_sub</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>, borrow: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a>) -&gt; (<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a>) <a href=\"#\" class=\"tooltip\" data-notable-ty=\"(i32, bool)\">ⓘ</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>bigint_helper_methods</code>)</span></div></span></summary><div class=\"docblock\"><p>Calculates <code>self</code> − <code>rhs</code> − <code>borrow</code> and checks for\noverflow.</p>\n<p>Performs “ternary subtraction” by subtracting both an integer\noperand and a borrow-in bit from <code>self</code>, and returns a tuple of the\ndifference along with a boolean indicating whether an arithmetic\noverflow would occur. On overflow, the wrapped value is returned.</p>\n<p>This allows chaining together multiple subtractions to create a\nwider subtraction, and can be useful for bignum subtraction. This\nmethod should only be used for the most significant word; for the\nless significant words the unsigned method\n<a href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html#method.borrowing_sub\" title=\"method u32::borrowing_sub\"><code>u32::borrowing_sub</code></a>\nshould be used.</p>\n<p>The output boolean returned by this method is <em>not</em> a borrow flag,\nand should <em>not</em> be subtracted from a more significant word.</p>\n<p>If the input borrow is false, this method is equivalent to\n<a href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html#method.overflowing_sub\" title=\"method i32::overflowing_sub\"><code>overflowing_sub</code></a>.</p>\n<h5 id=\"examples-83\"><a class=\"doc-anchor\" href=\"#examples-83\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(bigint_helper_methods)]\n</span><span class=\"comment\">// Only the most significant word is signed.\n//\n//    6    8    (a = 6 × 2^32 + 8)\n// - -5    9    (b = -5 × 2^32 + 9)\n// ---------\n//   10  MAX    (diff = 10 × 2^32 + 2^32 - 1)\n\n</span><span class=\"kw\">let </span>(a1, a0): (i32, u32) = (<span class=\"number\">6</span>, <span class=\"number\">8</span>);\n<span class=\"kw\">let </span>(b1, b0): (i32, u32) = (-<span class=\"number\">5</span>, <span class=\"number\">9</span>);\n<span class=\"kw\">let </span>borrow0 = <span class=\"bool-val\">false</span>;\n\n<span class=\"comment\">// u32::borrowing_sub for the less significant words\n</span><span class=\"kw\">let </span>(diff0, borrow1) = a0.borrowing_sub(b0, borrow0);\n<span class=\"macro\">assert_eq!</span>(borrow1, <span class=\"bool-val\">true</span>);\n\n<span class=\"comment\">// i32::borrowing_sub for the most significant word\n</span><span class=\"kw\">let </span>(diff1, overflow) = a1.borrowing_sub(b1, borrow1);\n<span class=\"macro\">assert_eq!</span>(overflow, <span class=\"bool-val\">false</span>);\n\n<span class=\"macro\">assert_eq!</span>((diff1, diff0), (<span class=\"number\">10</span>, u32::MAX));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_sub_unsigned\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.66.0, const since 1.66.0\">1.66.0 (const: 1.66.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/num/mod.rs.html#295-314\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html#tymethod.overflowing_sub_unsigned\" class=\"fn\">overflowing_sub_unsigned</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>) -&gt; (<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a>) <a href=\"#\" class=\"tooltip\" data-notable-ty=\"(i32, bool)\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Calculates <code>self</code> - <code>rhs</code> with an unsigned <code>rhs</code>.</p>\n<p>Returns a tuple of the subtraction along with a boolean indicating\nwhether an arithmetic overflow would occur. If an overflow would\nhave occurred then the wrapped value is returned.</p>\n<h5 id=\"examples-84\"><a class=\"doc-anchor\" href=\"#examples-84\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">1i32</span>.overflowing_sub_unsigned(<span class=\"number\">2</span>), (-<span class=\"number\">1</span>, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>((i32::MAX).overflowing_sub_unsigned(u32::MAX), (i32::MIN, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>((i32::MIN + <span class=\"number\">2</span>).overflowing_sub_unsigned(<span class=\"number\">3</span>), (i32::MAX, <span class=\"bool-val\">true</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_mul\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.32.0\">1.7.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/num/mod.rs.html#295-314\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html#tymethod.overflowing_mul\" class=\"fn\">overflowing_mul</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>) -&gt; (<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a>) <a href=\"#\" class=\"tooltip\" data-notable-ty=\"(i32, bool)\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Calculates the multiplication of <code>self</code> and <code>rhs</code>.</p>\n<p>Returns a tuple of the multiplication along with a boolean indicating whether an arithmetic overflow\nwould occur. If an overflow would have occurred then the wrapped value is returned.</p>\n<h5 id=\"examples-85\"><a class=\"doc-anchor\" href=\"#examples-85\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5i32</span>.overflowing_mul(<span class=\"number\">2</span>), (<span class=\"number\">10</span>, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">1_000_000_000i32</span>.overflowing_mul(<span class=\"number\">10</span>), (<span class=\"number\">1410065408</span>, <span class=\"bool-val\">true</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.widening_mul\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/num/mod.rs.html#295-314\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html#tymethod.widening_mul\" class=\"fn\">widening_mul</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>) -&gt; (<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>) <a href=\"#\" class=\"tooltip\" data-notable-ty=\"(u32, i32)\">ⓘ</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>bigint_helper_methods</code>)</span></div></span></summary><div class=\"docblock\"><p>Calculates the complete product <code>self * rhs</code> without the possibility to overflow.</p>\n<p>This returns the low-order (wrapping) bits and the high-order (overflow) bits\nof the result as two separate values, in that order.</p>\n<p>If you also need to add a carry to the wide result, then you want\n<a href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html#method.carrying_mul\" title=\"method i32::carrying_mul\"><code>Self::carrying_mul</code></a> instead.</p>\n<h5 id=\"examples-86\"><a class=\"doc-anchor\" href=\"#examples-86\">§</a>Examples</h5>\n<p>Please note that this example is shared among integer types, which is why <code>i32</code> is used.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(bigint_helper_methods)]\n</span><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5i32</span>.widening_mul(-<span class=\"number\">2</span>), (<span class=\"number\">4294967286</span>, -<span class=\"number\">1</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">1_000_000_000i32</span>.widening_mul(-<span class=\"number\">10</span>), (<span class=\"number\">2884901888</span>, -<span class=\"number\">3</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.carrying_mul\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/num/mod.rs.html#295-314\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html#tymethod.carrying_mul\" class=\"fn\">carrying_mul</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>, carry: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>) -&gt; (<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>) <a href=\"#\" class=\"tooltip\" data-notable-ty=\"(u32, i32)\">ⓘ</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>bigint_helper_methods</code>)</span></div></span></summary><div class=\"docblock\"><p>Calculates the “full multiplication” <code>self * rhs + carry</code>\nwithout the possibility to overflow.</p>\n<p>This returns the low-order (wrapping) bits and the high-order (overflow) bits\nof the result as two separate values, in that order.</p>\n<p>Performs “long multiplication” which takes in an extra amount to add, and may return an\nadditional amount of overflow. This allows for chaining together multiple\nmultiplications to create “big integers” which represent larger values.</p>\n<p>If you don’t need the <code>carry</code>, then you can use <a href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html#method.widening_mul\" title=\"method i32::widening_mul\"><code>Self::widening_mul</code></a> instead.</p>\n<h5 id=\"examples-87\"><a class=\"doc-anchor\" href=\"#examples-87\">§</a>Examples</h5>\n<p>Please note that this example is shared among integer types, which is why <code>i32</code> is used.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(bigint_helper_methods)]\n</span><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5i32</span>.carrying_mul(-<span class=\"number\">2</span>, <span class=\"number\">0</span>), (<span class=\"number\">4294967286</span>, -<span class=\"number\">1</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">5i32</span>.carrying_mul(-<span class=\"number\">2</span>, <span class=\"number\">10</span>), (<span class=\"number\">0</span>, <span class=\"number\">0</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">1_000_000_000i32</span>.carrying_mul(-<span class=\"number\">10</span>, <span class=\"number\">0</span>), (<span class=\"number\">2884901888</span>, -<span class=\"number\">3</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">1_000_000_000i32</span>.carrying_mul(-<span class=\"number\">10</span>, <span class=\"number\">10</span>), (<span class=\"number\">2884901898</span>, -<span class=\"number\">3</span>));\n<span class=\"macro\">assert_eq!</span>(i32::MAX.carrying_mul(i32::MAX, i32::MAX), (i32::MAX.unsigned_abs() + <span class=\"number\">1</span>, i32::MAX / <span class=\"number\">2</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.carrying_mul_add\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/num/mod.rs.html#295-314\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html#tymethod.carrying_mul_add\" class=\"fn\">carrying_mul_add</a>(\n    self,\n    rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>,\n    carry: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>,\n    add: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>,\n) -&gt; (<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>) <a href=\"#\" class=\"tooltip\" data-notable-ty=\"(u32, i32)\">ⓘ</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>bigint_helper_methods</code>)</span></div></span></summary><div class=\"docblock\"><p>Calculates the “full multiplication” <code>self * rhs + carry1 + carry2</code>\nwithout the possibility to overflow.</p>\n<p>This returns the low-order (wrapping) bits and the high-order (overflow) bits\nof the result as two separate values, in that order.</p>\n<p>Performs “long multiplication” which takes in an extra amount to add, and may return an\nadditional amount of overflow. This allows for chaining together multiple\nmultiplications to create “big integers” which represent larger values.</p>\n<p>If you don’t need either <code>carry</code>, then you can use <a href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html#method.widening_mul\" title=\"method i32::widening_mul\"><code>Self::widening_mul</code></a> instead,\nand if you only need one <code>carry</code>, then you can use <a href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html#method.carrying_mul\" title=\"method i32::carrying_mul\"><code>Self::carrying_mul</code></a> instead.</p>\n<h5 id=\"examples-88\"><a class=\"doc-anchor\" href=\"#examples-88\">§</a>Examples</h5>\n<p>Please note that this example is shared among integer types, which is why <code>i32</code> is used.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(bigint_helper_methods)]\n</span><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5i32</span>.carrying_mul_add(-<span class=\"number\">2</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>), (<span class=\"number\">4294967286</span>, -<span class=\"number\">1</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">5i32</span>.carrying_mul_add(-<span class=\"number\">2</span>, <span class=\"number\">10</span>, <span class=\"number\">10</span>), (<span class=\"number\">10</span>, <span class=\"number\">0</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">1_000_000_000i32</span>.carrying_mul_add(-<span class=\"number\">10</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>), (<span class=\"number\">2884901888</span>, -<span class=\"number\">3</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">1_000_000_000i32</span>.carrying_mul_add(-<span class=\"number\">10</span>, <span class=\"number\">10</span>, <span class=\"number\">10</span>), (<span class=\"number\">2884901908</span>, -<span class=\"number\">3</span>));\n<span class=\"macro\">assert_eq!</span>(i32::MAX.carrying_mul_add(i32::MAX, i32::MAX, i32::MAX), (u32::MAX, i32::MAX / <span class=\"number\">2</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_div\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.52.0\">1.7.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/num/mod.rs.html#295-314\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html#tymethod.overflowing_div\" class=\"fn\">overflowing_div</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>) -&gt; (<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a>) <a href=\"#\" class=\"tooltip\" data-notable-ty=\"(i32, bool)\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Calculates the divisor when <code>self</code> is divided by <code>rhs</code>.</p>\n<p>Returns a tuple of the divisor along with a boolean indicating whether an arithmetic overflow would\noccur. If an overflow would occur then self is returned.</p>\n<h5 id=\"panics-20\"><a class=\"doc-anchor\" href=\"#panics-20\">§</a>Panics</h5>\n<p>This function will panic if <code>rhs</code> is zero.</p>\n<h5 id=\"examples-89\"><a class=\"doc-anchor\" href=\"#examples-89\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5i32</span>.overflowing_div(<span class=\"number\">2</span>), (<span class=\"number\">2</span>, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>(i32::MIN.overflowing_div(-<span class=\"number\">1</span>), (i32::MIN, <span class=\"bool-val\">true</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_div_euclid\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.38.0, const since 1.52.0\">1.38.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/num/mod.rs.html#295-314\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html#tymethod.overflowing_div_euclid\" class=\"fn\">overflowing_div_euclid</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>) -&gt; (<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a>) <a href=\"#\" class=\"tooltip\" data-notable-ty=\"(i32, bool)\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Calculates the quotient of Euclidean division <code>self.div_euclid(rhs)</code>.</p>\n<p>Returns a tuple of the divisor along with a boolean indicating whether an arithmetic overflow would\noccur. If an overflow would occur then <code>self</code> is returned.</p>\n<h5 id=\"panics-21\"><a class=\"doc-anchor\" href=\"#panics-21\">§</a>Panics</h5>\n<p>This function will panic if <code>rhs</code> is zero.</p>\n<h5 id=\"examples-90\"><a class=\"doc-anchor\" href=\"#examples-90\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5i32</span>.overflowing_div_euclid(<span class=\"number\">2</span>), (<span class=\"number\">2</span>, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>(i32::MIN.overflowing_div_euclid(-<span class=\"number\">1</span>), (i32::MIN, <span class=\"bool-val\">true</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_rem\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.52.0\">1.7.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/num/mod.rs.html#295-314\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html#tymethod.overflowing_rem\" class=\"fn\">overflowing_rem</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>) -&gt; (<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a>) <a href=\"#\" class=\"tooltip\" data-notable-ty=\"(i32, bool)\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Calculates the remainder when <code>self</code> is divided by <code>rhs</code>.</p>\n<p>Returns a tuple of the remainder after dividing along with a boolean indicating whether an\narithmetic overflow would occur. If an overflow would occur then 0 is returned.</p>\n<h5 id=\"panics-22\"><a class=\"doc-anchor\" href=\"#panics-22\">§</a>Panics</h5>\n<p>This function will panic if <code>rhs</code> is zero.</p>\n<h5 id=\"examples-91\"><a class=\"doc-anchor\" href=\"#examples-91\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5i32</span>.overflowing_rem(<span class=\"number\">2</span>), (<span class=\"number\">1</span>, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>(i32::MIN.overflowing_rem(-<span class=\"number\">1</span>), (<span class=\"number\">0</span>, <span class=\"bool-val\">true</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_rem_euclid\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.38.0, const since 1.52.0\">1.38.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/num/mod.rs.html#295-314\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html#tymethod.overflowing_rem_euclid\" class=\"fn\">overflowing_rem_euclid</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>) -&gt; (<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a>) <a href=\"#\" class=\"tooltip\" data-notable-ty=\"(i32, bool)\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Overflowing Euclidean remainder. Calculates <code>self.rem_euclid(rhs)</code>.</p>\n<p>Returns a tuple of the remainder after dividing along with a boolean indicating whether an\narithmetic overflow would occur. If an overflow would occur then 0 is returned.</p>\n<h5 id=\"panics-23\"><a class=\"doc-anchor\" href=\"#panics-23\">§</a>Panics</h5>\n<p>This function will panic if <code>rhs</code> is zero.</p>\n<h5 id=\"examples-92\"><a class=\"doc-anchor\" href=\"#examples-92\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5i32</span>.overflowing_rem_euclid(<span class=\"number\">2</span>), (<span class=\"number\">1</span>, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>(i32::MIN.overflowing_rem_euclid(-<span class=\"number\">1</span>), (<span class=\"number\">0</span>, <span class=\"bool-val\">true</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_neg\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.32.0\">1.7.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/num/mod.rs.html#295-314\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html#tymethod.overflowing_neg\" class=\"fn\">overflowing_neg</a>(self) -&gt; (<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a>) <a href=\"#\" class=\"tooltip\" data-notable-ty=\"(i32, bool)\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Negates self, overflowing if this is equal to the minimum value.</p>\n<p>Returns a tuple of the negated version of self along with a boolean indicating whether an overflow\nhappened. If <code>self</code> is the minimum value (e.g., <code>i32::MIN</code> for values of type <code>i32</code>), then the\nminimum value will be returned again and <code>true</code> will be returned for an overflow happening.</p>\n<h5 id=\"examples-93\"><a class=\"doc-anchor\" href=\"#examples-93\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">2i32</span>.overflowing_neg(), (-<span class=\"number\">2</span>, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>(i32::MIN.overflowing_neg(), (i32::MIN, <span class=\"bool-val\">true</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_shl\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.32.0\">1.7.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/num/mod.rs.html#295-314\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html#tymethod.overflowing_shl\" class=\"fn\">overflowing_shl</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>) -&gt; (<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a>) <a href=\"#\" class=\"tooltip\" data-notable-ty=\"(i32, bool)\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Shifts self left by <code>rhs</code> bits.</p>\n<p>Returns a tuple of the shifted version of self along with a boolean indicating whether the shift\nvalue was larger than or equal to the number of bits. If the shift value is too large, then value is\nmasked (N-1) where N is the number of bits, and this value is then used to perform the shift.</p>\n<h5 id=\"examples-94\"><a class=\"doc-anchor\" href=\"#examples-94\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">0x1i32</span>.overflowing_shl(<span class=\"number\">4</span>), (<span class=\"number\">0x10</span>, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">0x1i32</span>.overflowing_shl(<span class=\"number\">36</span>), (<span class=\"number\">0x10</span>, <span class=\"bool-val\">true</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">0x10i32</span>.overflowing_shl(<span class=\"number\">31</span>), (<span class=\"number\">0</span>, <span class=\"bool-val\">false</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_shr\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.32.0\">1.7.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/num/mod.rs.html#295-314\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html#tymethod.overflowing_shr\" class=\"fn\">overflowing_shr</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>) -&gt; (<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a>) <a href=\"#\" class=\"tooltip\" data-notable-ty=\"(i32, bool)\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Shifts self right by <code>rhs</code> bits.</p>\n<p>Returns a tuple of the shifted version of self along with a boolean indicating whether the shift\nvalue was larger than or equal to the number of bits. If the shift value is too large, then value is\nmasked (N-1) where N is the number of bits, and this value is then used to perform the shift.</p>\n<h5 id=\"examples-95\"><a class=\"doc-anchor\" href=\"#examples-95\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">0x10i32</span>.overflowing_shr(<span class=\"number\">4</span>), (<span class=\"number\">0x1</span>, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">0x10i32</span>.overflowing_shr(<span class=\"number\">36</span>), (<span class=\"number\">0x1</span>, <span class=\"bool-val\">true</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_abs\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.13.0, const since 1.32.0\">1.13.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/num/mod.rs.html#295-314\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html#tymethod.overflowing_abs\" class=\"fn\">overflowing_abs</a>(self) -&gt; (<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a>) <a href=\"#\" class=\"tooltip\" data-notable-ty=\"(i32, bool)\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Computes the absolute value of <code>self</code>.</p>\n<p>Returns a tuple of the absolute version of self along with a boolean indicating whether an overflow\nhappened. If self is the minimum value\n(e.g., i32::MIN for values of type i32),\nthen the minimum value will be returned again and true will be returned\nfor an overflow happening.</p>\n<h5 id=\"examples-96\"><a class=\"doc-anchor\" href=\"#examples-96\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">10i32</span>.overflowing_abs(), (<span class=\"number\">10</span>, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">10i32</span>).overflowing_abs(), (<span class=\"number\">10</span>, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>((i32::MIN).overflowing_abs(), (i32::MIN, <span class=\"bool-val\">true</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_pow\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0, const since 1.50.0\">1.34.0 (const: 1.50.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/num/mod.rs.html#295-314\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html#tymethod.overflowing_pow\" class=\"fn\">overflowing_pow</a>(self, exp: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>) -&gt; (<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a>) <a href=\"#\" class=\"tooltip\" data-notable-ty=\"(i32, bool)\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Raises self to the power of <code>exp</code>, using exponentiation by squaring.</p>\n<p>Returns a tuple of the exponentiation along with a bool indicating\nwhether an overflow happened.</p>\n<h5 id=\"examples-97\"><a class=\"doc-anchor\" href=\"#examples-97\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">3i32</span>.overflowing_pow(<span class=\"number\">4</span>), (<span class=\"number\">81</span>, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">3i8</span>.overflowing_pow(<span class=\"number\">5</span>), (-<span class=\"number\">13</span>, <span class=\"bool-val\">true</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.pow\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.50.0\">1.0.0 (const: 1.50.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/num/mod.rs.html#295-314\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html#tymethod.pow\" class=\"fn\">pow</a>(self, exp: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Raises self to the power of <code>exp</code>, using exponentiation by squaring.</p>\n<h5 id=\"examples-98\"><a class=\"doc-anchor\" href=\"#examples-98\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: i32 = <span class=\"number\">2</span>; <span class=\"comment\">// or any other integer type\n\n</span><span class=\"macro\">assert_eq!</span>(x.pow(<span class=\"number\">5</span>), <span class=\"number\">32</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.isqrt\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.84.0, const since 1.84.0\">1.84.0 (const: 1.84.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/num/mod.rs.html#295-314\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html#tymethod.isqrt\" class=\"fn\">isqrt</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Returns the square root of the number, rounded down.</p>\n<h5 id=\"panics-24\"><a class=\"doc-anchor\" href=\"#panics-24\">§</a>Panics</h5>\n<p>This function will panic if <code>self</code> is negative.</p>\n<h5 id=\"examples-99\"><a class=\"doc-anchor\" href=\"#examples-99\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">10i32</span>.isqrt(), <span class=\"number\">3</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.div_euclid\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.38.0, const since 1.52.0\">1.38.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/num/mod.rs.html#295-314\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html#tymethod.div_euclid\" class=\"fn\">div_euclid</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Calculates the quotient of Euclidean division of <code>self</code> by <code>rhs</code>.</p>\n<p>This computes the integer <code>q</code> such that <code>self = q * rhs + r</code>, with\n<code>r = self.rem_euclid(rhs)</code> and <code>0 &lt;= r &lt; abs(rhs)</code>.</p>\n<p>In other words, the result is <code>self / rhs</code> rounded to the integer <code>q</code>\nsuch that <code>self &gt;= q * rhs</code>.\nIf <code>self &gt; 0</code>, this is equal to rounding towards zero (the default in Rust);\nif <code>self &lt; 0</code>, this is equal to rounding away from zero (towards +/- infinity).\nIf <code>rhs &gt; 0</code>, this is equal to rounding towards -infinity;\nif <code>rhs &lt; 0</code>, this is equal to rounding towards +infinity.</p>\n<h5 id=\"panics-25\"><a class=\"doc-anchor\" href=\"#panics-25\">§</a>Panics</h5>\n<p>This function will panic if <code>rhs</code> is zero or if <code>self</code> is <code>Self::MIN</code>\nand <code>rhs</code> is -1. This behavior is not affected by the <code>overflow-checks</code> flag.</p>\n<h5 id=\"examples-100\"><a class=\"doc-anchor\" href=\"#examples-100\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>a: i32 = <span class=\"number\">7</span>; <span class=\"comment\">// or any other integer type\n</span><span class=\"kw\">let </span>b = <span class=\"number\">4</span>;\n\n<span class=\"macro\">assert_eq!</span>(a.div_euclid(b), <span class=\"number\">1</span>); <span class=\"comment\">// 7 &gt;= 4 * 1\n</span><span class=\"macro\">assert_eq!</span>(a.div_euclid(-b), -<span class=\"number\">1</span>); <span class=\"comment\">// 7 &gt;= -4 * -1\n</span><span class=\"macro\">assert_eq!</span>((-a).div_euclid(b), -<span class=\"number\">2</span>); <span class=\"comment\">// -7 &gt;= 4 * -2\n</span><span class=\"macro\">assert_eq!</span>((-a).div_euclid(-b), <span class=\"number\">2</span>); <span class=\"comment\">// -7 &gt;= -4 * 2</span></code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.rem_euclid\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.38.0, const since 1.52.0\">1.38.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/num/mod.rs.html#295-314\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html#tymethod.rem_euclid\" class=\"fn\">rem_euclid</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Calculates the least nonnegative remainder of <code>self (mod rhs)</code>.</p>\n<p>This is done as if by the Euclidean division algorithm – given\n<code>r = self.rem_euclid(rhs)</code>, the result satisfies\n<code>self = rhs * self.div_euclid(rhs) + r</code> and <code>0 &lt;= r &lt; abs(rhs)</code>.</p>\n<h5 id=\"panics-26\"><a class=\"doc-anchor\" href=\"#panics-26\">§</a>Panics</h5>\n<p>This function will panic if <code>rhs</code> is zero or if <code>self</code> is <code>Self::MIN</code> and\n<code>rhs</code> is -1. This behavior is not affected by the <code>overflow-checks</code> flag.</p>\n<h5 id=\"examples-101\"><a class=\"doc-anchor\" href=\"#examples-101\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>a: i32 = <span class=\"number\">7</span>; <span class=\"comment\">// or any other integer type\n</span><span class=\"kw\">let </span>b = <span class=\"number\">4</span>;\n\n<span class=\"macro\">assert_eq!</span>(a.rem_euclid(b), <span class=\"number\">3</span>);\n<span class=\"macro\">assert_eq!</span>((-a).rem_euclid(b), <span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(a.rem_euclid(-b), <span class=\"number\">3</span>);\n<span class=\"macro\">assert_eq!</span>((-a).rem_euclid(-b), <span class=\"number\">1</span>);</code></pre></div>\n<p>This will panic:</p>\n\n<div class=\"example-wrap should_panic\"><a href=\"#\" class=\"tooltip\" title=\"This example panics\">ⓘ</a><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let _ </span>= i32::MIN.rem_euclid(-<span class=\"number\">1</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.div_floor\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/num/mod.rs.html#295-314\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html#tymethod.div_floor\" class=\"fn\">div_floor</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>int_roundings</code>)</span></div></span></summary><div class=\"docblock\"><p>Calculates the quotient of <code>self</code> and <code>rhs</code>, rounding the result towards negative infinity.</p>\n<h5 id=\"panics-27\"><a class=\"doc-anchor\" href=\"#panics-27\">§</a>Panics</h5>\n<p>This function will panic if <code>rhs</code> is zero or if <code>self</code> is <code>Self::MIN</code>\nand <code>rhs</code> is -1. This behavior is not affected by the <code>overflow-checks</code> flag.</p>\n<h5 id=\"examples-102\"><a class=\"doc-anchor\" href=\"#examples-102\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(int_roundings)]\n</span><span class=\"kw\">let </span>a: i32 = <span class=\"number\">8</span>;\n<span class=\"kw\">let </span>b = <span class=\"number\">3</span>;\n\n<span class=\"macro\">assert_eq!</span>(a.div_floor(b), <span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(a.div_floor(-b), -<span class=\"number\">3</span>);\n<span class=\"macro\">assert_eq!</span>((-a).div_floor(b), -<span class=\"number\">3</span>);\n<span class=\"macro\">assert_eq!</span>((-a).div_floor(-b), <span class=\"number\">2</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.div_ceil\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/num/mod.rs.html#295-314\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html#tymethod.div_ceil\" class=\"fn\">div_ceil</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>int_roundings</code>)</span></div></span></summary><div class=\"docblock\"><p>Calculates the quotient of <code>self</code> and <code>rhs</code>, rounding the result towards positive infinity.</p>\n<h5 id=\"panics-28\"><a class=\"doc-anchor\" href=\"#panics-28\">§</a>Panics</h5>\n<p>This function will panic if <code>rhs</code> is zero or if <code>self</code> is <code>Self::MIN</code>\nand <code>rhs</code> is -1. This behavior is not affected by the <code>overflow-checks</code> flag.</p>\n<h5 id=\"examples-103\"><a class=\"doc-anchor\" href=\"#examples-103\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(int_roundings)]\n</span><span class=\"kw\">let </span>a: i32 = <span class=\"number\">8</span>;\n<span class=\"kw\">let </span>b = <span class=\"number\">3</span>;\n\n<span class=\"macro\">assert_eq!</span>(a.div_ceil(b), <span class=\"number\">3</span>);\n<span class=\"macro\">assert_eq!</span>(a.div_ceil(-b), -<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>((-a).div_ceil(b), -<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>((-a).div_ceil(-b), <span class=\"number\">3</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.next_multiple_of\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/num/mod.rs.html#295-314\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html#tymethod.next_multiple_of\" class=\"fn\">next_multiple_of</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>int_roundings</code>)</span></div></span></summary><div class=\"docblock\"><p>If <code>rhs</code> is positive, calculates the smallest value greater than or\nequal to <code>self</code> that is a multiple of <code>rhs</code>. If <code>rhs</code> is negative,\ncalculates the largest value less than or equal to <code>self</code> that is a\nmultiple of <code>rhs</code>.</p>\n<h5 id=\"panics-29\"><a class=\"doc-anchor\" href=\"#panics-29\">§</a>Panics</h5>\n<p>This function will panic if <code>rhs</code> is zero.</p>\n<h6 id=\"overflow-behavior-14\"><a class=\"doc-anchor\" href=\"#overflow-behavior-14\">§</a>Overflow behavior</h6>\n<p>On overflow, this function will panic if overflow checks are enabled (default in debug\nmode) and wrap if overflow checks are disabled (default in release mode).</p>\n<h5 id=\"examples-104\"><a class=\"doc-anchor\" href=\"#examples-104\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(int_roundings)]\n</span><span class=\"macro\">assert_eq!</span>(<span class=\"number\">16_i32</span>.next_multiple_of(<span class=\"number\">8</span>), <span class=\"number\">16</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">23_i32</span>.next_multiple_of(<span class=\"number\">8</span>), <span class=\"number\">24</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">16_i32</span>.next_multiple_of(-<span class=\"number\">8</span>), <span class=\"number\">16</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">23_i32</span>.next_multiple_of(-<span class=\"number\">8</span>), <span class=\"number\">16</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">16_i32</span>).next_multiple_of(<span class=\"number\">8</span>), -<span class=\"number\">16</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">23_i32</span>).next_multiple_of(<span class=\"number\">8</span>), -<span class=\"number\">16</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">16_i32</span>).next_multiple_of(-<span class=\"number\">8</span>), -<span class=\"number\">16</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">23_i32</span>).next_multiple_of(-<span class=\"number\">8</span>), -<span class=\"number\">24</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_next_multiple_of\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/num/mod.rs.html#295-314\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html#tymethod.checked_next_multiple_of\" class=\"fn\">checked_next_multiple_of</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>) -&gt; <a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Option&lt;i32&gt;\">ⓘ</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>int_roundings</code>)</span></div></span></summary><div class=\"docblock\"><p>If <code>rhs</code> is positive, calculates the smallest value greater than or\nequal to <code>self</code> that is a multiple of <code>rhs</code>. If <code>rhs</code> is negative,\ncalculates the largest value less than or equal to <code>self</code> that is a\nmultiple of <code>rhs</code>. Returns <code>None</code> if <code>rhs</code> is zero or the operation\nwould result in overflow.</p>\n<h5 id=\"examples-105\"><a class=\"doc-anchor\" href=\"#examples-105\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(int_roundings)]\n</span><span class=\"macro\">assert_eq!</span>(<span class=\"number\">16_i32</span>.checked_next_multiple_of(<span class=\"number\">8</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">16</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">23_i32</span>.checked_next_multiple_of(<span class=\"number\">8</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">24</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">16_i32</span>.checked_next_multiple_of(-<span class=\"number\">8</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">16</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">23_i32</span>.checked_next_multiple_of(-<span class=\"number\">8</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">16</span>));\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">16_i32</span>).checked_next_multiple_of(<span class=\"number\">8</span>), <span class=\"prelude-val\">Some</span>(-<span class=\"number\">16</span>));\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">23_i32</span>).checked_next_multiple_of(<span class=\"number\">8</span>), <span class=\"prelude-val\">Some</span>(-<span class=\"number\">16</span>));\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">16_i32</span>).checked_next_multiple_of(-<span class=\"number\">8</span>), <span class=\"prelude-val\">Some</span>(-<span class=\"number\">16</span>));\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">23_i32</span>).checked_next_multiple_of(-<span class=\"number\">8</span>), <span class=\"prelude-val\">Some</span>(-<span class=\"number\">24</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">1_i32</span>.checked_next_multiple_of(<span class=\"number\">0</span>), <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(i32::MAX.checked_next_multiple_of(<span class=\"number\">2</span>), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ilog\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.67.0, const since 1.67.0\">1.67.0 (const: 1.67.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/num/mod.rs.html#295-314\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html#tymethod.ilog\" class=\"fn\">ilog</a>(self, base: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"u32\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Returns the logarithm of the number with respect to an arbitrary base,\nrounded down.</p>\n<p>This method might not be optimized owing to implementation details;\n<code>ilog2</code> can produce results more efficiently for base 2, and <code>ilog10</code>\ncan produce results more efficiently for base 10.</p>\n<h5 id=\"panics-30\"><a class=\"doc-anchor\" href=\"#panics-30\">§</a>Panics</h5>\n<p>This function will panic if <code>self</code> is less than or equal to zero,\nor if <code>base</code> is less than 2.</p>\n<h5 id=\"examples-106\"><a class=\"doc-anchor\" href=\"#examples-106\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5i32</span>.ilog(<span class=\"number\">5</span>), <span class=\"number\">1</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ilog2\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.67.0, const since 1.67.0\">1.67.0 (const: 1.67.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/num/mod.rs.html#295-314\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html#tymethod.ilog2\" class=\"fn\">ilog2</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"u32\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Returns the base 2 logarithm of the number, rounded down.</p>\n<h5 id=\"panics-31\"><a class=\"doc-anchor\" href=\"#panics-31\">§</a>Panics</h5>\n<p>This function will panic if <code>self</code> is less than or equal to zero.</p>\n<h5 id=\"examples-107\"><a class=\"doc-anchor\" href=\"#examples-107\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">2i32</span>.ilog2(), <span class=\"number\">1</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ilog10\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.67.0, const since 1.67.0\">1.67.0 (const: 1.67.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/num/mod.rs.html#295-314\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html#tymethod.ilog10\" class=\"fn\">ilog10</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"u32\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Returns the base 10 logarithm of the number, rounded down.</p>\n<h5 id=\"panics-32\"><a class=\"doc-anchor\" href=\"#panics-32\">§</a>Panics</h5>\n<p>This function will panic if <code>self</code> is less than or equal to zero.</p>\n<h5 id=\"example\"><a class=\"doc-anchor\" href=\"#example\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">10i32</span>.ilog10(), <span class=\"number\">1</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_ilog\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.67.0, const since 1.67.0\">1.67.0 (const: 1.67.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/num/mod.rs.html#295-314\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html#tymethod.checked_ilog\" class=\"fn\">checked_ilog</a>(self, base: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>) -&gt; <a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Option&lt;u32&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Returns the logarithm of the number with respect to an arbitrary base,\nrounded down.</p>\n<p>Returns <code>None</code> if the number is negative or zero, or if the base is not at least 2.</p>\n<p>This method might not be optimized owing to implementation details;\n<code>checked_ilog2</code> can produce results more efficiently for base 2, and\n<code>checked_ilog10</code> can produce results more efficiently for base 10.</p>\n<h5 id=\"examples-108\"><a class=\"doc-anchor\" href=\"#examples-108\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5i32</span>.checked_ilog(<span class=\"number\">5</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">1</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_ilog2\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.67.0, const since 1.67.0\">1.67.0 (const: 1.67.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/num/mod.rs.html#295-314\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html#tymethod.checked_ilog2\" class=\"fn\">checked_ilog2</a>(self) -&gt; <a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Option&lt;u32&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Returns the base 2 logarithm of the number, rounded down.</p>\n<p>Returns <code>None</code> if the number is negative or zero.</p>\n<h5 id=\"examples-109\"><a class=\"doc-anchor\" href=\"#examples-109\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">2i32</span>.checked_ilog2(), <span class=\"prelude-val\">Some</span>(<span class=\"number\">1</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_ilog10\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.67.0, const since 1.67.0\">1.67.0 (const: 1.67.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/num/mod.rs.html#295-314\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html#tymethod.checked_ilog10\" class=\"fn\">checked_ilog10</a>(self) -&gt; <a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Option&lt;u32&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Returns the base 10 logarithm of the number, rounded down.</p>\n<p>Returns <code>None</code> if the number is negative or zero.</p>\n<h5 id=\"example-1\"><a class=\"doc-anchor\" href=\"#example-1\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">10i32</span>.checked_ilog10(), <span class=\"prelude-val\">Some</span>(<span class=\"number\">1</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.abs\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/num/mod.rs.html#295-314\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html#tymethod.abs\" class=\"fn\">abs</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Computes the absolute value of <code>self</code>.</p>\n<h5 id=\"overflow-behavior-15\"><a class=\"doc-anchor\" href=\"#overflow-behavior-15\">§</a>Overflow behavior</h5>\n<p>The absolute value of\n<code>i32::MIN</code>\ncannot be represented as an\n<code>i32</code>,\nand attempting to calculate it will cause an overflow. This means\nthat code in debug mode will trigger a panic on this case and\noptimized code will return\n<code>i32::MIN</code>\nwithout a panic. If you do not want this behavior, consider\nusing <a href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html#method.unsigned_abs\" title=\"method i32::unsigned_abs\"><code>unsigned_abs</code></a> instead.</p>\n<h5 id=\"examples-110\"><a class=\"doc-anchor\" href=\"#examples-110\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">10i32</span>.abs(), <span class=\"number\">10</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">10i32</span>).abs(), <span class=\"number\">10</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.abs_diff\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.60.0, const since 1.60.0\">1.60.0 (const: 1.60.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/num/mod.rs.html#295-314\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html#tymethod.abs_diff\" class=\"fn\">abs_diff</a>(self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"u32\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Computes the absolute difference between <code>self</code> and <code>other</code>.</p>\n<p>This function always returns the correct answer without overflow or\npanics by returning an unsigned integer.</p>\n<h5 id=\"examples-111\"><a class=\"doc-anchor\" href=\"#examples-111\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">100i32</span>.abs_diff(<span class=\"number\">80</span>), <span class=\"number\">20u32</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">100i32</span>.abs_diff(<span class=\"number\">110</span>), <span class=\"number\">10u32</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">100i32</span>).abs_diff(<span class=\"number\">80</span>), <span class=\"number\">180u32</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">100i32</span>).abs_diff(-<span class=\"number\">120</span>), <span class=\"number\">20u32</span>);\n<span class=\"macro\">assert_eq!</span>(i32::MIN.abs_diff(i32::MAX), u32::MAX);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.signum\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.47.0\">1.0.0 (const: 1.47.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/num/mod.rs.html#295-314\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html#tymethod.signum\" class=\"fn\">signum</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Returns a number representing sign of <code>self</code>.</p>\n<ul>\n<li><code>0</code> if the number is zero</li>\n<li><code>1</code> if the number is positive</li>\n<li><code>-1</code> if the number is negative</li>\n</ul>\n<h5 id=\"examples-112\"><a class=\"doc-anchor\" href=\"#examples-112\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">10i32</span>.signum(), <span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">0i32</span>.signum(), <span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">10i32</span>).signum(), -<span class=\"number\">1</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_positive\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/num/mod.rs.html#295-314\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html#tymethod.is_positive\" class=\"fn\">is_positive</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if <code>self</code> is positive and <code>false</code> if the number is zero or\nnegative.</p>\n<h5 id=\"examples-113\"><a class=\"doc-anchor\" href=\"#examples-113\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert!</span>(<span class=\"number\">10i32</span>.is_positive());\n<span class=\"macro\">assert!</span>(!(-<span class=\"number\">10i32</span>).is_positive());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_negative\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/num/mod.rs.html#295-314\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html#tymethod.is_negative\" class=\"fn\">is_negative</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if <code>self</code> is negative and <code>false</code> if the number is zero or\npositive.</p>\n<h5 id=\"examples-114\"><a class=\"doc-anchor\" href=\"#examples-114\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert!</span>((-<span class=\"number\">10i32</span>).is_negative());\n<span class=\"macro\">assert!</span>(!<span class=\"number\">10i32</span>.is_negative());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_be_bytes\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.32.0, const since 1.44.0\">1.32.0 (const: 1.44.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/num/mod.rs.html#295-314\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html#tymethod.to_be_bytes\" class=\"fn\">to_be_bytes</a>(self) -&gt; [<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">4</a>]</h4></section></summary><div class=\"docblock\"><p>Returns the memory representation of this integer as a byte array in\nbig-endian (network) byte order.</p>\n<h5 id=\"examples-115\"><a class=\"doc-anchor\" href=\"#examples-115\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>bytes = <span class=\"number\">0x12345678i32</span>.to_be_bytes();\n<span class=\"macro\">assert_eq!</span>(bytes, [<span class=\"number\">0x12</span>, <span class=\"number\">0x34</span>, <span class=\"number\">0x56</span>, <span class=\"number\">0x78</span>]);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_le_bytes\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.32.0, const since 1.44.0\">1.32.0 (const: 1.44.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/num/mod.rs.html#295-314\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html#tymethod.to_le_bytes\" class=\"fn\">to_le_bytes</a>(self) -&gt; [<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">4</a>]</h4></section></summary><div class=\"docblock\"><p>Returns the memory representation of this integer as a byte array in\nlittle-endian byte order.</p>\n<h5 id=\"examples-116\"><a class=\"doc-anchor\" href=\"#examples-116\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>bytes = <span class=\"number\">0x12345678i32</span>.to_le_bytes();\n<span class=\"macro\">assert_eq!</span>(bytes, [<span class=\"number\">0x78</span>, <span class=\"number\">0x56</span>, <span class=\"number\">0x34</span>, <span class=\"number\">0x12</span>]);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_ne_bytes\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.32.0, const since 1.44.0\">1.32.0 (const: 1.44.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/num/mod.rs.html#295-314\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html#tymethod.to_ne_bytes\" class=\"fn\">to_ne_bytes</a>(self) -&gt; [<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">4</a>]</h4></section></summary><div class=\"docblock\"><p>Returns the memory representation of this integer as a byte array in\nnative byte order.</p>\n<p>As the target platform’s native endianness is used, portable code\nshould use <a href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html#method.to_be_bytes\" title=\"method i32::to_be_bytes\"><code>to_be_bytes</code></a> or <a href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html#method.to_le_bytes\" title=\"method i32::to_le_bytes\"><code>to_le_bytes</code></a>, as appropriate,\ninstead.</p>\n<h5 id=\"examples-117\"><a class=\"doc-anchor\" href=\"#examples-117\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>bytes = <span class=\"number\">0x12345678i32</span>.to_ne_bytes();\n<span class=\"macro\">assert_eq!</span>(\n    bytes,\n    <span class=\"kw\">if </span><span class=\"macro\">cfg!</span>(target_endian = <span class=\"string\">\"big\"</span>) {\n        [<span class=\"number\">0x12</span>, <span class=\"number\">0x34</span>, <span class=\"number\">0x56</span>, <span class=\"number\">0x78</span>]\n    } <span class=\"kw\">else </span>{\n        [<span class=\"number\">0x78</span>, <span class=\"number\">0x56</span>, <span class=\"number\">0x34</span>, <span class=\"number\">0x12</span>]\n    }\n);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_be_bytes\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.32.0, const since 1.44.0\">1.32.0 (const: 1.44.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/num/mod.rs.html#295-314\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html#tymethod.from_be_bytes\" class=\"fn\">from_be_bytes</a>(bytes: [<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">4</a>]) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Creates an integer value from its representation as a byte array in\nbig endian.</p>\n<h5 id=\"examples-118\"><a class=\"doc-anchor\" href=\"#examples-118\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>value = i32::from_be_bytes([<span class=\"number\">0x12</span>, <span class=\"number\">0x34</span>, <span class=\"number\">0x56</span>, <span class=\"number\">0x78</span>]);\n<span class=\"macro\">assert_eq!</span>(value, <span class=\"number\">0x12345678</span>);</code></pre></div>\n<p>When starting from a slice rather than an array, fallible conversion APIs can be used:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">fn </span>read_be_i32(input: <span class=\"kw-2\">&amp;mut &amp;</span>[u8]) -&gt; i32 {\n    <span class=\"kw\">let </span>(int_bytes, rest) = input.split_at(size_of::&lt;i32&gt;());\n    <span class=\"kw-2\">*</span>input = rest;\n    i32::from_be_bytes(int_bytes.try_into().unwrap())\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_le_bytes\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.32.0, const since 1.44.0\">1.32.0 (const: 1.44.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/num/mod.rs.html#295-314\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html#tymethod.from_le_bytes\" class=\"fn\">from_le_bytes</a>(bytes: [<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">4</a>]) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Creates an integer value from its representation as a byte array in\nlittle endian.</p>\n<h5 id=\"examples-119\"><a class=\"doc-anchor\" href=\"#examples-119\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>value = i32::from_le_bytes([<span class=\"number\">0x78</span>, <span class=\"number\">0x56</span>, <span class=\"number\">0x34</span>, <span class=\"number\">0x12</span>]);\n<span class=\"macro\">assert_eq!</span>(value, <span class=\"number\">0x12345678</span>);</code></pre></div>\n<p>When starting from a slice rather than an array, fallible conversion APIs can be used:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">fn </span>read_le_i32(input: <span class=\"kw-2\">&amp;mut &amp;</span>[u8]) -&gt; i32 {\n    <span class=\"kw\">let </span>(int_bytes, rest) = input.split_at(size_of::&lt;i32&gt;());\n    <span class=\"kw-2\">*</span>input = rest;\n    i32::from_le_bytes(int_bytes.try_into().unwrap())\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_ne_bytes\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.32.0, const since 1.44.0\">1.32.0 (const: 1.44.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/num/mod.rs.html#295-314\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html#tymethod.from_ne_bytes\" class=\"fn\">from_ne_bytes</a>(bytes: [<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">4</a>]) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Creates an integer value from its memory representation as a byte\narray in native endianness.</p>\n<p>As the target platform’s native endianness is used, portable code\nlikely wants to use <a href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html#method.from_be_bytes\" title=\"associated function i32::from_be_bytes\"><code>from_be_bytes</code></a> or <a href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html#method.from_le_bytes\" title=\"associated function i32::from_le_bytes\"><code>from_le_bytes</code></a>, as\nappropriate instead.</p>\n<h5 id=\"examples-120\"><a class=\"doc-anchor\" href=\"#examples-120\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>value = i32::from_ne_bytes(<span class=\"kw\">if </span><span class=\"macro\">cfg!</span>(target_endian = <span class=\"string\">\"big\"</span>) {\n    [<span class=\"number\">0x12</span>, <span class=\"number\">0x34</span>, <span class=\"number\">0x56</span>, <span class=\"number\">0x78</span>]\n} <span class=\"kw\">else </span>{\n    [<span class=\"number\">0x78</span>, <span class=\"number\">0x56</span>, <span class=\"number\">0x34</span>, <span class=\"number\">0x12</span>]\n});\n<span class=\"macro\">assert_eq!</span>(value, <span class=\"number\">0x12345678</span>);</code></pre></div>\n<p>When starting from a slice rather than an array, fallible conversion APIs can be used:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">fn </span>read_ne_i32(input: <span class=\"kw-2\">&amp;mut &amp;</span>[u8]) -&gt; i32 {\n    <span class=\"kw\">let </span>(int_bytes, rest) = input.split_at(size_of::&lt;i32&gt;());\n    <span class=\"kw-2\">*</span>input = rest;\n    i32::from_ne_bytes(int_bytes.try_into().unwrap())\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.min_value\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/num/mod.rs.html#295-314\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html#tymethod.min_value\" class=\"fn\">min_value</a>() -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a></h4></section><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecating in a future version: replaced by the <code>MIN</code> associated constant on this type</span></div></span></summary><div class=\"docblock\"><p>New code should prefer to use\n<a href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html#associatedconstant.MIN\" title=\"associated constant i32::MIN\"><code>i32::MIN</code></a> instead.</p>\n<p>Returns the smallest value that can be represented by this integer type.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.max_value\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/num/mod.rs.html#295-314\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html#tymethod.max_value\" class=\"fn\">max_value</a>() -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a></h4></section><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecating in a future version: replaced by the <code>MAX</code> associated constant on this type</span></div></span></summary><div class=\"docblock\"><p>New code should prefer to use\n<a href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html#associatedconstant.MAX\" title=\"associated constant i32::MAX\"><code>i32::MAX</code></a> instead.</p>\n<p>Returns the largest value that can be represented by this integer type.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.midpoint\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.87.0, const since 1.87.0\">1.87.0 (const: 1.87.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/num/mod.rs.html#315\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html#tymethod.midpoint\" class=\"fn\">midpoint</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"i32\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Calculates the midpoint (average) between <code>self</code> and <code>rhs</code>.</p>\n<p><code>midpoint(a, b)</code> is <code>(a + b) / 2</code> as if it were performed in a\nsufficiently-large signed integral type. This implies that the result is\nalways rounded towards zero and that no overflow will ever occur.</p>\n<h5 id=\"examples-121\"><a class=\"doc-anchor\" href=\"#examples-121\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">0i32</span>.midpoint(<span class=\"number\">4</span>), <span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">1i32</span>).midpoint(<span class=\"number\">2</span>), <span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">7i32</span>).midpoint(<span class=\"number\">0</span>), -<span class=\"number\">3</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">0i32</span>.midpoint(-<span class=\"number\">7</span>), -<span class=\"number\">3</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">0i32</span>.midpoint(<span class=\"number\">7</span>), <span class=\"number\">3</span>);</code></pre></div>\n</div></details></div></details>",0,"devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<section id=\"impl-ConstParamTy_-for-i32\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/marker.rs.html#1115-1124\">Source</a><a href=\"#impl-ConstParamTy_-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.ConstParamTy_.html\" title=\"trait core::marker::ConstParamTy_\">ConstParamTy_</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section>","ConstParamTy_","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<section id=\"impl-Copy-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/marker.rs.html#482-492\">Source</a></span><a href=\"#impl-Copy-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"devela/all/trait.Copy.html\" title=\"trait devela::all::Copy\">Copy</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section>","Copy","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<section id=\"impl-DefaultIsZeroes-for-i32\" class=\"impl\"><a href=\"#impl-DefaultIsZeroes-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl DefaultIsZeroes for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section>","DefaultIsZeroes","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<section id=\"impl-Eq-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1856\">Source</a></span><a href=\"#impl-Eq-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"devela/all/trait.Eq.html\" title=\"trait devela::all::Eq\">Eq</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section>","Eq","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<section id=\"impl-Int-for-i32\" class=\"impl\"><a href=\"#impl-Int-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl Int for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section>","Int","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<section id=\"impl-MaskElement-for-i32\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/portable-simd/crates/core_simd/src/masks.rs.html#100\">Source</a><a href=\"#impl-MaskElement-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/core_simd/masks/trait.MaskElement.html\" title=\"trait core::core_simd::masks::MaskElement\">MaskElement</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section>","MaskElement","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<section id=\"impl-Pod-for-i32\" class=\"impl\"><a href=\"#impl-Pod-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl Pod for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section>","Pod","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<section id=\"impl-SignedSample-for-i32\" class=\"impl\"><a href=\"#impl-SignedSample-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl SignedSample for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section>","SignedSample","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<section id=\"impl-SimdCast-for-i32\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/portable-simd/crates/core_simd/src/cast.rs.html#24\">Source</a><a href=\"#impl-SimdCast-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/core_simd/cast/trait.SimdCast.html\" title=\"trait core::core_simd::cast::SimdCast\">SimdCast</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section>","SimdCast","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<section id=\"impl-StructuralPartialEq-for-i32\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/marker.rs.html#265-277\">Source</a><a href=\"#impl-StructuralPartialEq-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.StructuralPartialEq.html\" title=\"trait core::marker::StructuralPartialEq\">StructuralPartialEq</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section>","StructuralPartialEq","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<section id=\"impl-TrustedStep-for-i32\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/iter/range.rs.html#17\">Source</a><a href=\"#impl-TrustedStep-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/marker/trait.TrustedStep.html\" title=\"trait core::iter::traits::marker::TrustedStep\">TrustedStep</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section>","TrustedStep","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<section id=\"impl-UnsizedConstParamTy-for-i32\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/marker.rs.html#1126-1139\">Source</a><a href=\"#impl-UnsizedConstParamTy-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.UnsizedConstParamTy.html\" title=\"trait core::marker::UnsizedConstParamTy\">UnsizedConstParamTy</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section>","UnsizedConstParamTy","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<section id=\"impl-UseCloned-for-i32\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/clone.rs.html#308-313\">Source</a><a href=\"#impl-UseCloned-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.UseCloned.html\" title=\"trait core::clone::UseCloned\">UseCloned</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section>","UseCloned","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<section id=\"impl-VaArgSafe-for-i32\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/ffi/va_list.rs.html#220\">Source</a><a href=\"#impl-VaArgSafe-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ffi/va_list/trait.VaArgSafe.html\" title=\"trait core::ffi::va_list::VaArgSafe\">VaArgSafe</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section>","VaArgSafe","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"],["<section id=\"impl-ZeroablePrimitive-for-i32\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/num/nonzero.rs.html#69-83\">Source</a><a href=\"#impl-ZeroablePrimitive-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/num/nonzero/trait.ZeroablePrimitive.html\" title=\"trait core::num::nonzero::ZeroablePrimitive\">ZeroablePrimitive</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h3></section>","ZeroablePrimitive","devela::all::c_int","devela::lang::ffi::glsl::types::data_types::g_int","devela::lang::ffi::js::primitives::js_int32","devela::num::isize_down"]]]]);
    if (window.register_type_impls) {
        window.register_type_impls(type_impls);
    } else {
        window.pending_type_impls = type_impls;
    }
})()
//{"start":55,"fragment_lengths":[1417844]}