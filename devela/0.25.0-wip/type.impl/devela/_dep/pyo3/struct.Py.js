(function() {
    var type_impls = Object.fromEntries([["devela",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsRef%3CPy%3CPyAny%3E%3E-for-Py%3CT%3E\" class=\"impl\"><a href=\"#impl-AsRef%3CPy%3CPyAny%3E%3E-for-Py%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"devela/code/trait.AsRef.html\" title=\"trait devela::code::AsRef\">AsRef</a>&lt;<a class=\"struct\" href=\"devela/_dep/pyo3/struct.Py.html\" title=\"struct devela::_dep::pyo3::Py\">Py</a>&lt;<a class=\"struct\" href=\"devela/_dep/pyo3/struct.PyAny.html\" title=\"struct devela::_dep::pyo3::PyAny\">PyAny</a>&gt;&gt; for <a class=\"struct\" href=\"devela/_dep/pyo3/struct.Py.html\" title=\"struct devela::_dep::pyo3::Py\">Py</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_ref\" class=\"method trait-impl\"><a href=\"#method.as_ref\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/code/trait.AsRef.html#tymethod.as_ref\" class=\"fn\">as_ref</a>(&amp;self) -&gt; &amp;<a class=\"struct\" href=\"devela/_dep/pyo3/struct.Py.html\" title=\"struct devela::_dep::pyo3::Py\">Py</a>&lt;<a class=\"struct\" href=\"devela/_dep/pyo3/struct.PyAny.html\" title=\"struct devela::_dep::pyo3::PyAny\">PyAny</a>&gt;</h4></section></summary><div class='docblock'>Converts this type into a shared reference of the (usually inferred) input type.</div></details></div></details>","AsRef<Py<PyAny>>","devela::_dep::pyo3::PyObject"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-Py%3CT%3E\" class=\"impl\"><a href=\"#impl-Debug-for-Py%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"devela/all/trait.Debug.html\" title=\"trait devela::all::Debug\">Debug</a> for <a class=\"struct\" href=\"devela/_dep/pyo3/struct.Py.html\" title=\"struct devela::_dep::pyo3::Py\">Py</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"devela/all/struct.Formatter.html\" title=\"struct devela::all::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"devela/all/struct.FmtError.html\" title=\"struct devela::all::FmtError\">Error</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;(), Error&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"devela/all/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","devela::_dep::pyo3::PyObject"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Deserialize%3C'de%3E-for-Py%3CT%3E\" class=\"impl\"><a href=\"#impl-Deserialize%3C'de%3E-for-Py%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'de, T&gt; <a class=\"trait\" href=\"devela/_dep/serde/trait.Deserialize.html\" title=\"trait devela::_dep::serde::Deserialize\">Deserialize</a>&lt;'de&gt; for <a class=\"struct\" href=\"devela/_dep/pyo3/struct.Py.html\" title=\"struct devela::_dep::pyo3::Py\">Py</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"devela/_dep/pyo3/trait.PyClass.html\" title=\"trait devela::_dep::pyo3::PyClass\">PyClass</a>&lt;BaseType = <a class=\"struct\" href=\"devela/_dep/pyo3/struct.PyAny.html\" title=\"struct devela::_dep::pyo3::PyAny\">PyAny</a>&gt; + <a class=\"trait\" href=\"devela/_dep/serde/trait.Deserialize.html\" title=\"trait devela::_dep::serde::Deserialize\">Deserialize</a>&lt;'de&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.deserialize\" class=\"method trait-impl\"><a href=\"#method.deserialize\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/_dep/serde/trait.Deserialize.html#tymethod.deserialize\" class=\"fn\">deserialize</a>&lt;D&gt;(\n    deserializer: D,\n) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"struct\" href=\"devela/_dep/pyo3/struct.Py.html\" title=\"struct devela::_dep::pyo3::Py\">Py</a>&lt;T&gt;, &lt;D as <a class=\"trait\" href=\"devela/_dep/serde/trait.Deserializer.html\" title=\"trait devela::_dep::serde::Deserializer\">Deserializer</a>&lt;'de&gt;&gt;::<a class=\"associatedtype\" href=\"devela/_dep/serde/trait.Deserializer.html#associatedtype.Error\" title=\"type devela::_dep::serde::Deserializer::Error\">Error</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;Py&lt;T&gt;, &lt;D as Deserializer&lt;&#39;de&gt;&gt;::Error&gt;\">ⓘ</a><div class=\"where\">where\n    D: <a class=\"trait\" href=\"devela/_dep/serde/trait.Deserializer.html\" title=\"trait devela::_dep::serde::Deserializer\">Deserializer</a>&lt;'de&gt;,</div></h4></section></summary><div class='docblock'>Deserialize this value from the given Serde deserializer. <a href=\"devela/_dep/serde/trait.Deserialize.html#tymethod.deserialize\">Read more</a></div></details></div></details>","Deserialize<'de>","devela::_dep::pyo3::PyObject"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Display-for-Py%3CT%3E\" class=\"impl\"><a href=\"#impl-Display-for-Py%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"devela/all/trait.Display.html\" title=\"trait devela::all::Display\">Display</a> for <a class=\"struct\" href=\"devela/_dep/pyo3/struct.Py.html\" title=\"struct devela::_dep::pyo3::Py\">Py</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"devela/_dep/pyo3/trait.PyTypeInfo.html\" title=\"trait devela::_dep::pyo3::PyTypeInfo\">PyTypeInfo</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Display.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"devela/all/struct.Formatter.html\" title=\"struct devela::all::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"devela/all/struct.FmtError.html\" title=\"struct devela::all::FmtError\">Error</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;(), Error&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"devela/all/trait.Display.html#tymethod.fmt\">Read more</a></div></details></div></details>","Display","devela::_dep::pyo3::PyObject"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Drop-for-Py%3CT%3E\" class=\"impl\"><a href=\"#impl-Drop-for-Py%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"devela/all/trait.Drop.html\" title=\"trait devela::all::Drop\">Drop</a> for <a class=\"struct\" href=\"devela/_dep/pyo3/struct.Py.html\" title=\"struct devela::_dep::pyo3::Py\">Py</a>&lt;T&gt;</h3><div class=\"docblock\"><p>Dropping a <code>Py</code> instance decrements the reference count\non the object by one if the GIL is held.</p>\n</div></section></summary><div class=\"docblock\"><p>Otherwise and by default, this registers the underlying pointer to have its reference count\ndecremented the next time PyO3 acquires the GIL.</p>\n<p>However, if the <code>pyo3_disable_reference_pool</code> conditional compilation flag\nis enabled, it will abort the process.</p>\n</div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.drop\" class=\"method trait-impl\"><a href=\"#method.drop\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Drop.html#tymethod.drop\" class=\"fn\">drop</a>(&amp;mut self)</h4></section></summary><div class='docblock'>Executes the destructor for this type. <a href=\"devela/all/trait.Drop.html#tymethod.drop\">Read more</a></div></details></div></details>","Drop","devela::_dep::pyo3::PyObject"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CBorrowed%3C'_,+'_,+T%3E%3E-for-Py%3CT%3E\" class=\"impl\"><a href=\"#impl-From%3CBorrowed%3C'_,+'_,+T%3E%3E-for-Py%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"devela/code/trait.From.html\" title=\"trait devela::code::From\">From</a>&lt;<a class=\"struct\" href=\"devela/_dep/pyo3/struct.Borrowed.html\" title=\"struct devela::_dep::pyo3::Borrowed\">Borrowed</a>&lt;'_, '_, T&gt;&gt; for <a class=\"struct\" href=\"devela/_dep/pyo3/struct.Py.html\" title=\"struct devela::_dep::pyo3::Py\">Py</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/code/trait.From.html#tymethod.from\" class=\"fn\">from</a>(value: <a class=\"struct\" href=\"devela/_dep/pyo3/struct.Borrowed.html\" title=\"struct devela::_dep::pyo3::Borrowed\">Borrowed</a>&lt;'_, '_, T&gt;) -&gt; <a class=\"struct\" href=\"devela/_dep/pyo3/struct.Py.html\" title=\"struct devela::_dep::pyo3::Py\">Py</a>&lt;T&gt;</h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<Borrowed<'_, '_, T>>","devela::_dep::pyo3::PyObject"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CBound%3C'_,+T%3E%3E-for-Py%3CPyAny%3E\" class=\"impl\"><a href=\"#impl-From%3CBound%3C'_,+T%3E%3E-for-Py%3CPyAny%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"devela/code/trait.From.html\" title=\"trait devela::code::From\">From</a>&lt;<a class=\"struct\" href=\"devela/_dep/pyo3/struct.Bound.html\" title=\"struct devela::_dep::pyo3::Bound\">Bound</a>&lt;'_, T&gt;&gt; for <a class=\"struct\" href=\"devela/_dep/pyo3/struct.Py.html\" title=\"struct devela::_dep::pyo3::Py\">Py</a>&lt;<a class=\"struct\" href=\"devela/_dep/pyo3/struct.PyAny.html\" title=\"struct devela::_dep::pyo3::PyAny\">PyAny</a>&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"devela/_dep/pyo3/types/trait.DerefToPyAny.html\" title=\"trait devela::_dep::pyo3::types::DerefToPyAny\">DerefToPyAny</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/code/trait.From.html#tymethod.from\" class=\"fn\">from</a>(other: <a class=\"struct\" href=\"devela/_dep/pyo3/struct.Bound.html\" title=\"struct devela::_dep::pyo3::Bound\">Bound</a>&lt;'_, T&gt;) -&gt; <a class=\"struct\" href=\"devela/_dep/pyo3/struct.Py.html\" title=\"struct devela::_dep::pyo3::Py\">Py</a>&lt;<a class=\"struct\" href=\"devela/_dep/pyo3/struct.PyAny.html\" title=\"struct devela::_dep::pyo3::PyAny\">PyAny</a>&gt;</h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<Bound<'_, T>>","devela::_dep::pyo3::PyObject"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CBound%3C'_,+T%3E%3E-for-Py%3CT%3E\" class=\"impl\"><a href=\"#impl-From%3CBound%3C'_,+T%3E%3E-for-Py%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"devela/code/trait.From.html\" title=\"trait devela::code::From\">From</a>&lt;<a class=\"struct\" href=\"devela/_dep/pyo3/struct.Bound.html\" title=\"struct devela::_dep::pyo3::Bound\">Bound</a>&lt;'_, T&gt;&gt; for <a class=\"struct\" href=\"devela/_dep/pyo3/struct.Py.html\" title=\"struct devela::_dep::pyo3::Py\">Py</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/code/trait.From.html#tymethod.from\" class=\"fn\">from</a>(other: <a class=\"struct\" href=\"devela/_dep/pyo3/struct.Bound.html\" title=\"struct devela::_dep::pyo3::Bound\">Bound</a>&lt;'_, T&gt;) -&gt; <a class=\"struct\" href=\"devela/_dep/pyo3/struct.Py.html\" title=\"struct devela::_dep::pyo3::Py\">Py</a>&lt;T&gt;</h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<Bound<'_, T>>","devela::_dep::pyo3::PyObject"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CBoundRef%3C'_,+'_,+T%3E%3E-for-Py%3CT%3E\" class=\"impl\"><a href=\"#impl-From%3CBoundRef%3C'_,+'_,+T%3E%3E-for-Py%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"devela/code/trait.From.html\" title=\"trait devela::code::From\">From</a>&lt;BoundRef&lt;'_, '_, T&gt;&gt; for <a class=\"struct\" href=\"devela/_dep/pyo3/struct.Py.html\" title=\"struct devela::_dep::pyo3::Py\">Py</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/code/trait.From.html#tymethod.from\" class=\"fn\">from</a>(bound: BoundRef&lt;'_, '_, T&gt;) -&gt; <a class=\"struct\" href=\"devela/_dep/pyo3/struct.Py.html\" title=\"struct devela::_dep::pyo3::Py\">Py</a>&lt;T&gt;</h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<BoundRef<'_, '_, T>>","devela::_dep::pyo3::PyObject"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CPy%3CT%3E%3E-for-Py%3CPyAny%3E\" class=\"impl\"><a href=\"#impl-From%3CPy%3CT%3E%3E-for-Py%3CPyAny%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"devela/code/trait.From.html\" title=\"trait devela::code::From\">From</a>&lt;<a class=\"struct\" href=\"devela/_dep/pyo3/struct.Py.html\" title=\"struct devela::_dep::pyo3::Py\">Py</a>&lt;T&gt;&gt; for <a class=\"struct\" href=\"devela/_dep/pyo3/struct.Py.html\" title=\"struct devela::_dep::pyo3::Py\">Py</a>&lt;<a class=\"struct\" href=\"devela/_dep/pyo3/struct.PyAny.html\" title=\"struct devela::_dep::pyo3::PyAny\">PyAny</a>&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"devela/_dep/pyo3/types/trait.DerefToPyAny.html\" title=\"trait devela::_dep::pyo3::types::DerefToPyAny\">DerefToPyAny</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/code/trait.From.html#tymethod.from\" class=\"fn\">from</a>(other: <a class=\"struct\" href=\"devela/_dep/pyo3/struct.Py.html\" title=\"struct devela::_dep::pyo3::Py\">Py</a>&lt;T&gt;) -&gt; <a class=\"struct\" href=\"devela/_dep/pyo3/struct.Py.html\" title=\"struct devela::_dep::pyo3::Py\">Py</a>&lt;<a class=\"struct\" href=\"devela/_dep/pyo3/struct.PyAny.html\" title=\"struct devela::_dep::pyo3::PyAny\">PyAny</a>&gt;</h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<Py<T>>","devela::_dep::pyo3::PyObject"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CPyRef%3C'a,+T%3E%3E-for-Py%3CT%3E\" class=\"impl\"><a href=\"#impl-From%3CPyRef%3C'a,+T%3E%3E-for-Py%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, T&gt; <a class=\"trait\" href=\"devela/code/trait.From.html\" title=\"trait devela::code::From\">From</a>&lt;<a class=\"struct\" href=\"devela/_dep/pyo3/struct.PyRef.html\" title=\"struct devela::_dep::pyo3::PyRef\">PyRef</a>&lt;'a, T&gt;&gt; for <a class=\"struct\" href=\"devela/_dep/pyo3/struct.Py.html\" title=\"struct devela::_dep::pyo3::Py\">Py</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"devela/_dep/pyo3/trait.PyClass.html\" title=\"trait devela::_dep::pyo3::PyClass\">PyClass</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/code/trait.From.html#tymethod.from\" class=\"fn\">from</a>(pyref: <a class=\"struct\" href=\"devela/_dep/pyo3/struct.PyRef.html\" title=\"struct devela::_dep::pyo3::PyRef\">PyRef</a>&lt;'a, T&gt;) -&gt; <a class=\"struct\" href=\"devela/_dep/pyo3/struct.Py.html\" title=\"struct devela::_dep::pyo3::Py\">Py</a>&lt;T&gt;</h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<PyRef<'a, T>>","devela::_dep::pyo3::PyObject"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CPyRefMut%3C'a,+T%3E%3E-for-Py%3CT%3E\" class=\"impl\"><a href=\"#impl-From%3CPyRefMut%3C'a,+T%3E%3E-for-Py%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, T&gt; <a class=\"trait\" href=\"devela/code/trait.From.html\" title=\"trait devela::code::From\">From</a>&lt;<a class=\"struct\" href=\"devela/_dep/pyo3/struct.PyRefMut.html\" title=\"struct devela::_dep::pyo3::PyRefMut\">PyRefMut</a>&lt;'a, T&gt;&gt; for <a class=\"struct\" href=\"devela/_dep/pyo3/struct.Py.html\" title=\"struct devela::_dep::pyo3::Py\">Py</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"devela/_dep/pyo3/trait.PyClass.html\" title=\"trait devela::_dep::pyo3::PyClass\">PyClass</a>&lt;Frozen = False&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/code/trait.From.html#tymethod.from\" class=\"fn\">from</a>(pyref: <a class=\"struct\" href=\"devela/_dep/pyo3/struct.PyRefMut.html\" title=\"struct devela::_dep::pyo3::PyRefMut\">PyRefMut</a>&lt;'a, T&gt;) -&gt; <a class=\"struct\" href=\"devela/_dep/pyo3/struct.Py.html\" title=\"struct devela::_dep::pyo3::Py\">Py</a>&lt;T&gt;</h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<PyRefMut<'a, T>>","devela::_dep::pyo3::PyObject"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromPyObject%3C'_%3E-for-Py%3CT%3E\" class=\"impl\"><a href=\"#impl-FromPyObject%3C'_%3E-for-Py%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"devela/_dep/pyo3/trait.FromPyObject.html\" title=\"trait devela::_dep::pyo3::FromPyObject\">FromPyObject</a>&lt;'_&gt; for <a class=\"struct\" href=\"devela/_dep/pyo3/struct.Py.html\" title=\"struct devela::_dep::pyo3::Py\">Py</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"devela/_dep/pyo3/trait.PyTypeCheck.html\" title=\"trait devela::_dep::pyo3::PyTypeCheck\">PyTypeCheck</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.extract_bound\" class=\"method trait-impl\"><a href=\"#method.extract_bound\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/_dep/pyo3/trait.FromPyObject.html#tymethod.extract_bound\" class=\"fn\">extract_bound</a>(ob: &amp;<a class=\"struct\" href=\"devela/_dep/pyo3/struct.Bound.html\" title=\"struct devela::_dep::pyo3::Bound\">Bound</a>&lt;'_, <a class=\"struct\" href=\"devela/_dep/pyo3/struct.PyAny.html\" title=\"struct devela::_dep::pyo3::PyAny\">PyAny</a>&gt;) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"struct\" href=\"devela/_dep/pyo3/struct.Py.html\" title=\"struct devela::_dep::pyo3::Py\">Py</a>&lt;T&gt;, <a class=\"struct\" href=\"devela/_dep/pyo3/struct.PyErr.html\" title=\"struct devela::_dep::pyo3::PyErr\">PyErr</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;Py&lt;T&gt;, PyErr&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Extracts <code>Self</code> from the source <code>PyObject</code>.</p>\n</div></details></div></details>","FromPyObject<'_>","devela::_dep::pyo3::PyObject"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IntoPyObject%3C'py%3E-for-Py%3CT%3E\" class=\"impl\"><a href=\"#impl-IntoPyObject%3C'py%3E-for-Py%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'py, T&gt; <a class=\"trait\" href=\"devela/_dep/pyo3/trait.IntoPyObject.html\" title=\"trait devela::_dep::pyo3::IntoPyObject\">IntoPyObject</a>&lt;'py&gt; for <a class=\"struct\" href=\"devela/_dep/pyo3/struct.Py.html\" title=\"struct devela::_dep::pyo3::Py\">Py</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Target\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Target\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"devela/_dep/pyo3/trait.IntoPyObject.html#associatedtype.Target\" class=\"associatedtype\">Target</a> = T</h4></section></summary><div class='docblock'>The Python output type</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"devela/_dep/pyo3/trait.IntoPyObject.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"devela/_dep/pyo3/struct.Bound.html\" title=\"struct devela::_dep::pyo3::Bound\">Bound</a>&lt;'py, &lt;<a class=\"struct\" href=\"devela/_dep/pyo3/struct.Py.html\" title=\"struct devela::_dep::pyo3::Py\">Py</a>&lt;T&gt; as <a class=\"trait\" href=\"devela/_dep/pyo3/trait.IntoPyObject.html\" title=\"trait devela::_dep::pyo3::IntoPyObject\">IntoPyObject</a>&lt;'py&gt;&gt;::<a class=\"associatedtype\" href=\"devela/_dep/pyo3/trait.IntoPyObject.html#associatedtype.Target\" title=\"type devela::_dep::pyo3::IntoPyObject::Target\">Target</a>&gt;</h4></section></summary><div class='docblock'>The smart pointer type to use. <a href=\"devela/_dep/pyo3/trait.IntoPyObject.html#associatedtype.Output\">Read more</a></div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"devela/_dep/pyo3/trait.IntoPyObject.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"enum\" href=\"devela/code/enum.Infallible.html\" title=\"enum devela::code::Infallible\">Infallible</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_pyobject\" class=\"method trait-impl\"><a href=\"#method.into_pyobject\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/_dep/pyo3/trait.IntoPyObject.html#tymethod.into_pyobject\" class=\"fn\">into_pyobject</a>(\n    self,\n    py: <a class=\"struct\" href=\"devela/_dep/pyo3/struct.Python.html\" title=\"struct devela::_dep::pyo3::Python\">Python</a>&lt;'py&gt;,\n) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;&lt;<a class=\"struct\" href=\"devela/_dep/pyo3/struct.Py.html\" title=\"struct devela::_dep::pyo3::Py\">Py</a>&lt;T&gt; as <a class=\"trait\" href=\"devela/_dep/pyo3/trait.IntoPyObject.html\" title=\"trait devela::_dep::pyo3::IntoPyObject\">IntoPyObject</a>&lt;'py&gt;&gt;::<a class=\"associatedtype\" href=\"devela/_dep/pyo3/trait.IntoPyObject.html#associatedtype.Output\" title=\"type devela::_dep::pyo3::IntoPyObject::Output\">Output</a>, &lt;<a class=\"struct\" href=\"devela/_dep/pyo3/struct.Py.html\" title=\"struct devela::_dep::pyo3::Py\">Py</a>&lt;T&gt; as <a class=\"trait\" href=\"devela/_dep/pyo3/trait.IntoPyObject.html\" title=\"trait devela::_dep::pyo3::IntoPyObject\">IntoPyObject</a>&lt;'py&gt;&gt;::<a class=\"associatedtype\" href=\"devela/_dep/pyo3/trait.IntoPyObject.html#associatedtype.Error\" title=\"type devela::_dep::pyo3::IntoPyObject::Error\">Error</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;&lt;Py&lt;T&gt; as IntoPyObject&lt;&#39;py&gt;&gt;::Output, &lt;Py&lt;T&gt; as IntoPyObject&lt;&#39;py&gt;&gt;::Error&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Performs the conversion.</div></details></div></details>","IntoPyObject<'py>","devela::_dep::pyo3::PyObject"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Py%3CPyAny%3E\" class=\"impl\"><a href=\"#impl-Py%3CPyAny%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"struct\" href=\"devela/_dep/pyo3/struct.Py.html\" title=\"struct devela::_dep::pyo3::Py\">Py</a>&lt;<a class=\"struct\" href=\"devela/_dep/pyo3/struct.PyAny.html\" title=\"struct devela::_dep::pyo3::PyAny\">PyAny</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.downcast_bound\" class=\"method\"><h4 class=\"code-header\">pub fn <a href=\"devela/_dep/pyo3/struct.Py.html#tymethod.downcast_bound\" class=\"fn\">downcast_bound</a>&lt;'py, T&gt;(\n    &amp;self,\n    py: <a class=\"struct\" href=\"devela/_dep/pyo3/struct.Python.html\" title=\"struct devela::_dep::pyo3::Python\">Python</a>&lt;'py&gt;,\n) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;&amp;<a class=\"struct\" href=\"devela/_dep/pyo3/struct.Bound.html\" title=\"struct devela::_dep::pyo3::Bound\">Bound</a>&lt;'py, T&gt;, <a class=\"struct\" href=\"devela/_dep/pyo3/struct.DowncastError.html\" title=\"struct devela::_dep::pyo3::DowncastError\">DowncastError</a>&lt;'_, 'py&gt;&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;&amp;Bound&lt;&#39;py, T&gt;, DowncastError&lt;&#39;_, &#39;py&gt;&gt;\">ⓘ</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"devela/_dep/pyo3/trait.PyTypeCheck.html\" title=\"trait devela::_dep::pyo3::PyTypeCheck\">PyTypeCheck</a>,</div></h4></section></summary><div class=\"docblock\"><p>Downcast this <code>PyObject</code> to a concrete Python type or pyclass.</p>\n<p>Note that you can often avoid downcasting yourself by just specifying\nthe desired type in function or method signatures.\nHowever, manual downcasting is sometimes necessary.</p>\n<p>For extracting a Rust-only type, see <a href=\"struct.Py.html#method.extract\"><code>Py::extract</code></a>.</p>\n<h5 id=\"example-downcasting-to-a-specific-python-object\"><a class=\"doc-anchor\" href=\"#example-downcasting-to-a-specific-python-object\">§</a>Example: Downcasting to a specific Python object</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>pyo3::prelude::<span class=\"kw-2\">*</span>;\n<span class=\"kw\">use </span>pyo3::types::{PyDict, PyList};\n\nPython::with_gil(|py| {\n    <span class=\"kw\">let </span>any: PyObject = PyDict::new(py).into();\n\n    <span class=\"macro\">assert!</span>(any.downcast_bound::&lt;PyDict&gt;(py).is_ok());\n    <span class=\"macro\">assert!</span>(any.downcast_bound::&lt;PyList&gt;(py).is_err());\n});</code></pre></div>\n<h5 id=\"example-getting-a-reference-to-a-pyclass\"><a class=\"doc-anchor\" href=\"#example-getting-a-reference-to-a-pyclass\">§</a>Example: Getting a reference to a pyclass</h5>\n<p>This is useful if you want to mutate a <code>PyObject</code> that\nmight actually be a pyclass.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>pyo3::prelude::<span class=\"kw-2\">*</span>;\n\n<span class=\"attr\">#[pyclass]\n</span><span class=\"kw\">struct </span>Class {\n    i: i32,\n}\n\nPython::with_gil(|py| {\n    <span class=\"kw\">let </span>class: PyObject = Py::new(py, Class { i: <span class=\"number\">0 </span>})<span class=\"question-mark\">?</span>.into_any();\n\n    <span class=\"kw\">let </span>class_bound = class.downcast_bound::&lt;Class&gt;(py)<span class=\"question-mark\">?</span>;\n\n    class_bound.borrow_mut().i += <span class=\"number\">1</span>;\n\n    <span class=\"comment\">// Alternatively you can get a `PyRefMut` directly\n    </span><span class=\"kw\">let </span>class_ref: PyRefMut&lt;<span class=\"lifetime\">'_</span>, Class&gt; = class.extract(py)<span class=\"question-mark\">?</span>;\n    <span class=\"macro\">assert_eq!</span>(class_ref.i, <span class=\"number\">1</span>);\n    <span class=\"prelude-val\">Ok</span>(())\n})</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.downcast_bound_unchecked\" class=\"method\"><h4 class=\"code-header\">pub unsafe fn <a href=\"devela/_dep/pyo3/struct.Py.html#tymethod.downcast_bound_unchecked\" class=\"fn\">downcast_bound_unchecked</a>&lt;'py, T&gt;(\n    &amp;self,\n    py: <a class=\"struct\" href=\"devela/_dep/pyo3/struct.Python.html\" title=\"struct devela::_dep::pyo3::Python\">Python</a>&lt;'py&gt;,\n) -&gt; &amp;<a class=\"struct\" href=\"devela/_dep/pyo3/struct.Bound.html\" title=\"struct devela::_dep::pyo3::Bound\">Bound</a>&lt;'py, T&gt;</h4></section></summary><div class=\"docblock\"><p>Casts the PyObject to a concrete Python object type without checking validity.</p>\n<h5 id=\"safety\"><a class=\"doc-anchor\" href=\"#safety\">§</a>Safety</h5>\n<p>Callers must ensure that the type is valid or risk type confusion.</p>\n</div></details></div></details>",0,"devela::_dep::pyo3::PyObject"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Py%3CT%3E\" class=\"impl\"><a href=\"#impl-Py%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"struct\" href=\"devela/_dep/pyo3/struct.Py.html\" title=\"struct devela::_dep::pyo3::Py\">Py</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_ptr\" class=\"method\"><h4 class=\"code-header\">pub fn <a href=\"devela/_dep/pyo3/struct.Py.html#tymethod.as_ptr\" class=\"fn\">as_ptr</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.pointer.html\">*mut </a><a class=\"struct\" href=\"devela/_dep/pyo3/ffi/struct.PyObject.html\" title=\"struct devela::_dep::pyo3::ffi::PyObject\">PyObject</a></h4></section></summary><div class=\"docblock\"><p>Returns the raw FFI pointer represented by self.</p>\n<h5 id=\"safety\"><a class=\"doc-anchor\" href=\"#safety\">§</a>Safety</h5>\n<p>Callers are responsible for ensuring that the pointer does not outlive self.</p>\n<p>The reference is borrowed; callers should not decrease the reference count\nwhen they are finished with the pointer.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_ptr\" class=\"method\"><h4 class=\"code-header\">pub fn <a href=\"devela/_dep/pyo3/struct.Py.html#tymethod.into_ptr\" class=\"fn\">into_ptr</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.pointer.html\">*mut </a><a class=\"struct\" href=\"devela/_dep/pyo3/ffi/struct.PyObject.html\" title=\"struct devela::_dep::pyo3::ffi::PyObject\">PyObject</a></h4></section></summary><div class=\"docblock\"><p>Returns an owned raw FFI pointer represented by self.</p>\n<h5 id=\"safety-1\"><a class=\"doc-anchor\" href=\"#safety-1\">§</a>Safety</h5>\n<p>The reference is owned; when finished the caller should either transfer ownership\nof the pointer or decrease the reference count (e.g. with <a href=\"devela/_dep/pyo3/ffi/fn.Py_DecRef.html\" title=\"fn devela::_dep::pyo3::ffi::Py_DecRef\"><code>pyo3::ffi::Py_DecRef</code></a>).</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_any\" class=\"method\"><h4 class=\"code-header\">pub fn <a href=\"devela/_dep/pyo3/struct.Py.html#tymethod.as_any\" class=\"fn\">as_any</a>(&amp;self) -&gt; &amp;<a class=\"struct\" href=\"devela/_dep/pyo3/struct.Py.html\" title=\"struct devela::_dep::pyo3::Py\">Py</a>&lt;<a class=\"struct\" href=\"devela/_dep/pyo3/struct.PyAny.html\" title=\"struct devela::_dep::pyo3::PyAny\">PyAny</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Helper to cast to <code>Py&lt;PyAny&gt;</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_any\" class=\"method\"><h4 class=\"code-header\">pub fn <a href=\"devela/_dep/pyo3/struct.Py.html#tymethod.into_any\" class=\"fn\">into_any</a>(self) -&gt; <a class=\"struct\" href=\"devela/_dep/pyo3/struct.Py.html\" title=\"struct devela::_dep::pyo3::Py\">Py</a>&lt;<a class=\"struct\" href=\"devela/_dep/pyo3/struct.PyAny.html\" title=\"struct devela::_dep::pyo3::PyAny\">PyAny</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Helper to cast to <code>Py&lt;PyAny&gt;</code>, transferring ownership.</p>\n</div></details></div></details>",0,"devela::_dep::pyo3::PyObject"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Py%3CT%3E\" class=\"impl\"><a href=\"#impl-Py%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"struct\" href=\"devela/_dep/pyo3/struct.Py.html\" title=\"struct devela::_dep::pyo3::Py\">Py</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.bind\" class=\"method\"><h4 class=\"code-header\">pub fn <a href=\"devela/_dep/pyo3/struct.Py.html#tymethod.bind\" class=\"fn\">bind</a>&lt;'py&gt;(&amp;self, _py: <a class=\"struct\" href=\"devela/_dep/pyo3/struct.Python.html\" title=\"struct devela::_dep::pyo3::Python\">Python</a>&lt;'py&gt;) -&gt; &amp;<a class=\"struct\" href=\"devela/_dep/pyo3/struct.Bound.html\" title=\"struct devela::_dep::pyo3::Bound\">Bound</a>&lt;'py, T&gt;</h4></section></summary><div class=\"docblock\"><p>Attaches this <code>Py</code> to the given Python context, allowing access to further Python APIs.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_bound\" class=\"method\"><h4 class=\"code-header\">pub fn <a href=\"devela/_dep/pyo3/struct.Py.html#tymethod.into_bound\" class=\"fn\">into_bound</a>(self, py: <a class=\"struct\" href=\"devela/_dep/pyo3/struct.Python.html\" title=\"struct devela::_dep::pyo3::Python\">Python</a>&lt;'_&gt;) -&gt; <a class=\"struct\" href=\"devela/_dep/pyo3/struct.Bound.html\" title=\"struct devela::_dep::pyo3::Bound\">Bound</a>&lt;'_, T&gt;</h4></section></summary><div class=\"docblock\"><p>Same as <code>bind</code> but takes ownership of <code>self</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bind_borrowed\" class=\"method\"><h4 class=\"code-header\">pub fn <a href=\"devela/_dep/pyo3/struct.Py.html#tymethod.bind_borrowed\" class=\"fn\">bind_borrowed</a>&lt;'a, 'py&gt;(&amp;'a self, py: <a class=\"struct\" href=\"devela/_dep/pyo3/struct.Python.html\" title=\"struct devela::_dep::pyo3::Python\">Python</a>&lt;'py&gt;) -&gt; <a class=\"struct\" href=\"devela/_dep/pyo3/struct.Borrowed.html\" title=\"struct devela::_dep::pyo3::Borrowed\">Borrowed</a>&lt;'a, 'py, T&gt;</h4></section></summary><div class=\"docblock\"><p>Same as <code>bind</code> but produces a <code>Borrowed&lt;T&gt;</code> instead of a <code>Bound&lt;T&gt;</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is\" class=\"method\"><h4 class=\"code-header\">pub fn <a href=\"devela/_dep/pyo3/struct.Py.html#tymethod.is\" class=\"fn\">is</a>&lt;U&gt;(&amp;self, o: U) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a><div class=\"where\">where\n    U: <a class=\"trait\" href=\"devela/code/trait.AsRef.html\" title=\"trait devela::code::AsRef\">AsRef</a>&lt;<a class=\"struct\" href=\"devela/_dep/pyo3/struct.Py.html\" title=\"struct devela::_dep::pyo3::Py\">Py</a>&lt;<a class=\"struct\" href=\"devela/_dep/pyo3/struct.PyAny.html\" title=\"struct devela::_dep::pyo3::PyAny\">PyAny</a>&gt;&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Returns whether <code>self</code> and <code>other</code> point to the same object. To compare\nthe equality of two objects (the <code>==</code> operator), use <a href=\"devela/_dep/pyo3/types/trait.PyAnyMethods.html#tymethod.eq\" title=\"method devela::_dep::pyo3::types::PyAnyMethods::eq\"><code>eq</code></a>.</p>\n<p>This is equivalent to the Python expression <code>self is other</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_refcnt\" class=\"method\"><h4 class=\"code-header\">pub fn <a href=\"devela/_dep/pyo3/struct.Py.html#tymethod.get_refcnt\" class=\"fn\">get_refcnt</a>(&amp;self, _py: <a class=\"struct\" href=\"devela/_dep/pyo3/struct.Python.html\" title=\"struct devela::_dep::pyo3::Python\">Python</a>&lt;'_&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.isize.html\">isize</a></h4></section></summary><div class=\"docblock\"><p>Gets the reference count of the <code>ffi::PyObject</code> pointer.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_ref\" class=\"method\"><h4 class=\"code-header\">pub fn <a href=\"devela/_dep/pyo3/struct.Py.html#tymethod.clone_ref\" class=\"fn\">clone_ref</a>(&amp;self, _py: <a class=\"struct\" href=\"devela/_dep/pyo3/struct.Python.html\" title=\"struct devela::_dep::pyo3::Python\">Python</a>&lt;'_&gt;) -&gt; <a class=\"struct\" href=\"devela/_dep/pyo3/struct.Py.html\" title=\"struct devela::_dep::pyo3::Py\">Py</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Makes a clone of <code>self</code>.</p>\n<p>This creates another pointer to the same object, increasing its reference count.</p>\n<p>You should prefer using this method over <a href=\"devela/code/trait.Clone.html\" title=\"trait devela::code::Clone\"><code>Clone</code></a> if you happen to be holding the GIL already.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>pyo3::prelude::<span class=\"kw-2\">*</span>;\n<span class=\"kw\">use </span>pyo3::types::PyDict;\n\nPython::with_gil(|py| {\n    <span class=\"kw\">let </span>first: Py&lt;PyDict&gt; = PyDict::new(py).unbind();\n    <span class=\"kw\">let </span>second = Py::clone_ref(<span class=\"kw-2\">&amp;</span>first, py);\n\n    <span class=\"comment\">// Both point to the same object\n    </span><span class=\"macro\">assert!</span>(first.is(<span class=\"kw-2\">&amp;</span>second));\n});</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.drop_ref\" class=\"method\"><h4 class=\"code-header\">pub fn <a href=\"devela/_dep/pyo3/struct.Py.html#tymethod.drop_ref\" class=\"fn\">drop_ref</a>(self, py: <a class=\"struct\" href=\"devela/_dep/pyo3/struct.Python.html\" title=\"struct devela::_dep::pyo3::Python\">Python</a>&lt;'_&gt;)</h4></section></summary><div class=\"docblock\"><p>Drops <code>self</code> and immediately decreases its reference count.</p>\n<p>This method is a micro-optimisation over <a href=\"devela/all/trait.Drop.html\" title=\"trait devela::all::Drop\"><code>Drop</code></a> if you happen to be holding the GIL\nalready.</p>\n<p>Note that if you are using <a href=\"devela/_dep/pyo3/struct.Bound.html\" title=\"struct devela::_dep::pyo3::Bound\"><code>Bound</code></a>, you do not need to use <a href=\"devela/_dep/pyo3/struct.Py.html#method.drop_ref\" title=\"method devela::_dep::pyo3::Py::drop_ref\"><code>Self::drop_ref</code></a> since\n<a href=\"devela/_dep/pyo3/struct.Bound.html\" title=\"struct devela::_dep::pyo3::Bound\"><code>Bound</code></a> guarantees that the GIL is held.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>pyo3::prelude::<span class=\"kw-2\">*</span>;\n<span class=\"kw\">use </span>pyo3::types::PyDict;\n\nPython::with_gil(|py| {\n    <span class=\"kw\">let </span>object: Py&lt;PyDict&gt; = PyDict::new(py).unbind();\n\n    <span class=\"comment\">// some usage of object\n\n    </span>object.drop_ref(py);\n});</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_none\" class=\"method\"><h4 class=\"code-header\">pub fn <a href=\"devela/_dep/pyo3/struct.Py.html#tymethod.is_none\" class=\"fn\">is_none</a>(&amp;self, _py: <a class=\"struct\" href=\"devela/_dep/pyo3/struct.Python.html\" title=\"struct devela::_dep::pyo3::Python\">Python</a>&lt;'_&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns whether the object is considered to be None.</p>\n<p>This is equivalent to the Python expression <code>self is None</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_truthy\" class=\"method\"><h4 class=\"code-header\">pub fn <a href=\"devela/_dep/pyo3/struct.Py.html#tymethod.is_truthy\" class=\"fn\">is_truthy</a>(&amp;self, py: <a class=\"struct\" href=\"devela/_dep/pyo3/struct.Python.html\" title=\"struct devela::_dep::pyo3::Python\">Python</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a>, <a class=\"struct\" href=\"devela/_dep/pyo3/struct.PyErr.html\" title=\"struct devela::_dep::pyo3::PyErr\">PyErr</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;bool, PyErr&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Returns whether the object is considered to be true.</p>\n<p>This applies truth value testing equivalent to the Python expression <code>bool(self)</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extract\" class=\"method\"><h4 class=\"code-header\">pub fn <a href=\"devela/_dep/pyo3/struct.Py.html#tymethod.extract\" class=\"fn\">extract</a>&lt;'a, 'py, D&gt;(&amp;'a self, py: <a class=\"struct\" href=\"devela/_dep/pyo3/struct.Python.html\" title=\"struct devela::_dep::pyo3::Python\">Python</a>&lt;'py&gt;) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;D, <a class=\"struct\" href=\"devela/_dep/pyo3/struct.PyErr.html\" title=\"struct devela::_dep::pyo3::PyErr\">PyErr</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;D, PyErr&gt;\">ⓘ</a><div class=\"where\">where\n    'py: 'a,\n    D: <a class=\"trait\" href=\"devela/_dep/pyo3/conversion/trait.FromPyObjectBound.html\" title=\"trait devela::_dep::pyo3::conversion::FromPyObjectBound\">FromPyObjectBound</a>&lt;'a, 'py&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Extracts some type from the Python object.</p>\n<p>This is a wrapper function around <code>FromPyObject::extract()</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.getattr\" class=\"method\"><h4 class=\"code-header\">pub fn <a href=\"devela/_dep/pyo3/struct.Py.html#tymethod.getattr\" class=\"fn\">getattr</a>&lt;'py, N&gt;(\n    &amp;self,\n    py: <a class=\"struct\" href=\"devela/_dep/pyo3/struct.Python.html\" title=\"struct devela::_dep::pyo3::Python\">Python</a>&lt;'py&gt;,\n    attr_name: N,\n) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"struct\" href=\"devela/_dep/pyo3/struct.Py.html\" title=\"struct devela::_dep::pyo3::Py\">Py</a>&lt;<a class=\"struct\" href=\"devela/_dep/pyo3/struct.PyAny.html\" title=\"struct devela::_dep::pyo3::PyAny\">PyAny</a>&gt;, <a class=\"struct\" href=\"devela/_dep/pyo3/struct.PyErr.html\" title=\"struct devela::_dep::pyo3::PyErr\">PyErr</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;Py&lt;PyAny&gt;, PyErr&gt;\">ⓘ</a><div class=\"where\">where\n    N: <a class=\"trait\" href=\"devela/_dep/pyo3/trait.IntoPyObject.html\" title=\"trait devela::_dep::pyo3::IntoPyObject\">IntoPyObject</a>&lt;'py, Target = <a class=\"struct\" href=\"devela/_dep/pyo3/types/struct.PyString.html\" title=\"struct devela::_dep::pyo3::types::PyString\">PyString</a>&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Retrieves an attribute value.</p>\n<p>This is equivalent to the Python expression <code>self.attr_name</code>.</p>\n<p>If calling this method becomes performance-critical, the <a href=\"devela/_dep/pyo3/macro.intern.html\" title=\"macro devela::_dep::pyo3::intern\"><code>intern!</code></a> macro\ncan be used to intern <code>attr_name</code>, thereby avoiding repeated temporary allocations of\nPython strings.</p>\n<h5 id=\"example-interning-the-attribute-name\"><a class=\"doc-anchor\" href=\"#example-interning-the-attribute-name\">§</a>Example: <code>intern!</code>ing the attribute name</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#[pyfunction]\n</span><span class=\"kw\">fn </span>version(sys: Py&lt;PyModule&gt;, py: Python&lt;<span class=\"lifetime\">'_</span>&gt;) -&gt; PyResult&lt;PyObject&gt; {\n    sys.getattr(py, <span class=\"macro\">intern!</span>(py, <span class=\"string\">\"version\"</span>))\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.setattr\" class=\"method\"><h4 class=\"code-header\">pub fn <a href=\"devela/_dep/pyo3/struct.Py.html#tymethod.setattr\" class=\"fn\">setattr</a>&lt;'py, N, V&gt;(\n    &amp;self,\n    py: <a class=\"struct\" href=\"devela/_dep/pyo3/struct.Python.html\" title=\"struct devela::_dep::pyo3::Python\">Python</a>&lt;'py&gt;,\n    attr_name: N,\n    value: V,\n) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"devela/_dep/pyo3/struct.PyErr.html\" title=\"struct devela::_dep::pyo3::PyErr\">PyErr</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;(), PyErr&gt;\">ⓘ</a><div class=\"where\">where\n    N: <a class=\"trait\" href=\"devela/_dep/pyo3/trait.IntoPyObject.html\" title=\"trait devela::_dep::pyo3::IntoPyObject\">IntoPyObject</a>&lt;'py, Target = <a class=\"struct\" href=\"devela/_dep/pyo3/types/struct.PyString.html\" title=\"struct devela::_dep::pyo3::types::PyString\">PyString</a>&gt;,\n    V: <a class=\"trait\" href=\"devela/_dep/pyo3/trait.IntoPyObject.html\" title=\"trait devela::_dep::pyo3::IntoPyObject\">IntoPyObject</a>&lt;'py&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Sets an attribute value.</p>\n<p>This is equivalent to the Python expression <code>self.attr_name = value</code>.</p>\n<p>To avoid repeated temporary allocations of Python strings, the <a href=\"devela/_dep/pyo3/macro.intern.html\" title=\"macro devela::_dep::pyo3::intern\"><code>intern!</code></a>\nmacro can be used to intern <code>attr_name</code>.</p>\n<h5 id=\"example-interning-the-attribute-name-1\"><a class=\"doc-anchor\" href=\"#example-interning-the-attribute-name-1\">§</a>Example: <code>intern!</code>ing the attribute name</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#[pyfunction]\n</span><span class=\"kw\">fn </span>set_answer(ob: PyObject, py: Python&lt;<span class=\"lifetime\">'_</span>&gt;) -&gt; PyResult&lt;()&gt; {\n    ob.setattr(py, <span class=\"macro\">intern!</span>(py, <span class=\"string\">\"answer\"</span>), <span class=\"number\">42</span>)\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.call\" class=\"method\"><h4 class=\"code-header\">pub fn <a href=\"devela/_dep/pyo3/struct.Py.html#tymethod.call\" class=\"fn\">call</a>&lt;'py, A&gt;(\n    &amp;self,\n    py: <a class=\"struct\" href=\"devela/_dep/pyo3/struct.Python.html\" title=\"struct devela::_dep::pyo3::Python\">Python</a>&lt;'py&gt;,\n    args: A,\n    kwargs: <a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;&amp;<a class=\"struct\" href=\"devela/_dep/pyo3/struct.Bound.html\" title=\"struct devela::_dep::pyo3::Bound\">Bound</a>&lt;'py, <a class=\"struct\" href=\"devela/_dep/pyo3/types/struct.PyDict.html\" title=\"struct devela::_dep::pyo3::types::PyDict\">PyDict</a>&gt;&gt;,\n) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"struct\" href=\"devela/_dep/pyo3/struct.Py.html\" title=\"struct devela::_dep::pyo3::Py\">Py</a>&lt;<a class=\"struct\" href=\"devela/_dep/pyo3/struct.PyAny.html\" title=\"struct devela::_dep::pyo3::PyAny\">PyAny</a>&gt;, <a class=\"struct\" href=\"devela/_dep/pyo3/struct.PyErr.html\" title=\"struct devela::_dep::pyo3::PyErr\">PyErr</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;Py&lt;PyAny&gt;, PyErr&gt;\">ⓘ</a><div class=\"where\">where\n    A: <a class=\"trait\" href=\"devela/_dep/pyo3/trait.IntoPyObject.html\" title=\"trait devela::_dep::pyo3::IntoPyObject\">IntoPyObject</a>&lt;'py, Target = <a class=\"struct\" href=\"devela/_dep/pyo3/types/struct.PyTuple.html\" title=\"struct devela::_dep::pyo3::types::PyTuple\">PyTuple</a>&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Calls the object.</p>\n<p>This is equivalent to the Python expression <code>self(*args, **kwargs)</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.call1\" class=\"method\"><h4 class=\"code-header\">pub fn <a href=\"devela/_dep/pyo3/struct.Py.html#tymethod.call1\" class=\"fn\">call1</a>&lt;'py, N&gt;(\n    &amp;self,\n    py: <a class=\"struct\" href=\"devela/_dep/pyo3/struct.Python.html\" title=\"struct devela::_dep::pyo3::Python\">Python</a>&lt;'py&gt;,\n    args: N,\n) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"struct\" href=\"devela/_dep/pyo3/struct.Py.html\" title=\"struct devela::_dep::pyo3::Py\">Py</a>&lt;<a class=\"struct\" href=\"devela/_dep/pyo3/struct.PyAny.html\" title=\"struct devela::_dep::pyo3::PyAny\">PyAny</a>&gt;, <a class=\"struct\" href=\"devela/_dep/pyo3/struct.PyErr.html\" title=\"struct devela::_dep::pyo3::PyErr\">PyErr</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;Py&lt;PyAny&gt;, PyErr&gt;\">ⓘ</a><div class=\"where\">where\n    N: <a class=\"trait\" href=\"devela/_dep/pyo3/trait.IntoPyObject.html\" title=\"trait devela::_dep::pyo3::IntoPyObject\">IntoPyObject</a>&lt;'py, Target = <a class=\"struct\" href=\"devela/_dep/pyo3/types/struct.PyTuple.html\" title=\"struct devela::_dep::pyo3::types::PyTuple\">PyTuple</a>&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Calls the object with only positional arguments.</p>\n<p>This is equivalent to the Python expression <code>self(*args)</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.call0\" class=\"method\"><h4 class=\"code-header\">pub fn <a href=\"devela/_dep/pyo3/struct.Py.html#tymethod.call0\" class=\"fn\">call0</a>(&amp;self, py: <a class=\"struct\" href=\"devela/_dep/pyo3/struct.Python.html\" title=\"struct devela::_dep::pyo3::Python\">Python</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"struct\" href=\"devela/_dep/pyo3/struct.Py.html\" title=\"struct devela::_dep::pyo3::Py\">Py</a>&lt;<a class=\"struct\" href=\"devela/_dep/pyo3/struct.PyAny.html\" title=\"struct devela::_dep::pyo3::PyAny\">PyAny</a>&gt;, <a class=\"struct\" href=\"devela/_dep/pyo3/struct.PyErr.html\" title=\"struct devela::_dep::pyo3::PyErr\">PyErr</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;Py&lt;PyAny&gt;, PyErr&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Calls the object without arguments.</p>\n<p>This is equivalent to the Python expression <code>self()</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.call_method\" class=\"method\"><h4 class=\"code-header\">pub fn <a href=\"devela/_dep/pyo3/struct.Py.html#tymethod.call_method\" class=\"fn\">call_method</a>&lt;'py, N, A&gt;(\n    &amp;self,\n    py: <a class=\"struct\" href=\"devela/_dep/pyo3/struct.Python.html\" title=\"struct devela::_dep::pyo3::Python\">Python</a>&lt;'py&gt;,\n    name: N,\n    args: A,\n    kwargs: <a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;&amp;<a class=\"struct\" href=\"devela/_dep/pyo3/struct.Bound.html\" title=\"struct devela::_dep::pyo3::Bound\">Bound</a>&lt;'py, <a class=\"struct\" href=\"devela/_dep/pyo3/types/struct.PyDict.html\" title=\"struct devela::_dep::pyo3::types::PyDict\">PyDict</a>&gt;&gt;,\n) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"struct\" href=\"devela/_dep/pyo3/struct.Py.html\" title=\"struct devela::_dep::pyo3::Py\">Py</a>&lt;<a class=\"struct\" href=\"devela/_dep/pyo3/struct.PyAny.html\" title=\"struct devela::_dep::pyo3::PyAny\">PyAny</a>&gt;, <a class=\"struct\" href=\"devela/_dep/pyo3/struct.PyErr.html\" title=\"struct devela::_dep::pyo3::PyErr\">PyErr</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;Py&lt;PyAny&gt;, PyErr&gt;\">ⓘ</a><div class=\"where\">where\n    N: <a class=\"trait\" href=\"devela/_dep/pyo3/trait.IntoPyObject.html\" title=\"trait devela::_dep::pyo3::IntoPyObject\">IntoPyObject</a>&lt;'py, Target = <a class=\"struct\" href=\"devela/_dep/pyo3/types/struct.PyString.html\" title=\"struct devela::_dep::pyo3::types::PyString\">PyString</a>&gt;,\n    A: <a class=\"trait\" href=\"devela/_dep/pyo3/trait.IntoPyObject.html\" title=\"trait devela::_dep::pyo3::IntoPyObject\">IntoPyObject</a>&lt;'py, Target = <a class=\"struct\" href=\"devela/_dep/pyo3/types/struct.PyTuple.html\" title=\"struct devela::_dep::pyo3::types::PyTuple\">PyTuple</a>&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Calls a method on the object.</p>\n<p>This is equivalent to the Python expression <code>self.name(*args, **kwargs)</code>.</p>\n<p>To avoid repeated temporary allocations of Python strings, the <a href=\"devela/_dep/pyo3/macro.intern.html\" title=\"macro devela::_dep::pyo3::intern\"><code>intern!</code></a>\nmacro can be used to intern <code>name</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.call_method1\" class=\"method\"><h4 class=\"code-header\">pub fn <a href=\"devela/_dep/pyo3/struct.Py.html#tymethod.call_method1\" class=\"fn\">call_method1</a>&lt;'py, N, A&gt;(\n    &amp;self,\n    py: <a class=\"struct\" href=\"devela/_dep/pyo3/struct.Python.html\" title=\"struct devela::_dep::pyo3::Python\">Python</a>&lt;'py&gt;,\n    name: N,\n    args: A,\n) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"struct\" href=\"devela/_dep/pyo3/struct.Py.html\" title=\"struct devela::_dep::pyo3::Py\">Py</a>&lt;<a class=\"struct\" href=\"devela/_dep/pyo3/struct.PyAny.html\" title=\"struct devela::_dep::pyo3::PyAny\">PyAny</a>&gt;, <a class=\"struct\" href=\"devela/_dep/pyo3/struct.PyErr.html\" title=\"struct devela::_dep::pyo3::PyErr\">PyErr</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;Py&lt;PyAny&gt;, PyErr&gt;\">ⓘ</a><div class=\"where\">where\n    N: <a class=\"trait\" href=\"devela/_dep/pyo3/trait.IntoPyObject.html\" title=\"trait devela::_dep::pyo3::IntoPyObject\">IntoPyObject</a>&lt;'py, Target = <a class=\"struct\" href=\"devela/_dep/pyo3/types/struct.PyString.html\" title=\"struct devela::_dep::pyo3::types::PyString\">PyString</a>&gt;,\n    A: <a class=\"trait\" href=\"devela/_dep/pyo3/trait.IntoPyObject.html\" title=\"trait devela::_dep::pyo3::IntoPyObject\">IntoPyObject</a>&lt;'py, Target = <a class=\"struct\" href=\"devela/_dep/pyo3/types/struct.PyTuple.html\" title=\"struct devela::_dep::pyo3::types::PyTuple\">PyTuple</a>&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Calls a method on the object with only positional arguments.</p>\n<p>This is equivalent to the Python expression <code>self.name(*args)</code>.</p>\n<p>To avoid repeated temporary allocations of Python strings, the <a href=\"devela/_dep/pyo3/macro.intern.html\" title=\"macro devela::_dep::pyo3::intern\"><code>intern!</code></a>\nmacro can be used to intern <code>name</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.call_method0\" class=\"method\"><h4 class=\"code-header\">pub fn <a href=\"devela/_dep/pyo3/struct.Py.html#tymethod.call_method0\" class=\"fn\">call_method0</a>&lt;'py, N&gt;(\n    &amp;self,\n    py: <a class=\"struct\" href=\"devela/_dep/pyo3/struct.Python.html\" title=\"struct devela::_dep::pyo3::Python\">Python</a>&lt;'py&gt;,\n    name: N,\n) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"struct\" href=\"devela/_dep/pyo3/struct.Py.html\" title=\"struct devela::_dep::pyo3::Py\">Py</a>&lt;<a class=\"struct\" href=\"devela/_dep/pyo3/struct.PyAny.html\" title=\"struct devela::_dep::pyo3::PyAny\">PyAny</a>&gt;, <a class=\"struct\" href=\"devela/_dep/pyo3/struct.PyErr.html\" title=\"struct devela::_dep::pyo3::PyErr\">PyErr</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;Py&lt;PyAny&gt;, PyErr&gt;\">ⓘ</a><div class=\"where\">where\n    N: <a class=\"trait\" href=\"devela/_dep/pyo3/trait.IntoPyObject.html\" title=\"trait devela::_dep::pyo3::IntoPyObject\">IntoPyObject</a>&lt;'py, Target = <a class=\"struct\" href=\"devela/_dep/pyo3/types/struct.PyString.html\" title=\"struct devela::_dep::pyo3::types::PyString\">PyString</a>&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Calls a method on the object with no arguments.</p>\n<p>This is equivalent to the Python expression <code>self.name()</code>.</p>\n<p>To avoid repeated temporary allocations of Python strings, the <a href=\"devela/_dep/pyo3/macro.intern.html\" title=\"macro devela::_dep::pyo3::intern\"><code>intern!</code></a>\nmacro can be used to intern <code>name</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_owned_ptr\" class=\"method\"><h4 class=\"code-header\">pub unsafe fn <a href=\"devela/_dep/pyo3/struct.Py.html#tymethod.from_owned_ptr\" class=\"fn\">from_owned_ptr</a>(py: <a class=\"struct\" href=\"devela/_dep/pyo3/struct.Python.html\" title=\"struct devela::_dep::pyo3::Python\">Python</a>&lt;'_&gt;, ptr: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.pointer.html\">*mut </a><a class=\"struct\" href=\"devela/_dep/pyo3/ffi/struct.PyObject.html\" title=\"struct devela::_dep::pyo3::ffi::PyObject\">PyObject</a>) -&gt; <a class=\"struct\" href=\"devela/_dep/pyo3/struct.Py.html\" title=\"struct devela::_dep::pyo3::Py\">Py</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Create a <code>Py&lt;T&gt;</code> instance by taking ownership of the given FFI pointer.</p>\n<h5 id=\"safety\"><a class=\"doc-anchor\" href=\"#safety\">§</a>Safety</h5>\n<p><code>ptr</code> must be a pointer to a Python object of type T.</p>\n<p>Callers must own the object referred to by <code>ptr</code>, as this function\nimplicitly takes ownership of that object.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if <code>ptr</code> is null.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_owned_ptr_or_err\" class=\"method\"><h4 class=\"code-header\">pub unsafe fn <a href=\"devela/_dep/pyo3/struct.Py.html#tymethod.from_owned_ptr_or_err\" class=\"fn\">from_owned_ptr_or_err</a>(\n    py: <a class=\"struct\" href=\"devela/_dep/pyo3/struct.Python.html\" title=\"struct devela::_dep::pyo3::Python\">Python</a>&lt;'_&gt;,\n    ptr: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.pointer.html\">*mut </a><a class=\"struct\" href=\"devela/_dep/pyo3/ffi/struct.PyObject.html\" title=\"struct devela::_dep::pyo3::ffi::PyObject\">PyObject</a>,\n) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"struct\" href=\"devela/_dep/pyo3/struct.Py.html\" title=\"struct devela::_dep::pyo3::Py\">Py</a>&lt;T&gt;, <a class=\"struct\" href=\"devela/_dep/pyo3/struct.PyErr.html\" title=\"struct devela::_dep::pyo3::PyErr\">PyErr</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;Py&lt;T&gt;, PyErr&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Create a <code>Py&lt;T&gt;</code> instance by taking ownership of the given FFI pointer.</p>\n<p>If <code>ptr</code> is null then the current Python exception is fetched as a <a href=\"devela/_dep/pyo3/struct.PyErr.html\" title=\"struct devela::_dep::pyo3::PyErr\"><code>PyErr</code></a>.</p>\n<h5 id=\"safety-1\"><a class=\"doc-anchor\" href=\"#safety-1\">§</a>Safety</h5>\n<p>If non-null, <code>ptr</code> must be a pointer to a Python object of type T.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_owned_ptr_or_opt\" class=\"method\"><h4 class=\"code-header\">pub unsafe fn <a href=\"devela/_dep/pyo3/struct.Py.html#tymethod.from_owned_ptr_or_opt\" class=\"fn\">from_owned_ptr_or_opt</a>(\n    _py: <a class=\"struct\" href=\"devela/_dep/pyo3/struct.Python.html\" title=\"struct devela::_dep::pyo3::Python\">Python</a>&lt;'_&gt;,\n    ptr: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.pointer.html\">*mut </a><a class=\"struct\" href=\"devela/_dep/pyo3/ffi/struct.PyObject.html\" title=\"struct devela::_dep::pyo3::ffi::PyObject\">PyObject</a>,\n) -&gt; <a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;<a class=\"struct\" href=\"devela/_dep/pyo3/struct.Py.html\" title=\"struct devela::_dep::pyo3::Py\">Py</a>&lt;T&gt;&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Option&lt;Py&lt;T&gt;&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Create a <code>Py&lt;T&gt;</code> instance by taking ownership of the given FFI pointer.</p>\n<p>If <code>ptr</code> is null then <code>None</code> is returned.</p>\n<h5 id=\"safety-2\"><a class=\"doc-anchor\" href=\"#safety-2\">§</a>Safety</h5>\n<p>If non-null, <code>ptr</code> must be a pointer to a Python object of type T.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_borrowed_ptr\" class=\"method\"><h4 class=\"code-header\">pub unsafe fn <a href=\"devela/_dep/pyo3/struct.Py.html#tymethod.from_borrowed_ptr\" class=\"fn\">from_borrowed_ptr</a>(py: <a class=\"struct\" href=\"devela/_dep/pyo3/struct.Python.html\" title=\"struct devela::_dep::pyo3::Python\">Python</a>&lt;'_&gt;, ptr: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.pointer.html\">*mut </a><a class=\"struct\" href=\"devela/_dep/pyo3/ffi/struct.PyObject.html\" title=\"struct devela::_dep::pyo3::ffi::PyObject\">PyObject</a>) -&gt; <a class=\"struct\" href=\"devela/_dep/pyo3/struct.Py.html\" title=\"struct devela::_dep::pyo3::Py\">Py</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Create a <code>Py&lt;T&gt;</code> instance by creating a new reference from the given FFI pointer.</p>\n<h5 id=\"safety-3\"><a class=\"doc-anchor\" href=\"#safety-3\">§</a>Safety</h5>\n<p><code>ptr</code> must be a pointer to a Python object of type T.</p>\n<h5 id=\"panics-1\"><a class=\"doc-anchor\" href=\"#panics-1\">§</a>Panics</h5>\n<p>Panics if <code>ptr</code> is null.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_borrowed_ptr_or_err\" class=\"method\"><h4 class=\"code-header\">pub unsafe fn <a href=\"devela/_dep/pyo3/struct.Py.html#tymethod.from_borrowed_ptr_or_err\" class=\"fn\">from_borrowed_ptr_or_err</a>(\n    py: <a class=\"struct\" href=\"devela/_dep/pyo3/struct.Python.html\" title=\"struct devela::_dep::pyo3::Python\">Python</a>&lt;'_&gt;,\n    ptr: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.pointer.html\">*mut </a><a class=\"struct\" href=\"devela/_dep/pyo3/ffi/struct.PyObject.html\" title=\"struct devela::_dep::pyo3::ffi::PyObject\">PyObject</a>,\n) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"struct\" href=\"devela/_dep/pyo3/struct.Py.html\" title=\"struct devela::_dep::pyo3::Py\">Py</a>&lt;T&gt;, <a class=\"struct\" href=\"devela/_dep/pyo3/struct.PyErr.html\" title=\"struct devela::_dep::pyo3::PyErr\">PyErr</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;Py&lt;T&gt;, PyErr&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Create a <code>Py&lt;T&gt;</code> instance by creating a new reference from the given FFI pointer.</p>\n<p>If <code>ptr</code> is null then the current Python exception is fetched as a <code>PyErr</code>.</p>\n<h5 id=\"safety-4\"><a class=\"doc-anchor\" href=\"#safety-4\">§</a>Safety</h5>\n<p><code>ptr</code> must be a pointer to a Python object of type T.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_borrowed_ptr_or_opt\" class=\"method\"><h4 class=\"code-header\">pub unsafe fn <a href=\"devela/_dep/pyo3/struct.Py.html#tymethod.from_borrowed_ptr_or_opt\" class=\"fn\">from_borrowed_ptr_or_opt</a>(\n    _py: <a class=\"struct\" href=\"devela/_dep/pyo3/struct.Python.html\" title=\"struct devela::_dep::pyo3::Python\">Python</a>&lt;'_&gt;,\n    ptr: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.pointer.html\">*mut </a><a class=\"struct\" href=\"devela/_dep/pyo3/ffi/struct.PyObject.html\" title=\"struct devela::_dep::pyo3::ffi::PyObject\">PyObject</a>,\n) -&gt; <a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;<a class=\"struct\" href=\"devela/_dep/pyo3/struct.Py.html\" title=\"struct devela::_dep::pyo3::Py\">Py</a>&lt;T&gt;&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Option&lt;Py&lt;T&gt;&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Create a <code>Py&lt;T&gt;</code> instance by creating a new reference from the given FFI pointer.</p>\n<p>If <code>ptr</code> is null then <code>None</code> is returned.</p>\n<h5 id=\"safety-5\"><a class=\"doc-anchor\" href=\"#safety-5\">§</a>Safety</h5>\n<p><code>ptr</code> must be a pointer to a Python object of type T.</p>\n</div></details></div></details>",0,"devela::_dep::pyo3::PyObject"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Py%3CT%3E\" class=\"impl\"><a href=\"#impl-Py%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"struct\" href=\"devela/_dep/pyo3/struct.Py.html\" title=\"struct devela::_dep::pyo3::Py\">Py</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"devela/_dep/pyo3/trait.PyClass.html\" title=\"trait devela::_dep::pyo3::PyClass\">PyClass</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.borrow\" class=\"method\"><h4 class=\"code-header\">pub fn <a href=\"devela/_dep/pyo3/struct.Py.html#tymethod.borrow\" class=\"fn\">borrow</a>&lt;'py&gt;(&amp;'py self, py: <a class=\"struct\" href=\"devela/_dep/pyo3/struct.Python.html\" title=\"struct devela::_dep::pyo3::Python\">Python</a>&lt;'py&gt;) -&gt; <a class=\"struct\" href=\"devela/_dep/pyo3/struct.PyRef.html\" title=\"struct devela::_dep::pyo3::PyRef\">PyRef</a>&lt;'py, T&gt;</h4></section></summary><div class=\"docblock\"><p>Immutably borrows the value <code>T</code>.</p>\n<p>This borrow lasts while the returned <a href=\"devela/_dep/pyo3/struct.PyRef.html\" title=\"struct devela::_dep::pyo3::PyRef\"><code>PyRef</code></a> exists.\nMultiple immutable borrows can be taken out at the same time.</p>\n<p>For frozen classes, the simpler <a href=\"devela/_dep/pyo3/struct.Py.html#method.get\" title=\"method devela::_dep::pyo3::Py::get\"><code>get</code></a> is available.</p>\n<p>Equivalent to <code>self.bind(py).borrow()</code> - see <a href=\"devela/_dep/pyo3/struct.Bound.html#method.borrow\" title=\"method devela::_dep::pyo3::Bound::borrow\"><code>Bound::borrow</code></a>.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#[pyclass]\n</span><span class=\"kw\">struct </span>Foo {\n    inner: u8,\n}\n\nPython::with_gil(|py| -&gt; PyResult&lt;()&gt; {\n    <span class=\"kw\">let </span>foo: Py&lt;Foo&gt; = Py::new(py, Foo { inner: <span class=\"number\">73 </span>})<span class=\"question-mark\">?</span>;\n    <span class=\"kw\">let </span>inner: <span class=\"kw-2\">&amp;</span>u8 = <span class=\"kw-2\">&amp;</span>foo.borrow(py).inner;\n\n    <span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>inner, <span class=\"number\">73</span>);\n    <span class=\"prelude-val\">Ok</span>(())\n})<span class=\"question-mark\">?</span>;</code></pre></div>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if the value is currently mutably borrowed. For a non-panicking variant, use\n<a href=\"#method.try_borrow\"><code>try_borrow</code></a>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.borrow_mut\" class=\"method\"><h4 class=\"code-header\">pub fn <a href=\"devela/_dep/pyo3/struct.Py.html#tymethod.borrow_mut\" class=\"fn\">borrow_mut</a>&lt;'py&gt;(&amp;'py self, py: <a class=\"struct\" href=\"devela/_dep/pyo3/struct.Python.html\" title=\"struct devela::_dep::pyo3::Python\">Python</a>&lt;'py&gt;) -&gt; <a class=\"struct\" href=\"devela/_dep/pyo3/struct.PyRefMut.html\" title=\"struct devela::_dep::pyo3::PyRefMut\">PyRefMut</a>&lt;'py, T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"devela/_dep/pyo3/trait.PyClass.html\" title=\"trait devela::_dep::pyo3::PyClass\">PyClass</a>&lt;Frozen = False&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Mutably borrows the value <code>T</code>.</p>\n<p>This borrow lasts while the returned <a href=\"devela/_dep/pyo3/struct.PyRefMut.html\" title=\"struct devela::_dep::pyo3::PyRefMut\"><code>PyRefMut</code></a> exists.</p>\n<p>Equivalent to <code>self.bind(py).borrow_mut()</code> - see <a href=\"devela/_dep/pyo3/struct.Bound.html#method.borrow_mut\" title=\"method devela::_dep::pyo3::Bound::borrow_mut\"><code>Bound::borrow_mut</code></a>.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#[pyclass]\n</span><span class=\"kw\">struct </span>Foo {\n    inner: u8,\n}\n\nPython::with_gil(|py| -&gt; PyResult&lt;()&gt; {\n    <span class=\"kw\">let </span>foo: Py&lt;Foo&gt; = Py::new(py, Foo { inner: <span class=\"number\">73 </span>})<span class=\"question-mark\">?</span>;\n    foo.borrow_mut(py).inner = <span class=\"number\">35</span>;\n\n    <span class=\"macro\">assert_eq!</span>(foo.borrow(py).inner, <span class=\"number\">35</span>);\n    <span class=\"prelude-val\">Ok</span>(())\n})<span class=\"question-mark\">?</span>;</code></pre></div>\n<h5 id=\"panics-1\"><a class=\"doc-anchor\" href=\"#panics-1\">§</a>Panics</h5>\n<p>Panics if the value is currently borrowed. For a non-panicking variant, use\n<a href=\"#method.try_borrow_mut\"><code>try_borrow_mut</code></a>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_borrow\" class=\"method\"><h4 class=\"code-header\">pub fn <a href=\"devela/_dep/pyo3/struct.Py.html#tymethod.try_borrow\" class=\"fn\">try_borrow</a>&lt;'py&gt;(\n    &amp;'py self,\n    py: <a class=\"struct\" href=\"devela/_dep/pyo3/struct.Python.html\" title=\"struct devela::_dep::pyo3::Python\">Python</a>&lt;'py&gt;,\n) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"struct\" href=\"devela/_dep/pyo3/struct.PyRef.html\" title=\"struct devela::_dep::pyo3::PyRef\">PyRef</a>&lt;'py, T&gt;, <a class=\"struct\" href=\"devela/_dep/pyo3/pycell/struct.PyBorrowError.html\" title=\"struct devela::_dep::pyo3::pycell::PyBorrowError\">PyBorrowError</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;PyRef&lt;&#39;py, T&gt;, PyBorrowError&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Attempts to immutably borrow the value <code>T</code>, returning an error if the value is currently mutably borrowed.</p>\n<p>The borrow lasts while the returned <a href=\"devela/_dep/pyo3/struct.PyRef.html\" title=\"struct devela::_dep::pyo3::PyRef\"><code>PyRef</code></a> exists.</p>\n<p>This is the non-panicking variant of <a href=\"#method.borrow\"><code>borrow</code></a>.</p>\n<p>For frozen classes, the simpler <a href=\"devela/_dep/pyo3/struct.Py.html#method.get\" title=\"method devela::_dep::pyo3::Py::get\"><code>get</code></a> is available.</p>\n<p>Equivalent to <code>self.bind(py).try_borrow()</code> - see <a href=\"devela/_dep/pyo3/struct.Bound.html#method.try_borrow\" title=\"method devela::_dep::pyo3::Bound::try_borrow\"><code>Bound::try_borrow</code></a>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_borrow_mut\" class=\"method\"><h4 class=\"code-header\">pub fn <a href=\"devela/_dep/pyo3/struct.Py.html#tymethod.try_borrow_mut\" class=\"fn\">try_borrow_mut</a>&lt;'py&gt;(\n    &amp;'py self,\n    py: <a class=\"struct\" href=\"devela/_dep/pyo3/struct.Python.html\" title=\"struct devela::_dep::pyo3::Python\">Python</a>&lt;'py&gt;,\n) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"struct\" href=\"devela/_dep/pyo3/struct.PyRefMut.html\" title=\"struct devela::_dep::pyo3::PyRefMut\">PyRefMut</a>&lt;'py, T&gt;, <a class=\"struct\" href=\"devela/_dep/pyo3/pycell/struct.PyBorrowMutError.html\" title=\"struct devela::_dep::pyo3::pycell::PyBorrowMutError\">PyBorrowMutError</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;PyRefMut&lt;&#39;py, T&gt;, PyBorrowMutError&gt;\">ⓘ</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"devela/_dep/pyo3/trait.PyClass.html\" title=\"trait devela::_dep::pyo3::PyClass\">PyClass</a>&lt;Frozen = False&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Attempts to mutably borrow the value <code>T</code>, returning an error if the value is currently borrowed.</p>\n<p>The borrow lasts while the returned <a href=\"devela/_dep/pyo3/struct.PyRefMut.html\" title=\"struct devela::_dep::pyo3::PyRefMut\"><code>PyRefMut</code></a> exists.</p>\n<p>This is the non-panicking variant of <a href=\"#method.borrow_mut\"><code>borrow_mut</code></a>.</p>\n<p>Equivalent to <code>self.bind(py).try_borrow_mut()</code> - see <a href=\"devela/_dep/pyo3/struct.Bound.html#method.try_borrow_mut\" title=\"method devela::_dep::pyo3::Bound::try_borrow_mut\"><code>Bound::try_borrow_mut</code></a>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get\" class=\"method\"><h4 class=\"code-header\">pub fn <a href=\"devela/_dep/pyo3/struct.Py.html#tymethod.get\" class=\"fn\">get</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;T</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"devela/_dep/pyo3/trait.PyClass.html\" title=\"trait devela::_dep::pyo3::PyClass\">PyClass</a>&lt;Frozen = True&gt; + <a class=\"trait\" href=\"devela/all/trait.Sync.html\" title=\"trait devela::all::Sync\">Sync</a>,</div></h4></section></summary><div class=\"docblock\"><p>Provide an immutable borrow of the value <code>T</code> without acquiring the GIL.</p>\n<p>This is available if the class is [<code>frozen</code>][macro@crate::pyclass] and <a href=\"devela/all/trait.Sync.html\" title=\"trait devela::all::Sync\"><code>Sync</code></a>.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::sync::atomic::{AtomicUsize, Ordering};\n\n<span class=\"attr\">#[pyclass(frozen)]\n</span><span class=\"kw\">struct </span>FrozenCounter {\n    value: AtomicUsize,\n}\n\n<span class=\"kw\">let </span>cell  = Python::with_gil(|py| {\n    <span class=\"kw\">let </span>counter = FrozenCounter { value: AtomicUsize::new(<span class=\"number\">0</span>) };\n\n    Py::new(py, counter).unwrap()\n});\n\ncell.get().value.fetch_add(<span class=\"number\">1</span>, Ordering::Relaxed);</code></pre></div>\n</div></details></div></details>",0,"devela::_dep::pyo3::PyObject"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Py%3CT%3E\" class=\"impl\"><a href=\"#impl-Py%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"struct\" href=\"devela/_dep/pyo3/struct.Py.html\" title=\"struct devela::_dep::pyo3::Py\">Py</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"devela/_dep/pyo3/trait.PyClass.html\" title=\"trait devela::_dep::pyo3::PyClass\">PyClass</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.new\" class=\"method\"><h4 class=\"code-header\">pub fn <a href=\"devela/_dep/pyo3/struct.Py.html#tymethod.new\" class=\"fn\">new</a>(\n    py: <a class=\"struct\" href=\"devela/_dep/pyo3/struct.Python.html\" title=\"struct devela::_dep::pyo3::Python\">Python</a>&lt;'_&gt;,\n    value: impl <a class=\"trait\" href=\"devela/code/trait.Into.html\" title=\"trait devela::code::Into\">Into</a>&lt;<a class=\"struct\" href=\"devela/_dep/pyo3/struct.PyClassInitializer.html\" title=\"struct devela::_dep::pyo3::PyClassInitializer\">PyClassInitializer</a>&lt;T&gt;&gt;,\n) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"struct\" href=\"devela/_dep/pyo3/struct.Py.html\" title=\"struct devela::_dep::pyo3::Py\">Py</a>&lt;T&gt;, <a class=\"struct\" href=\"devela/_dep/pyo3/struct.PyErr.html\" title=\"struct devela::_dep::pyo3::PyErr\">PyErr</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;Py&lt;T&gt;, PyErr&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Creates a new instance <code>Py&lt;T&gt;</code> of a <code>#[pyclass]</code> on the Python heap.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>pyo3::prelude::<span class=\"kw-2\">*</span>;\n\n<span class=\"attr\">#[pyclass]\n</span><span class=\"kw\">struct </span>Foo {<span class=\"comment\">/* fields omitted */</span>}\n\n<span class=\"kw\">let </span>foo = Python::with_gil(|py| -&gt; PyResult&lt;<span class=\"kw\">_</span>&gt; {\n    <span class=\"kw\">let </span>foo: Py&lt;Foo&gt; = Py::new(py, Foo {})<span class=\"question-mark\">?</span>;\n    <span class=\"prelude-val\">Ok</span>(foo)\n})<span class=\"question-mark\">?</span>;</code></pre></div>\n</div></details></div></details>",0,"devela::_dep::pyo3::PyObject"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Serialize-for-Py%3CT%3E\" class=\"impl\"><a href=\"#impl-Serialize-for-Py%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"devela/_dep/serde/trait.Serialize.html\" title=\"trait devela::_dep::serde::Serialize\">Serialize</a> for <a class=\"struct\" href=\"devela/_dep/pyo3/struct.Py.html\" title=\"struct devela::_dep::pyo3::Py\">Py</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"devela/_dep/serde/trait.Serialize.html\" title=\"trait devela::_dep::serde::Serialize\">Serialize</a> + <a class=\"trait\" href=\"devela/_dep/pyo3/trait.PyClass.html\" title=\"trait devela::_dep::pyo3::PyClass\">PyClass</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.serialize\" class=\"method trait-impl\"><a href=\"#method.serialize\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/_dep/serde/trait.Serialize.html#tymethod.serialize\" class=\"fn\">serialize</a>&lt;S&gt;(\n    &amp;self,\n    serializer: S,\n) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;&lt;S as <a class=\"trait\" href=\"devela/_dep/serde/trait.Serializer.html\" title=\"trait devela::_dep::serde::Serializer\">Serializer</a>&gt;::<a class=\"associatedtype\" href=\"devela/_dep/serde/trait.Serializer.html#associatedtype.Ok\" title=\"type devela::_dep::serde::Serializer::Ok\">Ok</a>, &lt;S as <a class=\"trait\" href=\"devela/_dep/serde/trait.Serializer.html\" title=\"trait devela::_dep::serde::Serializer\">Serializer</a>&gt;::<a class=\"associatedtype\" href=\"devela/_dep/serde/trait.Serializer.html#associatedtype.Error\" title=\"type devela::_dep::serde::Serializer::Error\">Error</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;&lt;S as Serializer&gt;::Ok, &lt;S as Serializer&gt;::Error&gt;\">ⓘ</a><div class=\"where\">where\n    S: <a class=\"trait\" href=\"devela/_dep/serde/trait.Serializer.html\" title=\"trait devela::_dep::serde::Serializer\">Serializer</a>,</div></h4></section></summary><div class='docblock'>Serialize this value into the given Serde serializer. <a href=\"devela/_dep/serde/trait.Serialize.html#tymethod.serialize\">Read more</a></div></details></div></details>","Serialize","devela::_dep::pyo3::PyObject"],["<section id=\"impl-Send-for-Py%3CT%3E\" class=\"impl\"><a href=\"#impl-Send-for-Py%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"devela/all/trait.Send.html\" title=\"trait devela::all::Send\">Send</a> for <a class=\"struct\" href=\"devela/_dep/pyo3/struct.Py.html\" title=\"struct devela::_dep::pyo3::Py\">Py</a>&lt;T&gt;</h3></section>","Send","devela::_dep::pyo3::PyObject"],["<section id=\"impl-Sync-for-Py%3CT%3E\" class=\"impl\"><a href=\"#impl-Sync-for-Py%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"devela/all/trait.Sync.html\" title=\"trait devela::all::Sync\">Sync</a> for <a class=\"struct\" href=\"devela/_dep/pyo3/struct.Py.html\" title=\"struct devela::_dep::pyo3::Py\">Py</a>&lt;T&gt;</h3></section>","Sync","devela::_dep::pyo3::PyObject"]]]]);
    if (window.register_type_impls) {
        window.register_type_impls(type_impls);
    } else {
        window.pending_type_impls = type_impls;
    }
})()
//{"start":55,"fragment_lengths":[84864]}