(function() {
    var type_impls = Object.fromEntries([["devela",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-Destaque%3CT,+CAP,+IDX,+S%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/devela/data/list/queue/destaque/impl_traits.rs.html#282-294\">Source</a><a href=\"#impl-Clone-for-Destaque%3CT,+CAP,+IDX,+S%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T: <a class=\"trait\" href=\"devela/code/trait.Clone.html\" title=\"trait devela::code::Clone\">Clone</a>, const CAP: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, IDX: <a class=\"trait\" href=\"devela/code/trait.Clone.html\" title=\"trait devela::code::Clone\">Clone</a>, S: <a class=\"trait\" href=\"devela/all/trait.Storage.html\" title=\"trait devela::all::Storage\">Storage</a>&gt; <a class=\"trait\" href=\"devela/code/trait.Clone.html\" title=\"trait devela::code::Clone\">Clone</a> for <a class=\"struct\" href=\"devela/all/struct.Destaque.html\" title=\"struct devela::all::Destaque\">Destaque</a>&lt;T, CAP, IDX, S&gt;<div class=\"where\">where\n    S::<a class=\"associatedtype\" href=\"devela/all/trait.Storage.html#associatedtype.Stored\" title=\"type devela::all::Storage::Stored\">Stored</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[T; CAP]</a>&gt;: <a class=\"trait\" href=\"devela/code/trait.Clone.html\" title=\"trait devela::code::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/data/list/queue/destaque/impl_traits.rs.html#286-293\">Source</a><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/code/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; Self</h4></section></summary><div class='docblock'>Returns a duplicate of the value. <a href=\"devela/code/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/clone.rs.html#246-248\">Source</a></span><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/code/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: &amp;Self)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a href=\"devela/code/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details>","Clone","devela::data::list::queue::destaque::definitions::DestaqueU8"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ConstDefault-for-Destaque%3CT,+CAP,+IDX%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/devela/data/list/queue/destaque/impl_traits.rs.html#353-364\">Source</a><a href=\"#impl-ConstDefault-for-Destaque%3CT,+CAP,+IDX%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T: <a class=\"trait\" href=\"devela/code/trait.ConstDefault.html\" title=\"trait devela::code::ConstDefault\">ConstDefault</a>, const CAP: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, IDX: <a class=\"trait\" href=\"devela/code/trait.ConstDefault.html\" title=\"trait devela::code::ConstDefault\">ConstDefault</a>&gt; <a class=\"trait\" href=\"devela/code/trait.ConstDefault.html\" title=\"trait devela::code::ConstDefault\">ConstDefault</a> for <a class=\"struct\" href=\"devela/all/struct.Destaque.html\" title=\"struct devela::all::Destaque\">Destaque</a>&lt;T, CAP, IDX, <a class=\"type\" href=\"devela/all/type.Bare.html\" title=\"type devela::all::Bare\">Bare</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedconstant.DEFAULT\" class=\"associatedconstant trait-impl\"><a class=\"src rightside\" href=\"src/devela/data/list/queue/destaque/impl_traits.rs.html#358-363\">Source</a><a href=\"#associatedconstant.DEFAULT\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a href=\"devela/code/trait.ConstDefault.html#associatedconstant.DEFAULT\" class=\"constant\">DEFAULT</a>: Self</h4></section></summary><div class=\"docblock\"><p>Returns an empty stack, allocated in the stack,\nusing the default value to fill the remaining free data.</p>\n</div></details></div></details>","ConstDefault","devela::data::list::queue::destaque::definitions::DestaqueU8"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-DataCollection-for-Destaque%3CT,+LEN,+u8,+S%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/devela/data/list/queue/destaque/impl_traits.rs.html#279\">Source</a><a href=\"#impl-DataCollection-for-Destaque%3CT,+LEN,+u8,+S%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, const LEN: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, S: <a class=\"trait\" href=\"devela/all/trait.Storage.html\" title=\"trait devela::all::Storage\">Storage</a>&gt; <a class=\"trait\" href=\"devela/data/trait.DataCollection.html\" title=\"trait devela::data::DataCollection\">DataCollection</a> for <a class=\"struct\" href=\"devela/all/struct.Destaque.html\" title=\"struct devela::all::Destaque\">Destaque</a>&lt;T, LEN, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>, S&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Element\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/devela/data/list/queue/destaque/impl_traits.rs.html#279\">Source</a><a href=\"#associatedtype.Element\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"devela/data/trait.DataCollection.html#associatedtype.Element\" class=\"associatedtype\">Element</a> = T</h4></section></summary><div class='docblock'>The element type of the collection.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.collection_capacity\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/data/list/queue/destaque/impl_traits.rs.html#279\">Source</a><a href=\"#method.collection_capacity\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/data/trait.DataCollection.html#method.collection_capacity\" class=\"fn\">collection_capacity</a>(&amp;self) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, <a class=\"enum\" href=\"devela/all/enum.NotAvailable.html\" title=\"enum devela::all::NotAvailable\">NotAvailable</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;usize, NotAvailable&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Returns the reserved capacity for elements in the collection.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.collection_len\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/data/list/queue/destaque/impl_traits.rs.html#279\">Source</a><a href=\"#method.collection_len\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/data/trait.DataCollection.html#method.collection_len\" class=\"fn\">collection_len</a>(&amp;self) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, <a class=\"enum\" href=\"devela/all/enum.NotAvailable.html\" title=\"enum devela::all::NotAvailable\">NotAvailable</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;usize, NotAvailable&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Returns the current number of elements in the collection.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.collection_is_empty\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/data/list/queue/destaque/impl_traits.rs.html#279\">Source</a><a href=\"#method.collection_is_empty\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/data/trait.DataCollection.html#method.collection_is_empty\" class=\"fn\">collection_is_empty</a>(&amp;self) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a>, <a class=\"enum\" href=\"devela/all/enum.NotAvailable.html\" title=\"enum devela::all::NotAvailable\">NotAvailable</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;bool, NotAvailable&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Returns <code>true</code> if the collection is empty, <code>false</code> if it’s not.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.collection_is_full\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/data/list/queue/destaque/impl_traits.rs.html#279\">Source</a><a href=\"#method.collection_is_full\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/data/trait.DataCollection.html#method.collection_is_full\" class=\"fn\">collection_is_full</a>(&amp;self) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a>, <a class=\"enum\" href=\"devela/all/enum.NotAvailable.html\" title=\"enum devela::all::NotAvailable\">NotAvailable</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;bool, NotAvailable&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Returns <code>true</code> if the collection is full, <code>false</code> if it’s not.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.collection_contains\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/data/list/queue/destaque/impl_traits.rs.html#279\">Source</a><a href=\"#method.collection_contains\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/data/trait.DataCollection.html#method.collection_contains\" class=\"fn\">collection_contains</a>(\n    &amp;self,\n    element: Self::<a class=\"associatedtype\" href=\"devela/data/trait.DataCollection.html#associatedtype.Element\" title=\"type devela::data::DataCollection::Element\">Element</a>,\n) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a>, <a class=\"enum\" href=\"devela/all/enum.NotAvailable.html\" title=\"enum devela::all::NotAvailable\">NotAvailable</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;bool, NotAvailable&gt;\">ⓘ</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"devela/all/trait.PartialEq.html\" title=\"trait devela::all::PartialEq\">PartialEq</a>,</div></h4></section></summary><div class='docblock'>Returns <code>true</code> if the collection contains the given <code>element</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.collection_count\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/data/list/queue/destaque/impl_traits.rs.html#279\">Source</a><a href=\"#method.collection_count\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/data/trait.DataCollection.html#method.collection_count\" class=\"fn\">collection_count</a>(\n    &amp;self,\n    element: &amp;Self::<a class=\"associatedtype\" href=\"devela/data/trait.DataCollection.html#associatedtype.Element\" title=\"type devela::data::DataCollection::Element\">Element</a>,\n) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, <a class=\"enum\" href=\"devela/all/enum.NotAvailable.html\" title=\"enum devela::all::NotAvailable\">NotAvailable</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;usize, NotAvailable&gt;\">ⓘ</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"devela/all/trait.PartialEq.html\" title=\"trait devela::all::PartialEq\">PartialEq</a>,</div></h4></section></summary><div class='docblock'>Counts the number of times a given <code>element</code> appears in the collection.</div></details></div></details>","DataCollection","devela::data::list::queue::destaque::definitions::DestaqueU8"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-DataDeque-for-Destaque%3CT,+CAP,+u8,+S%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/devela/data/list/queue/destaque/impl_traits.rs.html#279\">Source</a><a href=\"#impl-DataDeque-for-Destaque%3CT,+CAP,+u8,+S%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, const CAP: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, S: <a class=\"trait\" href=\"devela/all/trait.Storage.html\" title=\"trait devela::all::Storage\">Storage</a>&gt; <a class=\"trait\" href=\"devela/all/trait.DataDeque.html\" title=\"trait devela::all::DataDeque\">DataDeque</a> for <a class=\"struct\" href=\"devela/all/struct.Destaque.html\" title=\"struct devela::all::Destaque\">Destaque</a>&lt;T, CAP, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>, S&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.queue_pop_back\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/data/list/queue/destaque/impl_traits.rs.html#279\">Source</a><a href=\"#method.queue_pop_back\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.DataDeque.html#tymethod.queue_pop_back\" class=\"fn\">queue_pop_back</a>(\n    &amp;mut self,\n) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;&lt;Self as <a class=\"trait\" href=\"devela/data/trait.DataCollection.html\" title=\"trait devela::data::DataCollection\">DataCollection</a>&gt;::<a class=\"associatedtype\" href=\"devela/data/trait.DataCollection.html#associatedtype.Element\" title=\"type devela::data::DataCollection::Element\">Element</a>, <a class=\"struct\" href=\"devela/all/struct.NotEnoughElements.html\" title=\"struct devela::all::NotEnoughElements\">NotEnoughElements</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;&lt;Self as DataCollection&gt;::Element, NotEnoughElements&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Remove an element from the back of the queue. <a href=\"devela/all/trait.DataDeque.html#tymethod.queue_pop_back\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.queue_push_front\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/data/list/queue/destaque/impl_traits.rs.html#279\">Source</a><a href=\"#method.queue_push_front\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.DataDeque.html#tymethod.queue_push_front\" class=\"fn\">queue_push_front</a>(\n    &amp;mut self,\n    element: &lt;Self as <a class=\"trait\" href=\"devela/data/trait.DataCollection.html\" title=\"trait devela::data::DataCollection\">DataCollection</a>&gt;::<a class=\"associatedtype\" href=\"devela/data/trait.DataCollection.html#associatedtype.Element\" title=\"type devela::data::DataCollection::Element\">Element</a>,\n) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"devela/all/struct.NotEnoughSpace.html\" title=\"struct devela::all::NotEnoughSpace\">NotEnoughSpace</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;(), NotEnoughSpace&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Add an element to the front of the queue. <a href=\"devela/all/trait.DataDeque.html#tymethod.queue_push_front\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.queue_pop_front\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/data/list/queue/adt.rs.html#46-48\">Source</a><a href=\"#method.queue_pop_front\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.DataDeque.html#method.queue_pop_front\" class=\"fn\">queue_pop_front</a>(\n    &amp;mut self,\n) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;&lt;Self as <a class=\"trait\" href=\"devela/data/trait.DataCollection.html\" title=\"trait devela::data::DataCollection\">DataCollection</a>&gt;::<a class=\"associatedtype\" href=\"devela/data/trait.DataCollection.html#associatedtype.Element\" title=\"type devela::data::DataCollection::Element\">Element</a>, <a class=\"struct\" href=\"devela/all/struct.NotEnoughElements.html\" title=\"struct devela::all::NotEnoughElements\">NotEnoughElements</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;&lt;Self as DataCollection&gt;::Element, NotEnoughElements&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Remove an element from the front of the queue (calls <a href=\"devela/all/trait.DataQueue.html#tymethod.queue_pop\" title=\"method devela::all::DataQueue::queue_pop\"><code>queue_pop</code></a>). <a href=\"devela/all/trait.DataDeque.html#method.queue_pop_front\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.queue_push_back\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/data/list/queue/adt.rs.html#52-57\">Source</a><a href=\"#method.queue_push_back\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.DataDeque.html#method.queue_push_back\" class=\"fn\">queue_push_back</a>(\n    &amp;mut self,\n    element: &lt;Self as <a class=\"trait\" href=\"devela/data/trait.DataCollection.html\" title=\"trait devela::data::DataCollection\">DataCollection</a>&gt;::<a class=\"associatedtype\" href=\"devela/data/trait.DataCollection.html#associatedtype.Element\" title=\"type devela::data::DataCollection::Element\">Element</a>,\n) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"devela/all/struct.NotEnoughSpace.html\" title=\"struct devela::all::NotEnoughSpace\">NotEnoughSpace</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;(), NotEnoughSpace&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Remove an element from the back of the queue (calls <a href=\"devela/all/trait.DataQueue.html#tymethod.queue_push\" title=\"method devela::all::DataQueue::queue_push\"><code>queue_push</code></a>). <a href=\"devela/all/trait.DataDeque.html#method.queue_push_back\">Read more</a></div></details></div></details>","DataDeque","devela::data::list::queue::destaque::definitions::DestaqueU8"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-DataDesta-for-Destaque%3CT,+CAP,+u8,+S%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/devela/data/list/queue/destaque/impl_traits.rs.html#279\">Source</a><a href=\"#impl-DataDesta-for-Destaque%3CT,+CAP,+u8,+S%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, const CAP: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, S: <a class=\"trait\" href=\"devela/all/trait.Storage.html\" title=\"trait devela::all::Storage\">Storage</a>&gt; <a class=\"trait\" href=\"devela/all/trait.DataDesta.html\" title=\"trait devela::all::DataDesta\">DataDesta</a> for <a class=\"struct\" href=\"devela/all/struct.Destaque.html\" title=\"struct devela::all::Destaque\">Destaque</a>&lt;T, CAP, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>, S&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.stack_pop_front\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/data/list/queue/destaque/impl_traits.rs.html#279\">Source</a><a href=\"#method.stack_pop_front\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.DataDesta.html#tymethod.stack_pop_front\" class=\"fn\">stack_pop_front</a>(\n    &amp;mut self,\n) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;&lt;Self as <a class=\"trait\" href=\"devela/data/trait.DataCollection.html\" title=\"trait devela::data::DataCollection\">DataCollection</a>&gt;::<a class=\"associatedtype\" href=\"devela/data/trait.DataCollection.html#associatedtype.Element\" title=\"type devela::data::DataCollection::Element\">Element</a>, <a class=\"struct\" href=\"devela/all/struct.NotEnoughElements.html\" title=\"struct devela::all::NotEnoughElements\">NotEnoughElements</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;&lt;Self as DataCollection&gt;::Element, NotEnoughElements&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Remove an element from the front of the stack.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.stack_push_front\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/data/list/queue/destaque/impl_traits.rs.html#279\">Source</a><a href=\"#method.stack_push_front\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.DataDesta.html#tymethod.stack_push_front\" class=\"fn\">stack_push_front</a>(\n    &amp;mut self,\n    element: &lt;Self as <a class=\"trait\" href=\"devela/data/trait.DataCollection.html\" title=\"trait devela::data::DataCollection\">DataCollection</a>&gt;::<a class=\"associatedtype\" href=\"devela/data/trait.DataCollection.html#associatedtype.Element\" title=\"type devela::data::DataCollection::Element\">Element</a>,\n) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"devela/all/struct.NotEnoughSpace.html\" title=\"struct devela::all::NotEnoughSpace\">NotEnoughSpace</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;(), NotEnoughSpace&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Add an element to the front of the stack.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.stack_pop_back\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/data/list/stack/adt.rs.html#38-40\">Source</a><a href=\"#method.stack_pop_back\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.DataDesta.html#method.stack_pop_back\" class=\"fn\">stack_pop_back</a>(\n    &amp;mut self,\n) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;&lt;Self as <a class=\"trait\" href=\"devela/data/trait.DataCollection.html\" title=\"trait devela::data::DataCollection\">DataCollection</a>&gt;::<a class=\"associatedtype\" href=\"devela/data/trait.DataCollection.html#associatedtype.Element\" title=\"type devela::data::DataCollection::Element\">Element</a>, <a class=\"struct\" href=\"devela/all/struct.NotEnoughElements.html\" title=\"struct devela::all::NotEnoughElements\">NotEnoughElements</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;&lt;Self as DataCollection&gt;::Element, NotEnoughElements&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Remove an element from the back of the stack (calls <a href=\"devela/all/trait.DataStack.html#tymethod.stack_pop\" title=\"method devela::all::DataStack::stack_pop\"><code>DataStack::stack_pop</code></a>).</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.stack_push_back\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/data/list/stack/adt.rs.html#43-48\">Source</a><a href=\"#method.stack_push_back\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.DataDesta.html#method.stack_push_back\" class=\"fn\">stack_push_back</a>(\n    &amp;mut self,\n    element: &lt;Self as <a class=\"trait\" href=\"devela/data/trait.DataCollection.html\" title=\"trait devela::data::DataCollection\">DataCollection</a>&gt;::<a class=\"associatedtype\" href=\"devela/data/trait.DataCollection.html#associatedtype.Element\" title=\"type devela::data::DataCollection::Element\">Element</a>,\n) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"devela/all/struct.NotEnoughSpace.html\" title=\"struct devela::all::NotEnoughSpace\">NotEnoughSpace</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;(), NotEnoughSpace&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Remove an element from the back of the stack (calls <a href=\"devela/all/trait.DataStack.html#tymethod.stack_push\" title=\"method devela::all::DataStack::stack_push\"><code>DataStack::stack_push</code></a>).</div></details></div></details>","DataDesta","devela::data::list::queue::destaque::definitions::DestaqueU8"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-DataQueue-for-Destaque%3CT,+CAP,+u8,+S%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/devela/data/list/queue/destaque/impl_traits.rs.html#279\">Source</a><a href=\"#impl-DataQueue-for-Destaque%3CT,+CAP,+u8,+S%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, const CAP: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, S: <a class=\"trait\" href=\"devela/all/trait.Storage.html\" title=\"trait devela::all::Storage\">Storage</a>&gt; <a class=\"trait\" href=\"devela/all/trait.DataQueue.html\" title=\"trait devela::all::DataQueue\">DataQueue</a> for <a class=\"struct\" href=\"devela/all/struct.Destaque.html\" title=\"struct devela::all::Destaque\">Destaque</a>&lt;T, CAP, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>, S&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.queue_pop\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/data/list/queue/destaque/impl_traits.rs.html#279\">Source</a><a href=\"#method.queue_pop\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.DataQueue.html#tymethod.queue_pop\" class=\"fn\">queue_pop</a>(\n    &amp;mut self,\n) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;&lt;Self as <a class=\"trait\" href=\"devela/data/trait.DataCollection.html\" title=\"trait devela::data::DataCollection\">DataCollection</a>&gt;::<a class=\"associatedtype\" href=\"devela/data/trait.DataCollection.html#associatedtype.Element\" title=\"type devela::data::DataCollection::Element\">Element</a>, <a class=\"struct\" href=\"devela/all/struct.NotEnoughElements.html\" title=\"struct devela::all::NotEnoughElements\">NotEnoughElements</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;&lt;Self as DataCollection&gt;::Element, NotEnoughElements&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Remove an element from the (front of the) queue. <a href=\"devela/all/trait.DataQueue.html#tymethod.queue_pop\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.queue_push\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/data/list/queue/destaque/impl_traits.rs.html#279\">Source</a><a href=\"#method.queue_push\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.DataQueue.html#tymethod.queue_push\" class=\"fn\">queue_push</a>(\n    &amp;mut self,\n    element: &lt;Self as <a class=\"trait\" href=\"devela/data/trait.DataCollection.html\" title=\"trait devela::data::DataCollection\">DataCollection</a>&gt;::<a class=\"associatedtype\" href=\"devela/data/trait.DataCollection.html#associatedtype.Element\" title=\"type devela::data::DataCollection::Element\">Element</a>,\n) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"devela/all/struct.NotEnoughSpace.html\" title=\"struct devela::all::NotEnoughSpace\">NotEnoughSpace</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;(), NotEnoughSpace&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Add an element to the (back of the) queue. <a href=\"devela/all/trait.DataQueue.html#tymethod.queue_push\">Read more</a></div></details></div></details>","DataQueue","devela::data::list::queue::destaque::definitions::DestaqueU8"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-DataStack-for-Destaque%3CT,+CAP,+u8,+S%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/devela/data/list/queue/destaque/impl_traits.rs.html#279\">Source</a><a href=\"#impl-DataStack-for-Destaque%3CT,+CAP,+u8,+S%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, const CAP: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, S: <a class=\"trait\" href=\"devela/all/trait.Storage.html\" title=\"trait devela::all::Storage\">Storage</a>&gt; <a class=\"trait\" href=\"devela/all/trait.DataStack.html\" title=\"trait devela::all::DataStack\">DataStack</a> for <a class=\"struct\" href=\"devela/all/struct.Destaque.html\" title=\"struct devela::all::Destaque\">Destaque</a>&lt;T, CAP, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>, S&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.stack_pop\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/data/list/queue/destaque/impl_traits.rs.html#279\">Source</a><a href=\"#method.stack_pop\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.DataStack.html#tymethod.stack_pop\" class=\"fn\">stack_pop</a>(\n    &amp;mut self,\n) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;&lt;Self as <a class=\"trait\" href=\"devela/data/trait.DataCollection.html\" title=\"trait devela::data::DataCollection\">DataCollection</a>&gt;::<a class=\"associatedtype\" href=\"devela/data/trait.DataCollection.html#associatedtype.Element\" title=\"type devela::data::DataCollection::Element\">Element</a>, <a class=\"struct\" href=\"devela/all/struct.NotEnoughElements.html\" title=\"struct devela::all::NotEnoughElements\">NotEnoughElements</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;&lt;Self as DataCollection&gt;::Element, NotEnoughElements&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Remove an element from the (back of the) stack.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.stack_push\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/data/list/queue/destaque/impl_traits.rs.html#279\">Source</a><a href=\"#method.stack_push\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.DataStack.html#tymethod.stack_push\" class=\"fn\">stack_push</a>(\n    &amp;mut self,\n    element: &lt;Self as <a class=\"trait\" href=\"devela/data/trait.DataCollection.html\" title=\"trait devela::data::DataCollection\">DataCollection</a>&gt;::<a class=\"associatedtype\" href=\"devela/data/trait.DataCollection.html#associatedtype.Element\" title=\"type devela::data::DataCollection::Element\">Element</a>,\n) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"devela/all/struct.NotEnoughSpace.html\" title=\"struct devela::all::NotEnoughSpace\">NotEnoughSpace</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;(), NotEnoughSpace&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Add an element to the (back of the) stack.</div></details></div></details>","DataStack","devela::data::list::queue::destaque::definitions::DestaqueU8"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-Destaque%3CT,+CAP,+IDX,+S%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/devela/data/list/queue/destaque/impl_traits.rs.html#303-317\">Source</a><a href=\"#impl-Debug-for-Destaque%3CT,+CAP,+IDX,+S%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T: <a class=\"trait\" href=\"devela/all/trait.Debug.html\" title=\"trait devela::all::Debug\">Debug</a>, const CAP: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, IDX: <a class=\"trait\" href=\"devela/all/trait.Debug.html\" title=\"trait devela::all::Debug\">Debug</a>, S: <a class=\"trait\" href=\"devela/all/trait.Storage.html\" title=\"trait devela::all::Storage\">Storage</a>&gt; <a class=\"trait\" href=\"devela/all/trait.Debug.html\" title=\"trait devela::all::Debug\">Debug</a> for <a class=\"struct\" href=\"devela/all/struct.Destaque.html\" title=\"struct devela::all::Destaque\">Destaque</a>&lt;T, CAP, IDX, S&gt;<div class=\"where\">where\n    S::<a class=\"associatedtype\" href=\"devela/all/trait.Storage.html#associatedtype.Stored\" title=\"type devela::all::Storage::Stored\">Stored</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[T; CAP]</a>&gt;: <a class=\"trait\" href=\"devela/all/trait.Debug.html\" title=\"trait devela::all::Debug\">Debug</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/data/list/queue/destaque/impl_traits.rs.html#308-316\">Source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"devela/all/struct.Formatter.html\" title=\"struct devela::all::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"type\" href=\"devela/_core/fmt/type.Result.html\" title=\"type devela::_core::fmt::Result\">Result</a></h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"devela/all/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","devela::data::list::queue::destaque::definitions::DestaqueU8"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Default-for-Destaque%3CT,+CAP,+IDX%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/devela/data/list/queue/destaque/impl_traits.rs.html#339-350\">Source</a><a href=\"#impl-Default-for-Destaque%3CT,+CAP,+IDX%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T: <a class=\"trait\" href=\"devela/code/trait.Default.html\" title=\"trait devela::code::Default\">Default</a>, const CAP: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, IDX: <a class=\"trait\" href=\"devela/code/trait.Default.html\" title=\"trait devela::code::Default\">Default</a>&gt; <a class=\"trait\" href=\"devela/code/trait.Default.html\" title=\"trait devela::code::Default\">Default</a> for <a class=\"struct\" href=\"devela/all/struct.Destaque.html\" title=\"struct devela::all::Destaque\">Destaque</a>&lt;T, CAP, IDX, <a class=\"type\" href=\"devela/all/type.Bare.html\" title=\"type devela::all::Bare\">Bare</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.default\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/data/list/queue/destaque/impl_traits.rs.html#342-349\">Source</a><a href=\"#method.default\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/code/trait.Default.html#tymethod.default\" class=\"fn\">default</a>() -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Returns an empty queue, allocated in the stack,\nusing the default value to fill the remaining free data.</p>\n</div></details></div></details>","Default","devela::data::list::queue::destaque::definitions::DestaqueU8"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Default-for-Destaque%3CT,+CAP,+IDX,+Boxed%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/devela/data/list/queue/destaque/impl_traits.rs.html#368-384\">Source</a><a href=\"#impl-Default-for-Destaque%3CT,+CAP,+IDX,+Boxed%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T: <a class=\"trait\" href=\"devela/code/trait.Default.html\" title=\"trait devela::code::Default\">Default</a>, const CAP: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, IDX: <a class=\"trait\" href=\"devela/code/trait.Default.html\" title=\"trait devela::code::Default\">Default</a>&gt; <a class=\"trait\" href=\"devela/code/trait.Default.html\" title=\"trait devela::code::Default\">Default</a> for <a class=\"struct\" href=\"devela/all/struct.Destaque.html\" title=\"struct devela::all::Destaque\">Destaque</a>&lt;T, CAP, IDX, <a class=\"struct\" href=\"devela/all/struct.Boxed.html\" title=\"struct devela::all::Boxed\">Boxed</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.default\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/data/list/queue/destaque/impl_traits.rs.html#376-383\">Source</a><a href=\"#method.default\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/code/trait.Default.html#tymethod.default\" class=\"fn\">default</a>() -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Returns an empty queue, allocated in the heap,\nusing the default value to fill the remaining free data.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>q = DestaqueU8::&lt;i32, <span class=\"number\">100</span>, Boxed&gt;::default();</code></pre></div>\n</div></details></div></details>","Default","devela::data::list::queue::destaque::definitions::DestaqueU8"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Destaque%3CT,+CAP,+u8%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/devela/data/list/queue/destaque/methods/general.rs.html#1740\">Source</a><a href=\"#impl-Destaque%3CT,+CAP,+u8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, const CAP: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt; <a class=\"struct\" href=\"devela/all/struct.Destaque.html\" title=\"struct devela::all::Destaque\">Destaque</a>&lt;T, CAP, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>, <a class=\"type\" href=\"devela/all/type.Bare.html\" title=\"type devela::all::Bare\">Bare</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_array_copy\" class=\"method\"><a class=\"src rightside\" href=\"src/devela/data/list/queue/destaque/methods/general.rs.html#1740\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"devela/all/struct.Destaque.html#tymethod.from_array_copy\" class=\"fn\">from_array_copy</a>(arr: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[T; CAP]</a>) -&gt; <a class=\"struct\" href=\"devela/all/struct.Destaque.html\" title=\"struct devela::all::Destaque\">Destaque</a>&lt;T, CAP, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>, <a class=\"type\" href=\"devela/all/type.Bare.html\" title=\"type devela::all::Bare\">Bare</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Converts an array into a <a href=\"devela/all/struct.Destaque.html#method.is_full\" title=\"method devela::all::Destaque::is_full\"><code>full</code></a> destaque.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>q = DestaqueU8::&lt;<span class=\"kw\">_</span>, <span class=\"number\">3</span>&gt;::from_array([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);</code></pre></div>\n</div></details></div></details>",0,"devela::data::list::queue::destaque::definitions::DestaqueU8"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Destaque%3CT,+CAP,+u8%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/devela/data/list/queue/destaque/methods/general.rs.html#1740\">Source</a><a href=\"#impl-Destaque%3CT,+CAP,+u8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T: <a class=\"trait\" href=\"devela/all/trait.Copy.html\" title=\"trait devela::all::Copy\">Copy</a>, const CAP: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt; <a class=\"struct\" href=\"devela/all/struct.Destaque.html\" title=\"struct devela::all::Destaque\">Destaque</a>&lt;T, CAP, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>, <a class=\"type\" href=\"devela/all/type.Bare.html\" title=\"type devela::all::Bare\">Bare</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.new_copied\" class=\"method\"><a class=\"src rightside\" href=\"src/devela/data/list/queue/destaque/methods/general.rs.html#1740\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"devela/all/struct.Destaque.html#tymethod.new_copied\" class=\"fn\">new_copied</a>(element: T) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;Self, <a class=\"struct\" href=\"devela/all/struct.MismatchedCapacity.html\" title=\"struct devela::all::MismatchedCapacity\">MismatchedCapacity</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;Self, MismatchedCapacity&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Returns an empty destaque, allocated in the stack,\ncopying <code>element</code> to fill the remaining free data, in compile-time.</p>\n<h5 id=\"errors\"><a class=\"doc-anchor\" href=\"#errors\">§</a>Errors</h5>\n<p>Returns <a href=\"devela/all/struct.MismatchedCapacity.html\" title=\"struct devela::all::MismatchedCapacity\"><code>MismatchedCapacity</code></a> if <code>CAP &gt; </code><a href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html#associatedconstant.MAX\" title=\"associated constant u8::MAX\"><code>u8::MAX</code></a>\nor if <code>CAP &gt; isize::MAX / size_of::&lt;T&gt;()</code>.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">const </span>S: DestaqueU8&lt;i32, <span class=\"number\">16</span>&gt; = <span class=\"macro\">unwrap!</span>[ok DestaqueU8::new_copied(<span class=\"number\">0</span>)];</code></pre></div>\n</div></details></div></details>",0,"devela::data::list::queue::destaque::definitions::DestaqueU8"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Destaque%3CT,+CAP,+u8%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/devela/data/list/queue/destaque/methods/general.rs.html#1740\">Source</a><a href=\"#impl-Destaque%3CT,+CAP,+u8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T: <a class=\"trait\" href=\"devela/code/trait.Clone.html\" title=\"trait devela::code::Clone\">Clone</a>, const CAP: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt; <a class=\"struct\" href=\"devela/all/struct.Destaque.html\" title=\"struct devela::all::Destaque\">Destaque</a>&lt;T, CAP, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>, <a class=\"type\" href=\"devela/all/type.Bare.html\" title=\"type devela::all::Bare\">Bare</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.new\" class=\"method\"><a class=\"src rightside\" href=\"src/devela/data/list/queue/destaque/methods/general.rs.html#1740\">Source</a><h4 class=\"code-header\">pub fn <a href=\"devela/all/struct.Destaque.html#tymethod.new\" class=\"fn\">new</a>(element: T) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;Self, <a class=\"struct\" href=\"devela/all/struct.MismatchedCapacity.html\" title=\"struct devela::all::MismatchedCapacity\">MismatchedCapacity</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;Self, MismatchedCapacity&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Returns an empty destaque, allocated in the stack,\ncloning <code>element</code> to fill the remaining free data.</p>\n<h5 id=\"errors\"><a class=\"doc-anchor\" href=\"#errors\">§</a>Errors</h5>\n<p>Returns <a href=\"devela/all/struct.MismatchedCapacity.html\" title=\"struct devela::all::MismatchedCapacity\"><code>MismatchedCapacity</code></a> if <code>CAP &gt; </code><a href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html#associatedconstant.MAX\" title=\"associated constant u8::MAX\"><code>u8::MAX</code></a>\nor if <code>CAP &gt; isize::MAX / size_of::&lt;T&gt;()</code>.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>q = DestaqueU8::&lt;<span class=\"kw\">_</span>, <span class=\"number\">16</span>&gt;::new(<span class=\"number\">0</span>).unwrap();</code></pre></div>\n</div></details></div></details>",0,"devela::data::list::queue::destaque::definitions::DestaqueU8"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Destaque%3CT,+CAP,+u8,+Boxed%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/devela/data/list/queue/destaque/methods/general.rs.html#1740\">Source</a><a href=\"#impl-Destaque%3CT,+CAP,+u8,+Boxed%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T: <a class=\"trait\" href=\"devela/code/trait.Clone.html\" title=\"trait devela::code::Clone\">Clone</a>, const CAP: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt; <a class=\"struct\" href=\"devela/all/struct.Destaque.html\" title=\"struct devela::all::Destaque\">Destaque</a>&lt;T, CAP, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>, <a class=\"struct\" href=\"devela/all/struct.Boxed.html\" title=\"struct devela::all::Boxed\">Boxed</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.new\" class=\"method\"><a class=\"src rightside\" href=\"src/devela/data/list/queue/destaque/methods/general.rs.html#1740\">Source</a><h4 class=\"code-header\">pub fn <a href=\"devela/all/struct.Destaque.html#tymethod.new\" class=\"fn\">new</a>(element: T) -&gt; Self</h4></section><span class=\"item-info\"><div class=\"stab portability\">Available on <strong>crate feature <code>alloc</code></strong> only.</div></span></summary><div class=\"docblock\"><p>Returns an empty destaque, allocated in the heap,\ncloning <code>element</code> to fill the remaining free data.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>q = DestaqueU8::&lt;<span class=\"kw\">_</span>, <span class=\"number\">3</span>, Boxed&gt;::new(<span class=\"number\">0</span>);</code></pre></div>\n</div></details></div></details>",0,"devela::data::list::queue::destaque::definitions::DestaqueU8"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Destaque%3CT,+CAP,+u8,+S%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/devela/data/list/queue/destaque/methods/general.rs.html#1740\">Source</a><a href=\"#impl-Destaque%3CT,+CAP,+u8,+S%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, const CAP: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, S: <a class=\"trait\" href=\"devela/all/trait.Storage.html\" title=\"trait devela::all::Storage\">Storage</a>&gt; <a class=\"struct\" href=\"devela/all/struct.Destaque.html\" title=\"struct devela::all::Destaque\">Destaque</a>&lt;T, CAP, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>, S&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_array\" class=\"method\"><a class=\"src rightside\" href=\"src/devela/data/list/queue/destaque/methods/general.rs.html#1740\">Source</a><h4 class=\"code-header\">pub fn <a href=\"devela/all/struct.Destaque.html#tymethod.from_array\" class=\"fn\">from_array</a>(arr: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[T; CAP]</a>) -&gt; <a class=\"struct\" href=\"devela/all/struct.Destaque.html\" title=\"struct devela::all::Destaque\">Destaque</a>&lt;T, CAP, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>, S&gt;</h4></section></summary><div class=\"docblock\"><p>Converts an array into a <a href=\"devela/all/struct.Destaque.html#method.is_full\" title=\"method devela::all::Destaque::is_full\"><code>full</code></a> destaque.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>q = DestaqueU8::&lt;<span class=\"kw\">_</span>, <span class=\"number\">3</span>&gt;::from_array([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.len\" class=\"method\"><a class=\"src rightside\" href=\"src/devela/data/list/queue/destaque/methods/general.rs.html#1740\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"devela/all/struct.Destaque.html#tymethod.len\" class=\"fn\">len</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a></h4></section></summary><div class=\"docblock\"><p>Returns the number of destaqued elements.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_empty\" class=\"method\"><a class=\"src rightside\" href=\"src/devela/data/list/queue/destaque/methods/general.rs.html#1740\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"devela/all/struct.Destaque.html#tymethod.is_empty\" class=\"fn\">is_empty</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if the destaque is empty.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>q = DestaqueU8::&lt;i32, <span class=\"number\">8</span>&gt;::default();\n<span class=\"macro\">assert!</span>[q.is_empty()];</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_full\" class=\"method\"><a class=\"src rightside\" href=\"src/devela/data/list/queue/destaque/methods/general.rs.html#1740\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"devela/all/struct.Destaque.html#tymethod.is_full\" class=\"fn\">is_full</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if the destaque is full.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>q = DestaqueU8::&lt;<span class=\"kw\">_</span>, <span class=\"number\">3</span>&gt;::from([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);\n<span class=\"macro\">assert!</span>[q.is_full()];</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.capacity\" class=\"method\"><a class=\"src rightside\" href=\"src/devela/data/list/queue/destaque/methods/general.rs.html#1740\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"devela/all/struct.Destaque.html#tymethod.capacity\" class=\"fn\">capacity</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a></h4></section></summary><div class=\"docblock\"><p>Returns the destaque’s total capacity.</p>\n<h5 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>q = DestaqueU8::&lt;i32, <span class=\"number\">3</span>&gt;::default();\n<span class=\"macro\">assert_eq!</span>[<span class=\"number\">3</span>, q.capacity()];</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.remaining_capacity\" class=\"method\"><a class=\"src rightside\" href=\"src/devela/data/list/queue/destaque/methods/general.rs.html#1740\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"devela/all/struct.Destaque.html#tymethod.remaining_capacity\" class=\"fn\">remaining_capacity</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a></h4></section></summary><div class=\"docblock\"><p>Returns the destaque’s remaining capacity.</p>\n<h5 id=\"examples-4\"><a class=\"doc-anchor\" href=\"#examples-4\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>q = DestaqueU8::&lt;i32, <span class=\"number\">3</span>&gt;::default();\n<span class=\"macro\">assert_eq!</span>[<span class=\"number\">3</span>, q.remaining_capacity()];\nq.push_back(<span class=\"number\">1</span>)<span class=\"question-mark\">?</span>;\n<span class=\"macro\">assert_eq!</span>[<span class=\"number\">2</span>, q.remaining_capacity()];</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_slices\" class=\"method\"><a class=\"src rightside\" href=\"src/devela/data/list/queue/destaque/methods/general.rs.html#1740\">Source</a><h4 class=\"code-header\">pub fn <a href=\"devela/all/struct.Destaque.html#tymethod.as_slices\" class=\"fn\">as_slices</a>(&amp;self) -&gt; (&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a>, &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a>) <a href=\"#\" class=\"tooltip\" data-notable-ty=\"(&amp;[T], &amp;[T])\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Returns the destaque as pair of shared slices, which contain, in order,\nthe contents of the destaque.</p>\n<h5 id=\"examples-5\"><a class=\"doc-anchor\" href=\"#examples-5\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>q = DestaqueU8::&lt;<span class=\"kw\">_</span>, <span class=\"number\">3</span>&gt;::from([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);\n<span class=\"macro\">assert_eq!</span>[q.as_slices(), (<span class=\"kw-2\">&amp;</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>][..], <span class=\"kw-2\">&amp;</span>[][..])];</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_contiguous\" class=\"method\"><a class=\"src rightside\" href=\"src/devela/data/list/queue/destaque/methods/general.rs.html#1740\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"devela/all/struct.Destaque.html#tymethod.is_contiguous\" class=\"fn\">is_contiguous</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if the destaque is contiguous.</p>\n<h5 id=\"examples-6\"><a class=\"doc-anchor\" href=\"#examples-6\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>q = DestaqueU8::&lt;<span class=\"kw\">_</span>, <span class=\"number\">3</span>&gt;::from([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);\n<span class=\"macro\">assert_eq!</span>[q.as_slices(), (<span class=\"kw-2\">&amp;</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>][..], <span class=\"kw-2\">&amp;</span>[][..])];\n<span class=\"macro\">assert!</span>[q.is_contiguous()];\nq.pop_back()<span class=\"question-mark\">?</span>;\nq.push_front(<span class=\"number\">4</span>)<span class=\"question-mark\">?</span>;\n<span class=\"macro\">assert!</span>[!q.is_contiguous()];\n<span class=\"macro\">assert_eq!</span>[q.as_slices(), (<span class=\"kw-2\">&amp;</span>[<span class=\"number\">4</span>][..], <span class=\"kw-2\">&amp;</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>][..])];</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.push_front\" class=\"method\"><a class=\"src rightside\" href=\"src/devela/data/list/queue/destaque/methods/general.rs.html#1740\">Source</a><h4 class=\"code-header\">pub fn <a href=\"devela/all/struct.Destaque.html#tymethod.push_front\" class=\"fn\">push_front</a>(&amp;mut self, element: T) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"devela/all/struct.NotEnoughSpace.html\" title=\"struct devela::all::NotEnoughSpace\">NotEnoughSpace</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;(), NotEnoughSpace&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Pushes a new <code>element</code> to the front of the destaque.</p>\n<p><code>( 1 2 -- 3 1 2 )</code></p>\n<h5 id=\"errors\"><a class=\"doc-anchor\" href=\"#errors\">§</a>Errors</h5>\n<p>Returns <a href=\"devela/all/struct.NotEnoughSpace.html\" title=\"struct devela::all::NotEnoughSpace\"><code>NotEnoughSpace</code></a> if the destaque is full.</p>\n<h5 id=\"examples-7\"><a class=\"doc-anchor\" href=\"#examples-7\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>q = DestaqueU8::&lt;u8, <span class=\"number\">3</span>&gt;::default();\nq.push_front(<span class=\"number\">1</span>)<span class=\"question-mark\">?</span>;\nq.push_front(<span class=\"number\">2</span>)<span class=\"question-mark\">?</span>;\nq.push_front(<span class=\"number\">3</span>)<span class=\"question-mark\">?</span>;\n<span class=\"macro\">assert_eq!</span>[q.to_array(), <span class=\"prelude-val\">Some</span>([<span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>])];</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.push_front_unchecked\" class=\"method\"><a class=\"src rightside\" href=\"src/devela/data/list/queue/destaque/methods/general.rs.html#1740\">Source</a><h4 class=\"code-header\">pub fn <a href=\"devela/all/struct.Destaque.html#tymethod.push_front_unchecked\" class=\"fn\">push_front_unchecked</a>(&amp;mut self, element: T)</h4></section></summary><div class=\"docblock\"><p>Unchecked version of <a href=\"devela/all/struct.Destaque.html#method.push_front\" title=\"method devela::all::Destaque::push_front\"><code>push_front</code></a>.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if the destaque is full.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.push_front_override\" class=\"method\"><a class=\"src rightside\" href=\"src/devela/data/list/queue/destaque/methods/general.rs.html#1740\">Source</a><h4 class=\"code-header\">pub fn <a href=\"devela/all/struct.Destaque.html#tymethod.push_front_override\" class=\"fn\">push_front_override</a>(&amp;mut self, element: T) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Pushes a new <code>element</code> to the front of the destaque,\noverriding an element from the back if the destaque is full.</p>\n<p>Returns <code>true</code> if an element was overridden, and <code>false</code> otherwise.</p>\n<h5 id=\"examples-8\"><a class=\"doc-anchor\" href=\"#examples-8\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>q = DestaqueU8::&lt;<span class=\"kw\">_</span>, <span class=\"number\">3</span>&gt;::from([<span class=\"number\">1</span>, <span class=\"number\">2</span>]);\n<span class=\"macro\">assert_eq!</span>(q.push_front_override(<span class=\"number\">3</span>), <span class=\"bool-val\">false</span>);\n<span class=\"macro\">assert_eq!</span>[q.to_array(), <span class=\"prelude-val\">Some</span>([<span class=\"number\">3</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>])];\n<span class=\"macro\">assert_eq!</span>(q.push_front_override(<span class=\"number\">4</span>), <span class=\"bool-val\">true</span>);\n<span class=\"macro\">assert_eq!</span>[q.to_array(), <span class=\"prelude-val\">Some</span>([<span class=\"number\">4</span>, <span class=\"number\">3</span>, <span class=\"number\">1</span>])];</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.push_back\" class=\"method\"><a class=\"src rightside\" href=\"src/devela/data/list/queue/destaque/methods/general.rs.html#1740\">Source</a><h4 class=\"code-header\">pub fn <a href=\"devela/all/struct.Destaque.html#tymethod.push_back\" class=\"fn\">push_back</a>(&amp;mut self, element: T) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"devela/all/struct.NotEnoughSpace.html\" title=\"struct devela::all::NotEnoughSpace\">NotEnoughSpace</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;(), NotEnoughSpace&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Pushes a new <code>element</code> to the back of the destaque.</p>\n<p>This is the habitual <em>enqueue</em> operation for a single-ended <strong>queue</strong>.</p>\n<p><code>( 1 2 -- 1 2 3 )</code></p>\n<h5 id=\"errors-1\"><a class=\"doc-anchor\" href=\"#errors-1\">§</a>Errors</h5>\n<p>Returns <a href=\"devela/all/struct.NotEnoughSpace.html\" title=\"struct devela::all::NotEnoughSpace\"><code>NotEnoughSpace</code></a> if the destaque is full.</p>\n<h5 id=\"examples-9\"><a class=\"doc-anchor\" href=\"#examples-9\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>q = DestaqueU8::&lt;u8, <span class=\"number\">3</span>&gt;::default();\nq.push_back(<span class=\"number\">1</span>)<span class=\"question-mark\">?</span>;\nq.push_back(<span class=\"number\">2</span>)<span class=\"question-mark\">?</span>;\nq.push_back(<span class=\"number\">3</span>)<span class=\"question-mark\">?</span>;\n<span class=\"macro\">assert_eq!</span>[q.to_array(), <span class=\"prelude-val\">Some</span>([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>])];</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.enqueue\" class=\"method\"><a class=\"src rightside\" href=\"src/devela/data/list/queue/destaque/methods/general.rs.html#1740\">Source</a><h4 class=\"code-header\">pub fn <a href=\"devela/all/struct.Destaque.html#tymethod.enqueue\" class=\"fn\">enqueue</a>(&amp;mut self, element: T) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"devela/all/struct.NotEnoughSpace.html\" title=\"struct devela::all::NotEnoughSpace\">NotEnoughSpace</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;(), NotEnoughSpace&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Alias of <a href=\"devela/all/struct.Destaque.html#method.push_back\" title=\"method devela::all::Destaque::push_back\"><code>push_back</code></a>.</p>\n<p>This is the habitual <em>enqueue</em> operation for a single-ended <strong>queue</strong>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.push_back_unchecked\" class=\"method\"><a class=\"src rightside\" href=\"src/devela/data/list/queue/destaque/methods/general.rs.html#1740\">Source</a><h4 class=\"code-header\">pub fn <a href=\"devela/all/struct.Destaque.html#tymethod.push_back_unchecked\" class=\"fn\">push_back_unchecked</a>(&amp;mut self, element: T)</h4></section></summary><div class=\"docblock\"><p>Unchecked version of <a href=\"devela/all/struct.Destaque.html#method.push_back\" title=\"method devela::all::Destaque::push_back\"><code>push_back</code></a>.</p>\n<h5 id=\"panics-1\"><a class=\"doc-anchor\" href=\"#panics-1\">§</a>Panics</h5>\n<p>Panics if the destaque is full.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.push_back_override\" class=\"method\"><a class=\"src rightside\" href=\"src/devela/data/list/queue/destaque/methods/general.rs.html#1740\">Source</a><h4 class=\"code-header\">pub fn <a href=\"devela/all/struct.Destaque.html#tymethod.push_back_override\" class=\"fn\">push_back_override</a>(&amp;mut self, element: T) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Pushes a new <code>element</code> to the back of the destaque,\noverriding the first element if the destaque is full.</p>\n<p>Returns <code>true</code> if an element was overridden, and <code>false</code> otherwise.</p>\n<h5 id=\"examples-10\"><a class=\"doc-anchor\" href=\"#examples-10\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>q = DestaqueU8::&lt;<span class=\"kw\">_</span>, <span class=\"number\">3</span>&gt;::from([<span class=\"number\">1</span>, <span class=\"number\">2</span>]);\n<span class=\"macro\">assert_eq!</span>(q.push_back_override(<span class=\"number\">3</span>), <span class=\"bool-val\">false</span>);\n<span class=\"macro\">assert_eq!</span>[q.to_array(), <span class=\"prelude-val\">Some</span>([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>])];\n<span class=\"macro\">assert_eq!</span>(q.push_back_override(<span class=\"number\">4</span>), <span class=\"bool-val\">true</span>);\n<span class=\"macro\">assert_eq!</span>[q.to_array(), <span class=\"prelude-val\">Some</span>([<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>])];</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.pop_front\" class=\"method\"><a class=\"src rightside\" href=\"src/devela/data/list/queue/destaque/methods/general.rs.html#1740\">Source</a><h4 class=\"code-header\">pub fn <a href=\"devela/all/struct.Destaque.html#tymethod.pop_front\" class=\"fn\">pop_front</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;T, <a class=\"struct\" href=\"devela/all/struct.NotEnoughElements.html\" title=\"struct devela::all::NotEnoughElements\">NotEnoughElements</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;T, NotEnoughElements&gt;\">ⓘ</a></h4></section><span class=\"item-info\"><div class=\"stab portability\">Available on <strong>crate feature <code>unsafe_ptr</code></strong> only.</div></span></summary><div class=\"docblock\"><p>Pops the front element.</p>\n<p>This is the habitual <em>dequeue</em> operation for a signle-ended <strong>queue</strong>.</p>\n<p><code>( 1 2 -- 2 )</code></p>\n<h5 id=\"errors-2\"><a class=\"doc-anchor\" href=\"#errors-2\">§</a>Errors</h5>\n<p>Returns <a href=\"devela/all/struct.NotEnoughElements.html\" title=\"struct devela::all::NotEnoughElements\"><code>NotEnoughElements</code></a> if the queue is empty.</p>\n<h5 id=\"examples-11\"><a class=\"doc-anchor\" href=\"#examples-11\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code>\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>q = DestaqueU8::&lt;<span class=\"kw\">_</span>, <span class=\"number\">8</span>&gt;::from([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);\n<span class=\"macro\">assert_eq!</span>[<span class=\"number\">1</span>, q.pop_front()<span class=\"question-mark\">?</span>];\n<span class=\"macro\">assert_eq!</span>[<span class=\"number\">2</span>, q.pop_front()<span class=\"question-mark\">?</span>];\n<span class=\"macro\">assert_eq!</span>[<span class=\"number\">3</span>, q.pop_front()<span class=\"question-mark\">?</span>];\n<span class=\"macro\">assert!</span>[q.is_empty()];</code></pre></div>\n<h5 id=\"features\"><a class=\"doc-anchor\" href=\"#features\">§</a>Features</h5>\n<p>It’s depends on <code>T: Clone</code>, unless the <code>unsafe_ptr</code> feature is enabled.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.dequeue\" class=\"method\"><a class=\"src rightside\" href=\"src/devela/data/list/queue/destaque/methods/general.rs.html#1740\">Source</a><h4 class=\"code-header\">pub fn <a href=\"devela/all/struct.Destaque.html#tymethod.dequeue\" class=\"fn\">dequeue</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;T, <a class=\"struct\" href=\"devela/all/struct.NotEnoughElements.html\" title=\"struct devela::all::NotEnoughElements\">NotEnoughElements</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;T, NotEnoughElements&gt;\">ⓘ</a></h4></section><span class=\"item-info\"><div class=\"stab portability\">Available on <strong>crate feature <code>unsafe_ptr</code></strong> only.</div></span></summary><div class=\"docblock\"><p>Alias of <a href=\"devela/all/struct.Destaque.html#method.pop_front\" title=\"method devela::all::Destaque::pop_front\"><code>pop_front</code></a>.</p>\n<p>This is the habitual <em>dequeue</em> operation for a single-ended <strong>queue</strong>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.pop_back\" class=\"method\"><a class=\"src rightside\" href=\"src/devela/data/list/queue/destaque/methods/general.rs.html#1740\">Source</a><h4 class=\"code-header\">pub fn <a href=\"devela/all/struct.Destaque.html#tymethod.pop_back\" class=\"fn\">pop_back</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;T, <a class=\"struct\" href=\"devela/all/struct.NotEnoughElements.html\" title=\"struct devela::all::NotEnoughElements\">NotEnoughElements</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;T, NotEnoughElements&gt;\">ⓘ</a></h4></section><span class=\"item-info\"><div class=\"stab portability\">Available on <strong>crate feature <code>unsafe_ptr</code></strong> only.</div></span></summary><div class=\"docblock\"><p>Pops the back element.</p>\n<p><code>( 1 2-- 1 )</code></p>\n<h5 id=\"errors-3\"><a class=\"doc-anchor\" href=\"#errors-3\">§</a>Errors</h5>\n<p>Returns <a href=\"devela/all/struct.NotEnoughElements.html\" title=\"struct devela::all::NotEnoughElements\"><code>NotEnoughElements</code></a> if the destaque is empty.</p>\n<h5 id=\"examples-12\"><a class=\"doc-anchor\" href=\"#examples-12\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>q = DestaqueU8::&lt;<span class=\"kw\">_</span>, <span class=\"number\">8</span>&gt;::from([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);\n<span class=\"macro\">assert_eq!</span>[<span class=\"number\">3</span>, q.pop_back()<span class=\"question-mark\">?</span>];\n<span class=\"macro\">assert_eq!</span>[<span class=\"number\">2</span>, q.pop_back()<span class=\"question-mark\">?</span>];\n<span class=\"macro\">assert_eq!</span>[<span class=\"number\">1</span>, q.pop_back()<span class=\"question-mark\">?</span>];\n<span class=\"macro\">assert!</span>[q.is_empty()];</code></pre></div>\n<h5 id=\"features-1\"><a class=\"doc-anchor\" href=\"#features-1\">§</a>Features</h5>\n<p>It’s depends on <code>T: Clone</code>, unless the <code>unsafe_ptr</code> feature is enabled.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.peek_back\" class=\"method\"><a class=\"src rightside\" href=\"src/devela/data/list/queue/destaque/methods/general.rs.html#1740\">Source</a><h4 class=\"code-header\">pub fn <a href=\"devela/all/struct.Destaque.html#tymethod.peek_back\" class=\"fn\">peek_back</a>(&amp;self) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;T</a>, <a class=\"struct\" href=\"devela/all/struct.NotEnoughElements.html\" title=\"struct devela::all::NotEnoughElements\">NotEnoughElements</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;&amp;T, NotEnoughElements&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Returns a shared reference to the back element.</p>\n<h5 id=\"errors-4\"><a class=\"doc-anchor\" href=\"#errors-4\">§</a>Errors</h5>\n<p>Returns <a href=\"devela/all/struct.NotEnoughElements.html\" title=\"struct devela::all::NotEnoughElements\"><code>NotEnoughElements</code></a> if the destaque is empty.</p>\n<h5 id=\"examples-13\"><a class=\"doc-anchor\" href=\"#examples-13\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>q = DestaqueU8::&lt;<span class=\"kw\">_</span>, <span class=\"number\">8</span>&gt;::from([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);\n<span class=\"macro\">assert_eq!</span>[<span class=\"kw-2\">&amp;</span><span class=\"number\">3</span>, q.peek_back()<span class=\"question-mark\">?</span>];</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.peek_back_mut\" class=\"method\"><a class=\"src rightside\" href=\"src/devela/data/list/queue/destaque/methods/general.rs.html#1740\">Source</a><h4 class=\"code-header\">pub fn <a href=\"devela/all/struct.Destaque.html#tymethod.peek_back_mut\" class=\"fn\">peek_back_mut</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut T</a>, <a class=\"struct\" href=\"devela/all/struct.NotEnoughElements.html\" title=\"struct devela::all::NotEnoughElements\">NotEnoughElements</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;&amp;mut T, NotEnoughElements&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Returns an exclusive reference to the back element.</p>\n<h5 id=\"errors-5\"><a class=\"doc-anchor\" href=\"#errors-5\">§</a>Errors</h5>\n<p>Returns <a href=\"devela/all/struct.NotEnoughElements.html\" title=\"struct devela::all::NotEnoughElements\"><code>NotEnoughElements</code></a> if the destaque is empty.</p>\n<h5 id=\"examples-14\"><a class=\"doc-anchor\" href=\"#examples-14\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>q = DestaqueU8::&lt;<span class=\"kw\">_</span>, <span class=\"number\">8</span>&gt;::from([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);\n<span class=\"macro\">assert_eq!</span>[<span class=\"kw-2\">&amp;mut </span><span class=\"number\">3</span>, q.peek_back_mut()<span class=\"question-mark\">?</span>];</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.peek_nth_back\" class=\"method\"><a class=\"src rightside\" href=\"src/devela/data/list/queue/destaque/methods/general.rs.html#1740\">Source</a><h4 class=\"code-header\">pub fn <a href=\"devela/all/struct.Destaque.html#tymethod.peek_nth_back\" class=\"fn\">peek_nth_back</a>(&amp;self, nth: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;T</a>, <a class=\"struct\" href=\"devela/all/struct.NotEnoughElements.html\" title=\"struct devela::all::NotEnoughElements\">NotEnoughElements</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;&amp;T, NotEnoughElements&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Returns a shared reference to the <code>nth</code> back element.</p>\n<h5 id=\"errors-6\"><a class=\"doc-anchor\" href=\"#errors-6\">§</a>Errors</h5>\n<p>Returns <a href=\"devela/all/struct.NotEnoughElements.html\" title=\"struct devela::all::NotEnoughElements\"><code>NotEnoughElements</code></a> if the destaque doesn’t have at least <code>nth</code> elements.</p>\n<h5 id=\"examples-15\"><a class=\"doc-anchor\" href=\"#examples-15\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>q = DestaqueU8::&lt;<span class=\"kw\">_</span>, <span class=\"number\">8</span>&gt;::from([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);\n<span class=\"macro\">assert_eq!</span>[<span class=\"kw-2\">&amp;</span><span class=\"number\">1</span>, q.peek_nth_back(<span class=\"number\">2</span>)<span class=\"question-mark\">?</span>];</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.peek_nth_back_mut\" class=\"method\"><a class=\"src rightside\" href=\"src/devela/data/list/queue/destaque/methods/general.rs.html#1740\">Source</a><h4 class=\"code-header\">pub fn <a href=\"devela/all/struct.Destaque.html#tymethod.peek_nth_back_mut\" class=\"fn\">peek_nth_back_mut</a>(\n    &amp;mut self,\n    nth: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>,\n) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut T</a>, <a class=\"struct\" href=\"devela/all/struct.NotEnoughElements.html\" title=\"struct devela::all::NotEnoughElements\">NotEnoughElements</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;&amp;mut T, NotEnoughElements&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Returns an exclusive reference to the <code>nth</code> back element.</p>\n<h5 id=\"errors-7\"><a class=\"doc-anchor\" href=\"#errors-7\">§</a>Errors</h5>\n<p>Returns <a href=\"devela/all/struct.NotEnoughElements.html\" title=\"struct devela::all::NotEnoughElements\"><code>NotEnoughElements</code></a> if the destaque doesn’t have at least <code>nth</code> elements.</p>\n<h5 id=\"examples-16\"><a class=\"doc-anchor\" href=\"#examples-16\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>q = DestaqueU8::&lt;<span class=\"kw\">_</span>, <span class=\"number\">8</span>&gt;::from([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);\n<span class=\"macro\">assert_eq!</span>[<span class=\"kw-2\">&amp;mut </span><span class=\"number\">1</span>, q.peek_nth_back_mut(<span class=\"number\">2</span>)<span class=\"question-mark\">?</span>];</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.peek_front\" class=\"method\"><a class=\"src rightside\" href=\"src/devela/data/list/queue/destaque/methods/general.rs.html#1740\">Source</a><h4 class=\"code-header\">pub fn <a href=\"devela/all/struct.Destaque.html#tymethod.peek_front\" class=\"fn\">peek_front</a>(&amp;self) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;T</a>, <a class=\"struct\" href=\"devela/all/struct.NotEnoughElements.html\" title=\"struct devela::all::NotEnoughElements\">NotEnoughElements</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;&amp;T, NotEnoughElements&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Returns a shared reference to the front element.</p>\n<h5 id=\"errors-8\"><a class=\"doc-anchor\" href=\"#errors-8\">§</a>Errors</h5>\n<p>Returns <a href=\"devela/all/struct.NotEnoughElements.html\" title=\"struct devela::all::NotEnoughElements\"><code>NotEnoughElements</code></a> if the destaque is empty.</p>\n<h5 id=\"examples-17\"><a class=\"doc-anchor\" href=\"#examples-17\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>q = DestaqueU8::&lt;<span class=\"kw\">_</span>, <span class=\"number\">8</span>&gt;::from([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);\n<span class=\"macro\">assert_eq!</span>[<span class=\"kw-2\">&amp;</span><span class=\"number\">1</span>, q.peek_front()<span class=\"question-mark\">?</span>];</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.peek_front_mut\" class=\"method\"><a class=\"src rightside\" href=\"src/devela/data/list/queue/destaque/methods/general.rs.html#1740\">Source</a><h4 class=\"code-header\">pub fn <a href=\"devela/all/struct.Destaque.html#tymethod.peek_front_mut\" class=\"fn\">peek_front_mut</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut T</a>, <a class=\"struct\" href=\"devela/all/struct.NotEnoughElements.html\" title=\"struct devela::all::NotEnoughElements\">NotEnoughElements</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;&amp;mut T, NotEnoughElements&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Returns an exclusive reference to the front element.</p>\n<h5 id=\"errors-9\"><a class=\"doc-anchor\" href=\"#errors-9\">§</a>Errors</h5>\n<p>Returns <a href=\"devela/all/struct.NotEnoughElements.html\" title=\"struct devela::all::NotEnoughElements\"><code>NotEnoughElements</code></a> if the destaque is empty.</p>\n<h5 id=\"examples-18\"><a class=\"doc-anchor\" href=\"#examples-18\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>q = DestaqueU8::&lt;<span class=\"kw\">_</span>, <span class=\"number\">8</span>&gt;::from([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);\n<span class=\"macro\">assert_eq!</span>[<span class=\"kw-2\">&amp;mut </span><span class=\"number\">1</span>, q.peek_front_mut()<span class=\"question-mark\">?</span>];</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.peek_nth_front\" class=\"method\"><a class=\"src rightside\" href=\"src/devela/data/list/queue/destaque/methods/general.rs.html#1740\">Source</a><h4 class=\"code-header\">pub fn <a href=\"devela/all/struct.Destaque.html#tymethod.peek_nth_front\" class=\"fn\">peek_nth_front</a>(&amp;self, nth: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;T</a>, <a class=\"struct\" href=\"devela/all/struct.NotEnoughElements.html\" title=\"struct devela::all::NotEnoughElements\">NotEnoughElements</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;&amp;T, NotEnoughElements&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Returns a shared reference to the <code>nth</code> front element.</p>\n<h5 id=\"errors-10\"><a class=\"doc-anchor\" href=\"#errors-10\">§</a>Errors</h5>\n<p>Returns <a href=\"devela/all/struct.NotEnoughElements.html\" title=\"struct devela::all::NotEnoughElements\"><code>NotEnoughElements</code></a> if the destaque doesn’t have at least <code>nth</code> elements.</p>\n<h5 id=\"examples-19\"><a class=\"doc-anchor\" href=\"#examples-19\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>q = DestaqueU8::&lt;<span class=\"kw\">_</span>, <span class=\"number\">8</span>&gt;::from([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]);\n<span class=\"macro\">assert_eq!</span>[<span class=\"kw-2\">&amp;</span><span class=\"number\">3</span>, q.peek_nth_front(<span class=\"number\">2</span>)<span class=\"question-mark\">?</span>];</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.peek_nth_front_mut\" class=\"method\"><a class=\"src rightside\" href=\"src/devela/data/list/queue/destaque/methods/general.rs.html#1740\">Source</a><h4 class=\"code-header\">pub fn <a href=\"devela/all/struct.Destaque.html#tymethod.peek_nth_front_mut\" class=\"fn\">peek_nth_front_mut</a>(\n    &amp;mut self,\n    nth: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>,\n) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut T</a>, <a class=\"struct\" href=\"devela/all/struct.NotEnoughElements.html\" title=\"struct devela::all::NotEnoughElements\">NotEnoughElements</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;&amp;mut T, NotEnoughElements&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Returns an exclusive reference to the <code>nth</code> front element.</p>\n<h5 id=\"errors-11\"><a class=\"doc-anchor\" href=\"#errors-11\">§</a>Errors</h5>\n<p>Returns <a href=\"devela/all/struct.NotEnoughElements.html\" title=\"struct devela::all::NotEnoughElements\"><code>NotEnoughElements</code></a> if the destaque doesn’t have at least <code>nth</code> elements.</p>\n<h5 id=\"examples-20\"><a class=\"doc-anchor\" href=\"#examples-20\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>q = DestaqueU8::&lt;<span class=\"kw\">_</span>, <span class=\"number\">8</span>&gt;::from([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]);\n<span class=\"macro\">assert_eq!</span>[<span class=\"kw-2\">&amp;mut </span><span class=\"number\">3</span>, q.peek_nth_front_mut(<span class=\"number\">2</span>)<span class=\"question-mark\">?</span>];</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clear\" class=\"method\"><a class=\"src rightside\" href=\"src/devela/data/list/queue/destaque/methods/general.rs.html#1740\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"devela/all/struct.Destaque.html#tymethod.clear\" class=\"fn\">clear</a>(&amp;mut self)</h4></section></summary><div class=\"docblock\"><p>Clears the destaque.</p>\n<p><code>( 1 2 -- )</code></p>\n<h5 id=\"examples-21\"><a class=\"doc-anchor\" href=\"#examples-21\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>q = DestaqueU8::&lt;<span class=\"kw\">_</span>, <span class=\"number\">8</span>&gt;::from([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]);\nq.clear();\n<span class=\"macro\">assert!</span>[q.is_empty()];</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.drop_back\" class=\"method\"><a class=\"src rightside\" href=\"src/devela/data/list/queue/destaque/methods/general.rs.html#1740\">Source</a><h4 class=\"code-header\">pub fn <a href=\"devela/all/struct.Destaque.html#tymethod.drop_back\" class=\"fn\">drop_back</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"devela/all/struct.NotEnoughElements.html\" title=\"struct devela::all::NotEnoughElements\">NotEnoughElements</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;(), NotEnoughElements&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Drops the back element.</p>\n<p><code>( 1 2 -- 1 )</code></p>\n<h5 id=\"errors-12\"><a class=\"doc-anchor\" href=\"#errors-12\">§</a>Errors</h5>\n<p>Returns <a href=\"devela/all/struct.NotEnoughElements.html\" title=\"struct devela::all::NotEnoughElements\"><code>NotEnoughElements</code></a> if the destaque is empty.</p>\n<h5 id=\"examples-22\"><a class=\"doc-anchor\" href=\"#examples-22\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>q = DestaqueU8::&lt;<span class=\"kw\">_</span>, <span class=\"number\">8</span>&gt;::from([<span class=\"number\">1</span>, <span class=\"number\">2</span>]);\nq.drop_back()<span class=\"question-mark\">?</span>;\n<span class=\"macro\">assert_eq!</span>[q.to_array(), <span class=\"prelude-val\">Some</span>([<span class=\"number\">1</span>])];</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.drop_front\" class=\"method\"><a class=\"src rightside\" href=\"src/devela/data/list/queue/destaque/methods/general.rs.html#1740\">Source</a><h4 class=\"code-header\">pub fn <a href=\"devela/all/struct.Destaque.html#tymethod.drop_front\" class=\"fn\">drop_front</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"devela/all/struct.NotEnoughElements.html\" title=\"struct devela::all::NotEnoughElements\">NotEnoughElements</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;(), NotEnoughElements&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Drops the front element.</p>\n<p><code>( 1 2 -- 2 )</code></p>\n<h5 id=\"errors-13\"><a class=\"doc-anchor\" href=\"#errors-13\">§</a>Errors</h5>\n<p>Returns <a href=\"devela/all/struct.NotEnoughElements.html\" title=\"struct devela::all::NotEnoughElements\"><code>NotEnoughElements</code></a> if the destaque is empty.</p>\n<h5 id=\"examples-23\"><a class=\"doc-anchor\" href=\"#examples-23\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>q = DestaqueU8::&lt;<span class=\"kw\">_</span>, <span class=\"number\">8</span>&gt;::from([<span class=\"number\">1</span>, <span class=\"number\">2</span>]);\nq.drop_front()<span class=\"question-mark\">?</span>;\n<span class=\"macro\">assert_eq!</span>[q.to_array(), <span class=\"prelude-val\">Some</span>([<span class=\"number\">2</span>])];</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.drop_n_back\" class=\"method\"><a class=\"src rightside\" href=\"src/devela/data/list/queue/destaque/methods/general.rs.html#1740\">Source</a><h4 class=\"code-header\">pub fn <a href=\"devela/all/struct.Destaque.html#tymethod.drop_n_back\" class=\"fn\">drop_n_back</a>(&amp;mut self, nth: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"devela/all/struct.NotEnoughElements.html\" title=\"struct devela::all::NotEnoughElements\">NotEnoughElements</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;(), NotEnoughElements&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Drops <code>n</code> elements from the back.</p>\n<p><code>( 1 2 3 4 -- 1 )</code> for <code>n = 3</code></p>\n<h5 id=\"errors-14\"><a class=\"doc-anchor\" href=\"#errors-14\">§</a>Errors</h5>\n<p>Returns <a href=\"devela/all/struct.NotEnoughElements.html\" title=\"struct devela::all::NotEnoughElements\"><code>NotEnoughElements</code></a> if the destaque doesn’t contain at least <code>nth</code> elements.</p>\n<h5 id=\"examples-24\"><a class=\"doc-anchor\" href=\"#examples-24\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>q = DestaqueU8::&lt;<span class=\"kw\">_</span>, <span class=\"number\">8</span>&gt;::from([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]);\nq.drop_n_back(<span class=\"number\">3</span>)<span class=\"question-mark\">?</span>;\n<span class=\"macro\">assert_eq!</span>[q.to_array(), <span class=\"prelude-val\">Some</span>([<span class=\"number\">1</span>])];</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.drop_n_front\" class=\"method\"><a class=\"src rightside\" href=\"src/devela/data/list/queue/destaque/methods/general.rs.html#1740\">Source</a><h4 class=\"code-header\">pub fn <a href=\"devela/all/struct.Destaque.html#tymethod.drop_n_front\" class=\"fn\">drop_n_front</a>(&amp;mut self, nth: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"devela/all/struct.NotEnoughElements.html\" title=\"struct devela::all::NotEnoughElements\">NotEnoughElements</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;(), NotEnoughElements&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Drops <code>n</code> elements from the front.</p>\n<p><code>( 1 2 3 4 -- 4 )</code> for <code>n = 3</code></p>\n<h5 id=\"errors-15\"><a class=\"doc-anchor\" href=\"#errors-15\">§</a>Errors</h5>\n<p>Returns <a href=\"devela/all/struct.NotEnoughElements.html\" title=\"struct devela::all::NotEnoughElements\"><code>NotEnoughElements</code></a>\nif the destaque doesn’t contain at least <code>nth</code> elements.</p>\n<h5 id=\"examples-25\"><a class=\"doc-anchor\" href=\"#examples-25\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>q = DestaqueU8::&lt;<span class=\"kw\">_</span>, <span class=\"number\">8</span>&gt;::from([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]);\nq.drop_n_front(<span class=\"number\">3</span>)<span class=\"question-mark\">?</span>;\n<span class=\"macro\">assert_eq!</span>[q.to_array(), <span class=\"prelude-val\">Some</span>([<span class=\"number\">4</span>])];</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.swap_back\" class=\"method\"><a class=\"src rightside\" href=\"src/devela/data/list/queue/destaque/methods/general.rs.html#1740\">Source</a><h4 class=\"code-header\">pub fn <a href=\"devela/all/struct.Destaque.html#tymethod.swap_back\" class=\"fn\">swap_back</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"devela/all/struct.NotEnoughElements.html\" title=\"struct devela::all::NotEnoughElements\">NotEnoughElements</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;(), NotEnoughElements&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Swaps the last two elements at the back of the destaque.</p>\n<p><code>( 1 2 3 4 -- 1 2 4 3 )</code></p>\n<h5 id=\"errors-16\"><a class=\"doc-anchor\" href=\"#errors-16\">§</a>Errors</h5>\n<p>Returns <a href=\"devela/all/struct.NotEnoughElements.html\" title=\"struct devela::all::NotEnoughElements\"><code>NotEnoughElements</code></a> if the destaque doesn’t contain at least 2 elements.</p>\n<h5 id=\"examples-26\"><a class=\"doc-anchor\" href=\"#examples-26\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>q = DestaqueU8::&lt;<span class=\"kw\">_</span>, <span class=\"number\">4</span>&gt;::from([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]);\nq.swap_back();\n<span class=\"macro\">assert_eq!</span>[q.to_array(), <span class=\"prelude-val\">Some</span>([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">3</span>])];</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.swap_back_unchecked\" class=\"method\"><a class=\"src rightside\" href=\"src/devela/data/list/queue/destaque/methods/general.rs.html#1740\">Source</a><h4 class=\"code-header\">pub fn <a href=\"devela/all/struct.Destaque.html#tymethod.swap_back_unchecked\" class=\"fn\">swap_back_unchecked</a>(&amp;mut self)</h4></section></summary><div class=\"docblock\"><p>Unchecked version of <a href=\"devela/all/struct.Destaque.html#method.swap_back\" title=\"method devela::all::Destaque::swap_back\"><code>swap_back</code></a>.</p>\n<h5 id=\"panics-2\"><a class=\"doc-anchor\" href=\"#panics-2\">§</a>Panics</h5>\n<p>Panics if the destaque doesn’t contain at least 2 elements.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.swap_front\" class=\"method\"><a class=\"src rightside\" href=\"src/devela/data/list/queue/destaque/methods/general.rs.html#1740\">Source</a><h4 class=\"code-header\">pub fn <a href=\"devela/all/struct.Destaque.html#tymethod.swap_front\" class=\"fn\">swap_front</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"devela/all/struct.NotEnoughElements.html\" title=\"struct devela::all::NotEnoughElements\">NotEnoughElements</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;(), NotEnoughElements&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Swaps the first two elements at the front of the destaque.</p>\n<p><code>( 1 2 3 4 -- 2 1 3 4 )</code></p>\n<h5 id=\"errors-17\"><a class=\"doc-anchor\" href=\"#errors-17\">§</a>Errors</h5>\n<p>Returns <a href=\"devela/all/struct.NotEnoughElements.html\" title=\"struct devela::all::NotEnoughElements\"><code>NotEnoughElements</code></a> if the destaque doesn’t contain at least 2 elements.</p>\n<h5 id=\"examples-27\"><a class=\"doc-anchor\" href=\"#examples-27\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>q = DestaqueU8::&lt;<span class=\"kw\">_</span>, <span class=\"number\">4</span>&gt;::from([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]);\nq.swap_front();\n<span class=\"macro\">assert_eq!</span>[q.to_array(), <span class=\"prelude-val\">Some</span>([<span class=\"number\">2</span>, <span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>])];</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.swap_front_unchecked\" class=\"method\"><a class=\"src rightside\" href=\"src/devela/data/list/queue/destaque/methods/general.rs.html#1740\">Source</a><h4 class=\"code-header\">pub fn <a href=\"devela/all/struct.Destaque.html#tymethod.swap_front_unchecked\" class=\"fn\">swap_front_unchecked</a>(&amp;mut self)</h4></section></summary><div class=\"docblock\"><p>Unchecked version of <a href=\"devela/all/struct.Destaque.html#method.swap_front\" title=\"method devela::all::Destaque::swap_front\"><code>swap_front</code></a>.</p>\n<h5 id=\"panics-3\"><a class=\"doc-anchor\" href=\"#panics-3\">§</a>Panics</h5>\n<p>Panics if the destaque doesn’t contain at least 2 elements.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.swap2_back\" class=\"method\"><a class=\"src rightside\" href=\"src/devela/data/list/queue/destaque/methods/general.rs.html#1740\">Source</a><h4 class=\"code-header\">pub fn <a href=\"devela/all/struct.Destaque.html#tymethod.swap2_back\" class=\"fn\">swap2_back</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"devela/all/struct.NotEnoughElements.html\" title=\"struct devela::all::NotEnoughElements\">NotEnoughElements</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;(), NotEnoughElements&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Swaps the last two pairs of elements at the back of the destaque.</p>\n<p><code>( 1 2 3 4 5 6 7 8 -- 1 2 3 4 7 8 5 6 )</code></p>\n<h5 id=\"errors-18\"><a class=\"doc-anchor\" href=\"#errors-18\">§</a>Errors</h5>\n<p>Returns <a href=\"devela/all/struct.NotEnoughElements.html\" title=\"struct devela::all::NotEnoughElements\"><code>NotEnoughElements</code></a> if the destaque doesn’t contain at least 2 elements.</p>\n<h5 id=\"examples-28\"><a class=\"doc-anchor\" href=\"#examples-28\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>q = DestaqueU8::&lt;<span class=\"kw\">_</span>, <span class=\"number\">16</span>&gt;::from([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>]);\nq.swap2_back();\n<span class=\"macro\">assert_eq!</span>[q.to_array(), <span class=\"prelude-val\">Some</span>([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>])];</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.swap2_back_unchecked\" class=\"method\"><a class=\"src rightside\" href=\"src/devela/data/list/queue/destaque/methods/general.rs.html#1740\">Source</a><h4 class=\"code-header\">pub fn <a href=\"devela/all/struct.Destaque.html#tymethod.swap2_back_unchecked\" class=\"fn\">swap2_back_unchecked</a>(&amp;mut self)</h4></section></summary><div class=\"docblock\"><p>Unchecked version of <a href=\"devela/all/struct.Destaque.html#method.swap2_back\" title=\"method devela::all::Destaque::swap2_back\"><code>swap2_back</code></a>.</p>\n<h5 id=\"panics-4\"><a class=\"doc-anchor\" href=\"#panics-4\">§</a>Panics</h5>\n<p>Panics if the destaque doesn’t contain at least 2 elements.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.swap2_front\" class=\"method\"><a class=\"src rightside\" href=\"src/devela/data/list/queue/destaque/methods/general.rs.html#1740\">Source</a><h4 class=\"code-header\">pub fn <a href=\"devela/all/struct.Destaque.html#tymethod.swap2_front\" class=\"fn\">swap2_front</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"devela/all/struct.NotEnoughElements.html\" title=\"struct devela::all::NotEnoughElements\">NotEnoughElements</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;(), NotEnoughElements&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Swaps the first two pairs of elements at the front of the destaque.\n<code>( 1 2 3 4 5 6 7 8 -- 3 4 1 2 5 6 7 8 )</code></p>\n<h5 id=\"errors-19\"><a class=\"doc-anchor\" href=\"#errors-19\">§</a>Errors</h5>\n<p>Returns <a href=\"devela/all/struct.NotEnoughElements.html\" title=\"struct devela::all::NotEnoughElements\"><code>NotEnoughElements</code></a> if the destaque doesn’t contain at least 4 elements.</p>\n<h5 id=\"examples-29\"><a class=\"doc-anchor\" href=\"#examples-29\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>q = DestaqueU8::&lt;<span class=\"kw\">_</span>, <span class=\"number\">16</span>&gt;::from([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>]);\nq.swap2_front();\n<span class=\"macro\">assert_eq!</span>[q.to_array(), <span class=\"prelude-val\">Some</span>([<span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>])];</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.swap2_front_unchecked\" class=\"method\"><a class=\"src rightside\" href=\"src/devela/data/list/queue/destaque/methods/general.rs.html#1740\">Source</a><h4 class=\"code-header\">pub fn <a href=\"devela/all/struct.Destaque.html#tymethod.swap2_front_unchecked\" class=\"fn\">swap2_front_unchecked</a>(&amp;mut self)</h4></section></summary><div class=\"docblock\"><p>Unchecked version of <a href=\"devela/all/struct.Destaque.html#method.swap2_back\" title=\"method devela::all::Destaque::swap2_back\"><code>swap2_back</code></a>.</p>\n<h5 id=\"panics-5\"><a class=\"doc-anchor\" href=\"#panics-5\">§</a>Panics</h5>\n<p>Panics if the destaque doesn’t contain at least 2 elements.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.swap_ends\" class=\"method\"><a class=\"src rightside\" href=\"src/devela/data/list/queue/destaque/methods/general.rs.html#1740\">Source</a><h4 class=\"code-header\">pub fn <a href=\"devela/all/struct.Destaque.html#tymethod.swap_ends\" class=\"fn\">swap_ends</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"devela/all/struct.NotEnoughElements.html\" title=\"struct devela::all::NotEnoughElements\">NotEnoughElements</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;(), NotEnoughElements&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Swaps the front and back elements.</p>\n<p><code>( 1 2 3 4 -- 4 2 3 1 )</code></p>\n<h5 id=\"errors-20\"><a class=\"doc-anchor\" href=\"#errors-20\">§</a>Errors</h5>\n<p>Returns <a href=\"devela/all/struct.NotEnoughElements.html\" title=\"struct devela::all::NotEnoughElements\"><code>NotEnoughElements</code></a> if the destaque doesn’t contain at least 2 elements.</p>\n<h5 id=\"examples-30\"><a class=\"doc-anchor\" href=\"#examples-30\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>q = DestaqueU8::&lt;<span class=\"kw\">_</span>, <span class=\"number\">6</span>&gt;::from([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]);\nq.swap_ends();\n<span class=\"macro\">assert_eq!</span>[q.to_array(), <span class=\"prelude-val\">Some</span>([<span class=\"number\">5</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">1</span>])];</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.swap2_ends\" class=\"method\"><a class=\"src rightside\" href=\"src/devela/data/list/queue/destaque/methods/general.rs.html#1740\">Source</a><h4 class=\"code-header\">pub fn <a href=\"devela/all/struct.Destaque.html#tymethod.swap2_ends\" class=\"fn\">swap2_ends</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"devela/all/struct.NotEnoughElements.html\" title=\"struct devela::all::NotEnoughElements\">NotEnoughElements</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;(), NotEnoughElements&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Swaps the front and back pairs of elements.</p>\n<p><code>( 1 2 3 4 5 6 7 8 -- 7 8 3 4 5 6 1 2 )</code></p>\n<h5 id=\"errors-21\"><a class=\"doc-anchor\" href=\"#errors-21\">§</a>Errors</h5>\n<p>Returns <a href=\"devela/all/struct.NotEnoughElements.html\" title=\"struct devela::all::NotEnoughElements\"><code>NotEnoughElements</code></a> if the destaque doesn’t contain at least 4 elements.</p>\n<h5 id=\"examples-31\"><a class=\"doc-anchor\" href=\"#examples-31\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>q = DestaqueU8::&lt;<span class=\"kw\">_</span>, <span class=\"number\">16</span>&gt;::from([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>]);\nq.swap2_ends();\n<span class=\"macro\">assert_eq!</span>[q.to_array(), <span class=\"prelude-val\">Some</span>([<span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>])];</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.rot_right\" class=\"method\"><a class=\"src rightside\" href=\"src/devela/data/list/queue/destaque/methods/general.rs.html#1740\">Source</a><h4 class=\"code-header\">pub fn <a href=\"devela/all/struct.Destaque.html#tymethod.rot_right\" class=\"fn\">rot_right</a>(&amp;mut self)</h4></section></summary><div class=\"docblock\"><p>Rotates all the destaqued elements one place to the right.</p>\n<p><code>( 1 2 3 4 --  4 1 2 3 )</code></p>\n<h5 id=\"examples-32\"><a class=\"doc-anchor\" href=\"#examples-32\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>q = DestaqueU8::&lt;i32, <span class=\"number\">8</span>&gt;::from([<span class=\"number\">2</span>, <span class=\"number\">3</span>]);\nq.push_front(<span class=\"number\">1</span>)<span class=\"question-mark\">?</span>;\nq.push_back(<span class=\"number\">4</span>)<span class=\"question-mark\">?</span>;\n<span class=\"macro\">assert_eq!</span>[q.to_array(), <span class=\"prelude-val\">Some</span>([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>])];\nq.rot_right();\n<span class=\"macro\">assert_eq!</span>[q.to_array(), <span class=\"prelude-val\">Some</span>([<span class=\"number\">4</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>])];</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.rot_right_n\" class=\"method\"><a class=\"src rightside\" href=\"src/devela/data/list/queue/destaque/methods/general.rs.html#1740\">Source</a><h4 class=\"code-header\">pub fn <a href=\"devela/all/struct.Destaque.html#tymethod.rot_right_n\" class=\"fn\">rot_right_n</a>(&amp;mut self, nth: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>)</h4></section></summary><div class=\"docblock\"><p>Rotates all the destaqued elements <code>n</code> places to the right.</p>\n<p><code>( 1 2 3 4 --  2 3 4 1 )</code> for <code>n = 3</code></p>\n<h5 id=\"examples-33\"><a class=\"doc-anchor\" href=\"#examples-33\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>q = DestaqueU8::&lt;i32, <span class=\"number\">8</span>&gt;::from([<span class=\"number\">2</span>, <span class=\"number\">3</span>]);\nq.push_front(<span class=\"number\">1</span>)<span class=\"question-mark\">?</span>;\nq.push_back(<span class=\"number\">4</span>)<span class=\"question-mark\">?</span>;\n<span class=\"macro\">assert_eq!</span>[q.to_array(), <span class=\"prelude-val\">Some</span>([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>])];\nq.rot_right_n(<span class=\"number\">3</span>);\n<span class=\"macro\">assert_eq!</span>[q.to_array(), <span class=\"prelude-val\">Some</span>([<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">1</span>])];</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.rot_left\" class=\"method\"><a class=\"src rightside\" href=\"src/devela/data/list/queue/destaque/methods/general.rs.html#1740\">Source</a><h4 class=\"code-header\">pub fn <a href=\"devela/all/struct.Destaque.html#tymethod.rot_left\" class=\"fn\">rot_left</a>(&amp;mut self)</h4></section></summary><div class=\"docblock\"><p>Rotates all the destaqued elements one place to the left.</p>\n<p><code>( 1 2 3 4 --  2 3 4 1 )</code></p>\n<h5 id=\"examples-34\"><a class=\"doc-anchor\" href=\"#examples-34\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>q = DestaqueU8::&lt;i32, <span class=\"number\">8</span>&gt;::from([<span class=\"number\">2</span>, <span class=\"number\">3</span>]);\nq.push_front(<span class=\"number\">1</span>)<span class=\"question-mark\">?</span>;\nq.push_back(<span class=\"number\">4</span>)<span class=\"question-mark\">?</span>;\n<span class=\"macro\">assert_eq!</span>[q.to_array(), <span class=\"prelude-val\">Some</span>([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>])];\nq.rot_left();\n<span class=\"macro\">assert_eq!</span>[q.to_array(), <span class=\"prelude-val\">Some</span>([<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">1</span>])];</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.rot_left_n\" class=\"method\"><a class=\"src rightside\" href=\"src/devela/data/list/queue/destaque/methods/general.rs.html#1740\">Source</a><h4 class=\"code-header\">pub fn <a href=\"devela/all/struct.Destaque.html#tymethod.rot_left_n\" class=\"fn\">rot_left_n</a>(&amp;mut self, nth: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>)</h4></section></summary><div class=\"docblock\"><p>Rotates all the destaqued elements <code>n</code> places to the left.</p>\n<p><code>( 1 2 3 4 --  4 1 2 3 )</code> for <code>nth = 3</code></p>\n<h5 id=\"examples-35\"><a class=\"doc-anchor\" href=\"#examples-35\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>q = DestaqueU8::&lt;i32, <span class=\"number\">8</span>&gt;::from([<span class=\"number\">2</span>, <span class=\"number\">3</span>]);\nq.push_front(<span class=\"number\">1</span>)<span class=\"question-mark\">?</span>;\nq.push_back(<span class=\"number\">4</span>)<span class=\"question-mark\">?</span>;\n<span class=\"macro\">assert_eq!</span>[q.to_array(), <span class=\"prelude-val\">Some</span>([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>])];\nq.rot_left_n(<span class=\"number\">3</span>);\n<span class=\"macro\">assert_eq!</span>[q.to_array(), <span class=\"prelude-val\">Some</span>([<span class=\"number\">4</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>])];</code></pre></div>\n</div></details></div></details>",0,"devela::data::list::queue::destaque::definitions::DestaqueU8"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Destaque%3CT,+CAP,+u8,+S%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/devela/data/list/queue/destaque/methods/general.rs.html#1740\">Source</a><a href=\"#impl-Destaque%3CT,+CAP,+u8,+S%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, const CAP: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, S: <a class=\"trait\" href=\"devela/all/trait.Storage.html\" title=\"trait devela::all::Storage\">Storage</a>&gt; <a class=\"struct\" href=\"devela/all/struct.Destaque.html\" title=\"struct devela::all::Destaque\">Destaque</a>&lt;T, CAP, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>, S&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.iter\" class=\"method\"><a class=\"src rightside\" href=\"src/devela/data/list/queue/destaque/methods/general.rs.html#1740\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"devela/all/struct.Destaque.html#tymethod.iter\" class=\"fn\">iter</a>(&amp;self) -&gt; <a class=\"struct\" href=\"devela/all/struct.DestaqueIter.html\" title=\"struct devela::all::DestaqueIter\">DestaqueIter</a>&lt;'_, T, CAP, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>, S&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"DestaqueIter&lt;&#39;_, T, CAP, u8, S&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Returns an iterator.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend_back\" class=\"method\"><a class=\"src rightside\" href=\"src/devela/data/list/queue/destaque/methods/general.rs.html#1740\">Source</a><h4 class=\"code-header\">pub fn <a href=\"devela/all/struct.Destaque.html#tymethod.extend_back\" class=\"fn\">extend_back</a>&lt;I&gt;(&amp;mut self, iterator: I) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"devela/all/struct.NotEnoughSpace.html\" title=\"struct devela::all::NotEnoughSpace\">NotEnoughSpace</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;(), NotEnoughSpace&gt;\">ⓘ</a><div class=\"where\">where\n    I: <a class=\"trait\" href=\"devela/all/trait.IteratorInto.html\" title=\"trait devela::all::IteratorInto\">IntoIterator</a>&lt;Item = T&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Extends the back of the destaque from an iterator.</p>\n<p><code>( 1 2 -- 1 2 3 4 5 6)</code> for <code>[3 4 5 6]</code></p>\n<h5 id=\"errors\"><a class=\"doc-anchor\" href=\"#errors\">§</a>Errors</h5>\n<p>Returns <a href=\"devela/all/struct.NotEnoughSpace.html\" title=\"struct devela::all::NotEnoughSpace\"><code>NotEnoughSpace</code></a> if the destaque becomes full before the iterator finishes.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>q = DestaqueU8::&lt;<span class=\"kw\">_</span>, <span class=\"number\">6</span>&gt;::from([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);\nq.extend_back([<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>]);\n<span class=\"macro\">assert_eq!</span>[q.to_array(), <span class=\"prelude-val\">Some</span>([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>])];</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend_back_override\" class=\"method\"><a class=\"src rightside\" href=\"src/devela/data/list/queue/destaque/methods/general.rs.html#1740\">Source</a><h4 class=\"code-header\">pub fn <a href=\"devela/all/struct.Destaque.html#tymethod.extend_back_override\" class=\"fn\">extend_back_override</a>&lt;I&gt;(&amp;mut self, iterator: I) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a><div class=\"where\">where\n    I: <a class=\"trait\" href=\"devela/all/trait.IteratorInto.html\" title=\"trait devela::all::IteratorInto\">IntoIterator</a>&lt;Item = T&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Extends the back of the destaque from an iterator,\noverriding elements from the front if the destaque is full.</p>\n<p><code>( 1 2 3 -- 3 4 5 6)</code> for <code>[4 5 6]</code> and <code>CAP = 4</code></p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>q = DestaqueU8::&lt;<span class=\"kw\">_</span>, <span class=\"number\">4</span>&gt;::from([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);\n<span class=\"macro\">assert_eq!</span>[q.extend_back_override([<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>]), <span class=\"bool-val\">true</span>];\n<span class=\"macro\">assert_eq!</span>[q.to_array(), <span class=\"prelude-val\">Some</span>([<span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>])];</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend_front\" class=\"method\"><a class=\"src rightside\" href=\"src/devela/data/list/queue/destaque/methods/general.rs.html#1740\">Source</a><h4 class=\"code-header\">pub fn <a href=\"devela/all/struct.Destaque.html#tymethod.extend_front\" class=\"fn\">extend_front</a>&lt;I&gt;(&amp;mut self, iterator: I) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"devela/all/struct.NotEnoughSpace.html\" title=\"struct devela::all::NotEnoughSpace\">NotEnoughSpace</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;(), NotEnoughSpace&gt;\">ⓘ</a><div class=\"where\">where\n    I: <a class=\"trait\" href=\"devela/all/trait.IteratorInto.html\" title=\"trait devela::all::IteratorInto\">IntoIterator</a>&lt;Item = T&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Extends the front of the destaque from an iterator.</p>\n<p><code>( 1 2 -- 6 5 4 3 1 2 )</code> for <code>[3 4 5 6]</code></p>\n<h5 id=\"errors-1\"><a class=\"doc-anchor\" href=\"#errors-1\">§</a>Errors</h5>\n<p>Returns <a href=\"devela/all/struct.NotEnoughSpace.html\" title=\"struct devela::all::NotEnoughSpace\"><code>NotEnoughSpace</code></a>\nif the destaque becomes full before the iterator finishes.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>q = DestaqueU8::&lt;<span class=\"kw\">_</span>, <span class=\"number\">6</span>&gt;::from([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);\nq.extend_front([<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>]);\n<span class=\"macro\">assert_eq!</span>[q.to_array(), <span class=\"prelude-val\">Some</span>([<span class=\"number\">6</span>, <span class=\"number\">5</span>, <span class=\"number\">4</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>])];</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend_front_override\" class=\"method\"><a class=\"src rightside\" href=\"src/devela/data/list/queue/destaque/methods/general.rs.html#1740\">Source</a><h4 class=\"code-header\">pub fn <a href=\"devela/all/struct.Destaque.html#tymethod.extend_front_override\" class=\"fn\">extend_front_override</a>&lt;I&gt;(&amp;mut self, iterator: I) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a><div class=\"where\">where\n    I: <a class=\"trait\" href=\"devela/all/trait.IteratorInto.html\" title=\"trait devela::all::IteratorInto\">IntoIterator</a>&lt;Item = T&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Extends the front of the destaque from an iterator,\noverriding elements from the back if the destaque is full.</p>\n<p><code>( 1 2 3 -- 6 5 4 1)</code> for <code>[4 5 6]</code> and <code>CAP = 4</code></p>\n<h5 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>q = DestaqueU8::&lt;<span class=\"kw\">_</span>, <span class=\"number\">4</span>&gt;::from([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);\n<span class=\"macro\">assert_eq!</span>[q.extend_front_override([<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>]), <span class=\"bool-val\">true</span>];\n<span class=\"macro\">assert_eq!</span>[q.to_array(), <span class=\"prelude-val\">Some</span>([<span class=\"number\">6</span>, <span class=\"number\">5</span>, <span class=\"number\">4</span>, <span class=\"number\">1</span>])];</code></pre></div>\n</div></details></div></details>",0,"devela::data::list::queue::destaque::definitions::DestaqueU8"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Destaque%3CT,+CAP,+u8,+S%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/devela/data/list/queue/destaque/methods/general.rs.html#1740\">Source</a><a href=\"#impl-Destaque%3CT,+CAP,+u8,+S%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T: <a class=\"trait\" href=\"devela/all/trait.PartialEq.html\" title=\"trait devela::all::PartialEq\">PartialEq</a>, const CAP: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, S: <a class=\"trait\" href=\"devela/all/trait.Storage.html\" title=\"trait devela::all::Storage\">Storage</a>&gt; <a class=\"struct\" href=\"devela/all/struct.Destaque.html\" title=\"struct devela::all::Destaque\">Destaque</a>&lt;T, CAP, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>, S&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.contains\" class=\"method\"><a class=\"src rightside\" href=\"src/devela/data/list/queue/destaque/methods/general.rs.html#1740\">Source</a><h4 class=\"code-header\">pub fn <a href=\"devela/all/struct.Destaque.html#tymethod.contains\" class=\"fn\">contains</a>(&amp;self, element: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;T</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns true if the destaque contains <code>element</code>.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>q = DestaqueU8::&lt;<span class=\"kw\">_</span>, <span class=\"number\">6</span>&gt;::from([<span class=\"number\">5</span>, <span class=\"number\">78</span>, <span class=\"number\">42</span>, <span class=\"number\">33</span>, <span class=\"number\">9</span>]);\n\n<span class=\"macro\">assert!</span>[q.contains(<span class=\"kw-2\">&amp;</span><span class=\"number\">9</span>)];\n<span class=\"macro\">assert!</span>[!q.contains(<span class=\"kw-2\">&amp;</span><span class=\"number\">8</span>)];</code></pre></div>\n</div></details></div></details>",0,"devela::data::list::queue::destaque::definitions::DestaqueU8"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Destaque%3CT,+CAP,+u8,+S%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/devela/data/list/queue/destaque/methods/general.rs.html#1740\">Source</a><a href=\"#impl-Destaque%3CT,+CAP,+u8,+S%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T: <a class=\"trait\" href=\"devela/code/trait.Clone.html\" title=\"trait devela::code::Clone\">Clone</a>, const CAP: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, S: <a class=\"trait\" href=\"devela/all/trait.Storage.html\" title=\"trait devela::all::Storage\">Storage</a>&gt; <a class=\"struct\" href=\"devela/all/struct.Destaque.html\" title=\"struct devela::all::Destaque\">Destaque</a>&lt;T, CAP, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>, S&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.make_contiguous\" class=\"method\"><a class=\"src rightside\" href=\"src/devela/data/list/queue/destaque/methods/general.rs.html#1740\">Source</a><h4 class=\"code-header\">pub fn <a href=\"devela/all/struct.Destaque.html#tymethod.make_contiguous\" class=\"fn\">make_contiguous</a>(&amp;mut self, element: T) -&gt; &amp;mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&amp;mut [T]\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Makes the elements of the destaque contiguous, rearranging the elements\nso that they are in a single, continuous block starting from the front.</p>\n<p>This operation might rearrange the internal representation of the elements\nto ensure they are contiguous. It clones the default element provided during\nthe destaque’s construction to fill any gaps if necessary.</p>\n<p>Returns a mutable slice to the now contiguous elements.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code>\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>q = DestaqueU8::&lt;<span class=\"kw\">_</span>, <span class=\"number\">5</span>&gt;::new(<span class=\"number\">0</span>).unwrap();\nq.push_back(<span class=\"number\">1</span>);\nq.push_back(<span class=\"number\">2</span>);\nq.push_front(<span class=\"number\">5</span>);\n<span class=\"macro\">assert_eq!</span>(q.as_slices(), (<span class=\"kw-2\">&amp;</span>[<span class=\"number\">5</span>][..], <span class=\"kw-2\">&amp;</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>][..]));\n\n<span class=\"macro\">assert_eq!</span>(q.make_contiguous(<span class=\"number\">0</span>), <span class=\"kw-2\">&amp;</span>[<span class=\"number\">5</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>]);\n<span class=\"macro\">assert_eq!</span>(q.as_slices(), (<span class=\"kw-2\">&amp;</span>[<span class=\"number\">5</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>][..], <span class=\"kw-2\">&amp;</span>[][..]));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_vec\" class=\"method\"><a class=\"src rightside\" href=\"src/devela/data/list/queue/destaque/methods/general.rs.html#1740\">Source</a><h4 class=\"code-header\">pub fn <a href=\"devela/all/struct.Destaque.html#tymethod.to_vec\" class=\"fn\">to_vec</a>(&amp;self) -&gt; <a class=\"struct\" href=\"devela/all/struct.Vec.html\" title=\"struct devela::all::Vec\">Vec</a>&lt;T&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Vec&lt;T&gt;\">ⓘ</a></h4></section><span class=\"item-info\"><div class=\"stab portability\">Available on <strong>crate feature <code>alloc</code></strong> only.</div></span></summary><div class=\"docblock\"><p>Returns the destaqued elements as a vector.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>q = DestaqueU8::&lt;<span class=\"kw\">_</span>, <span class=\"number\">5</span>&gt;::from([<span class=\"number\">3</span>, <span class=\"number\">4</span>]);\nq.push_front(<span class=\"number\">2</span>)<span class=\"question-mark\">?</span>;\nq.push_back(<span class=\"number\">5</span>)<span class=\"question-mark\">?</span>;\nq.push_front(<span class=\"number\">1</span>)<span class=\"question-mark\">?</span>;\n<span class=\"macro\">assert_eq!</span>[q.to_vec(), <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]];</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_array\" class=\"method\"><a class=\"src rightside\" href=\"src/devela/data/list/queue/destaque/methods/general.rs.html#1740\">Source</a><h4 class=\"code-header\">pub fn <a href=\"devela/all/struct.Destaque.html#tymethod.to_array\" class=\"fn\">to_array</a>&lt;const LEN: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt;(&amp;self) -&gt; <a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[T; LEN]</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Option&lt;[T; LEN]&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Returns some <code>LEN</code> destaqued elements as an array, or <code>None</code> if the destaque\nis empty, or there are not at least <code>LEN</code> elements.</p>\n<p>This is a non <code>alloc</code> alternative method to <a href=\"devela/all/struct.Destaque.html#method.to_vec\" title=\"method devela::all::Destaque::to_vec\"><code>to_vec</code></a>.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if the new <code>LEN</code> sized array can’t be allocated.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>q = DestaqueU8::&lt;<span class=\"kw\">_</span>, <span class=\"number\">5</span>&gt;::from([<span class=\"number\">3</span>, <span class=\"number\">4</span>]);\nq.push_front(<span class=\"number\">2</span>)<span class=\"question-mark\">?</span>;\nq.push_back(<span class=\"number\">5</span>)<span class=\"question-mark\">?</span>;\nq.push_front(<span class=\"number\">1</span>)<span class=\"question-mark\">?</span>;\n<span class=\"macro\">assert_eq!</span>[q.to_array::&lt;<span class=\"number\">5</span>&gt;(), <span class=\"prelude-val\">Some</span>([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>])];</code></pre></div>\n<h5 id=\"features\"><a class=\"doc-anchor\" href=\"#features\">§</a>Features</h5>\n<p>Makes use of the <code>unsafe_array</code> feature if enabled.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.dup_back\" class=\"method\"><a class=\"src rightside\" href=\"src/devela/data/list/queue/destaque/methods/general.rs.html#1740\">Source</a><h4 class=\"code-header\">pub fn <a href=\"devela/all/struct.Destaque.html#tymethod.dup_back\" class=\"fn\">dup_back</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"enum\" href=\"devela/all/enum.DataNotEnough.html\" title=\"enum devela::all::DataNotEnough\">DataNotEnough</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;(), DataNotEnough&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Duplicates the back element at the back</p>\n<p><code>( 1 2 -- 1 2 2 )</code></p>\n<h5 id=\"errors\"><a class=\"doc-anchor\" href=\"#errors\">§</a>Errors</h5>\n<p>Returns <a href=\"devela/all/struct.NotEnoughElements.html\" title=\"struct devela::all::NotEnoughElements\"><code>NotEnoughElements</code></a> if the destaque is empty\nor <a href=\"devela/all/struct.NotEnoughSpace.html\" title=\"struct devela::all::NotEnoughSpace\"><code>NotEnoughSpace</code></a> if it is full.</p>\n<h5 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>q = DestaqueU8::&lt;u8, <span class=\"number\">4</span>&gt;::from([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);\nq.dup_back()<span class=\"question-mark\">?</span>;\n<span class=\"macro\">assert_eq!</span>[q.to_array(), <span class=\"prelude-val\">Some</span>([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">3</span>])];</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.dup_front\" class=\"method\"><a class=\"src rightside\" href=\"src/devela/data/list/queue/destaque/methods/general.rs.html#1740\">Source</a><h4 class=\"code-header\">pub fn <a href=\"devela/all/struct.Destaque.html#tymethod.dup_front\" class=\"fn\">dup_front</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"enum\" href=\"devela/all/enum.DataNotEnough.html\" title=\"enum devela::all::DataNotEnough\">DataNotEnough</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;(), DataNotEnough&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Duplicates the front element at the front.</p>\n<p><code>( 1 2 -- 1 1 2 )</code></p>\n<h5 id=\"errors-1\"><a class=\"doc-anchor\" href=\"#errors-1\">§</a>Errors</h5>\n<p>Returns <a href=\"devela/all/struct.NotEnoughElements.html\" title=\"struct devela::all::NotEnoughElements\"><code>NotEnoughElements</code></a> if the destaque is empty\nor <a href=\"devela/all/struct.NotEnoughSpace.html\" title=\"struct devela::all::NotEnoughSpace\"><code>NotEnoughSpace</code></a> if it is full.</p>\n<h5 id=\"examples-4\"><a class=\"doc-anchor\" href=\"#examples-4\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>q = DestaqueU8::&lt;u8, <span class=\"number\">4</span>&gt;::from([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);\nq.dup_front()<span class=\"question-mark\">?</span>;\n<span class=\"macro\">assert_eq!</span>[q.to_array(), <span class=\"prelude-val\">Some</span>([<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>])];</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.dup2_back\" class=\"method\"><a class=\"src rightside\" href=\"src/devela/data/list/queue/destaque/methods/general.rs.html#1740\">Source</a><h4 class=\"code-header\">pub fn <a href=\"devela/all/struct.Destaque.html#tymethod.dup2_back\" class=\"fn\">dup2_back</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"enum\" href=\"devela/all/enum.DataNotEnough.html\" title=\"enum devela::all::DataNotEnough\">DataNotEnough</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;(), DataNotEnough&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Duplicates the back pair of elements, at the back.</p>\n<p><code>( 1 2 3 4 -- 1 2 3 4 3 4)</code></p>\n<h5 id=\"errors-2\"><a class=\"doc-anchor\" href=\"#errors-2\">§</a>Errors</h5>\n<p>Returns <a href=\"devela/all/struct.NotEnoughElements.html\" title=\"struct devela::all::NotEnoughElements\"><code>NotEnoughElements</code></a> if the destaque doesn’t have at least 2 elements,\nor <a href=\"devela/all/struct.NotEnoughSpace.html\" title=\"struct devela::all::NotEnoughSpace\"><code>NotEnoughSpace</code></a> if it doesn’t have space for 2 additional elements.</p>\n<h5 id=\"examples-5\"><a class=\"doc-anchor\" href=\"#examples-5\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>q = DestaqueU8::&lt;u8, <span class=\"number\">6</span>&gt;::from([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]);\nq.dup2_back()<span class=\"question-mark\">?</span>;\n<span class=\"macro\">assert_eq!</span>[q.to_array(), <span class=\"prelude-val\">Some</span>([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>])];</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.dup2_front\" class=\"method\"><a class=\"src rightside\" href=\"src/devela/data/list/queue/destaque/methods/general.rs.html#1740\">Source</a><h4 class=\"code-header\">pub fn <a href=\"devela/all/struct.Destaque.html#tymethod.dup2_front\" class=\"fn\">dup2_front</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"enum\" href=\"devela/all/enum.DataNotEnough.html\" title=\"enum devela::all::DataNotEnough\">DataNotEnough</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;(), DataNotEnough&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Duplicates the front pair of elements, at the front.</p>\n<p><code>( 1 2 3 4 -- 1 2 1 2 3 4)</code></p>\n<h5 id=\"errors-3\"><a class=\"doc-anchor\" href=\"#errors-3\">§</a>Errors</h5>\n<p>Returns <a href=\"devela/all/struct.NotEnoughElements.html\" title=\"struct devela::all::NotEnoughElements\"><code>NotEnoughElements</code></a> if the destaque doesn’t have at least 2 elements,\nor <a href=\"devela/all/struct.NotEnoughSpace.html\" title=\"struct devela::all::NotEnoughSpace\"><code>NotEnoughSpace</code></a> if it doesn’t have space for 2 additional elements.</p>\n<h5 id=\"examples-6\"><a class=\"doc-anchor\" href=\"#examples-6\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>q = DestaqueU8::&lt;u8, <span class=\"number\">6</span>&gt;::from([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]);\nq.dup2_front()<span class=\"question-mark\">?</span>;\n<span class=\"macro\">assert_eq!</span>[q.to_array(), <span class=\"prelude-val\">Some</span>([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>])];</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.over_back\" class=\"method\"><a class=\"src rightside\" href=\"src/devela/data/list/queue/destaque/methods/general.rs.html#1740\">Source</a><h4 class=\"code-header\">pub fn <a href=\"devela/all/struct.Destaque.html#tymethod.over_back\" class=\"fn\">over_back</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"enum\" href=\"devela/all/enum.DataNotEnough.html\" title=\"enum devela::all::DataNotEnough\">DataNotEnough</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;(), DataNotEnough&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Duplicates the second back element, at the back.</p>\n<p><code>( 1 2 3 4 -- 1 2 3 4 3 )</code></p>\n<h5 id=\"errors-4\"><a class=\"doc-anchor\" href=\"#errors-4\">§</a>Errors</h5>\n<p>Returns <a href=\"devela/all/struct.NotEnoughElements.html\" title=\"struct devela::all::NotEnoughElements\"><code>NotEnoughElements</code></a> if the destaque doesn’t have at least 2 elements,\nor <a href=\"devela/all/struct.NotEnoughSpace.html\" title=\"struct devela::all::NotEnoughSpace\"><code>NotEnoughSpace</code></a> if it is full.</p>\n<h5 id=\"examples-7\"><a class=\"doc-anchor\" href=\"#examples-7\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>q = DestaqueU8::&lt;u8, <span class=\"number\">7</span>&gt;::from([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]);\nq.over_back()<span class=\"question-mark\">?</span>;\n<span class=\"macro\">assert_eq!</span>[q.to_array(), <span class=\"prelude-val\">Some</span>([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">3</span>])];</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.over_front\" class=\"method\"><a class=\"src rightside\" href=\"src/devela/data/list/queue/destaque/methods/general.rs.html#1740\">Source</a><h4 class=\"code-header\">pub fn <a href=\"devela/all/struct.Destaque.html#tymethod.over_front\" class=\"fn\">over_front</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"enum\" href=\"devela/all/enum.DataNotEnough.html\" title=\"enum devela::all::DataNotEnough\">DataNotEnough</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;(), DataNotEnough&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Duplicates the second front element, at the front.</p>\n<p><code>( 1 2 3 4 -- 2 1 2 3 4 )</code></p>\n<h5 id=\"errors-5\"><a class=\"doc-anchor\" href=\"#errors-5\">§</a>Errors</h5>\n<p>Returns <a href=\"devela/all/struct.NotEnoughElements.html\" title=\"struct devela::all::NotEnoughElements\"><code>NotEnoughElements</code></a> if the destaque doesn’t have at least 2 elements,\nor <a href=\"devela/all/struct.NotEnoughSpace.html\" title=\"struct devela::all::NotEnoughSpace\"><code>NotEnoughSpace</code></a> if it is full.</p>\n<h5 id=\"examples-8\"><a class=\"doc-anchor\" href=\"#examples-8\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>q = DestaqueU8::&lt;u8, <span class=\"number\">7</span>&gt;::from([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]);\nq.over_front()<span class=\"question-mark\">?</span>;\n<span class=\"macro\">assert_eq!</span>[q.to_array(), <span class=\"prelude-val\">Some</span>([<span class=\"number\">2</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>])];</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.over2_back\" class=\"method\"><a class=\"src rightside\" href=\"src/devela/data/list/queue/destaque/methods/general.rs.html#1740\">Source</a><h4 class=\"code-header\">pub fn <a href=\"devela/all/struct.Destaque.html#tymethod.over2_back\" class=\"fn\">over2_back</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"enum\" href=\"devela/all/enum.DataNotEnough.html\" title=\"enum devela::all::DataNotEnough\">DataNotEnough</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;(), DataNotEnough&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Duplicates the second back pair of elements, at the back.</p>\n<p><code>( 1 2 3 4 5 6 7 8 -- 1 2 3 4 5 6 7 8 5 6 )</code></p>\n<h5 id=\"errors-6\"><a class=\"doc-anchor\" href=\"#errors-6\">§</a>Errors</h5>\n<p>Returns <a href=\"devela/all/struct.NotEnoughElements.html\" title=\"struct devela::all::NotEnoughElements\"><code>NotEnoughElements</code></a> if the destaque doesn’t have at least 4 elements,\nor <a href=\"devela/all/struct.NotEnoughSpace.html\" title=\"struct devela::all::NotEnoughSpace\"><code>NotEnoughSpace</code></a> if it doesn’t have space for 2 additional elements.</p>\n<h5 id=\"examples-9\"><a class=\"doc-anchor\" href=\"#examples-9\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>q = DestaqueU8::&lt;u8, <span class=\"number\">8</span>&gt;::from([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>]);\nq.over2_back()<span class=\"question-mark\">?</span>;\n<span class=\"macro\">assert_eq!</span>[q.to_array(), <span class=\"prelude-val\">Some</span>([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>])];</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.over2_front\" class=\"method\"><a class=\"src rightside\" href=\"src/devela/data/list/queue/destaque/methods/general.rs.html#1740\">Source</a><h4 class=\"code-header\">pub fn <a href=\"devela/all/struct.Destaque.html#tymethod.over2_front\" class=\"fn\">over2_front</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"enum\" href=\"devela/all/enum.DataNotEnough.html\" title=\"enum devela::all::DataNotEnough\">DataNotEnough</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;(), DataNotEnough&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Duplicates the second front pair of elements, at the front.</p>\n<p><code>( 1 2 3 4 5 6 7 8 -- 3 4 1 2 3 4 5 6 7 8 )</code></p>\n<h5 id=\"errors-7\"><a class=\"doc-anchor\" href=\"#errors-7\">§</a>Errors</h5>\n<p>Returns <a href=\"devela/all/struct.NotEnoughElements.html\" title=\"struct devela::all::NotEnoughElements\"><code>NotEnoughElements</code></a> if the destaque doesn’t have at least 4 elements,\nor <a href=\"devela/all/struct.NotEnoughSpace.html\" title=\"struct devela::all::NotEnoughSpace\"><code>NotEnoughSpace</code></a> if it doesn’t have space for 2 additional elements.</p>\n<h5 id=\"examples-10\"><a class=\"doc-anchor\" href=\"#examples-10\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>q = DestaqueU8::&lt;u8, <span class=\"number\">8</span>&gt;::from([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>]);\nq.over2_front()<span class=\"question-mark\">?</span>;\n<span class=\"macro\">assert_eq!</span>[q.to_array(), <span class=\"prelude-val\">Some</span>([<span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>])];</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.tuck_back\" class=\"method\"><a class=\"src rightside\" href=\"src/devela/data/list/queue/destaque/methods/general.rs.html#1740\">Source</a><h4 class=\"code-header\">pub fn <a href=\"devela/all/struct.Destaque.html#tymethod.tuck_back\" class=\"fn\">tuck_back</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"enum\" href=\"devela/all/enum.DataNotEnough.html\" title=\"enum devela::all::DataNotEnough\">DataNotEnough</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;(), DataNotEnough&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Duplicates the back element, before the second back element.</p>\n<p><code>( 1 2 3 4 -- 1 2 4 3 4 )</code></p>\n<h5 id=\"errors-8\"><a class=\"doc-anchor\" href=\"#errors-8\">§</a>Errors</h5>\n<p>Returns <a href=\"devela/all/struct.NotEnoughElements.html\" title=\"struct devela::all::NotEnoughElements\"><code>NotEnoughElements</code></a> if the destaque doesn’t have at least 2 elements,\nor <a href=\"devela/all/struct.NotEnoughSpace.html\" title=\"struct devela::all::NotEnoughSpace\"><code>NotEnoughSpace</code></a> if it is full.</p>\n<h5 id=\"examples-11\"><a class=\"doc-anchor\" href=\"#examples-11\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code>\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>q = DestaqueU8::&lt;u8, <span class=\"number\">7</span>&gt;::from([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]);\nq.tuck_back()<span class=\"question-mark\">?</span>;\n<span class=\"macro\">assert_eq!</span>[q.to_array(), <span class=\"prelude-val\">Some</span>([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>])];</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.tuck_front\" class=\"method\"><a class=\"src rightside\" href=\"src/devela/data/list/queue/destaque/methods/general.rs.html#1740\">Source</a><h4 class=\"code-header\">pub fn <a href=\"devela/all/struct.Destaque.html#tymethod.tuck_front\" class=\"fn\">tuck_front</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"enum\" href=\"devela/all/enum.DataNotEnough.html\" title=\"enum devela::all::DataNotEnough\">DataNotEnough</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;(), DataNotEnough&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Duplicates the front element, after the second front element.</p>\n<p><code>( 1 2 3 4 -- 1 2 1 3 4 )</code></p>\n<h5 id=\"errors-9\"><a class=\"doc-anchor\" href=\"#errors-9\">§</a>Errors</h5>\n<p>Returns <a href=\"devela/all/struct.NotEnoughElements.html\" title=\"struct devela::all::NotEnoughElements\"><code>NotEnoughElements</code></a> if the destaque doesn’t have at least 2 elements,\nor <a href=\"devela/all/struct.NotEnoughSpace.html\" title=\"struct devela::all::NotEnoughSpace\"><code>NotEnoughSpace</code></a> if it is full.</p>\n<h5 id=\"examples-12\"><a class=\"doc-anchor\" href=\"#examples-12\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>q = DestaqueU8::&lt;u8, <span class=\"number\">7</span>&gt;::from([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]);\nq.tuck_front()<span class=\"question-mark\">?</span>;\n<span class=\"macro\">assert_eq!</span>[q.to_array(), <span class=\"prelude-val\">Some</span>([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>])];</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.tuck2_back\" class=\"method\"><a class=\"src rightside\" href=\"src/devela/data/list/queue/destaque/methods/general.rs.html#1740\">Source</a><h4 class=\"code-header\">pub fn <a href=\"devela/all/struct.Destaque.html#tymethod.tuck2_back\" class=\"fn\">tuck2_back</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"enum\" href=\"devela/all/enum.DataNotEnough.html\" title=\"enum devela::all::DataNotEnough\">DataNotEnough</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;(), DataNotEnough&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Duplicates the back pair of elements,\nbefore the second back pair of elements.</p>\n<p><code>( 1 2 3 4 5 6 7 8 -- 1 2 3 4 7 8 5 6 7 8 )</code></p>\n<h5 id=\"errors-10\"><a class=\"doc-anchor\" href=\"#errors-10\">§</a>Errors</h5>\n<p>Returns <a href=\"devela/all/struct.NotEnoughElements.html\" title=\"struct devela::all::NotEnoughElements\"><code>NotEnoughElements</code></a> if the destaque doesn’t have at least 4 elements,\nor <a href=\"devela/all/struct.NotEnoughSpace.html\" title=\"struct devela::all::NotEnoughSpace\"><code>NotEnoughSpace</code></a> if it doesn’t have space for 2 additional elements.</p>\n<h5 id=\"examples-13\"><a class=\"doc-anchor\" href=\"#examples-13\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>q = DestaqueU8::&lt;u8, <span class=\"number\">7</span>&gt;::from([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]);\nq.tuck2_back()<span class=\"question-mark\">?</span>;\n<span class=\"macro\">assert_eq!</span>[q.to_array(), <span class=\"prelude-val\">Some</span>([<span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>])];</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.tuck2_front\" class=\"method\"><a class=\"src rightside\" href=\"src/devela/data/list/queue/destaque/methods/general.rs.html#1740\">Source</a><h4 class=\"code-header\">pub fn <a href=\"devela/all/struct.Destaque.html#tymethod.tuck2_front\" class=\"fn\">tuck2_front</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"enum\" href=\"devela/all/enum.DataNotEnough.html\" title=\"enum devela::all::DataNotEnough\">DataNotEnough</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;(), DataNotEnough&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Duplicates the front pair of elements,\nafter the second front pair of elements.</p>\n<p><code>( 1 2 3 4 5 6 7 8 -- 1 2 3 4 1 2 5 6 7 8 )</code></p>\n<h5 id=\"errors-11\"><a class=\"doc-anchor\" href=\"#errors-11\">§</a>Errors</h5>\n<p>Returns <a href=\"devela/all/struct.NotEnoughElements.html\" title=\"struct devela::all::NotEnoughElements\"><code>NotEnoughElements</code></a> if the destaque doesn’t have at least 4 elements,\nor <a href=\"devela/all/struct.NotEnoughSpace.html\" title=\"struct devela::all::NotEnoughSpace\"><code>NotEnoughSpace</code></a> if it doesn’t have space for 2 additional elements.</p>\n<h5 id=\"examples-14\"><a class=\"doc-anchor\" href=\"#examples-14\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>q = DestaqueU8::&lt;u8, <span class=\"number\">7</span>&gt;::from([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]);\nq.tuck2_front()<span class=\"question-mark\">?</span>;\n<span class=\"macro\">assert_eq!</span>[q.to_array(), <span class=\"prelude-val\">Some</span>([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">5</span>])];</code></pre></div>\n</div></details></div></details>",0,"devela::data::list::queue::destaque::definitions::DestaqueU8"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CI%3E-for-Destaque%3CT,+CAP,+u8%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/devela/data/list/queue/destaque/impl_traits.rs.html#279\">Source</a><a href=\"#impl-From%3CI%3E-for-Destaque%3CT,+CAP,+u8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T: <a class=\"trait\" href=\"devela/code/trait.Default.html\" title=\"trait devela::code::Default\">Default</a>, I, const CAP: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"devela/code/trait.From.html\" title=\"trait devela::code::From\">From</a>&lt;I&gt; for <a class=\"struct\" href=\"devela/all/struct.Destaque.html\" title=\"struct devela::all::Destaque\">Destaque</a>&lt;T, CAP, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>, <a class=\"type\" href=\"devela/all/type.Bare.html\" title=\"type devela::all::Bare\">Bare</a>&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"devela/all/trait.IteratorInto.html\" title=\"trait devela::all::IteratorInto\">IntoIterator</a>&lt;Item = T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/data/list/queue/destaque/impl_traits.rs.html#279\">Source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/code/trait.From.html#tymethod.from\" class=\"fn\">from</a>(iterator: I) -&gt; <a class=\"struct\" href=\"devela/all/struct.Destaque.html\" title=\"struct devela::all::Destaque\">Destaque</a>&lt;T, CAP, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>, <a class=\"type\" href=\"devela/all/type.Bare.html\" title=\"type devela::all::Bare\">Bare</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns a queue filled with an iterator, in the stack.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>q: DestaqueU8&lt;<span class=\"kw\">_</span>, <span class=\"number\">3</span>&gt; = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>].into();</code></pre></div>\n</div></details></div></details>","From<I>","devela::data::list::queue::destaque::definitions::DestaqueU8"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CI%3E-for-Destaque%3CT,+CAP,+u8,+Boxed%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/devela/data/list/queue/destaque/impl_traits.rs.html#279\">Source</a><a href=\"#impl-From%3CI%3E-for-Destaque%3CT,+CAP,+u8,+Boxed%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T: <a class=\"trait\" href=\"devela/code/trait.Default.html\" title=\"trait devela::code::Default\">Default</a>, I, const CAP: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"devela/code/trait.From.html\" title=\"trait devela::code::From\">From</a>&lt;I&gt; for <a class=\"struct\" href=\"devela/all/struct.Destaque.html\" title=\"struct devela::all::Destaque\">Destaque</a>&lt;T, CAP, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>, <a class=\"struct\" href=\"devela/all/struct.Boxed.html\" title=\"struct devela::all::Boxed\">Boxed</a>&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"devela/all/trait.IteratorInto.html\" title=\"trait devela::all::IteratorInto\">IntoIterator</a>&lt;Item = T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/data/list/queue/destaque/impl_traits.rs.html#279\">Source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/code/trait.From.html#tymethod.from\" class=\"fn\">from</a>(iterator: I) -&gt; <a class=\"struct\" href=\"devela/all/struct.Destaque.html\" title=\"struct devela::all::Destaque\">Destaque</a>&lt;T, CAP, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>, <a class=\"struct\" href=\"devela/all/struct.Boxed.html\" title=\"struct devela::all::Boxed\">Boxed</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns a queue filled with an iterator, in the heap.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>q: DestaqueU8&lt;<span class=\"kw\">_</span>, <span class=\"number\">3</span>, Boxed&gt; = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>].into();</code></pre></div>\n</div></details></div></details>","From<I>","devela::data::list::queue::destaque::definitions::DestaqueU8"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Ord-for-Destaque%3CT,+CAP,+u8,+S%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/devela/data/list/queue/destaque/impl_traits.rs.html#279\">Source</a><a href=\"#impl-Ord-for-Destaque%3CT,+CAP,+u8,+S%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T: <a class=\"trait\" href=\"devela/all/trait.Ord.html\" title=\"trait devela::all::Ord\">Ord</a>, const CAP: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, S: <a class=\"trait\" href=\"devela/all/trait.Storage.html\" title=\"trait devela::all::Storage\">Storage</a>&gt; <a class=\"trait\" href=\"devela/all/trait.Ord.html\" title=\"trait devela::all::Ord\">Ord</a> for <a class=\"struct\" href=\"devela/all/struct.Destaque.html\" title=\"struct devela::all::Destaque\">Destaque</a>&lt;T, CAP, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>, S&gt;<div class=\"where\">where\n    S::<a class=\"associatedtype\" href=\"devela/all/trait.Storage.html#associatedtype.Stored\" title=\"type devela::all::Storage::Stored\">Stored</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[T; CAP]</a>&gt;: <a class=\"trait\" href=\"devela/all/trait.Ord.html\" title=\"trait devela::all::Ord\">Ord</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/data/list/queue/destaque/impl_traits.rs.html#279\">Source</a><a href=\"#method.cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Ord.html#tymethod.cmp\" class=\"fn\">cmp</a>(&amp;self, other: &amp;Self) -&gt; <a class=\"enum\" href=\"devela/all/enum.Ordering.html\" title=\"enum devela::all::Ordering\">Ordering</a></h4></section></summary><div class='docblock'>This method returns an <a href=\"devela/all/enum.Ordering.html\" title=\"enum devela::all::Ordering\"><code>Ordering</code></a> between <code>self</code> and <code>other</code>. <a href=\"devela/all/trait.Ord.html#tymethod.cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.max\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1013-1015\">Source</a></span><a href=\"#method.max\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Ord.html#method.max\" class=\"fn\">max</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"devela/all/trait.Sized.html\" title=\"trait devela::all::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Compares and returns the maximum of two values. <a href=\"devela/all/trait.Ord.html#method.max\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.min\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1052-1054\">Source</a></span><a href=\"#method.min\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Ord.html#method.min\" class=\"fn\">min</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"devela/all/trait.Sized.html\" title=\"trait devela::all::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Compares and returns the minimum of two values. <a href=\"devela/all/trait.Ord.html#method.min\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clamp\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.50.0\">1.50.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1078-1080\">Source</a></span><a href=\"#method.clamp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Ord.html#method.clamp\" class=\"fn\">clamp</a>(self, min: Self, max: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"devela/all/trait.Sized.html\" title=\"trait devela::all::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Restrict a value to a certain interval. <a href=\"devela/all/trait.Ord.html#method.clamp\">Read more</a></div></details></div></details>","Ord","devela::data::list::queue::destaque::definitions::DestaqueU8"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq-for-Destaque%3CT,+CAP,+IDX,+S%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/devela/data/list/queue/destaque/impl_traits.rs.html#320-331\">Source</a><a href=\"#impl-PartialEq-for-Destaque%3CT,+CAP,+IDX,+S%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T: <a class=\"trait\" href=\"devela/all/trait.PartialEq.html\" title=\"trait devela::all::PartialEq\">PartialEq</a>, const CAP: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, IDX: <a class=\"trait\" href=\"devela/all/trait.PartialEq.html\" title=\"trait devela::all::PartialEq\">PartialEq</a>, S: <a class=\"trait\" href=\"devela/all/trait.Storage.html\" title=\"trait devela::all::Storage\">Storage</a>&gt; <a class=\"trait\" href=\"devela/all/trait.PartialEq.html\" title=\"trait devela::all::PartialEq\">PartialEq</a> for <a class=\"struct\" href=\"devela/all/struct.Destaque.html\" title=\"struct devela::all::Destaque\">Destaque</a>&lt;T, CAP, IDX, S&gt;<div class=\"where\">where\n    S::<a class=\"associatedtype\" href=\"devela/all/trait.Storage.html#associatedtype.Stored\" title=\"type devela::all::Storage::Stored\">Stored</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[T; CAP]</a>&gt;: <a class=\"trait\" href=\"devela/all/trait.PartialEq.html\" title=\"trait devela::all::PartialEq\">PartialEq</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/data/list/queue/destaque/impl_traits.rs.html#325-330\">Source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;Self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#265\">Source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq","devela::data::list::queue::destaque::definitions::DestaqueU8"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialOrd-for-Destaque%3CT,+CAP,+u8,+S%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/devela/data/list/queue/destaque/impl_traits.rs.html#279\">Source</a><a href=\"#impl-PartialOrd-for-Destaque%3CT,+CAP,+u8,+S%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T: <a class=\"trait\" href=\"devela/all/trait.PartialOrd.html\" title=\"trait devela::all::PartialOrd\">PartialOrd</a>, const CAP: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, S: <a class=\"trait\" href=\"devela/all/trait.Storage.html\" title=\"trait devela::all::Storage\">Storage</a>&gt; <a class=\"trait\" href=\"devela/all/trait.PartialOrd.html\" title=\"trait devela::all::PartialOrd\">PartialOrd</a> for <a class=\"struct\" href=\"devela/all/struct.Destaque.html\" title=\"struct devela::all::Destaque\">Destaque</a>&lt;T, CAP, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>, S&gt;<div class=\"where\">where\n    S::<a class=\"associatedtype\" href=\"devela/all/trait.Storage.html#associatedtype.Stored\" title=\"type devela::all::Storage::Stored\">Stored</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[T; CAP]</a>&gt;: <a class=\"trait\" href=\"devela/all/trait.PartialOrd.html\" title=\"trait devela::all::PartialOrd\">PartialOrd</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.partial_cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/data/list/queue/destaque/impl_traits.rs.html#279\">Source</a><a href=\"#method.partial_cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: &amp;Self) -&gt; <a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;<a class=\"enum\" href=\"devela/all/enum.Ordering.html\" title=\"enum devela::all::Ordering\">Ordering</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Option&lt;Ordering&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"devela/all/trait.PartialOrd.html#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1387\">Source</a></span><a href=\"#method.lt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"devela/all/trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.le\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1405\">Source</a></span><a href=\"#method.le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the\n<code>&lt;=</code> operator. <a href=\"devela/all/trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.gt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1423\">Source</a></span><a href=\"#method.gt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code>\noperator. <a href=\"devela/all/trait.PartialOrd.html#method.gt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ge\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1441\">Source</a></span><a href=\"#method.ge\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by\nthe <code>&gt;=</code> operator. <a href=\"devela/all/trait.PartialOrd.html#method.ge\">Read more</a></div></details></div></details>","PartialOrd","devela::data::list::queue::destaque::definitions::DestaqueU8"],["<section id=\"impl-Copy-for-Destaque%3CT,+CAP,+IDX,+S%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/devela/data/list/queue/destaque/impl_traits.rs.html#297-300\">Source</a><a href=\"#impl-Copy-for-Destaque%3CT,+CAP,+IDX,+S%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T: <a class=\"trait\" href=\"devela/all/trait.Copy.html\" title=\"trait devela::all::Copy\">Copy</a>, const CAP: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, IDX: <a class=\"trait\" href=\"devela/all/trait.Copy.html\" title=\"trait devela::all::Copy\">Copy</a>, S: <a class=\"trait\" href=\"devela/all/trait.Storage.html\" title=\"trait devela::all::Storage\">Storage</a>&gt; <a class=\"trait\" href=\"devela/all/trait.Copy.html\" title=\"trait devela::all::Copy\">Copy</a> for <a class=\"struct\" href=\"devela/all/struct.Destaque.html\" title=\"struct devela::all::Destaque\">Destaque</a>&lt;T, CAP, IDX, S&gt;<div class=\"where\">where\n    S::<a class=\"associatedtype\" href=\"devela/all/trait.Storage.html#associatedtype.Stored\" title=\"type devela::all::Storage::Stored\">Stored</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[T; CAP]</a>&gt;: <a class=\"trait\" href=\"devela/all/trait.Copy.html\" title=\"trait devela::all::Copy\">Copy</a>,</div></h3></section>","Copy","devela::data::list::queue::destaque::definitions::DestaqueU8"],["<section id=\"impl-Destaque%3CT,+CAP,+u8%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/devela/data/list/queue/destaque/methods/general.rs.html#1740\">Source</a><a href=\"#impl-Destaque%3CT,+CAP,+u8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T: <a class=\"trait\" href=\"devela/code/trait.Clone.html\" title=\"trait devela::code::Clone\">Clone</a>, const CAP: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt; <a class=\"struct\" href=\"devela/all/struct.Destaque.html\" title=\"struct devela::all::Destaque\">Destaque</a>&lt;T, CAP, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>, <a class=\"type\" href=\"devela/all/type.Bare.html\" title=\"type devela::all::Bare\">Bare</a>&gt;</h3><div class=\"item-info\"><div class=\"stab empty-impl\">This impl block contains no items.</div></div><div class=\"docblock\"><h4 id=\"methods-for-destaqueu8\"><a class=\"doc-anchor\" href=\"#methods-for-destaqueu8\">§</a>Methods for <code>DestaqueU8</code></h4>\n<hr />\n<hr />\n</div></section>",0,"devela::data::list::queue::destaque::definitions::DestaqueU8"],["<section id=\"impl-Eq-for-Destaque%3CT,+CAP,+IDX,+S%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/devela/data/list/queue/destaque/impl_traits.rs.html#333-336\">Source</a><a href=\"#impl-Eq-for-Destaque%3CT,+CAP,+IDX,+S%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T: <a class=\"trait\" href=\"devela/all/trait.Eq.html\" title=\"trait devela::all::Eq\">Eq</a>, const CAP: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, IDX: <a class=\"trait\" href=\"devela/all/trait.Eq.html\" title=\"trait devela::all::Eq\">Eq</a>, S: <a class=\"trait\" href=\"devela/all/trait.Storage.html\" title=\"trait devela::all::Storage\">Storage</a>&gt; <a class=\"trait\" href=\"devela/all/trait.Eq.html\" title=\"trait devela::all::Eq\">Eq</a> for <a class=\"struct\" href=\"devela/all/struct.Destaque.html\" title=\"struct devela::all::Destaque\">Destaque</a>&lt;T, CAP, IDX, S&gt;<div class=\"where\">where\n    S::<a class=\"associatedtype\" href=\"devela/all/trait.Storage.html#associatedtype.Stored\" title=\"type devela::all::Storage::Stored\">Stored</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[T; CAP]</a>&gt;: <a class=\"trait\" href=\"devela/all/trait.Eq.html\" title=\"trait devela::all::Eq\">Eq</a>,</div></h3></section>","Eq","devela::data::list::queue::destaque::definitions::DestaqueU8"]]]]);
    if (window.register_type_impls) {
        window.register_type_impls(type_impls);
    } else {
        window.pending_type_impls = type_impls;
    }
})()
//{"start":55,"fragment_lengths":[193358]}