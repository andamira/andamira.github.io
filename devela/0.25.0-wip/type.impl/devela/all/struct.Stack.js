(function() {
    var type_impls = Object.fromEntries([["devela",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-Stack%3CT,+CAP,+IDX,+S%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/devela/data/list/stack/stack/impl_traits.rs.html#175-182\">Source</a><a href=\"#impl-Clone-for-Stack%3CT,+CAP,+IDX,+S%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T: <a class=\"trait\" href=\"devela/code/trait.Clone.html\" title=\"trait devela::code::Clone\">Clone</a>, const CAP: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, IDX: <a class=\"trait\" href=\"devela/all/trait.Copy.html\" title=\"trait devela::all::Copy\">Copy</a>, S: <a class=\"trait\" href=\"devela/all/trait.Storage.html\" title=\"trait devela::all::Storage\">Storage</a>&gt; <a class=\"trait\" href=\"devela/code/trait.Clone.html\" title=\"trait devela::code::Clone\">Clone</a> for <a class=\"struct\" href=\"devela/all/struct.Stack.html\" title=\"struct devela::all::Stack\">Stack</a>&lt;T, CAP, IDX, S&gt;<div class=\"where\">where\n    S::<a class=\"associatedtype\" href=\"devela/all/trait.Storage.html#associatedtype.Stored\" title=\"type devela::all::Storage::Stored\">Stored</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[T; CAP]</a>&gt;: <a class=\"trait\" href=\"devela/code/trait.Clone.html\" title=\"trait devela::code::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/data/list/stack/stack/impl_traits.rs.html#179-181\">Source</a><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/code/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; Self</h4></section></summary><div class='docblock'>Returns a duplicate of the value. <a href=\"devela/code/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/clone.rs.html#246-248\">Source</a></span><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/code/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: &amp;Self)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a href=\"devela/code/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details>","Clone","devela::data::list::stack::stack::definitions::StackU8"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ConstDefault-for-Stack%3CT,+CAP,+IDX%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/devela/data/list/stack/stack/impl_traits.rs.html#230-236\">Source</a><a href=\"#impl-ConstDefault-for-Stack%3CT,+CAP,+IDX%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T: <a class=\"trait\" href=\"devela/code/trait.ConstDefault.html\" title=\"trait devela::code::ConstDefault\">ConstDefault</a>, const CAP: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, IDX: <a class=\"trait\" href=\"devela/code/trait.ConstDefault.html\" title=\"trait devela::code::ConstDefault\">ConstDefault</a>&gt; <a class=\"trait\" href=\"devela/code/trait.ConstDefault.html\" title=\"trait devela::code::ConstDefault\">ConstDefault</a> for <a class=\"struct\" href=\"devela/all/struct.Stack.html\" title=\"struct devela::all::Stack\">Stack</a>&lt;T, CAP, IDX, <a class=\"type\" href=\"devela/all/type.Bare.html\" title=\"type devela::all::Bare\">Bare</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedconstant.DEFAULT\" class=\"associatedconstant trait-impl\"><a class=\"src rightside\" href=\"src/devela/data/list/stack/stack/impl_traits.rs.html#235\">Source</a><a href=\"#associatedconstant.DEFAULT\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a href=\"devela/code/trait.ConstDefault.html#associatedconstant.DEFAULT\" class=\"constant\">DEFAULT</a>: Self</h4></section></summary><div class=\"docblock\"><p>Returns an empty stack, allocated in the stack,\nusing the default value to fill the remaining free data.</p>\n</div></details></div></details>","ConstDefault","devela::data::list::stack::stack::definitions::StackU8"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-DataCollection-for-Stack%3CT,+LEN,+u8,+S%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/devela/data/list/stack/stack/impl_traits.rs.html#172\">Source</a><a href=\"#impl-DataCollection-for-Stack%3CT,+LEN,+u8,+S%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, const LEN: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, S: <a class=\"trait\" href=\"devela/all/trait.Storage.html\" title=\"trait devela::all::Storage\">Storage</a>&gt; <a class=\"trait\" href=\"devela/data/trait.DataCollection.html\" title=\"trait devela::data::DataCollection\">DataCollection</a> for <a class=\"struct\" href=\"devela/all/struct.Stack.html\" title=\"struct devela::all::Stack\">Stack</a>&lt;T, LEN, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>, S&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Element\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/devela/data/list/stack/stack/impl_traits.rs.html#172\">Source</a><a href=\"#associatedtype.Element\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"devela/data/trait.DataCollection.html#associatedtype.Element\" class=\"associatedtype\">Element</a> = T</h4></section></summary><div class='docblock'>The element type of the collection.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.collection_capacity\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/data/list/stack/stack/impl_traits.rs.html#172\">Source</a><a href=\"#method.collection_capacity\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/data/trait.DataCollection.html#method.collection_capacity\" class=\"fn\">collection_capacity</a>(&amp;self) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, <a class=\"enum\" href=\"devela/all/enum.NotAvailable.html\" title=\"enum devela::all::NotAvailable\">NotAvailable</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;usize, NotAvailable&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Returns the reserved capacity for elements in the collection.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.collection_len\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/data/list/stack/stack/impl_traits.rs.html#172\">Source</a><a href=\"#method.collection_len\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/data/trait.DataCollection.html#method.collection_len\" class=\"fn\">collection_len</a>(&amp;self) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, <a class=\"enum\" href=\"devela/all/enum.NotAvailable.html\" title=\"enum devela::all::NotAvailable\">NotAvailable</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;usize, NotAvailable&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Returns the current number of elements in the collection.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.collection_is_empty\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/data/list/stack/stack/impl_traits.rs.html#172\">Source</a><a href=\"#method.collection_is_empty\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/data/trait.DataCollection.html#method.collection_is_empty\" class=\"fn\">collection_is_empty</a>(&amp;self) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a>, <a class=\"enum\" href=\"devela/all/enum.NotAvailable.html\" title=\"enum devela::all::NotAvailable\">NotAvailable</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;bool, NotAvailable&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Returns <code>true</code> if the collection is empty, <code>false</code> if it’s not.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.collection_is_full\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/data/list/stack/stack/impl_traits.rs.html#172\">Source</a><a href=\"#method.collection_is_full\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/data/trait.DataCollection.html#method.collection_is_full\" class=\"fn\">collection_is_full</a>(&amp;self) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a>, <a class=\"enum\" href=\"devela/all/enum.NotAvailable.html\" title=\"enum devela::all::NotAvailable\">NotAvailable</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;bool, NotAvailable&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Returns <code>true</code> if the collection is full, <code>false</code> if it’s not.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.collection_contains\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/data/list/stack/stack/impl_traits.rs.html#172\">Source</a><a href=\"#method.collection_contains\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/data/trait.DataCollection.html#method.collection_contains\" class=\"fn\">collection_contains</a>(\n    &amp;self,\n    element: Self::<a class=\"associatedtype\" href=\"devela/data/trait.DataCollection.html#associatedtype.Element\" title=\"type devela::data::DataCollection::Element\">Element</a>,\n) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a>, <a class=\"enum\" href=\"devela/all/enum.NotAvailable.html\" title=\"enum devela::all::NotAvailable\">NotAvailable</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;bool, NotAvailable&gt;\">ⓘ</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"devela/all/trait.PartialEq.html\" title=\"trait devela::all::PartialEq\">PartialEq</a>,</div></h4></section></summary><div class='docblock'>Returns <code>true</code> if the collection contains the given <code>element</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.collection_count\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/data/list/stack/stack/impl_traits.rs.html#172\">Source</a><a href=\"#method.collection_count\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/data/trait.DataCollection.html#method.collection_count\" class=\"fn\">collection_count</a>(\n    &amp;self,\n    element: &amp;Self::<a class=\"associatedtype\" href=\"devela/data/trait.DataCollection.html#associatedtype.Element\" title=\"type devela::data::DataCollection::Element\">Element</a>,\n) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, <a class=\"enum\" href=\"devela/all/enum.NotAvailable.html\" title=\"enum devela::all::NotAvailable\">NotAvailable</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;usize, NotAvailable&gt;\">ⓘ</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"devela/all/trait.PartialEq.html\" title=\"trait devela::all::PartialEq\">PartialEq</a>,</div></h4></section></summary><div class='docblock'>Counts the number of times a given <code>element</code> appears in the collection.</div></details></div></details>","DataCollection","devela::data::list::stack::stack::definitions::StackU8"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-DataStack-for-Stack%3CT,+CAP,+u8,+S%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/devela/data/list/stack/stack/impl_traits.rs.html#172\">Source</a><a href=\"#impl-DataStack-for-Stack%3CT,+CAP,+u8,+S%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, const CAP: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, S: <a class=\"trait\" href=\"devela/all/trait.Storage.html\" title=\"trait devela::all::Storage\">Storage</a>&gt; <a class=\"trait\" href=\"devela/all/trait.DataStack.html\" title=\"trait devela::all::DataStack\">DataStack</a> for <a class=\"struct\" href=\"devela/all/struct.Stack.html\" title=\"struct devela::all::Stack\">Stack</a>&lt;T, CAP, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>, S&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.stack_pop\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/data/list/stack/stack/impl_traits.rs.html#172\">Source</a><a href=\"#method.stack_pop\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.DataStack.html#tymethod.stack_pop\" class=\"fn\">stack_pop</a>(\n    &amp;mut self,\n) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;&lt;Self as <a class=\"trait\" href=\"devela/data/trait.DataCollection.html\" title=\"trait devela::data::DataCollection\">DataCollection</a>&gt;::<a class=\"associatedtype\" href=\"devela/data/trait.DataCollection.html#associatedtype.Element\" title=\"type devela::data::DataCollection::Element\">Element</a>, <a class=\"struct\" href=\"devela/all/struct.NotEnoughElements.html\" title=\"struct devela::all::NotEnoughElements\">NotEnoughElements</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;&lt;Self as DataCollection&gt;::Element, NotEnoughElements&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Remove an element from the (back of the) stack.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.stack_push\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/data/list/stack/stack/impl_traits.rs.html#172\">Source</a><a href=\"#method.stack_push\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.DataStack.html#tymethod.stack_push\" class=\"fn\">stack_push</a>(\n    &amp;mut self,\n    element: &lt;Self as <a class=\"trait\" href=\"devela/data/trait.DataCollection.html\" title=\"trait devela::data::DataCollection\">DataCollection</a>&gt;::<a class=\"associatedtype\" href=\"devela/data/trait.DataCollection.html#associatedtype.Element\" title=\"type devela::data::DataCollection::Element\">Element</a>,\n) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"devela/all/struct.NotEnoughSpace.html\" title=\"struct devela::all::NotEnoughSpace\">NotEnoughSpace</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;(), NotEnoughSpace&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Add an element to the (back of the) stack.</div></details></div></details>","DataStack","devela::data::list::stack::stack::definitions::StackU8"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-Stack%3CT,+CAP,+IDX,+S%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/devela/data/list/stack/stack/impl_traits.rs.html#191-203\">Source</a><a href=\"#impl-Debug-for-Stack%3CT,+CAP,+IDX,+S%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T: <a class=\"trait\" href=\"devela/all/trait.Debug.html\" title=\"trait devela::all::Debug\">Debug</a>, const CAP: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, IDX: <a class=\"trait\" href=\"devela/all/trait.Debug.html\" title=\"trait devela::all::Debug\">Debug</a>, S: <a class=\"trait\" href=\"devela/all/trait.Storage.html\" title=\"trait devela::all::Storage\">Storage</a>&gt; <a class=\"trait\" href=\"devela/all/trait.Debug.html\" title=\"trait devela::all::Debug\">Debug</a> for <a class=\"struct\" href=\"devela/all/struct.Stack.html\" title=\"struct devela::all::Stack\">Stack</a>&lt;T, CAP, IDX, S&gt;<div class=\"where\">where\n    S::<a class=\"associatedtype\" href=\"devela/all/trait.Storage.html#associatedtype.Stored\" title=\"type devela::all::Storage::Stored\">Stored</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[T; CAP]</a>&gt;: <a class=\"trait\" href=\"devela/all/trait.Debug.html\" title=\"trait devela::all::Debug\">Debug</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/data/list/stack/stack/impl_traits.rs.html#196-202\">Source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"devela/all/struct.Formatter.html\" title=\"struct devela::all::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"type\" href=\"https://doc.rust-lang.org/nightly/core/fmt/type.Result.html\" title=\"type core::fmt::Result\">Result</a></h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"devela/all/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","devela::data::list::stack::stack::definitions::StackU8"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Default-for-Stack%3CT,+CAP,+IDX%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/devela/data/list/stack/stack/impl_traits.rs.html#221-227\">Source</a><a href=\"#impl-Default-for-Stack%3CT,+CAP,+IDX%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T: <a class=\"trait\" href=\"devela/code/trait.Default.html\" title=\"trait devela::code::Default\">Default</a>, const CAP: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, IDX: <a class=\"trait\" href=\"devela/code/trait.Default.html\" title=\"trait devela::code::Default\">Default</a>&gt; <a class=\"trait\" href=\"devela/code/trait.Default.html\" title=\"trait devela::code::Default\">Default</a> for <a class=\"struct\" href=\"devela/all/struct.Stack.html\" title=\"struct devela::all::Stack\">Stack</a>&lt;T, CAP, IDX, <a class=\"type\" href=\"devela/all/type.Bare.html\" title=\"type devela::all::Bare\">Bare</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.default\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/data/list/stack/stack/impl_traits.rs.html#224-226\">Source</a><a href=\"#method.default\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/code/trait.Default.html#tymethod.default\" class=\"fn\">default</a>() -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Returns an empty stack, allocated in the stack,\nusing the default value to fill the remaining free data.</p>\n</div></details></div></details>","Default","devela::data::list::stack::stack::definitions::StackU8"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Default-for-Stack%3CT,+CAP,+IDX,+Boxed%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/devela/data/list/stack/stack/impl_traits.rs.html#241-247\">Source</a><a href=\"#impl-Default-for-Stack%3CT,+CAP,+IDX,+Boxed%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T: <a class=\"trait\" href=\"devela/code/trait.Default.html\" title=\"trait devela::code::Default\">Default</a>, const CAP: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, IDX: <a class=\"trait\" href=\"devela/code/trait.Default.html\" title=\"trait devela::code::Default\">Default</a>&gt; <a class=\"trait\" href=\"devela/code/trait.Default.html\" title=\"trait devela::code::Default\">Default</a> for <a class=\"struct\" href=\"devela/all/struct.Stack.html\" title=\"struct devela::all::Stack\">Stack</a>&lt;T, CAP, IDX, <a class=\"struct\" href=\"devela/all/struct.Boxed.html\" title=\"struct devela::all::Boxed\">Boxed</a>&gt;</h3><span class=\"item-info\"><div class=\"stab portability\">Available on <strong>crate feature <code>alloc</code></strong> only.</div></span></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.default\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/data/list/stack/stack/impl_traits.rs.html#244-246\">Source</a><a href=\"#method.default\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/code/trait.Default.html#tymethod.default\" class=\"fn\">default</a>() -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Returns an empty stack, allocated in the heap,\nusing the default value to fill the remaining free data.</p>\n</div></details></div></details>","Default","devela::data::list::stack::stack::definitions::StackU8"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CI%3E-for-Stack%3CT,+CAP,+u8%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/devela/data/list/stack/stack/impl_traits.rs.html#172\">Source</a><a href=\"#impl-From%3CI%3E-for-Stack%3CT,+CAP,+u8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T: <a class=\"trait\" href=\"devela/code/trait.Default.html\" title=\"trait devela::code::Default\">Default</a>, I, const CAP: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"devela/code/trait.From.html\" title=\"trait devela::code::From\">From</a>&lt;I&gt; for <a class=\"struct\" href=\"devela/all/struct.Stack.html\" title=\"struct devela::all::Stack\">Stack</a>&lt;T, CAP, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>, <a class=\"type\" href=\"devela/all/type.Bare.html\" title=\"type devela::all::Bare\">Bare</a>&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"devela/all/trait.IteratorInto.html\" title=\"trait devela::all::IteratorInto\">IntoIterator</a>&lt;Item = T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/data/list/stack/stack/impl_traits.rs.html#172\">Source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/code/trait.From.html#tymethod.from\" class=\"fn\">from</a>(iterator: I) -&gt; <a class=\"struct\" href=\"devela/all/struct.Stack.html\" title=\"struct devela::all::Stack\">Stack</a>&lt;T, CAP, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>, <a class=\"type\" href=\"devela/all/type.Bare.html\" title=\"type devela::all::Bare\">Bare</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns a stack filled with an iterator, in the stack.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>s: StackU8&lt;<span class=\"kw\">_</span>, <span class=\"number\">3</span>&gt; = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>].into();</code></pre></div>\n</div></details></div></details>","From<I>","devela::data::list::stack::stack::definitions::StackU8"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CI%3E-for-Stack%3CT,+CAP,+u8,+Boxed%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/devela/data/list/stack/stack/impl_traits.rs.html#172\">Source</a><a href=\"#impl-From%3CI%3E-for-Stack%3CT,+CAP,+u8,+Boxed%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T: <a class=\"trait\" href=\"devela/code/trait.Default.html\" title=\"trait devela::code::Default\">Default</a>, I, const CAP: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"devela/code/trait.From.html\" title=\"trait devela::code::From\">From</a>&lt;I&gt; for <a class=\"struct\" href=\"devela/all/struct.Stack.html\" title=\"struct devela::all::Stack\">Stack</a>&lt;T, CAP, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>, <a class=\"struct\" href=\"devela/all/struct.Boxed.html\" title=\"struct devela::all::Boxed\">Boxed</a>&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"devela/all/trait.IteratorInto.html\" title=\"trait devela::all::IteratorInto\">IntoIterator</a>&lt;Item = T&gt;,</div></h3><span class=\"item-info\"><div class=\"stab portability\">Available on <strong>crate feature <code>alloc</code></strong> only.</div></span></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/data/list/stack/stack/impl_traits.rs.html#172\">Source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/code/trait.From.html#tymethod.from\" class=\"fn\">from</a>(iterator: I) -&gt; <a class=\"struct\" href=\"devela/all/struct.Stack.html\" title=\"struct devela::all::Stack\">Stack</a>&lt;T, CAP, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>, <a class=\"struct\" href=\"devela/all/struct.Boxed.html\" title=\"struct devela::all::Boxed\">Boxed</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns a stack filled with an iterator, in the heap.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>s: StackU8&lt;<span class=\"kw\">_</span>, <span class=\"number\">3</span>, Boxed&gt; = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>].into();</code></pre></div>\n</div></details></div></details>","From<I>","devela::data::list::stack::stack::definitions::StackU8"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Ord-for-Stack%3CT,+CAP,+u8,+S%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/devela/data/list/stack/stack/impl_traits.rs.html#172\">Source</a><a href=\"#impl-Ord-for-Stack%3CT,+CAP,+u8,+S%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T: <a class=\"trait\" href=\"devela/all/trait.Ord.html\" title=\"trait devela::all::Ord\">Ord</a>, const CAP: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, S: <a class=\"trait\" href=\"devela/all/trait.Storage.html\" title=\"trait devela::all::Storage\">Storage</a>&gt; <a class=\"trait\" href=\"devela/all/trait.Ord.html\" title=\"trait devela::all::Ord\">Ord</a> for <a class=\"struct\" href=\"devela/all/struct.Stack.html\" title=\"struct devela::all::Stack\">Stack</a>&lt;T, CAP, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>, S&gt;<div class=\"where\">where\n    S::<a class=\"associatedtype\" href=\"devela/all/trait.Storage.html#associatedtype.Stored\" title=\"type devela::all::Storage::Stored\">Stored</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[T; CAP]</a>&gt;: <a class=\"trait\" href=\"devela/all/trait.Ord.html\" title=\"trait devela::all::Ord\">Ord</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/data/list/stack/stack/impl_traits.rs.html#172\">Source</a><a href=\"#method.cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Ord.html#tymethod.cmp\" class=\"fn\">cmp</a>(&amp;self, other: &amp;Self) -&gt; <a class=\"enum\" href=\"devela/all/enum.Ordering.html\" title=\"enum devela::all::Ordering\">Ordering</a></h4></section></summary><div class='docblock'>This method returns an <a href=\"devela/all/enum.Ordering.html\" title=\"enum devela::all::Ordering\"><code>Ordering</code></a> between <code>self</code> and <code>other</code>. <a href=\"devela/all/trait.Ord.html#tymethod.cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.max\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1013-1015\">Source</a></span><a href=\"#method.max\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Ord.html#method.max\" class=\"fn\">max</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"devela/all/trait.Sized.html\" title=\"trait devela::all::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Compares and returns the maximum of two values. <a href=\"devela/all/trait.Ord.html#method.max\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.min\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1052-1054\">Source</a></span><a href=\"#method.min\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Ord.html#method.min\" class=\"fn\">min</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"devela/all/trait.Sized.html\" title=\"trait devela::all::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Compares and returns the minimum of two values. <a href=\"devela/all/trait.Ord.html#method.min\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clamp\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.50.0\">1.50.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1078-1080\">Source</a></span><a href=\"#method.clamp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Ord.html#method.clamp\" class=\"fn\">clamp</a>(self, min: Self, max: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"devela/all/trait.Sized.html\" title=\"trait devela::all::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Restrict a value to a certain interval. <a href=\"devela/all/trait.Ord.html#method.clamp\">Read more</a></div></details></div></details>","Ord","devela::data::list::stack::stack::definitions::StackU8"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq-for-Stack%3CT,+CAP,+IDX,+S%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/devela/data/list/stack/stack/impl_traits.rs.html#206-213\">Source</a><a href=\"#impl-PartialEq-for-Stack%3CT,+CAP,+IDX,+S%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T: <a class=\"trait\" href=\"devela/all/trait.PartialEq.html\" title=\"trait devela::all::PartialEq\">PartialEq</a>, const CAP: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, IDX: <a class=\"trait\" href=\"devela/all/trait.PartialEq.html\" title=\"trait devela::all::PartialEq\">PartialEq</a>, S: <a class=\"trait\" href=\"devela/all/trait.Storage.html\" title=\"trait devela::all::Storage\">Storage</a>&gt; <a class=\"trait\" href=\"devela/all/trait.PartialEq.html\" title=\"trait devela::all::PartialEq\">PartialEq</a> for <a class=\"struct\" href=\"devela/all/struct.Stack.html\" title=\"struct devela::all::Stack\">Stack</a>&lt;T, CAP, IDX, S&gt;<div class=\"where\">where\n    S::<a class=\"associatedtype\" href=\"devela/all/trait.Storage.html#associatedtype.Stored\" title=\"type devela::all::Storage::Stored\">Stored</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[T; CAP]</a>&gt;: <a class=\"trait\" href=\"devela/all/trait.PartialEq.html\" title=\"trait devela::all::PartialEq\">PartialEq</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/data/list/stack/stack/impl_traits.rs.html#210-212\">Source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;Self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#265\">Source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq","devela::data::list::stack::stack::definitions::StackU8"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialOrd-for-Stack%3CT,+CAP,+u8,+S%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/devela/data/list/stack/stack/impl_traits.rs.html#172\">Source</a><a href=\"#impl-PartialOrd-for-Stack%3CT,+CAP,+u8,+S%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T: <a class=\"trait\" href=\"devela/all/trait.PartialOrd.html\" title=\"trait devela::all::PartialOrd\">PartialOrd</a>, const CAP: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, S: <a class=\"trait\" href=\"devela/all/trait.Storage.html\" title=\"trait devela::all::Storage\">Storage</a>&gt; <a class=\"trait\" href=\"devela/all/trait.PartialOrd.html\" title=\"trait devela::all::PartialOrd\">PartialOrd</a> for <a class=\"struct\" href=\"devela/all/struct.Stack.html\" title=\"struct devela::all::Stack\">Stack</a>&lt;T, CAP, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>, S&gt;<div class=\"where\">where\n    S::<a class=\"associatedtype\" href=\"devela/all/trait.Storage.html#associatedtype.Stored\" title=\"type devela::all::Storage::Stored\">Stored</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[T; CAP]</a>&gt;: <a class=\"trait\" href=\"devela/all/trait.PartialOrd.html\" title=\"trait devela::all::PartialOrd\">PartialOrd</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.partial_cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/data/list/stack/stack/impl_traits.rs.html#172\">Source</a><a href=\"#method.partial_cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: &amp;Self) -&gt; <a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;<a class=\"enum\" href=\"devela/all/enum.Ordering.html\" title=\"enum devela::all::Ordering\">Ordering</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Option&lt;Ordering&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"devela/all/trait.PartialOrd.html#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1387\">Source</a></span><a href=\"#method.lt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"devela/all/trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.le\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1405\">Source</a></span><a href=\"#method.le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the\n<code>&lt;=</code> operator. <a href=\"devela/all/trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.gt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1423\">Source</a></span><a href=\"#method.gt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code>\noperator. <a href=\"devela/all/trait.PartialOrd.html#method.gt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ge\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1441\">Source</a></span><a href=\"#method.ge\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by\nthe <code>&gt;=</code> operator. <a href=\"devela/all/trait.PartialOrd.html#method.ge\">Read more</a></div></details></div></details>","PartialOrd","devela::data::list::stack::stack::definitions::StackU8"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Stack%3CT,+CAP,+u8%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/devela/data/list/stack/stack/methods/convert.rs.html#401\">Source</a><a href=\"#impl-Stack%3CT,+CAP,+u8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, const CAP: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt; <a class=\"struct\" href=\"devela/all/struct.Stack.html\" title=\"struct devela::all::Stack\">Stack</a>&lt;T, CAP, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>, <a class=\"type\" href=\"devela/all/type.Bare.html\" title=\"type devela::all::Bare\">Bare</a>&gt;</h3><div class=\"docblock\"><h4 id=\"stack-index-size-conversion\"><a class=\"doc-anchor\" href=\"#stack-index-size-conversion\">§</a>Stack index-size conversion.</h4></div></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_idx_u8\" class=\"method\"><a class=\"src rightside\" href=\"src/devela/data/list/stack/stack/methods/convert.rs.html#401\">Source</a><h4 class=\"code-header\">pub fn <a href=\"devela/all/struct.Stack.html#tymethod.to_idx_u8\" class=\"fn\">to_idx_u8</a>(self) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"struct\" href=\"devela/all/struct.Stack.html\" title=\"struct devela::all::Stack\">Stack</a>&lt;T, CAP, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>, <a class=\"type\" href=\"devela/all/type.Bare.html\" title=\"type devela::all::Bare\">Bare</a>&gt;, <a class=\"struct\" href=\"devela/all/struct.NotEnoughSpace.html\" title=\"struct devela::all::NotEnoughSpace\">NotEnoughSpace</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;Stack&lt;T, CAP, u8, Bare&gt;, NotEnoughSpace&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Converts the current stack index size <code>IDX</code> to a <code>NEW_IDX</code>.</p>\n<h5 id=\"errors\"><a class=\"doc-anchor\" href=\"#errors\">§</a>Errors</h5>\n<p>Returns <a href=\"devela/all/struct.NotEnoughSpace.html\" title=\"struct devela::all::NotEnoughSpace\"><code>NotEnoughSpace</code></a> if <code>CAP &gt; </code><a href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html#associatedconstant.MAX\" title=\"associated constant u8::MAX\"><code>u8::MAX</code></a>.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>s = StackU8::&lt;<span class=\"kw\">_</span>, <span class=\"number\">6</span>&gt;::from([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]);\n<span class=\"kw\">let </span>t: StackU8::&lt;<span class=\"kw\">_</span>, <span class=\"number\">6</span>&gt; = s.to_idx_u8().unwrap();\n<span class=\"macro\">assert_eq!</span>[s.as_slice(), t.as_slice()];</code></pre></div>\n</div></details></div></details>",0,"devela::data::list::stack::stack::definitions::StackU8"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Stack%3CT,+CAP,+u8%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/devela/data/list/stack/stack/methods/convert.rs.html#401\">Source</a><a href=\"#impl-Stack%3CT,+CAP,+u8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T: <a class=\"trait\" href=\"devela/all/trait.Copy.html\" title=\"trait devela::all::Copy\">Copy</a>, const CAP: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt; <a class=\"struct\" href=\"devela/all/struct.Stack.html\" title=\"struct devela::all::Stack\">Stack</a>&lt;T, CAP, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>, <a class=\"type\" href=\"devela/all/type.Bare.html\" title=\"type devela::all::Bare\">Bare</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.own_to_idx_u8\" class=\"method\"><a class=\"src rightside\" href=\"src/devela/data/list/stack/stack/methods/convert.rs.html#401\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"devela/all/struct.Stack.html#tymethod.own_to_idx_u8\" class=\"fn\">own_to_idx_u8</a>(\n    self,\n) -&gt; <a class=\"struct\" href=\"devela/all/struct.Own.html\" title=\"struct devela::all::Own\">Own</a>&lt;<a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"struct\" href=\"devela/all/struct.Stack.html\" title=\"struct devela::all::Stack\">Stack</a>&lt;T, CAP, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>, <a class=\"type\" href=\"devela/all/type.Bare.html\" title=\"type devela::all::Bare\">Bare</a>&gt;, <a class=\"struct\" href=\"devela/all/struct.NotEnoughSpace.html\" title=\"struct devela::all::NotEnoughSpace\">NotEnoughSpace</a>&gt;, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Converts the current stack index size <code>IDX</code> to a <code>NEW_IDX</code>.</p>\n<h5 id=\"errors\"><a class=\"doc-anchor\" href=\"#errors\">§</a>Errors</h5>\n<p>Returns <a href=\"devela/all/struct.NotEnoughSpace.html\" title=\"struct devela::all::NotEnoughSpace\"><code>NotEnoughSpace</code></a> if <code>CAP &gt; </code><a href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html#associatedconstant.MAX\" title=\"associated constant u8::MAX\"><code>u8::MAX</code></a>.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">const </span>S: StackU8&lt;i32, <span class=\"number\">6</span>&gt; = StackU8::own_new(<span class=\"number\">0</span>)\n    .s_const_unwrap().s.own_push(<span class=\"number\">1</span>).s.own_push(<span class=\"number\">2</span>).s.own_push(<span class=\"number\">3</span>).s;\n<span class=\"kw\">const </span>T: StackU8&lt;i32, <span class=\"number\">6</span>&gt; = S.own_to_idx_u8().s_const_unwrap().s;\n<span class=\"macro\">assert_eq!</span>[S.as_slice(), T.as_slice()];</code></pre></div>\n</div></details></div></details>",0,"devela::data::list::stack::stack::definitions::StackU8"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Stack%3CT,+CAP,+u8%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/devela/data/list/stack/stack/methods/convert.rs.html#401\">Source</a><a href=\"#impl-Stack%3CT,+CAP,+u8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T: <a class=\"trait\" href=\"devela/code/trait.ConstDefault.html\" title=\"trait devela::code::ConstDefault\">ConstDefault</a> + <a class=\"trait\" href=\"devela/all/trait.Copy.html\" title=\"trait devela::all::Copy\">Copy</a>, const CAP: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt; <a class=\"struct\" href=\"devela/all/struct.Stack.html\" title=\"struct devela::all::Stack\">Stack</a>&lt;T, CAP, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>, <a class=\"type\" href=\"devela/all/type.Bare.html\" title=\"type devela::all::Bare\">Bare</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.own_resize_default\" class=\"method\"><a class=\"src rightside\" href=\"src/devela/data/list/stack/stack/methods/convert.rs.html#401\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"devela/all/struct.Stack.html#tymethod.own_resize_default\" class=\"fn\">own_resize_default</a>&lt;const NEW_CAP: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt;(\n    self,\n) -&gt; <a class=\"struct\" href=\"devela/all/struct.Own.html\" title=\"struct devela::all::Own\">Own</a>&lt;<a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"struct\" href=\"devela/all/struct.Stack.html\" title=\"struct devela::all::Stack\">Stack</a>&lt;T, NEW_CAP, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>, <a class=\"type\" href=\"devela/all/type.Bare.html\" title=\"type devela::all::Bare\">Bare</a>&gt;, <a class=\"struct\" href=\"devela/all/struct.IndexOutOfBounds.html\" title=\"struct devela::all::IndexOutOfBounds\">IndexOutOfBounds</a>&gt;, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Converts the current stack to a different capacity\nwhile preserving all existing elements.</p>\n<p>This method creates a new stack with the specified new capacity and moves the\ncurrent elements into it. The operation ensures that the new stack can accommodate\nthe number of elements currently held in the stack. It is designed to work with\nboth increases and decreases in capacity, as long as the new capacity can fit the\ncurrent number of elements.</p>\n<h5 id=\"errors\"><a class=\"doc-anchor\" href=\"#errors\">§</a>Errors</h5>\n<p>Returns <a href=\"devela/all/struct.IndexOutOfBounds.html\" title=\"struct devela::all::IndexOutOfBounds\"><code>IndexOutOfBounds</code></a><code>(Some(NEW_CAP))</code> if <code>NEW_CAP &lt; self.len()</code>,\nif <code>CAP &gt; </code><a href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html#associatedconstant.MAX\" title=\"associated constant u8::MAX\"><code>u8::MAX</code></a>\nor if <code>CAP &gt; isize::MAX / size_of::&lt;T&gt;()</code>.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">const </span>S: StackU8&lt;i32, <span class=\"number\">8</span>&gt; = StackU8::own_new(<span class=\"number\">0</span>)\n    .s_const_unwrap().s.own_push(<span class=\"number\">1</span>).s.own_push(<span class=\"number\">2</span>).s.own_push(<span class=\"number\">3</span>).s;\n<span class=\"kw\">const </span>T: StackU8&lt;i32, <span class=\"number\">4</span>&gt; = S.own_resize_default().s_const_unwrap().s;\n<span class=\"macro\">assert_eq!</span>[S.as_slice(), T.as_slice()];\n<span class=\"kw\">let _ </span>= S.own_resize_default::&lt;<span class=\"number\">2</span>&gt;().s_assert_err(); <span class=\"comment\">// too small</span></code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.own_resize_default_truncate\" class=\"method\"><a class=\"src rightside\" href=\"src/devela/data/list/stack/stack/methods/convert.rs.html#401\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"devela/all/struct.Stack.html#tymethod.own_resize_default_truncate\" class=\"fn\">own_resize_default_truncate</a>&lt;const NEW_CAP: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt;(\n    self,\n) -&gt; <a class=\"struct\" href=\"devela/all/struct.Own.html\" title=\"struct devela::all::Own\">Own</a>&lt;<a class=\"struct\" href=\"devela/all/struct.Stack.html\" title=\"struct devela::all::Stack\">Stack</a>&lt;T, NEW_CAP, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>, <a class=\"type\" href=\"devela/all/type.Bare.html\" title=\"type devela::all::Bare\">Bare</a>&gt;, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Converts the current stack to a different capacity, dropping elements if needed.</p>\n<p>This method creates a new stack with the specified new capacity and moves the\ncurrent elements into it. The operation will drop any elements that can’t fit\nin the new capacity, starting with the first ones (from the front of the stack).</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">const </span>S: StackU8&lt;i32, <span class=\"number\">8</span>&gt; = StackU8::own_new(<span class=\"number\">0</span>)\n    .s_const_unwrap().s.own_push(<span class=\"number\">1</span>).s.own_push(<span class=\"number\">2</span>).s.own_push(<span class=\"number\">3</span>).s;\n<span class=\"kw\">const </span>T: StackU8&lt;i32, <span class=\"number\">4</span>&gt; = S.own_resize_default_truncate().s;\n<span class=\"macro\">assert_eq!</span>[S.as_slice(), T.as_slice()];\n<span class=\"kw\">const </span>U: StackU8&lt;i32, <span class=\"number\">2</span>&gt; = S.own_resize_default_truncate().s;\n<span class=\"macro\">assert_eq!</span>[U.as_slice(), <span class=\"kw-2\">&amp;</span>[<span class=\"number\">2</span>, <span class=\"number\">3</span>]];</code></pre></div>\n</div></details></div></details>",0,"devela::data::list::stack::stack::definitions::StackU8"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Stack%3CT,+CAP,+u8%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/devela/data/list/stack/stack/methods/convert.rs.html#401\">Source</a><a href=\"#impl-Stack%3CT,+CAP,+u8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T: <a class=\"trait\" href=\"devela/code/trait.Default.html\" title=\"trait devela::code::Default\">Default</a>, const CAP: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt; <a class=\"struct\" href=\"devela/all/struct.Stack.html\" title=\"struct devela::all::Stack\">Stack</a>&lt;T, CAP, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>, <a class=\"type\" href=\"devela/all/type.Bare.html\" title=\"type devela::all::Bare\">Bare</a>&gt;</h3><div class=\"docblock\"><h4 id=\"stack-resize\"><a class=\"doc-anchor\" href=\"#stack-resize\">§</a>Stack resize.</h4></div></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.resize_default\" class=\"method\"><a class=\"src rightside\" href=\"src/devela/data/list/stack/stack/methods/convert.rs.html#401\">Source</a><h4 class=\"code-header\">pub fn <a href=\"devela/all/struct.Stack.html#tymethod.resize_default\" class=\"fn\">resize_default</a>&lt;const NEW_CAP: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt;(\n    self,\n) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"struct\" href=\"devela/all/struct.Stack.html\" title=\"struct devela::all::Stack\">Stack</a>&lt;T, NEW_CAP, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>, <a class=\"type\" href=\"devela/all/type.Bare.html\" title=\"type devela::all::Bare\">Bare</a>&gt;, <a class=\"struct\" href=\"devela/all/struct.IndexOutOfBounds.html\" title=\"struct devela::all::IndexOutOfBounds\">IndexOutOfBounds</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;Stack&lt;T, NEW_CAP, u8, Bare&gt;, IndexOutOfBounds&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Converts the current stack to a different capacity\nwhile preserving all existing elements.</p>\n<p>This method creates a new stack with the specified new capacity and moves the\ncurrent elements into it. The operation ensures that the new stack can accommodate\nthe number of elements currently held in the stack. It is designed to work with\nboth increases and decreases in capacity, as long as the new capacity can fit the\ncurrent number of elements.</p>\n<h5 id=\"errors\"><a class=\"doc-anchor\" href=\"#errors\">§</a>Errors</h5>\n<p>Returns <a href=\"devela/all/struct.IndexOutOfBounds.html\" title=\"struct devela::all::IndexOutOfBounds\"><code>IndexOutOfBounds</code></a><code>(Some(NEW_CAP))</code> if <code>NEW_CAP &lt; self.len()</code>,\nif <code>CAP &gt; </code><a href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html#associatedconstant.MAX\" title=\"associated constant u8::MAX\"><code>u8::MAX</code></a>\nor if <code>CAP &gt; isize::MAX / size_of::&lt;T&gt;()</code>.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>s = StackU8::&lt;<span class=\"kw\">_</span>, <span class=\"number\">8</span>&gt;::from([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]);\n<span class=\"kw\">let </span>less_cap: StackU8::&lt;<span class=\"kw\">_</span>, <span class=\"number\">4</span>&gt; = s.resize_default().unwrap();\n<span class=\"macro\">assert_eq!</span>[s.as_slice(), less_cap.as_slice()];\n<span class=\"kw\">let </span>more_cap: StackU8::&lt;<span class=\"kw\">_</span>, <span class=\"number\">12</span>&gt; = s.resize_default().unwrap();\n<span class=\"macro\">assert_eq!</span>[s.as_slice(), more_cap.as_slice()];\n<span class=\"macro\">assert!</span>[s.resize_default::&lt;<span class=\"number\">2</span>&gt;().is_err()]; <span class=\"comment\">// too small</span></code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.resize_default_truncate\" class=\"method\"><a class=\"src rightside\" href=\"src/devela/data/list/stack/stack/methods/convert.rs.html#401\">Source</a><h4 class=\"code-header\">pub fn <a href=\"devela/all/struct.Stack.html#tymethod.resize_default_truncate\" class=\"fn\">resize_default_truncate</a>&lt;const NEW_CAP: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt;(\n    self,\n) -&gt; <a class=\"struct\" href=\"devela/all/struct.Stack.html\" title=\"struct devela::all::Stack\">Stack</a>&lt;T, NEW_CAP, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>, <a class=\"type\" href=\"devela/all/type.Bare.html\" title=\"type devela::all::Bare\">Bare</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Converts the current stack to a different capacity, dropping elements if needed.</p>\n<p>This method creates a new stack with the specified new capacity and moves the\ncurrent elements into it. The operation will drop any elements that can’t fit\nin the new capacity, starting with the first ones (from the front of the stack).</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>s = StackU8::&lt;<span class=\"kw\">_</span>, <span class=\"number\">8</span>&gt;::from([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]);\n<span class=\"kw\">let </span>less_cap: StackU8::&lt;<span class=\"kw\">_</span>, <span class=\"number\">4</span>&gt; = s.resize_default_truncate();\n<span class=\"macro\">assert_eq!</span>[less_cap.as_slice(), s.as_slice()];\n<span class=\"kw\">let </span>more_cap: StackU8::&lt;<span class=\"kw\">_</span>, <span class=\"number\">12</span>&gt; = s.resize_default_truncate();\n<span class=\"macro\">assert_eq!</span>[more_cap.as_slice(), s.as_slice()];\n<span class=\"kw\">let </span>drop_cap: StackU8::&lt;<span class=\"kw\">_</span>, <span class=\"number\">2</span>&gt; = s.resize_default_truncate();\n<span class=\"macro\">assert_eq!</span>[drop_cap.as_slice(), <span class=\"kw-2\">&amp;</span>[<span class=\"number\">3</span>, <span class=\"number\">4</span>]];</code></pre></div>\n</div></details></div></details>",0,"devela::data::list::stack::stack::definitions::StackU8"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Stack%3CT,+CAP,+u8%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/devela/data/list/stack/stack/methods/general.rs.html#1019\">Source</a><a href=\"#impl-Stack%3CT,+CAP,+u8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, const CAP: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt; <a class=\"struct\" href=\"devela/all/struct.Stack.html\" title=\"struct devela::all::Stack\">Stack</a>&lt;T, CAP, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>, <a class=\"type\" href=\"devela/all/type.Bare.html\" title=\"type devela::all::Bare\">Bare</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_array_copy\" class=\"method\"><a class=\"src rightside\" href=\"src/devela/data/list/stack/stack/methods/general.rs.html#1019\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"devela/all/struct.Stack.html#tymethod.from_array_copy\" class=\"fn\">from_array_copy</a>(arr: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[T; CAP]</a>) -&gt; <a class=\"struct\" href=\"devela/all/struct.Stack.html\" title=\"struct devela::all::Stack\">Stack</a>&lt;T, CAP, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>, <a class=\"type\" href=\"devela/all/type.Bare.html\" title=\"type devela::all::Bare\">Bare</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Converts an array into a <a href=\"devela/all/struct.Stack.html#method.is_full\" title=\"method devela::all::Stack::is_full\"><code>full</code></a> stack.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">const </span>S: StackU8&lt;i32, <span class=\"number\">3</span>&gt; = StackU8::from_array_copy([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);</code></pre></div>\n</div></details></div></details>",0,"devela::data::list::stack::stack::definitions::StackU8"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Stack%3CT,+CAP,+u8%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/devela/data/list/stack/stack/methods/general.rs.html#1019\">Source</a><a href=\"#impl-Stack%3CT,+CAP,+u8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T: <a class=\"trait\" href=\"devela/all/trait.Copy.html\" title=\"trait devela::all::Copy\">Copy</a>, const CAP: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt; <a class=\"struct\" href=\"devela/all/struct.Stack.html\" title=\"struct devela::all::Stack\">Stack</a>&lt;T, CAP, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>, <a class=\"type\" href=\"devela/all/type.Bare.html\" title=\"type devela::all::Bare\">Bare</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.new_copied\" class=\"method\"><a class=\"src rightside\" href=\"src/devela/data/list/stack/stack/methods/general.rs.html#1019\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"devela/all/struct.Stack.html#tymethod.new_copied\" class=\"fn\">new_copied</a>(element: T) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;Self, <a class=\"struct\" href=\"devela/all/struct.MismatchedCapacity.html\" title=\"struct devela::all::MismatchedCapacity\">MismatchedCapacity</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;Self, MismatchedCapacity&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Returns an empty stack, allocated in the stack,\ncopying <code>element</code> to fill the remaining free data, in compile-time.</p>\n<h5 id=\"errors\"><a class=\"doc-anchor\" href=\"#errors\">§</a>Errors</h5>\n<p>Returns <a href=\"devela/all/struct.MismatchedCapacity.html\" title=\"struct devela::all::MismatchedCapacity\"><code>MismatchedCapacity</code></a> if <code>CAP &gt; </code><a href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html#associatedconstant.MAX\" title=\"associated constant u8::MAX\"><code>u8::MAX</code></a>\nor if <code>CAP &gt; isize::MAX / size_of::&lt;T&gt;()</code>.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">const </span>S: StackU8&lt;i32, <span class=\"number\">16</span>&gt; = <span class=\"macro\">unwrap!</span>[ok StackU8::new_copied(<span class=\"number\">0</span>)];</code></pre></div>\n</div></details></div></details>",0,"devela::data::list::stack::stack::definitions::StackU8"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Stack%3CT,+CAP,+u8%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/devela/data/list/stack/stack/methods/general.rs.html#1019\">Source</a><a href=\"#impl-Stack%3CT,+CAP,+u8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T: <a class=\"trait\" href=\"devela/code/trait.Clone.html\" title=\"trait devela::code::Clone\">Clone</a>, const CAP: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt; <a class=\"struct\" href=\"devela/all/struct.Stack.html\" title=\"struct devela::all::Stack\">Stack</a>&lt;T, CAP, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>, <a class=\"type\" href=\"devela/all/type.Bare.html\" title=\"type devela::all::Bare\">Bare</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.new\" class=\"method\"><a class=\"src rightside\" href=\"src/devela/data/list/stack/stack/methods/general.rs.html#1019\">Source</a><h4 class=\"code-header\">pub fn <a href=\"devela/all/struct.Stack.html#tymethod.new\" class=\"fn\">new</a>(element: T) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;Self, <a class=\"struct\" href=\"devela/all/struct.MismatchedCapacity.html\" title=\"struct devela::all::MismatchedCapacity\">MismatchedCapacity</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;Self, MismatchedCapacity&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Returns an empty stack, allocated in the stack,\ncloning <code>element</code> to fill the remaining free data.</p>\n<h5 id=\"errors\"><a class=\"doc-anchor\" href=\"#errors\">§</a>Errors</h5>\n<p>Returns <a href=\"devela/all/struct.MismatchedCapacity.html\" title=\"struct devela::all::MismatchedCapacity\"><code>MismatchedCapacity</code></a> if <code>CAP &gt; </code><a href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html#associatedconstant.MAX\" title=\"associated constant u8::MAX\"><code>u8::MAX</code></a>\nor if <code>CAP &gt; isize::MAX / size_of::&lt;T&gt;()</code>.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>s = StackU8::&lt;<span class=\"kw\">_</span>, <span class=\"number\">16</span>&gt;::new(<span class=\"number\">0</span>).unwrap();</code></pre></div>\n</div></details></div></details>",0,"devela::data::list::stack::stack::definitions::StackU8"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Stack%3CT,+CAP,+u8%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/devela/data/list/stack/stack/methods/own.rs.html#988\">Source</a><a href=\"#impl-Stack%3CT,+CAP,+u8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T: <a class=\"trait\" href=\"devela/all/trait.Copy.html\" title=\"trait devela::all::Copy\">Copy</a>, const CAP: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt; <a class=\"struct\" href=\"devela/all/struct.Stack.html\" title=\"struct devela::all::Stack\">Stack</a>&lt;T, CAP, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>, <a class=\"type\" href=\"devela/all/type.Bare.html\" title=\"type devela::all::Bare\">Bare</a>&gt;</h3><div class=\"docblock\"><h4 id=\"chainable-const-operations-depending-on-t-copy\"><a class=\"doc-anchor\" href=\"#chainable-const-operations-depending-on-t-copy\">§</a>Chainable <em>const</em></div></section></summary><div class=\"docblock\"> operations depending on <code>T: Copy</code></h4>\n<p>Every method is <em>const</em> and returns <a href=\"devela/all/struct.Own.html\" title=\"struct devela::all::Own\"><code>Own</code></a><code>&lt;Self, V&gt;</code>.</p>\n</div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.own_new\" class=\"method\"><a class=\"src rightside\" href=\"src/devela/data/list/stack/stack/methods/own.rs.html#988\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"devela/all/struct.Stack.html#tymethod.own_new\" class=\"fn\">own_new</a>(element: T) -&gt; <a class=\"struct\" href=\"devela/all/struct.Own.html\" title=\"struct devela::all::Own\">Own</a>&lt;<a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;Self, <a class=\"struct\" href=\"devela/all/struct.MismatchedCapacity.html\" title=\"struct devela::all::MismatchedCapacity\">MismatchedCapacity</a>&gt;, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns an empty stack, allocated in the stack,\ncopying <code>element</code> to fill the remaining free data.</p>\n<h5 id=\"errors\"><a class=\"doc-anchor\" href=\"#errors\">§</a>Errors</h5>\n<p>Returns <a href=\"devela/all/struct.MismatchedCapacity.html\" title=\"struct devela::all::MismatchedCapacity\"><code>MismatchedCapacity</code></a> if <code>CAP &gt; </code><a href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html#associatedconstant.MAX\" title=\"associated constant u8::MAX\"><code>u8::MAX</code></a>\nor if <code>CAP &gt; isize::MAX / size_of::&lt;T&gt;()</code>.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">const </span>S: StackU8&lt;i32, <span class=\"number\">16</span>&gt; = StackU8::own_new(<span class=\"number\">0</span>).s_const_unwrap().s;</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.own_clear\" class=\"method\"><a class=\"src rightside\" href=\"src/devela/data/list/stack/stack/methods/own.rs.html#988\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"devela/all/struct.Stack.html#tymethod.own_clear\" class=\"fn\">own_clear</a>(self) -&gt; <a class=\"struct\" href=\"devela/all/struct.Own.html\" title=\"struct devela::all::Own\">Own</a>&lt;Self, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Clears the stack in compile-time.</p>\n<p><code>( 1 2 3 -- )</code></p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">const </span>S: StackU8&lt;i32, <span class=\"number\">3</span>&gt; = StackU8::from_array_copy([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]).own_clear().s;\n<span class=\"macro\">assert!</span>[S.is_empty()];</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.own_push\" class=\"method\"><a class=\"src rightside\" href=\"src/devela/data/list/stack/stack/methods/own.rs.html#988\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"devela/all/struct.Stack.html#tymethod.own_push\" class=\"fn\">own_push</a>(self, element: T) -&gt; <a class=\"struct\" href=\"devela/all/struct.Own.html\" title=\"struct devela::all::Own\">Own</a>&lt;Self, <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"devela/all/struct.NotEnoughSpace.html\" title=\"struct devela::all::NotEnoughSpace\">NotEnoughSpace</a>&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Pushes a new <code>element</code> to the top of the stack in compile-time.</p>\n<p><code>( 1 -- 1 2 )</code></p>\n<h5 id=\"errors-1\"><a class=\"doc-anchor\" href=\"#errors-1\">§</a>Errors</h5>\n<p>Returns <code>Own&lt;S,</code><a href=\"devela/all/struct.NotEnoughSpace.html\" title=\"struct devela::all::NotEnoughSpace\"><code>NotEnoughSpace</code></a><code>&gt;</code> if the stack is full.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">const </span>S: StackU8&lt;i32, <span class=\"number\">2</span>&gt; = StackU8::own_new(<span class=\"number\">0</span>).s_const_unwrap().s\n    .own_push(<span class=\"number\">1</span>).v_assert_ok().s\n    .own_push(<span class=\"number\">2</span>).v_assert_ok().s;\n<span class=\"macro\">assert_eq!</span>[S.as_slice(), <span class=\"kw-2\">&amp;</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>]];\n<span class=\"macro\">assert!</span>[S.own_push(<span class=\"number\">3</span>).v.is_err_and(|e| <span class=\"macro\">matches!</span>[e, NotEnoughSpace])];</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.own_push_unchecked\" class=\"method\"><a class=\"src rightside\" href=\"src/devela/data/list/stack/stack/methods/own.rs.html#988\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"devela/all/struct.Stack.html#tymethod.own_push_unchecked\" class=\"fn\">own_push_unchecked</a>(self, element: T) -&gt; <a class=\"struct\" href=\"devela/all/struct.Own.html\" title=\"struct devela::all::Own\">Own</a>&lt;Self, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Pushes a new <code>element</code> to the top of the stack in compile-time, unchecked version.</p>\n<p><code>( 1 -- 1 2 )</code></p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if the stack is full.</p>\n<h5 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">const </span>S: StackU8&lt;i32, <span class=\"number\">2</span>&gt; = StackU8::own_new(<span class=\"number\">0</span>).s_const_unwrap().s\n    .own_push_unchecked(<span class=\"number\">1</span>).s.own_push_unchecked(<span class=\"number\">2</span>).s;\n<span class=\"macro\">assert_eq!</span>[S.as_slice(), <span class=\"kw-2\">&amp;</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>]];</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.own_pop\" class=\"method\"><a class=\"src rightside\" href=\"src/devela/data/list/stack/stack/methods/own.rs.html#988\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"devela/all/struct.Stack.html#tymethod.own_pop\" class=\"fn\">own_pop</a>(self) -&gt; <a class=\"struct\" href=\"devela/all/struct.Own.html\" title=\"struct devela::all::Own\">Own</a>&lt;Self, <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;T, <a class=\"struct\" href=\"devela/all/struct.NotEnoughElements.html\" title=\"struct devela::all::NotEnoughElements\">NotEnoughElements</a>&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Pops the top stack element in compile-time.</p>\n<p><code>( 1 2 3 -- 1 2 )</code></p>\n<h5 id=\"errors-2\"><a class=\"doc-anchor\" href=\"#errors-2\">§</a>Errors</h5>\n<p>Returns <code>Own&lt;S,</code><a href=\"devela/all/struct.NotEnoughElements.html\" title=\"struct devela::all::NotEnoughElements\"><code>NotEnoughElements</code></a><code>&gt;</code> if the stack is empty.</p>\n<h5 id=\"examples-4\"><a class=\"doc-anchor\" href=\"#examples-4\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">const </span>S: Own&lt;StackU8&lt;i32, <span class=\"number\">3</span>&gt;, <span class=\"prelude-ty\">Result</span>&lt;i32, NotEnoughElements&gt;&gt; =\n   StackU8::from_array_copy([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]).own_pop();\nS.s_assert(|s| s.as_slice() == <span class=\"kw-2\">&amp;</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>]).v_assert_eq(<span class=\"kw-2\">&amp;</span><span class=\"prelude-val\">Ok</span>(<span class=\"number\">3</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.own_pop_unchecked\" class=\"method\"><a class=\"src rightside\" href=\"src/devela/data/list/stack/stack/methods/own.rs.html#988\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"devela/all/struct.Stack.html#tymethod.own_pop_unchecked\" class=\"fn\">own_pop_unchecked</a>(self) -&gt; <a class=\"struct\" href=\"devela/all/struct.Own.html\" title=\"struct devela::all::Own\">Own</a>&lt;Self, T&gt;</h4></section></summary><div class=\"docblock\"><p>Pops the top stack element in compile-time, unchecked version.</p>\n<p><code>( 1 2 3 -- 1 2 )</code></p>\n<h5 id=\"panics-1\"><a class=\"doc-anchor\" href=\"#panics-1\">§</a>Panics</h5>\n<p>Panics if the stack is empty.</p>\n<h5 id=\"examples-5\"><a class=\"doc-anchor\" href=\"#examples-5\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">const </span>S: Own&lt;StackU8&lt;i32, <span class=\"number\">3</span>&gt;, i32&gt; =\n   StackU8::from_array_copy([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]).own_pop_unchecked();\nS.s_assert(|s| s.as_slice() == <span class=\"kw-2\">&amp;</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>]).v_assert_eq(<span class=\"kw-2\">&amp;</span><span class=\"number\">3</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.own_peek\" class=\"method\"><a class=\"src rightside\" href=\"src/devela/data/list/stack/stack/methods/own.rs.html#988\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"devela/all/struct.Stack.html#tymethod.own_peek\" class=\"fn\">own_peek</a>(self) -&gt; <a class=\"struct\" href=\"devela/all/struct.Own.html\" title=\"struct devela::all::Own\">Own</a>&lt;Self, <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;T, <a class=\"struct\" href=\"devela/all/struct.NotEnoughElements.html\" title=\"struct devela::all::NotEnoughElements\">NotEnoughElements</a>&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Peeks the top stack element in compile-time.</p>\n<p><code>( 1 2 3 -- 1 2 )</code></p>\n<h5 id=\"errors-3\"><a class=\"doc-anchor\" href=\"#errors-3\">§</a>Errors</h5>\n<p>Returns <code>Own&lt;S,</code><a href=\"devela/all/struct.NotEnoughElements.html\" title=\"struct devela::all::NotEnoughElements\"><code>NotEnoughElements</code></a><code>&gt;</code> if the stack is empty.</p>\n<h5 id=\"examples-6\"><a class=\"doc-anchor\" href=\"#examples-6\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">const </span>S: Own&lt;StackU8&lt;i32, <span class=\"number\">3</span>&gt;, <span class=\"prelude-ty\">Result</span>&lt;i32, NotEnoughElements&gt;&gt; =\n  StackU8::from_array_copy([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]).own_peek();\nS.s_assert(|s| s.as_slice() == <span class=\"kw-2\">&amp;</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]).v_assert_eq(<span class=\"kw-2\">&amp;</span><span class=\"prelude-val\">Ok</span>(<span class=\"number\">3</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.own_peek_unchecked\" class=\"method\"><a class=\"src rightside\" href=\"src/devela/data/list/stack/stack/methods/own.rs.html#988\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"devela/all/struct.Stack.html#tymethod.own_peek_unchecked\" class=\"fn\">own_peek_unchecked</a>(self) -&gt; <a class=\"struct\" href=\"devela/all/struct.Own.html\" title=\"struct devela::all::Own\">Own</a>&lt;Self, T&gt;</h4></section></summary><div class=\"docblock\"><p>Peeks the top stack element in compile-time, unchecked version.</p>\n<p><code>( 1 2 3 -- 1 2 )</code></p>\n<h5 id=\"panics-2\"><a class=\"doc-anchor\" href=\"#panics-2\">§</a>Panics</h5>\n<p>Panics if the stack is empty.</p>\n<h5 id=\"examples-7\"><a class=\"doc-anchor\" href=\"#examples-7\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">const </span>S: Own&lt;StackU8&lt;i32, <span class=\"number\">3</span>&gt;, i32&gt; = StackU8::from_array_copy([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>])\n    .own_peek_unchecked();\nS.s_assert(|s| s.as_slice() == <span class=\"kw-2\">&amp;</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]).v_assert_eq(<span class=\"kw-2\">&amp;</span><span class=\"number\">3</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.own_drop\" class=\"method\"><a class=\"src rightside\" href=\"src/devela/data/list/stack/stack/methods/own.rs.html#988\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"devela/all/struct.Stack.html#tymethod.own_drop\" class=\"fn\">own_drop</a>(self) -&gt; <a class=\"struct\" href=\"devela/all/struct.Own.html\" title=\"struct devela::all::Own\">Own</a>&lt;Self, <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"devela/all/struct.NotEnoughElements.html\" title=\"struct devela::all::NotEnoughElements\">NotEnoughElements</a>&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Drops the top stack element in compile-time.</p>\n<p><code>( 1 2 -- 1 )</code></p>\n<h5 id=\"errors-4\"><a class=\"doc-anchor\" href=\"#errors-4\">§</a>Errors</h5>\n<p>Returns <code>Own&lt;self,</code><a href=\"devela/all/struct.NotEnoughElements.html\" title=\"struct devela::all::NotEnoughElements\"><code>NotEnoughElements</code></a><code>&gt;</code> if the stack is empty.</p>\n<h5 id=\"examples-8\"><a class=\"doc-anchor\" href=\"#examples-8\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">const </span>S: StackU8&lt;i32, <span class=\"number\">2</span>&gt; = StackU8::from_array_copy([<span class=\"number\">1</span>, <span class=\"number\">2</span>])\n    .own_drop().v_assert_ok().s;\n<span class=\"macro\">assert_eq!</span>[S.as_slice(), <span class=\"kw-2\">&amp;</span>[<span class=\"number\">1</span>]];\n\n<span class=\"kw\">const </span>T: StackU8&lt;i32, <span class=\"number\">2</span>&gt; = StackU8::own_new(<span class=\"number\">0</span>).s_const_unwrap().s\n    .own_drop().v_assert_err().s;\n<span class=\"macro\">assert!</span>[T.is_empty()];</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.own_drop_unchecked\" class=\"method\"><a class=\"src rightside\" href=\"src/devela/data/list/stack/stack/methods/own.rs.html#988\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"devela/all/struct.Stack.html#tymethod.own_drop_unchecked\" class=\"fn\">own_drop_unchecked</a>(self) -&gt; <a class=\"struct\" href=\"devela/all/struct.Own.html\" title=\"struct devela::all::Own\">Own</a>&lt;Self, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Swaps the top two pair stack elements, unchecked version.</p>\n<p><code>( 1 2 -- 1 )</code></p>\n<h5 id=\"panics-3\"><a class=\"doc-anchor\" href=\"#panics-3\">§</a>Panics</h5>\n<p>Panics if the stack is empty.</p>\n<h5 id=\"examples-9\"><a class=\"doc-anchor\" href=\"#examples-9\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">const </span>S: StackU8&lt;i32, <span class=\"number\">2</span>&gt; = StackU8::from_array_copy([<span class=\"number\">1</span>, <span class=\"number\">2</span>])\n    .own_drop_unchecked().s;\n<span class=\"macro\">assert_eq!</span>[S.as_slice(), <span class=\"kw-2\">&amp;</span>[<span class=\"number\">1</span>]];</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.own_drop_n\" class=\"method\"><a class=\"src rightside\" href=\"src/devela/data/list/stack/stack/methods/own.rs.html#988\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"devela/all/struct.Stack.html#tymethod.own_drop_n\" class=\"fn\">own_drop_n</a>(self, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>) -&gt; <a class=\"struct\" href=\"devela/all/struct.Own.html\" title=\"struct devela::all::Own\">Own</a>&lt;Self, <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"devela/all/struct.NotEnoughElements.html\" title=\"struct devela::all::NotEnoughElements\">NotEnoughElements</a>&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Drops the top <code>n</code> stack elements.</p>\n<p><code>( 1 2 3 4 -- 1 )</code> for <code>n == 3</code></p>\n<h5 id=\"errors-5\"><a class=\"doc-anchor\" href=\"#errors-5\">§</a>Errors</h5>\n<p>Returns <code>Own&lt;self,</code><a href=\"devela/all/struct.NotEnoughElements.html\" title=\"struct devela::all::NotEnoughElements\"><code>NotEnoughElements</code></a><code>&gt;</code>\nif the stack doesn’t contain at least <code>n</code> elements.</p>\n<h5 id=\"examples-10\"><a class=\"doc-anchor\" href=\"#examples-10\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">const </span>S: StackU8&lt;i32, <span class=\"number\">4</span>&gt; = StackU8::from_array_copy([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>])\n    .own_drop_n(<span class=\"number\">3</span>).v_assert_ok().s;\n<span class=\"macro\">assert_eq!</span>[S.as_slice(), <span class=\"kw-2\">&amp;</span>[<span class=\"number\">1</span>]];</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.own_drop_n_unchecked\" class=\"method\"><a class=\"src rightside\" href=\"src/devela/data/list/stack/stack/methods/own.rs.html#988\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"devela/all/struct.Stack.html#tymethod.own_drop_n_unchecked\" class=\"fn\">own_drop_n_unchecked</a>(self, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>) -&gt; <a class=\"struct\" href=\"devela/all/struct.Own.html\" title=\"struct devela::all::Own\">Own</a>&lt;Self, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Drops the top <code>n</code> stack elements, unchecked version.</p>\n<p><code>( 1 2 3 4 -- 1 )</code> for <code>n == 3</code></p>\n<h5 id=\"panics-4\"><a class=\"doc-anchor\" href=\"#panics-4\">§</a>Panics</h5>\n<p>Panics if the stack doesn’t contain at least <code>n</code> elements.</p>\n<h5 id=\"examples-11\"><a class=\"doc-anchor\" href=\"#examples-11\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">const </span>S: StackU8&lt;i32, <span class=\"number\">4</span>&gt; = StackU8::from_array_copy([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>])\n    .own_drop_n_unchecked(<span class=\"number\">3</span>).s;\n<span class=\"macro\">assert_eq!</span>[S.as_slice(), <span class=\"kw-2\">&amp;</span>[<span class=\"number\">1</span>]];</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.own_nip\" class=\"method\"><a class=\"src rightside\" href=\"src/devela/data/list/stack/stack/methods/own.rs.html#988\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"devela/all/struct.Stack.html#tymethod.own_nip\" class=\"fn\">own_nip</a>(self) -&gt; <a class=\"struct\" href=\"devela/all/struct.Own.html\" title=\"struct devela::all::Own\">Own</a>&lt;Self, <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"devela/all/struct.NotEnoughElements.html\" title=\"struct devela::all::NotEnoughElements\">NotEnoughElements</a>&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Drops the next of stack element in compile-time.</p>\n<p><code>( 1 2 -- 2 )</code></p>\n<h5 id=\"errors-6\"><a class=\"doc-anchor\" href=\"#errors-6\">§</a>Errors</h5>\n<p>Returns <code>Own&lt;self,</code><a href=\"devela/all/struct.NotEnoughElements.html\" title=\"struct devela::all::NotEnoughElements\"><code>NotEnoughElements</code></a><code>&gt;</code>\nif the stack doesn’t contain at least 2 elements.</p>\n<h5 id=\"examples-12\"><a class=\"doc-anchor\" href=\"#examples-12\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">const </span>S: StackU8&lt;i32, <span class=\"number\">2</span>&gt; = StackU8::from_array_copy([<span class=\"number\">1</span>, <span class=\"number\">2</span>])\n    .own_nip().v_assert_ok().s;\n<span class=\"macro\">assert_eq!</span>[S.as_slice(), <span class=\"kw-2\">&amp;</span>[<span class=\"number\">2</span>]];\n\n<span class=\"kw\">const </span>T: StackU8&lt;i32, <span class=\"number\">2</span>&gt; = StackU8::own_new(<span class=\"number\">0</span>).s_const_unwrap().s\n    .own_push(<span class=\"number\">1</span>).v_assert_ok().s.own_nip().v_assert_err().s;\n<span class=\"macro\">assert_eq!</span>[T.as_slice(), <span class=\"kw-2\">&amp;</span>[<span class=\"number\">1</span>]];</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.own_nip_unchecked\" class=\"method\"><a class=\"src rightside\" href=\"src/devela/data/list/stack/stack/methods/own.rs.html#988\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"devela/all/struct.Stack.html#tymethod.own_nip_unchecked\" class=\"fn\">own_nip_unchecked</a>(self) -&gt; <a class=\"struct\" href=\"devela/all/struct.Own.html\" title=\"struct devela::all::Own\">Own</a>&lt;Self, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Drops the next of stack element in compile-time, unchecked version.</p>\n<p><code>( 1 2 -- 2 )</code></p>\n<h5 id=\"panics-5\"><a class=\"doc-anchor\" href=\"#panics-5\">§</a>Panics</h5>\n<p>Panics if the stack doesn’t contain at least 2 elements.</p>\n<h5 id=\"examples-13\"><a class=\"doc-anchor\" href=\"#examples-13\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">const </span>S: StackU8&lt;i32, <span class=\"number\">2</span>&gt; = StackU8::from_array_copy([<span class=\"number\">1</span>, <span class=\"number\">2</span>])\n    .own_nip_unchecked().s;\n<span class=\"macro\">assert_eq!</span>[S.as_slice(), <span class=\"kw-2\">&amp;</span>[<span class=\"number\">2</span>]];</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.own_nip2\" class=\"method\"><a class=\"src rightside\" href=\"src/devela/data/list/stack/stack/methods/own.rs.html#988\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"devela/all/struct.Stack.html#tymethod.own_nip2\" class=\"fn\">own_nip2</a>(self) -&gt; <a class=\"struct\" href=\"devela/all/struct.Own.html\" title=\"struct devela::all::Own\">Own</a>&lt;Self, <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"devela/all/struct.NotEnoughElements.html\" title=\"struct devela::all::NotEnoughElements\">NotEnoughElements</a>&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Drops the pair of next stack elements.</p>\n<p><code>( 1 2 3 4 -- 3 4 )</code></p>\n<h5 id=\"errors-7\"><a class=\"doc-anchor\" href=\"#errors-7\">§</a>Errors</h5>\n<p>Returns <code>Own&lt;self,</code><a href=\"devela/all/struct.NotEnoughElements.html\" title=\"struct devela::all::NotEnoughElements\"><code>NotEnoughElements</code></a><code>&gt;</code>\nif the stack doesn’t contain at least 4 elements.</p>\n<h5 id=\"examples-14\"><a class=\"doc-anchor\" href=\"#examples-14\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">const </span>S: StackU8&lt;i32, <span class=\"number\">4</span>&gt; = StackU8::from_array_copy([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>])\n    .own_nip2().v_assert_ok().s;\n<span class=\"macro\">assert_eq!</span>[S.as_slice(), <span class=\"kw-2\">&amp;</span>[<span class=\"number\">3</span>, <span class=\"number\">4</span>]];</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.own_nip2_unchecked\" class=\"method\"><a class=\"src rightside\" href=\"src/devela/data/list/stack/stack/methods/own.rs.html#988\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"devela/all/struct.Stack.html#tymethod.own_nip2_unchecked\" class=\"fn\">own_nip2_unchecked</a>(self) -&gt; <a class=\"struct\" href=\"devela/all/struct.Own.html\" title=\"struct devela::all::Own\">Own</a>&lt;Self, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Drops the pair of next stack elements, unchecked version.</p>\n<p><code>( 1 2 3 4 -- 3 4 )</code></p>\n<h5 id=\"panics-6\"><a class=\"doc-anchor\" href=\"#panics-6\">§</a>Panics</h5>\n<p>Panics if the stack doesn’t contain at least 4 elements.</p>\n<h5 id=\"examples-15\"><a class=\"doc-anchor\" href=\"#examples-15\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">const </span>S: StackU8&lt;i32, <span class=\"number\">4</span>&gt; = StackU8::from_array_copy([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>])\n    .own_nip2_unchecked().s;\n<span class=\"macro\">assert_eq!</span>[S.as_slice(), <span class=\"kw-2\">&amp;</span>[<span class=\"number\">3</span>, <span class=\"number\">4</span>]];</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.own_swap\" class=\"method\"><a class=\"src rightside\" href=\"src/devela/data/list/stack/stack/methods/own.rs.html#988\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"devela/all/struct.Stack.html#tymethod.own_swap\" class=\"fn\">own_swap</a>(self) -&gt; <a class=\"struct\" href=\"devela/all/struct.Own.html\" title=\"struct devela::all::Own\">Own</a>&lt;Self, <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"devela/all/struct.NotEnoughElements.html\" title=\"struct devela::all::NotEnoughElements\">NotEnoughElements</a>&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Swaps the top two stack elements in compile-time.</p>\n<p><code>( 1 2 -- 2 1 )</code></p>\n<h5 id=\"errors-8\"><a class=\"doc-anchor\" href=\"#errors-8\">§</a>Errors</h5>\n<p>Returns <code>Own&lt;self,</code><a href=\"devela/all/struct.NotEnoughElements.html\" title=\"struct devela::all::NotEnoughElements\"><code>NotEnoughElements</code></a><code>&gt;</code>\nif the stack doesn’t contain at least 2 elements.</p>\n<h5 id=\"examples-16\"><a class=\"doc-anchor\" href=\"#examples-16\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">const </span>S: StackU8&lt;i32, <span class=\"number\">2</span>&gt; = StackU8::from_array_copy([<span class=\"number\">1</span>, <span class=\"number\">2</span>])\n    .own_swap().v_assert_ok().s;\n<span class=\"macro\">assert_eq!</span>[S.as_slice(), <span class=\"kw-2\">&amp;</span>[<span class=\"number\">2</span>, <span class=\"number\">1</span>]];\n\n<span class=\"kw\">const </span>T: StackU8&lt;i32, <span class=\"number\">1</span>&gt; = StackU8::from_array_copy([<span class=\"number\">1</span>])\n    .own_swap().v_assert_err().s;\n<span class=\"macro\">assert_eq!</span>[T.as_slice(), <span class=\"kw-2\">&amp;</span>[<span class=\"number\">1</span>]];</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.own_swap_unchecked\" class=\"method\"><a class=\"src rightside\" href=\"src/devela/data/list/stack/stack/methods/own.rs.html#988\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"devela/all/struct.Stack.html#tymethod.own_swap_unchecked\" class=\"fn\">own_swap_unchecked</a>(self) -&gt; <a class=\"struct\" href=\"devela/all/struct.Own.html\" title=\"struct devela::all::Own\">Own</a>&lt;Self, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Swaps the top two stack elements in compile-time, unchecked version.</p>\n<p><code>( 1 2 -- 2 1 )</code></p>\n<h5 id=\"panics-7\"><a class=\"doc-anchor\" href=\"#panics-7\">§</a>Panics</h5>\n<p>Panics if the stack doesn’t contain at least 2 elements.</p>\n<h5 id=\"examples-17\"><a class=\"doc-anchor\" href=\"#examples-17\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">const </span>S: StackU8&lt;i32, <span class=\"number\">2</span>&gt; = StackU8::from_array_copy([<span class=\"number\">1</span>, <span class=\"number\">2</span>])\n    .own_swap_unchecked().s;\n<span class=\"macro\">assert_eq!</span>[S.as_slice(), <span class=\"kw-2\">&amp;</span>[<span class=\"number\">2</span>, <span class=\"number\">1</span>]];</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.own_swap2\" class=\"method\"><a class=\"src rightside\" href=\"src/devela/data/list/stack/stack/methods/own.rs.html#988\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"devela/all/struct.Stack.html#tymethod.own_swap2\" class=\"fn\">own_swap2</a>(self) -&gt; <a class=\"struct\" href=\"devela/all/struct.Own.html\" title=\"struct devela::all::Own\">Own</a>&lt;Self, <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"devela/all/struct.NotEnoughElements.html\" title=\"struct devela::all::NotEnoughElements\">NotEnoughElements</a>&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Swaps the top two pair stack elements in compile-time.</p>\n<p><code>( 1 2 3 4 -- 3 4 1 2 )</code></p>\n<h5 id=\"errors-9\"><a class=\"doc-anchor\" href=\"#errors-9\">§</a>Errors</h5>\n<p>Returns <code>Own&lt;self,</code><a href=\"devela/all/struct.NotEnoughElements.html\" title=\"struct devela::all::NotEnoughElements\"><code>NotEnoughElements</code></a><code>&gt;</code>\nif the stack doesn’t contain at least 4 elements.</p>\n<h5 id=\"examples-18\"><a class=\"doc-anchor\" href=\"#examples-18\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">const </span>S: StackU8&lt;i32, <span class=\"number\">4</span>&gt; = StackU8::from_array_copy([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>])\n    .own_swap2().v_assert_ok().s;\n<span class=\"macro\">assert_eq!</span>[S.as_slice(), <span class=\"kw-2\">&amp;</span>[<span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>]];\n\n<span class=\"kw\">const </span>T: StackU8&lt;i32, <span class=\"number\">3</span>&gt; = StackU8::from_array_copy([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>])\n    .own_swap2().v_assert_err().s;\n<span class=\"macro\">assert_eq!</span>[T.as_slice(), <span class=\"kw-2\">&amp;</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]];</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.own_swap2_unchecked\" class=\"method\"><a class=\"src rightside\" href=\"src/devela/data/list/stack/stack/methods/own.rs.html#988\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"devela/all/struct.Stack.html#tymethod.own_swap2_unchecked\" class=\"fn\">own_swap2_unchecked</a>(self) -&gt; <a class=\"struct\" href=\"devela/all/struct.Own.html\" title=\"struct devela::all::Own\">Own</a>&lt;Self, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Swaps the top two pair stack elements in compile-time, unchecked version.</p>\n<p><code>( 1 2 3 4 -- 3 4 1 2 )</code></p>\n<h5 id=\"panics-8\"><a class=\"doc-anchor\" href=\"#panics-8\">§</a>Panics</h5>\n<p>Panics if the stack doesn’t contain at least 4 elements.</p>\n<h5 id=\"examples-19\"><a class=\"doc-anchor\" href=\"#examples-19\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">const </span>S: StackU8&lt;i32, <span class=\"number\">4</span>&gt; = StackU8::from_array_copy([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>])\n    .own_swap2_unchecked().s;\n<span class=\"macro\">assert_eq!</span>[S.as_slice(), <span class=\"kw-2\">&amp;</span>[<span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>]];</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.own_rot\" class=\"method\"><a class=\"src rightside\" href=\"src/devela/data/list/stack/stack/methods/own.rs.html#988\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"devela/all/struct.Stack.html#tymethod.own_rot\" class=\"fn\">own_rot</a>(self) -&gt; <a class=\"struct\" href=\"devela/all/struct.Own.html\" title=\"struct devela::all::Own\">Own</a>&lt;Self, <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"devela/all/struct.NotEnoughElements.html\" title=\"struct devela::all::NotEnoughElements\">NotEnoughElements</a>&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Rotates the top three stack elements, clockwise.</p>\n<p><code>( 1 2 3 -- 2 3 1 ) </code></p>\n<h5 id=\"errors-10\"><a class=\"doc-anchor\" href=\"#errors-10\">§</a>Errors</h5>\n<p>Returns <code>Own&lt;self,</code><a href=\"devela/all/struct.NotEnoughElements.html\" title=\"struct devela::all::NotEnoughElements\"><code>NotEnoughElements</code></a><code>&gt;</code>\nif the stack doesn’t contain at least 3 elements.</p>\n<h5 id=\"examples-20\"><a class=\"doc-anchor\" href=\"#examples-20\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">const </span>S: StackU8&lt;i32, <span class=\"number\">4</span>&gt; = StackU8::from_array_copy([<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>])\n    .own_rot().v_assert_ok().s;\n<span class=\"macro\">assert_eq!</span>[S.as_slice(), <span class=\"kw-2\">&amp;</span>[<span class=\"number\">0</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">1</span>]];</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.own_rot_unchecked\" class=\"method\"><a class=\"src rightside\" href=\"src/devela/data/list/stack/stack/methods/own.rs.html#988\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"devela/all/struct.Stack.html#tymethod.own_rot_unchecked\" class=\"fn\">own_rot_unchecked</a>(self) -&gt; <a class=\"struct\" href=\"devela/all/struct.Own.html\" title=\"struct devela::all::Own\">Own</a>&lt;Self, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Rotates the top three stack elements, clockwise, unchecked version.</p>\n<p><code>( 1 2 3 -- 2 3 1 ) </code></p>\n<h5 id=\"panics-9\"><a class=\"doc-anchor\" href=\"#panics-9\">§</a>Panics</h5>\n<p>Panics if the stack doesn’t contain at least 6 elements.\nif the stack doesn’t contain at least 3 elements.</p>\n<h5 id=\"examples-21\"><a class=\"doc-anchor\" href=\"#examples-21\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">const </span>S: StackU8&lt;i32, <span class=\"number\">4</span>&gt; = StackU8::from_array_copy([<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>])\n    .own_rot_unchecked().s;\n<span class=\"macro\">assert_eq!</span>[S.as_slice(), <span class=\"kw-2\">&amp;</span>[<span class=\"number\">0</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">1</span>]];</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.own_rot_cc\" class=\"method\"><a class=\"src rightside\" href=\"src/devela/data/list/stack/stack/methods/own.rs.html#988\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"devela/all/struct.Stack.html#tymethod.own_rot_cc\" class=\"fn\">own_rot_cc</a>(self) -&gt; <a class=\"struct\" href=\"devela/all/struct.Own.html\" title=\"struct devela::all::Own\">Own</a>&lt;Self, <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"devela/all/struct.NotEnoughElements.html\" title=\"struct devela::all::NotEnoughElements\">NotEnoughElements</a>&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Rotates the top three stack elements, counter-clockwise.</p>\n<p><code>( 1 2 3 -- 3 1 2 ) </code></p>\n<h5 id=\"errors-11\"><a class=\"doc-anchor\" href=\"#errors-11\">§</a>Errors</h5>\n<p>Returns <code>Own&lt;S,</code><a href=\"devela/all/struct.NotEnoughElements.html\" title=\"struct devela::all::NotEnoughElements\"><code>NotEnoughElements</code></a><code>&gt;</code>\nif the stack doesn’t contain at least 3 elements.</p>\n<h5 id=\"examples-22\"><a class=\"doc-anchor\" href=\"#examples-22\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">const </span>S: StackU8&lt;i32, <span class=\"number\">4</span>&gt; = StackU8::from_array_copy([<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>])\n    .own_rot_cc().v_assert_ok().s;\n<span class=\"macro\">assert_eq!</span>[S.as_slice(), <span class=\"kw-2\">&amp;</span>[<span class=\"number\">0</span>, <span class=\"number\">3</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>]];</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.own_rot_cc_unchecked\" class=\"method\"><a class=\"src rightside\" href=\"src/devela/data/list/stack/stack/methods/own.rs.html#988\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"devela/all/struct.Stack.html#tymethod.own_rot_cc_unchecked\" class=\"fn\">own_rot_cc_unchecked</a>(self) -&gt; <a class=\"struct\" href=\"devela/all/struct.Own.html\" title=\"struct devela::all::Own\">Own</a>&lt;Self, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Rotates the top three stack elements, counter-clockwise, unchecked version.</p>\n<p><code>( 1 2 3 -- 3 1 2 ) </code></p>\n<h5 id=\"errors-12\"><a class=\"doc-anchor\" href=\"#errors-12\">§</a>Errors</h5>\n<p>Returns <code>Own&lt;S,</code><a href=\"devela/all/struct.NotEnoughElements.html\" title=\"struct devela::all::NotEnoughElements\"><code>NotEnoughElements</code></a><code>&gt;</code>\nif the stack doesn’t contain at least 3 elements.</p>\n<h5 id=\"examples-23\"><a class=\"doc-anchor\" href=\"#examples-23\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">const </span>S: StackU8&lt;i32, <span class=\"number\">4</span>&gt; = StackU8::from_array_copy([<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>])\n    .own_rot_cc_unchecked().s;\n<span class=\"macro\">assert_eq!</span>[S.as_slice(), <span class=\"kw-2\">&amp;</span>[<span class=\"number\">0</span>, <span class=\"number\">3</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>]];</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.own_rot2\" class=\"method\"><a class=\"src rightside\" href=\"src/devela/data/list/stack/stack/methods/own.rs.html#988\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"devela/all/struct.Stack.html#tymethod.own_rot2\" class=\"fn\">own_rot2</a>(self) -&gt; <a class=\"struct\" href=\"devela/all/struct.Own.html\" title=\"struct devela::all::Own\">Own</a>&lt;Self, <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"devela/all/struct.NotEnoughElements.html\" title=\"struct devela::all::NotEnoughElements\">NotEnoughElements</a>&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Rotates the top six stack elements, clockwise, two times.</p>\n<p><code>( 1 2 3 4 5 6 -- 3 4 5 6 1 2 ) </code></p>\n<h5 id=\"errors-13\"><a class=\"doc-anchor\" href=\"#errors-13\">§</a>Errors</h5>\n<p>Returns <code>Own&lt;self,</code><a href=\"devela/all/struct.NotEnoughElements.html\" title=\"struct devela::all::NotEnoughElements\"><code>NotEnoughElements</code></a><code>&gt;</code>\nif the stack doesn’t contain at least 6 elements.</p>\n<h5 id=\"examples-24\"><a class=\"doc-anchor\" href=\"#examples-24\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">const </span>S: StackU8&lt;i32, <span class=\"number\">7</span>&gt; = StackU8::from_array_copy([<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>])\n    .own_rot2().v_assert_ok().s;\n<span class=\"macro\">assert_eq!</span>[S.as_slice(), <span class=\"kw-2\">&amp;</span>[<span class=\"number\">0</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>]];</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.own_rot2_unchecked\" class=\"method\"><a class=\"src rightside\" href=\"src/devela/data/list/stack/stack/methods/own.rs.html#988\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"devela/all/struct.Stack.html#tymethod.own_rot2_unchecked\" class=\"fn\">own_rot2_unchecked</a>(self) -&gt; <a class=\"struct\" href=\"devela/all/struct.Own.html\" title=\"struct devela::all::Own\">Own</a>&lt;Self, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Rotates the top six stack elements, clockwise, two times, unchecked version.</p>\n<p><code>( 1 2 3 4 5 6 -- 3 4 5 6 1 2 ) </code></p>\n<h5 id=\"panics-10\"><a class=\"doc-anchor\" href=\"#panics-10\">§</a>Panics</h5>\n<p>Panics if the stack doesn’t contain at least 6 elements.</p>\n<h5 id=\"examples-25\"><a class=\"doc-anchor\" href=\"#examples-25\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">const </span>S: StackU8&lt;i32, <span class=\"number\">7</span>&gt; = StackU8::from_array_copy([<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>])\n    .own_rot2_unchecked().s;\n<span class=\"macro\">assert_eq!</span>[S.as_slice(), <span class=\"kw-2\">&amp;</span>[<span class=\"number\">0</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>]];</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.own_rot2_cc\" class=\"method\"><a class=\"src rightside\" href=\"src/devela/data/list/stack/stack/methods/own.rs.html#988\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"devela/all/struct.Stack.html#tymethod.own_rot2_cc\" class=\"fn\">own_rot2_cc</a>(self) -&gt; <a class=\"struct\" href=\"devela/all/struct.Own.html\" title=\"struct devela::all::Own\">Own</a>&lt;Self, <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"devela/all/struct.NotEnoughElements.html\" title=\"struct devela::all::NotEnoughElements\">NotEnoughElements</a>&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Rotates the top six stack elements, counter-clockwise, two times.</p>\n<p><code>( 1 2 3 4 5 6 -- 5 6 1 2 3 4 ) </code></p>\n<h5 id=\"errors-14\"><a class=\"doc-anchor\" href=\"#errors-14\">§</a>Errors</h5>\n<p>Returns <code>Own&lt;self,</code><a href=\"devela/all/struct.NotEnoughElements.html\" title=\"struct devela::all::NotEnoughElements\"><code>NotEnoughElements</code></a><code>&gt;</code>\nif the stack doesn’t contain at least 6 elements.</p>\n<h5 id=\"examples-26\"><a class=\"doc-anchor\" href=\"#examples-26\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">const </span>S: StackU8&lt;i32, <span class=\"number\">7</span>&gt; = StackU8::from_array_copy([<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>])\n    .own_rot2_cc().v_assert_ok().s;\n<span class=\"macro\">assert_eq!</span>[S.as_slice(), <span class=\"kw-2\">&amp;</span>[<span class=\"number\">0</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]];</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.own_rot2_cc_unchecked\" class=\"method\"><a class=\"src rightside\" href=\"src/devela/data/list/stack/stack/methods/own.rs.html#988\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"devela/all/struct.Stack.html#tymethod.own_rot2_cc_unchecked\" class=\"fn\">own_rot2_cc_unchecked</a>(self) -&gt; <a class=\"struct\" href=\"devela/all/struct.Own.html\" title=\"struct devela::all::Own\">Own</a>&lt;Self, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Rotates the top six stack elements, counter-clockwise, two times, unchecked version.</p>\n<p><code>( 1 2 3 4 5 6 -- 5 6 1 2 3 4 ) </code></p>\n<h5 id=\"panics-11\"><a class=\"doc-anchor\" href=\"#panics-11\">§</a>Panics</h5>\n<p>Panics if the stack doesn’t contain at least 6 elements.</p>\n<h5 id=\"examples-27\"><a class=\"doc-anchor\" href=\"#examples-27\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">const </span>S: StackU8&lt;i32, <span class=\"number\">7</span>&gt; = StackU8::from_array_copy([<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>])\n    .own_rot2_cc_unchecked().s;\n<span class=\"macro\">assert_eq!</span>[S.as_slice(), <span class=\"kw-2\">&amp;</span>[<span class=\"number\">0</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]];</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.own_dup\" class=\"method\"><a class=\"src rightside\" href=\"src/devela/data/list/stack/stack/methods/own.rs.html#988\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"devela/all/struct.Stack.html#tymethod.own_dup\" class=\"fn\">own_dup</a>(self) -&gt; <a class=\"struct\" href=\"devela/all/struct.Own.html\" title=\"struct devela::all::Own\">Own</a>&lt;Self, <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"enum\" href=\"devela/all/enum.DataNotEnough.html\" title=\"enum devela::all::DataNotEnough\">DataNotEnough</a>&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Duplicates the top stack element.</p>\n<p><code>( 1 -- 1 1 )</code></p>\n<h5 id=\"errors-15\"><a class=\"doc-anchor\" href=\"#errors-15\">§</a>Errors</h5>\n<p>Returns <code>Own&lt;self,</code><a href=\"devela/all/enum.DataNotEnough.html#variant.Elements\" title=\"variant devela::all::DataNotEnough::Elements\"><code>DataNotEnough::Elements</code></a><code>&gt;</code> if the stack is empty or\n<code>Own&lt;self,</code><a href=\"devela/all/enum.DataNotEnough.html#variant.Space\" title=\"variant devela::all::DataNotEnough::Space\"><code>DataNotEnough::Space</code></a><code>&gt;</code> if the stack is full.</p>\n<h5 id=\"examples-28\"><a class=\"doc-anchor\" href=\"#examples-28\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">const </span>S: StackU8&lt;i32, <span class=\"number\">3</span>&gt; = StackU8::own_new(<span class=\"number\">0</span>).s_const_unwrap().s\n    .own_push(<span class=\"number\">1</span>).s.own_dup().v_assert_ok().s;\n<span class=\"macro\">assert_eq!</span>[S.as_slice(), <span class=\"kw-2\">&amp;</span>[<span class=\"number\">1</span>, <span class=\"number\">1</span>]];</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.own_dup_unchecked\" class=\"method\"><a class=\"src rightside\" href=\"src/devela/data/list/stack/stack/methods/own.rs.html#988\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"devela/all/struct.Stack.html#tymethod.own_dup_unchecked\" class=\"fn\">own_dup_unchecked</a>(self) -&gt; <a class=\"struct\" href=\"devela/all/struct.Own.html\" title=\"struct devela::all::Own\">Own</a>&lt;Self, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Duplicates the top stack element, unchecked version.</p>\n<p><code>( 1 -- 1 1 )</code></p>\n<h5 id=\"panics-12\"><a class=\"doc-anchor\" href=\"#panics-12\">§</a>Panics</h5>\n<p>Panics if the stack is either empty or full.</p>\n<h5 id=\"examples-29\"><a class=\"doc-anchor\" href=\"#examples-29\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">const </span>S: StackU8&lt;i32, <span class=\"number\">3</span>&gt; = StackU8::own_new(<span class=\"number\">0</span>).s_const_unwrap().s\n    .own_push(<span class=\"number\">1</span>).s.own_dup_unchecked().s;\n<span class=\"macro\">assert_eq!</span>[S.as_slice(), <span class=\"kw-2\">&amp;</span>[<span class=\"number\">1</span>, <span class=\"number\">1</span>]];</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.own_dup2\" class=\"method\"><a class=\"src rightside\" href=\"src/devela/data/list/stack/stack/methods/own.rs.html#988\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"devela/all/struct.Stack.html#tymethod.own_dup2\" class=\"fn\">own_dup2</a>(self) -&gt; <a class=\"struct\" href=\"devela/all/struct.Own.html\" title=\"struct devela::all::Own\">Own</a>&lt;Self, <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"enum\" href=\"devela/all/enum.DataNotEnough.html\" title=\"enum devela::all::DataNotEnough\">DataNotEnough</a>&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Duplicates the top stack pair of elements.</p>\n<p><code>( 1 2 -- 1 2 1 2 )</code></p>\n<h5 id=\"errors-16\"><a class=\"doc-anchor\" href=\"#errors-16\">§</a>Errors</h5>\n<p>Returns <code>Own&lt;self,</code><a href=\"devela/all/enum.DataNotEnough.html#variant.Elements\" title=\"variant devela::all::DataNotEnough::Elements\"><code>DataNotEnough::Elements</code></a><code>&gt;</code>\nif the stack doesn’t have at least 2 elements,\nor <code>Own&lt;self,</code><a href=\"devela/all/enum.DataNotEnough.html#variant.Space\" title=\"variant devela::all::DataNotEnough::Space\"><code>DataNotEnough::Space</code></a><code>&gt;</code>\nif it doesn’t have enough space for 2 extra elements.</p>\n<h5 id=\"examples-30\"><a class=\"doc-anchor\" href=\"#examples-30\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">const </span>S: StackU8&lt;i32, <span class=\"number\">6</span>&gt; = StackU8::from_array_copy([<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>])\n    .own_drop_n(<span class=\"number\">3</span>).s.own_dup2().v_assert_ok().s;\n<span class=\"macro\">assert_eq!</span>[S.as_slice(), <span class=\"kw-2\">&amp;</span>[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>]];</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.own_dup2_unchecked\" class=\"method\"><a class=\"src rightside\" href=\"src/devela/data/list/stack/stack/methods/own.rs.html#988\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"devela/all/struct.Stack.html#tymethod.own_dup2_unchecked\" class=\"fn\">own_dup2_unchecked</a>(self) -&gt; <a class=\"struct\" href=\"devela/all/struct.Own.html\" title=\"struct devela::all::Own\">Own</a>&lt;Self, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Duplicates the top stack pair of elements, unchecked version.</p>\n<p><code>( 1 2 -- 1 2 1 2 )</code></p>\n<h5 id=\"panics-13\"><a class=\"doc-anchor\" href=\"#panics-13\">§</a>Panics</h5>\n<p>Panics if the stack doesn’t have at least 2 elements,\nor if it doesn’t have enough space for 2 extra elements.</p>\n<h5 id=\"examples-31\"><a class=\"doc-anchor\" href=\"#examples-31\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">const </span>S: StackU8&lt;i32, <span class=\"number\">6</span>&gt; = StackU8::from_array_copy([<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>])\n    .own_drop_n(<span class=\"number\">3</span>).s.own_dup2_unchecked().s;\n<span class=\"macro\">assert_eq!</span>[S.as_slice(), <span class=\"kw-2\">&amp;</span>[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>]];</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.own_over\" class=\"method\"><a class=\"src rightside\" href=\"src/devela/data/list/stack/stack/methods/own.rs.html#988\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"devela/all/struct.Stack.html#tymethod.own_over\" class=\"fn\">own_over</a>(self) -&gt; <a class=\"struct\" href=\"devela/all/struct.Own.html\" title=\"struct devela::all::Own\">Own</a>&lt;Self, <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"enum\" href=\"devela/all/enum.DataNotEnough.html\" title=\"enum devela::all::DataNotEnough\">DataNotEnough</a>&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Duplicates the next of stack element to the top.</p>\n<p><code>( 1 2 -- 1 2 1 )</code></p>\n<h5 id=\"errors-17\"><a class=\"doc-anchor\" href=\"#errors-17\">§</a>Errors</h5>\n<p>Returns <code>Own&lt;self,</code><a href=\"devela/all/enum.DataNotEnough.html#variant.Elements\" title=\"variant devela::all::DataNotEnough::Elements\"><code>DataNotEnough::Elements</code></a><code>&gt;</code>\nif the stack doesn’t have at least 2 elements,\nor <code>Own&lt;self,</code><a href=\"devela/all/enum.DataNotEnough.html#variant.Space\" title=\"variant devela::all::DataNotEnough::Space\"><code>DataNotEnough::Space</code></a><code>&gt;</code>\nif it doesn’t have enough space for 2 extra elements.</p>\n<h5 id=\"examples-32\"><a class=\"doc-anchor\" href=\"#examples-32\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">const </span>S: StackU8&lt;i32, <span class=\"number\">4</span>&gt; = StackU8::from_array_copy([<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">0</span>])\n    .own_drop().s.own_over().v_assert_ok().s;\n<span class=\"macro\">assert_eq!</span>[S.as_slice(), <span class=\"kw-2\">&amp;</span>[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>]];</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.own_over_unchecked\" class=\"method\"><a class=\"src rightside\" href=\"src/devela/data/list/stack/stack/methods/own.rs.html#988\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"devela/all/struct.Stack.html#tymethod.own_over_unchecked\" class=\"fn\">own_over_unchecked</a>(self) -&gt; <a class=\"struct\" href=\"devela/all/struct.Own.html\" title=\"struct devela::all::Own\">Own</a>&lt;Self, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Duplicates the next of stack element to the top.</p>\n<p><code>( 1 2 -- 1 2 1 )</code></p>\n<h5 id=\"panics-14\"><a class=\"doc-anchor\" href=\"#panics-14\">§</a>Panics</h5>\n<p>Panics if the stack doesn’t have at least 2 elements,\nor if it doesn’t have enough space for 2 extra elements.</p>\n<h5 id=\"examples-33\"><a class=\"doc-anchor\" href=\"#examples-33\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">const </span>S: StackU8&lt;i32, <span class=\"number\">4</span>&gt; = StackU8::from_array_copy([<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">0</span>])\n    .own_drop().s.own_over_unchecked().s;\n<span class=\"macro\">assert_eq!</span>[S.as_slice(), <span class=\"kw-2\">&amp;</span>[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>]];</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.own_over2\" class=\"method\"><a class=\"src rightside\" href=\"src/devela/data/list/stack/stack/methods/own.rs.html#988\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"devela/all/struct.Stack.html#tymethod.own_over2\" class=\"fn\">own_over2</a>(self) -&gt; <a class=\"struct\" href=\"devela/all/struct.Own.html\" title=\"struct devela::all::Own\">Own</a>&lt;Self, <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"enum\" href=\"devela/all/enum.DataNotEnough.html\" title=\"enum devela::all::DataNotEnough\">DataNotEnough</a>&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Duplicates the next of stack pair of elements to the top.</p>\n<p><code>( 1 2 3 4 -- 1 2 3 4 1 2 )</code></p>\n<h5 id=\"errors-18\"><a class=\"doc-anchor\" href=\"#errors-18\">§</a>Errors</h5>\n<p>Returns <code>Own&lt;self,</code><a href=\"devela/all/enum.DataNotEnough.html#variant.Elements\" title=\"variant devela::all::DataNotEnough::Elements\"><code>DataNotEnough::Elements</code></a><code>&gt;</code>\nif the stack doesn’t have at least 4 elements,\nor <code>Own&lt;self,</code><a href=\"devela/all/enum.DataNotEnough.html#variant.Space\" title=\"variant devela::all::DataNotEnough::Space\"><code>DataNotEnough::Space</code></a><code>&gt;</code>\nif it doesn’t have enough space for 2 extra elements.</p>\n<h5 id=\"examples-34\"><a class=\"doc-anchor\" href=\"#examples-34\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">const </span>S: StackU8&lt;i32, <span class=\"number\">7</span>&gt; = StackU8::from_array_copy([<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>])\n    .own_drop_n(<span class=\"number\">2</span>).s.own_over2().v_assert_ok().s;\n<span class=\"macro\">assert_eq!</span>[S.as_slice(), <span class=\"kw-2\">&amp;</span>[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>]];</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.own_over2_unchecked\" class=\"method\"><a class=\"src rightside\" href=\"src/devela/data/list/stack/stack/methods/own.rs.html#988\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"devela/all/struct.Stack.html#tymethod.own_over2_unchecked\" class=\"fn\">own_over2_unchecked</a>(self) -&gt; <a class=\"struct\" href=\"devela/all/struct.Own.html\" title=\"struct devela::all::Own\">Own</a>&lt;Self, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Duplicates the next of stack pair of elements to the top.</p>\n<p><code>( 1 2 3 4 -- 1 2 3 4 1 2 )</code></p>\n<h5 id=\"panics-15\"><a class=\"doc-anchor\" href=\"#panics-15\">§</a>Panics</h5>\n<p>Panics if the stack doesn’t have at least 4 elements,\nor if it doesn’t have enough space for 2 extra elements.</p>\n<h5 id=\"examples-35\"><a class=\"doc-anchor\" href=\"#examples-35\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">const </span>S: StackU8&lt;i32, <span class=\"number\">7</span>&gt; = StackU8::from_array_copy([<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>])\n    .own_drop_n(<span class=\"number\">2</span>).s.own_over2_unchecked().s;\n<span class=\"macro\">assert_eq!</span>[S.as_slice(), <span class=\"kw-2\">&amp;</span>[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>]];</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.own_tuck\" class=\"method\"><a class=\"src rightside\" href=\"src/devela/data/list/stack/stack/methods/own.rs.html#988\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"devela/all/struct.Stack.html#tymethod.own_tuck\" class=\"fn\">own_tuck</a>(self) -&gt; <a class=\"struct\" href=\"devela/all/struct.Own.html\" title=\"struct devela::all::Own\">Own</a>&lt;Self, <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"enum\" href=\"devela/all/enum.DataNotEnough.html\" title=\"enum devela::all::DataNotEnough\">DataNotEnough</a>&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Duplicates the top element before the next of stack element.</p>\n<p><code>( 1 2 -- 2 1 2 )</code></p>\n<h5 id=\"errors-19\"><a class=\"doc-anchor\" href=\"#errors-19\">§</a>Errors</h5>\n<p>Returns <code>Own&lt;self,</code><a href=\"devela/all/enum.DataNotEnough.html#variant.Elements\" title=\"variant devela::all::DataNotEnough::Elements\"><code>DataNotEnough::Elements</code></a><code>&gt;</code>\nif the stack doesn’t have at least 2 elements,\nor <code>Own&lt;self,</code><a href=\"devela/all/enum.DataNotEnough.html#variant.Space\" title=\"variant devela::all::DataNotEnough::Space\"><code>DataNotEnough::Space</code></a><code>&gt;</code>\nif it doesn’t have enough space for 1 extra elements.</p>\n<h5 id=\"examples-36\"><a class=\"doc-anchor\" href=\"#examples-36\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">const </span>S: StackU8&lt;i32, <span class=\"number\">4</span>&gt; = StackU8::from_array_copy([<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">0</span>])\n    .own_drop().s.own_tuck().v_assert_ok().s;\n<span class=\"macro\">assert_eq!</span>[S.as_slice(), <span class=\"kw-2\">&amp;</span>[<span class=\"number\">0</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>]];</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.own_tuck_unchecked\" class=\"method\"><a class=\"src rightside\" href=\"src/devela/data/list/stack/stack/methods/own.rs.html#988\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"devela/all/struct.Stack.html#tymethod.own_tuck_unchecked\" class=\"fn\">own_tuck_unchecked</a>(self) -&gt; <a class=\"struct\" href=\"devela/all/struct.Own.html\" title=\"struct devela::all::Own\">Own</a>&lt;Self, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Duplicates the top element before the next of stack element, unchecked version.</p>\n<p><code>( 1 2 -- 2 1 2 )</code></p>\n<h5 id=\"panics-16\"><a class=\"doc-anchor\" href=\"#panics-16\">§</a>Panics</h5>\n<p>Panics if the stack doesn’t have at least 2 elements,\nor if it doesn’t have enough space for 1 extra elements.</p>\n<h5 id=\"examples-37\"><a class=\"doc-anchor\" href=\"#examples-37\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">const </span>S: StackU8&lt;i32, <span class=\"number\">4</span>&gt; = StackU8::from_array_copy([<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">0</span>])\n    .own_drop().s.own_tuck_unchecked().s;\n<span class=\"macro\">assert_eq!</span>[S.as_slice(), <span class=\"kw-2\">&amp;</span>[<span class=\"number\">0</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>]];</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.own_tuck2\" class=\"method\"><a class=\"src rightside\" href=\"src/devela/data/list/stack/stack/methods/own.rs.html#988\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"devela/all/struct.Stack.html#tymethod.own_tuck2\" class=\"fn\">own_tuck2</a>(self) -&gt; <a class=\"struct\" href=\"devela/all/struct.Own.html\" title=\"struct devela::all::Own\">Own</a>&lt;Self, <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"enum\" href=\"devela/all/enum.DataNotEnough.html\" title=\"enum devela::all::DataNotEnough\">DataNotEnough</a>&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Duplicates the top pair of elements before the next of stack pair of elements.</p>\n<p><code>( 1 2 3 4 -- 3 4 1 2 3 4 )</code></p>\n<h5 id=\"errors-20\"><a class=\"doc-anchor\" href=\"#errors-20\">§</a>Errors</h5>\n<p>Returns <code>Own&lt;self,</code><a href=\"devela/all/enum.DataNotEnough.html#variant.Elements\" title=\"variant devela::all::DataNotEnough::Elements\"><code>DataNotEnough::Elements</code></a><code>&gt;</code>\nif the stack doesn’t have at least 4 elements,\nor <code>Own&lt;self,</code><a href=\"devela/all/enum.DataNotEnough.html#variant.Space\" title=\"variant devela::all::DataNotEnough::Space\"><code>DataNotEnough::Space</code></a><code>&gt;</code>\nif it doesn’t have enough space for 2 extra elements.</p>\n<h5 id=\"examples-38\"><a class=\"doc-anchor\" href=\"#examples-38\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">const </span>S: StackU8&lt;i32, <span class=\"number\">7</span>&gt; = StackU8::from_array_copy([<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>])\n    .own_drop_n(<span class=\"number\">2</span>).s.own_tuck2_unchecked().s;\n<span class=\"macro\">assert_eq!</span>[S.as_slice(), <span class=\"kw-2\">&amp;</span>[<span class=\"number\">0</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]];</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.own_tuck2_unchecked\" class=\"method\"><a class=\"src rightside\" href=\"src/devela/data/list/stack/stack/methods/own.rs.html#988\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"devela/all/struct.Stack.html#tymethod.own_tuck2_unchecked\" class=\"fn\">own_tuck2_unchecked</a>(self) -&gt; <a class=\"struct\" href=\"devela/all/struct.Own.html\" title=\"struct devela::all::Own\">Own</a>&lt;Self, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Duplicates the top pair of elements before the next of stack pair of elements,\nunchecked version.</p>\n<p><code>( 1 2 3 4 -- 3 4 1 2 3 4 )</code></p>\n<h5 id=\"panics-17\"><a class=\"doc-anchor\" href=\"#panics-17\">§</a>Panics</h5>\n<p>Panics if the stack doesn’t have at least 4 elements,\nor if it doesn’t have enough space for 2 extra elements.</p>\n<h5 id=\"examples-39\"><a class=\"doc-anchor\" href=\"#examples-39\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">const </span>S: StackU8&lt;i32, <span class=\"number\">7</span>&gt; = StackU8::from_array_copy([<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>])\n    .own_drop_n(<span class=\"number\">2</span>).s.own_tuck2_unchecked().s;\n<span class=\"macro\">assert_eq!</span>[S.as_slice(), <span class=\"kw-2\">&amp;</span>[<span class=\"number\">0</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]];</code></pre></div>\n</div></details></div></details>",0,"devela::data::list::stack::stack::definitions::StackU8"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Stack%3CT,+CAP,+u8,+Boxed%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/devela/data/list/stack/stack/methods/convert.rs.html#401\">Source</a><a href=\"#impl-Stack%3CT,+CAP,+u8,+Boxed%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, const CAP: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt; <a class=\"struct\" href=\"devela/all/struct.Stack.html\" title=\"struct devela::all::Stack\">Stack</a>&lt;T, CAP, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>, <a class=\"struct\" href=\"devela/all/struct.Boxed.html\" title=\"struct devela::all::Boxed\">Boxed</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_idx_u8\" class=\"method\"><a class=\"src rightside\" href=\"src/devela/data/list/stack/stack/methods/convert.rs.html#401\">Source</a><h4 class=\"code-header\">pub fn <a href=\"devela/all/struct.Stack.html#tymethod.to_idx_u8\" class=\"fn\">to_idx_u8</a>(self) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"struct\" href=\"devela/all/struct.Stack.html\" title=\"struct devela::all::Stack\">Stack</a>&lt;T, CAP, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>, <a class=\"struct\" href=\"devela/all/struct.Boxed.html\" title=\"struct devela::all::Boxed\">Boxed</a>&gt;, <a class=\"struct\" href=\"devela/all/struct.NotEnoughSpace.html\" title=\"struct devela::all::NotEnoughSpace\">NotEnoughSpace</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;Stack&lt;T, CAP, u8, Boxed&gt;, NotEnoughSpace&gt;\">ⓘ</a></h4></section><span class=\"item-info\"><div class=\"stab portability\">Available on <strong>crate feature <code>alloc</code></strong> only.</div></span></summary><div class=\"docblock\"><p>Converts the current stack index size <code>IDX</code> to a <code>NEW_IDX</code>.</p>\n<h5 id=\"errors\"><a class=\"doc-anchor\" href=\"#errors\">§</a>Errors</h5>\n<p>Returns <a href=\"devela/all/struct.NotEnoughSpace.html\" title=\"struct devela::all::NotEnoughSpace\"><code>NotEnoughSpace</code></a> if <code>CAP &gt; </code><a href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html#associatedconstant.MAX\" title=\"associated constant u8::MAX\"><code>u8::MAX</code></a>.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>s = StackU8::&lt;<span class=\"kw\">_</span>, <span class=\"number\">6</span>, Boxed&gt;::from([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);\n<span class=\"kw\">let </span>t: StackU8::&lt;<span class=\"kw\">_</span>, <span class=\"number\">6</span>, Boxed&gt; = s.to_idx_u8().unwrap();\n<span class=\"macro\">assert_eq!</span>[t.as_slice(), <span class=\"kw-2\">&amp;</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]];</code></pre></div>\n</div></details></div></details>",0,"devela::data::list::stack::stack::definitions::StackU8"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Stack%3CT,+CAP,+u8,+Boxed%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/devela/data/list/stack/stack/methods/convert.rs.html#401\">Source</a><a href=\"#impl-Stack%3CT,+CAP,+u8,+Boxed%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T: <a class=\"trait\" href=\"devela/code/trait.Default.html\" title=\"trait devela::code::Default\">Default</a>, const CAP: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt; <a class=\"struct\" href=\"devela/all/struct.Stack.html\" title=\"struct devela::all::Stack\">Stack</a>&lt;T, CAP, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>, <a class=\"struct\" href=\"devela/all/struct.Boxed.html\" title=\"struct devela::all::Boxed\">Boxed</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.resize_default\" class=\"method\"><a class=\"src rightside\" href=\"src/devela/data/list/stack/stack/methods/convert.rs.html#401\">Source</a><h4 class=\"code-header\">pub fn <a href=\"devela/all/struct.Stack.html#tymethod.resize_default\" class=\"fn\">resize_default</a>&lt;const NEW_CAP: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt;(\n    self,\n) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"struct\" href=\"devela/all/struct.Stack.html\" title=\"struct devela::all::Stack\">Stack</a>&lt;T, NEW_CAP, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>, <a class=\"struct\" href=\"devela/all/struct.Boxed.html\" title=\"struct devela::all::Boxed\">Boxed</a>&gt;, <a class=\"struct\" href=\"devela/all/struct.IndexOutOfBounds.html\" title=\"struct devela::all::IndexOutOfBounds\">IndexOutOfBounds</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;Stack&lt;T, NEW_CAP, u8, Boxed&gt;, IndexOutOfBounds&gt;\">ⓘ</a></h4></section><span class=\"item-info\"><div class=\"stab portability\">Available on <strong>crate feature <code>alloc</code></strong> only.</div></span></summary><div class=\"docblock\"><p>Converts the current stack to a different capacity while preserving all existing\nelements.</p>\n<p>This method creates a new stack with the specified new capacity and moves the\ncurrent elements into it. The operation ensures that the new stack can accommodate\nthe number of elements currently held in the stack. It is designed to work with\nboth increases and decreases in capacity, as long as the new capacity can fit the\ncurrent number of elements.</p>\n<h5 id=\"errors\"><a class=\"doc-anchor\" href=\"#errors\">§</a>Errors</h5>\n<p>Returns <a href=\"devela/all/struct.IndexOutOfBounds.html\" title=\"struct devela::all::IndexOutOfBounds\"><code>IndexOutOfBounds</code></a><code>(Some(NEW_CAP))</code> if <code>NEW_CAP &lt; self.len()</code>,\nif <code>CAP &gt; </code><a href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html#associatedconstant.MAX\" title=\"associated constant u8::MAX\"><code>u8::MAX</code></a>\nor if <code>CAP &gt; isize::MAX / size_of::&lt;T&gt;()</code>.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>s = StackU8::&lt;<span class=\"kw\">_</span>, <span class=\"number\">8</span>, Boxed&gt;::from([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]);\n<span class=\"kw\">let </span>less_cap: StackU8::&lt;<span class=\"kw\">_</span>, <span class=\"number\">4</span>, Boxed&gt; = s.clone().resize_default().unwrap();\n<span class=\"macro\">assert_eq!</span>[s.as_slice(), less_cap.as_slice()];\n<span class=\"kw\">let </span>more_cap: StackU8::&lt;<span class=\"kw\">_</span>, <span class=\"number\">12</span>, Boxed&gt; = s.clone().resize_default().unwrap();\n<span class=\"macro\">assert_eq!</span>[s.as_slice(), more_cap.as_slice()];\n<span class=\"macro\">assert!</span>[s.resize_default::&lt;<span class=\"number\">2</span>&gt;().is_err()]; <span class=\"comment\">// too small</span></code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.resize_default_truncate\" class=\"method\"><a class=\"src rightside\" href=\"src/devela/data/list/stack/stack/methods/convert.rs.html#401\">Source</a><h4 class=\"code-header\">pub fn <a href=\"devela/all/struct.Stack.html#tymethod.resize_default_truncate\" class=\"fn\">resize_default_truncate</a>&lt;const NEW_CAP: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt;(\n    self,\n) -&gt; <a class=\"struct\" href=\"devela/all/struct.Stack.html\" title=\"struct devela::all::Stack\">Stack</a>&lt;T, NEW_CAP, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>, <a class=\"struct\" href=\"devela/all/struct.Boxed.html\" title=\"struct devela::all::Boxed\">Boxed</a>&gt;</h4></section><span class=\"item-info\"><div class=\"stab portability\">Available on <strong>crate feature <code>alloc</code></strong> only.</div></span></summary><div class=\"docblock\"><p>Converts the current stack to a different capacity\nwhile preserving all existing elements.</p>\n<p>This method creates a new stack with the specified new capacity and moves the\ncurrent elements into it. The operation will drop any elements that can’t fit\nin the new capacity, starting with the first ones (from the front of the stack).</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>s = StackU8::&lt;<span class=\"kw\">_</span>, <span class=\"number\">8</span>, Boxed&gt;::from([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]);\n<span class=\"kw\">let </span>less_cap: StackU8::&lt;<span class=\"kw\">_</span>, <span class=\"number\">4</span>, Boxed&gt; = s.clone().resize_default_truncate();\n<span class=\"macro\">assert_eq!</span>[less_cap.as_slice(), s.as_slice()];\n<span class=\"kw\">let </span>more_cap: StackU8::&lt;<span class=\"kw\">_</span>, <span class=\"number\">12</span>, Boxed&gt; = s.clone().resize_default_truncate();\n<span class=\"macro\">assert_eq!</span>[more_cap.as_slice(), s.as_slice()];\n<span class=\"kw\">let </span>drop_cap: StackU8::&lt;<span class=\"kw\">_</span>, <span class=\"number\">2</span>, Boxed&gt; = s.resize_default_truncate();\n<span class=\"macro\">assert_eq!</span>[drop_cap.as_slice(), <span class=\"kw-2\">&amp;</span>[<span class=\"number\">3</span>, <span class=\"number\">4</span>]];</code></pre></div>\n</div></details></div></details>",0,"devela::data::list::stack::stack::definitions::StackU8"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Stack%3CT,+CAP,+u8,+Boxed%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/devela/data/list/stack/stack/methods/general.rs.html#1019\">Source</a><a href=\"#impl-Stack%3CT,+CAP,+u8,+Boxed%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T: <a class=\"trait\" href=\"devela/code/trait.Clone.html\" title=\"trait devela::code::Clone\">Clone</a>, const CAP: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt; <a class=\"struct\" href=\"devela/all/struct.Stack.html\" title=\"struct devela::all::Stack\">Stack</a>&lt;T, CAP, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>, <a class=\"struct\" href=\"devela/all/struct.Boxed.html\" title=\"struct devela::all::Boxed\">Boxed</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.new\" class=\"method\"><a class=\"src rightside\" href=\"src/devela/data/list/stack/stack/methods/general.rs.html#1019\">Source</a><h4 class=\"code-header\">pub fn <a href=\"devela/all/struct.Stack.html#tymethod.new\" class=\"fn\">new</a>(element: T) -&gt; Self</h4></section><span class=\"item-info\"><div class=\"stab portability\">Available on <strong>crate feature <code>alloc</code></strong> only.</div></span></summary><div class=\"docblock\"><p>Returns an empty stack, allocated in the heap,\ncloning <code>element</code> to fill the remaining free data.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>s = StackU8::&lt;<span class=\"kw\">_</span>, <span class=\"number\">100</span>, Boxed&gt;::new(<span class=\"number\">0</span>);</code></pre></div>\n</div></details></div></details>",0,"devela::data::list::stack::stack::definitions::StackU8"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Stack%3CT,+CAP,+u8,+S%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/devela/data/list/stack/stack/methods/general.rs.html#1019\">Source</a><a href=\"#impl-Stack%3CT,+CAP,+u8,+S%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, const CAP: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, S: <a class=\"trait\" href=\"devela/all/trait.Storage.html\" title=\"trait devela::all::Storage\">Storage</a>&gt; <a class=\"struct\" href=\"devela/all/struct.Stack.html\" title=\"struct devela::all::Stack\">Stack</a>&lt;T, CAP, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>, S&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_array\" class=\"method\"><a class=\"src rightside\" href=\"src/devela/data/list/stack/stack/methods/general.rs.html#1019\">Source</a><h4 class=\"code-header\">pub fn <a href=\"devela/all/struct.Stack.html#tymethod.from_array\" class=\"fn\">from_array</a>(arr: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[T; CAP]</a>) -&gt; <a class=\"struct\" href=\"devela/all/struct.Stack.html\" title=\"struct devela::all::Stack\">Stack</a>&lt;T, CAP, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>, S&gt;</h4></section></summary><div class=\"docblock\"><p>Converts an array into a <a href=\"devela/all/struct.Stack.html#method.is_full\" title=\"method devela::all::Stack::is_full\"><code>full</code></a> stack.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>s = StackU8::&lt;<span class=\"kw\">_</span>, <span class=\"number\">3</span>&gt;::from_array([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.len\" class=\"method\"><a class=\"src rightside\" href=\"src/devela/data/list/stack/stack/methods/general.rs.html#1019\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"devela/all/struct.Stack.html#tymethod.len\" class=\"fn\">len</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"u8\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Returns the number of stacked elements.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_empty\" class=\"method\"><a class=\"src rightside\" href=\"src/devela/data/list/stack/stack/methods/general.rs.html#1019\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"devela/all/struct.Stack.html#tymethod.is_empty\" class=\"fn\">is_empty</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if the stack is empty.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>s = StackU8::&lt;i32, <span class=\"number\">8</span>&gt;::default();\n<span class=\"macro\">assert!</span>[s.is_empty()];</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_full\" class=\"method\"><a class=\"src rightside\" href=\"src/devela/data/list/stack/stack/methods/general.rs.html#1019\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"devela/all/struct.Stack.html#tymethod.is_full\" class=\"fn\">is_full</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if the stack is full.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>s = StackU8::&lt;<span class=\"kw\">_</span>, <span class=\"number\">3</span>&gt;::from([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);\n<span class=\"macro\">assert!</span>[s.is_full()];</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.capacity\" class=\"method\"><a class=\"src rightside\" href=\"src/devela/data/list/stack/stack/methods/general.rs.html#1019\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"devela/all/struct.Stack.html#tymethod.capacity\" class=\"fn\">capacity</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"u8\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Returns the stack’s total capacity.</p>\n<h5 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>s = StackU8::&lt;i32, <span class=\"number\">3</span>&gt;::default();\n<span class=\"macro\">assert_eq!</span>[<span class=\"number\">3</span>, s.capacity()];</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.remaining_capacity\" class=\"method\"><a class=\"src rightside\" href=\"src/devela/data/list/stack/stack/methods/general.rs.html#1019\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"devela/all/struct.Stack.html#tymethod.remaining_capacity\" class=\"fn\">remaining_capacity</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"u8\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Returns the stack’s remaining capacity.</p>\n<h5 id=\"examples-4\"><a class=\"doc-anchor\" href=\"#examples-4\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>s = StackU8::&lt;<span class=\"kw\">_</span>, <span class=\"number\">3</span>&gt;::default();\n<span class=\"macro\">assert_eq!</span>[<span class=\"number\">3</span>, s.remaining_capacity()];\ns.push(<span class=\"number\">1</span>)<span class=\"question-mark\">?</span>;\n<span class=\"macro\">assert_eq!</span>[<span class=\"number\">2</span>, s.remaining_capacity()];</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_slice\" class=\"method\"><a class=\"src rightside\" href=\"src/devela/data/list/stack/stack/methods/general.rs.html#1019\">Source</a><h4 class=\"code-header\">pub fn <a href=\"devela/all/struct.Stack.html#tymethod.as_slice\" class=\"fn\">as_slice</a>(&amp;self) -&gt; &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&amp;[T]\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Returns the stack as a shared slice.</p>\n<h5 id=\"examples-5\"><a class=\"doc-anchor\" href=\"#examples-5\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>s = StackU8::&lt;<span class=\"kw\">_</span>, <span class=\"number\">3</span>&gt;::from([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);\n<span class=\"macro\">assert_eq!</span>[s.as_slice(), <span class=\"kw-2\">&amp;</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]];</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_mut_slice\" class=\"method\"><a class=\"src rightside\" href=\"src/devela/data/list/stack/stack/methods/general.rs.html#1019\">Source</a><h4 class=\"code-header\">pub fn <a href=\"devela/all/struct.Stack.html#tymethod.as_mut_slice\" class=\"fn\">as_mut_slice</a>(&amp;mut self) -&gt; &amp;mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&amp;mut [T]\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Returns the stack as an exclusive slice.</p>\n<h5 id=\"examples-6\"><a class=\"doc-anchor\" href=\"#examples-6\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>s = StackU8::&lt;<span class=\"kw\">_</span>, <span class=\"number\">3</span>&gt;::from([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);\n<span class=\"macro\">assert_eq!</span>[s.as_mut_slice(), <span class=\"kw-2\">&amp;mut </span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]];</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clear\" class=\"method\"><a class=\"src rightside\" href=\"src/devela/data/list/stack/stack/methods/general.rs.html#1019\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"devela/all/struct.Stack.html#tymethod.clear\" class=\"fn\">clear</a>(&amp;mut self)</h4></section></summary><div class=\"docblock\"><p>Clears the stack.</p>\n<p><code>( 1 2 3 -- )</code></p>\n<h5 id=\"examples-7\"><a class=\"doc-anchor\" href=\"#examples-7\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>s = StackU8::&lt;<span class=\"kw\">_</span>, <span class=\"number\">8</span>&gt;::from([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]);\ns.clear();\n<span class=\"macro\">assert!</span>[s.is_empty()];</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.push\" class=\"method\"><a class=\"src rightside\" href=\"src/devela/data/list/stack/stack/methods/general.rs.html#1019\">Source</a><h4 class=\"code-header\">pub fn <a href=\"devela/all/struct.Stack.html#tymethod.push\" class=\"fn\">push</a>(&amp;mut self, element: T) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"devela/all/struct.NotEnoughSpace.html\" title=\"struct devela::all::NotEnoughSpace\">NotEnoughSpace</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;(), NotEnoughSpace&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Pushes a new <code>element</code> to the top of the stack.</p>\n<p><code>( 1 -- 1 2 )</code></p>\n<h5 id=\"errors\"><a class=\"doc-anchor\" href=\"#errors\">§</a>Errors</h5>\n<p>Returns <a href=\"devela/all/struct.NotEnoughSpace.html\" title=\"struct devela::all::NotEnoughSpace\"><code>NotEnoughSpace</code></a> if the stack is full.</p>\n<h5 id=\"examples-8\"><a class=\"doc-anchor\" href=\"#examples-8\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>s = StackU8::&lt;<span class=\"kw\">_</span>, <span class=\"number\">2</span>&gt;::default();\ns.push(<span class=\"number\">1</span>)<span class=\"question-mark\">?</span>;\ns.push(<span class=\"number\">2</span>)<span class=\"question-mark\">?</span>;\n<span class=\"macro\">assert!</span>[s.push(<span class=\"number\">3</span>).is_err()];\n<span class=\"macro\">assert_eq!</span>[s.as_slice(), <span class=\"kw-2\">&amp;</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>]];</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.pop\" class=\"method\"><a class=\"src rightside\" href=\"src/devela/data/list/stack/stack/methods/general.rs.html#1019\">Source</a><h4 class=\"code-header\">pub fn <a href=\"devela/all/struct.Stack.html#tymethod.pop\" class=\"fn\">pop</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;T, <a class=\"struct\" href=\"devela/all/struct.NotEnoughElements.html\" title=\"struct devela::all::NotEnoughElements\">NotEnoughElements</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;T, NotEnoughElements&gt;\">ⓘ</a></h4></section><span class=\"item-info\"><div class=\"stab portability\">Available on <strong>crate feature <code>unsafe_ptr</code></strong> only.</div></span></summary><div class=\"docblock\"><p>Pops the top stack element.</p>\n<p><code>( 1 2 -- 1 )</code></p>\n<h5 id=\"errors-1\"><a class=\"doc-anchor\" href=\"#errors-1\">§</a>Errors</h5>\n<p>Returns <a href=\"devela/all/struct.NotEnoughElements.html\" title=\"struct devela::all::NotEnoughElements\"><code>NotEnoughElements</code></a> if the stack is empty.</p>\n<h5 id=\"examples-9\"><a class=\"doc-anchor\" href=\"#examples-9\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>s = StackU8::&lt;<span class=\"kw\">_</span>, <span class=\"number\">2</span>&gt;::from([<span class=\"number\">1</span>, <span class=\"number\">2</span>]);\n<span class=\"macro\">assert_eq!</span>[<span class=\"number\">2</span>, s.pop()<span class=\"question-mark\">?</span>];\n<span class=\"macro\">assert_eq!</span>[<span class=\"number\">1</span>, s.pop()<span class=\"question-mark\">?</span>];\n<span class=\"macro\">assert!</span>[s.is_empty()];</code></pre></div>\n<h5 id=\"features\"><a class=\"doc-anchor\" href=\"#features\">§</a>Features</h5>\n<p>It’s depends on <code>T: Clone</code>, unless the <code>unsafe_ptr</code> feature is enabled.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.peek\" class=\"method\"><a class=\"src rightside\" href=\"src/devela/data/list/stack/stack/methods/general.rs.html#1019\">Source</a><h4 class=\"code-header\">pub fn <a href=\"devela/all/struct.Stack.html#tymethod.peek\" class=\"fn\">peek</a>(&amp;self) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;T</a>, <a class=\"struct\" href=\"devela/all/struct.NotEnoughElements.html\" title=\"struct devela::all::NotEnoughElements\">NotEnoughElements</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;&amp;T, NotEnoughElements&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Peeks the top stack element.</p>\n<p><code>( 1 -- 1 )</code></p>\n<p>Returns a shared reference to the top stack element.</p>\n<h5 id=\"errors-2\"><a class=\"doc-anchor\" href=\"#errors-2\">§</a>Errors</h5>\n<p>Returns <a href=\"devela/all/struct.NotEnoughElements.html\" title=\"struct devela::all::NotEnoughElements\"><code>NotEnoughElements</code></a> if the stack is empty.</p>\n<h5 id=\"examples-10\"><a class=\"doc-anchor\" href=\"#examples-10\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>s = StackU8::&lt;<span class=\"kw\">_</span>, <span class=\"number\">2</span>&gt;::from([<span class=\"number\">1</span>, <span class=\"number\">2</span>]);\n<span class=\"macro\">assert_eq!</span>[s.peek(), <span class=\"prelude-val\">Ok</span>(<span class=\"kw-2\">&amp;</span><span class=\"number\">2</span>)];</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.peek_mut\" class=\"method\"><a class=\"src rightside\" href=\"src/devela/data/list/stack/stack/methods/general.rs.html#1019\">Source</a><h4 class=\"code-header\">pub fn <a href=\"devela/all/struct.Stack.html#tymethod.peek_mut\" class=\"fn\">peek_mut</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut T</a>, <a class=\"struct\" href=\"devela/all/struct.NotEnoughElements.html\" title=\"struct devela::all::NotEnoughElements\">NotEnoughElements</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;&amp;mut T, NotEnoughElements&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Mutably peeks the top stack element.</p>\n<p><code>( 1 -- 1 )</code></p>\n<p>Returns an exclusive reference to the top stack element.</p>\n<h5 id=\"errors-3\"><a class=\"doc-anchor\" href=\"#errors-3\">§</a>Errors</h5>\n<p>Returns <a href=\"devela/all/struct.NotEnoughElements.html\" title=\"struct devela::all::NotEnoughElements\"><code>NotEnoughElements</code></a> if the stack is empty.</p>\n<h5 id=\"examples-11\"><a class=\"doc-anchor\" href=\"#examples-11\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>s = StackU8::&lt;<span class=\"kw\">_</span>, <span class=\"number\">2</span>&gt;::from([<span class=\"number\">1</span>, <span class=\"number\">2</span>]);\n<span class=\"macro\">assert_eq!</span>[s.peek_mut(), <span class=\"prelude-val\">Ok</span>(<span class=\"kw-2\">&amp;mut </span><span class=\"number\">2</span>)];</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.peek_nth\" class=\"method\"><a class=\"src rightside\" href=\"src/devela/data/list/stack/stack/methods/general.rs.html#1019\">Source</a><h4 class=\"code-header\">pub fn <a href=\"devela/all/struct.Stack.html#tymethod.peek_nth\" class=\"fn\">peek_nth</a>(&amp;self, nth: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;T</a>, <a class=\"struct\" href=\"devela/all/struct.NotEnoughElements.html\" title=\"struct devela::all::NotEnoughElements\">NotEnoughElements</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;&amp;T, NotEnoughElements&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Peeks the <code>nth</code> element from the top of the stack.</p>\n<p><code>( 1 -- 1 )</code></p>\n<p>Returns a shared reference to the <code>nth</code> element,\nstarting from 0 for the top, 1 for the next-of-stack, etc.</p>\n<h5 id=\"errors-4\"><a class=\"doc-anchor\" href=\"#errors-4\">§</a>Errors</h5>\n<p>Returns <a href=\"devela/all/struct.NotEnoughElements.html\" title=\"struct devela::all::NotEnoughElements\"><code>NotEnoughElements</code></a> if the stack has not enough elements.</p>\n<h5 id=\"examples-12\"><a class=\"doc-anchor\" href=\"#examples-12\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>s = StackU8::&lt;<span class=\"kw\">_</span>, <span class=\"number\">5</span>&gt;::from([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]);\n<span class=\"macro\">assert_eq!</span>[s.peek_nth(<span class=\"number\">0</span>), <span class=\"prelude-val\">Ok</span>(<span class=\"kw-2\">&amp;</span><span class=\"number\">5</span>)];\n<span class=\"macro\">assert_eq!</span>[s.peek_nth(<span class=\"number\">4</span>), <span class=\"prelude-val\">Ok</span>(<span class=\"kw-2\">&amp;</span><span class=\"number\">1</span>)];</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.peek_nth_mut\" class=\"method\"><a class=\"src rightside\" href=\"src/devela/data/list/stack/stack/methods/general.rs.html#1019\">Source</a><h4 class=\"code-header\">pub fn <a href=\"devela/all/struct.Stack.html#tymethod.peek_nth_mut\" class=\"fn\">peek_nth_mut</a>(&amp;mut self, nth: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut T</a>, <a class=\"struct\" href=\"devela/all/struct.NotEnoughElements.html\" title=\"struct devela::all::NotEnoughElements\">NotEnoughElements</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;&amp;mut T, NotEnoughElements&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Mutably peeks the <code>nth</code> element from the top of the stack.</p>\n<p><code>( 1 -- 1 )</code></p>\n<p>Returns an exclusive reference to the <code>nth</code> element,\nstarting from 0 for the top, 1 for the next-of-stack, etc.</p>\n<h5 id=\"errors-5\"><a class=\"doc-anchor\" href=\"#errors-5\">§</a>Errors</h5>\n<p>Returns <a href=\"devela/all/struct.NotEnoughElements.html\" title=\"struct devela::all::NotEnoughElements\"><code>NotEnoughElements</code></a> if the stack has not enough elements.</p>\n<h5 id=\"examples-13\"><a class=\"doc-anchor\" href=\"#examples-13\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>s = StackU8::&lt;<span class=\"kw\">_</span>, <span class=\"number\">5</span>&gt;::from([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]);\n<span class=\"macro\">assert_eq!</span>[s.peek_nth_mut(<span class=\"number\">0</span>), <span class=\"prelude-val\">Ok</span>(<span class=\"kw-2\">&amp;mut </span><span class=\"number\">5</span>)];\n<span class=\"macro\">assert_eq!</span>[s.peek_nth_mut(<span class=\"number\">4</span>), <span class=\"prelude-val\">Ok</span>(<span class=\"kw-2\">&amp;mut </span><span class=\"number\">1</span>)];</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.drop\" class=\"method\"><a class=\"src rightside\" href=\"src/devela/data/list/stack/stack/methods/general.rs.html#1019\">Source</a><h4 class=\"code-header\">pub fn <a href=\"devela/all/struct.Stack.html#tymethod.drop\" class=\"fn\">drop</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"devela/all/struct.NotEnoughElements.html\" title=\"struct devela::all::NotEnoughElements\">NotEnoughElements</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;(), NotEnoughElements&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Drops the top stack element.</p>\n<p><code>( 1 2 -- 1 )</code></p>\n<h5 id=\"errors-6\"><a class=\"doc-anchor\" href=\"#errors-6\">§</a>Errors</h5>\n<p>Returns <a href=\"devela/all/struct.NotEnoughElements.html\" title=\"struct devela::all::NotEnoughElements\"><code>NotEnoughElements</code></a> if the stack is empty.</p>\n<h5 id=\"examples-14\"><a class=\"doc-anchor\" href=\"#examples-14\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>s = StackU8::&lt;<span class=\"kw\">_</span>, <span class=\"number\">2</span>&gt;::from([<span class=\"number\">1</span>, <span class=\"number\">2</span>]);\ns.drop();\n<span class=\"macro\">assert_eq!</span>[s.as_slice(), <span class=\"kw-2\">&amp;</span>[<span class=\"number\">1</span>]];</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.drop_n\" class=\"method\"><a class=\"src rightside\" href=\"src/devela/data/list/stack/stack/methods/general.rs.html#1019\">Source</a><h4 class=\"code-header\">pub fn <a href=\"devela/all/struct.Stack.html#tymethod.drop_n\" class=\"fn\">drop_n</a>(&amp;mut self, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"devela/all/struct.NotEnoughElements.html\" title=\"struct devela::all::NotEnoughElements\">NotEnoughElements</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;(), NotEnoughElements&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Drops the top <code>n</code> stack elements.</p>\n<p><code>( 1 2 3 4 -- 1 )</code> for <code>n == 3</code></p>\n<h5 id=\"errors-7\"><a class=\"doc-anchor\" href=\"#errors-7\">§</a>Errors</h5>\n<p>Returns <a href=\"devela/all/struct.NotEnoughElements.html\" title=\"struct devela::all::NotEnoughElements\"><code>NotEnoughElements</code></a> if the stack doesn’t contain at least <code>n</code> elements.</p>\n<h5 id=\"examples-15\"><a class=\"doc-anchor\" href=\"#examples-15\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>s = StackU8::&lt;<span class=\"kw\">_</span>, <span class=\"number\">4</span>&gt;::from([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]);\ns.drop_n(<span class=\"number\">3</span>);\n<span class=\"macro\">assert_eq!</span>[s.as_slice(), <span class=\"kw-2\">&amp;</span>[<span class=\"number\">1</span>]];</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.nip\" class=\"method\"><a class=\"src rightside\" href=\"src/devela/data/list/stack/stack/methods/general.rs.html#1019\">Source</a><h4 class=\"code-header\">pub fn <a href=\"devela/all/struct.Stack.html#tymethod.nip\" class=\"fn\">nip</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"devela/all/struct.NotEnoughElements.html\" title=\"struct devela::all::NotEnoughElements\">NotEnoughElements</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;(), NotEnoughElements&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Drops the next of stack element.</p>\n<p><code>( 1 2 -- 2 )</code></p>\n<h5 id=\"errors-8\"><a class=\"doc-anchor\" href=\"#errors-8\">§</a>Errors</h5>\n<p>Returns <a href=\"devela/all/struct.NotEnoughElements.html\" title=\"struct devela::all::NotEnoughElements\"><code>NotEnoughElements</code></a> if the stack doesn’t contain at least 2 elements.</p>\n<h5 id=\"examples-16\"><a class=\"doc-anchor\" href=\"#examples-16\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>s = StackU8::&lt;<span class=\"kw\">_</span>, <span class=\"number\">2</span>&gt;::from([<span class=\"number\">1</span>, <span class=\"number\">2</span>]);\ns.nip();\n<span class=\"macro\">assert_eq!</span>[s.as_slice(), <span class=\"kw-2\">&amp;</span>[<span class=\"number\">2</span>]];</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.nip2\" class=\"method\"><a class=\"src rightside\" href=\"src/devela/data/list/stack/stack/methods/general.rs.html#1019\">Source</a><h4 class=\"code-header\">pub fn <a href=\"devela/all/struct.Stack.html#tymethod.nip2\" class=\"fn\">nip2</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"devela/all/struct.NotEnoughElements.html\" title=\"struct devela::all::NotEnoughElements\">NotEnoughElements</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;(), NotEnoughElements&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Drops the pair of next stack elements.</p>\n<p><code>( 1 2 3 4 -- 3 4 )</code></p>\n<h5 id=\"errors-9\"><a class=\"doc-anchor\" href=\"#errors-9\">§</a>Errors</h5>\n<p>Returns <a href=\"devela/all/struct.NotEnoughElements.html\" title=\"struct devela::all::NotEnoughElements\"><code>NotEnoughElements</code></a> if the stack doesn’t contain at least 4 elements.</p>\n<h5 id=\"examples-17\"><a class=\"doc-anchor\" href=\"#examples-17\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>s = StackU8::&lt;<span class=\"kw\">_</span>, <span class=\"number\">8</span>&gt;::from([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]);\ns.nip2();\n<span class=\"macro\">assert_eq!</span>[s.as_slice(), <span class=\"kw-2\">&amp;</span>[<span class=\"number\">3</span>, <span class=\"number\">4</span>]];</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.swap\" class=\"method\"><a class=\"src rightside\" href=\"src/devela/data/list/stack/stack/methods/general.rs.html#1019\">Source</a><h4 class=\"code-header\">pub fn <a href=\"devela/all/struct.Stack.html#tymethod.swap\" class=\"fn\">swap</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"devela/all/struct.NotEnoughElements.html\" title=\"struct devela::all::NotEnoughElements\">NotEnoughElements</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;(), NotEnoughElements&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Swaps the top two stack elements.</p>\n<p><code>( 1 2 -- 2 1 )</code></p>\n<h5 id=\"errors-10\"><a class=\"doc-anchor\" href=\"#errors-10\">§</a>Errors</h5>\n<p>Returns <a href=\"devela/all/struct.NotEnoughElements.html\" title=\"struct devela::all::NotEnoughElements\"><code>NotEnoughElements</code></a> if the stack doesn’t contain at least 2 elements.</p>\n<h5 id=\"examples-18\"><a class=\"doc-anchor\" href=\"#examples-18\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>s = StackU8::&lt;<span class=\"kw\">_</span>, <span class=\"number\">2</span>&gt;::from([<span class=\"number\">1</span>, <span class=\"number\">2</span>]);\ns.swap();\n<span class=\"macro\">assert_eq!</span>[s.as_slice(), <span class=\"kw-2\">&amp;</span>[<span class=\"number\">2</span>, <span class=\"number\">1</span>]];</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.swap2\" class=\"method\"><a class=\"src rightside\" href=\"src/devela/data/list/stack/stack/methods/general.rs.html#1019\">Source</a><h4 class=\"code-header\">pub fn <a href=\"devela/all/struct.Stack.html#tymethod.swap2\" class=\"fn\">swap2</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"devela/all/struct.NotEnoughElements.html\" title=\"struct devela::all::NotEnoughElements\">NotEnoughElements</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;(), NotEnoughElements&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Swaps the top two pair stack elements.</p>\n<p><code>( 1 2 3 4 -- 3 4 1 2 )</code></p>\n<h5 id=\"errors-11\"><a class=\"doc-anchor\" href=\"#errors-11\">§</a>Errors</h5>\n<p>Returns <a href=\"devela/all/struct.NotEnoughElements.html\" title=\"struct devela::all::NotEnoughElements\"><code>NotEnoughElements</code></a> if the stack doesn’t contain at least 4 elements.</p>\n<h5 id=\"examples-19\"><a class=\"doc-anchor\" href=\"#examples-19\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>s = StackU8::&lt;<span class=\"kw\">_</span>, <span class=\"number\">4</span>&gt;::from([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]);\ns.swap2();\n<span class=\"macro\">assert_eq!</span>[s.as_slice(), <span class=\"kw-2\">&amp;</span>[<span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>]];</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.rot\" class=\"method\"><a class=\"src rightside\" href=\"src/devela/data/list/stack/stack/methods/general.rs.html#1019\">Source</a><h4 class=\"code-header\">pub fn <a href=\"devela/all/struct.Stack.html#tymethod.rot\" class=\"fn\">rot</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"devela/all/struct.NotEnoughElements.html\" title=\"struct devela::all::NotEnoughElements\">NotEnoughElements</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;(), NotEnoughElements&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Rotates the top three stack elements, clockwise.</p>\n<p><code>( 1 2 3 -- 2 3 1 ) </code></p>\n<h5 id=\"errors-12\"><a class=\"doc-anchor\" href=\"#errors-12\">§</a>Errors</h5>\n<p>Returns <a href=\"devela/all/struct.NotEnoughElements.html\" title=\"struct devela::all::NotEnoughElements\"><code>NotEnoughElements</code></a> if the stack doesn’t contain at least 3 elements.</p>\n<h5 id=\"examples-20\"><a class=\"doc-anchor\" href=\"#examples-20\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>s = StackU8::&lt;<span class=\"kw\">_</span>, <span class=\"number\">3</span>&gt;::from([<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>]);\ns.rot()<span class=\"question-mark\">?</span>;\n<span class=\"macro\">assert_eq!</span>[s.as_slice(), <span class=\"kw-2\">&amp;</span>[<span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>, <span class=\"string\">'a'</span>]];</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.rot_cc\" class=\"method\"><a class=\"src rightside\" href=\"src/devela/data/list/stack/stack/methods/general.rs.html#1019\">Source</a><h4 class=\"code-header\">pub fn <a href=\"devela/all/struct.Stack.html#tymethod.rot_cc\" class=\"fn\">rot_cc</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"devela/all/struct.NotEnoughElements.html\" title=\"struct devela::all::NotEnoughElements\">NotEnoughElements</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;(), NotEnoughElements&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Rotates the top three stack elements, counter-clockwise.</p>\n<p><code>( 1 2 3 -- 3 1 2 ) </code></p>\n<h5 id=\"errors-13\"><a class=\"doc-anchor\" href=\"#errors-13\">§</a>Errors</h5>\n<p>Returns <a href=\"devela/all/struct.NotEnoughElements.html\" title=\"struct devela::all::NotEnoughElements\"><code>NotEnoughElements</code></a> if the stack doesn’t contain at least 3 elements.</p>\n<h5 id=\"examples-21\"><a class=\"doc-anchor\" href=\"#examples-21\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>s = StackU8::&lt;<span class=\"kw\">_</span>, <span class=\"number\">3</span>&gt;::from([<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>]);\ns.rot_cc()<span class=\"question-mark\">?</span>;\n<span class=\"macro\">assert_eq!</span>[s.as_slice(), <span class=\"kw-2\">&amp;</span>[<span class=\"string\">'c'</span>, <span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>]];</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.rot2\" class=\"method\"><a class=\"src rightside\" href=\"src/devela/data/list/stack/stack/methods/general.rs.html#1019\">Source</a><h4 class=\"code-header\">pub fn <a href=\"devela/all/struct.Stack.html#tymethod.rot2\" class=\"fn\">rot2</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"devela/all/struct.NotEnoughElements.html\" title=\"struct devela::all::NotEnoughElements\">NotEnoughElements</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;(), NotEnoughElements&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Rotates the top six stack elements, clockwise, two times.</p>\n<p><code>( 1 2 3 4 5 6 -- 3 4 5 6 1 2 ) </code></p>\n<h5 id=\"errors-14\"><a class=\"doc-anchor\" href=\"#errors-14\">§</a>Errors</h5>\n<p>Returns <a href=\"devela/all/struct.NotEnoughElements.html\" title=\"struct devela::all::NotEnoughElements\"><code>NotEnoughElements</code></a> if the stack doesn’t contain at least 6 elements.</p>\n<h5 id=\"examples-22\"><a class=\"doc-anchor\" href=\"#examples-22\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>s = StackU8::&lt;<span class=\"kw\">_</span>, <span class=\"number\">6</span>&gt;::from([<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>, <span class=\"string\">'d'</span>, <span class=\"string\">'e'</span>, <span class=\"string\">'f'</span>]);\ns.rot2()<span class=\"question-mark\">?</span>;\n<span class=\"macro\">assert_eq!</span>[s.as_slice(), <span class=\"kw-2\">&amp;</span>[<span class=\"string\">'c'</span>, <span class=\"string\">'d'</span>, <span class=\"string\">'e'</span>, <span class=\"string\">'f'</span>, <span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>]];</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.rot2_cc\" class=\"method\"><a class=\"src rightside\" href=\"src/devela/data/list/stack/stack/methods/general.rs.html#1019\">Source</a><h4 class=\"code-header\">pub fn <a href=\"devela/all/struct.Stack.html#tymethod.rot2_cc\" class=\"fn\">rot2_cc</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"devela/all/struct.NotEnoughElements.html\" title=\"struct devela::all::NotEnoughElements\">NotEnoughElements</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;(), NotEnoughElements&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Rotates the top six stack elements, counter-clockwise, two times.</p>\n<p><code>( 1 2 3 4 5 6 -- 5 6 1 2 3 4 ) </code></p>\n<h5 id=\"errors-15\"><a class=\"doc-anchor\" href=\"#errors-15\">§</a>Errors</h5>\n<p>Returns <a href=\"devela/all/struct.NotEnoughElements.html\" title=\"struct devela::all::NotEnoughElements\"><code>NotEnoughElements</code></a> if the stack doesn’t contain at least 6 elements.</p>\n<h5 id=\"examples-23\"><a class=\"doc-anchor\" href=\"#examples-23\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>s = StackU8::&lt;<span class=\"kw\">_</span>, <span class=\"number\">6</span>&gt;::from([<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>, <span class=\"string\">'d'</span>, <span class=\"string\">'e'</span>, <span class=\"string\">'f'</span>]);\ns.rot2()<span class=\"question-mark\">?</span>;\n<span class=\"macro\">assert_eq!</span>[s.as_slice(), <span class=\"kw-2\">&amp;</span>[<span class=\"string\">'c'</span>, <span class=\"string\">'d'</span>, <span class=\"string\">'e'</span>, <span class=\"string\">'f'</span>, <span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>]];</code></pre></div>\n</div></details></div></details>",0,"devela::data::list::stack::stack::definitions::StackU8"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Stack%3CT,+CAP,+u8,+S%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/devela/data/list/stack/stack/methods/general.rs.html#1019\">Source</a><a href=\"#impl-Stack%3CT,+CAP,+u8,+S%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, const CAP: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, S: <a class=\"trait\" href=\"devela/all/trait.Storage.html\" title=\"trait devela::all::Storage\">Storage</a>&gt; <a class=\"struct\" href=\"devela/all/struct.Stack.html\" title=\"struct devela::all::Stack\">Stack</a>&lt;T, CAP, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>, S&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.iter\" class=\"method\"><a class=\"src rightside\" href=\"src/devela/data/list/stack/stack/methods/general.rs.html#1019\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"devela/all/struct.Stack.html#tymethod.iter\" class=\"fn\">iter</a>(&amp;self) -&gt; <a class=\"struct\" href=\"devela/all/struct.StackIter.html\" title=\"struct devela::all::StackIter\">StackIter</a>&lt;'_, T, CAP, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>, S&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"StackIter&lt;&#39;_, T, CAP, u8, S&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Returns an iterator.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend\" class=\"method\"><a class=\"src rightside\" href=\"src/devela/data/list/stack/stack/methods/general.rs.html#1019\">Source</a><h4 class=\"code-header\">pub fn <a href=\"devela/all/struct.Stack.html#tymethod.extend\" class=\"fn\">extend</a>&lt;I&gt;(&amp;mut self, iterator: I) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"devela/all/struct.NotEnoughSpace.html\" title=\"struct devela::all::NotEnoughSpace\">NotEnoughSpace</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;(), NotEnoughSpace&gt;\">ⓘ</a><div class=\"where\">where\n    I: <a class=\"trait\" href=\"devela/all/trait.IteratorInto.html\" title=\"trait devela::all::IteratorInto\">IntoIterator</a>&lt;Item = T&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Extends the stack from an iterator.</p>\n<h5 id=\"errors\"><a class=\"doc-anchor\" href=\"#errors\">§</a>Errors</h5>\n<p>Returns <a href=\"devela/all/struct.NotEnoughSpace.html\" title=\"struct devela::all::NotEnoughSpace\"><code>NotEnoughSpace</code></a> if the stack becomes full before the iterator finishes.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>s = StackU8::&lt;<span class=\"kw\">_</span>, <span class=\"number\">5</span>&gt;::default();\ns.extend([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);\n<span class=\"macro\">assert_eq!</span>[s.as_slice(), <span class=\"kw-2\">&amp;</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]];\n\ns.extend([<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>]);\n<span class=\"macro\">assert_eq!</span>[s.as_slice(), <span class=\"kw-2\">&amp;</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]];</code></pre></div>\n</div></details></div></details>",0,"devela::data::list::stack::stack::definitions::StackU8"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Stack%3CT,+CAP,+u8,+S%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/devela/data/list/stack/stack/methods/general.rs.html#1019\">Source</a><a href=\"#impl-Stack%3CT,+CAP,+u8,+S%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T: <a class=\"trait\" href=\"devela/all/trait.PartialEq.html\" title=\"trait devela::all::PartialEq\">PartialEq</a>, const CAP: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, S: <a class=\"trait\" href=\"devela/all/trait.Storage.html\" title=\"trait devela::all::Storage\">Storage</a>&gt; <a class=\"struct\" href=\"devela/all/struct.Stack.html\" title=\"struct devela::all::Stack\">Stack</a>&lt;T, CAP, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>, S&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.contains\" class=\"method\"><a class=\"src rightside\" href=\"src/devela/data/list/stack/stack/methods/general.rs.html#1019\">Source</a><h4 class=\"code-header\">pub fn <a href=\"devela/all/struct.Stack.html#tymethod.contains\" class=\"fn\">contains</a>(&amp;self, element: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;T</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns true if the stack contains <code>element</code>.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>s = StackU8::&lt;<span class=\"kw\">_</span>, <span class=\"number\">6</span>&gt;::from([<span class=\"number\">5</span>, <span class=\"number\">78</span>, <span class=\"number\">42</span>, <span class=\"number\">33</span>, <span class=\"number\">9</span>]);\n\n<span class=\"macro\">assert!</span>[s.contains(<span class=\"kw-2\">&amp;</span><span class=\"number\">9</span>)];\n<span class=\"macro\">assert!</span>[!s.contains(<span class=\"kw-2\">&amp;</span><span class=\"number\">8</span>)];</code></pre></div>\n</div></details></div></details>",0,"devela::data::list::stack::stack::definitions::StackU8"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Stack%3CT,+CAP,+u8,+S%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/devela/data/list/stack/stack/methods/general.rs.html#1019\">Source</a><a href=\"#impl-Stack%3CT,+CAP,+u8,+S%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T: <a class=\"trait\" href=\"devela/code/trait.Clone.html\" title=\"trait devela::code::Clone\">Clone</a>, const CAP: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, S: <a class=\"trait\" href=\"devela/all/trait.Storage.html\" title=\"trait devela::all::Storage\">Storage</a>&gt; <a class=\"struct\" href=\"devela/all/struct.Stack.html\" title=\"struct devela::all::Stack\">Stack</a>&lt;T, CAP, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>, S&gt;</h3><div class=\"docblock\"><h4 id=\"operations-depending-on-t-clone\"><a class=\"doc-anchor\" href=\"#operations-depending-on-t-clone\">§</a>Operations depending on <code>T: Clone</code></h4>\n<p>Every method is <em>const</em> and returns <a href=\"devela/all/struct.Own.html\" title=\"struct devela::all::Own\"><code>Own</code></a><code>&lt;Self, V&gt;</code>.</p>\n</div></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.dup\" class=\"method\"><a class=\"src rightside\" href=\"src/devela/data/list/stack/stack/methods/general.rs.html#1019\">Source</a><h4 class=\"code-header\">pub fn <a href=\"devela/all/struct.Stack.html#tymethod.dup\" class=\"fn\">dup</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"enum\" href=\"devela/all/enum.DataNotEnough.html\" title=\"enum devela::all::DataNotEnough\">DataNotEnough</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;(), DataNotEnough&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Duplicates the top stack element.</p>\n<p><code>( 1 -- 1 1 )</code></p>\n<h5 id=\"errors\"><a class=\"doc-anchor\" href=\"#errors\">§</a>Errors</h5>\n<p>Returns <a href=\"devela/all/enum.DataNotEnough.html#variant.Elements\" title=\"variant devela::all::DataNotEnough::Elements\"><code>DataNotEnough::Elements</code></a> if the stack is empty or\n<a href=\"devela/all/enum.DataNotEnough.html#variant.Space\" title=\"variant devela::all::DataNotEnough::Space\"><code>DataNotEnough::Space</code></a> if the stack is full.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>s = StackU8::&lt;<span class=\"kw\">_</span>, <span class=\"number\">2</span>&gt;::from([<span class=\"number\">1</span>]);\ns.dup()<span class=\"question-mark\">?</span>;\n<span class=\"macro\">assert_eq!</span>[<span class=\"kw-2\">&amp;</span>[<span class=\"number\">1</span>, <span class=\"number\">1</span>], s.as_slice()];</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.dup2\" class=\"method\"><a class=\"src rightside\" href=\"src/devela/data/list/stack/stack/methods/general.rs.html#1019\">Source</a><h4 class=\"code-header\">pub fn <a href=\"devela/all/struct.Stack.html#tymethod.dup2\" class=\"fn\">dup2</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"enum\" href=\"devela/all/enum.DataNotEnough.html\" title=\"enum devela::all::DataNotEnough\">DataNotEnough</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;(), DataNotEnough&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Duplicates the top stack pair of elements.</p>\n<p><code>( 1 2 -- 1 2 1 2 )</code></p>\n<h5 id=\"errors-1\"><a class=\"doc-anchor\" href=\"#errors-1\">§</a>Errors</h5>\n<p>Returns <a href=\"devela/all/enum.DataNotEnough.html#variant.Elements\" title=\"variant devela::all::DataNotEnough::Elements\"><code>DataNotEnough::Elements</code></a> if the stack doesn’t have at least 2 elements,\nor <a href=\"devela/all/enum.DataNotEnough.html#variant.Space\" title=\"variant devela::all::DataNotEnough::Space\"><code>DataNotEnough::Space</code></a> if it doesn’t have enough space for 2 extra elements.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>s = StackU8::&lt;<span class=\"kw\">_</span>, <span class=\"number\">5</span>&gt;::from([<span class=\"number\">1</span>, <span class=\"number\">2</span>]);\ns.dup2()<span class=\"question-mark\">?</span>;\n<span class=\"macro\">assert_eq!</span>[<span class=\"kw-2\">&amp;</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>], s.as_slice()];</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.over\" class=\"method\"><a class=\"src rightside\" href=\"src/devela/data/list/stack/stack/methods/general.rs.html#1019\">Source</a><h4 class=\"code-header\">pub fn <a href=\"devela/all/struct.Stack.html#tymethod.over\" class=\"fn\">over</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"enum\" href=\"devela/all/enum.DataNotEnough.html\" title=\"enum devela::all::DataNotEnough\">DataNotEnough</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;(), DataNotEnough&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Duplicates the next of stack element to the top.</p>\n<p><code>( 1 2 -- 1 2 1 )</code></p>\n<h5 id=\"errors-2\"><a class=\"doc-anchor\" href=\"#errors-2\">§</a>Errors</h5>\n<p>Returns <a href=\"devela/all/enum.DataNotEnough.html#variant.Elements\" title=\"variant devela::all::DataNotEnough::Elements\"><code>DataNotEnough::Elements</code></a> if the stack doesn’t have at least 2 elements,\nor <a href=\"devela/all/enum.DataNotEnough.html#variant.Space\" title=\"variant devela::all::DataNotEnough::Space\"><code>DataNotEnough::Space</code></a> if it doesn’t have enough space for 1 extra element.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>s = StackU8::&lt;<span class=\"kw\">_</span>, <span class=\"number\">3</span>&gt;::from([<span class=\"number\">1</span>, <span class=\"number\">2</span>]);\ns.over()<span class=\"question-mark\">?</span>;\n<span class=\"macro\">assert_eq!</span>[<span class=\"kw-2\">&amp;</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>], s.as_slice()];</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.over2\" class=\"method\"><a class=\"src rightside\" href=\"src/devela/data/list/stack/stack/methods/general.rs.html#1019\">Source</a><h4 class=\"code-header\">pub fn <a href=\"devela/all/struct.Stack.html#tymethod.over2\" class=\"fn\">over2</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"enum\" href=\"devela/all/enum.DataNotEnough.html\" title=\"enum devela::all::DataNotEnough\">DataNotEnough</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;(), DataNotEnough&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Duplicates the next of stack pair of elements to the top.</p>\n<p><code>( 1 2 3 4 -- 1 2 3 4 1 2 )</code></p>\n<h5 id=\"errors-3\"><a class=\"doc-anchor\" href=\"#errors-3\">§</a>Errors</h5>\n<p>Returns <a href=\"devela/all/enum.DataNotEnough.html#variant.Elements\" title=\"variant devela::all::DataNotEnough::Elements\"><code>DataNotEnough::Elements</code></a> if the stack doesn’t have at least 4 elements,\nor <a href=\"devela/all/enum.DataNotEnough.html#variant.Space\" title=\"variant devela::all::DataNotEnough::Space\"><code>DataNotEnough::Space</code></a> if it doesn’t have enough space for 2 extra elements.</p>\n<h5 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>s = StackU8::&lt;<span class=\"kw\">_</span>, <span class=\"number\">6</span>&gt;::from([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]);\ns.over2()<span class=\"question-mark\">?</span>;\n<span class=\"macro\">assert_eq!</span>[<span class=\"kw-2\">&amp;</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>], s.as_slice()];</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.tuck\" class=\"method\"><a class=\"src rightside\" href=\"src/devela/data/list/stack/stack/methods/general.rs.html#1019\">Source</a><h4 class=\"code-header\">pub fn <a href=\"devela/all/struct.Stack.html#tymethod.tuck\" class=\"fn\">tuck</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"enum\" href=\"devela/all/enum.DataNotEnough.html\" title=\"enum devela::all::DataNotEnough\">DataNotEnough</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;(), DataNotEnough&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Duplicates the top element before the next of stack element.</p>\n<p><code>( 1 2 -- 2 1 2 )</code></p>\n<h5 id=\"errors-4\"><a class=\"doc-anchor\" href=\"#errors-4\">§</a>Errors</h5>\n<p>Returns <a href=\"devela/all/enum.DataNotEnough.html#variant.Elements\" title=\"variant devela::all::DataNotEnough::Elements\"><code>DataNotEnough::Elements</code></a> if the stack doesn’t have at least 2 elements,\nor <a href=\"devela/all/enum.DataNotEnough.html#variant.Space\" title=\"variant devela::all::DataNotEnough::Space\"><code>DataNotEnough::Space</code></a> if it doesn’t have enough space for 1 extra element.</p>\n<h5 id=\"examples-4\"><a class=\"doc-anchor\" href=\"#examples-4\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>s = StackU8::&lt;<span class=\"kw\">_</span>, <span class=\"number\">3</span>&gt;::from([<span class=\"number\">1</span>, <span class=\"number\">2</span>]);\ns.tuck()<span class=\"question-mark\">?</span>;\n<span class=\"macro\">assert_eq!</span>[<span class=\"kw-2\">&amp;</span>[<span class=\"number\">2</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>], s.as_slice()];</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.tuck2\" class=\"method\"><a class=\"src rightside\" href=\"src/devela/data/list/stack/stack/methods/general.rs.html#1019\">Source</a><h4 class=\"code-header\">pub fn <a href=\"devela/all/struct.Stack.html#tymethod.tuck2\" class=\"fn\">tuck2</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"enum\" href=\"devela/all/enum.DataNotEnough.html\" title=\"enum devela::all::DataNotEnough\">DataNotEnough</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;(), DataNotEnough&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Duplicates the top pair of elements before the next of stack pair of elements.</p>\n<p><code>( 1 2 3 4 -- 3 4 1 2 3 4 )</code></p>\n<h5 id=\"errors-5\"><a class=\"doc-anchor\" href=\"#errors-5\">§</a>Errors</h5>\n<p>Returns <a href=\"devela/all/enum.DataNotEnough.html#variant.Elements\" title=\"variant devela::all::DataNotEnough::Elements\"><code>DataNotEnough::Elements</code></a> if the stack doesn’t have at least 4 elements,\nor <a href=\"devela/all/enum.DataNotEnough.html#variant.Space\" title=\"variant devela::all::DataNotEnough::Space\"><code>DataNotEnough::Space</code></a> if it doesn’t have enough space for 2 extra elements.</p>\n<h5 id=\"examples-5\"><a class=\"doc-anchor\" href=\"#examples-5\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>s = StackU8::&lt;<span class=\"kw\">_</span>, <span class=\"number\">6</span>&gt;::from([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]);\ns.tuck2()<span class=\"question-mark\">?</span>;\n<span class=\"macro\">assert_eq!</span>[<span class=\"kw-2\">&amp;</span>[<span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>], s.as_slice()];</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_vec\" class=\"method\"><a class=\"src rightside\" href=\"src/devela/data/list/stack/stack/methods/general.rs.html#1019\">Source</a><h4 class=\"code-header\">pub fn <a href=\"devela/all/struct.Stack.html#tymethod.to_vec\" class=\"fn\">to_vec</a>(&amp;self) -&gt; <a class=\"struct\" href=\"devela/all/struct.Vec.html\" title=\"struct devela::all::Vec\">Vec</a>&lt;T&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Vec&lt;T&gt;\">ⓘ</a></h4></section><span class=\"item-info\"><div class=\"stab portability\">Available on <strong>crate feature <code>alloc</code></strong> only.</div></span></summary><div class=\"docblock\"><p>Returns the stacked elements as a vector.</p>\n<h5 id=\"examples-6\"><a class=\"doc-anchor\" href=\"#examples-6\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>s = StackU8::&lt;<span class=\"kw\">_</span>, <span class=\"number\">5</span>&gt;::from([<span class=\"number\">1</span>, <span class=\"number\">2</span>]);\ns.push(<span class=\"number\">3</span>)<span class=\"question-mark\">?</span>;\ns.push(<span class=\"number\">4</span>)<span class=\"question-mark\">?</span>;\ns.push(<span class=\"number\">5</span>)<span class=\"question-mark\">?</span>;\n<span class=\"macro\">assert_eq!</span>[s.to_vec(), <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]];</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_array\" class=\"method\"><a class=\"src rightside\" href=\"src/devela/data/list/stack/stack/methods/general.rs.html#1019\">Source</a><h4 class=\"code-header\">pub fn <a href=\"devela/all/struct.Stack.html#tymethod.to_array\" class=\"fn\">to_array</a>&lt;const LEN: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt;(&amp;self) -&gt; <a class=\"enum\" href=\"devela/all/enum.Option.html\" title=\"enum devela::all::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[T; LEN]</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Option&lt;[T; LEN]&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Returns some <code>LEN</code> stacked elements as an array, or <code>None</code> if the stack\nis empty, or there are not at least <code>LEN</code> elements.</p>\n<p>This is a non <code>alloc</code> alternative method to <a href=\"devela/all/struct.Stack.html#method.to_vec\" title=\"method devela::all::Stack::to_vec\"><code>to_vec</code></a>.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if the new <code>LEN</code> sized array can’t be allocated.</p>\n<h5 id=\"examples-7\"><a class=\"doc-anchor\" href=\"#examples-7\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>s = StackU8::&lt;<span class=\"kw\">_</span>, <span class=\"number\">5</span>&gt;::from([<span class=\"number\">1</span>, <span class=\"number\">2</span>]);\ns.push(<span class=\"number\">3</span>)<span class=\"question-mark\">?</span>;\ns.push(<span class=\"number\">4</span>)<span class=\"question-mark\">?</span>;\ns.push(<span class=\"number\">5</span>)<span class=\"question-mark\">?</span>;\n<span class=\"macro\">assert_eq!</span>[s.to_array::&lt;<span class=\"number\">5</span>&gt;(), <span class=\"prelude-val\">Some</span>([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>])];</code></pre></div>\n<h5 id=\"features\"><a class=\"doc-anchor\" href=\"#features\">§</a>Features</h5>\n<p>Makes use of the <code>unsafe_array</code> feature if enabled.</p>\n</div></details></div></details>",0,"devela::data::list::stack::stack::definitions::StackU8"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Stack%3CT,+CAP,+u8,+S%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/devela/data/list/stack/stack/methods/general.rs.html#1019\">Source</a><a href=\"#impl-Stack%3CT,+CAP,+u8,+S%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T: <a class=\"trait\" href=\"devela/code/trait.Default.html\" title=\"trait devela::code::Default\">Default</a>, const CAP: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, S: <a class=\"trait\" href=\"devela/all/trait.Storage.html\" title=\"trait devela::all::Storage\">Storage</a>&gt; <a class=\"struct\" href=\"devela/all/struct.Stack.html\" title=\"struct devela::all::Stack\">Stack</a>&lt;T, CAP, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>, S&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.drop_replace_default\" class=\"method\"><a class=\"src rightside\" href=\"src/devela/data/list/stack/stack/methods/general.rs.html#1019\">Source</a><h4 class=\"code-header\">pub fn <a href=\"devela/all/struct.Stack.html#tymethod.drop_replace_default\" class=\"fn\">drop_replace_default</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"devela/all/enum.Result.html\" title=\"enum devela::all::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"devela/all/struct.NotEnoughElements.html\" title=\"struct devela::all::NotEnoughElements\">NotEnoughElements</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Result&lt;(), NotEnoughElements&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Drops the top of stack element,\nreplacing the underlying data with the default value.</p>\n<p><code>( 1 2 -- 1 )</code></p>\n<h5 id=\"errors\"><a class=\"doc-anchor\" href=\"#errors\">§</a>Errors</h5>\n<p>Returns <a href=\"devela/all/struct.NotEnoughElements.html\" title=\"struct devela::all::NotEnoughElements\"><code>NotEnoughElements</code></a> if the stack is empty.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>s = StackU8::&lt;<span class=\"kw\">_</span>, <span class=\"number\">2</span>&gt;::from([<span class=\"number\">1</span>, <span class=\"number\">2</span>]);\ns.drop_replace_default();\n<span class=\"macro\">assert_eq!</span>[s.as_slice(), <span class=\"kw-2\">&amp;</span>[<span class=\"number\">1</span>]];</code></pre></div>\n</div></details></div></details>",0,"devela::data::list::stack::stack::definitions::StackU8"],["<section id=\"impl-Copy-for-Stack%3CT,+CAP,+IDX,+S%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/devela/data/list/stack/stack/impl_traits.rs.html#185-188\">Source</a><a href=\"#impl-Copy-for-Stack%3CT,+CAP,+IDX,+S%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T: <a class=\"trait\" href=\"devela/all/trait.Copy.html\" title=\"trait devela::all::Copy\">Copy</a>, const CAP: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, IDX: <a class=\"trait\" href=\"devela/all/trait.Copy.html\" title=\"trait devela::all::Copy\">Copy</a>, S: <a class=\"trait\" href=\"devela/all/trait.Storage.html\" title=\"trait devela::all::Storage\">Storage</a>&gt; <a class=\"trait\" href=\"devela/all/trait.Copy.html\" title=\"trait devela::all::Copy\">Copy</a> for <a class=\"struct\" href=\"devela/all/struct.Stack.html\" title=\"struct devela::all::Stack\">Stack</a>&lt;T, CAP, IDX, S&gt;<div class=\"where\">where\n    S::<a class=\"associatedtype\" href=\"devela/all/trait.Storage.html#associatedtype.Stored\" title=\"type devela::all::Storage::Stored\">Stored</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[T; CAP]</a>&gt;: <a class=\"trait\" href=\"devela/all/trait.Copy.html\" title=\"trait devela::all::Copy\">Copy</a>,</div></h3></section>","Copy","devela::data::list::stack::stack::definitions::StackU8"],["<section id=\"impl-Eq-for-Stack%3CT,+CAP,+IDX,+S%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/devela/data/list/stack/stack/impl_traits.rs.html#215-218\">Source</a><a href=\"#impl-Eq-for-Stack%3CT,+CAP,+IDX,+S%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T: <a class=\"trait\" href=\"devela/all/trait.Eq.html\" title=\"trait devela::all::Eq\">Eq</a>, const CAP: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, IDX: <a class=\"trait\" href=\"devela/all/trait.Eq.html\" title=\"trait devela::all::Eq\">Eq</a>, S: <a class=\"trait\" href=\"devela/all/trait.Storage.html\" title=\"trait devela::all::Storage\">Storage</a>&gt; <a class=\"trait\" href=\"devela/all/trait.Eq.html\" title=\"trait devela::all::Eq\">Eq</a> for <a class=\"struct\" href=\"devela/all/struct.Stack.html\" title=\"struct devela::all::Stack\">Stack</a>&lt;T, CAP, IDX, S&gt;<div class=\"where\">where\n    S::<a class=\"associatedtype\" href=\"devela/all/trait.Storage.html#associatedtype.Stored\" title=\"type devela::all::Storage::Stored\">Stored</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[T; CAP]</a>&gt;: <a class=\"trait\" href=\"devela/all/trait.Eq.html\" title=\"trait devela::all::Eq\">Eq</a>,</div></h3></section>","Eq","devela::data::list::stack::stack::definitions::StackU8"],["<section id=\"impl-Stack%3CT,+CAP,+u8%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/devela/data/list/stack/stack/methods/general.rs.html#1019\">Source</a><a href=\"#impl-Stack%3CT,+CAP,+u8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T: <a class=\"trait\" href=\"devela/code/trait.Clone.html\" title=\"trait devela::code::Clone\">Clone</a>, const CAP: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt; <a class=\"struct\" href=\"devela/all/struct.Stack.html\" title=\"struct devela::all::Stack\">Stack</a>&lt;T, CAP, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>, <a class=\"type\" href=\"devela/all/type.Bare.html\" title=\"type devela::all::Bare\">Bare</a>&gt;</h3><div class=\"item-info\"><div class=\"stab empty-impl\">This impl block contains no items.</div></div><div class=\"docblock\"><h4 id=\"methods-for-stacku8\"><a class=\"doc-anchor\" href=\"#methods-for-stacku8\">§</a>Methods for <code>StackU8</code></h4>\n<hr />\n<hr />\n</div></section>",0,"devela::data::list::stack::stack::definitions::StackU8"]]]]);
    if (window.register_type_impls) {
        window.register_type_impls(type_impls);
    } else {
        window.pending_type_impls = type_impls;
    }
})()
//{"start":55,"fragment_lengths":[232527]}