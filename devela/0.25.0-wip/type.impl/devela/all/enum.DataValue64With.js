(function() {
    var type_impls = Object.fromEntries([["devela",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-DataValue64With%3CV%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/devela/data/table/value/build.rs.html#96-245\">Source</a><a href=\"#impl-Clone-for-DataValue64With%3CV%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;V: <a class=\"trait\" href=\"devela/code/trait.Clone.html\" title=\"trait devela::code::Clone\">Clone</a> + <a class=\"trait\" href=\"devela/all/trait.DataValue.html\" title=\"trait devela::all::DataValue\">DataValue</a>&gt; <a class=\"trait\" href=\"devela/code/trait.Clone.html\" title=\"trait devela::code::Clone\">Clone</a> for <a class=\"enum\" href=\"devela/all/enum.DataValue64With.html\" title=\"enum devela::all::DataValue64With\">DataValue64With</a>&lt;V&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/data/table/value/build.rs.html#96-245\">Source</a><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/code/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; <a class=\"enum\" href=\"devela/all/enum.DataValue64With.html\" title=\"enum devela::all::DataValue64With\">DataValue64With</a>&lt;V&gt;</h4></section></summary><div class='docblock'>Returns a duplicate of the value. <a href=\"devela/code/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/clone.rs.html#246-248\">Source</a></span><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/code/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: &amp;Self)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a href=\"devela/code/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details>","Clone","devela::data::table::value::build::DataValue64"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-DataValue-for-DataValue64With%3CV%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/devela/data/table/value/build.rs.html#96-245\">Source</a><a href=\"#impl-DataValue-for-DataValue64With%3CV%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;V: <a class=\"trait\" href=\"devela/all/trait.DataValue.html\" title=\"trait devela::all::DataValue\">DataValue</a>&gt; <a class=\"trait\" href=\"devela/all/trait.DataValue.html\" title=\"trait devela::all::DataValue\">DataValue</a> for <a class=\"enum\" href=\"devela/all/enum.DataValue64With.html\" title=\"enum devela::all::DataValue64With\">DataValue64With</a>&lt;V&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Type\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/devela/data/table/value/build.rs.html#96-245\">Source</a><a href=\"#associatedtype.Type\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"devela/all/trait.DataValue.html#associatedtype.Type\" class=\"associatedtype\">Type</a> = <a class=\"enum\" href=\"devela/all/enum.DataType64With.html\" title=\"enum devela::all::DataType64With\">DataType64With</a>&lt;&lt;V as <a class=\"trait\" href=\"devela/all/trait.DataValue.html\" title=\"trait devela::all::DataValue\">DataValue</a>&gt;::<a class=\"associatedtype\" href=\"devela/all/trait.DataValue.html#associatedtype.Type\" title=\"type devela::all::DataValue::Type\">Type</a>&gt;</h4></section></summary><div class='docblock'>The <code>DataType</code> type that pairs with this <code>DataValue</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.data_values_are_copy\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/data/table/value/build.rs.html#96-245\">Source</a><a href=\"#method.data_values_are_copy\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.DataValue.html#tymethod.data_values_are_copy\" class=\"fn\">data_values_are_copy</a>() -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Returns whether all values are <code>Copy</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.data_value_is_copy\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/data/table/value/build.rs.html#96-245\">Source</a><a href=\"#method.data_value_is_copy\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.DataValue.html#tymethod.data_value_is_copy\" class=\"fn\">data_value_is_copy</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Returns whether the specific value is <code>Copy</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.data_type\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/data/table/value/build.rs.html#96-245\">Source</a><a href=\"#method.data_type\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.DataValue.html#tymethod.data_type\" class=\"fn\">data_type</a>(&amp;self) -&gt; Self::<a class=\"associatedtype\" href=\"devela/all/trait.DataValue.html#associatedtype.Type\" title=\"type devela::all::DataValue::Type\">Type</a></h4></section></summary><div class='docblock'>Returns the data type of this value.</div></details></div></details>","DataValue","devela::data::table::value::build::DataValue64"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-DataValue64With%3CV%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/devela/data/table/value/build.rs.html#96-245\">Source</a><a href=\"#impl-Debug-for-DataValue64With%3CV%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;V: <a class=\"trait\" href=\"devela/all/trait.Debug.html\" title=\"trait devela::all::Debug\">Debug</a> + <a class=\"trait\" href=\"devela/all/trait.DataValue.html\" title=\"trait devela::all::DataValue\">DataValue</a>&gt; <a class=\"trait\" href=\"devela/all/trait.Debug.html\" title=\"trait devela::all::Debug\">Debug</a> for <a class=\"enum\" href=\"devela/all/enum.DataValue64With.html\" title=\"enum devela::all::DataValue64With\">DataValue64With</a>&lt;V&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/data/table/value/build.rs.html#96-245\">Source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"devela/all/struct.Formatter.html\" title=\"struct devela::all::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"type\" href=\"https://doc.rust-lang.org/nightly/core/fmt/type.Result.html\" title=\"type core::fmt::Result\">Result</a></h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"devela/all/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","devela::data::table::value::build::DataValue64"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq-for-DataValue64With%3CV%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/devela/data/table/value/build.rs.html#96-245\">Source</a><a href=\"#impl-PartialEq-for-DataValue64With%3CV%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;V: <a class=\"trait\" href=\"devela/all/trait.PartialEq.html\" title=\"trait devela::all::PartialEq\">PartialEq</a> + <a class=\"trait\" href=\"devela/all/trait.DataValue.html\" title=\"trait devela::all::DataValue\">DataValue</a>&gt; <a class=\"trait\" href=\"devela/all/trait.PartialEq.html\" title=\"trait devela::all::PartialEq\">PartialEq</a> for <a class=\"enum\" href=\"devela/all/enum.DataValue64With.html\" title=\"enum devela::all::DataValue64With\">DataValue64With</a>&lt;V&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/devela/data/table/value/build.rs.html#96-245\">Source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"enum\" href=\"devela/all/enum.DataValue64With.html\" title=\"enum devela::all::DataValue64With\">DataValue64With</a>&lt;V&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#265\">Source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"devela/all/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq","devela::data::table::value::build::DataValue64"],["<section id=\"impl-StructuralPartialEq-for-DataValue64With%3CV%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/devela/data/table/value/build.rs.html#96-245\">Source</a><a href=\"#impl-StructuralPartialEq-for-DataValue64With%3CV%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;V: <a class=\"trait\" href=\"devela/all/trait.DataValue.html\" title=\"trait devela::all::DataValue\">DataValue</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.StructuralPartialEq.html\" title=\"trait core::marker::StructuralPartialEq\">StructuralPartialEq</a> for <a class=\"enum\" href=\"devela/all/enum.DataValue64With.html\" title=\"enum devela::all::DataValue64With\">DataValue64With</a>&lt;V&gt;</h3></section>","StructuralPartialEq","devela::data::table::value::build::DataValue64"]]]]);
    if (window.register_type_impls) {
        window.register_type_impls(type_impls);
    } else {
        window.pending_type_impls = type_impls;
    }
})()
//{"start":55,"fragment_lengths":[11272]}