rd_("CeSort all iterator elements into a new iterator in \xe2\x80\xa600CmWill the source remain playing at its position before the \xe2\x80\xa6BlSets a custom function for spawning threads.DjInserts the elements from the given <code>LinkedList</code> before the \xe2\x80\xa6AoLast access time (nanoseconds).0ClReturns the last access time of the file, in nanoseconds \xe2\x80\xa6BfLast status change time (nanoseconds).0CgReturns the last status change time of the file, in \xe2\x80\xa6BeLast modification time (nanoseconds).0CfReturns the last modification time of the file, in \xe2\x80\xa6BnSets a callback to be invoked on thread start.CgA simple source of samples coming from a static buffer.D`Returns the bounds on the number of <em>successor</em> steps \xe2\x80\xa6000000CaStores the low lane value to the reference given.0CkLanewise <code>a - b</code> with lanes as <code>i16</code>.000CkLanewise <code>a - b</code> with lanes as <code>i32</code>.000CkLanewise <code>a - b</code> with lanes as <code>i64</code>.000CiReturns the fractional part of this duration in whole \xe2\x80\xa6DgReturns the fractional part of this <code>Duration</code>, in whole \xe2\x80\xa61101CoConvenience macro for declaring a <code>CodecDescriptor</code>.BgOptional swap interval (vertical sync).00CeGet the AVClass for SwrContext. It can be used in \xe2\x80\xa6ChGets the delay the next input sample will experience \xe2\x80\xa6BlFinish the scaling process for a pair of \xe2\x80\xa6CeGet the AVClass for swsContext. It can be used in \xe2\x80\xa6AmPerforms a getrandom syscall.AmPerforms a nanosleep syscall.CgTakes a certain duration of this source and then stops.0D`Returns the last <code>n</code> elements of the exclusive slice.B`Returns the terminal dimensions.ChConverts a <code>char7</code> to <code>AsciiChar</code>.ClConverts a character to its closest ASCII equivalent, if \xe2\x80\xa6CiConverts a string slice or a byte string to a byte array.CmGiven a base for encoding and a mutable byte slice, write \xe2\x80\xa60ChConverts a string slice into an array of its characters.C`Convert this pixel to luma with an alpha channelEbReturns a (6) tuple if the 6 fields from <code>h</code> to <code>ns</code> are \xe2\x80\xa6EbReturns a (9) tuple if the 9 fields from <code>y</code> to <code>ns</code> are \xe2\x80\xa6DhConverts this <code>scalar</code> to an UTF-8 encoded sequence of bytes.0DgConverts this <code>char7</code> to an UTF-8 encoded sequence of bytes.DgConverts this <code>char8</code> to an UTF-8 encoded sequence of bytes.DhConverts this <code>char16</code> to an UTF-8 encoded sequence of bytes.DfConverts the given <code>char</code> to a UTF-8 encoded byte sequence.ClExtracts a zoned datetime from this broken down time and \xe2\x80\xa6CeReturns the number of trailing ones in the binary \xe2\x80\xa600000000000CmSame as <code>alloc_str</code> but does not panic on failure.DhPerforms a fallible parallel fold with a cloneable <code>init</code> \xe2\x80\xa60CkTries to convert a <code>char</code> to <code>char7</code>.CkTries to convert a <code>char</code> to <code>char8</code>.ClTries to convert a <code>char</code> to <code>char16</code>.CfTries to join one of the tasks in the set that has \xe2\x80\xa6Cn\xe2\x80\x9cTSC frequency\xe2\x80\x9d = \xe2\x80\x9ccore crystal clock frequency\xe2\x80\x9d * \xe2\x80\xa6AeTSC frequency in kHz.BoCalled when deserializing a tuple-like variant.ClReturn an iterator over all contiguous windows producing \xe2\x80\xa6000CoDefines zero-cost, zero-sized, type-safe <em>resource</em> IDs.0CjAdds an unsigned integer to a non-zero value, assuming \xe2\x80\xa600000CmReturns the result of an unchecked addition, resulting in \xe2\x80\xa600CjPerforms an unchecked division, resulting in undefined \xe2\x80\xa600CgMultiplies two non-zero integers together, assuming \xe2\x80\xa600000000000CfReturns the result of an unchecked multiplication, \xe2\x80\xa600CmReturns the remainder of an unchecked division, resulting \xe2\x80\xa600ClPerforms an unchecked left shift, resulting in undefined \xe2\x80\xa600CmPerforms an unchecked right shift, resulting in undefined \xe2\x80\xa600CmReturns the result of an unchecked subtraction, resulting \xe2\x80\xa600ClTurn off cooperative scheduling for a future. The future \xe2\x80\xa60BmSets the underline color to <code>Red</code>.DiReturns an iterator over the words of <code>self</code>, separated on \xe2\x80\xa6Bo<code>core</code> Indicates unimplemented code.0ClIndicates unimplemented code by panicking with a message \xe2\x80\xa600ClBypasses Rust\xe2\x80\x99s normal memory-initialization checks by \xe2\x80\xa600DgRaised when a <code>Deserialize</code> struct type received a field \xe2\x80\xa6CjOperators used to turn types into unsafe binders and back.00AkUnregisters panning effect.CaUnwrap an unsafe binder into its underlying type.00CnUpdates the change made to the inner Surface to the Window \xe2\x80\xa6EcAsserts the value is <code>None</code> and returns <code>self</code>, otherwise \xe2\x80\xa6EcAsserts the value is <code>Some</code> and returns <code>self</code>, otherwise \xe2\x80\xa6DgReturns the number of variants of the type <code>T</code> cast to a \xe2\x80\xa6CoReturns the number of variants in the enum type <code>T</code>.1010BlReturns the current variant index (0-based).CkPerforms a volatile load from the <code>src</code> pointer.00ChIssues a warning message, with more control over the \xe2\x80\xa6ChCallback dispatcher for WebAssembly events without args.ClSpecifies which WebGL version to use on the Web (1.0. or \xe2\x80\xa600CmReturns the total number of weeks in the year of this ISO \xe2\x80\xa6CnReturns whether something with the given start time should \xe2\x80\xa6CfPreferred window height (ignored on WASM/Android). \xe2\x80\xa600CiSets the byte length of the stream. This is required for:DbCreates an empty <code>HashMap</code> with the specified capacity.DhCreates an empty <code>BinaryHeap</code> with at least the specified \xe2\x80\xa6DbCreates an empty <code>HashSet</code> with the specified capacity.DeCreates a new <code>OsString</code> with at least the given capacity.DkCreates a new <code>BufReader&lt;R&gt;</code> with the specified buffer \xe2\x80\xa6DmCreates a new <code>BufWriter&lt;W&gt;</code> with at least the specified \xe2\x80\xa6DeCreates a new <code>LineWriter</code> with at least the specified \xe2\x80\xa6DhCreates an empty deque with space for at least <code>capacity</code> \xe2\x80\xa6DkCreates a new <code>PathBuf</code> with a given capacity used to create \xe2\x80\xa6EaConstructs a new, empty <code>Vec&lt;T&gt;</code> with at least the specified \xe2\x80\xa6DgCreates a new empty <code>String</code> with at least the specified \xe2\x80\xa61CmConstruct a new arena with the specified byte capacity to \xe2\x80\xa6DdCreates an empty <code>HashTable</code> with the specified capacity.DhCreates a new <code>BufWriter</code> with the specified buffer capacity.EgCreates a <code>BufStream</code> with the specified <code>BufReader</code> capacity \xe2\x80\xa6DhCreates a new <code>BufReader</code> with the specified buffer capacity.DcCreate an empty <code>HeaderMap</code> with the specified capacity.DeCreates an empty <code>HashMap</code> with at least the specified \xe2\x80\xa6DeCreates an empty <code>HashSet</code> with at least the specified \xe2\x80\xa6AhProvide the channel map.BjSee <code>CpuId::with_cpuid_reader</code>.ClChange the encoding scheme while keeping everything else \xe2\x80\xa6DfCreate a new <code>SignalGenerator</code> object that generates an \xe2\x80\xa6DgSets the value of the \xe2\x80\x9cio_usage\xe2\x80\x9d refresh kind to <code>true</code>.CfLocks a surface so that the pixels can be directly \xe2\x80\xa6BcProvide the total number of frames.CnReturn an iterator adaptor that combines each element with \xe2\x80\xa6000CgInternal method used to define the behavior of this \xe2\x80\xa60CnConfigure whether the data supports random access seeking. \xe2\x80\xa6DfReturns a cheap clone of the <code>StaticSoundData</code> with the \xe2\x80\xa6DhReturns the <code>StreamingSoundData</code> with the specified settings.BiProvide the timestamp of the first frame.DeSets the value of the \xe2\x80\x9ctasks\xe2\x80\x9d refresh kind to <code>false</code>.Bg&lt; Wayland EGL window (native window)CdAttempts to write an entire buffer into this writer.CnWrites an signed 128-bit integer in little-endian order to \xe2\x80\xa6BiReturns the write timeout of this socket.000CmWrites an unsigned 128-bit integer in little-endian order \xe2\x80\xa6BoNumber of written bytes since the last refresh.ChAdvertises which character set the client is able to \xe2\x80\xa6AgThe Argon2 variant (i).AjThe Argon2 version (0x13).Bf&lt; colour filters using Illuminant CAd&lt; Not part of ABICkmain external API structure. New fields can be added to \xe2\x80\xa6Ad&lt; discard nothingCeParameters describing a filter to be created in a \xe2\x80\xa6AnList of AVOptionRange structs.Al@addtogroup lavf_encoding @{AdAudio sample formatsAiList of possible 3D TypesAlList of possible view types.b@}BgChannel is empty can be safely skipped.CnHW acceleration through QSV, data[3] contains a pointer to \xe2\x80\xa6An&lt; 8 bits gray, 8 bits alphaCjThe number of side data types. This is not part of the \xe2\x80\xa6CiVideo is not stereoscopic (and metadata has to be there).Di\xf0\x9f\x9a\xa9 <code>core</code> An error which can be returned when parsing an \xe2\x80\xa60CmAn error which can be returned when parsing an IP address \xe2\x80\xa60AkFailed to parse IP address.1ClWhen the offset and time zone are in conflict, this will \xe2\x80\xa6CgA possibly ambiguous <code>Zoned</code>, created by \xe2\x80\xa6ClThe error type which is returned from parsing the type a \xe2\x80\xa6Bk\xf0\x9f\x93\x90 The direction of rotation of an angle.0C`\xe2\x9a\x9b\xef\xb8\x8f <code>core</code> Atomic memory ordering.0CnA type for atomic ordering parameters for intrinsics. This \xe2\x80\xa600Db<code>AudioBufferRef</code> is a copy-on-write reference to an \xe2\x80\xa6DgA phantom type for retrieving the <code>SDL_AudioFormat</code> of a \xe2\x80\xa6De<code>AudioPlanesMut</code> provides mutable slices to each audio \xe2\x80\xa6C`Code to set the background color to bright blue.C`Code to set the background color to bright cyan.CcCode to set the foreground color to bright magenta.Ce\xf0\x9f\xa7\xaa Background sync capability for web applications.0AnA single frame of a backtrace.CkThe configuration for whether and how the default panic \xe2\x80\xa6B`Kind of <code>BaseEffect</code>.BfConfiguration of how to read the body.CjAn error returned by <code>RefCell::try_borrow_mut</code>.00DgA writeable view of the unfilled portion of a <code>BorrowedBuf</code>.00B`Decreases the screen brightness.0CjThe \xe2\x80\x9cbroken down time\xe2\x80\x9d used by parsing and formatting.BfIterator over <code>ButtonData</code>.BlPreviously pressed button has been released.0DdThis event can be generated by <code>ev::Repeat</code> event filter.0AjThe key size for ChaCha20.AkAdvanced Audio Coding (AAC)AlDolby AC-4 (ETSI TS 103 190)B`DTS Coherent Acoustics (DCA/DTS)AbMPEG Layer 1 (MP1)AbMPEG Layer 2 (MP2)AbMPEG Layer 3 (MP3)A`True Audio (TTA)AcWindows Media AudioBfIndicates the size of the entity-body.BdCode to restore the cursor position.DkReturns a slice with the code to move the cursor right by <code>n</code>\xe2\x80\xa6B`Code to make the cursor visible.CgInformation about an individual cache in the hierarchy.CmFuture returned by <code>AsyncFnOnce::async_call_once</code>.00000000000000000CkA Rust type representing an exception defined in Python \xe2\x80\xa6CmAn iterator over all non-overlapping capture matches in a \xe2\x80\xa6fU+000D0000CiAn iterator over a slice in (non-overlapping) mutable \xe2\x80\xa600CnParallel iterator over mutable non-overlapping chunks of a \xe2\x80\xa611Bj\xf0\x9f\xa7\xaa Write access to the system clipboard.0DdA Builder used to construct a <code>Context</code> instance with \xe2\x80\xa600Cg<code>core</code> The result of a coroutine resumption.0BeThe result of a coroutine resumption.00CnUsed to determine what you want to refresh specifically on \xe2\x80\xa6CgCross-device or cross-filesystem (hard) link or rename.0000D`A marker trait used to indicate that an <code>RngCore</code> \xe2\x80\xa6CnThe suggested default is signed 16bit samples in host byte \xe2\x80\xa6Cb\xf0\x9f\x97\x83\xef\xb8\x8f An abstract <em>collection</em> data type.0fU+00100000Dd64-bit data <em>type</em>, restricted to <code>Copy</code> variants.0Ce64-bit data <em>type</em>, with extra <code>T</code>.0DnOptions for <code>Date::checked_add</code> and <code>Date::checked_sub</code>.DbOptions for <code>Date::since</code> and <code>Date::until</code>.B`A parser for RFC 2822 datetimes.B`A parser for Temporal datetimes.CcAn iterator over periodic datetimes, created by \xe2\x80\xa6BoBuilder for configuring and creating a decoder.0Dc<code>DecoderOptions</code> is a common set of options that all \xe2\x80\xa6CiAn iterator adaptor that removes repeated duplicates, \xe2\x80\xa60CgThe default backend used by <code>AudioManager</code>s.0CiThe resulting image exceed dimension limits in either \xe2\x80\xa6ChConfiguration for resolving ambiguous datetimes in a \xe2\x80\xa6AnDifferent types of distortion.CeCode to erase from the cursor to the end of the line.CgA command that enables blinking of the terminal cursor.AeEnable line wrapping.AfControls an EQ filter.CjThe time at which the event actually occurs, stored as \xe2\x80\xa60CfRepresents a set of <code>ExampleEnum</code> variants.Dh$ 1/\\sqrt{\xcf\x80} = 1/\\sqrt{\xcf\x84/2} $ (A087197) <code>\xe2\x89\x88 0.56418958\xe2\x80\xa6</code>00000j1/sqrt(\xcf\x80)00000000000Ch$ 2/\\sqrt{\xcf\x80} $ (A190732) <code>\xe2\x89\x88 1.12837916\xe2\x80\xa6</code>00000j2/sqrt(\xcf\x80)00000000000CfForce feedback is not supported by device with this IDCkLoop in the filesystem or IO subsystem; often, too many \xe2\x80\xa60000Dk<code>FinalizeResult</code> contains optional information that can only \xe2\x80\xa6CbRepresents a setting for a window flash operation.BmFlip horizontally. Can be performed in-place.Di<code>FoldChunksWith</code> is an iterator that groups elements of an \xe2\x80\xa6CgConfiguration for <code>SpanPrinter::fractional</code>.BmAll cells from the cursor position downwards.ClA trait for types that support being constructed from an \xe2\x80\xa6DgA possible error value when converting a <code>String</code> from a \xe2\x80\xa6000BgDefine front- and back-facing polygons.0CiWrapper around the <code>SDL_GameController</code> objectCmSome feature specified by string. This is discouraged and \xe2\x80\xa6BmCursor-based segmenter for grapheme clusters.Bl\xf0\x9d\x90\x93 An EGC backed by a <code>String</code>.0BoSendable grayscale + alpha channel image bufferBjGrayscale with an additional alpha channelBbA builder for default Fnv hashers.0CmTypestate for for <code>Config</code> when configured via \xe2\x80\xa6BoInformation about Hypervisor (LEAF=0x4000_0001)BjA deserializer holding an <code>i8</code>.CiUsed when an invalid exit code would have been generated.BeReturns the number of invalid values.00000000000CdNSData dataWithContentsOfFile or data.bytes are nullAfInterface-Local scope.00CnA marker trait used to identify values that can be used as \xe2\x80\xa6DjAn error returned by <code>BufWriter::into_inner</code> which combines \xe2\x80\xa6BnAn error occurred when initializing the sound.AaInvalid type tag.0AoInverse distance clamped model.Eb<strong>ISO Level 3 Shift</strong> key (commonly known as <strong>AltGr</strong>).0AeIso Level3 Shift key.Dj<strong>ISO Level 5 Shift</strong> key (used in some advanced keyboard \xe2\x80\xa60AeIso Level5 Shift key.Eg\xf0\x9f\x94\x84 <code>core</code> An iterator that endlessly repeats <code>A</code> by calling \xe2\x80\xa60Di\xf0\x9f\x94\x84 <code>std</code> An iterator that splits an environment variable \xe2\x80\xa60Dd\xf0\x9f\x94\x84 <code>core</code> An iterator where each successive item is \xe2\x80\xa60Df\xf0\x9f\x94\x84 <code>core</code> Extend a collection with the contents of an \xe2\x80\xa60Ci\xf0\x9f\x9a\xa9 <code>std</code> Returned from [Env::join_paths][\xe2\x80\xa60DdThe error type for operations on the <code>PATH</code> variable. \xe2\x80\xa6C`L1 Cache and TLB Information (LEAF=0x8000_0005).CnSettings to configure how text layout is constrained. Text \xe2\x80\xa6ChIndicates the limit that prevented an operation from \xe2\x80\xa6fU+000B0000ClFilter that adds a linear gain ramp to the source over a \xe2\x80\xa6BcExamine and change a signal action.0AdControls a listener.Dg<code>log</code> An enum representing the available verbosity level \xe2\x80\xa60Eg\xf0\x9f\x9a\xa9 <code>log</code> Returned by [<code>set_logger</code>][crate::Log::set_logger] \xe2\x80\xa60ClThe primary separator of path components for the current \xe2\x80\xa6DfError returned when max capacity of <code>HeaderMap</code> is exceededEe\xf0\x9f\x9a\xa9 <code>alloc</code> The [<code>MemLayout</code>] parameters violated constraints.0AnMethod not found on JS object.0B`Mutes or unmutes the microphone.0C`Continuation of a <code>Middleware</code> chain.AlA collection of input ports.CmAn object representing a single output port. How the port \xe2\x80\xa6CjDraws a single fullscreen quad textured by a pixel buffer.0DaA wrapper namespace over <code>miniquad::window</code> functions.0AcA mouse event kind.CkA command that moves the terminal cursor down the given \xe2\x80\xa6Do<code>std</code> The sending half of a <em>sync</em> <code>Mpsc</code> channel.0Dj$ -1/\xcf\x86 = 1-\xcf\x86 $ <code>\xe2\x89\x88 -0.61803398\xe2\x80\xa6</code> <em>The negative </em>\xe2\x80\xa600000Bl406 Not Acceptable [RFC9110, Section 15.5.7]CfThe input contained a newtype variant that was not \xe2\x80\xa6ChCould not determine the default audio track in the file.An\xf0\x9f\xaa\xaa \xf0\x9f\x9a\xa9 The link is not set.Ck\xf0\x9d\x9f\x99 \xe2\x9a\x97\xef\xb8\x8f A signed integer that is known not to equal \xe2\x80\xa60Cn\xf0\x9d\x9f\x99 \xe2\x9a\x97\xef\xb8\x8f An unsigned integer that is known not to equal \xe2\x80\xa60EfAn error returned from <code>Path::normalize_lexically</code> if a <code>..</code> \xe2\x80\xa6Ck\xf0\x9f\xaa\xaa \xf0\x9f\x9a\xa9 There is not enough free space for the operation.Cf\xf0\x9f\x9a\xa9 There is not enough free space for the operation.Ch\xe2\x88\x85 \xf0\x9f\x9a\xa9 The requested functionality is not implemented.0CiThe requested numerical functionality is not implemented.011000ClGilrs does not support current platform, but you can use \xe2\x80\xa6CfThis function is not implemented for current platform.CjGets the Python builtin value <code>NotImplemented</code>.CjTrait used to describe the maximum number of digits in \xe2\x80\xa60CmConfiguration for resolving disparities between an offset \xe2\x80\xa6CiUnix-specific extensions to <code>fs::OpenOptions</code>.0Eh\xf0\x9f\x94\x84 <code>core</code> An iterator over the value in <code>Some</code> variant of an \xe2\x80\xa60AmProcess policy on mce errors.BkKernel thread cloned from userspace thread.CjThe exception raised when Rust code called from Python \xe2\x80\xa6CmConversion trait to convert an <code>Iterator</code> to a \xe2\x80\xa60Di<code>ParallelExtend</code> extends an existing collection with items \xe2\x80\xa60B`Parallel extensions for strings.0BmAn error was encountered in inputs arguments.EdAn error returned when parsing a <code>bool</code> using <code>from_str</code> fails0000CcAn error which can be returned when parsing a char.00CcMain structure associated to <code>iterator</code>.Cj\xf0\x9f\xaa\xaa \xf0\x9f\x9a\xa9 The operation could only add a subset of the \xe2\x80\xa6Ck\xf0\x9f\x9a\xa9 The operation could only add a subset of the elements.Bi\xf0\x9f\xa7\xaa Permission to use a payment handler.0CiCalls a function on a source every time a period elapsed.CiUnix-specific extensions to <code>fs::Permissions</code>.0FdAn <code>Iterator</code> of <code>Permit</code> that can be used to hold <code>n</code> slots in \xe2\x80\xa6BkErrors that can occur when playing a sound.ChOffers methods to split a primitive into an array of \xe2\x80\xa60EdMetadata that came from the <code>metadata</code> field of <code>ProbeResult</code>.Df<code>std</code> A builder for configuring and spawning new processes.0DkAn iterator that produces only the <code>T</code> values as long as the \xe2\x80\xa60B`Dynamically enforced constraints0AlMaximum number of dimensionsCiImplementation of functionality for <code>PyBytes</code>.0CjRepresents Python\xe2\x80\x99s <code>BytesWarning</code> exception.CeHelper conversion trait that allows to use custom \xe2\x80\xa6CiImplementation of functionality for <code>PyFloat</code>.0CkRepresents a Python <code>types.GenericAlias</code> object.BnRepresents a Python <code>mappingproxy</code>.CiImplementation of functionality for <code>PyRange</code>.CjRepresents Python\xe2\x80\x99s <code>RuntimeError</code> exception.CgReturn value from <code>PySliceMethods::indices</code>.CiImplementation of functionality for <code>PySlice</code>.0DoCheck if <code>op</code> is a <code>PyDateTimeAPI.TZInfoType</code> or subtype.CjRepresents Python\xe2\x80\x99s <code>TimeoutError</code> exception.CiImplementation of functionality for <code>PyTuple</code>.0CmTrait for accessing the components of a struct containing \xe2\x80\xa6CjRepresents Python\xe2\x80\x99s <code>UnicodeError</code> exception.CfRepresents any Python <code>weakref</code> Proxy type.BiTypical gamma value for Rec.1886 (\xe2\x89\x882.4)0Dg\xf0\x9f\x93\x8f <code>core</code> A range bounded inclusively below and above (\xe2\x80\xa60DgA range bounded inclusively below and above (<code>start..=end</code>).00000000ClA virtual function pointer table (vtable) that specifies \xe2\x80\xa600Eh<code>ReadOnlySource</code> wraps any source implementing <code>std::io::Read</code> \xe2\x80\xa6AbA redirect failed.CoTransparent wrapper around <code>http::request::Builder</code>.Ee\xf0\x9f\x94\x84 <code>core</code> An iterator over the value in <code>Ok</code> variant of a \xe2\x80\xa60fU+005C0000CfRotate by 270 degrees clockwise and flip horizontally.CiThe samples are in row-major form and all samples are \xe2\x80\xa6Bl&lt; Implements SDL_JoystickRumbleTriggers()BbHandle to the runtime\xe2\x80\x99s metrics.C`Array component order, low byte -&gt; high byte.CcLock a spin lock by setting it to a non-zero value.CaClear any previous error message for this thread.A`Clear all hints.ChThis function is a legacy means of closing the audio \xe2\x80\xa6CfRestart one of the threads that are waiting on the \xe2\x80\xa6AlCreate a condition variable.BkSet the state of processing events by type.Ak&lt; Unused (do not remove)CeClear events of a specific type from the event queue.BaFree a previously-created cursor.CbFree an SDL_PixelFormat structure allocated by \xe2\x80\xa6BdGet a human-readable name for a key.CdGet the number of milliseconds since SDL library \xe2\x80\xa6CkGet the version of SDL that is linked against your program.CiGet the implementation dependent name of a haptic device.AmOpen a haptic device for use.Ck\\brief A structure containing a template for a Ramp effect.ChDetermine whether the CPU has ARM SIMD (ARMv6) features.CgDetermine whether the CPU has AVX-512F (foundation) \xe2\x80\xa6BoDetermine whether the CPU has AltiVec features.nHide a window.CiThis is a unique ID for a joystick for the time it is \xe2\x80\xa6CaLoad a BMP image from a seekable SDL data stream.BaDynamically load a shared object.BoLoad the audio data of a WAVE file into memory.CgLog a message with the specified category and priority.BlLog a message with SDL_LOG_PRIORITY_VERBOSE.Ag&lt; Mouse wheel motionCjCount the number of haptic devices attached to the system.ClCount the number of sensors attached to the system right \xe2\x80\xa6ChThis function is a legacy means of pausing the audio \xe2\x80\xa6ClCheck the event queue for messages and optionally return \xe2\x80\xa6C`The basic state for the system\xe2\x80\x99s power supply.ChPump the event loop, gathering events from the input \xe2\x80\xa6BiQueue more audio on non-callback devices.CmUse this function to create a new SDL_RWops structure for \xe2\x80\xa6CjCopy a portion of the texture to the current rendering \xe2\x80\xa6BfReset all hints to the default values.Aj&lt; System specific eventCdThese are the various supported windowing subsystemsCkSave a surface to a seekable SDL data stream in BMP format.ClSee if a semaphore has a positive value and decrement it \xe2\x80\xa6AfOpen a sensor for use.BjToggle whether or not the cursor is shown.nShow a window.Cn\\brief A video driver dependent system event (event.syswm.*\xe2\x80\xa6BeCleanup all TLS data for this thread.CkCalculate the union of two rectangles with float precision.AlWait for a thread to finish.CiThe primary separator char of path components for the \xe2\x80\xa600BmThe output size for the hash function SHA256.BmThe output size for the hash function SHA384.BmThe output size for the hash function SHA512.AbRate of SHAKE-128.AbRate of SHAKE-256.DkMatches when <em>any</em> haystack character equals <em>any</em> needle \xe2\x80\xa6ClInterprets consecutive pairs of characters in the needle \xe2\x80\xa6Aa&lt; SW ResamplerC`The kind of encoding used to store sample valuesBoThis control message contains unix credentials.BkAllows preventing the screen from sleeping.0D`A context manager for <code>SDL2_TTF</code> to manage C code \xe2\x80\xa6B`The clock ticks every x seconds.DgType returned from <code>serialize_tuple</code> for serializing the \xe2\x80\xa6CgReturned from <code>Serializer::serialize_tuple</code>.1ClA command that sets the style of the cursor. It uses two \xe2\x80\xa6EgThe type returned by <code>set_logger</code> if <code>set_logger</code> has already \xe2\x80\xa6Bh&lt; Called when the player index is setAnIntel SGX EPC Enumeration LeafBnIterator over the SGX sub-leafs (ECX &gt;= 2).CmA signed duration of time represented as a 96-bit integer \xe2\x80\xa6BaParallel <code>PartialOrd</code>.00000CeA vendor brand string as queried from the cpuid leaf.DnOptions for <code>Span::checked_add</code> and <code>Span::checked_sub</code>.ChA relative datetime for use with <code>Span</code> APIs.CiAn iterator over subslices separated by elements that \xe2\x80\xa6CnAn iterator over the substrings of a string, terminated by \xe2\x80\xa61010CkParallel iterator over slices separated by a predicate, \xe2\x80\xa6ChParallel iterator over substrings separated by a pattern3232Dh<code>StandardTagKey</code> is an enumeration providing standardized \xe2\x80\xa6CfThe range is bounded inclusively from below and is \xe2\x80\xa600fU+00010000CmRepresents an entry in a static map allowing for in-place \xe2\x80\xa60B`Holds a <code>SDL_Surface</code>BhAn error occurred when parsing the file.Bo<code>UnsafeCell</code>, but <code>Sync</code>.00AgTop front-left channel.AgTop rear-right channel.C`Creates Textures that cannot outlive the creatorDd<code>std</code> A thread local storage key which owns its contents.0BcThe clock ticks x times per minute.BcThe clock ticks x times per second.DnOptions for <code>Time::checked_add</code> and <code>Time::checked_sub</code>.DbOptions for <code>Time::since</code> and <code>Time::until</code>.BjOptions for <code>Timestamp::round</code>.BoTLB 1-GiB Pages Information (LEAF=0x8000_0019).BaSee <code>TreeError::Stack</code>AeConfigures a tweener.BiA deserializer holding a <code>u8</code>.ClAn underline color. Important: doesn\xe2\x80\x99t work on windows \xe2\x80\xa6Ee<code>Mapping</code> with <code>Button::Unknown</code> or <code>Axis::Unknown</code>.BjAn unwind action that continues unwinding.00DkA view into a vacant entry in a <code>HashMap</code>. It is part of the \xe2\x80\xa6ChParallelIterator for arbitrary tree-shaped patterns. \xe2\x80\xa6ClA single unit of the wavelet decomposition at a specific \xe2\x80\xa60ChWhich part of the keyboard the key event originates from0DhAggregates the live state of a <code>WebWindow</code>, including its \xe2\x80\xa60CjErrors that can occur when working with JavaScript Web \xe2\x80\xa60AiThe worker was not found.0BmError returned for the buffered data from \xe2\x80\xa6Bj\xf0\x9f\x8e\xb2 The <code>Xoroshiro128++</code> PRNG.0AfNot less-than-or-equal00mNot less-than00AkSee <code>_mm_setcsr</code>00BfSee <code>_MM_GET_ROUNDING_MODE</code>00Bo<strong>Mask only</strong>: return the bit mask00C`Transaction abort in a inner nested transaction.00EgAdds unsigned 32-bit integers <code>a</code> and <code>b</code> with unsigned 8-bit \xe2\x80\xa600EgAdds unsigned 64-bit integers <code>a</code> and <code>b</code> with unsigned 8-bit \xe2\x80\xa600EgReturns the bit in position <code>b</code> of the memory addressed by <code>p</code>\xe2\x80\xa600CnConvert 16-bit mask a into an integer value, and store the \xe2\x80\xa600CnConvert 32-bit mask a into an integer value, and store the \xe2\x80\xa600CnConvert 64-bit mask a into an integer value, and store the \xe2\x80\xa600CnConvert 32-bit integer value a to an 16-bit mask and store \xe2\x80\xa600CnConvert integer value a into an 32-bit mask, and store the \xe2\x80\xa600CnConvert integer value a into an 64-bit mask, and store the \xe2\x80\xa600BcLonger form documentation for Jiff.CjRounds packed double-precision (64-bit) floating point \xe2\x80\xa600CjRounds packed single-precision (32-bit) floating point \xe2\x80\xa600CiCopy the lower half-precision (16-bit) floating-point \xe2\x80\xa600CkHorizontal addition of adjacent pairs in the two packed \xe2\x80\xa600000CnHorizontal subtraction of adjacent pairs in the two packed \xe2\x80\xa600000CiLoads 256-bits (composed of 4 packed double-precision \xe2\x80\xa600CgLoad 256-bits (composed of 16 packed half-precision \xe2\x80\xa600CiLoads 256-bits (composed of 8 packed single-precision \xe2\x80\xa600CmMultiply packed complex numbers in a and b, and store the \xe2\x80\xa600DkBroadcasts double-precision (64-bit) floating-point value <code>a</code>\xe2\x80\xa600CnBroadcast the half-precision (16-bit) floating-point value \xe2\x80\xa600DkBroadcasts single-precision (32-bit) floating-point value <code>a</code>\xe2\x80\xa600ChSets packed double-precision (64-bit) floating-point \xe2\x80\xa600CnSet packed half-precision (16-bit) floating-point elements \xe2\x80\xa600ChSets packed single-precision (32-bit) floating-point \xe2\x80\xa600CfReturns the square root of packed double-precision \xe2\x80\xa600CmCompute the square root of packed half-precision (16-bit) \xe2\x80\xa600CfReturns the square root of packed single-precision \xe2\x80\xa600C`Zeroes the contents of all XMM or YMM registers.00CiCopy the lower half-precision (16-bit) floating-point \xe2\x80\xa600ChLoad 512-bits (composed of 8 packed double-precision \xe2\x80\xa600CgLoad 512-bits (composed of 32 packed half-precision \xe2\x80\xa600CiLoad 512-bits (composed of 16 packed single-precision \xe2\x80\xa600>>>DjBroadcast 64-bit float <code>a</code> to all elements of <code>dst</code>.00===DjBroadcast 32-bit float <code>a</code> to all elements of <code>dst</code>.00CgSet packed double-precision (64-bit) floating-point \xe2\x80\xa600CgSet packed single-precision (32-bit) floating-point \xe2\x80\xa600111===DeSets packed 32-bit integers in <code>dst</code> with the supplied \xe2\x80\xa600DhReturn vector of type <code>__m512</code> with all elements set to zero.00CfCompute the square root of packed double-precision \xe2\x80\xa600===CfCompute the square root of packed single-precision \xe2\x80\xa600EbAdds packed 16-bit integers in <code>a</code> and <code>b</code> using saturation.00EcAdds packed unsigned 16-bit integers in <code>a</code> and <code>b</code> using \xe2\x80\xa600EaCompares packed 8-bit integers in <code>a</code> and <code>b</code> for equality.00EeCompares packed 8-bit integers in <code>a</code> and <code>b</code> for greater-than.00EbCompares packed 8-bit integers in <code>a</code> and <code>b</code> for less-than.00DnCompares the lower element of <code>a</code> and <code>b</code> for not-equal.00ClCompare the lower half-precision (16-bit) floating-point \xe2\x80\xa600DhCompares two 32-bit floats from the low-order bits of <code>a</code> \xe2\x80\xa600C`Converts the lower double-precision (64-bit) \xe2\x80\xa600000EbReturns <code>a</code> with its lower element replaced by <code>b</code> after \xe2\x80\xa600CkConverts a 32 bit integer to a 32 bit float. The result \xe2\x80\xa600111CkConverts a 64 bit integer to a 32 bit float. The result \xe2\x80\xa600CmConverts the lowest 32 bit float in the input vector to a \xe2\x80\xa600000BgAlias for <code>_mm_cvttss_si32</code>.00CnConvert the lower double-precision (64-bit) floating-point \xe2\x80\xa600000000000ClConvert the lower half-precision (16-bit) floating-point \xe2\x80\xa600000000000CnConvert the lower single-precision (32-bit) floating-point \xe2\x80\xa600000000000CeCompute the sum of absolute differences (SADs) of \xe2\x80\xa600CgExtracts a single-precision (32-bit) floating-point \xe2\x80\xa600CgMultiply packed complex numbers in a by the complex \xe2\x80\xa600CiMultiply the lower complex number in a by the complex \xe2\x80\xa600CfNormalize the mantissas of packed double-precision \xe2\x80\xa600CmNormalize the mantissas of packed half-precision (16-bit) \xe2\x80\xa600CfNormalize the mantissas of packed single-precision \xe2\x80\xa600CiNormalize the mantissas of the lower double-precision \xe2\x80\xa600CgNormalize the mantissas of the lower half-precision \xe2\x80\xa600CiNormalize the mantissas of the lower single-precision \xe2\x80\xa600ClHorizontally adds the adjacent pairs of values contained \xe2\x80\xa600000CfHorizontally subtract the adjacent pairs of values \xe2\x80\xa600000CmLoad 128-bits (composed of 4 packed 32-bit integers) from \xe2\x80\xa600CmLoad 128-bits (composed of 2 packed 64-bit integers) from \xe2\x80\xa600CiLoads 128-bits of integer data from memory into a new \xe2\x80\xa600ClLoads a double-precision (64-bit) floating-point element \xe2\x80\xa600CmLoad 128-bits (composed of 16 packed 8-bit integers) from \xe2\x80\xa600ClLoads unaligned 16-bits of integer data from memory into \xe2\x80\xa600ClLoads unaligned 32-bits of integer data from memory into \xe2\x80\xa600ClLoads unaligned 64-bits of integer data from memory into \xe2\x80\xa600CfMultiplies and then horizontally add signed 16 bit \xe2\x80\xa600CnCompute the bitwise OR of packed double-precision (64-bit) \xe2\x80\xa600CnCompute the bitwise OR of packed single-precision (32-bit) \xe2\x80\xa600DkReturns a vector where the low element is extracted from <code>a</code> \xe2\x80\xa600CnDuplicate the low double-precision (64-bit) floating-point \xe2\x80\xa600ClSet each packed 16-bit integer in dst to all ones or all \xe2\x80\xa600ClSet each packed 32-bit integer in dst to all ones or all \xe2\x80\xa600ClSet each packed 64-bit integer in dst to all ones or all \xe2\x80\xa600CnShuffles double-precision (64-bit) floating-point elements \xe2\x80\xa600CnShuffles single-precision (32-bit) floating-point elements \xe2\x80\xa600CmRotate the bits in each packed 32-bit integer in a to the \xe2\x80\xa600CmRotate the bits in each packed 64-bit integer in a to the \xe2\x80\xa600111000ClCompute the approximate reciprocal square root of packed \xe2\x80\xa600000CiCompute the approximate reciprocal square root of the \xe2\x80\xa600000CiBroadcasts 16-bit integer <code>a</code> to all elements.00CiBroadcasts 32-bit integer <code>a</code> to all elements.00CnSets packed 64-bit integers with the supplied values, from \xe2\x80\xa600CkSets packed 16-bit integers with the supplied values in \xe2\x80\xa600CkSets packed 32-bit integers with the supplied values in \xe2\x80\xa600CkReturns packed double-precision (64-bit) floating-point \xe2\x80\xa600CjReturn vector of type __m128h with all elements set to \xe2\x80\xa600DfConstruct a <code>__m128</code> with all elements initialized to zero.00DkConstructs a 128-bit floating-point vector of <code>[2 x double]</code> \xe2\x80\xa600ClShuffles packed single-precision (32-bit) floating-point \xe2\x80\xa600DkNegates packed 16-bit integers in <code>a</code> when the corresponding \xe2\x80\xa600DkNegates packed 32-bit integers in <code>a</code> when the corresponding \xe2\x80\xa600EcShifts packed 16-bit integers in <code>a</code> left by <code>IMM8</code> while \xe2\x80\xa600EcShifts packed 32-bit integers in <code>a</code> left by <code>IMM8</code> while \xe2\x80\xa600EcShifts packed 64-bit integers in <code>a</code> left by <code>IMM8</code> while \xe2\x80\xa600DnShifts <code>a</code> left by <code>IMM8</code> bytes while shifting in zeros.00ChShift packed 16-bit integers in a left by the amount \xe2\x80\xa600DfShifts packed 32-bit integers in <code>a</code> left by the amount \xe2\x80\xa600DfShifts packed 64-bit integers in <code>a</code> left by the amount \xe2\x80\xa600EdShifts packed 16-bit integers in <code>a</code> right by <code>IMM8</code> while \xe2\x80\xa600EdShifts packed 32-bit integers in <code>a</code> right by <code>IMM8</code> while \xe2\x80\xa600CiShift packed 64-bit integers in a right by imm8 while \xe2\x80\xa600CiShift packed 16-bit integers in a right by the amount \xe2\x80\xa600DgShifts packed 32-bit integers in <code>a</code> right by the amount \xe2\x80\xa600CiShift packed 64-bit integers in a right by the amount \xe2\x80\xa600555444EdShifts packed 64-bit integers in <code>a</code> right by <code>IMM8</code> while \xe2\x80\xa600DoShifts <code>a</code> right by <code>IMM8</code> bytes while shifting in zeros.00444333DgShifts packed 64-bit integers in <code>a</code> right by the amount \xe2\x80\xa600DhSubtract packed 16-bit integers in <code>b</code> from packed 16-bit \xe2\x80\xa600DjSubtract packed unsigned 16-bit integers in <code>b</code> from packed \xe2\x80\xa600CfComputes the bitwise AND of 128 bits (representing \xe2\x80\xa600000DmCompares the lower element of <code>a</code> and <code>b</code> for equality.00ClCompare the lower half-precision (16-bit) floating-point \xe2\x80\xa600DhCompares two 32-bit floats from the low-order bits of <code>a</code> \xe2\x80\xa600DgCompares the lower element of <code>a</code> and <code>b</code> for \xe2\x80\xa600222111EaCompares the lower element of <code>a</code> and <code>b</code> for greater-than.00333222111333222DnCompares the lower element of <code>a</code> and <code>b</code> for less-than.00444333CkRead a hardware generated 16-bit random value and store \xe2\x80\xa600CkRead a hardware generated 32-bit random value and store \xe2\x80\xa600CkRead a hardware generated 64-bit random value and store \xe2\x80\xa600ChRead a 16-bit NIST SP800-90B and SP800-90C compliant \xe2\x80\xa600ChRead a 32-bit NIST SP800-90B and SP800-90C compliant \xe2\x80\xa600ChRead a 64-bit NIST SP800-90B and SP800-90C compliant \xe2\x80\xa600EgAdds unsigned 32-bit integers <code>a</code> and <code>b</code> with unsigned 8-bit \xe2\x80\xa600EgAdds unsigned 64-bit integers <code>a</code> and <code>b</code> with unsigned 8-bit \xe2\x80\xa600CmCompute dot-product of BF16 (16-bit) floating-point pairs \xe2\x80\xa600CmCompute dot-product of FP16 (16-bit) floating-point pairs \xe2\x80\xa600Do<strong>Gets</strong> the attribute: the minimum number of bits for the red \xe2\x80\xa6AkCreates a mixer send track.CkRegisters a function to run for every newly thread spawned.CnAdvance height of the glyph in subpixels. Used in vertical \xe2\x80\xa6AjAdvance a slice of slices.0EhPre-allocates space for a <code>Result</code> in this <code>Bump</code>, initializes \xe2\x80\xa6Cb(Virtual) Bus (local apic timer) frequency in kHz.CiConstructs a path inside your application\xe2\x80\x99s runtime \xe2\x80\xa600CeVideo decoding only. Certain video codecs support \xe2\x80\xa6CiSet a new viewport rectangle. Should be applied after \xe2\x80\xa60000CgReturns <code>true</code> if it all the fields are set.00Ea\xf0\x9f\x97\x83\xef\xb8\x8f <code>core</code> Converts a mutable reference to <code>T</code> into \xe2\x80\xa60Fb\xf0\x9f\x97\x83\xef\xb8\x8f <code>core</code> Converts a reference to <code>T</code> into <code>&amp;[T; 1]</code> \xe2\x80\xa60FaView any <code>T: Sync + Unpin + Sized</code> as <code>&amp;[u8]</code> <em>compile-time</em> \xe2\x80\xa6CiReturn a reference to an 8bit Grayscale image with an \xe2\x80\xa6ClReturns this timestamp as a number of microseconds since \xe2\x80\xa6ClReturns this timestamp as a number of milliseconds since \xe2\x80\xa6CjReturns the mouse event if the event is a mouse event, \xe2\x80\xa6CaReturn a mutable reference to an 32bit RGBA imageClReturns the pasted string if the event is a paste event, \xe2\x80\xa6EcReturns a (3) tuple if the 3 fields from <code>ms</code> to <code>ns</code> are \xe2\x80\xa6DgUnstable module containing the unstable <code>assert_matches</code> \xe2\x80\xa6ChAsserts that an expression matches the provided pattern.1010DiCall the <code>AsyncFnMut</code>, returning a future which may borrow \xe2\x80\xa600000000000000000BmForced audio codec_id. Demuxing: Set by user.AdInit a print buffer.CcAllocate an AVCAST5 context To free the struct: \xe2\x80\xa6CnEncrypt or decrypt a buffer using a previously initialized \xe2\x80\xa6CmCompare the remainders of two integer operands divided by \xe2\x80\xa6ChPrint detailed information about the input or output \xe2\x80\xa6CiAllocate a buffer, reusing the given one if large enough.CkDo the permutation needed BEFORE calling ff_fft_calc(). \xe2\x80\xa6CjAllocate and initialize an AVFifo with a given element \xe2\x80\xa6ChDiscard the specified amount of data from an AVFifo. \xe2\x80\xa6CnFree an AVFifo and reset pointer to NULL. @param f Pointer \xe2\x80\xa6CnAllocate an AVFrame and set its fields to default values.  \xe2\x80\xa6ChCreate a new frame that references the same data as src.CmUnreference all the buffers referenced by frame and reset \xe2\x80\xa6BnReturn the pixel format corresponding to name.BoIncrease packet size, correctly zeroing paddingCaGuess the codec ID based upon muxer and filename.BkUpdate a hash context with additional data.CiHash data with the HMAC. @param ctx  The HMAC context \xe2\x80\xa6AeMap a hardware frame.ChAllocate an image with size w and h and pixel format \xe2\x80\xa6CkInitialize optional fields of a packet with default values.CkFree the packet, if the packet is reference counted, it \xe2\x80\xa6CjPut the RGBA values that correspond to color_string in \xe2\x80\xa6BjParse str and store the parsed ratio in q.CaRescale a 64-bit integer with specified rounding.AjInitialize RIPEMD hashing.Cj@defgroup lavu_ripemd RIPEMD @ingroup lavu_hash RIPEMD \xe2\x80\xa6AmInitialize SHA-2 512 hashing.Cl@defgroup lavu_sha512 SHA-512 @ingroup lavu_hash SHA-512 \xe2\x80\xa6CmLocale-independent strings replace. @note This means only \xe2\x80\xa6CkLocale-independent case-insensitive compare. @note This \xe2\x80\xa6CnRead and decode a single UTF-8 code point (character) from \xe2\x80\xa6BgWrite a packet to an output media file.b@}ClDiscard all internally buffered data. This can be useful \xe2\x80\xa6AaAverage framerateA`Close directory.CnPerform one step of the protocol handshake to accept a new \xe2\x80\xa6ChSeek to a given timestamp relative to some component \xe2\x80\xa6AmReturn the libavutil license.BjReturn the LIBAVUTIL_VERSION_INT constant.Daqscale factor between IP and B-frames If &gt; 0 then the last \xe2\x80\xa6Beqscale offset between IP and B-framesAkVersion Information: FamilyDnFlips the bits in <code>self</code> from the <code>[start..=end]</code> range.0DdReturns a bitmask of ones from the <code>[start..=end]</code> range.0BfBitwise <code>(!a) &amp;amp; b</code>.BbBitwise <code>(!a) &amp; b</code>.10CaReturns the bits per pixel of the current format.CfReturns the number of bits contained in a pixel of \xe2\x80\xa6CiReturns the number of bits per pixel for this color type.CgThe number of bits-per-pixel (aka bit-depth) of the \xe2\x80\xa6CaBlends the lanes according to the immediate mask.0CmRuns the provided blocking function on the current thread \xe2\x80\xa6DfBlockingly locks this <code>RwLock</code> with exclusive write access.CkShifts this rectangle to the bottom by <code>offset</code>.0CcAdvances the line state and returns the next point.BbC-bit location in page table entryCaCalculates the magnitude of the vector (squared).0BbThe surface area of the 3d extent.00000000000EcAccurately calculates a <code>TimeStamp</code> from the given <code>Time</code> \xe2\x80\xa6ChAs <code>try_cast_slice_arc</code>, but unwraps for you.0ChAs <code>try_cast_slice_box</code>, but unwraps for you.0CnCast <code>&amp;mut [A]</code> into <code>&amp;mut [B]</code>.0CjKeeps the item it\xe2\x80\x99s applied to if the passed path is \xe2\x80\xa600000000000000CeChannel layout of the audio data. @deprecated use \xe2\x80\xa6CkAudio only. The channel layout bitmask. May be 0 if the \xe2\x80\xa6AeAudio channel layout.Bichannel layout of current buffer (see \xe2\x80\xa6ChAudio only, the audio channel layout @deprecated use \xe2\x80\xa6AcThe channel layout.CiAdd this to an index to get to the sample in the next \xe2\x80\xa6ChGets the remaining capacity in the current chunk (in \xe2\x80\xa6CfReturns the number of clocks that can exist at a time.CfThe maximum number of clocks that can exist at a time.CkSteps through the iterator from the current frame until \xe2\x80\xa6CiReturns the current number of elements in the collection.00BcA \xe2\x80\x9ccompiler-only\xe2\x80\x9d atomic fence.000CgThe type of the wavelet component (scaling or wavelet).0EeCreates a new vector from the elements of <code>first</code> and <code>second</code>.00BnShortcut to reach a <code>ConfigBuilder</code>ClAllocates a block of memory at compile time. At runtime, \xe2\x80\xa600DeCreates a new <code>OnceCell</code> that contains the provided value.DdCreates a new <code>SetOnce</code> that contains the provided value.ClConsumes a unit of budget and returns the execution back \xe2\x80\xa60DiWhether <code>self</code> contains all the same set bits that are set \xe2\x80\xa600CeChecks whether this rectangle contains a given point.0CmReturns true if the table contains a table with the given \xe2\x80\xa6BgReturns true if self contains the token0FeReturns <code>true</code> if the array contains <code>element</code>, from the <code>start</code> \xe2\x80\xa6CmReturns true if the table contains a value with the given \xe2\x80\xa6AoThe content length of the body.FcConverts the <code>ControlFlow</code> into an <code>Option</code> which is <code>Some</code> if \xe2\x80\xa6CjCopies the surface into a new one of a specified pixel \xe2\x80\xa6CiReturns a copy of the state long-jumped ahead by 2^96 \xe2\x80\xa6ChRecursively create a directory and all of its parent \xe2\x80\xa60CoCreates an element (delegates to <code>WebElement::new</code>).BjCreates a texture for a rendering context.CkCreates a virtual input port. Once it has been created, \xe2\x80\xa6ClCreates a virtual output port. Once it has been created, \xe2\x80\xa6CiCurrent timestamp of the link, as defined by the most \xe2\x80\xa6ClRetrieves an exclusive reference to the current instance \xe2\x80\xa6DcReturns the data type associated with this <code>Copy</code> value.00C`Format a <code>civil::Date</code> into a string.C`&lt; index of default device or -1 if no defaultBnDelete GPU texture, leaving handle unmodified.000D`Deterministically derive a X25519 keypair from <code>ikm</code>.EbHint that the <code>Deserialize</code> type is expecting an <code>i8</code> value.0EaHint that the <code>Deserialize</code> type is expecting a <code>u8</code> value.0En<code>std</code> Tests at <em>runtime</em> whether an <code>aarch64</code> feature is enabled.0CmSet the disambiguation strategy for when a zoned datetime \xe2\x80\xa6CmSet the disambiguation strategy for when a datetime falls \xe2\x80\xa6C`Combine two values which have no bits in common.DbSee <code>super::disjoint_bitor</code>; we just need the trait \xe2\x80\xa61010BnGet the desktop area represented by a display.BnChanges distance model associated with effect.DcSets the <code>dither</code> field to <code>Dither::ADither</code>.DcSets the <code>dither</code> field to <code>Dither::XDither</code>.DdDowncast this <code>PyObject</code> to a concrete Python type or \xe2\x80\xa6DiDowncast this <code>PyAny</code> to a concrete Python type or pyclass \xe2\x80\xa60BmDraws RGBA text with a custom color function.ChSynchronization point for start of timestamp generation.Cldump format separator. can be \xe2\x80\x9c, \xe2\x80\x9c or \xe2\x80\x9c\\n      \xe2\x80\x9c \xe2\x80\xa60CnReturns the amount of time elapsed from another instant to \xe2\x80\xa6ClReturns the amount of time elapsed from an earlier point \xe2\x80\xa6DhThis routine is identical to <code>Timestamp::duration_until</code>, \xe2\x80\xa6DhThis routine is identical to <code>Zoned::duration_until</code>, but theDkThis routine is identical to <code>Date::duration_until</code>, but the \xe2\x80\xa6DkThis routine is identical to <code>DateTime::duration_until</code>, but \xe2\x80\xa6DkThis routine is identical to <code>Time::duration_until</code>, but the \xe2\x80\xa6DiThis routine is identical to <code>Offset::duration_until</code>, but \xe2\x80\xa6CnReturns an absolute duration representing the elapsed time \xe2\x80\xa60000ClReturns an absolute duration representing the difference \xe2\x80\xa6DaEnable support for gapless playback. Default: <code>false</code>.0CnEnumerates over the rows of the image. The iterator yields \xe2\x80\xa6CdChecks that two values are a case-insensitive match.CmReturns an iterator that produces an escaped version of a \xe2\x80\xa600CfSets the number of scheduler ticks after which the \xe2\x80\xa6ClExpands a color palette by re-using the existing buffer. \xe2\x80\xa6CmReserves capacity in a collection for the given number of \xe2\x80\xa6000000000000000000000CnGet a mutable reference to the extensions for this request \xe2\x80\xa6CiReturns a mutable reference to the associated extensions.01CfGet a mutable reference to the extensions for this \xe2\x80\xa6CkGet a reference to the extensions for this request builder.0CgGet a reference to the extensions for this response \xe2\x80\xa6CgReturn a list of applicable extensions for this format.BgSize of the extradata content in bytes.AkReturns the proper factors.0CeFloat addition that allows optimizations based on \xe2\x80\xa600CfRounds each lane into an integer. This is a faster \xe2\x80\xa60CiTruncates each lane into an integer. This is a faster \xe2\x80\xa60CeFloat division that allows optimizations based on \xe2\x80\xa600DnOffsets the pointer\xe2\x80\x99s address by adding <code>val</code> <em>bytes</em>, \xe2\x80\xa60EcOffsets the pointer\xe2\x80\x99s address by subtracting <code>val</code> <em>bytes</em>, \xe2\x80\xa60CgFind the first available (not playing) channel in groupDkFinds the index of the first character in <code>haystack</code> that is \xe2\x80\xa6ClApplies the given predicate to the items in the parallel \xe2\x80\xa60CeRun this finder on the given haystack as a prefilter.00C`Returns the first non-unit variant name, if any.DhReturns some exclusive reference to the first <code>None</code> element.CnReturns some reference to the first <code>None</code> element.CgReturns the first date of the month that this zoned \xe2\x80\xa6CnReturns the first date of the month that this date resides \xe2\x80\xa6CjReturns the first date of the month that this datetime \xe2\x80\xa6DhReturns some exclusive reference to the first <code>Some</code> element.CmReturns some reference to the first <code>Some</code> elementC`Internal flags. See FF_FMT_FLAG_* in internal.h.Ce&lt; Additional flags for avfilter internal use only.CkFloat multiplication that allows optimizations based on \xe2\x80\xa600D`Decrease a semaphore\xe2\x80\x99s permits by a maximum of <code>n</code>.CjLike <code>forget</code>, but also accepts unsized values.00D`Same as <code>format_args</code>, but adds a newline in the end.00000000000000000CnThe number of frames used for determining the framerate in \xe2\x80\xa6E`Returns the nth <code>Frame</code> of audio in the <code>StaticSoundData</code>.BlNumber of past frames sent through the link.CfFloat remainder that allows optimizations based on \xe2\x80\xa600DaRe-interprets <code>BoxBytes</code> as <code>Box&lt;T&gt;</code>.0DdRe-interprets <code>&amp;mut [u8]</code> as <code>&amp;mut T</code>.0DdPrepares a read-write memory buffer for use with <code>RWops</code>.CiCreates a new iterator where each iteration calls the \xe2\x80\xa6000ChReturn the image format specified by a path\xe2\x80\x99s file \xe2\x80\xa6CaConverts a slice of bytes to an HTTP header name.CaReturn the image format specified by a MIME type.DfCreates a <code>Value::FromModulator</code> from a modulator ID or \xe2\x80\xa6CkGets atomic access to a <code>&amp;mut [bool]</code> slice.BjGets atomic access to a slice of pointers.ChGet atomic access to a <code>&amp;mut [i8]</code> slice.ChGet atomic access to a <code>&amp;mut [u8]</code> slice.CiGet atomic access to a <code>&amp;mut [i16]</code> slice.CiGet atomic access to a <code>&amp;mut [u16]</code> slice.CiGet atomic access to a <code>&amp;mut [i32]</code> slice.CiGet atomic access to a <code>&amp;mut [u32]</code> slice.CiGet atomic access to a <code>&amp;mut [i64]</code> slice.CiGet atomic access to a <code>&amp;mut [u64]</code> slice.CkGet atomic access to a <code>&amp;mut [isize]</code> slice.CkGet atomic access to a <code>&amp;mut [usize]</code> slice.EdConstructs a new <code>Bound&lt;&#39;py, PyAny&gt;</code> from a pointer. Panics \xe2\x80\xa6DoCreate a <code>Py&lt;T&gt;</code> instance by taking ownership of the given \xe2\x80\xa6BcForms a slice from a pointer range.0000DkPerforms the same functionality as <code>std::ptr::from_raw_parts</code>\xe2\x80\xa6E`Creates a <code>Vec&lt;T&gt;</code> directly from a pointer, a length, and a \xe2\x80\xa6DdCreates a new <code>String</code> from a pointer, a length and a \xe2\x80\xa6CaForms a shared slice from a pointer and a length.CkForms a (possibly-wide) raw pointer from a data pointer \xe2\x80\xa6BjForms a slice from a pointer and a length.ClCreates a <code>&amp;str</code> from a pointer and a length.E`Creates a <code>Vec&lt;T&gt;</code> directly from a pointer, a capacity, and \xe2\x80\xa621CfConstructs a <code>BoxBytes</code> from its raw parts.43243232BjReturns mutable view into a mutable slice.DjCreates a <code>ClockTime</code> for a clock with the specified number \xe2\x80\xa60CmConstruct a <code>datetime.date</code> from a POSIX timestampCoConstruct a <code>datetime</code> object from a POSIX timestampDhUnpack the lower half of the input and expand it to <code>i16</code> \xe2\x80\xa6ClUnpack the lower half of the input and zero expand it to \xe2\x80\xa6BbLoads an SDL Surface from XPM dataChFloat subtraction that allows optimizations based on \xe2\x80\xa600CaQuery basic information about caches (LEAF=0x02).EbGets either a single <code>char</code> from <em>stdin</em>, or the replacement \xe2\x80\xa6CkCalculates the 1D array index from the given 2D coordinates0CeGet read-write access to the contents of a pinned \xe2\x80\xa6BkGet a mutable reference to a single sample.CkGet a mutable reference to a selected subpixel if it is \xe2\x80\xa6BmGet a mutable reference to a selected sample.DfReturns the <code>User</code> matching the given <code>user_id</code>.DgGets a UTF-8 encoded byte sequence from <em>stdin</em> representing \xe2\x80\xa6BfUpdate a window with OpenGL rendering.CkGlobal quality for codecs which cannot change it per frame.B`Is there support for 1GiB pages.C`4K page size entries supported by this structureAnCheck support for 64-bit mode.CkSEV guest execution only allowed from a 64-bit host if set.kAVX512VBMI2jAVX512VBMIjAVX512VNNIAdSupports CLFLUSHOPT.AiCheck support legacy cmp.CiCMPXCHG16B Available. A value of 1 indicates that the \xe2\x80\xa6CbFull debug state swap supported for SEV-ES guests.CjA value of 1 indicates the indicates the presence of a \xe2\x80\xa6BiWBINVD/WBNOINVD are interruptible if set.jVPCLMULQDQDdMaps the computed FNV hash to the given <code>range</code> using \xe2\x80\xa6000Daqscale factor between P- and I-frames If &gt; 0 then the last \xe2\x80\xa6Bdqscale offset between P and I-framesCdReturns the time zone IANA identifier, if available.DjCreates a \xe2\x80\x9cfork-join\xe2\x80\x9d scope <code>s</code> and invokes the closure \xe2\x80\xa6CgCreates a scope that spawns work into this thread pool.DkAdd a number of read bytes into <code>Buffers::input_append_buf()</code>\xe2\x80\xa6DmComputes the modulo of <code>self + other</code> over |<code>modulus</code>|.00CoComputes <code>self / other</code> over |<code>modulus</code>|.00111DmComputes the modulo of <code>self - other</code> over |<code>modulus</code>|.00AnCalls `NumInt::int_ref_digits.00CmSimilar to int_digits, but operates on references instead \xe2\x80\xa600AnCalls `NumInt::int_ref_is_odd.00CmSimilar to int_is_odd, but operates on references instead \xe2\x80\xa600AnCalls `NumInt::int_ref_modulo.00CmSimilar to int_modulo, but operates on references instead \xe2\x80\xa600CbReturns the floored integer <code>nth</code> root.00DjReturns a scaled value between <code>[min..=max]</code> to a new range \xe2\x80\xa600BhReturns the floored integer square root.00BhReturns the rounded integer square root.00CiCalculates the intersection of a rectangle and a line \xe2\x80\xa60EoA copy of <code>self</code> with only the bits both in <code>self</code> and <code>mask</code>.00Ckshrink the clipping rect to the part which contains the \xe2\x80\xa6ChConverts this <code>String</code> into a Box&lt;str&gt;.EhTakes a <code>Vec&lt;[T; N]&gt;</code> and flattens it into a <code>Vec&lt;T&gt;</code>.0EeReturn a <code>HashMap</code> of keys mapped to <code>Vec</code>s of values. Keys \xe2\x80\xa6000DkConverts the <code>OccupiedEntry</code> into a mutable reference to the \xe2\x80\xa6E`Converts a Box&lt;OsStr&gt; into an <code>OsString</code> without copying or \xe2\x80\xa6EbConsumes the <code>PathBuf</code>, yielding its internal <code>OsString</code> \xe2\x80\xa6C`Consumes the thread, returning the raw pthread_t0DcDecomposes a <code>Vec&lt;T&gt;</code> into its raw components: \xe2\x80\xa6CmDecomposes a <code>String</code> into its raw components: \xe2\x80\xa6CoDecomposes a <code>Vec&lt;T&gt;</code> into its raw components.ChDeconstructs a <code>BoxBytes</code> into its raw parts.CjReturns an iterator over the remaining elements of the \xe2\x80\xa6CkReturns the remainder of the original slice that is not \xe2\x80\xa60CjReturn the remainder of the original slice that is not \xe2\x80\xa60CjConsumes this ambiguous zoned datetime and returns the \xe2\x80\xa6CmRaised when deserializing a sequence or map and the input \xe2\x80\xa6CmReturns <code>true</code> if this file type is a char device.0Di(compatMode) Returns <code>true</code> if the browser is in no-quirks \xe2\x80\xa6BlWhether the <code>FLAG1</code> field is set.0BlWhether the <code>FLAG2</code> field is set.0BlWhether the <code>MASK0</code> field is set.0CnTrue if the bit n (corresponding to the sub-leaf index) is \xe2\x80\xa6DdReturns true if the current exception is instance of <code>T</code>.DaChecks whether this object is an instance of type <code>T</code>.0DgReturns <code>true</code> if the address is an IPv4-mapped address (\xe2\x80\xa6CnReturns <code>true</code> if the event is a key release event.EdReturns <code>true</code> if the angle is of the given <code>kind</code> using a \xe2\x80\xa6CoWhether <code>self</code> is equal to <code>NUM_NEG_ONE</code>.00E`Returns <code>true</code> if <code>self</code> overlaps with <code>other</code>.0CkChecks if the elements of this iterator are partitioned \xe2\x80\xa6000000000000000000000BoChecks if the value is a punctuation character:AiIs this a read-only file?BbCheck if status is within 300-399.DfChecks whether <code>self</code> is a subclass of type <code>T</code>.00DdReturns <code>true</code> for the special \xe2\x80\x98unspecified\xe2\x80\x99 address.DhReturns <code>true</code> for the special \xe2\x80\x98unspecified\xe2\x80\x99 address (\xe2\x80\xa6EgReturns <code>true</code> for the special \xe2\x80\x98unspecified\xe2\x80\x99 address (<code>::</code>\xe2\x80\xa6DjChecks if this <code>MacAddr</code> has all bytes equal to <code>0</code>.DiReturns <code>true</code> if the crate was compiled for a WebAssembly \xe2\x80\xa6BfReturns the system\xe2\x80\x99s kernel version.CjReturns the last key-value pair in the map. The key in \xe2\x80\xa6CeReturns the surrounding whitespace for the line entry0CiReturn tuple of options corresponding to the left and \xe2\x80\xa6CnReturns a mutable reference to the left value. If the left \xe2\x80\xa6EgSet the <code>WM_CLASS</code> window property on X11 and the <code>app_id</code> on \xe2\x80\xa600CjGet the two magic constant bytes corresponding to this \xe2\x80\xa6CjConverts this value to its lower case equivalent in-place.CjConverts this value to its upper case equivalent in-place.FgMaps an <code>Option&lt;T&gt;</code> to a <code>U</code> by applying function <code>f</code> to the \xe2\x80\xa6FiMaps a <code>Result&lt;T, E&gt;</code> to a <code>U</code> by applying function <code>f</code> to the \xe2\x80\xa6DfApply the function <code>f</code> to each channel except the alpha \xe2\x80\xa6ClReturns source of gamepad mapping. Can be used to filter \xe2\x80\xa6AmMarks the state as unchanged.CnMax chunk size in bytes Note, not all formats support this \xe2\x80\xa6CmMaximum amount of memory in bytes to use for the index of \xe2\x80\xa6CmReturn all maximum elements of an iterator, as determined \xe2\x80\xa6000ClThe biggest value a sample can have. In other words, the \xe2\x80\xa6DbReturns <code>true</code> if dropping values of this type matters.00CjDefines standalone functions that call associated methods.0CmReturn all minimum elements of an iterator, as determined \xe2\x80\xa6000DfMaps a hash to the given <code>range</code> using retried mod mapping.000BhCalculates the modular additive inverse.0BnCalculates the modular multiplicative inverse.0BbGathers the sign bit of each lane.0CfCollects the sign bit of each lane into a 4-bit value.0CbFlips the bits that are set in <code>other</code>.00CiFlips the bits from the <code>[start..=end]</code> range.00CbUnsets the bits that are set in <code>mask</code>.00DgReturn the name of the controller at index <code>joystick_index</code>.DeReturn the name of the joystick at index <code>joystick_index</code>.D`&lt; length of media_types array, 0 if device cannot provide \xe2\x80\xa6BnCreate a new <code>Packet</code> from a slice.BnReturns a new <code>TimeSplitMilliNano</code>.0CjWait for a notification with an owned <code>Future</code>.AkNotifies all waiting tasks.DaReturns the current timestamp as an <code>f64</code> value in \xe2\x80\xa600CfReturns the number of modulators that currently exist.CiReturns the number of mixer sub-tracks that currently \xe2\x80\xa6CbReturns the number of child tracks this track has.0CkThe numerator and denominator of the delay in milliseconds.CeSets the background color to <code>DarkYellow</code>.DiExecutes function <code>f</code> just before a thread is parked (goes \xe2\x80\xa6CjExecutes function <code>f</code> before each thread stops.DaCreates an interval $(l, \xe2\x88\x9e)$ <em><code>lower..&lt;</code></em>.CnEnsures a value is in the entry by inserting the result of \xe2\x80\xa600000000ClWhether there\xe2\x80\x99s at least one set bit in common between \xe2\x80\xa600CkCalculate the region that can be copied from top to bottom.DbConverts a <code>bitmap</code> of 1-bit bits into PBM ASCII P1 \xe2\x80\xa6DfLike <code>panic</code>, but without unwinding and track_caller to \xe2\x80\xa60DhThis exists solely for the 2015 edition <code>panic!</code> macro to \xe2\x80\xa60DdReturns a parallel iterator over at most <code>chunk_size</code> \xe2\x80\xa60CjReturns a parallel iterator over the mutable pixels of \xe2\x80\xa6DbParse a civil datetime string into a <code>civil::DateTime</code>.CjRun the parser on the given string (which may be plain \xe2\x80\xa6DhParse an ISO 8601 duration string into a <code>SignedDuration</code> \xe2\x80\xa6DiLexicographically compares the elements of this <code>Iterator</code> \xe2\x80\xa6000000000000000000000CbReturns the path &amp; query components of the UriBoSet the <code>PathAndQuery</code> for this URI.BbThe origin-form component of a URICmReturns the payload associated with the panic, if it is a \xe2\x80\xa6CdReturns an exclusive reference to the front element.DaReturns a shared reference to the <code>nth</code> front element.CnConvert a mutable slice to the wrapped type into a mutable \xe2\x80\xa6BdReturns the permissions of the file.DjShuffle 128 bits of floating point data at a time from <code>$a</code> \xe2\x80\xa60CbPolls for one of the tasks in the set to complete.BfPolls for the next line in the stream.CgPolls to receive multiple messages on this channel, \xe2\x80\xa60DmSearches for the sequentially <strong>first</strong> item in the parallel \xe2\x80\xa60DlPOSIX version of <code>basename(3)</code>, defined in <code>libgen.h</code>.CcReturns the previous actual value of the parameter.CiPrint a <code>civil::DateTime</code> to the given writer.DhPrint a <code>SignedDuration</code> to the given writer using the \xe2\x80\x9c\xe2\x80\xa6ChPrint a <code>SignedDuration</code> to the given writer.CkSize of private data so that it can be allocated in the \xe2\x80\xa6nProduct stringEbReturns the size ratio between <code>Ptr::BYTES</code> and <code>BYTE_SIZE</code>.00ClAppends a new, already formatted value to the end of the \xe2\x80\xa6CgPushes an item, populated from an exact-sized iterator.0CiAdds an element to the front of the list, returning a \xe2\x80\xa6CnPrepends an element to the deque, returning a reference to \xe2\x80\xa6BmRemove an element from the back of the queue.0DkReturns an exclusive subslice starting from the given <code>start</code>\xe2\x80\xa6Amdecoder bitstream buffer sizeDeReads the exact number of bytes required to fill <code>cursor</code>.0000CiReads exactly the number of bytes required to fill be \xe2\x80\xa6ClGet the next timestamp in stream[stream_index].time_base \xe2\x80\xa6DkThis function is not supported by <code>io::Repeat</code>, because there\xe2\x80\xa6ClReads all bytes until EOF in this source, appending them \xe2\x80\xa60C`Reads all bytes from a reader into a new String.CbReads the entire contents of a file into a string.2222AnRead the response as a string.AaRead into string.CmReads all bytes from a reader into a new <code>String</code>.3DiReads the value from <code>self</code> without moving it. This leaves \xe2\x80\xa6BkReads the value from src without moving it.DhReads the value from <code>src</code> without moving it. This leaves the00CgReturns a pinned mutable reference to the inner reader.CaGet the number of receivers that currently exist.CeGet the number of receivers that currently exist, \xe2\x80\xa6BgReturns the number of active receivers.CeReturns the number of receivers that currently exist.CnReducing multiply.  Returns the product of the elements of \xe2\x80\xa6CkReturns the product of the elements of the vector, with \xe2\x80\xa60100100100100100AmRefreshes RAM and SWAP usage.AlRegister a custom SDL event.CmDevice Release Number in binary-coded decimal, also known \xe2\x80\xa6CmRemoves the current element from the <code>LinkedList</code>.ClRemoves a directory at this path, after removing all its \xe2\x80\xa60DjRemove all matches of pattern <code>pat</code> in the <code>String</code>.CkRemoves a key-value pair and optionally rebuilds the table.BbRenders a number of silent frames.DjAppends possibly empty data to <code>dst</code> to replace the current \xe2\x80\xa6CmReturns the number of bytes required to store an image of \xe2\x80\xa6DkThis function acts identically to <code>reserve</code>, but accepts the \xe2\x80\xa6AmReset the stream to the start0ClConverts the current stack to a different capacity while \xe2\x80\xa60CkResize this image using the specified filter algorithm. \xe2\x80\xa6CmWhether to resolve the target host locally before calling \xe2\x80\xa6CkWhether to resolve target locally before calling the proxy.EgApply the function <code>f</code> on the value in the <code>Right</code> variant if \xe2\x80\xa6EmApply the function <code>f</code> on the value <code>b</code> in <code>Right(b)</code> or \xe2\x80\xa6DjThe nearest integer to <code>self</code>, rounding ties to the nearest \xe2\x80\xa60CmReturns the nearest integer, rounding ties to the nearest \xe2\x80\xa6CcConvert a byte count to a word count (rounding up).00CgReturns the flavor of the current <code>Runtime</code>.EnAsserts the <code>state</code> equals <code>expected</code> and returns <code>self</code>, \xe2\x80\xa6FeAsserts the <code>state</code> is <code>Ok</code> and returns <code>self</code>, otherwise panics \xe2\x80\xa6DiUnwraps the contained <code>Ok(state)</code> or panics with the given \xe2\x80\xa6DkUnwraps the contained <code>Some(state)</code> or panics with the given \xe2\x80\xa6CgUnwraps the contained <code>Ok(state)</code> or panics.CiUnwraps the contained <code>Some(state)</code> or panics.ClSample from an image using coordinates in [0, 1], taking \xe2\x80\xa6CoSaturating absolute value, see <code>i8::saturating_abs</code>.D`Saturating absolute value, see <code>i16::saturating_abs</code>.D`Saturating absolute value, see <code>i64::saturating_abs</code>.D`Saturating absolute value, see <code>i32::saturating_abs</code>.DaSaturating absolute value, see <code>i128::saturating_abs</code>.DbSaturating absolute value, see <code>isize::saturating_abs</code>.ClLanewise saturating absolute value, implemented in Rust. \xe2\x80\xa600000ChAdds an unsigned integer to a non-zero value. Return \xe2\x80\xa600000CjAdd two time deltas together. If overflow occurs, then \xe2\x80\xa6CnSaturating integer addition. Computes <code>self + rhs</code>.00000000000EbSaturating <code>Duration</code> addition. Computes <code>self + other</code>, \xe2\x80\xa6CjComputes <code>a + b</code>, saturating at numeric bounds.AhLanewise saturating add.00010000CjAdd two signed durations together. If overflow occurs, \xe2\x80\xa6DeThis routine is identical to <code>Timestamp::checked_add</code>, \xe2\x80\xa6DhThis routine is identical to <code>Zoned::checked_add</code>, except theDkThis routine is identical to <code>Date::checked_add</code>, except the \xe2\x80\xa6DkThis routine is identical to <code>DateTime::checked_add</code>, except \xe2\x80\xa6DkThis routine is identical to <code>Time::checked_add</code>, except the \xe2\x80\xa6DiThis routine is identical to <code>Offset::checked_add</code>, except \xe2\x80\xa687777CeMultiplies two non-zero integers together. Return \xe2\x80\xa600000000000BgMultiply this time delta by an integer.EhSaturating <code>Duration</code> multiplication. Computes <code>self * other</code>, \xe2\x80\xa6CgMultiply this signed duration by an integer. If the \xe2\x80\xa6CoSaturating negation. Computes <code>-self</code>, returning \xe2\x80\xa600000CiLanewise saturating negation, implemented in Rust. As \xe2\x80\xa600000CdRaise non-zero value to an integer power. Return \xe2\x80\xa600000000000CjAdd two time deltas together. If overflow occurs, then \xe2\x80\xa6DaSaturating integer substration. Computes <code>self - rhs</code>.00000000000EeSaturating <code>Duration</code> subtraction. Computes <code>self - other</code>, \xe2\x80\xa6CjComputes <code>a - b</code>, saturating at numeric bounds.AmLanewise saturating subtract.00010000CjAdd two signed durations together. If overflow occurs, \xe2\x80\xa6DgThis routine is identical to <code>Timestamp::saturating_add</code> \xe2\x80\xa6DhThis routine is identical to <code>Zoned::saturating_add</code> with \xe2\x80\xa6DkThis routine is identical to <code>Date::saturating_add</code> with the \xe2\x80\xa6DkThis routine is identical to <code>DateTime::saturating_add</code> with \xe2\x80\xa6DkThis routine is identical to <code>Time::saturating_add</code> with the \xe2\x80\xa6DiThis routine is identical to <code>Offset::saturating_add</code> with \xe2\x80\xa687777Ck&lt; sws options to use for the auto-inserted scale filtersCkA string containing a colon-separated list of key=value \xe2\x80\xa6DhScans up-to <code>scan_len</code> bytes from the stream until a byte \xe2\x80\xa6ClWrites values from a SIMD vector to multiple potentially \xe2\x80\xa6CjReturns the window\xe2\x80\x99s distance to each screen edge in \xe2\x80\xa6ClSequence three parsers, only returning the values of the \xe2\x80\xa6BdSerialize a <code>bool</code> value.0AfSerialize a character.0BeSerialize an <code>i128</code> value.0BdSerialize a <code>None</code> value.0BgSerialize a <code>Some(T)</code> value.0BdSerialize a <code>u128</code> value.0BbSerialize a <code>()</code> value.0Dk<strong>Sets</strong> the attribute: the minimum number of bits for the \xe2\x80\xa6CmThe function will fail if the blend mode is not supported \xe2\x80\xa6CmSets the blend mode used for drawing operations (Fill and \xe2\x80\xa60CnSet the brightness (gamma multiplier) for a given window\xe2\x80\x99\xe2\x80\xa6Dj<strong>Sets</strong> the attribute: the minimum number of bits in the \xe2\x80\xa6CnSets the color used for drawing operations (Rect, Line and \xe2\x80\xa6AjSets the full screen mode.BhSets new fullscreen type for the window.ChSet the gamma ramp for the display that owns a given \xe2\x80\xa68CbModifies the amplification factor logarithmically.CcMouse grab confines the mouse cursor to the window.CjConfines the cursor to the specified area of a window. \xe2\x80\xa6CnSets the angle normalized to the non-inclusive range -1 to \xe2\x80\xa6C`Sets the angle normalized (no-op for integer \xe2\x80\xa60BjSets the scale mode for use when rendered.AnSplats the value to all lanes.0CmSplat an <code>f32</code> arg into an <code>m256</code> lane.0CiReturns the end byte offset of the first match in the \xe2\x80\xa6CdDetermines if rebuilding the table would improve \xe2\x80\xa6CkDisplay backtrace if available when using pretty output \xe2\x80\xa6BhLogical \xe2\x80\x9cors\xe2\x80\x9d all elements together.00ChComputes the sine and the cosine using Taylor series \xe2\x80\xa6CgReturns the width and height of the given text when \xe2\x80\xa6DeCreates an iterator that skips elements from <em>anywhere</em> in \xe2\x80\xa60ClSkips to, and gets an immutable reference to the latest, \xe2\x80\xa6DfViews a slice of ASCII characters as a slice of <code>u8</code> bytes.GfConverts <code>&amp;[T]</code> to <code>Vec&lt;U&gt;</code> when <code>U</code> implements <code>From&lt;T&gt;</code>.0CiSort Key/Value-pairs of the table using the using the \xe2\x80\xa60ChSets the maximum number of sounds that can be played \xe2\x80\xa600CfReturns the maximum number of sounds that can play \xe2\x80\xa600DeFormat a <code>Span</code> into a string using the \xe2\x80\x9cfriendly\xe2\x80\x9d \xe2\x80\xa6BiFormat a <code>Span</code> into a string.CjRuns the provided function on an executor dedicated to \xe2\x80\xa60CkRuns the provided closure on a thread where blocking is \xe2\x80\xa6CjSpawn the blocking code on the blocking threadpool and \xe2\x80\xa6DkSpawn the provided task on the provided <code>LocalSet</code> and store \xe2\x80\xa6CgSignals the processor that it is inside a busy-wait \xe2\x80\xa600DjSplits off a \xe2\x80\x9cleft\xe2\x80\x9d consumer and returns it. The <code>self</code> \xe2\x80\xa6DlDecomposes a number of <code>seconds</code> in <code>{ h, m, s, ms }</code>.CgRemove an element from the back of the stack (calls \xe2\x80\xa600BnSets where in the sound playback should start.0BiWhere in the sound playback should start.110CdSets the phase the LFO should start at (in radians).BoThe phase the LFO should start at (in radians).ChIf the process was stopped by a signal, returns that \xe2\x80\xa60C`Called when deserializing a struct-like variant.Ak&lt; default subtitle codecCiForced subtitle codec. This allows forcing a specific \xe2\x80\xa6DiConvenience macro for declaring a probe <code>Descriptor</code> for a \xe2\x80\xa6AnSet a customized remix matrix.CmAllocate and return an SwsContext. You need it to perform \xe2\x80\xa6CeIndicate that a horizontal slice of input data is \xe2\x80\xa6Bi<code>tailcall-chunk</code> modificationsDeCreates an iterator that takes elements from <em>anywhere</em> in \xe2\x80\xa60DaReturns the first <code>n</code> elements of the exclusive slice.ClReturns the slice omitting the last <code>n</code> elements.CjReturn the remainder of the original slice that is not \xe2\x80\xa60DjReturn an iterator adaptor that borrows from a <code>Clone</code>-able \xe2\x80\xa6000ClSet the renderer to support rendering to a texture. This \xe2\x80\xa6BiTests the value of the specified element.CaGet OpenGL\xe2\x80\x99s GLuint texture ID or metals ObjcId000ChUpdate whole texture content bytes should be width * \xe2\x80\xa60000ChSets a function used to generate the name of threads \xe2\x80\xa6C`Format a <code>civil::Time</code> into a string.AkTimeout for the entire callDdHelper to get a scratch buffer (<code>tmp</code>) and the output \xe2\x80\xa6CnCopies the buffer elements to a newly allocated vector. If \xe2\x80\xa6DfConverts this address to an <code>IPv4</code> address if it\xe2\x80\x99s an \xe2\x80\xa6DbConverts this address to an IPv4-mapped <code>IPv6</code> address.DjConverts a <code>EventButtonState</code> into a <code>WebEventKind</code>.CkReturns a copy of this image as a <code>LumaA</code> image.CmReturns the offset information corresponding to the given \xe2\x80\xa6DeConvert to a packed <code>u32</code> in <code>0xRRGGBB</code> format.EdConvert to a packed <code>u32</code> in <code>0xRRGGBB</code> format, discarding \xe2\x80\xa610EcReturns a (3) tuple if the 3 fields from <code>ms</code> to <code>ns</code> are \xe2\x80\xa6CdReturns the total duration of this source, if known.0C`Returns the total duration of this audio source.BkReturns the total number of received bytes.CnStart tracking the elapsed duration since the start of the \xe2\x80\xa60BkWhether the array will use a trailing commaCfReturns the number of trailing zeros in the binary \xe2\x80\xa600000000000000000000000000000000000000000000000ElReads <code>src</code> as having type <code>&amp;Dst</code> without moving the contained \xe2\x80\xa6FeInterprets <code>src</code> as having type <code>&amp;Dst</code>, and then reads <code>src</code> \xe2\x80\xa600DfShortens the deque, keeping the last <code>len</code> elements and \xe2\x80\xa6DhTries to pre-allocate space for an object in this <code>Bump</code>, \xe2\x80\xa6ClMutably borrows the wrapped value, returning an error if \xe2\x80\xa6DkAttempts to mutably borrow the value <code>T</code>, returning an error \xe2\x80\xa60EnTry to convert <code>&amp;[A]</code> into <code>&amp;[B]</code> (possibly with a change in \xe2\x80\xa60CaFill <code>dest</code> entirely with random data.ClRe-interprets <code>&amp;[u8]</code> as <code>&amp;T</code>.0ClTries to convert a <code>char8</code> to <code>char7</code>.CeTries to consume the lock and return the inner value.ClConsumes the join error, returning the object with which \xe2\x80\xa6DjAttempts to acquire the lock, and returns <code>TryLockError</code> if \xe2\x80\xa6CkConstructs a new box with uninitialized contents on the \xe2\x80\xa6DkConstructs a new <code>Rc</code> with uninitialized contents, returning \xe2\x80\xa61DbConstructs a new <code>Arc</code> with uninitialized contents, \xe2\x80\xa6DkConstructs a new <code>Box</code> with uninitialized contents, with the \xe2\x80\xa6DjConstructs a new <code>Rc</code> with uninitialized contents, with the \xe2\x80\xa61DkConstructs a new <code>Arc</code> with uninitialized contents, with the \xe2\x80\xa6DeAttempts to acquire this <code>RwLock</code> with shared read access.DoAllocates a <code>Box&lt;T&gt;</code> with all of the contents being zeroed \xe2\x80\xa60EaAllocates a <code>Vec&lt;T&gt;</code> of length and capacity exactly equal to \xe2\x80\xa60EhReturns a deterministic hash of the <code>TypeId</code> of <code>Self</code> using a \xe2\x80\xa600EdCreates an interval $(-\xe2\x88\x9e, u)$ <code>..=upper</code> <code>RangeToInclusive</code>.BnSets the underline color to <code>Blue</code>.BnSets the underline color to <code>Cyan</code>.BnSets the underline color to <code>Grey</code>.BeUnpack and interleave the high lanes.000AlUnregisters distance effect.AlUnregisters position effect.DkUnwraps the inner <code>Option</code>, returning the contained value or \xe2\x80\xa6EcUnwraps the inner <code>Result</code>, returning the <code>Ok</code> value or a \xe2\x80\xa6DgReturns the contained <code>Some</code> value or computes it from a \xe2\x80\xa6DeReturns the contained <code>Ok</code> value or computes it from a \xe2\x80\xa6EnAsserts the <code>value</code> equals <code>expected</code> and returns <code>self</code>, \xe2\x80\xa6FeAsserts the <code>value</code> is <code>Ok</code> and returns <code>self</code>, otherwise panics \xe2\x80\xa6DkUnwraps the contained <code>Some(value)</code> or panics with the given \xe2\x80\xa6CiUnwraps the contained <code>Some(value)</code> or panics.CgUnwraps the contained <code>Ok(value)</code> or panics.BcReturns the service version string.00CkVertex buffers. Data contained in the buffer must match \xe2\x80\xa60CgThe default is Top. This option does nothing if the \xe2\x80\xa6BmForced video codec_id. Demuxing: Set by user.BlReturns the virtual memory usage (in bytes).CmThe input contains a byte array and ownership of the byte \xe2\x80\xa6CjPerforms a volatile store to the <code>dst</code> pointer.00AlAdjusts the volume of audio.DhSets the value of the \xe2\x80\x9ccpu_usage\xe2\x80\x9d refresh kind to <code>true</code>.DhReturns a version of the angle with the given <code>direction</code> \xe2\x80\xa6DeReturns a version of the angle with the given <code>direction</code>.0EcCreates an owned <code>PathBuf</code> like <code>self</code> but with the given \xe2\x80\xa6BgAdd a file extension <code>Hint</code>.EhCreates an owned <code>PathBuf</code> like <code>self</code> but with the given file \xe2\x80\xa6DhSets the value of the \xe2\x80\x9cfrequency\xe2\x80\x9d refresh kind to <code>true</code>.DgCreates an empty <code>HashMap</code> which will use the given hash \xe2\x80\xa6CiCreates a new empty hash set which will use the given \xe2\x80\xa6BfSets a mime type hint for the decoder.DaCreate a new <code>Bump</code> that enforces a minimum alignment.BmCreate a monocolor image from a single pixel.CiSets the value of the \xe2\x80\x9cprocesses\xe2\x80\x9d refresh kind to \xe2\x80\xa6BoSets the threshold level where limiting begins.BbProvide the <code>TimeBase</code>.CgReturn a new zoned datetime with precisely the same \xe2\x80\xa6DfReturns a new <code>ExampleEnumSet</code> with none of the fields set.DeReturns a new <code>ExampleBitfieldCustom</code> with none of the \xe2\x80\xa6DgReturns a new <code>ExampleBitfield</code> with none of the fields set.DfSets the value of the \xe2\x80\x9cmemory\xe2\x80\x9d refresh kind to <code>false</code>.DeSets the value of the \xe2\x80\x9cmemory\xe2\x80\x9d refresh kind to <code>None</code>.DdSets the number of worker threads the <code>Runtime</code> will use.ClConvert a mutable slice to the inner type into a mutable \xe2\x80\xa6DgLike <code>write</code>, except that it writes into a slice of buffers.DgLike <code>write</code>, except that it writes from a slice of buffers.00000DjThis is an implementation detail of <code>crate::ptr::write</code> and \xe2\x80\xa600CkPerforms a volatile write of a memory location with the \xe2\x80\xa6DhPerforms a volatile write of a memory location with <code>src</code> \xe2\x80\xa6111CgReturns a pinned mutable reference to the inner writer.Bf&lt; Wayland xdg positioner, for popup0CkAdvertises which content encoding the client is able to \xe2\x80\xa6CdAdvertises which languages the client is able to \xe2\x80\xa6Ad&lt; Not part of ABICm&lt; also ITU-R BT1361 / IEC 61966-2-4 / SMPTE RP 177 Annex BD`&lt; also ITU-R BT1361 / IEC 61966-2-4 xvYCC709 / derived in \xe2\x80\xa6Ak&lt; ITU-R BT.2100-0, ICtCpCi&lt; used by Dirac / VC-2 and H.264 FRext, see ITU-T SG16Af&lt; also ITU-R BT1361CiThis structure describes the bitrate properties of an \xe2\x80\xa6ChAn AVChannelCustom defines a single channel within a \xe2\x80\xa6CjAn AVChannelLayout holds information about the channel \xe2\x80\xa6BgPrivate context used for internal data.Be&lt; discard all bidirectional framesAgAn instance of a filterCjFormat I/O context. New fields can be added to the end \xe2\x80\xa6BkStructure to hold side data for an AVFrame.CnCallback for checking whether to abort blocking functions. \xe2\x80\xa6CcChannel contains data, but its position is unknown.Cn&lt; packed BGR 8:8:8, 32bpp, XBGRXBGR\xe2\x80\xa6   X=unused/undefinedCn&lt; packed RGB 8:8:8, 32bpp, XRGBXRGB\xe2\x80\xa6   X=unused/undefinedBl&lt; packed ABGR 8:8:8:8, 32bpp, ABGRABGR\xe2\x80\xa6Bl&lt; packed ARGB 8:8:8:8, 32bpp, ARGBARGB\xe2\x80\xa6Cn&lt; packed BGR 8:8:8, 32bpp, BGRXBGRX\xe2\x80\xa6   X=unused/undefinedDa&lt; packed RGB 1:2:1 bitstream,  4bpp, (msb)1B 2G 1R(lsb), a \xe2\x80\xa6C`&lt; packed RGB 3:3:2,  8bpp, (msb)2B 3G 3R(lsb)Bl&lt; packed BGRA 8:8:8:8, 32bpp, BGRABGRA\xe2\x80\xa6CmHW acceleration through CUDA. data[i] contain CUdeviceptr \xe2\x80\xa6Ak&lt; planar GBR 4:4:4 24bppCnHW acceleration though MMAL, data[3] contains a pointer to \xe2\x80\xa6Co&lt; planar YUV 4:2:0, 12bpp, 1 plane for Y and 1 plane for \xe2\x80\xa6Dc&lt; interleaved chroma YUV 4:2:2, 16bpp, (1 Cr &amp; Cb sample \xe2\x80\xa6Bl&lt; as above, but U and V bytes are swappedCo&lt; planar YUV 4:4:4, 24bpp, 1 plane for Y and 1 plane for \xe2\x80\xa61Bi&lt; 8 bits with AV_PIX_FMT_RGB32 paletteCn&lt; packed RGB 8:8:8, 32bpp, RGBXRGBX\xe2\x80\xa6   X=unused/undefinedDa&lt; packed RGB 1:2:1 bitstream,  4bpp, (msb)1R 2G 1B(lsb), a \xe2\x80\xa6C`&lt; packed RGB 3:3:2,  8bpp, (msb)2R 3G 3B(lsb)Bl&lt; packed RGBA 8:8:8:8, 32bpp, RGBARGBA\xe2\x80\xa6Bj&lt; packed VUYA 4:4:4, 32bpp, VUYAVUYA\xe2\x80\xa6Cn&lt; packed VUYX 4:4:4, 32bpp, Variant of VUYA where alpha \xe2\x80\xa6Ci&lt; XVideo Motion Acceleration via common packet passingCnActive Format Description data consisting of a single byte \xe2\x80\xa6CiWhich audio format changes are allowed when opening a \xe2\x80\xa6BiA time in the past that already happened.BiA possibly ambiguous <code>Offset</code>.DkHeader produced by a <code>pam</code> file (\xe2\x80\x9cPortable Arbitrary Map\xe2\x80\x9d\xe2\x80\xa6CdAn extension trait which adds utility methods to \xe2\x80\xa6ClA marker trait for primitive types which can be modified \xe2\x80\xa600BcPossible config values for headers.CaCode to set the background color to bright black.CaCode to set the background color to bright green.CaCode to set the background color to bright white.AcA background color.Cc<code>std</code> The current status of a backtrace.0ClThe current status of a backtrace, indicating whether it \xe2\x80\xa6Ef\xf0\x9f\xa5\xa1 <code>Base32</code> <code>Crockford</code> encoding. Case-insensitive, remaps \xe2\x80\xa60AjSize of public Ciphertext.AhCiphertext size (bytes).00BaApple Lossless Audio Codec (ALAC)BgAC-3, E-AC-3, Dolby Digital (ATSC A/52)B`Free Lossless Audio Codec (FLAC)jNull codecdOpusCnWhether the color has an alpha component are integer types \xe2\x80\xa60CdWhether the color space is linear (as opposed to \xe2\x80\xa60CcWhether the color uses premultiplied alpha (vs. \xe2\x80\xa60Ec<code>CodebookBuilder</code> generates a <code>Codebook</code> using a provided \xe2\x80\xa6DkA <code>CodecDescriptor</code> stores a description of a single logical \xe2\x80\xa6CmCodec parameters stored in a container format\xe2\x80\x99s headers \xe2\x80\xa6BhThe type of compression applied to data.0CnCompression level of a PNG encoder. The default setting is \xe2\x80\xa6BnThe connection was reset by the remote server.0000De64-bit data <em>value</em>, restricted to <code>Copy</code> variants.0Cf64-bit data <em>value</em>, with extra <code>V</code>.0BaA printer for RFC 2822 datetimes.BaA printer for Temporal datetimes.B`Default resolver implementation.Ee<code>DeserializeSeed</code> is the stateful form of the <code>Deserialize</code> \xe2\x80\xa6ChA command that disables blinking of the terminal cursor.AgDisables line wrapping.CnUsed to determine what you want to refresh specifically on \xe2\x80\xa6Da<code>DispatchFromDyn</code> is used in the implementation of \xe2\x80\xa600De\xf0\x9f\x94\x84 A mutable iterator over the elements of a <code>DstQueue</code>.0De\xf0\x9f\x94\x84 A mutable iterator over the elements of a <code>DstStack</code>.0CfSame gamepad element is referenced by axis and button.Bn\xf0\x9f\x9a\xa9 The requested element has not been found.0Cc\xf0\x9f\xaa\xaa \xf0\x9f\x9a\xa9 The requested element has not been found.1ClTypes which are safe to treat as an immutable byte slice \xe2\x80\xa6BaEnumerate the pixels of an image.AhConfigures an EQ filter.BkIterator returned for the error case of \xe2\x80\xa60DbAn example created with <code>bitfield!</code>, everything public.fU+00210000CeDescribes the result of a process after it has failedBkA deserializer holding an <code>f32</code>.BkA deserializer holding an <code>f64</code>.Dg$ 1/\\sqrt{2\xcf\x80} = 1/\\sqrt{\xcf\x84} $ (A231863) <code>\xe2\x89\x88 0.39894228\xe2\x80\xa6</code>00000k1/sqrt(2\xcf\x80)00000000000Cn$ 1/\\sqrt{\xcf\x86} = \\sqrt{\xcf\x86/\xcf\x86^2} = \\sqrt{\xcf\x86^2-2} $ (A197762) \xe2\x80\xa600000Dg$ 1/\\sqrt{\xcf\x84} = 1/\\sqrt{2\xcf\x80} $ (A231863) <code>\xe2\x89\x88 0.39894228\xe2\x80\xa6</code>00000Df$ 2/\\sqrt{\xcf\x84} = \\sqrt{2/\xcf\x80} $ (A076668) <code>\xe2\x89\x88 0.79788456\xe2\x80\xa6</code>00000AhFront left-high channel.AhFront left-wide channel.Dk<code>std</code> Options and flags which can be used to configure how a \xe2\x80\xa60De<code>std</code> Representation of the various permissions on a file.0DjA <code>FiniteBitStream</code> is a bit stream that has a known length \xe2\x80\xa6AcA foreground color.C`Internal type used by <code>from_factory</code>.Bm504 Gateway Timeout [RFC9110, Section 15.6.5]CiExternal iterator for grapheme clusters and byte offsets.fU+003E0000BdVersion of HPKE implemented. See \xe2\x80\xa6CmHorizontal alignment options for text when a max_width is \xe2\x80\xa6BaThe remote host is not reachable.0000BkA deserializer holding an <code>i16</code>.BkA deserializer holding an <code>i32</code>.BkA deserializer holding an <code>i64</code>.AfIP6 destination optionAhHop-by-hop option headerAbIP6 routing headerBoA best effort representation for image formats.ElAn iterator type over <code>InlineTable</code>\xe2\x80\x99s <code>Key</code>/<code>Value</code> pairsCkAn iterator adapter that places a separator between all \xe2\x80\xa60ClAn iterator adaptor to insert a particular value created \xe2\x80\xa6011DgConvenience methods for common usages of <code>IntoPyObject</code>. \xe2\x80\xa60DkAn error indicating invalid UTF-8 when converting a <code>CString</code>\xe2\x80\xa600000AgA filename was invalid.0000BcError when creating proxy settings.CkAn error resulting from a failed attempt to construct a \xe2\x80\xa6Db\xf0\x9f\x94\x84 <code>core</code> Represents types that can be created by \xe2\x80\xa60AhThe maximum jump offset.Bn411 Length Required [RFC9110, Section 15.5.12]CeLinux flag constants for <code>LinuxSigaction</code>.0fU+00280000CeLinearized perceptual lightness (L* in linear space).0BgContext guard for <code>LocalSet</code>BgNumber of significant digits in base 2.00000BoNumber of significant digits in base 2. Use \xe2\x80\xa600000ClGiven a 16-byte salt (22 characters encoded) and 32-byte \xe2\x80\xa60AnControls the main mixer track.BhA deserializer that iterates over a map.BbBuilder for <code>Metadata</code>.E`<code>MetadataBuilder</code> is the builder for <code>Metadata</code> revisions.Dd<code>MetadataOptions</code> is a common set of options that all \xe2\x80\xa6AmA collection of output ports.Be<code>miniquad</code>\xe2\x80\x99s UI Service.0Ci\xf0\x9d\x9f\x99 \xf0\x9f\x9a\xa9 The provided values are not compatible in size.BoThe provided values are not compatible in size.010DfGenerates a fake <code>Info</code> with arbitrary data. Useful for \xe2\x80\xa6DfRepresents a modifier key (as part of <code>KeyCode::Modifier</code>).Bm501 Not Implemented [RFC9110, Section 15.6.2]Ck\xf0\x9d\x9f\x99 \xe2\x9a\x97\xef\xb8\x8f A signed integer that is known not to equal \xe2\x80\xa60Cn\xf0\x9d\x9f\x99 \xe2\x9a\x97\xef\xb8\x8f An unsigned integer that is known not to equal \xe2\x80\xa60Bg\xf0\x9d\x9f\x99 \xf0\x9f\x9a\xa9 A non-zero value is required.AmA non-zero value is required.010ChSwitches the text back to normal intensity (no bold, \xe2\x80\xa6D`\xf0\x9f\x96\xb9 The type returned from <code>ExtOption::fmt_or_else</code>.0BmAn owned handle to a held <code>Mutex</code>.Bm206 Partial Content [RFC9110, Section 15.3.7]CjAllocations constrained to zones which allow long term \xe2\x80\xa6BbCoredumps should ignore this task.DhThis thread called <code>freeze_processes()</code> and should not be \xe2\x80\xa6CiAssociates a specific cryptographic public key with a \xe2\x80\xa6BhThe size of a public key used in X25519.B`Size of public EncapsulationKey.Df<code>core</code> A marker trait which represents \xe2\x80\x9cpanic safe\xe2\x80\x9d \xe2\x80\xa60Df\xf0\x9d\x90\x93\xf0\x9d\x9f\x99\xf0\x9f\x9a\xa9 <code>core</code> An error which can be returned when \xe2\x80\xa60CdAn error which can be returned when parsing a float.00DhThe type returned by <code>from_str</code> when the string doesn\xe2\x80\x99t \xe2\x80\xa6CaAn error occurred when starting the audio stream.BlThe display is in portrait mode, upside downCmA structure wrapping a Windows path prefix as well as its \xe2\x80\xa6Df\xe2\x9a\x96\xef\xb8\x8f <code>std</code> The status code the process returns to its \xe2\x80\xa60BcProcessor Serial Number (LEAF=0x3).CkRepresents Python\xe2\x80\x99s <code>BaseException</code> exception.CiThis variant corresponds with <code>METH_FASTCALL</code>.CcStructure representing a <code>datetime.date</code>CdStructure representing a <code>datetime.time</code>.CkRepresents Python\xe2\x80\x99s <code>FutureWarning</code> exception.CkRepresents Python\xe2\x80\x99s <code>GeneratorExit</code> exception.CkRepresents Python\xe2\x80\x99s <code>ImportWarning</code> exception.AoMacro, trading safety for speedCjMacro, <em>only</em> to be used to fill in brand new listsCjImplementation of functionality for <code>PyModule</code>.0CkRepresents Python\xe2\x80\x99s <code>OverflowError</code> exception.CkRepresents Python\xe2\x80\x99s <code>StopIteration</code> exception.CjImplementation of functionality for <code>PyString</code>.0CkRepresents Python\xe2\x80\x99s <code>SyntaxWarning</code> exception.DeError returned by a <code>__traverse__</code> visitor implementation.000DiThe <code>QueryDescriptor</code> trait indicates that the implementer \xe2\x80\xa6CiAn iterator over a slice in (non-overlapping) mutable \xe2\x80\xa600CnParallel iterator over mutable non-overlapping chunks of a \xe2\x80\xa611CnGoverns which referrer information should be included with \xe2\x80\xa6Bm408 Request Timeout [RFC9110, Section 15.5.9]CgResolve path without escaping starting dir (openat2()).BmTreat starting dir as root during resolution.BmDon\xe2\x80\x99t cross mount points during resolution.DgA builder for computing where in a <code>HashMap</code> a key-value \xe2\x80\xa6DiA <code>RawSampleBuffer</code>, is a byte-oriented sample buffer. All \xe2\x80\xa6CdManages what keeps a <code>SDL_Renderer</code> aliveCkA command that restores the saved terminal cursor position.BhA reverse searcher for a string pattern.0000CmSubtracts source from destination. Source and destination \xe2\x80\xa60Da<code>RotozoomSurface</code> for work with rust-sdl2 Surface typeDj<code>std</code> RAII structure used to release the shared read access \xe2\x80\xa60CnRAII structure used to release the shared read access of a \xe2\x80\xa6000CjCreate an SDL_PixelFormat structure corresponding to a \xe2\x80\xa6Aj\\brief Audio format flags.BkBitmap pixel order, high bit -&gt; low bit.Cg\\brief The normalized factor used to multiply pixel \xe2\x80\xa6Bc\\brief Fields shared by every eventAcCreate a new mutex.AmDestroy a condition variable.Ca\\brief  The structure that defines a display modeCnA function pointer used for callbacks that watch the event \xe2\x80\xa6CcRequest a window to demand attention from the user.CfClear events of a range of types from the event queue.BoFree a palette created with SDL_AllocPalette().AdFree an RGB surface.CeGet the directory where the application was run from.BfGet the number of CPU cores available.BiGet the clipping rectangle for a surface.CdGet the color key (transparent pixel) for a surface.CkGet the last error message that was set for the current \xe2\x80\xa6CdGet the current key modifier state for the keyboard.AmGet the name of the platform.CiGet the user-and-app-specific path where files can be \xe2\x80\xa6BjGet the renderer associated with a window.ClGet the code revision of SDL that is linked against your \xe2\x80\xa6CcGet the thread identifier for the specified thread.AoGet the numeric ID of a window.C`Close a haptic device previously opened with \xe2\x80\xa6BaGet the index of a haptic device.AfPause a haptic device.CkGet the haptic device\xe2\x80\x99s supported features in bitwise \xe2\x80\xa6BkReturns whether the surface has a color keyAm&lt; Joystick button releasedCg\\brief Joystick hat position change event structure \xe2\x80\xa6BjLoad all the data from an SDL data stream.CcLocking for multi-threaded access to the sensor APICcSet up a surface for directly accessing the pixels.DkLock a portion of the texture for <strong>write-only</strong> pixel access.Bd\\brief The predefined log categoriesBmLog a message with SDL_LOG_PRIORITY_CRITICAL.CgLog a message with the specified category and priority.Bd\\brief The predefined log prioritiesA`&lt; Mouse movedBoPacked component order, high bit -&gt; low bit.Ce\\note Everything in the pixel format structure is \xe2\x80\xa6CkRaise a window above other windows and set the input focus.BkRemove a timer created with SDL_AddTimer().CjClear the current rendering target with the drawing color.CjCopy a portion of the texture to the current rendering \xe2\x80\xa6CmForce the rendering context to flush any pending commands \xe2\x80\xa6n&lt; GyroscopeBmReallocate memory obtained from SDL_SIMDAllocCgClose a sensor previously opened with SDL_SensorOpen().Bn\\brief Sensor event structure (event.sensor.*)BiSet the clipping rectangle for a surface.CcSet the color key (transparent pixel) in a surface.CdSet the current key modifier state for the keyboard.CiPerform a fast, low quality, stretch blit between two \xe2\x80\xa6Bh&lt; Keyboard text editing (composition)CjThis function is a legacy means of unlocking the audio \xe2\x80\xa6AaUnlock the mutex.Ah&lt; Window state changeCf\\brief Window state change event data (event.window.*)Al\\brief The flags on a windowC`\\brief  A handle representing an open HID deviceBhThe size of a shared key used in X25519.ClMatches when a character position in the needle is equal \xe2\x80\xa6Ao&lt; A bitmap, pict will be setAb&lt; SoX ResamplerAlA permit from the semaphore.AgControls a mixer track.BmA deserializer that iterates over a sequence.DhType returned from <code>serialize_struct</code> for serializing the \xe2\x80\xa6ChReturned from <code>Serializer::serialize_struct</code>.1CjAn infinite source that produces one of a selection of \xe2\x80\xa6BdA Unix socket Ancillary data struct.CfCreated with the method <code>split_terminator</code>.00CdParallel iterator over substrings separated by a \xe2\x80\xa611CkAn iterator over the non-whitespace substrings of a string,00CiParallel iterator over substrings separated by whitespace11C`A piece of audio loaded into memory all at once.AkSee <code>StrContext</code>BoA deserializer holding a <code>&amp;str</code>.CmMarks the input as being the complete buffer or a partial \xe2\x80\xa6fU+00160000Ed\xf0\x9f\x95\x98 \xf0\x9f\x9a\xa9 Returned from the <code>duration_since</code> and <code>elapsed</code> \xe2\x80\xa60EcAn error returned from the <code>duration_since</code> and <code>elapsed</code> \xe2\x80\xa6AhTop front-right channel.AhTop rear-centre channel.DeA future that sets a value <code>T</code> of a task local for the \xe2\x80\xa6ChRepresents standard time granularities from years to \xe2\x80\xa60CdAn iterator over periodic timestamps, created by \xe2\x80\xa6DeError returned from the <code>Semaphore::try_acquire</code> function.DgError returned by <code>try_current</code> when no Runtime has been \xe2\x80\xa6Dj\xf0\x9f\x9a\xa9 <code>core</code> The error type returned when a checked integral \xe2\x80\xa60ChThe error type returned when a checked integral type \xe2\x80\xa600CdThe error type for <code>try_reserve</code> methods.0000CmAn exclusive reference to an element of a <code>Tuple</code>.0CiA shared reference to an element of a <code>Tuple</code>.0BjA deserializer holding a <code>u16</code>.BjA deserializer holding a <code>u32</code>.BjA deserializer holding a <code>u64</code>.DjThe version of Unicode that the Unicode parts of <code>char</code> and \xe2\x80\xa60BoThe version of Unicode that this version of \xe2\x80\xa6CmThe version of Unicode that this version of unicode-width \xe2\x80\xa62CgExternal iterator for a string\xe2\x80\x99s sentence boundaries.CmSend values to the associated <code>UnboundedReceiver</code>.CkMethods for determining displayed width of Unicode strings.BnCould not determine the duration of the audio.AiAn unsigned integer type.Ca<code>None</code> could not be serialized to TOMLBdType could not be serialized to TOMLBoAn unwind action that terminates the execution.00AnSerialization for TOML values.CiThe sound is paused, but is schedule to resume in the \xe2\x80\xa6CiThe track is paused, but is schedule to resume in the \xe2\x80\xa6ChParallelIterator for arbitrary tree-shaped patterns. \xe2\x80\xa6CjDistinguishes the role of a component in wavelet analysis.0AhA web API Pointer Event.0BmAn unending iterator of the days of the week.ChAn unending iterator of the days of the week in reverse.Ci\\brief An enum denoting the specific type of contents \xe2\x80\xa6CkIndicates whether or not a browser should be allowed to \xe2\x80\xa6CgOptions for <code>Timestamp::checked_add</code> and \xe2\x80\xa6DdOptions for <code>Zoned::since</code> and <code>Zoned::until</code>.DdThe <code>_MM_CMPINT_ENUM</code> type used to specify comparison \xe2\x80\xa600dTrue00BhSee <code>_MM_GET_EXCEPTION_STATE</code>00Bground up and do not suppress exceptions00Boround to nearest and do not suppress exceptions00Cduse MXCSR.RC and do not suppress exceptions; see \xe2\x80\xa600AkSee <code>_mm_setcsr</code>00BgString contains signed 8-bit characters00BjString contains unsigned 16-bit characters00ClString contains unsigned 8-bit characters <em>(Default)</em>00C`<strong>Mask only</strong>: return the byte mask00222BaTransaction successfully started.00FdReturns the highest-supported <code>leaf</code> (<code>EAX</code>) and sub-leaf (<code>ECX</code>\xe2\x80\xa600CkShift 8-bit mask a left by count bits while shifting in \xe2\x80\xa600ClShift 8-bit mask a right by count bits while shifting in \xe2\x80\xa600CnCompute the bitwise AND of 8-bit masks a and b, and if the \xe2\x80\xa600DhComputes the absolute values of packed 8-bit integers in <code>a</code>.00D`Adds packed 8-bit integers in <code>a</code> and <code>b</code>.00DmAverages packed unsigned 8-bit integers in <code>a</code> and <code>b</code>.00CjBlends packed double-precision (64-bit) floating-point \xe2\x80\xa600CjBlends packed single-precision (32-bit) floating-point \xe2\x80\xa600CgMultiply packed complex numbers in a by the complex \xe2\x80\xa600CkCompute the complex conjugates of complex numbers in a, \xe2\x80\xa600CkConvert packed double-precision (64-bit) floating-point \xe2\x80\xa600ClConverts packed double-precision (64-bit) floating-point \xe2\x80\xa600CiConvert packed half-precision (16-bit) floating-point \xe2\x80\xa600CnConverts the 8 x 16-bit half-precision float values in the \xe2\x80\xa600ClConverts packed single-precision (32-bit) floating-point \xe2\x80\xa600CnConverts the 8 x 32-bit float values in the 256-bit vector \xe2\x80\xa600CjRounds packed double-precision (64-bit) floating point \xe2\x80\xa600CjRounds packed single-precision (32-bit) floating point \xe2\x80\xa600CnMultiplies packed double-precision (64-bit) floating-point \xe2\x80\xa600CjMultiply packed half-precision (16-bit) floating-point \xe2\x80\xa600CnMultiplies packed single-precision (32-bit) floating-point \xe2\x80\xa600222111000CmMultiply packed complex numbers in a and b, and store the \xe2\x80\xa600CiLoads 256-bits (composed of 4 packed double-precision \xe2\x80\xa600CgLoad 256-bits (composed of 16 packed half-precision \xe2\x80\xa600CiLoads 256-bits (composed of 8 packed single-precision \xe2\x80\xa600EhCompares packed 8-bit integers in <code>a</code> and <code>b</code>, and returns the \xe2\x80\xa600EeCompares packed unsigned 8-bit integers in <code>a</code> and <code>b</code>, and \xe2\x80\xa600111000CmCompute the bitwise OR of packed 32-bit integers in a and \xe2\x80\xa600CmCompute the bitwise OR of packed 64-bit integers in a and \xe2\x80\xa600CmComputes the bitwise OR of 256 bits (representing integer \xe2\x80\xa600CiCalculate the max, min, absolute max, or absolute min \xe2\x80\xa600000C`Compute the approximate reciprocal of packed \xe2\x80\xa600000???>>>ClCompute the approximate reciprocal square root of packed \xe2\x80\xa600CmComputes the approximate reciprocal square root of packed \xe2\x80\xa600CnComputes the absolute differences of packed unsigned 8-bit \xe2\x80\xa600CjSets packed 8-bit integers in returned vector with the \xe2\x80\xa600ChSets packed __m256 returned vector with the supplied \xe2\x80\xa600CjStores 256-bits (composed of 4 packed double-precision \xe2\x80\xa600ChStore 256-bits (composed of 16 packed half-precision \xe2\x80\xa600CjStores 256-bits (composed of 8 packed single-precision \xe2\x80\xa600DfSubtract packed 8-bit integers in <code>b</code> from packed 8-bit \xe2\x80\xa600CfComputes the bitwise AND of 256 bits (representing \xe2\x80\xa600000000000CnCompute the absolute value of packed signed 8-bit integers \xe2\x80\xa600CgAdd packed 8-bit integers in a and b, and store the \xe2\x80\xa600CjAverage packed unsigned 8-bit integers in a and b, and \xe2\x80\xa600CgMultiply packed complex numbers in a by the complex \xe2\x80\xa600CkCompute the complex conjugates of complex numbers in a, \xe2\x80\xa600CkConvert packed double-precision (64-bit) floating-point \xe2\x80\xa600000CiConvert packed half-precision (16-bit) floating-point \xe2\x80\xa600000CkConvert packed single-precision (32-bit) floating-point \xe2\x80\xa600000ClMultiply packed double-precision (64-bit) floating-point \xe2\x80\xa600CjMultiply packed half-precision (16-bit) floating-point \xe2\x80\xa600ClMultiply packed single-precision (32-bit) floating-point \xe2\x80\xa600222111000CmMultiply packed complex numbers in a and b, and store the \xe2\x80\xa600CmConverts integer mask into bitmask, storing the result in \xe2\x80\xa600CmPerforms bitwise OR between k1 and k2, storing the result \xe2\x80\xa600000CnUnpack and interleave 8 bits from masks a and b, and store \xe2\x80\xa600CiUnpack and interleave 32 bits from masks a and b, and \xe2\x80\xa600CiUnpack and interleave 16 bits from masks a and b, and \xe2\x80\xa600CiLoads 512-bits (composed of 8 packed double-precision \xe2\x80\xa600CgLoad 512-bits (composed of 32 packed half-precision \xe2\x80\xa600CjLoads 512-bits (composed of 16 packed single-precision \xe2\x80\xa600CkConverts bit mask k1 into an integer value, storing the \xe2\x80\xa600CnCompare packed signed 8-bit integers in a and b, and store \xe2\x80\xa600CjCompare packed unsigned 8-bit integers in a and b, and \xe2\x80\xa600111000CmCompute the bitwise OR of packed 32-bit integers in a and \xe2\x80\xa600CmCompute the bitwise OR of packed 64-bit integers in a and \xe2\x80\xa600ClCompute the bitwise OR of 512 bits (representing integer \xe2\x80\xa600CiCalculate the max, min, absolute max, or absolute min \xe2\x80\xa600000C`Compute the approximate reciprocal of packed \xe2\x80\xa600000ClCompute the approximate reciprocal square root of packed \xe2\x80\xa600CmCompute the absolute differences of packed unsigned 8-bit \xe2\x80\xa600CjSet packed 8-bit integers in dst with the supplied values.00CgSet packed double-precision (64-bit) floating-point \xe2\x80\xa600CgSet packed single-precision (32-bit) floating-point \xe2\x80\xa600CiStore 512-bits (composed of 8 packed double-precision \xe2\x80\xa600ChStore 512-bits (composed of 32 packed half-precision \xe2\x80\xa600CfStore 512-bits of integer data from a into memory. \xe2\x80\xa600CiSubtract packed 8-bit integers in b from packed 8-bit \xe2\x80\xa600EbConcatenate 16-byte blocks in <code>a</code> and <code>b</code> into a 32-byte \xe2\x80\xa600CiConvert scalar half-precision (16-bit) floating-point \xe2\x80\xa600EfBlend packed 16-bit integers from <code>a</code> and <code>b</code> using the mask \xe2\x80\xa600EfBlends packed 32-bit integers from <code>a</code> and <code>b</code> using control \xe2\x80\xa600EjBlend packed 8-bit integers from <code>a</code> and <code>b</code> using <code>mask</code>00DnShifts <code>a</code> left by <code>IMM8</code> bytes while shifting in zeros.00DoShifts <code>a</code> right by <code>IMM8</code> bytes while shifting in zeros.00CkCompare packed double-precision (64-bit) floating-point \xe2\x80\xa600CiCompare packed half-precision (16-bit) floating-point \xe2\x80\xa600CkCompare packed single-precision (32-bit) floating-point \xe2\x80\xa600CnCompare the lower double-precision (64-bit) floating-point \xe2\x80\xa600ClCompare the lower half-precision (16-bit) floating-point \xe2\x80\xa600CnCompare the lower single-precision (32-bit) floating-point \xe2\x80\xa600EbCompares packed 16-bit integers in <code>a</code> and <code>b</code> for equality.00EbCompares packed 32-bit integers in <code>a</code> and <code>b</code> for equality.00EaCompares packed 64-bit integers in <code>a</code> and <code>b</code> for equality00DlCompares packed 16-bit integers in <code>a</code> and <code>b</code> for \xe2\x80\xa600DlCompares packed 32-bit integers in <code>a</code> and <code>b</code> for \xe2\x80\xa600DlCompares packed 64-bit integers in <code>a</code> and <code>b</code> for \xe2\x80\xa600EcCompares packed 16-bit integers in <code>a</code> and <code>b</code> for less-than.00EcCompares packed 32-bit integers in <code>a</code> and <code>b</code> for less-than.00EbCompares corresponding elements in <code>a</code> and <code>b</code> to see if \xe2\x80\xa600DkCompares each of the four floats in <code>a</code> to the corresponding \xe2\x80\xa600DkReturns a new vector with the low element of <code>a</code> replaced by \xe2\x80\xa600DkChecks if the lowest <code>f32</code> of both inputs are unordered. The \xe2\x80\xa600ChConvert packed signed 16-bit integers in a to packed \xe2\x80\xa600DfConverts the lower two packed 32-bit integers in <code>a</code> to \xe2\x80\xa600ChConvert packed signed 32-bit integers in a to packed \xe2\x80\xa600CoConverts packed 32-bit integers in <code>a</code> to packed \xe2\x80\xa600ChConvert packed signed 64-bit integers in a to packed \xe2\x80\xa600000000CjConvert packed unsigned 16-bit integers in a to packed \xe2\x80\xa600CjConvert packed unsigned 32-bit integers in a to packed \xe2\x80\xa600000CjConvert packed unsigned 64-bit integers in a to packed \xe2\x80\xa600000000CiConvert packed half-precision (16-bit) floating-point \xe2\x80\xa600000ClConverts packed single-precision (32-bit) floating-point \xe2\x80\xa600CgConverts a single-precision (32-bit) floating-point \xe2\x80\xa600ClConverts packed double-precision (64-bit) floating-point \xe2\x80\xa600CkConvert packed double-precision (64-bit) floating-point \xe2\x80\xa600000000444444444444444444333CkConvert packed single-precision (32-bit) floating-point \xe2\x80\xa600000000BeAlias for <code>_mm_cvtsd_si64</code>00EbReturns <code>a</code> with its lower element replaced by <code>b</code> after \xe2\x80\xa600C`Converts the lower double-precision (64-bit) \xe2\x80\xa600000CmConverts the lowest 32 bit float in the input vector to a \xe2\x80\xa600000CjFix up packed double-precision (64-bit) floating-point \xe2\x80\xa600CjFix up packed single-precision (32-bit) floating-point \xe2\x80\xa600CmFix up the lower double-precision (64-bit) floating-point \xe2\x80\xa600CmFix up the lower single-precision (32-bit) floating-point \xe2\x80\xa600CnMultiplies packed double-precision (64-bit) floating-point \xe2\x80\xa600CjMultiply packed half-precision (16-bit) floating-point \xe2\x80\xa600CnMultiplies packed single-precision (32-bit) floating-point \xe2\x80\xa600222111000ClHorizontally adds the adjacent pairs of values contained \xe2\x80\xa600CfHorizontally subtract the adjacent pairs of values \xe2\x80\xa600EhReturns a copy of <code>a</code> with the 8-bit integer from <code>i</code> inserted \xe2\x80\xa600FeInserts the <code>[length:0]</code> bits of <code>y</code> into <code>x</code> at <code>index</code>.00CnLoads 128-bits of integer data from unaligned memory. This \xe2\x80\xa600CjLoads 64-bit integer from memory into first element of \xe2\x80\xa600CmLoad 128-bits (composed of 8 packed 16-bit integers) from \xe2\x80\xa600CmLoad 128-bits (composed of 4 packed 32-bit integers) from \xe2\x80\xa600CmLoad 128-bits (composed of 2 packed 64-bit integers) from \xe2\x80\xa600CiLoads 128-bits of integer data from memory into a new \xe2\x80\xa600CiCounts the number of leading zero bits in each packed \xe2\x80\xa600000CgAdd packed double-precision (64-bit) floating-point \xe2\x80\xa600CnAdd packed half-precision (16-bit) floating-point elements \xe2\x80\xa600CgAdd packed single-precision (32-bit) floating-point \xe2\x80\xa600CjAdd the lower double-precision (64-bit) floating-point \xe2\x80\xa600ChAdd the lower half-precision (16-bit) floating-point \xe2\x80\xa600CjAdd the lower single-precision (32-bit) floating-point \xe2\x80\xa600CfCompute the bitwise AND of packed double-precision \xe2\x80\xa600CfCompute the bitwise AND of packed single-precision \xe2\x80\xa600CjDivide packed double-precision (64-bit) floating-point \xe2\x80\xa600ChDivide packed half-precision (16-bit) floating-point \xe2\x80\xa600CjDivide packed single-precision (32-bit) floating-point \xe2\x80\xa600CmDivide the lower double-precision (64-bit) floating-point \xe2\x80\xa600CkDivide the lower half-precision (16-bit) floating-point \xe2\x80\xa600CmDivide the lower single-precision (32-bit) floating-point \xe2\x80\xa600CkCompare packed double-precision (64-bit) floating-point \xe2\x80\xa600CiCompare packed half-precision (16-bit) floating-point \xe2\x80\xa600CkCompare packed single-precision (32-bit) floating-point \xe2\x80\xa600CnCompare the lower double-precision (64-bit) floating-point \xe2\x80\xa600ClCompare the lower half-precision (16-bit) floating-point \xe2\x80\xa600CnCompare the lower single-precision (32-bit) floating-point \xe2\x80\xa600555444333222111000ChMove packed double-precision (64-bit) floating-point \xe2\x80\xa600ChMove packed single-precision (32-bit) floating-point \xe2\x80\xa600ClMultiply packed double-precision (64-bit) floating-point \xe2\x80\xa600CjMultiply packed half-precision (16-bit) floating-point \xe2\x80\xa600ClMultiply packed single-precision (32-bit) floating-point \xe2\x80\xa600C`Multiply the lower double-precision (64-bit) \xe2\x80\xa600CmMultiply the lower half-precision (16-bit) floating-point \xe2\x80\xa600C`Multiply the lower single-precision (32-bit) \xe2\x80\xa600CgCompute the approximate reciprocal of packed 16-bit \xe2\x80\xa600CcCompute the approximate reciprocal of the lower \xe2\x80\xa600ClSubtract packed double-precision (64-bit) floating-point \xe2\x80\xa600CjSubtract packed half-precision (16-bit) floating-point \xe2\x80\xa600ClSubtract packed single-precision (32-bit) floating-point \xe2\x80\xa600C`Subtract the lower double-precision (64-bit) \xe2\x80\xa600CmSubtract the lower half-precision (16-bit) floating-point \xe2\x80\xa600C`Subtract the lower single-precision (32-bit) \xe2\x80\xa600CfCompute the bitwise XOR of packed double-precision \xe2\x80\xa600CfCompute the bitwise XOR of packed single-precision \xe2\x80\xa600CiLoads packed double-precision (64-bit) floating-point \xe2\x80\xa600CiLoads packed single-precision (32-bit) floating-point \xe2\x80\xa600CnCompute the bitwise OR of packed double-precision (64-bit) \xe2\x80\xa600CnCompute the bitwise OR of packed single-precision (32-bit) \xe2\x80\xa600CcDuplicate odd-indexed single-precision (32-bit) \xe2\x80\xa600CdDuplicate even-indexed single-precision (32-bit) \xe2\x80\xa600CnReturns a mask of the most significant bit of each element \xe2\x80\xa600000DkMultiplies the packed 16-bit integers in <code>a</code> and <code>b</code>.00EdMultiplies the packed unsigned 16-bit integers in <code>a</code> and <code>b</code>.00111DoMultiplies the packed 32-bit integers in <code>a</code> and <code>b</code>, \xe2\x80\xa600EcMultiply packed 64-bit integers in <code>a</code> and <code>b</code>, producing \xe2\x80\xa600EdConverts packed 16-bit integers from <code>a</code> and <code>b</code> to packed \xe2\x80\xa600EdConverts packed 32-bit integers from <code>a</code> and <code>b</code> to packed \xe2\x80\xa600CnFor each packed 8-bit integer maps the value to the number \xe2\x80\xa600CiBroadcasts 64-bit integer <code>a</code> to all elements.00CnConcatenate packed 16-bit integers in a and b producing an \xe2\x80\xa600CnConcatenate packed 32-bit integers in a and b producing an \xe2\x80\xa600CnConcatenate packed 64-bit integers in a and b producing an \xe2\x80\xa600222111000CnConcatenate packed 16-bit integers in b and a producing an \xe2\x80\xa600CnConcatenate packed 32-bit integers in b and a producing an \xe2\x80\xa600CnConcatenate packed 64-bit integers in b and a producing an \xe2\x80\xa600222111000CnStore 128-bits (composed of 4 packed 32-bit integers) from \xe2\x80\xa600CnStore 128-bits (composed of 2 packed 64-bit integers) from \xe2\x80\xa600D`Stores 128-bits of integer data from <code>a</code> into memory.00CnStore 128-bits (composed of 16 packed 8-bit integers) from \xe2\x80\xa600CiStore 16-bit integer from the first element of a into \xe2\x80\xa600CiStore 32-bit integer from the first element of a into \xe2\x80\xa600CiStore 64-bit integer from the first element of a into \xe2\x80\xa600CiStores a 32-bit integer value in the specified memory \xe2\x80\xa600CiStores a 64-bit integer value in the specified memory \xe2\x80\xa600CiTests whether the specified bits in a 128-bit integer \xe2\x80\xa600000DnCompares the lower element of <code>a</code> and <code>b</code> for not-equal.00ClCompare the lower half-precision (16-bit) floating-point \xe2\x80\xa600DhCompares two 32-bit floats from the low-order bits of <code>a</code> \xe2\x80\xa600DkThe resulting <code>__m128d</code> element is composed by the low-order \xe2\x80\xa600CdUnpacks and interleave single-precision (32-bit) \xe2\x80\xa600DaThe resulting <code>__m128d</code> element is composed by the \xe2\x80\xa600111CiValue to use for the <code>Accept-Encoding</code> header.0Dk<strong>Gets</strong> the attribute: the minimum number of bits for the \xe2\x80\xa6CiCreate an event watcher which is called every time an \xe2\x80\xa6BlAdd <code>VendorData</code> to the metadata.DjAdjust the contrast of this image. <code>contrast</code> is the amount \xe2\x80\xa6CoAdvances the iterator from the back by <code>n</code> elements.000000000000000000000CiComputes the Needleman-Wunsch alignment score for two \xe2\x80\xa6CjIf there are elements and they are all equal, return a \xe2\x80\xa6000DjBehaves like <code>allocate</code>, but also ensures that the returned \xe2\x80\xa600000CmCalculates the number of bytes currently allocated across \xe2\x80\xa6CnReturns the total amount of memory allocated internally by \xe2\x80\xa600CgAmplifies the sound logarithmically by the given value.0BgReturn a view on the raw sample buffer.BhCasts <code>self</code> to inline table.0CjReturn a reference to an 16bit Grayscale image with an \xe2\x80\xa6CcReturns a non-null pointer to the slice\xe2\x80\x99s buffer.ChReturns the size as a tuple if the event is a resize \xe2\x80\xa6CeReturns a shared reference to a slice of possibly \xe2\x80\xa6BoReturns the pattern as utf-8 bytes if possible.0000CiGets a mutable (unique) reference to the contained value.BoGets a shared reference to the contained value.DhCall the <code>AsyncFnOnce</code>, returning a future which may move \xe2\x80\xa600000000000000000CmSets how much time it takes for the volume attenuation to \xe2\x80\xa6CmHow much time it takes for the volume attenuation to ramp \xe2\x80\xa6BhAppend char c n times to a print buffer.CjReset the string to \xe2\x80\x9c\xe2\x80\x9d but keep internal allocated \xe2\x80\xa6CiAllocate an AVBuffer of the given size using av_malloc().ClFree a given reference and automatically free the buffer \xe2\x80\xa6CnEncrypt or decrypt a buffer using a previously initialized \xe2\x80\xa6CfGet a human readable string in an abbreviated form \xe2\x80\xa6CnGet the AVCodecID for the given codec tag tag. If no codec \xe2\x80\xa6AiIterate over a dictionaryCkConvenience wrapper for av_dict_set() that converts the \xe2\x80\xa6CaAdd the pointer to an element to a dynamic array.CiAllocate and clear a buffer, reusing the given one if \xe2\x80\xa6CjReallocate the given buffer if it is not large enough, \xe2\x80\xa6CmReturn the output format in the list of registered output \xe2\x80\xa6CdSend a nice hexadecimal dump of a buffer to the log.Cl@brief Decodes LZO 1x compressed data. @param out output \xe2\x80\xa6CfAllocate a memory block for an array with av_malloc().CeInitialize or reinitialize an AVMurMur3 hash context.CiSet all the options from a given dictionary on an object.CnAllocate an AVPacket and set its fields to default values. \xe2\x80\xa6CiCreate a new packet that references the same data as src.A`Wipe the packet.CgGenerate cryptographically secure random data, i.e. \xe2\x80\xa6AmAllocate an AVRIPEMD context.BgFinish hashing and output digest value.AmCopy samples from src to dst.AmAllocate an AVSHA512 context.2B`Initialize an AVTWOFISH context.Cn@file @brief Public header for libavutil TWOFISH algorithm \xe2\x80\xa6CmReturn an informative version string. This usually is the \xe2\x80\xa6AmInitialize an AVXTEA context.DgReturns the number of bytes available to be read from <em>stdin</em>\xe2\x80\xa6BjReturns the available disk size, in bytes.Bo@return a positive value if s is open (i.e. \xe2\x80\xa6AnReturn the libavcodec license.BkReturn the LIBAVCODEC_VERSION_INT constant.CeFree all allocated data in the given subtitle struct.DfExtract a span of bits from the <code>u32</code>, start and len style.0DfExtract a span of bits from the <code>u64</code>, start and len style.0EdUnsets the bits in <code>self</code> to 0 from the <code>[start..=end]</code> range.0BfBitwise <code>(!a) &amp;amp; b</code>.BbBitwise <code>(!a) &amp; b</code>.101010C`The number of bits per one decoded audio sample.DbBlends the <code>i16</code> lanes according to the immediate mask.0DgRenders the text in <em>blended</em> mode but wrapping the words if \xe2\x80\xa6CbReturns the number of bytes available for reading.BnReturns the number of bytes available to read.CiReturns the rounded up size in bytes from a size in bits.CbReturns the bytes per pixel of the current format.CgReturns the number of bytes contained in a pixel of \xe2\x80\xa6DiPerforms the same function as <code>call_once()</code> except ignores \xe2\x80\xa6DjGets a reference to a static <code>Location</code> indicating where it \xe2\x80\xa600Cn&lt; array of support channel layouts, or NULL if unknown. \xe2\x80\xa6CcLists of supported channel layouts, only for audio.jVideo only00DePerforms copy-assignment from <code>self</code> to <code>dest</code>.00Cl\xe2\x80\x98,\xe2\x80\x99 separated list of allowed decoders. If NULL then \xe2\x80\xa60CbAdditional data associated with the entire stream.ChAdditional data associated with the entire coded stream.CnReturns <code>true</code> if the color has an alpha component.00DdReturns <code>true</code> if the color is in a linear space (not \xe2\x80\xa600DdReturns <code>true</code> if the alpha component is the absolute \xe2\x80\xa600D`Returns <code>true</code> if the color uses premultiplied alpha.00CaChromaticity coordinates of the source primaries.999CgOpens a TCP connection to a remote host with a timeout.CiThis function is used instead of panic_fmt in const eval.0Db<strong>Gets</strong> the attribute: type of GL context (Core, \xe2\x80\xa6Dj<strong>Gets</strong> the OpenGL context major and minor versions as a \xe2\x80\xa6CjReturns whether we should perform contract-checking at \xe2\x80\xa600CmA convenience wrapper over <code>Slice::copy_array_at</code>.D`Copies all elements from <code>src</code> into <code>dst</code>.CmCopies the specified slice into the buffer. If the buffer \xe2\x80\xa6DhCopies all audio data from the source <code>AudioBufferRef</code> in \xe2\x80\xa60BoOpens a file in write-only mode with buffering.Bj<code>crossbeam-utils</code> modificationsCiProvides a cursor with editing operations at the back \xe2\x80\xa6CgReturns the size of the value represented by this type.0Dg<code>core</code> Asserts that two expressions are equal to each other.0CeAsserts that two expressions are equal to each other.00Dh<code>core</code> Asserts that two expressions are not equal to each \xe2\x80\xa60CiAsserts that two expressions are not equal to each other.00DcDeclares a new <code>CodecType</code> given a character code. A \xe2\x80\xa6DhRequire the <code>Deserializer</code> to figure out how to drive the \xe2\x80\xa60EbHint that the <code>Deserialize</code> type is expecting a <code>f32</code> value.0EbHint that the <code>Deserialize</code> type is expecting a <code>f64</code> value.0EcHint that the <code>Deserialize</code> type is expecting an <code>i16</code> value.0EcHint that the <code>Deserialize</code> type is expecting an <code>i32</code> value.0EcHint that the <code>Deserialize</code> type is expecting an <code>i64</code> value.0DeHint that the <code>Deserialize</code> type is expecting a map of \xe2\x80\xa60DjHint that the <code>Deserialize</code> type is expecting a sequence of \xe2\x80\xa60DkHint that the <code>Deserialize</code> type is expecting a string value \xe2\x80\xa60EbHint that the <code>Deserialize</code> type is expecting a <code>u16</code> value.0EbHint that the <code>Deserialize</code> type is expecting a <code>u32</code> value.0EbHint that the <code>Deserialize</code> type is expecting a <code>u64</code> value.0GgWhen passed the <em>number</em> <code>0</code>, <code>1</code>, \xe2\x80\xa6, <code>9</code>, returns the <em>character</em> \xe2\x80\xa60ClReturns the distribution id as defined by os-release, or \xe2\x80\xa6DdSets the <code>dither</code> field to <code>Dither::Atkinson</code>.CgIf non NULL, \xe2\x80\x98draw_horiz_band\xe2\x80\x99 is called by the \xe2\x80\xa6CgInternal method used to define the behavior of this \xe2\x80\xa60CcData TLB number of entries for 2-MB and 4-MB pages.CfL2 Data TLB number of entries for 2-MB and 4-MB pages.DiRaised when a <code>Deserialize</code> struct type received more than \xe2\x80\xa6CmCreates settings optimized for dynamic content like music \xe2\x80\xa6AaEnables raw mode.AeEnables the raw mode.11EfEncodes <code>input</code> into <code>output</code>, returning the number of bytes \xe2\x80\xa6000000000ClError recognition; may misdetect some more or less valid \xe2\x80\xa6CmSets the number of extra hardware frames which the filter \xe2\x80\xa6BjReturns the name of the current font face.FcMutably borrows an <code>Either</code> of <code>Iterator</code>s to be an <code>Iterator</code> \xe2\x80\xa6CkReturns the value of the dwFileAttributes field of this \xe2\x80\xa6BoGet a MIDI input port by its unique identifier.C`Get a MIDI output port by its unique identifier.CkReturns the first key-value pair in the map. The key in \xe2\x80\xa6AjFlip an image horizontallyAeForce sending a body.DiSets the <code>format</code> field to <code>PixelFormat::ABGR8888</code>.DiSets the <code>format</code> field to <code>PixelFormat::ARGB8888</code>.DiSets the <code>format</code> field to <code>PixelFormat::BGRA8888</code>.D`Called when formatting a datetime with the <code>%c</code> flag.CiFormat modifier applied to the object (DRM_FORMAT_MOD_*).DiSets the <code>format</code> field to <code>PixelFormat::RGBA8888</code>.CjReturns the value that would be obtained by taking the \xe2\x80\xa6000000BlNumber of past frames sent through the link.CdConverts an array into a <code>full</code> destaque.CaConverts an array into a <code>full</code> stack.CiConverts an <code>AsciiChar</code> to <code>char7</code>.CiConverts an <code>AsciiChar</code> to <code>char8</code>.CjConverts an <code>AsciiChar</code> to <code>char16</code>.DiResolves a given path relative to the nearest <code>Cargo.toml</code> \xe2\x80\xa6CiCreates a timestamp from seconds, ensuring a valid value.DfReturns a new <code>JsInstant</code> from a timestamp in milliseconds.CgReturns a time delta corresponding to the number of \xe2\x80\xa6CdCreates a new instant in time from the number of \xe2\x80\xa6BhCreates a new surface using pixel masks.EhConstructs a new <code>Borrowed&lt;&#39;a, &#39;py, PyAny&gt;</code> from a pointer. \xe2\x80\xa60CmLoad chunk from a buffer containing raw audio data in the \xe2\x80\xa6EnConstructs a <code>Layout</code> from a given <code>size</code> and <code>align</code>, or \xe2\x80\xa6DhUnpack the upper half of the input and expand it to <code>i16</code> \xe2\x80\xa6ClUnpack the upper half of the input and zero expand it to \xe2\x80\xa6EnConverts <code>core::str</code><code>Utf8Error</code> to <code>InvalidText::Utf8</code> in \xe2\x80\xa6FbConverts <code>core::str</code><code>Utf8Error</code> to <code>InvalidUtf8</code> in compile-time.ClConverts a slice of bytes to a string, including invalid \xe2\x80\xa6BjInitializes the game controller subsystem.DiReturns a copy of <code>self</code> with only the value of the bit at \xe2\x80\xa600CkCalculates the 2D coordinates from the given 1D array index0CdReturns the working directory for the child process.BhReturns the pid for the current process.C`Returns device list with it properties. @see \xe2\x80\xa6DkA copy of <code>self</code> with only the bits of <code>FLAG1</code> field.0DkA copy of <code>self</code> with only the bits of <code>FLAG2</code> field.0DkA copy of <code>self</code> with only the bits of <code>MASK0</code> field.0AnReturn the current framecount.CiReturns the hash value xor folded to <code>n</code> bits.000CiReturns the microsecond, as an int from 0 through 999999.CkGets the mutable reference of the contents of the cell, \xe2\x80\xa60CdReturns the number of nanosecond units in this span.DiGets the contents of the cell, initializing it to <code>f()</code> if \xe2\x80\xa60DhLike <code>get_or_init</code>, but accepts a fallible initialization \xe2\x80\xa6DkGets the value currently in the <code>OnceCell</code>, or initialize it \xe2\x80\xa6???EgGets the value of the bits in <code>self</code> from the <code>[start..=end]</code> \xe2\x80\xa600000000000DhGets the value of the bits in from the <code>[start..=end]</code> range.00C`Return information about the vendor (LEAF=0x00).CmBinds an OpenGL/ES/ES2 texture to the current context for \xe2\x80\xa6CnLoads the OpenGL library using a platform-dependent OpenGL \xe2\x80\xa6CiSet up an OpenGL context for rendering into an OpenGL \xe2\x80\xa6CmConvert the supplied image to grayscale. Alpha channel is \xe2\x80\xa60Dg(groupCollapsed) Like <code>group</code> but starts with the inline \xe2\x80\xa6Ca1GB page size entries supported by this structureCa2MB page size entries supported by this structureCa4MB page size entries supported by this structureCgLOCK MOV CR0 means MOV CR8. See \xe2\x80\x9cMOV(CRn)\xe2\x80\x9d in APM3.AeSupports AVX512_BF16.AeSupports AVX512_FP16.kAVX512_IFMAkAVX512VBMI2BoChecks if bulk memory operations are available.BaDoes the window have input focus?BaDoes the window have mouse focus?BkHas PREFETCHWT1 (Intel\xc2\xae Xeon Phi\xe2\x84\xa2 only).CcChecks if the <em>Scroll Lock</em> modifier is set.CnIntel Turbo Boost Technology Available (see description of \xe2\x80\xa6Cg(forward) Moves the browser forward one step in the \xe2\x80\xa6CiRetrieves the horizontal scaled kerning value for two \xe2\x80\xa6BdLegacy hardware accelerator context.CgMutable portion of the buffer that holds sample values.CnReturn the mutable portion of the buffer that holds sample \xe2\x80\xa6CcReturn the mutable buffer that holds sample values.BdGet an index provided it is inbouds.0DlConcatenates <code>self</code> and <code>other</code>, in place if possible.0EgRepeats the sequence object <code>count</code> times and updates <code>self</code>, \xe2\x80\xa60CnAudio only. The amount of padding (in samples) inserted by \xe2\x80\xa6CmAudio only. The number of \xe2\x80\x9cpriming\xe2\x80\x9d samples (padding) \xe2\x80\xa6jAudio only00CmReturns a mutable reference to the initialized portion of \xe2\x80\xa6CcReturns a copied sorted array using insertion sort.0000000000000EhReturns the number of permutations of <code>n</code> items taken <code>r</code> at a \xe2\x80\xa600ClReturns the number of digits in the given <code>base</code>.00CiReturns the number of digits in base 10 including the \xe2\x80\xa600DiWrites the factors in <code>fbuf</code>, and the unique prime factors \xe2\x80\xa600DjReturns the number of permutations of n<code>items taken</code>r` at a \xe2\x80\xa600AoCalls `NumInt::int_ref_combine.00CnSimilar to int_combine, but operates on references instead \xe2\x80\xa600AoCalls `NumInt::int_ref_div_rem.00CnSimilar to int_div_rem, but operates on references instead \xe2\x80\xa600AoCalls `NumInt::int_ref_factors.00CnSimilar to int_factors, but operates on references instead \xe2\x80\xa600AoCalls `NumInt::int_ref_gcd_ext.00CnSimilar to int_gcd_ext, but operates on references instead \xe2\x80\xa600AoCalls `NumInt::int_ref_is_even.00CnSimilar to int_is_even, but operates on references instead \xe2\x80\xa600AoCalls `NumInt::int_ref_permute.00CnSimilar to int_permute, but operates on references instead \xe2\x80\xa600AoCalls `NumInt::int_ref_totient.00CnSimilar to int_totient, but operates on references instead \xe2\x80\xa600ClAdditional information about the USB interface. Valid on \xe2\x80\xa6F`A copy of <code>self</code> with only the bits both in <code>self</code> and <code>other</code>.00CoReturns the inner <code>BareBox</code>ed primitive array in \xe2\x80\xa60CaConverts <code>self</code> into an async iterator00DbConverts this <code>PathBuf</code> into a boxed <code>Path</code>.CiConverts the vector into <code>&amp;&#39;bump [T]</code>.AjRead the image dimensions.ClReturns a mutable reference to the filled portion of the \xe2\x80\xa6BnReturns the inner stored type in compile-time.BkA copy of the inner value, in compile-time.DgConsumes the <code>BinaryHeap</code> and returns a vector in sorted \xe2\x80\xa6DgConverts the bytes into a <code>String</code> lossily, substituting \xe2\x80\xa6CjIO repositioned flag. This is set by avformat when the \xe2\x80\xa6DeReturns <code>true</code> if this unicode scalar satisfies either \xe2\x80\xa60CaChecks if the value is an alphanumeric character:DjReturns <code>true</code> if this address is in a range designated for \xe2\x80\xa6EdReturns <code>true</code> if this address part of the <code>198.18.0.0/15</code> \xe2\x80\xa6D`Returns <code>true</code> if this is an address reserved for \xe2\x80\xa6CnReturns <code>true</code> if this file type is a block device.0CjGets whether the buffer is contiguous in C-style order \xe2\x80\xa6BbCheck if status is within 400-499.CkChecks whether the pattern matches anywhere in the haystack0000ClReturns true if all receivers for this channel have been \xe2\x80\xa6CjReturns true if all senders for this channel have been \xe2\x80\xa6CfReturns true if force feedback is supported by device.DdReturns <code>true</code> if the key code is the given function key.CeReturns true if <code>self</code> is an inline table.0BoChecks if the lower bound is closed (included).DcReturns <code>true</code> if this unicode scalar is a noncharacter.0000E`Returns <code>true</code> if the given unicode scalar <code>code</code> is a \xe2\x80\xa6D`Whether <code>self</code> is equal to <code>NUM_MAX_NORM</code>.00D`Whether <code>self</code> is equal to <code>NUM_MIN_NORM</code>.00FeReturns <code>true</code> if and only if <code>self == (1 &lt;&lt; k)</code> for some <code>k</code>.00000EjReturns <code>true</code> if and only if <code>self == 2^k</code> for some <code>k</code>.00000000000DdReturns <code>true</code> if they are the same \xe2\x80\x9ckind\xe2\x80\x9d of events.BbCheck if status is within 500-599.EdReturns <code>true</code> if this is a unique local address (<code>fc00::/7</code>).BoChecks if the upper bound is closed (included).DcChecks whether the current variant has the given <code>name</code>.CiValidates that the interval bounds are ordered correctly.CjInstruction TLB number of entries for 2-MB and 4-MB pages.CjL2 Instruction TLB number of entries for 2-MB and 4-MB \xe2\x80\xa6Bk&lt; Control of the large controller motor.CjReturns the value of the ftLastWriteTime field of this \xe2\x80\xa6AhReturn left or a defaultBcParse a length-prefixed slice (TLV)DiDetermines the number of terms needed for <code>exp2_series</code> to \xe2\x80\xa6DgLoads the <code>f32</code> reference into the low lane of the register.0DkReads contiguous elements from <code>slice</code>. Elements are read so \xe2\x80\xa6DkReads contiguous elements starting at <code>ptr</code>. Each element is \xe2\x80\xa6Ba(assign) Loads the specified URL.Bf(reload) Reloads the current document.CjIterates over a list while holding a critical section, \xe2\x80\xa6CgIterates over the contents of this dictionary while \xe2\x80\xa6CkIterates over the contents of this list while holding a \xe2\x80\xa610BcReturns the system long os version.CnApplies a low-pass filter to the source while allowing the \xe2\x80\xa60DcReturns a <code>CursorMut</code> pointing at the gap before the \xe2\x80\xa60BnReturns true if type maintains insertion order00CnMakes the elements of the destaque contiguous, rearranging \xe2\x80\xa6CnRearranges the internal storage of this deque so it is one \xe2\x80\xa6CdMakes an equivalent AudioBuffer of a different type.DnSimilar to <code>map_either</code>, with an added context <code>ctx</code> \xe2\x80\xa6BfMaximum bitmap size, in native pixels.0CnThe maximum allowed image width. This limit is strict. The \xe2\x80\xa60CmReturns the maximum number of threads that Rayon supports \xe2\x80\xa6CbReturns the size of the pointed-to value in bytes.00CcReturns <code>true</code> if memory can still grow.ChRetrieves the layout metrics at the given index. You \xe2\x80\xa6Cj&lt; Try to buffer at least this amount of data before \xe2\x80\xa6CkGets the value of the modulator with the given ID if it \xe2\x80\xa6BbGathers the sign bit of each lane.0CfCollects the sign bit of each lane into a 4-bit value.0DfReturns the middle exclusive sub-<code>slice</code> with the given \xe2\x80\xa6BdMultiply and scale equivalent to \xe2\x80\xa60CmReturns the address\xe2\x80\x99s multicast scope if the address is \xe2\x80\xa6EoConvert <code>&amp;[A]</code> into <code>&amp;[B]</code> (possibly with a change in length) \xe2\x80\xa6CcUnsets the bits that are set in <code>other</code>.00CjUnsets the bits from the <code>[start..=end]</code> range.00BlReturns the time code, up to seconds, as \xe2\x80\xa6BcNumber of elements in extended_buf.AmCreates an agent with config.ChCalled when deserializing a variant with a single value.CnReads the next code point out of a byte iterator (assuming \xe2\x80\xa60DaThis returns <code>Ok(Some((key, value)))</code> for the next \xe2\x80\xa6DgFinds the next <code>Match</code> result. See <code>next_back()</code>.0000DdThis returns a <code>Ok(value)</code> for the next value in the map.CiReturns the current number of alive tasks in the runtime.CjReturns the number of mixer send tracks that currently \xe2\x80\xa6CnSet the conflict resolution strategy for when an offset is \xe2\x80\xa6CnSet the conflict resolution strategy for when an offset in \xe2\x80\xa6CfSets the background color to <code>DarkMagenta</code>.DeExecutes function <code>f</code> after each thread is started but \xe2\x80\xa6ClEnsures a value is in the entry by inserting the default \xe2\x80\xa6CfComputes the absolute value of self, with overflow \xe2\x80\xa600000CmNegates self, overflowing if this is equal to the minimum \xe2\x80\xa600000DcConverts a <code>bitmap</code> of 1-bit bytes into PBM ASCII P1 \xe2\x80\xa6AmAdjusts the panning of audio.DdReturns a parallel iterator over at most <code>chunk_size</code> \xe2\x80\xa60CkSorts the slice in parallel with a key extraction function.0AoUses <code>park_timeout</code>.DfParses a string representing a time zone into a <code>TimeZone</code>.D`Parse an RFC 2822 datetime string into a <code>Timestamp</code>.CfParse a datetime string into a <code>Timestamp</code>.CmReturns the index of the partition point according to the \xe2\x80\xa6BlReturns a copy of the next new random state.CbReturns a copy of the next state of the generator.11111111Cb(now) Retrieves a high-resolution timestamp in \xe2\x80\xa6EhCalls the <code>access</code> closure on <code>Self</code> the first time the source \xe2\x80\xa60DiShuffle 128 bits of floating point data at a time from <code>a</code> \xe2\x80\xa60EhSlowly swizzle 128 bits of integer data from <code>a</code> and <code>b</code> using \xe2\x80\xa6Fa<em>Slowly</em> swizzle 128 bits of integer data from <code>a</code> and <code>b</code> using \xe2\x80\xa6BiReturns the number of pixels per cell \xe2\x80\xa6CeReturn the position of the maximum element in the \xe2\x80\xa6000CeReturn the position of the minimum element in the \xe2\x80\xa6000CkReturn the positions of the minimum and maximum elements in000CkIterate over consumed tokens starting with the last emittedAnPrint a <code>TimeZone</code>.ClPrint a <code>Timestamp</code> datetime to the given writer.0DgLike <code>print</code>, but panics on failure instead of returning \xe2\x80\xa6BkMake the filter instance process a command.Cf\xe2\x80\x9cLift\xe2\x80\x9d a function of the values of the current \xe2\x80\xa6000Cn\xe2\x80\x9cLift\xe2\x80\x9d a function of the values of an iterator so that \xe2\x80\xa6CnProvide additional pre-context when it is needed to decide \xe2\x80\xa6DlSee documentation of <code>&lt;*const T&gt;::offset_from</code> for details.00CdSet multi query parameters without percent-encoding.ChRemove an element from the front of the queue (calls \xe2\x80\xa600CgRemove an element from the back of the queue (calls \xe2\x80\xa600CnParallel iterator types for inclusive ranges, the type for \xe2\x80\xa6CdReads and returns up to 32-bits or returns an error.0CdReads and returns up to 64-bits or returns an error.0BkGets the number of bytes buffered and read.ChReads four bytes from the stream and returns them in \xe2\x80\xa6CkReads and returns a unary ones encoded integer or an error.0DcReturn the <code>ImageFormat</code>s which are enabled for reading.BlLanewise <code>1.0 / a</code> approximation.0BeReciprocal of <code>f32</code> lanes.0CfRefreshes all information related to CPUs information.AlRegisters custom SDL events.CgWhen enabled, parsing will permit the weekday to be \xe2\x80\xa6BmRender triangles, optionally using a texture.ChRenders a reserved number of frames. This is a cheap \xe2\x80\xa6AlRepeats this source forever.0ClRemoves and returns the value for a given key, replacing \xe2\x80\xa6BmRestore the stream back to its previous state0CnGet the revision number of SDL that is linked against your \xe2\x80\xa6DjFinds the index of the last character in <code>haystack</code> that is \xe2\x80\xa6CjReturns a mutable reference to the right value. If the \xe2\x80\xa6EcThe nearest integer to <code>self</code>, rounding ties away from <code>0.0</code>.0DhThe nearest integer to itself, rounding ties away from <code>0.0</code>.0DjThe nearest integer to <code>self</code>, rounding ties to the nearest \xe2\x80\xa60DgReturns the nearest integer to <code>x</code>, rounding ties to the \xe2\x80\xa6EbExperimental version of <code>round_ties_even</code> in <code>core</code>. See \xe2\x80\xa6000EoAsserts the <code>state</code> is <code>Err</code> and returns <code>self</code>, otherwise \xe2\x80\xa6EdReplaces the <code>state</code> self with a <code>new_state</code>, in compile-time.DoWraps the <code>state</code> field into a <code>Result</code>, in compile-time.CjLinearly sample from an image using coordinates in [0, 1].BmNumber of past samples sent through the link.ChWhether samples are stored as binary or as decimal asciiEhRequests an immediate update, ensuring <code>update()</code> and <code>draw()</code> \xe2\x80\xa6EeWith <code>conf.platform.blocking_event_loop</code>, <code>schedule_update</code> \xe2\x80\xa6DhEnables raw mode and returns a <code>ScopeGuard</code> that restores \xe2\x80\xa6CiReports the valid bits of SECS.ATTRIBUTES[127:0] that \xe2\x80\xa6CcReturns a copied sorted array using insertion sort.CcReturns a copied sorted array using selection sort.011000000111BcSerialize a chunk of raw byte data.0CfSerialize a map entry consisting of a key and a value.AoSerialize a tuple struct field.B`Serialize a tuple variant field.AiSerialize a struct field.BaSerialize a struct variant field.ChBegin to serialize a statically sized sequence whose \xe2\x80\xa60AfSerialize a map value.EcSets values on which <code>ButtonPressed</code> and <code>ButtonReleased</code> \xe2\x80\xa6Dm<strong>Sets</strong> the attribute: the minimum number of bits for frame \xe2\x80\xa6EcReturns a copy of <code>self</code> setting the bit at <code>index</code>, checked.00CjChanges the current working directory to the specified \xe2\x80\xa60CkCapture mouse cursor to the current window On WASM this \xe2\x80\xa60BmSet the day of year on this broken down time.CgA socket listener will be awakened solely when data \xe2\x80\xa6DhIf state is <code>true</code> controller events are processed, otherwiseDjIf state is <code>true</code> joystick events are processed, otherwise \xe2\x80\xa6DbA copy of <code>self</code> with the <code>FLAG1</code> field set.0DbA copy of <code>self</code> with the <code>FLAG2</code> field set.0DbA copy of <code>self</code> with the <code>MASK0</code> field set.0EhSet an <code>i32</code> as the low 32-bit lane of an <code>m128i</code>, other lanes \xe2\x80\xa60EhSet an <code>i64</code> as the low 64-bit lane of an <code>m128i</code>, other lanes \xe2\x80\xa60BiSet the ICC profile to use for the image.BfA thread-unsafe version of set_logger.CcA thread-unsafe version of <code>set_logger</code>.CgSets the portion of the sound that will play in a loop.0CgSet <code>m128d</code> args into an <code>m256d</code>.0CgSet <code>m128i</code> args into an <code>m256i</code>.0CmSets the amount to change the volume after processing (in \xe2\x80\xa6CfMoves this TCP stream into or out of nonblocking mode.0CfMoves this UDP socket into or out of nonblocking mode.CaMoves the socket into or out of nonblocking mode.00BbSets the rotation of the listener.BoChanges the permissions on the underlying file.CgChanges the permissions found on a file or a directory.0CmSets the read-only flag, returning the previous read-only \xe2\x80\xa6CeChanges the sample rate of the <code>Renderer</code>.CjSplats the args into both lanes of the <code>m128d</code>.0CnSplat an <code>f64</code> arg into an <code>m256d</code> lane.0EgSets the given <code>value</code> into the bits from the <code>[start..=end]</code> \xe2\x80\xa600000000000EcGets a copy of <code>self</code> with the given <code>value</code> set into the \xe2\x80\xa600BdSet the application\xe2\x80\x99s window size.ClFilter using <code>ShiftLeftByte</code>: D = (S &lt;&lt; N).DbFilter using <code>ShiftLeftUint</code>: D = ((uint)S &lt;&lt; N).AnReverses bits of each element.00CkFunnel Shifts vector left elementwise, with UB on overflow.00CfFunnel Shifts vector right elementwise, with UB on \xe2\x80\xa600CkInserts an element into a vector, returning the updated \xe2\x80\xa600BcChecks if all mask values are true.00BiLogical \xe2\x80\x9cand\xe2\x80\x9cs all elements together.00BaChecks if any mask value is true.00BhReturns the maximum element of a vector.00BhReturns the minimum element of a vector.00CbLogical \xe2\x80\x9cexclusive ors\xe2\x80\x9d all elements together.00CbReturns the size of the pointed-to value in bytes.00BoSleeps the current thread until the sound ends.0Bk&lt; Control of the small controller motor.CeSort all iterator elements into a new iterator in \xe2\x80\xa60000CnSpawns an asynchronous task on every thread in this thread \xe2\x80\xa6DjSpawns a job into every thread of the fork-join scope <code>self</code>\xe2\x80\xa601ClSpawns a new thread without any lifetime restrictions by \xe2\x80\xa6CeReturns an array of substrings of a string slice, \xe2\x80\xa6DoSplits a number of <code>nanoseconds</code> in <code>{ s, ms, \xc2\xb5s, ns }</code>.0BnRemove an element from the front of the stack.0CgRemove an element from the back of the stack (calls \xe2\x80\xa600DjThe offset of the first frame in the <code>CuePoint</code> relative to \xe2\x80\xa6CkReturns the current seek position from the start of the \xe2\x80\xa600000CgCreates a future which will return the current seek \xe2\x80\xa6CiRemoves the pattern from the front of haystack, if it \xe2\x80\xa60000ChRemoves the pattern from the back of haystack, if it \xe2\x80\xa60000CkHeader containing style information for text subtitles. \xe2\x80\xa6CeNumber of available address space identifiers (ASID).EbAsserts the <code>state</code> and <code>value</code> equals the corresponding \xe2\x80\xa6DeWorks like <code>swizzle</code> with the following additional details0BmDrops the specified number of output samples.CfInitialize the scaling process for a given pair of \xe2\x80\xa6CjFree the swscaler context swsContext. If swsContext is \xe2\x80\xa6CgScale source data from src and write the output to dst.AnReturn the libswscale license.Cl@defgroup libsws libswscale Color conversion and scaling \xe2\x80\xa6CkReturns an iterator over all non-overlapping matches of \xe2\x80\xa6DhReturns a <code>TextureCreator</code> that can create Textures to be \xe2\x80\xa60Bb&lt; The available texture formatsCkScale this image down to a specific size. Returns a new \xe2\x80\xa6CnFor some codecs, the time base is closer to the field rate \xe2\x80\xa6BlMax duration for establishing the connectionCkMax duration for doing the DNS lookup when establishing \xe2\x80\xa6CnIf this time zone is a fixed offset, then this returns the \xe2\x80\xa6DkConverts the <code>Level</code> to the equivalent <code>LevelFilter</code>.CkReturns a copy of this image as a <code>LumaA</code> image.DkConvert to a packed <code>u64</code> in <code>0xRRRRGGGGBBBB</code> format.DoConvert to a packed <code>u64</code> in <code>0xRRRRGGGGBBBB</code> format, \xe2\x80\xa610EdConvert to a packed <code>u32</code> in <code>0xRRGGBBAA</code> format, with the \xe2\x80\xa6EdConvert to a packed <code>u32</code> in <code>0xRRGGBBAA</code> format (big-endian).10DjConverts this object to an iterator of resolved <code>SocketAddr</code>\xe2\x80\xa600CcConverts an <code>OsStr</code> to a Cow&lt;str&gt;.CnConverts a <code>Path</code> to a <code>Cow&lt;str&gt;</code>.D`Converts a <code>FsPath</code> to a <code>Cow&lt;str&gt;</code>.CcConverts a <code>CStr</code> into a Cow&lt;str&gt;.CfConverts the <code>PyString</code> into a Rust string.00CmConvert the raw data to a Rust string, possibly with data \xe2\x80\xa6CkIf the content is interlaced, is top field displayed first.DgTransmit <code>amount</code> of the output buffer. ureq will always \xe2\x80\xa6CmTries to convert a <code>char16</code> to <code>char7</code>.CmTries to convert a <code>char16</code> to <code>char8</code>.BcMove the data into an image buffer.CiTry to acquire a shared (non-exclusive) lock on the file.CmSet the number of nanoseconds on this span. The value may \xe2\x80\xa6CkReduces the items in the iterator into one item using a \xe2\x80\xa60DeAttempts to acquire this <code>RwLock</code> with exclusive write \xe2\x80\xa6C`Returns the PyTypeObject instance for this type.0BoSets the underline color to <code>Black</code>.AdThe underline color.BoSets the underline color to <code>Green</code>.BoSets the underline color to <code>White</code>.CjA previously set up function would no longer be called \xe2\x80\xa6DgRaised when a <code>Deserialize</code> enum type received a variant \xe2\x80\xa6BeUnpack and interleave the high lanes.000DeUnpack and interleave low lanes of <code>a</code> and <code>b</code>.0DcIf we have the only reference to <code>T</code> then unwrap it. \xe2\x80\xa600CiUnzips the results of the iterator into the specified \xe2\x80\xa60DkReturns a <code>CursorMut</code> pointing at the gap after the greatest \xe2\x80\xa60CgWrites the current URL into the provided buffer and \xe2\x80\xa6CiReturns the number of bytes needed to store the given \xe2\x80\xa600CmGiven a first byte, determines how many bytes are in this \xe2\x80\xa60EoAsserts the <code>value</code> is <code>Err</code> and returns <code>self</code>, otherwise \xe2\x80\xa6DoReplaces the <code>value</code> with a <code>new_value</code>, in compile-time.DoWraps the <code>value</code> field into a <code>Result</code>, in compile-time.ChWaits on this condition variable for a notification, \xe2\x80\xa6DbReturns a new <code>ExampleEnumSet</code> with all the fields set.DhReturns a new <code>ExampleBitfieldCustom</code> with all the fields \xe2\x80\xa6DcReturns a new <code>ExampleBitfield</code> with all the fields set.CdAcquires a mutable reference to the contained value.CiReturns a new empty sixel builder with the given byte \xe2\x80\xa6DkSets the value of the \xe2\x80\x9cdisk_usage\xe2\x80\x9d refresh kind to <code>true</code>\xe2\x80\xa6AiProvide codec extra data.CmSets the knee width - range over which limiting gradually \xe2\x80\xa6EdWhile creating the <code>Key</code>, add <code>Decor</code> to it for the line entryCgSets the value of the \xe2\x80\x9cenviron\xe2\x80\x9d refresh kind to \xe2\x80\xa6DgSets the value of the \xe2\x80\x9cstorage\xe2\x80\x9d refresh kind to <code>false</code>.CjWork around bugs in encoders which sometimes cannot be \xe2\x80\xa6CnWrites active worker handles into a buffer and returns the \xe2\x80\xa6BeReturns the number of active workers.AfStops all Web Workers.CgCalculates the offset from a pointer using wrapping \xe2\x80\xa600000000000CmOverwrites a memory location with the given value without \xe2\x80\xa6DiOverwrites a memory location with <code>src</code> without reading or \xe2\x80\xa6111DcReturn the <code>ImageFormat</code>s which are enabled for writing.De\xf0\x9f\x8e\xb2 Constructs a <em>XorShift</em> prng with custom bits, basis, \xe2\x80\xa60DjAllocates a <code>Rc&lt;[T]&gt;</code> with all contents being zeroed out.0ClReturns the secondary zodiac name, associated to the end \xe2\x80\xa6CcFormat a <code>Zoned</code> datetime into a string.0Bk208 Already Reported [RFC5842, Section 7.1]CmAn <code>AtomicBool</code> initialized to <code>false</code>.00Aa&lt; ITU-R BT2020Cm&lt; also FCC Title 47 Code of Federal Regulations 73.682 \xe2\x80\xa6AcFull range content.B`Narrow or limited range content.Bj&lt; \xe2\x80\x9cLinear transfer characteristics\xe2\x80\x9dAkLocation of chroma samples.CkChromaticity coordinates of the source primaries. These \xe2\x80\xa6Bh&lt; discard all frames except keyframesAn&lt; discard all non referenceA`List of devices.AfDirectory entry types.Al&lt; started, but incompleteCmThis structure stores auxiliary information for decoding, \xe2\x80\xa6Bg&lt; packed RGB 8:8:8, 24bpp, BGRBGR\xe2\x80\xa6BaHardware surfaces for Direct3D11.An&lt; planar GBRA 4:4:4:4 32bppAl&lt;        Y        ,  8bppBg&lt; packed RGB 8:8:8, 24bpp, RGBRGB\xe2\x80\xa6ClHardware acceleration through VA-API, data[3] contains a \xe2\x80\xa6D`&lt; HW acceleration through VDPAU, Picture.data[3] contains \xe2\x80\xa6CeProducer Reference Time data corresponding to the \xe2\x80\xa6Ch&lt; Number of sample formats. DO NOT USE if linking \xe2\x80\xa6Ad&lt; unsigned 8 bitsCjA nonexistent interface was requested or the requested \xe2\x80\xa60000CmAn error returned from <code>Bump::try_alloc_try_with</code>.Bc<code>AnimationDecoder</code> traitEf<code>AsAudioBufferRef</code> is a trait implemented for <code>AudioBuffer</code>s \xe2\x80\xa6CnA simple wrapper around a type to assert that it is unwind \xe2\x80\xa600CbCode to set the background color to bright yellow.DbA send body (Such as <code>&amp;str</code>) is larger than the \xe2\x80\xa6BkA deserializer holding a <code>bool</code>.DhPyO3 implementation of an iterator for a Python <code>set</code> object.CoProvides context to a closure called by <code>broadcast</code>.CaAn error occurred when building the audio stream.ChThis table is taken from Intel manual (Section CPUID \xe2\x80\xa6eSpeexDjCode to set the foreground color to <code>fg</code> and the background \xe2\x80\xa6DfCode to set the foreground color to bright <code>fg</code> and the \xe2\x80\xa6B`Used to compress the media-type.CiUsed to describe the languages intended for the audience.CfIndicates an alternate location for the returned data.BbCode to make the cursor invisible.CjCode to move the cursor to the beginning of the next line.ClCode to move the cursor to the beginning of the previous \xe2\x80\xa6CnError due to the computed capacity exceeding the collection\xe2\x80\xa600000CjA low level representation of the byte offsets of each \xe2\x80\xa6C`Two chained connectors called one after another.BkA deserializer holding a <code>char</code>.EhThe error type returned when a conversion from <code>u32</code> to <code>char</code> \xe2\x80\xa600CeThe things that can go wrong when casting between \xe2\x80\xa6fU+005E0000AfControls a compressor.CbThe kind of error for a <code>ConnectError</code>.AdA connection failed.ClThe direction that the Y coordinate increases in. Layout \xe2\x80\xa6CcAlias of <strong>positive</strong> angle direction.Bn<code>crossterm</code>\xe2\x80\x99s UI backend service.0AiDefault channels: Stereo.DeA type to represent the <code>DecapsulationKey</code> that X-Wing \xe2\x80\xa6DjA type to represent the <code>DecapsulationKey</code> that ML-KEM-1024 \xe2\x80\xa6DiA type to represent the <code>DecapsulationKey</code> that ML-KEM-512 \xe2\x80\xa6DiA type to represent the <code>DecapsulationKey</code> that ML-KEM-768 \xe2\x80\xa6CkAn error that can be returned when decoding UTF-16 code \xe2\x80\xa600CiAn iterator adaptor that removes repeated duplicates, \xe2\x80\xa60CjDefault connector providing TCP sockets, TLS and SOCKS \xe2\x80\xa6BlDefault cursor shape configured by the user.CeA data structure that can be deserialized without \xe2\x80\xa6fU+00110000fU+00120000CmCompiler-internal trait used to indicate the type of enum \xe2\x80\xa600AmControls a distortion effect.AkDouble underlines the text.CgCode to erase from the cursor to the start of the line.CgCode to erase from the cursor to the end of the screen.DeA type to represent the public <code>EncapsulationKey</code> that \xe2\x80\xa6DjA type to represent the <code>EncapsulationKey</code> that ML-KEM-1024 \xe2\x80\xa6DiA type to represent the <code>EncapsulationKey</code> that ML-KEM-512 \xe2\x80\xa6DiA type to represent the <code>EncapsulationKey</code> that ML-KEM-768 \xe2\x80\xa6AoEnumerate the rows of an image.BaRepresents the state of a button.0BfEnum representing the type of pointer.0CjAn auto-generated enum for values between #start and #end.CdStructured Extended Feature Identifiers (LEAF=0x07).AiFront right-high channel.AiFront right-wide channel.AjTrait to inspect an image.CdImplemented for homogeneous tuples of size up to 12.BlA deserializer holding an <code>i128</code>.BcEthernet-within-IPv6 encapsulation.AhIP6 fragmentation headerCjSpecialized image decoding not be supported by all formatsBk\xf0\x9f\xaa\xaa \xf0\x9f\x9a\xa9 The given index is out of bounds.Bf\xf0\x9f\x9a\xa9 The given index is out of bounds.CbAn index provided was out-of-bounds for the slice.0000DjConverts an existing value into a <code>Deserializer</code> from which \xe2\x80\xa6DiEither <code>pressed \xe2\x89\xa4 released</code> or one of values is outside [\xe2\x80\xa6CfInvalid image size, with an optional width and height.00Ea\xf0\x9f\x9a\xa9 <code>std</code> An error returned by [<code>IoBufWriter::into_inner</code>]0Ba\xf0\x9f\xaa\xaa \xf0\x9f\x9a\xa9 The key already exists.BfInformation about L3 cache monitoring.ClThe display is in landscape mode, with the left side up, \xe2\x80\xa6fU+007B0000Bn300 Multiple Choices [RFC9110, Section 15.4.1]B`Configures the main mixer track.DiA handle to a held <code>Mutex</code> that has had a function applied \xe2\x80\xa6DkAn RAII mutex guard returned by <code>MutexGuard::map</code>, which can \xe2\x80\xa600Dj<code>Metadata</code> is a container for a single discrete revision of \xe2\x80\xa6Ca<code>miniquad</code> Platform-specific settings.0Eh\xf0\x9f\x9a\xa9+ An error composite of <code>DataOverflow</code> + <code>IndexOutOfBounds</code>\xe2\x80\xa6AgConfigures a modulator.CiInformation about how monitor/mwait works on this CPU \xe2\x80\xa6Do\xf0\x9f\x9a\xa9 <code>std</code> An error returned from [<code>MpscReceiver::recv</code>].0Dh\xf0\x9f\x9a\xa9+ <code>std</code> Possible reasons that [<code>try_recv</code>][\xe2\x80\xa60Eb\xf0\x9f\x9a\xa9+ <code>std</code> Possible error outcomes for the [<code>try_send</code>][\xe2\x80\xa60CiThe greatest representable negative value, if applicable.0BjThe smallest representable positive value.0ChAn error that\xe2\x80\x99s returned when trying to change the \xe2\x80\xa6BdData provided is not nul terminated.00000EbOptions for <code>Offset::checked_add</code> and <code>Offset::checked_sub</code>.Bn402 Payment Required [RFC9110, Section 15.5.3]BnAll allocations inherit <code>GFP_NOFS</code>.BnAll allocations inherit <code>GFP_NOIO</code>.AjThe key size for Poly1305.AmThe output size for Poly1305.BiThe size of a private key used in X25519.BaSize of private DecapsulationKey.C`Parallel version of the standard iterator trait.0BgParallel extensions for mutable slices.0AoA builder for a font rendering.ChAn iterator adaptor that takes items while a closure \xe2\x80\xa60CjThe operation lacked the necessary privileges to complete.0000CkZero-sized type used to mark a type parameter as covariant.00CkZero-sized type used to mark a type parameter as invariant.00ClTrait that indicates that this is a pointer or a wrapper \xe2\x80\xa600CnRepresents the absence of a unit, the values indicate only \xe2\x80\xa6CiRepresents a unit in which the density of an image is \xe2\x80\xa6BdA point in time in a piece of audio.Bg\xf0\x9d\x9f\x99 \xf0\x9f\x9a\xa9 A positive value is required.AmA positive value is required.010DiThe <code>ProducerCallback</code> trait is a kind of generic closure, \xe2\x80\xa6ClRepresents Python\xe2\x80\x99s <code>AssertionError</code> exception.ClRepresents Python\xe2\x80\x99s <code>AttributeError</code> exception.CmAn error type returned by <code>Bound::try_borrow_mut</code>.CkImplementation of functionality for <code>PyCapsule</code>.0CkImplementation of functionality for <code>PyComplex</code>.0EaCheck if <code>op</code> is a <code>PyDateTimeAPI.DateTimeType</code> or subtype.CiStructure representing a <code>datetime.timedelta</code>.CkImplementation of functionality for <code>PyMapping</code>.0CiRepresents the Python <code>NotImplemented</code> object.ClRepresents Python\xe2\x80\x99s <code>RecursionError</code> exception.ClRepresents Python\xe2\x80\x99s <code>ReferenceError</code> exception.ClRepresents Python\xe2\x80\x99s <code>RuntimeWarning</code> exception.AoMacro, trading safety for speedCkMacro, <em>only</em> to be used to fill in brand new tuplesClRepresents Python\xe2\x80\x99s <code>UnicodeWarning</code> exception.CkImplementation of functionality for <code>PyWeakref</code>.0CdSet if the type is \xe2\x80\x98ready\xe2\x80\x99 \xe2\x80\x93 fully initializedCnAn interface for types that can queue commands for further \xe2\x80\xa6AlRear left-of-centre channel.CgCreated with the method <code>rsplit_terminator</code>.0000Ed\xf0\x9f\x93\x8f <code>core</code> A range only bounded inclusively above (<code>..=end</code>).0CmA range only bounded inclusively above (<code>..=end</code>).00000CnAn error that may be emitted when attempting to wait for a \xe2\x80\xa6CmThis enumeration is the list of possible errors that made \xe2\x80\xa60DeThe setting <code>https_only</code> is true and the URI is not https.CgValue returned by the <code>poll_proceed</code> method.Eg<code>ReversibleSample</code> is a trait that when implemented for <code>Self</code>\xe2\x80\xa6fU+00290000Dg<code>std</code> RAII structure used to release the exclusive write \xe2\x80\xa60CmRAII structure used to release the exclusive write access \xe2\x80\xa6000CkCreate a palette structure with the specified number of \xe2\x80\xa6CjSet a pointer to a new value if it is currently an old \xe2\x80\xa6BfGet the value of a pointer atomically.BdSet a pointer to a value atomically.BfUnlock a spin lock by setting it to 0.CkCapture the mouse and to track input outside an SDL window.BmConvert audio data to a desired audio format.ClCreate a cursor using the specified bitmap data and mask \xe2\x80\xa6BnCreate a new thread with a default stack size.ClCreate a window with the specified position, dimensions, \xe2\x80\xa6Ai&lt; Display state changeCi&lt; Current set of drops is now complete (NULL filename)BkDequeue more audio on non-callback devices.BoDestroy a mutex created with SDL_CreateMutex().CcLet a thread clean up on exit without intervention.Ch\\brief Display state change event data (event.display.*)Bb&lt; Cancel any window flash stateCnRun a specific filter function on the current event queue, \xe2\x80\xa6CjGet an ASCII string representation for a given ::SDL_GUID.BeGet the current power supply details.BoGet the amount of RAM configured in the system.ClGet the touch device name as reported from the driver or \xe2\x80\xa6Cd\\brief A structure containing a template for the \xe2\x80\xa6Cb\\brief The generic template for any haptic effect.CjCheck if the haptic device at the designated index has \xe2\x80\xa6BnType definition of the hint callback function.Bi\\brief  An enumeration of hint prioritiesBa&lt; Joystick hat position changeCk\\brief Joystick axis motion event structure (event.jaxis.*)Cd\\brief Joystick trackball motion event structure \xe2\x80\xa6CkAn SDL_GUID is a 128-bit identifier for an input device \xe2\x80\xa6CdGet the implementation dependent name of a joystick.AhOpen a joystick for use.CdGet the implementation dependent path of a joystick.CiLook up the address of the named function in a shared \xe2\x80\xa6CeCount the number of joysticks attached to the system.Bk&lt; Signals the end of an event poll cycleAhPacked component layout.BbQuery the attributes of a texture.CkCopy a portion of the texture to the current rendering, \xe2\x80\xa6BcFlip constants for SDL_RenderCopyExCiInformation on the capabilities of a render driver or \xe2\x80\xa6k&lt; AC CutAh&lt; AL Internet BrowserAi&lt; A sensor was updatedAb&lt; AccelerometerBmUpdate the current state of the open sensors.CnCircumvent failure of SDL_Init() when not using SDL_main() \xe2\x80\xa6Ca\\brief Cursor types for SDL_CreateSystemCursor().BeTry to lock a mutex without blocking.BcUnload a shared object from memory.Ba&lt; window usable for Metal viewAf&lt; window is visibleCjStart or stop a BLE scan on iOS and tvOS to pair Steam \xe2\x80\xa6ClThis function converts a string between encodings in one \xe2\x80\xa6BkThe blocksize for the hash function SHA256.BkThe blocksize for the hash function SHA384.BaOutput size of SHA3-224 in bytes.BaOutput size of SHA3-256 in bytes.BaOutput size of SHA3-384 in bytes.BaOutput size of SHA3-512 in bytes.BkThe blocksize for the hash function SHA512.CmNumber of explicit bits used to represent the significand \xe2\x80\xa600000BjThe statically resolved maximum log level.BcReturn the bitwise mask of matches.ClAn owned permission to join on a scoped thread (block on \xe2\x80\xa6DkContext manager for <code>sdl2_image</code> to manage quitting. Can\xe2\x80\x99t \xe2\x80\xa6DcContext manager for <code>sdl2_mixer</code> to manage init and quitDg<code>SeekSearchResult</code> is the return value for a search on a \xe2\x80\xa6ClAn error that may be emitted when sending a value into a \xe2\x80\xa6ClAn error returned from the <code>send_timeout</code> method.AiConfigures a mixer track.Cg\\brief The default mode, a binarized alpha cutoff of 1.CfA non blinking underscore cursor shape (inverse of \xe2\x80\xa6DhAn error returned from <code>Path::strip_prefix</code> if the prefix \xe2\x80\xa6BgThe symphonia decoder ran into an issueAcTop centre channel.ChQuery information about thermal and power management \xe2\x80\xa6Dj<code>std</code> An owned permission to join on a thread (block on its \xe2\x80\xa60Bh\xf0\x9f\x95\x98 A time split from hours to seconds.0Be\xf0\x9f\x95\x98 A time split from years to days.0Bh\xf0\x9f\x95\x98 A time split from years to seconds.0BfA handle to a IANA Time Zone Database.CcAn iterator over the time zone identifiers in a \xe2\x80\xa6AcToo many redirects.CgRepresents a lazy transformation that flattens elements0F`Helper to turn a <code>Transport</code> into a std::io <code>Read</code> and <code>Write</code>.DnSee <code>TreeErrorFrame::Context</code>, <code>AddContext::add_context</code>CjThe error type returned when a checked char conversion \xe2\x80\xa600BkA deserializer holding a <code>u128</code>.Bo426 Upgrade Required [RFC9110, Section 15.5.22]ClAn iterator over the substrings of a string which, after \xe2\x80\xa6CfMethods for determining displayed width of Unicode \xe2\x80\xa6BiA deserializer holding a <code>()</code>.CeThe implementation for an operation was not provided.ClDefines the authentication method that should be used to \xe2\x80\xa6CgStop pages from loading when an XSS attack is detected.CjTrait for types which are Zeroable when wrapped in Option.eFalse00Biround down and do not suppress exceptions00Bgtruncate and do not suppress exceptions00AkSee <code>_mm_setcsr</code>00000CiThis variant corresponds with <code>METH_FASTCALL</code>.CfFor each character in <code>a</code>, determine if \xe2\x80\xa600CkTransaction abort due to the transaction using too much \xe2\x80\xa600CkTransaction abort due to a memory conflict with another \xe2\x80\xa600CmTransaction explicitly aborted with xabort. The parameter \xe2\x80\xa600EgReturns the bit in position <code>b</code> of the memory addressed by <code>p</code>\xe2\x80\xa600000ClShift 16-bit mask a left by count bits while shifting in \xe2\x80\xa600CgShift the bits of 32-bit mask a left by count while \xe2\x80\xa600CgShift the bits of 64-bit mask a left by count while \xe2\x80\xa600CmShift 16-bit mask a right by count bits while shifting in \xe2\x80\xa600ChShift the bits of 32-bit mask a right by count while \xe2\x80\xa600ChShift the bits of 64-bit mask a right by count while \xe2\x80\xa600CkCompute the bitwise AND of 16-bit masks a and b, and if \xe2\x80\xa600CkCompute the bitwise AND of 32-bit masks a and b, and if \xe2\x80\xa600CkCompute the bitwise AND of 64-bit masks a and b, and if \xe2\x80\xa600CmCompute the bitwise NOT of 8-bit mask a and then AND with \xe2\x80\xa600CkCompute the bitwise AND of 8-bit masks a and  b, if the \xe2\x80\xa600DkComputes the absolute values of packed 16-bit integers in <code>a</code>\xe2\x80\xa600DkComputes the absolute values of packed 32-bit integers in <code>a</code>\xe2\x80\xa600CfCompute the absolute value of packed signed 64-bit \xe2\x80\xa600DaAdds packed 16-bit integers in <code>a</code> and <code>b</code>.00DaAdds packed 32-bit integers in <code>a</code> and <code>b</code>.00DaAdds packed 64-bit integers in <code>a</code> and <code>b</code>.00EaAdds packed 8-bit integers in <code>a</code> and <code>b</code> using saturation.00EbAdds packed unsigned 8-bit integers in <code>a</code> and <code>b</code> using \xe2\x80\xa600ClAlternatively adds and subtracts packed double-precision \xe2\x80\xa600ClAlternatively adds and subtracts packed single-precision \xe2\x80\xa600CnComputes the bitwise AND of 256 bits (representing integer \xe2\x80\xa600CgComputes the bitwise NOT of packed double-precision \xe2\x80\xa600CgComputes the bitwise NOT of packed single-precision \xe2\x80\xa600DnAverages packed unsigned 16-bit integers in <code>a</code> and <code>b</code>.00CjBlends packed double-precision (64-bit) floating-point \xe2\x80\xa600CjBlends packed single-precision (32-bit) floating-point \xe2\x80\xa600DoCast vector of type <code>__m256d</code> to type <code>__m256h</code>. This \xe2\x80\xa600BkCast vector of type __m256d to type __m256.00DoCast vector of type <code>__m256h</code> to type <code>__m256d</code>. This \xe2\x80\xa600EhCast vector of type <code>__m256h</code> to type <code>__m256</code>. This intrinsic \xe2\x80\xa600BkCast vector of type __m256 to type __m256d.00EhCast vector of type <code>__m256</code> to type <code>__m256h</code>. This intrinsic \xe2\x80\xa600CnConverts packed BF16 (16-bit) floating-point elements in a \xe2\x80\xa600CdReturns the first element of the input vector of \xe2\x80\xa600000CiConvert packed half-precision (16-bit) floating-point \xe2\x80\xa600CkConvert packed single-precision (32-bit) floating-point \xe2\x80\xa600CmCompute dot-product of BF16 (16-bit) floating-point pairs \xe2\x80\xa600CgMultiply packed complex numbers in a by the complex \xe2\x80\xa600CmMultiply packed complex numbers in a and b, accumulate to \xe2\x80\xa600CnMultiplies packed double-precision (64-bit) floating-point \xe2\x80\xa600CjMultiply packed half-precision (16-bit) floating-point \xe2\x80\xa600CnMultiplies packed single-precision (32-bit) floating-point \xe2\x80\xa600222111000ChConvert the exponent of each packed double-precision \xe2\x80\xa600CfConvert the exponent of each packed half-precision \xe2\x80\xa600ChConvert the exponent of each packed single-precision \xe2\x80\xa600EeCompares packed 16-bit integers in <code>a</code> and <code>b</code>, and returns \xe2\x80\xa600EeCompares packed 32-bit integers in <code>a</code> and <code>b</code>, and returns \xe2\x80\xa600CiCompare packed signed 64-bit integers in a and b, and \xe2\x80\xa600EfCompares packed unsigned 16-bit integers in <code>a</code> and <code>b</code>, and \xe2\x80\xa600EfCompares packed unsigned 32-bit integers in <code>a</code> and <code>b</code>, and \xe2\x80\xa600CkCompare packed unsigned 64-bit integers in a and b, and \xe2\x80\xa600555444333222111000CkSet each packed 8-bit integer in dst to all ones or all \xe2\x80\xa600CnMultiplies the low 32-bit integers from each packed 64-bit \xe2\x80\xa600CiMultiplies the low unsigned 32-bit integers from each \xe2\x80\xa600CkExtract the reduced argument of packed double-precision \xe2\x80\xa600CiExtract the reduced argument of packed half-precision \xe2\x80\xa600CkExtract the reduced argument of packed single-precision \xe2\x80\xa600CmRotate the bits in each packed 32-bit integer in a to the \xe2\x80\xa600CmRotate the bits in each packed 64-bit integer in a to the \xe2\x80\xa600111000CmScale the packed double-precision (64-bit) floating-point \xe2\x80\xa600CkScale the packed half-precision (16-bit) floating-point \xe2\x80\xa600CmScale the packed single-precision (32-bit) floating-point \xe2\x80\xa600DgBroadcasts 8-bit integer <code>a</code> to all elements of returned \xe2\x80\xa600CkSets packed 16-bit integers in returned vector with the \xe2\x80\xa600CkSets packed 32-bit integers in returned vector with the \xe2\x80\xa600CiSets packed __m256d returned vector with the supplied \xe2\x80\xa600CiSets packed __m256i returned vector with the supplied \xe2\x80\xa600CjSets packed 8-bit integers in returned vector with the \xe2\x80\xa600ChSets packed __m256 returned vector with the supplied \xe2\x80\xa600DjNegates packed 8-bit integers in <code>a</code> when the corresponding \xe2\x80\xa600EdShifts packed 16-bit integers in <code>a</code> left by <code>count</code> while \xe2\x80\xa600EdShifts packed 32-bit integers in <code>a</code> left by <code>count</code> while \xe2\x80\xa600EdShifts packed 64-bit integers in <code>a</code> left by <code>count</code> while \xe2\x80\xa600EeShifts packed 16-bit integers in <code>a</code> right by <code>count</code> while \xe2\x80\xa600EeShifts packed 32-bit integers in <code>a</code> right by <code>count</code> while \xe2\x80\xa600CjShift packed 64-bit integers in a right by count while \xe2\x80\xa600222111EeShifts packed 64-bit integers in <code>a</code> right by <code>count</code> while \xe2\x80\xa600CjStores 256-bits (composed of 4 packed double-precision \xe2\x80\xa600ChStore 256-bits (composed of 16 packed half-precision \xe2\x80\xa600CjStores 256-bits (composed of 8 packed single-precision \xe2\x80\xa600CjMoves double-precision values from a 256-bit vector of \xe2\x80\xa600CgMoves single-precision floating point values from a \xe2\x80\xa600DhSubtract packed 16-bit integers in <code>b</code> from packed 16-bit \xe2\x80\xa600DhSubtract packed 32-bit integers in <code>b</code> from packed 32-bit \xe2\x80\xa600DhSubtract packed 64-bit integers in <code>b</code> from packed 64-bit \xe2\x80\xa600DfSubtract packed 8-bit integers in <code>b</code> from packed 8-bit \xe2\x80\xa600DiSubtract packed unsigned 8-bit integers in <code>b</code> from packed \xe2\x80\xa600CnCompute the bitwise XOR of packed 32-bit integers in a and \xe2\x80\xa600CnCompute the bitwise XOR of packed 64-bit integers in a and \xe2\x80\xa600CnComputes the bitwise XOR of 256 bits (representing integer \xe2\x80\xa600CmZeroes the upper 128 bits of all YMM registers; the lower \xe2\x80\xa600CfCompute the absolute value of packed signed 16-bit \xe2\x80\xa600DkComputes the absolute values of packed 32-bit integers in <code>a</code>\xe2\x80\xa600CfCompute the absolute value of packed signed 64-bit \xe2\x80\xa600ChAdd packed 16-bit integers in a and b, and store the \xe2\x80\xa600ChAdd packed 32-bit integers in a and b, and store the \xe2\x80\xa600ChAdd packed 64-bit integers in a and b, and store the \xe2\x80\xa600CeAdd packed signed 8-bit integers in a and b using \xe2\x80\xa600CgAdd packed unsigned 8-bit integers in a and b using \xe2\x80\xa600CnCompute the bitwise AND of packed 32-bit integers in a and \xe2\x80\xa600CkCompute the bitwise AND of 512 bits (composed of packed \xe2\x80\xa600CmCompute the bitwise AND of 512 bits (representing integer \xe2\x80\xa600CfCompute the bitwise NOT of packed double-precision \xe2\x80\xa600CfCompute the bitwise NOT of packed single-precision \xe2\x80\xa600CkAverage packed unsigned 16-bit integers in a and b, and \xe2\x80\xa600DoCast vector of type <code>__m512d</code> to type <code>__m512h</code>. This \xe2\x80\xa600CnCast vector of type __m512d to type __m512. This intrinsic \xe2\x80\xa600DoCast vector of type <code>__m512h</code> to type <code>__m512d</code>. This \xe2\x80\xa600EhCast vector of type <code>__m512h</code> to type <code>__m512</code>. This intrinsic \xe2\x80\xa600CnCast vector of type __m512 to type __m512d. This intrinsic \xe2\x80\xa600EhCast vector of type <code>__m512</code> to type <code>__m512h</code>. This intrinsic \xe2\x80\xa600CnConverts packed BF16 (16-bit) floating-point elements in a \xe2\x80\xa600CkCopy the lower double-precision (64-bit) floating-point \xe2\x80\xa600CkCopy the lower single-precision (32-bit) floating-point \xe2\x80\xa600CiConvert packed half-precision (16-bit) floating-point \xe2\x80\xa600CkConvert packed single-precision (32-bit) floating-point \xe2\x80\xa600CmCompute dot-product of BF16 (16-bit) floating-point pairs \xe2\x80\xa600CgMultiply packed complex numbers in a by the complex \xe2\x80\xa600CmMultiply packed complex numbers in a and b, accumulate to \xe2\x80\xa600ClMultiply packed double-precision (64-bit) floating-point \xe2\x80\xa600CjMultiply packed half-precision (16-bit) floating-point \xe2\x80\xa600ClMultiply packed single-precision (32-bit) floating-point \xe2\x80\xa600222111000ChConvert the exponent of each packed double-precision \xe2\x80\xa600CfConvert the exponent of each packed half-precision \xe2\x80\xa600ChConvert the exponent of each packed single-precision \xe2\x80\xa600CiCompare packed signed 16-bit integers in a and b, and \xe2\x80\xa600CiCompare packed signed 32-bit integers in a and b, and \xe2\x80\xa600CiCompare packed signed 64-bit integers in a and b, and \xe2\x80\xa600CkCompare packed unsigned 16-bit integers in a and b, and \xe2\x80\xa600CkCompare packed unsigned 32-bit integers in a and b, and \xe2\x80\xa600CkCompare packed unsigned 64-bit integers in a and b, and \xe2\x80\xa600555444333222111000CkSet each packed 8-bit integer in dst to all ones or all \xe2\x80\xa600ClMultiply the low signed 32-bit integers from each packed \xe2\x80\xa600CnMultiply the low unsigned 32-bit integers from each packed \xe2\x80\xa600CkExtract the reduced argument of packed double-precision \xe2\x80\xa600CiExtract the reduced argument of packed half-precision \xe2\x80\xa600CkExtract the reduced argument of packed single-precision \xe2\x80\xa600CmRotate the bits in each packed 32-bit integer in a to the \xe2\x80\xa600CmRotate the bits in each packed 64-bit integer in a to the \xe2\x80\xa600111000CmScale the packed double-precision (64-bit) floating-point \xe2\x80\xa600CkScale the packed half-precision (16-bit) floating-point \xe2\x80\xa600CmScale the packed single-precision (32-bit) floating-point \xe2\x80\xa600CaBroadcast 8-bit integer a to all elements of dst.00CkSet packed 16-bit integers in dst with the supplied values.00DeSets packed 32-bit integers in <code>dst</code> with the supplied \xe2\x80\xa600CkSet packed 64-bit integers in dst with the supplied values.00CiShift packed 16-bit integers in a left by count while \xe2\x80\xa600CiShift packed 32-bit integers in a left by count while \xe2\x80\xa600CiShift packed 64-bit integers in a left by count while \xe2\x80\xa600CjShift packed 16-bit integers in a right by count while \xe2\x80\xa600CjShift packed 32-bit integers in a right by count while \xe2\x80\xa600CjShift packed 64-bit integers in a right by count while \xe2\x80\xa600222111000CjStores 512-bits (composed of 8 packed double-precision \xe2\x80\xa600ChStore 512-bits (composed of 32 packed half-precision \xe2\x80\xa600CkStores 512-bits (composed of 16 packed single-precision \xe2\x80\xa600CiStore 512-bits (composed of 8 packed double-precision \xe2\x80\xa600CjStore 512-bits (composed of 16 packed single-precision \xe2\x80\xa600CkSubtract packed 16-bit integers in b from packed 16-bit \xe2\x80\xa600CkSubtract packed 32-bit integers in b from packed 32-bit \xe2\x80\xa600CkSubtract packed 64-bit integers in b from packed 64-bit \xe2\x80\xa600CjSubtract packed signed 8-bit integers in b from packed \xe2\x80\xa600ClSubtract packed unsigned 8-bit integers in b from packed \xe2\x80\xa600CmReturn vector of type __m512 with indeterminate elements. \xe2\x80\xa600CnCompute the bitwise XOR of packed 32-bit integers in a and \xe2\x80\xa600CnCompute the bitwise XOR of packed 64-bit integers in a and \xe2\x80\xa600CmCompute the bitwise XOR of 512 bits (representing integer \xe2\x80\xa600CjAdd the lower double-precision (64-bit) floating-point \xe2\x80\xa600ChAdd the lower half-precision (16-bit) floating-point \xe2\x80\xa600CjAdd the lower single-precision (32-bit) floating-point \xe2\x80\xa600ChPerforms one round of an AES decryption flow on data \xe2\x80\xa600ChPerforms one round of an AES encryption flow on data \xe2\x80\xa600DiPerforms the <code>InvMixColumns</code> transformation on <code>a</code>.00CnConcatenate a and b into a 32-byte immediate result, shift \xe2\x80\xa600000CnComputes the bitwise NOT of 128 bits (representing integer \xe2\x80\xa600CiBroadcasts a single-precision (32-bit) floating-point \xe2\x80\xa600DkCasts a 128-bit floating-point vector of <code>[2 x double]</code> into \xe2\x80\xa600DoCast vector of type <code>__m128h</code> to type <code>__m128i</code>. This \xe2\x80\xa600DjCasts a 128-bit floating-point vector of <code>[4 x float]</code> into \xe2\x80\xa600CaCasts a 128-bit integer vector into a 128-bit \xe2\x80\xa600DoCast vector of type <code>__m128i</code> to type <code>__m128h</code>. This \xe2\x80\xa600111CkConvert packed single-precision (32-bit) floating-point \xe2\x80\xa600ClConverts packed double-precision (64-bit) floating-point \xe2\x80\xa600CkConvert packed double-precision (64-bit) floating-point \xe2\x80\xa600000000CiConvert packed half-precision (16-bit) floating-point \xe2\x80\xa600000000000000000ClConverts packed single-precision (32-bit) floating-point \xe2\x80\xa600444444444BfAlias for <code>_mm_cvttsd_si64</code>00CmDivide the lower double-precision (64-bit) floating-point \xe2\x80\xa600CkDivide the lower half-precision (16-bit) floating-point \xe2\x80\xa600CmDivide the lower single-precision (32-bit) floating-point \xe2\x80\xa600CgMultiply groups of 4 adjacent pairs of signed 8-bit \xe2\x80\xa600000CiMultiply groups of 4 adjacent pairs of unsigned 8-bit \xe2\x80\xa600000ChMultiply groups of 2 adjacent pairs of signed 16-bit \xe2\x80\xa600000CjMultiply groups of 2 adjacent pairs of unsigned 16-bit \xe2\x80\xa600000EcExtracts an 8-bit integer from <code>a</code>, selected with <code>IMM8</code>. \xe2\x80\xa600DhExtracts the bit range specified by <code>y</code> from the lower 64 \xe2\x80\xa600DcReturns values from <code>slice</code> at offsets determined by \xe2\x80\xa600000000000EaReturns a new vector where the <code>imm8</code> element of <code>a</code> is \xe2\x80\xa600E`Returns a copy of <code>a</code> with the 32-bit integer from <code>i</code> \xe2\x80\xa600E`Returns a copy of <code>a</code> with the 64-bit integer from <code>i</code> \xe2\x80\xa600DiInserts the <code>len</code> least-significant bits from the lower 64 \xe2\x80\xa600ChLoad packed double-precision (64-bit) floating-point \xe2\x80\xa600ChLoad packed single-precision (32-bit) floating-point \xe2\x80\xa600CkLoad a double-precision (64-bit) floating-point element \xe2\x80\xa600CnLoad a half-precision (16-bit) floating-point element from \xe2\x80\xa600CkLoad a single-precision (32-bit) floating-point element \xe2\x80\xa600CkMove the lower double-precision (64-bit) floating-point \xe2\x80\xa600CiMove the lower half-precision (16-bit) floating-point \xe2\x80\xa600CkMove the lower single-precision (32-bit) floating-point \xe2\x80\xa600CmMultiply packed complex numbers in a and b, and store the \xe2\x80\xa600ClMultiply the lower complex numbers in a and b, and store \xe2\x80\xa600CfCompute the square root of packed double-precision \xe2\x80\xa600CmCompute the square root of packed half-precision (16-bit) \xe2\x80\xa600CfCompute the square root of packed single-precision \xe2\x80\xa600CiCompute the square root of the lower double-precision \xe2\x80\xa600CgCompute the square root of the lower half-precision \xe2\x80\xa600CiCompute the square root of the lower single-precision \xe2\x80\xa600CjStores packed double-precision (64-bit) floating-point \xe2\x80\xa600CjStores packed single-precision (32-bit) floating-point \xe2\x80\xa600CgAdd packed double-precision (64-bit) floating-point \xe2\x80\xa600CnAdd packed half-precision (16-bit) floating-point elements \xe2\x80\xa600CgAdd packed single-precision (32-bit) floating-point \xe2\x80\xa600CjAdd the lower double-precision (64-bit) floating-point \xe2\x80\xa600ChAdd the lower half-precision (16-bit) floating-point \xe2\x80\xa600CjAdd the lower single-precision (32-bit) floating-point \xe2\x80\xa600CfCompute the bitwise AND of packed double-precision \xe2\x80\xa600CfCompute the bitwise AND of packed single-precision \xe2\x80\xa600CjDivide packed double-precision (64-bit) floating-point \xe2\x80\xa600ChDivide packed half-precision (16-bit) floating-point \xe2\x80\xa600CjDivide packed single-precision (32-bit) floating-point \xe2\x80\xa600CmDivide the lower double-precision (64-bit) floating-point \xe2\x80\xa600CkDivide the lower half-precision (16-bit) floating-point \xe2\x80\xa600CmDivide the lower single-precision (32-bit) floating-point \xe2\x80\xa600CkCompare packed double-precision (64-bit) floating-point \xe2\x80\xa600CiCompare packed half-precision (16-bit) floating-point \xe2\x80\xa600CkCompare packed single-precision (32-bit) floating-point \xe2\x80\xa600CnCompare the lower double-precision (64-bit) floating-point \xe2\x80\xa600ClCompare the lower half-precision (16-bit) floating-point \xe2\x80\xa600CnCompare the lower single-precision (32-bit) floating-point \xe2\x80\xa600555444333222111000ChMove packed double-precision (64-bit) floating-point \xe2\x80\xa600ChMove packed single-precision (32-bit) floating-point \xe2\x80\xa600ClMultiply packed double-precision (64-bit) floating-point \xe2\x80\xa600CjMultiply packed half-precision (16-bit) floating-point \xe2\x80\xa600ClMultiply packed single-precision (32-bit) floating-point \xe2\x80\xa600C`Multiply the lower double-precision (64-bit) \xe2\x80\xa600CmMultiply the lower half-precision (16-bit) floating-point \xe2\x80\xa600C`Multiply the lower single-precision (32-bit) \xe2\x80\xa600CgCompute the approximate reciprocal of packed 16-bit \xe2\x80\xa600CcCompute the approximate reciprocal of the lower \xe2\x80\xa600ClSubtract packed double-precision (64-bit) floating-point \xe2\x80\xa600CjSubtract packed half-precision (16-bit) floating-point \xe2\x80\xa600ClSubtract packed single-precision (32-bit) floating-point \xe2\x80\xa600C`Subtract the lower double-precision (64-bit) \xe2\x80\xa600CmSubtract the lower half-precision (16-bit) floating-point \xe2\x80\xa600C`Subtract the lower single-precision (32-bit) \xe2\x80\xa600CfCompute the bitwise XOR of packed double-precision \xe2\x80\xa600CfCompute the bitwise XOR of packed single-precision \xe2\x80\xa600CnCompare the lower double-precision (64-bit) floating-point \xe2\x80\xa600ClCompare the lower half-precision (16-bit) floating-point \xe2\x80\xa600CnCompare the lower single-precision (32-bit) floating-point \xe2\x80\xa600222111000CnFinds the minimum unsigned 16-bit element in the 128-bit __\xe2\x80\xa600CeSet each bit of mask register k based on the most \xe2\x80\xa600ClSubtracts 8-bit unsigned integer values and computes the \xe2\x80\xa600C`Multiply the lower double-precision (64-bit) \xe2\x80\xa600CmMultiply the lower half-precision (16-bit) floating-point \xe2\x80\xa600C`Multiply the lower single-precision (32-bit) \xe2\x80\xa600ClMultiplies packed 16-bit signed integer values, truncate \xe2\x80\xa600EdConverts packed 16-bit integers from <code>a</code> and <code>b</code> to packed \xe2\x80\xa600EdConverts packed 32-bit integers from <code>a</code> and <code>b</code> to packed \xe2\x80\xa600ChFor each packed 16-bit integer maps the value to the \xe2\x80\xa600ChFor each packed 32-bit integer maps the value to the \xe2\x80\xa600ChFor each packed 64-bit integer maps the value to the \xe2\x80\xa600DnShuffles bytes from <code>a</code> according to the content of <code>b</code>.00DdStores the lower 64-bit integer <code>a</code> to a memory location.00CnStore 128-bits (composed of 8 packed 16-bit integers) from \xe2\x80\xa600CnStore 128-bits (composed of 4 packed 32-bit integers) from \xe2\x80\xa600CnStore 128-bits (composed of 2 packed 64-bit integers) from \xe2\x80\xa600D`Stores 128-bits of integer data from <code>a</code> into memory.00ChStores a 128-bit integer vector to a 128-bit aligned \xe2\x80\xa600C`Subtract the lower double-precision (64-bit) \xe2\x80\xa600CmSubtract the lower half-precision (16-bit) floating-point \xe2\x80\xa600C`Subtract the lower single-precision (32-bit) \xe2\x80\xa600CeReturns vector of type __m128d with indeterminate \xe2\x80\xa600DcReturn vector of type <code>__m128h</code> with indetermination \xe2\x80\xa600CdReturns vector of type __m128 with indeterminate \xe2\x80\xa600CjLoad tile configuration from a 64-byte memory location \xe2\x80\xa600Da&lt; Time of last access in microseconds since unix epoch, -1 \xe2\x80\xa6Dk<strong>Gets</strong> the attribute: the minimum number of bits for the \xe2\x80\xa60BmAdds an already built effect into this track.000DdFilter using <code>AddByteToHalf</code>: D = saturation255(S/2 + C).BgIf true, will add SDL mappings from \xe2\x80\xa6CmReturns the ABI-required minimum alignment of the type of \xe2\x80\xa600Ea<code>Copy</code> a slice into this <code>Bump</code> and return an exclusive \xe2\x80\xa6BmThe allocation limit for this arena in bytes.DfApply the function <code>f</code> to each channel except the alpha \xe2\x80\xa6ChReturns the contents of this address if it is in the \xe2\x80\xa6ClConverts an OS string slice to a byte slice.  To convert \xe2\x80\xa6BbGets the buffer memory as a slice.BkReturns a raw mutable byte pointer to self.DfYields a mutable reference to the underlying <code>OsString</code> \xe2\x80\xa6CfGet an exclusive reference to the value within the \xe2\x80\xa6DgGet a shared reference to the value within the <code>UnsafeCell</code>.CmA guard for unsafe functions that cannot ever be executed \xe2\x80\xa600Ea<code>core</code> Makes a <em>soundness</em> promise to the compiler that the \xe2\x80\xa60E`Makes a <em>soundness</em> promise to the compiler that <code>cond</code> holds.000BcDrops the contained value in place.DmReads the value from the <code>MaybeUninit&lt;T&gt;</code> container. The \xe2\x80\xa6DkStores a value if the current value is the same as the <code>old</code> \xe2\x80\xa600CmThis macro uses forward-mode automatic differentiation to \xe2\x80\xa600CmThis macro uses reverse-mode automatic differentiation to \xe2\x80\xa600CiRead data and append it to the current content of the \xe2\x80\xa6AoDecode a base64-encoded string.BiEncode data to base64 and null-terminate.BaInitialize an AVBlowfish context.CbEscape the content in src and append it to dstbuf.CnSame as av_buffer_alloc(), except the returned buffer will \xe2\x80\xa6BjCreate an AVBuffer from an existing array.BaInitialize an AVCAMELLIA context.Ck@file @brief Public header for libavutil CAMELLIA algorithmClGet the codec tag for the given codec id id. If no codec \xe2\x80\xa6BcIterate over all registered codecs.CjGet the maximum data alignment that may be required by \xe2\x80\xa6CnGet an initialized standard CRC table. @param crc_id ID of \xe2\x80\xa6DaAdd an element of size <code>elem_size</code> to a dynamic array.Cm@return number of elements available for reading from the \xe2\x80\xa6ClResize an AVFifoBuffer. In case of reallocation failure, \xe2\x80\xa6BhAttempt to find a specific tag in a URL.ChEnsure the destination frame refers to the same data \xe2\x80\xa6CnReturn the flags which specify extensions supported by the \xe2\x80\xa6ClGet the name of the algorithm corresponding to the given \xe2\x80\xa6CbGet the size of the resulting hash value in bytes.AiGet the current log levelAaSet the log levelBcAllocate an AVMurMur3 hash context.BgFinish hashing and output digest value.BcIterate over all registered muxers.AmSerialize object\xe2\x80\x99s options.CiSet all the options from a given dictionary on an object.oParse a packet.BhSend a nice dump of a packet to the log.BgAllocate, reallocate, or free an array.CeRescale a timestamp while preserving known durations.CgRescale a 64-bit integer by 2 rational numbers with \xe2\x80\xa6AbUpdate hash value.CnAllocate a samples buffer for nb_samples samples, and fill \xe2\x80\xa61BmReduce packet size, correctly zeroing paddingCbInit a timecode struct with the passed parameters.CeAllocate an AVTWOFISH context To free the struct: \xe2\x80\xa6CnEncrypt or decrypt a buffer using a previously initialized \xe2\x80\xa6CmWrite the stream trailer to an output media file and free \xe2\x80\xa61BmReturns the amount of available RAM in bytes.AoReturn the libavdevice license.BlReturn the LIBAVDEVICE_VERSION_INT constant.BoLanewise average of the <code>u8</code> values.0AnAverage <code>u8</code> lanes.0AoReturn the libavfilter license.BlReturn the LIBAVFILTER_VERSION_INT constant.AoReturn the libavformat license.BlReturn the LIBAVFORMAT_VERSION_INT constant.ClReturn the written size and a pointer to the buffer. The \xe2\x80\xa6CmRead a UTF-16 string from pb and convert it to UTF-8. The \xe2\x80\xa6CnConvert an UTF-8 string to UTF-16BE and write it. @param s \xe2\x80\xa6CnConvert an UTF-8 string to UTF-16LE and write it. @param s \xe2\x80\xa6CkReturns <code>AxisOrBtn</code> mapped to <code>Code</code>.AgConfigures the backend.AeThe background color.CjReturns the value that would be obtained by taking the \xe2\x80\xa6000000DfBinary searches this <code>VecDeque</code> with a comparator function.DfExtract a span of bits from the <code>u32</code>, control value style.0DfExtract a span of bits from the <code>u64</code>, control value style.0CaThe size in bits of the <code>FLAG1</code> field.0CaThe size in bits of the <code>FLAG2</code> field.0CaThe size in bits of the <code>MASK0</code> field.0DkA variant of <code>bridge_producer_consumer()</code> where the producer \xe2\x80\xa6CkCalculates the distance between two pointers within the \xe2\x80\xa6BnCalculates the ceiled magnitude of the vector.0CiReturns the normalized vector, using the given vector \xe2\x80\xa60DeGet the standardised <code>reason-phrase</code> for this status code.DiReturns the same as <code>Regex::captures_read</code>, but starts the \xe2\x80\xa6CjPerforms full-width multiplication and addition with a \xe2\x80\xa600ClThis configures whether to enable ASCII case insensitive \xe2\x80\xa6CkAbsolute scale factor representing the nominal level of \xe2\x80\xa6CcAEAD ChaCha20Poly1305 as specified in the RFC 8439.CmThis function checks the <code>max_image_width</code> and \xe2\x80\xa6CiReturns whether we should perform some UB-checking at \xe2\x80\xa60AmDivides a vector by a scalar.0B`Multiplies a vector by a scalar.0DkCreates an interval $[l, \xe2\x88\x9e)$ <code>lower..</code> <code>RangeFrom</code>.AmLanewise <code>a == b</code>.0BdLanewise <code>a &amp;gt;= b</code>.B`Lanewise <code>a &gt;= b</code>.BcLanewise <code>a &amp;gt; b</code>.AoLanewise <code>a &gt; b</code>.BdLanewise <code>a &amp;lt;= b</code>.B`Lanewise <code>a &lt;= b</code>.BcLanewise <code>a &amp;lt; b</code>.AoLanewise <code>a &lt; b</code>.DhCompare <code>f32</code> lanes according to the operation specified, \xe2\x80\xa6000AaAVCodecDescriptorCkCollects the results of the iterator into the specified \xe2\x80\xa60CeCollects this iterator into a linked list of vectors.0BbReturns <code>NotSupported</code>.DeThis is less efficent than <code>HashSet::contains</code> for not \xe2\x80\xa6DfThis is less efficent than <code>BTreeSet::contains</code> for not \xe2\x80\xa6DjCounts the number of times a given <code>element</code> appears in the \xe2\x80\xa600CmThe default is 0. The index of the font to use if parsing \xe2\x80\xa6DiStores a value into the <code>bool</code> if the current value is the \xe2\x80\xa6CkStores a value into the pointer if the current value is \xe2\x80\xa6CiStores a value into the atomic integer if the current \xe2\x80\xa6000000000DkStores a value into the <code>Atomic</code> if the current value is the \xe2\x80\xa63211111111CmStores a value into the atomic float if the current value \xe2\x80\xa622022432222222222BkDeallocates a memory which allocated by \xe2\x80\xa600EeReturns <code>true</code> if the array contains <code>element</code>, between the \xe2\x80\xa6Dh<strong>Gets</strong> the attribute: disables OpenGL error checking; \xe2\x80\xa6DcCopy the low <code>i64</code> lane to a new register, upper bits 0.0DiCopies all audio data from the source <code>AudioBuffer</code> to the \xe2\x80\xa6EdCounts the number of 1s in <code>self</code> from the <code>[start..=end]</code> \xe2\x80\xa600000000000AmDefines a new exception type.DhCreates a <code>Formatter</code> that writes its output to the given \xe2\x80\xa6CiReturns the number of samples before the current span \xe2\x80\xa60CjReturns the current span length of the underlying decoder.CjProvides a cursor with editing operations at the front \xe2\x80\xa6CjReturns the alignment of the value represented by this \xe2\x80\xa60BaL1 data cache line size in bytes.ClRemove duplicates from sections of consecutive identical \xe2\x80\xa6000EcHint that the <code>Deserialize</code> type is expecting a <code>bool</code> value.0EcHint that the <code>Deserialize</code> type is expecting a <code>char</code> value.0DjHint that the <code>Deserialize</code> type is expecting an enum value \xe2\x80\xa60EdHint that the <code>Deserialize</code> type is expecting an <code>i128</code> value.0EdHint that the <code>Deserialize</code> type is expecting an <code>u128</code> value.0DfHint that the <code>Deserialize</code> type is expecting a unit value.0DiReturns the number of digits in the given absolute <code>base</code>, \xe2\x80\xa6BeAn alias of <code>digits_base</code>.AbDisables raw mode.AfDisables the raw mode.11EdDivides <code>Duration</code> by <code>Duration</code> and returns <code>f32</code>.CkDivides this signed duration by another signed duration \xe2\x80\xa6EdDivides <code>Duration</code> by <code>Duration</code> and returns <code>f64</code>.1CaReturns the quotient, rounding ties towards zero.0CjPerforms a dot product of two <code>m128</code> registers.0DaThis works like <code>dot_product_m128</code>, but twice as wide.0CcReturns the surrounding whitespace for between dots0BmL1 Data TLB number of entries for 1-GB pages.BmL2 Data TLB number of entries for 1-GB pages.CiEnumerates over the pixels of the image. The iterator \xe2\x80\xa6DaReturns the current timestamp as an <code>f64</code> value in \xe2\x80\xa600DhDetermines the number of terms needed for <code>exp_series</code> to \xe2\x80\xa6CnBit set of AV_CODEC_EXPORT_DATA_* flags, which affects the \xe2\x80\xa6CaReturns the family name of the current font face.GbConverts an <code>Either</code> of <code>Iterator</code>s to be an <code>Iterator</code> of <code>Either</code>\xe2\x80\xa6CdFade in over ms milliseconds of time, from position.EdReturns a copy of <code>self</code> flipping the bit at <code>index</code>, checked.00DnReturns a copy of <code>self</code> with the <code>FLAG1</code> field flipped.0DnReturns a copy of <code>self</code> with the <code>FLAG2</code> field flipped.0DnReturns a copy of <code>self</code> with the <code>MASK0</code> field flipped.0ChFlip an image vertically and put the result into the \xe2\x80\xa6CkSplits an iterator into fixed-size chunks, performing a \xe2\x80\xa60AeThe foreground color.CgMaximum number of bytes read from input in order to \xe2\x80\xa6Cl\xe2\x80\x98,\xe2\x80\x99 separated list of allowed demuxers. If NULL then \xe2\x80\xa6CmTrue if a frame is currently wanted on the output of this \xe2\x80\xa6CgThe number of frames per block, in case packets are \xe2\x80\xa6BbConvert from a bits value exactly.00000000000000000000EeReturns a string from an array of <code>bytes</code>, truncated to <code>n</code> \xe2\x80\xa6BfReturns the current working directory.CiCreate an <code>EncodingError</code> for an image format.ChCreate a <code>DecodingError</code> for an image format.CdCreates a new instant in time from the number of \xe2\x80\xa60DeConstructs a box from a <code>NonNull</code> pointer in the given \xe2\x80\xa60DhCreates a new Xoroshiro128++ PRNG, seeded from <code>RandomState</code>.0DfCreate from a packed <code>u32</code> in <code>0xRRGGBB</code> format.EcCreate from a packed <code>u32</code> in <code>0xRRGGBB</code> format, with the \xe2\x80\xa610DgDecode a native endian UTF-16\xe2\x80\x93encoded slice <code>v</code> into a \xe2\x80\xa6CeReturns the type of fullscreen that the window is \xe2\x80\xa6CjGenerate a new set of results immediately, setting the \xe2\x80\xa60AoGenerate random X25519 keypair.AnReturns the current precision.DjAttempts to get mutable references to <code>N</code> values in the map \xe2\x80\xa6CjQuery a set of features that are available on this CPU \xe2\x80\xa6ChReturns the boolean value that was previously set by \xe2\x80\xa6CeReturns the number of microsecond units in this span.ChReturns the number of microseconds, as an int from 0 \xe2\x80\xa6CeReturns the number of millisecond units in this span.DkGet player index for game controller or <code>None</code> if it\xe2\x80\x99s not \xe2\x80\xa6DdGet player index for joystick or <code>None</code> if it\xe2\x80\x99s not \xe2\x80\xa6CnThis flag affects integer VertexFormats, Byte*, Short*, Int\xe2\x80\xa60CkAttribute macro applied to a static to register it as a \xe2\x80\xa600000000000000ClReturns \xe2\x80\x9cglobal\xe2\x80\x9d CPUs usage (aka the addition of all \xe2\x80\xa6DkReturns an iterator over the grapheme clusters of <code>self</code> and \xe2\x80\xa6CkComputes the Hamming edit distance between two strings, \xe2\x80\xa6AjHanging baseline position.0AoHas 100 MHz multiplier Control?lAVX512BITALGBaFlexible HWP is supported if set.AeFrequency ID control.BlDetermines whether two rectangles intersect.0ChIndicates support for the pause intercept filter if set.CiA value of 1 indicates that the processors local APIC \xe2\x80\xa6DiIndicates support for MSR TSC ratio (MSR <code>0xC000_0104</code>) if \xe2\x80\xa6CaIntel\xc2\xae Turbo Boost Max Technology 3.0 available.AcVoltage ID control.CkApplies a high-pass filter to the source while allowing \xe2\x80\xa60ChThe default is Left. This option does nothing if the \xe2\x80\xa6BhL1 instruction cache line size in bytes.ClRead a tuple containing the (width, height) of the image \xe2\x80\xa6CjDefines a Rust type for an exception defined in Python \xe2\x80\xa6EeCreates a mismatch where <code>need</code> is an <code>Interval::open</code>, and \xe2\x80\xa6CnInput buffer to write to. This can be called despite there \xe2\x80\xa6ClInserts an already formatted value at the given position \xe2\x80\xa6BfInserts a key-value pair into the map.0BdReturns the digital root in base 10.00CjReturns the quotient, rounding ties to the nearest odd \xe2\x80\xa600B`Calls `NumInt::int_ref_div_ceil.00CgSimilar to int_div_ceil, but operates on references \xe2\x80\xa600B`Calls `NumInt::int_ref_is_prime.00CgSimilar to int_is_prime, but operates on references \xe2\x80\xa600B`Calls `NumInt::int_ref_midpoint.00CgSimilar to int_midpoint, but operates on references \xe2\x80\xa600B`Calls `NumInt::int_ref_prime_pi.00CgSimilar to int_prime_pi, but operates on references \xe2\x80\xa600ChReturns the subfactorial, or the number of derangements.00CgThe USB interface which this logical device represents.BiThe content of the picture is interlaced.ClAn iterator adaptor to insert a particular value created \xe2\x80\xa60ClCreates a new iterator which places an item generated by \xe2\x80\xa600000001100000000000000DfIterate <code>iterable</code> with a particular value created by a \xe2\x80\xa6DbConverts this <code>CString</code> into a boxed <code>CStr</code>.DgConverts a <code>Box&lt;T&gt;</code> into a <code>Box&lt;[T]&gt;</code>CeConverts the vector into <code>Box&lt;[T]&gt;</code>.010CkReturns an iterator which retrieves elements in heap order.CiConsume the image and returns a <code>LumaA</code> image.CbConsume self and read the body with configuration.CjReturns a version of the angle with inverted direction \xe2\x80\xa6CgReturns a version of the angle with inverted direction.0AlIs the window always on top?DjReturns <code>true</code> if this address is in a range designated for \xe2\x80\xa60D`Returns <code>true</code> if this is an address reserved for \xe2\x80\xa6BbQuery if an event type is enabled.CjChecks if <code>object</code> is an instance of this type.0BbCheck if status is within 100-199.BeChecks if the lower bound is bounded.BhTells if this duration will ever happen.DoDetermines if <code>File</code> has an efficient <code>read_vectored</code> \xe2\x80\xa6EfDetermines if this <code>Read</code>er has an efficient <code>read_vectored</code> \xe2\x80\xa60000DcReturns <code>true</code> if <code>self</code> has a negative sign.00ClReturns true for each element if it has a negative sign, \xe2\x80\xa600000DcReturns <code>true</code> if <code>self</code> has a positive sign.00ClReturns true for each element if it has a positive sign, \xe2\x80\xa600000ClChecks if the elements of this iterator are sorted using \xe2\x80\xa6000000000000000000000BeChecks if the upper bound is bounded.DfChecks whether the current variant is at <code>index</code> (0-based).CjBit-granular map of isolation/contention of allocation \xe2\x80\xa60CdL1 Instruction TLB number of entries for 1-GB pages.CdL2 Instruction TLB number of entries for 1-GB pages.CnReturn the elements producing the k largest outputs of the \xe2\x80\xa6000CkReturns the value of the ftLastAccessTime field of this \xe2\x80\xa6CmGets the numeric limit of the limit, or default value. If \xe2\x80\xa6BhApplies a linear gain ramp to the sound.0DjReturns the <strong>linear-light perceptual</strong> value (experimental).00000CgCreates settings optimized for live performance and \xe2\x80\xa6CfLoads the reference into the low lane of the register.0BdCreate a new image from a byte sliceBoLoads the low <code>i64</code> into a register.0CjLoad data from memory into a register according to a mask.000Ck(replace) Replaces the current document with the given URL,DjLock this <code>Mutex</code> in a manner that cannot deadlock with the \xe2\x80\xa6CkThe maximum allowed image height. This limit is strict. \xe2\x80\xa60CgReturns the alignment of the pointed-to value in bytes.00EaView a <code>Sync + Unpin</code> <code>self</code> as <code>&amp;mut [u8]</code>.00CmReturns the ABI-required minimum alignment of the type of \xe2\x80\xa600DiReturns the minimum haystack length that this <code>Finder</code> can \xe2\x80\xa60EdComputes the non-negative modulo of <code>self</code> over <code>modulus</code>, \xe2\x80\xa6DfReturns the middle exclusive sub-<code>slice</code> with the given \xe2\x80\xa6BoComputes <code>(x * mul + add)</code> normally.DjMultiply two <code>u32</code>, outputting the low bits and storing the \xe2\x80\xa60DjMultiply two <code>u64</code>, outputting the low bits and storing the \xe2\x80\xa60DgGets the value of the <code>IP_MULTICAST_TTL</code> option for this \xe2\x80\xa6CiReturns a new builder with the multi thread scheduler \xe2\x80\xa6ClConstructs a new atomically reference-counted slice with \xe2\x80\xa6CiConstructs a new boxed slice with uninitialized contents.CaConstructs a new reference-counted slice with \xe2\x80\xa612DfCreate a new encoder that writes its output to <code>w</code> with \xe2\x80\xa6DjCreate a new encoder that writes its output to <code>w</code>, and has \xe2\x80\xa6CmConstructs a new boxed slice with uninitialized contents, \xe2\x80\xa6305DhFinds the next <code>Reject</code> result. See <code>next_back()</code>.0000DoImplement <code>next_u64</code> via <code>next_u32</code>, little-endian order.DhFilter using <code>NormalizeLinear</code>: D = saturation255((Nmax - \xe2\x80\xa6BlNumber of physical threads in the processor.DhExecutes function <code>f</code> just after a thread unparks (starts \xe2\x80\xa6ClReturns the (default) maximum number of open files for a \xe2\x80\xa6ClReturns the maximum number of open files for the current \xe2\x80\xa6ClEnsures a value is in the entry by inserting the default \xe2\x80\xa6ClOutput timestamp offset, in microseconds. Muxing: set by \xe2\x80\xa6CiReturns the number of incoming packets since the last \xe2\x80\xa6ChReturns a parallel iterator over the characters of a \xe2\x80\xa60ChReturns a parallel iterator over the slice producing \xe2\x80\xa60DhReturns a parallel iterator over <code>chunk_size</code> elements of \xe2\x80\xa60ChReturns a parallel iterator over a string encoded as \xe2\x80\xa60CnParse a datetime string with a time zone annotation into a \xe2\x80\xa6EhPartition a sequence of <code>Result</code>s into one list of all the <code>Ok</code>\xe2\x80\xa6000EaPauses execution until receiving from <em>stdin</em> any <code>char</code> in \xe2\x80\xa6CbFormat <code>Pieces</code> of a Temporal datetime.DmAs <code>align_to_mut</code>, but safe because of the <code>Pod</code> bound.CnProvides a reference computed using a closure. The referee \xe2\x80\xa6BiAdd an element to the front of the queue.0CjReturns a subslice up to the given <code>end</code> index.ChRetrieves the layout rasterized bitmap for the given \xe2\x80\xa6CnRepresents raw hardware mouse motion event Note that these \xe2\x80\xa6000ClReads up-to the number of bytes requested, and returns a \xe2\x80\xa6DiUse <code>read_image</code> instead; this method is an implementation \xe2\x80\xa6CiReads and returns a unary zeros encoded integer or an \xe2\x80\xa60DhLike <code>read_at</code>, except that it reads into a slice of buffers.0CnReduces the given value to a chain of appropriate prefixes \xe2\x80\xa60ClReduces the given value to a chain of appropriate binary \xe2\x80\xa6ChReduces the given value to a chain of appropriate SI \xe2\x80\xa6AjRefreshes the list of CPU.CmSets how much time it takes for the volume attenuation to \xe2\x80\xa6CnHow much time it takes for the volume attenuation to relax \xe2\x80\xa6BgReturns the remaining available memory.Cnreordered opaque 64 bits (generally an integer or a double \xe2\x80\xa6Cgopaque 64-bit number (generally a PTS) that will be \xe2\x80\xa6CmReserve num channels from being used when playing samples \xe2\x80\xa6AiReturn right or a defaultCdDescribe a row-major image packed in all directions.EcAsserts the state is <code>None</code> and returns <code>self</code>, otherwise \xe2\x80\xa6EcAsserts the state is <code>Some</code> and returns <code>self</code>, otherwise \xe2\x80\xa6BmNumber of past samples sent through the link.CkSaves the buffer to a file at the specified path in the \xe2\x80\xa60DgModifies the watched value <strong>conditionally</strong> in-place, \xe2\x80\xa6CmAlternates between two parsers, merging the results (left \xe2\x80\xa6CnAlternates between two parsers, merging the results (right \xe2\x80\xa6BdBegin to serialize a struct like \xe2\x80\xa60ChSets the global logger to a <code>Box&lt;Log&gt;</code>.0CkSet the display mode to use when a window is visible at \xe2\x80\xa6CcSets a device independent resolution for rendering.CaSet the maximum size of a window\xe2\x80\x99s client area.CaSet the minimum size of a window\xe2\x80\x99s client area.AjSet the mouse cursor icon.0DjSet player index for game controller or <code>None</code> to clear the \xe2\x80\xa6DjSet player index for joystick or <code>None</code> to clear the player \xe2\x80\xa6BoSets the read timeout to the timeout specified.0BeSets the read timeout for the socket.0Dj<strong>Sets</strong> the attribute: the minimum number of bits in the \xe2\x80\xa6CiSets the stereo width of the reverb effect (0.0 being \xe2\x80\xa6CmDisable or enable automatic state updates. You should use \xe2\x80\xa6CkSets the underlying window flags. This will effectively \xe2\x80\xa6EaFilter using <code>ShiftRightUint</code>: D = saturation0((uint)S[i] &gt;&gt; \xe2\x80\xa6B`Show a customizable message box.DiShuts down the runtime, waiting for at most <code>duration</code> for \xe2\x80\xa6CgRegisters multiple signals using a handler function \xe2\x80\xa6BbExtracts an element from a vector.00AkReads a vector of pointers.00DkComputes <code>(x*y) + z</code> for each element, non-deterministically \xe2\x80\xa600BhSkip loop filtering for selected frames.CiGets a mutable pointer to the first element of the array.G`Converts <code>&amp;[T]</code> to <code>[U; N]</code> when <code>U</code> implements <code>From&lt;T&gt;</code>.0DhReturns a mutable left subslice of <code>slice</code> with the given \xe2\x80\xa60DiReturns a mutable right subslice of <code>slice</code> with the given \xe2\x80\xa60BiAdd an element to the front of the stack.0CbGet an iterator over all standard channel layouts.DkConditionally write contiguous elements starting from <code>ptr</code>. \xe2\x80\xa6CkStores the low lane value to all lanes of the reference \xe2\x80\xa60CnSubtitles character encoding mode. Formats or codecs might \xe2\x80\xa6DiConvenience macro for declaring a probe <code>Descriptor</code> for a \xe2\x80\xa6CmGets a list of codec descriptors for the codecs supported \xe2\x80\xa6FaReplaces the <code>state</code> self with a <code>new_state</code> and the <code>value</code> \xe2\x80\xa6CmRemoves an element from anywhere in the deque and returns \xe2\x80\xa6BaGenerate a channel mixing matrix.CeConfigure or reconfigure the SwrContext using the \xe2\x80\xa6BlInitialize the swscaler context sws_context.ClScale all the coefficients of a so that their sum equals \xe2\x80\xa6CgQueries the metadata about a file without following \xe2\x80\xa600BaPerforms an rt_sigaction syscall.DhComputes the Levenshtein edit distance between <code>self</code> and \xe2\x80\xa6CkReturns an iterator over all non-overlapping matches of \xe2\x80\xa6A`Threads per coreFjRecognizes a string of 0+ characters until <code>&quot;\\r\\n&quot;</code>, <code>&quot;\\n&quot;</code>, \xe2\x80\xa6CaTimeout for call-by-call when following redirectsCmRounds toward zero and converts to the same-width integer \xe2\x80\xa600000DjConverts a <code>EventButtonState</code> into a <code>WebEventKind</code>.CkReturns a copy of this image as a <code>LumaA</code> image.D`Convert the error to <code>LINUX_EXIT</code> without validation.EhConvert to a packed <code>u64</code> in <code>0xRRRRGGGGBBBBAAAA</code> format, with \xe2\x80\xa6EbConvert to a packed <code>u64</code> in <code>0xRRRRGGGGBBBBAAAA</code> format \xe2\x80\xa610ChSerialize the given data structure as a \xe2\x80\x9cpretty\xe2\x80\x9d \xe2\x80\xa6AkTotal number of read bytes.ClReturns the number of trailing ones in an unsigned 8-bit \xe2\x80\xa6CnAudio only. The amount of padding (in samples) appended by \xe2\x80\xa60jAudio only00FlTransposes <code>Option&lt;Result&lt;T, E&gt;&gt;</code> into <code>Result&lt;Option&lt;T&gt;, E&gt;</code>.0CkTries to acquire <code>n</code> permits from the semaphore.CkAttempts to allocate space for an object with the given \xe2\x80\xa6ChTry to cast to a pointer of another type by checking \xe2\x80\xa6B`Insert the value into the entry.CnSet the number of microseconds on this span. The value may \xe2\x80\xa6CnSet the number of milliseconds on this span. The value may \xe2\x80\xa6DhTries to acquire <code>n</code> slots in the channel without waiting \xe2\x80\xa6CmReturns the type name of the pointed-to value as a string \xe2\x80\xa600DjCreates an interval $(-\xe2\x88\x9e, u]$ <code>..upper</code> <code>RangeTo</code>.C`Sets the underline color to <code>Yellow</code>.DfUnpack and interleave high lanes of <code>a</code> and <code>b</code>.0DeUnpack and interleave low lanes of <code>a</code> and <code>b</code>.0CkReturns the pixel located at (x, y). Indexed from top left.ChReturns the pixel located at (x, y), ignoring bounds \xe2\x80\xa6CgPuts a pixel at location (x, y). Indexed from top left.CjPuts a pixel at location (x, y), ignoring bounds checking.EeReturns the contained <code>Some</code> value, consuming the <code>self</code> value,EgReturns the contained <code>Ok</code> value, consuming the <code>self</code> value, \xe2\x80\xa6CfUpgrade the weakref to a exact direct Bound object \xe2\x80\xa60DkReturns the UTF-8 byte length or <code>None</code> if the first byte is \xe2\x80\xa6EcAsserts the value is <code>None</code> and returns <code>self</code>, otherwise \xe2\x80\xa6EcAsserts the value is <code>Some</code> and returns <code>self</code>, otherwise \xe2\x80\xa6CnA list of possible values for format in the hw_frames_ctx, \xe2\x80\xa6CbA list of possible values for sw_format in the \xe2\x80\xa6FjTries to convert <code>Vec&lt;T&gt;</code> to <code>Vec&lt;U&gt;</code> when <code>U</code> implements \xe2\x80\xa60CnSimultaneously waits for the child to exit and collect all \xe2\x80\xa6DaReturns a future that will resolve to an <code>Output</code>, \xe2\x80\xa6CgCreate a tree-like prefix parallel iterator from an \xe2\x80\xa6D`Whether the window should be <code>resizable</code> by the user.CeIf <code>true</code>, the user can resize the window.00DkCreates an empty <code>HashMap</code> with the specified capacity using \xe2\x80\xa6DhCreates an empty <code>BinaryHeap</code> with at least the specified \xe2\x80\xa6DbCreates an empty <code>HashSet</code> with the specified capacity.DhCreates an empty deque with space for at least <code>capacity</code> \xe2\x80\xa6DjConstructs a new, empty <code>Vec&lt;T, A&gt;</code> with at least the \xe2\x80\xa60EcConstructs a new, empty <code>Vec&lt;&#39;bump, T&gt;</code> with the specified \xe2\x80\xa6DcCreates a new empty <code>String</code> with a particular capacity.DgCreates an empty <code>HashTable</code> with the specified capacity \xe2\x80\xa6CkEnables or disables coarse seeking. This is disabled by \xe2\x80\xa6EcReturns a new <code>ExampleBitfieldCustom</code> with <code>FLAG1</code> field set.DmReturns a new <code>ExampleBitfield</code> with <code>FLAG1</code> field set.EcReturns a new <code>ExampleBitfieldCustom</code> with <code>FLAG2</code> field set.DmReturns a new <code>ExampleBitfield</code> with <code>FLAG2</code> field set.EcReturns a new <code>ExampleBitfieldCustom</code> with <code>MASK0</code> field set.DmReturns a new <code>ExampleBitfield</code> with <code>MASK0</code> field set.DoCreates a new instance of an <code>RwLock&lt;T&gt;</code> which is unlocked \xe2\x80\xa6DfConverts the cursor into a <code>CursorMutKey</code>, which allows \xe2\x80\xa60AnProvide the sample rate in Hz.DhSets the value of the \xe2\x80\x9cio_usage\xe2\x80\x9d refresh kind to <code>false</code>.ClReturns the Surface\xe2\x80\x99s pixel buffer if the Surface doesn\xe2\x80\xa6CeChecks if this worker is still active by querying \xe2\x80\xa6CnThe default is true. This option enables hard breaks, like \xe2\x80\xa6B`Reports the error as unraisable.CeZero extend an <code>m128</code> to <code>m256</code>0DkAllocates a <code>Arc&lt;[T]&gt;</code> with all contents being zeroed out.0CjAs <code>try_zeroed_slice_box</code>, but unwraps for you.0CjAn <code>AtomicIsize</code> initialized to <code>0</code>.00CjAn <code>AtomicUsize</code> initialized to <code>0</code>.00Bl&lt; MPEG-2/4 4:2:0, H.264 default for 4:2:0Da&lt; also ITU-R BT601-6 625 / ITU-R BT1358 625 / ITU-R BT1700 \xe2\x80\xa6Cl&lt; EBU Tech. 3213-E (nothing there) / one of JEDEC P22 \xe2\x80\xa61Ci&lt; also ITU-R BT470M / ITU-R BT1700 625 PAL &amp; SECAMAg&lt; also ITU-R BT470BGCjThis struct describes the properties of a single codec \xe2\x80\xa6CjThis struct describes the properties of an encoded stream.Cg&lt; discard useless packets like 0 size packets in avib@}BoParameters of a filter\xe2\x80\x99s input or output pad.CmThis struct aggregates all the (hardware/vendor-specific) \xe2\x80\xa6CiThis struct describes a set or pool of \xe2\x80\x9chardware\xe2\x80\x9d \xe2\x80\xa6Bo&lt; Opaque data information usually continuous4jSee above.CcThe maximum number of layers/planes in a DRM frame.CnActive Format Description data consisting of a single byte \xe2\x80\xa6Ae&lt; Bi-dir predictedj&lt; Intran&lt; PredictedAf&lt; S(GMC)-VOP MPEG-4Dc&lt; interleaved chroma YUV 4:2:2, 20bpp, (1 Cr &amp; Cb sample \xe2\x80\xa60AmHardware surfaces for OpenCL.Cn&lt; like NV12, with 10bpp per component, data in the high \xe2\x80\xa60Cn&lt; like NV12, with 12bpp per component, data in the high \xe2\x80\xa60Cd&lt; like NV12, with 16bpp per component, big-endianCg&lt; like NV12, with 16bpp per component, little-endianCn&lt; interleaved chroma YUV 4:2:2, 20bpp, data in the high \xe2\x80\xa60Cn&lt; interleaved chroma YUV 4:2:2, 24bpp, data in the high \xe2\x80\xa60Cd&lt; interleaved chroma YUV 4:2:2, 32bpp, big-endianCg&lt; interleaved chroma YUV 4:2:2, 32bpp, little-endianCn&lt; interleaved chroma YUV 4:4:4, 30bpp, data in the high \xe2\x80\xa60Cn&lt; interleaved chroma YUV 4:4:4, 36bpp, data in the high \xe2\x80\xa60Cd&lt; interleaved chroma YUV 4:4:4, 48bpp, big-endianCg&lt; interleaved chroma YUV 4:4:4, 48bpp, little-endianAgVulkan hardware images.Cl&lt; packed XVYU 4:4:4, 32bpp, (msb)2X 10V 10Y 10U(lsb), \xe2\x80\xa60Co&lt; packed XVYU 4:4:4, 48bpp, data in the high bits, zeros \xe2\x80\xa60Co&lt; packed YUV 4:2:2 like YUYV422, 20bpp, data in the high \xe2\x80\xa60Co&lt; packed YUV 4:2:2 like YUYV422, 24bpp, data in the high \xe2\x80\xa60Bm&lt; 16 bits gray, 16 bits alpha (big-endian)C`&lt; 16 bits gray, 16 bits alpha (little-endian)Cg&lt; Round to nearest and halfway cases away from zero.k&lt; doublej&lt; floatAc&lt; signed 16 bitsAc&lt; signed 32 bitsAc&lt; signed 64 bitsAl&lt; unsigned 8 bits, planarBlViews are packed per line, as if interlaced.ClFor this type of cast the alignments must be exactly the \xe2\x80\xa6DgStandardized tuple type specifiers in the header of a <code>pam</code>.CgIterator for const generic combinations returned by \xe2\x80\xa60DhAn iterator type over <code>ArrayOfTables</code>\xe2\x80\x99s <code>Table</code>sCcCode to set the background color to bright magenta.Eh\xe2\x9a\x96\xef\xb8\x8f <code>std</code> Returned by <code>Barrier::wait()</code> when all threads in \xe2\x80\xa60EgA <code>BarrierWaitResult</code> is returned by <code>wait</code> when all tasks in \xe2\x80\xa6EeA <code>BarrierWaitResult</code> is returned by <code>Barrier::wait()</code> when \xe2\x80\xa6DePyO3 implementation of an iterator for a Python <code>dict</code> \xe2\x80\xa6BdUsed by <code>PyList::iter()</code>.DaA deserializer holding a <code>&amp;[u8]</code>. Always calls \xe2\x80\xa6CmSpecifies directives that allow origin servers to control \xe2\x80\xa6BkAdaptive Transform Acoustic Coding (ATRAC1)BmAdaptive Transform Acoustic Coding 3 (ATRAC3)BmAdaptive Transform Acoustic Coding 9 (ATRAC9)AlPCM signed 8-bit interleavedAnPCM unsigned 8-bit interleavedfVorbisChCode to move the cursor to the beginning of the next \xe2\x80\xa6000ClCode to move the cursor to the beginning of the previous \xe2\x80\xa6000EfAssociated type for <code>&lt;[char; N] as Pattern&gt;::Searcher&lt;&#39;a&gt;</code>.0000EhAssociated type for <code>&lt;&amp;[char] as Pattern&gt;::Searcher&lt;&#39;a&gt;</code>.0000CkA marker trait that allows types that have some invalid \xe2\x80\xa60ClThe samples are in column-major form and all samples are \xe2\x80\xa6AhConfigures a compressor.CiThe connection was aborted (terminated) by the remote \xe2\x80\xa60000CiThe parameters needed to create a <code>Transport</code>.C`The connection was refused by the remote server.0000ClThe native reader uses the cpuid instruction to read the \xe2\x80\xa60CnGood default sample rate in Hz (samples per second) for PC \xe2\x80\xa6CkThe maximum value for this type of primitive within the \xe2\x80\xa6CkThe minimum value for this type of primitive within the \xe2\x80\xa6fU+00140000B`The dimensions passed are wrong.CfA non-empty directory was specified where an empty \xe2\x80\xa60000AoConfigures a distortion effect.CjError that indicates a failure to convert a PyAny to a \xe2\x80\xa6DiHandle returned by <code>DstQueue::pop</code> (does the actual pop on \xe2\x80\xa60BfCode to enable the alternative screen.BlA command that enables focus event emission.fU+00040000ClAn iterator that calls <code>EventPump::poll_event()</code>.ClAn iterator that calls <code>EventPump::wait_event()</code>.BhAn iterator that knows its exact length.000000000000000000ClA unique sequential identifier <code>usize</code> generator.CjAn interface for types that can directly execute commands.Dg<code>ExponentialBlocks</code> is a parallel iterator that consumes \xe2\x80\xa6CkAn enumeration of color types encountered in image formats.ClInformation for saving/restoring extended register state \xe2\x80\xa6AmYields ExtendedState structs.Bm424 Failed Dependency [RFC4918, Section 11.4]AjFront centre-high channel.BkFront left-of-centre (left center) channel.AgOptions for formatting.0000CcCreate a new error with an external error, from \xe2\x80\xa6DjExpected form of <code>FromPyObject</code> to be used in a future PyO3 \xe2\x80\xa6AcGenerator function.CnConfiguration for rasterizing a glyph. This struct is also \xe2\x80\xa6CkMakes a request conditional based on the modification date.BhThe cell is currently being initialized.DcA view into a single empty location in an <code>InlineTable</code>.CmA given integer was so big that its representation as a C \xe2\x80\xa6BiConverts something into an async iterator00DhInput is not of format <code>{02X}:{02X}:{02X}:{02X}:{02X}:{02X}</code>.CjInput is not of format <code>[IP address]/[number]</code>.Bo\xf0\x9f\xaa\xaa \xf0\x9f\x9a\xa9 The given axis has an invalid length.DiWhen casting to a <code>CheckedBitPattern</code> type, it is possible \xe2\x80\xa6DkA possible error when converting a <code>HeaderName</code> from another \xe2\x80\xa6BiA Latin-1 encoded byte string is invalid.CkA Rust type representing an exception defined in Python \xe2\x80\xa6DkA possible error value when converting a <code>StatusCode</code> from a \xe2\x80\xa6BmA deserializer holding an <code>isize</code>.Di\xf0\x9f\x94\x84 <code>core</code> Creates an iterator where each iteration calls \xe2\x80\xa60Dk\xf0\x9f\x94\x84 <code>std</code> An iterator over <code>Path</code> and its ancestors.0Co\xf0\x9f\x94\x84 <code>core</code> An iterator that knows its exact length.0AbFull Text Metrics.0fU+005B00007Bo301 Moved Permanently [RFC9110, Section 15.4.2]De<code>MediaSourceStream</code> is the main reader type for Symphonia.CfUsed to determine which memory you want to refresh \xe2\x80\xa6Ck\xf0\x9f\xaa\xaa \xf0\x9f\x9a\xa9 The given indices does not match the expected \xe2\x80\xa6Ci\xf0\x9f\x9a\xa9 The given indices does not match the expected order.Ba\xf0\x9f\xaa\xaa \xf0\x9f\x9a\xa9 The link is not unique.Cj\xf0\x9f\xaa\xaa \xf0\x9f\x9a\xa9 There are not enough elements for the operation.Df<code>Mapping</code> have button or axis that are not present in SDL2.AiOrganization-Local scope.00C`413 Payload Too Large [RFC9110, Section 15.5.14]CiThrottle writes only against the bdi I write to, I am \xe2\x80\xa6CnUserland is not allowed to meddle with <code>cpus_mask</code>.Dl<code>set_user()</code> noticed that <code>RLIMIT_NPROC</code> was exceeded.Di<code>ParallelDrainFull</code> creates a parallel iterator that moves \xe2\x80\xa60Di\xf0\x9d\x90\x93\xf0\x9d\x9f\x99\xf0\x9f\x9a\xa9 <code>core</code> Kinds of errors that can cause parsing \xe2\x80\xa60BoPersistent storage access to prevent data loss.0Dj\xe2\x9a\x96\xef\xb8\x8f <code>std</code> Describes the result of a process after it has \xe2\x80\xa60CmThis enum allows you to specify if you want all processes \xe2\x80\xa6CmRepresents Python\xe2\x80\x99s <code>ArithmeticError</code> exception.Aebuilt-in \xe2\x80\x98object\xe2\x80\x99CmRepresents Python\xe2\x80\x99s <code>BlockingIOError</code> exception.CmRepresents Python\xe2\x80\x99s <code>BrokenPipeError</code> exception.CmRepresents Python\xe2\x80\x99s <code>ConnectionError</code> exception.BoPopulates the <code>PyDateTimeAPI</code> objectEaCheck if <code>op</code>\xe2\x80\x99s type is exactly <code>PyDateTimeAPI.DateType</code>.CmRepresents Python\xe2\x80\x99s <code>EncodingWarning</code> exception.CmRepresents Python\xe2\x80\x99s <code>FileExistsError</code> exception.CmRepresents Python\xe2\x80\x99s <code>PermissionError</code> exception.CmRepresents Python\xe2\x80\x99s <code>ResourceWarning</code> exception.ClImplementation of functionality for <code>PySequence</code>.0EaCheck if <code>op</code>\xe2\x80\x99s type is exactly <code>PyDateTimeAPI.TimeType</code>.ClRepresents the major, minor, and patch (if any) versions \xe2\x80\xa6AmRear right-of-centre channel.DkA view into a vacant entry in a <code>HashMap</code>. It is part of the \xe2\x80\xa6CgQuality of service enforcement information (LEAF=0x10).CcIntel Resource Director Technology RDT (LEAF=0x0F).fU+007D0000Ci&lt; The application is low on memory, free memory if \xe2\x80\xa6ClAdd a callback to be triggered when an event is added to \xe2\x80\xa6CjTry to lock a spin lock by setting it to a non-zero value.ClThis function is called when the audio device needs more \xe2\x80\xa6AeSDL Audio Device IDs.Da&lt; additive blending dstRGB = (srcRGB * srcA) + dstRGB dstA \xe2\x80\xa6Ch&lt; color modulate dstRGB = srcRGB * dstRGB dstA = dstACn&lt; color multiply dstRGB = (srcRGB * dstRGB) + (dstRGB * \xe2\x80\xa6CdInitialize an SDL_AudioCVT structure for conversion.CiRestart all threads that are waiting on the condition \xe2\x80\xa6CgCopy a block of pixels of one format to another format.BiCreate a texture for a rendering context.BmRemove an event watch callback added with \xe2\x80\xa6AaDestroy a window.ChCalculate a minimal rectangle enclosing a set of points.Bn&lt; Flash the window briefly to get attentionAd&lt; flip verticallyBfUpdate a window with OpenGL rendering.BkGet the dots/pixels-per-inch for a display.BoGet the window which currently has mouse focus.BhRetrieve the current state of the mouse.BnGet the thread name as it was specified in \xe2\x80\xa6CcRetrieve the data pointer associated with a window.BaGet a window\xe2\x80\x99s input grab mode.BiGet the size of a window\xe2\x80\x99s client area.BmGet the number of haptic axes the device has.CcSet the global gain of the specified haptic device.CjStop all the currently playing effects on a haptic device.AhUnpause a haptic device.BjReturns whether the surface is RLE enabledCePossible return values from the SDL_HitTest callback.CeCompatibility function to initialize the SDL library.BmCalculate the intersection of two rectangles.Ai&lt; Joystick axis motionAn&lt; Joystick trackball motionAl&lt; Joystick button pressedCkClose a joystick previously opened with SDL_JoystickOpen().Cn&lt; Keymap changed due to a system event such as an input \xe2\x80\xa6Cd\\brief Keyboard button event structure (event.key.*)Cb&lt; The user\xe2\x80\x99s locale preferences have changed.CeLocking for multi-threaded access to the joystick APIAj&lt; Mouse button releasedCeQuery whether or not the current mouse has haptic \xe2\x80\xa6D`&lt; not a key, just marks the number of scancodes for array \xe2\x80\xa6BbShut down specific SDL subsystems.ClBegin recording a gesture on a specified touch device or \xe2\x80\xa6CgCopy a portion of the source texture to the current \xe2\x80\xa6ClUpdate the screen with any rendering performed since the \xe2\x80\xa6BlFlags used when creating a rendering contextAoClear the state of the keyboardCmRestore the size and position of a minimized or maximized \xe2\x80\xa6Bd&lt; Used for accepting phone calls.l&lt; AC Copyl&lt; AC FindAn&lt; AL Integrated Help CenterA`&lt; alt, optionBc&lt; windows, command (apple), metaAe&lt; Menu (show menu)Co&lt; I\xe2\x80\x99m not sure if this is really not covered by any of \xe2\x80\xa6Ac&lt; alt gr, option3l&lt; AC Stopl&lt; AC UndoBj&lt; Gyroscope for left Joy-Con controllerBk&lt; Gyroscope for right Joy-Con controllerAj&lt; anisotropic filteringBjGet the current state of an opened sensor.CaGet the implementation dependent name of a sensorAiGet the type of a sensor.BlSet the RLE acceleration hint for a surface.CcAssociate an arbitrary named pointer with a window.BaSet a window\xe2\x80\x99s input grab mode.AjSet the icon for a window.BiSet the size of a window\xe2\x80\x99s client area.BeStop receiving any text input events.BiThe access pattern allowed for a texture.CcFunction prototype for the timer callback function.CfRelease a surface after directly accessing the pixels.ClUnlock a texture, uploading the changes to video memory, \xe2\x80\xa6CgUpdate the given texture rectangle with new pixel data.Aj&lt; window is not visibleBf&lt; window usable with OpenGL contextBe&lt; window usable for Vulkan surfaceBf\\brief Event subtype for window eventsAjEnumerate the HID Devices.BcOpen a HID device by its path name.CgThe |Sec-WebSocket-Key| header field is used in the \xe2\x80\xa6BdReturn the lanewise mask of matches.ClReturns the list of the supported signals on this system \xe2\x80\xa6BlA command that sets the the underline color.An\\brief A color key is applied.ChCould not play a sound because the maximum number of \xe2\x80\xa6AgThe input of the queue.CnAn iterator over the mutable subslices of the vector which \xe2\x80\xa600ChParallel iterator over mutable slices separated by a \xe2\x80\xa611Dk<code>StandardVisualKey</code> is an enumeration providing standardized \xe2\x80\xa6AhControls a static sound.DdAn iterator over all group matches in a <code>Captures</code> value.Bj429 Too Many Requests [RFC6585, Section 4]CnSpecifies the form of encoding used to safely transfer the \xe2\x80\xa6DiPossible errors returned by targeting a <code>Canvas</code> to render \xe2\x80\xa6Ec\xf0\x9f\x9a\xa9 <code>std</code> An error returned by [<code>ThreadLocalKey::try_with</code>].0DkUsed to create a new <code>ThreadPool</code> or to configure the global \xe2\x80\xa6Bl\xf0\x9f\x95\x98 A time split from hours to nanoseconds.0CmThe error type returned when a conversion from a slice to \xe2\x80\xa600DjAn iterator to iterate through all combinations in a <code>Clone</code>\xe2\x80\xa60CgExternal iterator for word boundaries and byte offsets.D`Receive values from the associated <code>UnboundedSender</code>.CnA stateless consumer can be freely copied. These consumers \xe2\x80\xa6DkA variant on <code>Producer</code> which does not know its exact length \xe2\x80\xa6CaCould not determine the sample rate of the audio.DdError type returned by <code>CursorMut::insert_before</code> and \xe2\x80\xa600000CbAn unwind action that triggers undefined behavior.00BlA deserializer holding a <code>usize</code>.BoDeserialization implementation for TOML values.CnA method and expected value to perform verification on the \xe2\x80\xa6Dh\xe2\x9a\x96\xef\xb8\x8f <code>std</code> Whether a timed wait on a condition variable \xe2\x80\xa60CiA type indicating whether a timed wait on a condition \xe2\x80\xa60AmThe nonce size for XChaCha20.CeA marker trait for primitive types which can be zero.00AkSee <code>_mm_setcsr</code>00000Acsuppress exceptions00ointerval [1, 2)00AkDEST = NaN if sign(SRC) = 100A`sign = sign(SRC)00444444444CjTranspose the 4x4 matrix formed by 4 rows of __m128 in \xe2\x80\xa600CiCompute the bitwise OR of 8-bit masks a and b. If the \xe2\x80\xa600CnCompute the bitwise NOT of 16-bit mask a and then AND with \xe2\x80\xa600CnCompute the bitwise NOT of 32-bit mask a and then AND with \xe2\x80\xa600CnCompute the bitwise NOT of 64-bit mask a and then AND with \xe2\x80\xa600ClCompute the bitwise AND of 16-bit masks a and  b, if the \xe2\x80\xa600ClCompute the bitwise AND of 32-bit masks a and  b, if the \xe2\x80\xa600ClCompute the bitwise AND of 64-bit masks a and  b, if the \xe2\x80\xa600EbAdds packed 16-bit integers in <code>a</code> and <code>b</code> using saturation.00EcAdds packed unsigned 16-bit integers in <code>a</code> and <code>b</code> using \xe2\x80\xa600EaCompares packed 8-bit integers in <code>a</code> and <code>b</code> for equality.00EeCompares packed 8-bit integers in <code>a</code> and <code>b</code> for greater-than.00CeCompute the sum of absolute differences (SADs) of \xe2\x80\xa600CgMultiply packed complex numbers in a by the complex \xe2\x80\xa600CfNormalize the mantissas of packed double-precision \xe2\x80\xa600CmNormalize the mantissas of packed half-precision (16-bit) \xe2\x80\xa600CfNormalize the mantissas of packed single-precision \xe2\x80\xa600DiHorizontally adds adjacent pairs of 16-bit integers in <code>a</code> \xe2\x80\xa600DiHorizontally adds adjacent pairs of 32-bit integers in <code>a</code> \xe2\x80\xa600CnHorizontally subtract adjacent pairs of 16-bit integers in \xe2\x80\xa600CnHorizontally subtract adjacent pairs of 32-bit integers in \xe2\x80\xa600CmLoad 256-bits (composed of 8 packed 32-bit integers) from \xe2\x80\xa600CmLoad 256-bits (composed of 4 packed 64-bit integers) from \xe2\x80\xa600CkLoads 256-bits of integer data from memory into result. \xe2\x80\xa600CmLoad 256-bits (composed of 32 packed 8-bit integers) from \xe2\x80\xa600EbMultiplies packed signed 16-bit integers in <code>a</code> and <code>b</code>, \xe2\x80\xa600CnCompute the bitwise OR of packed double-precision (64-bit) \xe2\x80\xa600CnCompute the bitwise OR of packed single-precision (32-bit) \xe2\x80\xa600CdDuplicate even-indexed double-precision (64-bit) \xe2\x80\xa600ClSet each packed 16-bit integer in dst to all ones or all \xe2\x80\xa600ClSet each packed 32-bit integer in dst to all ones or all \xe2\x80\xa600ClSet each packed 64-bit integer in dst to all ones or all \xe2\x80\xa600CnShuffles double-precision (64-bit) floating-point elements \xe2\x80\xa600CnShuffles single-precision (32-bit) floating-point elements \xe2\x80\xa600CmRotate the bits in each packed 32-bit integer in a to the \xe2\x80\xa600CmRotate the bits in each packed 64-bit integer in a to the \xe2\x80\xa600111000ClCompute the approximate reciprocal square root of packed \xe2\x80\xa600000DhBroadcasts 16-bit integer <code>a</code> to all elements of returned \xe2\x80\xa600DhBroadcasts 32-bit integer <code>a</code> to all elements of returned \xe2\x80\xa600CkSets packed 64-bit integers in returned vector with the \xe2\x80\xa600CkSets packed 16-bit integers in returned vector with the \xe2\x80\xa600CkSets packed 32-bit integers in returned vector with the \xe2\x80\xa600CiSets packed __m256d returned vector with the supplied \xe2\x80\xa600CiSets packed __m256i returned vector with the supplied \xe2\x80\xa600CkReturns vector of type __m256d with all elements set to \xe2\x80\xa600CjReturn vector of type __m256h with all elements set to \xe2\x80\xa600CjReturns vector of type __m256 with all elements set to \xe2\x80\xa600>>>===DkNegates packed 16-bit integers in <code>a</code> when the corresponding \xe2\x80\xa600DkNegates packed 32-bit integers in <code>a</code> when the corresponding \xe2\x80\xa600EcShifts packed 16-bit integers in <code>a</code> left by <code>IMM8</code> while \xe2\x80\xa600EcShifts packed 32-bit integers in <code>a</code> left by <code>IMM8</code> while \xe2\x80\xa600EcShifts packed 64-bit integers in <code>a</code> left by <code>IMM8</code> while \xe2\x80\xa600E`Shifts 128-bit lanes in <code>a</code> left by <code>imm8</code> bytes while \xe2\x80\xa600ChShift packed 16-bit integers in a left by the amount \xe2\x80\xa600DfShifts packed 32-bit integers in <code>a</code> left by the amount \xe2\x80\xa600DfShifts packed 64-bit integers in <code>a</code> left by the amount \xe2\x80\xa600EdShifts packed 16-bit integers in <code>a</code> right by <code>IMM8</code> while \xe2\x80\xa600EdShifts packed 32-bit integers in <code>a</code> right by <code>IMM8</code> while \xe2\x80\xa600CiShift packed 64-bit integers in a right by imm8 while \xe2\x80\xa600CiShift packed 16-bit integers in a right by the amount \xe2\x80\xa600DgShifts packed 32-bit integers in <code>a</code> right by the amount \xe2\x80\xa600CiShift packed 64-bit integers in a right by the amount \xe2\x80\xa600555444EdShifts packed 64-bit integers in <code>a</code> right by <code>IMM8</code> while \xe2\x80\xa600EaShifts 128-bit lanes in <code>a</code> right by <code>imm8</code> bytes while \xe2\x80\xa600444333DgShifts packed 64-bit integers in <code>a</code> right by the amount \xe2\x80\xa600DhSubtract packed 16-bit integers in <code>b</code> from packed 16-bit \xe2\x80\xa600DjSubtract packed unsigned 16-bit integers in <code>b</code> from packed \xe2\x80\xa600CfComputes the bitwise AND of 256 bits (representing \xe2\x80\xa600000CfAdd packed signed 16-bit integers in a and b using \xe2\x80\xa600ChAdd packed unsigned 16-bit integers in a and b using \xe2\x80\xa600CgPerforms an element-by-element conversion of packed \xe2\x80\xa600ClPerforms element-by-element conversion of the lower half \xe2\x80\xa600CeCompute the sum of absolute differences (SADs) of \xe2\x80\xa600CgMultiply packed complex numbers in a by the complex \xe2\x80\xa600CfNormalize the mantissas of packed double-precision \xe2\x80\xa600CmNormalize the mantissas of packed half-precision (16-bit) \xe2\x80\xa600CfNormalize the mantissas of packed single-precision \xe2\x80\xa600CnLoad 512-bits (composed of 16 packed 32-bit integers) from \xe2\x80\xa600CmLoad 512-bits (composed of 8 packed 64-bit integers) from \xe2\x80\xa600CgLoad 512-bits of integer data from memory into dst. \xe2\x80\xa600CmLoad 512-bits (composed of 64 packed 8-bit integers) from \xe2\x80\xa600CfMultiply packed signed 16-bit integers in a and b, \xe2\x80\xa600CnCompute the bitwise OR of packed double-precision (64-bit) \xe2\x80\xa600CnCompute the bitwise OR of packed single-precision (32-bit) \xe2\x80\xa600CdDuplicate even-indexed double-precision (64-bit) \xe2\x80\xa600ClSet each packed 16-bit integer in dst to all ones or all \xe2\x80\xa600ClSet each packed 32-bit integer in dst to all ones or all \xe2\x80\xa600ClSet each packed 64-bit integer in dst to all ones or all \xe2\x80\xa600CmShuffle double-precision (64-bit) floating-point elements \xe2\x80\xa600CmShuffle single-precision (32-bit) floating-point elements \xe2\x80\xa600CmRotate the bits in each packed 32-bit integer in a to the \xe2\x80\xa600CmRotate the bits in each packed 64-bit integer in a to the \xe2\x80\xa600111000ClCompute the approximate reciprocal square root of packed \xe2\x80\xa600000CiBroadcast the low packed 16-bit integer from a to all \xe2\x80\xa600DlBroadcast 32-bit integer <code>a</code> to all elements of <code>dst</code>.00DlBroadcast 64-bit integer <code>a</code> to all elements of <code>dst</code>.00CiSet packed 32-bit integers in dst with the repeated 4 \xe2\x80\xa600CiSet packed 64-bit integers in dst with the repeated 4 \xe2\x80\xa600DeSets packed 32-bit integers in <code>dst</code> with the supplied \xe2\x80\xa600CnSet packed 64-bit integers in dst with the supplied values \xe2\x80\xa600DhReturns vector of type <code>__m512d</code> with all elements set to \xe2\x80\xa600CjReturn vector of type __m512h with all elements set to \xe2\x80\xa600DgReturns vector of type <code>__m512</code> with all elements set to \xe2\x80\xa600>>>===ChShift packed 16-bit integers in a left by imm8 while \xe2\x80\xa600ChShift packed 32-bit integers in a left by imm8 while \xe2\x80\xa600ChShift packed 64-bit integers in a left by imm8 while \xe2\x80\xa600ChShift packed 16-bit integers in a left by the amount \xe2\x80\xa600ChShift packed 32-bit integers in a left by the amount \xe2\x80\xa600ChShift packed 64-bit integers in a left by the amount \xe2\x80\xa600CiShift packed 16-bit integers in a right by imm8 while \xe2\x80\xa600CiShift packed 32-bit integers in a right by imm8 while \xe2\x80\xa600CiShift packed 64-bit integers in a right by imm8 while \xe2\x80\xa600CiShift packed 16-bit integers in a right by the amount \xe2\x80\xa600CiShift packed 32-bit integers in a right by the amount \xe2\x80\xa600CiShift packed 64-bit integers in a right by the amount \xe2\x80\xa600555444333222111000CkSubtract packed signed 16-bit integers in b from packed \xe2\x80\xa600CmSubtract packed unsigned 16-bit integers in b from packed \xe2\x80\xa600CnConvert scalar BF16 (16-bit) floating point element stored \xe2\x80\xa600ClCompare packed signed 8-bit integers in a and b based on \xe2\x80\xa600CnCompare packed unsigned 8-bit integers in a and b based on \xe2\x80\xa600CnCompare the lower double-precision (64-bit) floating-point \xe2\x80\xa600ClCompare the lower half-precision (16-bit) floating-point \xe2\x80\xa600CnCompare the lower single-precision (32-bit) floating-point \xe2\x80\xa600CgConvert packed 16-bit integers in a to packed 8-bit \xe2\x80\xa600CgConvert packed 32-bit integers in a to packed 8-bit \xe2\x80\xa600CgConvert packed 64-bit integers in a to packed 8-bit \xe2\x80\xa600DhSign extend packed 8-bit integers in <code>a</code> to packed 16-bit \xe2\x80\xa600DhSign extend packed 8-bit integers in <code>a</code> to packed 32-bit \xe2\x80\xa600DjSign extend packed 8-bit integers in the low 8 bytes of <code>a</code> \xe2\x80\xa600DeZeroes extend packed unsigned 8-bit integers in <code>a</code> to \xe2\x80\xa600000000ClConvert packed BF16 (16-bit) floating-point even-indexed \xe2\x80\xa600CkConvert packed BF16 (16-bit) floating-point odd-indexed \xe2\x80\xa600BjCopy the lower 16-bit integer in a to dst.00BmReturns the lowest element of <code>a</code>.00000CkCopy 16-bit integer a to the lower elements of dst, and \xe2\x80\xa600DjReturns a vector whose lowest element is <code>a</code> and all higher \xe2\x80\xa600000CgMultiply groups of 4 adjacent pairs of signed 8-bit \xe2\x80\xa600000CiMultiply groups of 4 adjacent pairs of unsigned 8-bit \xe2\x80\xa600000ChMultiply groups of 2 adjacent pairs of signed 16-bit \xe2\x80\xa600000CjMultiply groups of 2 adjacent pairs of unsigned 16-bit \xe2\x80\xa600000ChReturns the <code>imm8</code> element of <code>a</code>.00DnExtracts an 32-bit integer from <code>a</code> selected with <code>IMM8</code>00DnExtracts an 64-bit integer from <code>a</code> selected with <code>IMM1</code>00CmExtracts the specified bits from the lower 64 bits of the \xe2\x80\xa600CmPerforms a multiplication in GF(2^8) on the packed bytes. \xe2\x80\xa600CnStores 2 double-precision (64-bit) floating-point elements \xe2\x80\xa600CnStores 4 single-precision (32-bit) floating-point elements \xe2\x80\xa600111CnStores 2 single-precision (32-bit) floating-point elements \xe2\x80\xa600CkMultiplies corresponding pairs of packed 8-bit unsigned \xe2\x80\xa600CnCompute the absolute value of packed signed 8-bit integers \xe2\x80\xa600CgAdd packed 8-bit integers in a and b, and store the \xe2\x80\xa600CjAverage packed unsigned 8-bit integers in a and b, and \xe2\x80\xa600CiBlend packed double-precision (64-bit) floating-point \xe2\x80\xa600CgBlend packed half-precision (16-bit) floating-point \xe2\x80\xa600CiBlend packed single-precision (32-bit) floating-point \xe2\x80\xa600CgMultiply packed complex numbers in a by the complex \xe2\x80\xa600CjMultiply the lower complex numbers in a by the complex \xe2\x80\xa600CkCompute the complex conjugates of complex numbers in a, \xe2\x80\xa600CkConvert packed double-precision (64-bit) floating-point \xe2\x80\xa600000CiConvert packed half-precision (16-bit) floating-point \xe2\x80\xa600000CkConvert packed single-precision (32-bit) floating-point \xe2\x80\xa600CnConvert the lower double-precision (64-bit) floating-point \xe2\x80\xa600000ClConvert the lower half-precision (16-bit) floating-point \xe2\x80\xa600000CnConvert the lower single-precision (32-bit) floating-point \xe2\x80\xa600000ClMultiply packed double-precision (64-bit) floating-point \xe2\x80\xa600CjMultiply packed half-precision (16-bit) floating-point \xe2\x80\xa600ClMultiply packed single-precision (32-bit) floating-point \xe2\x80\xa600C`Multiply the lower double-precision (64-bit) \xe2\x80\xa600CmMultiply the lower half-precision (16-bit) floating-point \xe2\x80\xa600C`Multiply the lower single-precision (32-bit) \xe2\x80\xa600555444333222111000CmMultiply packed complex numbers in a and b, and store the \xe2\x80\xa600ClMultiply the lower complex numbers in a and b, and store \xe2\x80\xa600ChLoad packed double-precision (64-bit) floating-point \xe2\x80\xa600ChLoad packed single-precision (32-bit) floating-point \xe2\x80\xa600CnCompare packed signed 8-bit integers in a and b, and store \xe2\x80\xa600CjCompare packed unsigned 8-bit integers in a and b, and \xe2\x80\xa600111000CnMove packed 8-bit integers from a into dst using writemask \xe2\x80\xa600CmCompute the bitwise OR of packed 32-bit integers in a and \xe2\x80\xa600CmCompute the bitwise OR of packed 64-bit integers in a and \xe2\x80\xa600CiCalculate the max, min, absolute max, or absolute min \xe2\x80\xa600000000000C`Compute the approximate reciprocal of packed \xe2\x80\xa600000CcCompute the approximate reciprocal of the lower \xe2\x80\xa600000ClCompute the approximate reciprocal square root of packed \xe2\x80\xa600CiCompute the approximate reciprocal square root of the \xe2\x80\xa600CiStore packed double-precision (64-bit) floating-point \xe2\x80\xa600CiStore packed single-precision (32-bit) floating-point \xe2\x80\xa600ClStore a double-precision (64-bit) floating-point element \xe2\x80\xa600CjStore the lower half-precision (16-bit) floating-point \xe2\x80\xa600ClStore a single-precision (32-bit) floating-point element \xe2\x80\xa600CiSubtract packed 8-bit integers in b from packed 8-bit \xe2\x80\xa600ChLoad packed double-precision (64-bit) floating-point \xe2\x80\xa600ChLoad packed single-precision (32-bit) floating-point \xe2\x80\xa600CkLoad a double-precision (64-bit) floating-point element \xe2\x80\xa600CnLoad a half-precision (16-bit) floating-point element from \xe2\x80\xa600CkLoad a single-precision (32-bit) floating-point element \xe2\x80\xa600CkMove the lower double-precision (64-bit) floating-point \xe2\x80\xa600CiMove the lower half-precision (16-bit) floating-point \xe2\x80\xa600CkMove the lower single-precision (32-bit) floating-point \xe2\x80\xa600CmMultiply packed complex numbers in a and b, and store the \xe2\x80\xa600ClMultiply the lower complex numbers in a and b, and store \xe2\x80\xa600CfCompute the square root of packed double-precision \xe2\x80\xa600CmCompute the square root of packed half-precision (16-bit) \xe2\x80\xa600CfCompute the square root of packed single-precision \xe2\x80\xa600CiCompute the square root of the lower double-precision \xe2\x80\xa600CgCompute the square root of the lower half-precision \xe2\x80\xa600CiCompute the square root of the lower single-precision \xe2\x80\xa600CnReturns a mask of the most significant bit of each element \xe2\x80\xa600CeSet each bit of mask register k based on the most \xe2\x80\xa600000000888CnShuffles double-precision (64-bit) floating-point elements \xe2\x80\xa600CnShuffles single-precision (32-bit) floating-point elements \xe2\x80\xa600ClReduce the packed half-precision (16-bit) floating-point \xe2\x80\xa600000000000CiRound packed double-precision (64-bit) floating-point \xe2\x80\xa600CgRound packed half-precision (16-bit) floating-point \xe2\x80\xa600CiRound packed single-precision (32-bit) floating-point \xe2\x80\xa600ClRound the lower double-precision (64-bit) floating-point \xe2\x80\xa600CjRound the lower half-precision (16-bit) floating-point \xe2\x80\xa600ClRound the lower single-precision (32-bit) floating-point \xe2\x80\xa600BoReturns a vector with all elements set to zero.00EbShuffles 32-bit integers in <code>a</code> using the control in <code>IMM8</code>.00CmThis is one of the two SM3 message scheduling intrinsics. \xe2\x80\xa600000CmThis intrinsic performs four rounds of SM4 key expansion. \xe2\x80\xa600CiCompute the square root of the lower double-precision \xe2\x80\xa600CgCompute the square root of the lower half-precision \xe2\x80\xa600CiCompute the square root of the lower single-precision \xe2\x80\xa600DfTests whether the specified bits in <code>a</code> 128-bit integer \xe2\x80\xa600CiTests whether the specified bits in a 128-bit integer \xe2\x80\xa600ClUnpacks and interleave 8-bit integers from the high half \xe2\x80\xa600CnUnpacks and interleave 8-bit integers from the low half of \xe2\x80\xa600CiPerform matrix multiplication of two tiles containing \xe2\x80\xa600000CmStores the current tile configuration to a 64-byte memory \xe2\x80\xa600DiDetermines the number of terms needed for <code>acos_series</code> to \xe2\x80\xa6BbPerforms checked integer addition.00DhAdvances the cursor by asserting that <code>n</code> bytes have been \xe2\x80\xa6DkPerform one round of an AES decryption flow on <code>a</code> using the \xe2\x80\xa60DkPerform one round of an AES encryption flow on <code>a</code> using the \xe2\x80\xa60ChLowers in MIR to <code>Rvalue::Aggregate</code> with \xe2\x80\xa600Eb<code>Clone</code> a slice into this <code>Bump</code> and return an exclusive \xe2\x80\xa6BgSet the number of channels being mixed.CkRotates and/or flips the image as indicated by Orientation.DaExtracts the values from an array of <code>MaybeUninit</code> \xe2\x80\xa6EjReturns a <code>&amp;[Cell&lt;T&gt;; N]</code> from a <code>&amp;Cell&lt;[T; N]&gt;</code>CjReturns a slice containing the entire array in compile \xe2\x80\xa6DkEquivalent to <code>CString::as_bytes()</code> except that the returned \xe2\x80\xa6CnReturns a plain slice, which is used to implement the rest \xe2\x80\xa60EdReturns a <code>&amp;[Cell&lt;T&gt;]</code> from a <code>&amp;Cell&lt;[T]&gt;</code>CmCasts <code>self</code> to either a table or an inline table.DiDetermines the number of terms needed for <code>asin_series</code> to \xe2\x80\xa6CmA guard for unsafe functions that cannot ever be executed \xe2\x80\xa600DiDetermines the number of terms needed for <code>atan_series</code> to \xe2\x80\xa6BkCalculate the Adler32 checksum of a buffer.AoAllocate an AVBlowfish context.CnEncrypt or decrypt a buffer using a previously initialized \xe2\x80\xa6AjReallocate a given buffer.BjEnsure dst refers to the same data as src.CfAllocate an AVCAMELLIA context To free the struct: \xe2\x80\xa63BiGet the codec tag for the given codec id.Ck@return Number of elements that can be written into the \xe2\x80\xa6Cj@return Element size for FIFO operations. This element \xe2\x80\xa6BdIterate over all registered filters.CfMove everything contained in src to dst and reset src.CdReturn a sample format corresponding to name, or \xe2\x80\xa6C`Finalize a hash context and store the Base64 \xe2\x80\xa6CnFinalize a hash context and store the actual hash value in \xe2\x80\xa6CeFinalize a hash context and store the hexadecimal \xe2\x80\xa6BdOverlapping memcpy() implementation.BbUpdate hash context with new data.BoIterate over AVOptions-enabled children of obj.Cn@defgroup opt_eval_funcs Evaluating option strings @{ This \xe2\x80\xa6CnParse CPU caps from a string and update the given AV_CPU_* \xe2\x80\xa6BjIterate over all registered codec parsers.ChAllocate, reallocate an array through a pointer to a \xe2\x80\xa6AnSimplified version of strptimeCjAllocate an AVStereo3D structure and set its fields to \xe2\x80\xa6C`Returns the current number of available permits.CiGet the AVClass for AVCodecContext. It can be used in \xe2\x80\xa6C`Lanewise average of the <code>u16</code> values.0AoAverage <code>u16</code> lanes.0CaInitialize a filter with the supplied parameters.CjFree the supplied IO context and everything associated \xe2\x80\xa6B`Open a write only memory stream.CeRead size bytes from AVIOContext into buf. Unlike \xe2\x80\xa6BoMark the written bytestream as a specific type.CmAvoid negative timestamps during muxing. Any value of the \xe2\x80\xa6D`Reverses the order of the bits in <code>self</code> from the \xe2\x80\xa60CkReturns a reference to the most recently sent value and \xe2\x80\xa6DjBrighten the supplied image in place. <code>value</code> is the amount \xe2\x80\xa6CkDivides an iterator into sequential blocks of the given \xe2\x80\xa60Bl<code>bytehound-preload</code> modificationsBoCalculates the floored magnitude of the vector.0BoCalculates the rounded magnitude of the vector.0CkReturns a fresh allocated set of capture locations that canCeReturn an iterator adaptor that iterates over the \xe2\x80\xa6000AbLow lane equality.0BjLanewise <code>a == b</code>, mask output.0BbLow lane greater than or equal to.0BdLanewise <code>a &amp;gt;= b</code>.B`Lanewise <code>a &gt;= b</code>.AfLow lane greater than.0BcLanewise <code>a &amp;gt; b</code>.AoLanewise <code>a &gt; b</code>.AoLow lane less than or equal to.0BdLanewise <code>a &amp;lt;= b</code>.B`Lanewise <code>a &lt;= b</code>.AcLow lane less than.0BcLanewise <code>a &amp;lt; b</code>.AoLanewise <code>a &lt; b</code>.AmLanewise <code>a != b</code>.0BgLanewise <code>!(a &amp;gt;= b)</code>.BcLanewise <code>!(a &gt;= b)</code>.BfLanewise <code>!(a &amp;gt; b)</code>.BbLanewise <code>!(a &gt; b)</code>.BgLanewise <code>!(a &amp;lt;= b)</code>.BcLanewise <code>!(a &lt;= b)</code>.BfLanewise <code>!(a &amp;lt; b)</code>.BbLanewise <code>!(a &lt; b)</code>.DhCompare <code>f64</code> lanes according to the operation specified, \xe2\x80\xa6000FiReturns the ASCII representation as a <code>&amp;&#39;static str</code>, or <code>&quot;&quot;</code> \xe2\x80\xa6Bfencoding: Set by user.decoding: unusedCbAlter the configuration for an http crate request.CnReturns a reference to connected gamepad or <code>None</code>.BfCompile-time <code>decode_srgb</code>.ClReturns the duration between this and an earlier instant \xe2\x80\xa6BfCompile-time <code>encode_srgb</code>.ChSelects which function to call depending on the context.00DcSame as <code>format_args</code>, but can be used in some const \xe2\x80\xa600CgAdjust the contrast of the supplied image in place. \xe2\x80\xa6ChConversion factor from reported IA32_QM_CTR value to \xe2\x80\xa6DiCopies all audio data from a source <code>AudioBuffer</code> into the \xe2\x80\xa6DkCopies all audio data from a source <code>AudioBuffer</code> that is of \xe2\x80\xa6EdCounts the number of 0s in <code>self</code> from the <code>[start..=end]</code> \xe2\x80\xa600000000000ChBit width of general-purpose, performance monitoring \xe2\x80\xa6CkThis is a convenience function for setting the relative \xe2\x80\xa6000CmCreates a special marker that indicates all days ought to \xe2\x80\xa6EfDecodes <code>input</code> into <code>output</code>, returning the number of bytes \xe2\x80\xa6000000000AnBuild a custom static hashmap.0ChConfigures a feature as deprecated, warning if it is \xe2\x80\xa60DiHint that the <code>Deserialize</code> type is expecting a byte array \xe2\x80\xa60DjHint that the <code>Deserialize</code> type is expecting a sequence of \xe2\x80\xa60DdReturns the digital root in in the given absolute <code>base</code>.0CkPerforms a dot product of two <code>m128d</code> registers.0CfReturns the file path of a dropped file, if available.ChNumber of Interrupt Thresholds in Digital Thermal SensorCjOffset of the current timestamp against last timestamp \xe2\x80\xa6CnReturns the user ID of the effective owner of this process \xe2\x80\xa6Agerror concealment flagsClError recognition; higher values will detect more errors \xe2\x80\xa6BmDeprecated, replaed with <code>escaped</code>DiDetermines the number of terms needed for <code>exp2_series</code> to \xe2\x80\xa6ChExposes the \xe2\x80\x9cprovenance\xe2\x80\x9d part of the pointer for \xe2\x80\xa6000000000000DcClones and appends all elements in a slice to the <code>Vec</code>.00BcVersion Information: Extended ModelCjWrites the prime factors in the given <code>buffer</code>.0CjGets the id of the window which currently has keyboard \xe2\x80\xa6CjGets the id of the window which currently has mouse focus.CjReturns the value that would be obtained by taking the \xe2\x80\xa6000000DdIf <code>true</code>, the framebuffer includes an alpha channel. \xe2\x80\xa600DoConstructs a new <code>Bound&lt;&#39;py, PyAny&gt;</code> from a pointer by \xe2\x80\xa6DoCreate a <code>Py&lt;T&gt;</code> instance by creating a new reference from \xe2\x80\xa6EeReturns a string from an array of <code>bytes</code>, truncated to <code>n</code> \xe2\x80\xa6EdConverts the lower two <code>i32</code> lanes to two <code>f64</code> lanes (and \xe2\x80\xa6Eg<em>const</em> method equivalent to <code>From&lt;InvalidChar&gt; for TextError</code>.Bg<em>const</em> method equivalent to \xe2\x80\xa6Eg<em>const</em> method equivalent to <code>From&lt;InvalidUtf8&gt; for TextError</code>.1CcRetuns the path of <code>CARGO_MANIFEST_DIR</code>.DmAttempt to convert a <code>Bytes</code> buffer to a <code>HeaderValue</code>.DeAttempt to convert a <code>Bytes</code> buffer to a <code>Uri</code>.DkAttempt to convert a <code>Bytes</code> buffer to a <code>Authority</code>.DnAttempt to convert a <code>Bytes</code> buffer to a <code>PathAndQuery</code>.ClLoads an audio file from a type that implements Symphonia\xe2\x80\xa6DhCreates a <code>StreamingSoundData</code> for a type that implements \xe2\x80\xa6EhReturns a weekday from its index, from <code>Monday=0</code> to <code>Sunday=6</code>\xe2\x80\xa6CdCreates a body from an owned <code>Read</code> impl.DhCreates a new instance of an <code>Error</code> from a particular OS \xe2\x80\xa6DoCreates a <code>Vec&lt;T, A&gt;</code> directly from a pointer, a length, a \xe2\x80\xa6EaCreates a <code>Vec&lt;T, A&gt;</code> directly from a pointer, a capacity, a \xe2\x80\xa6EcCreates a <code>Vec&lt;&#39;bump, T&gt;</code> directly from the raw components \xe2\x80\xa6DgCreates a new <code>String</code> from a length, capacity, and pointer.DlCreate from a packed <code>u64</code> in <code>0xRRRRGGGGBBBB</code> format.EdCreate from a packed <code>u64</code> in <code>0xRRRRGGGGBBBBAAAA</code> format, \xe2\x80\xa610EgCreate from a packed <code>u32</code> in <code>0xRRGGBBAA</code> format, discarding \xe2\x80\xa6EeCreate from a packed <code>u32</code> in <code>0xRRGGBBAA</code> format (big-endian).10BeLoad music from a static byte buffer.EhReturns a weekday from its index, from <code>Sunday=0</code> to <code>Monday=6</code>\xe2\x80\xa6DdCreates an ASCII character from the byte <code>b</code>, without \xe2\x80\xa60CoAttempts to converts a Vec&lt;u8&gt; to a <code>CString</code>.DaCreates a <code>Point</code> from a constant <code>Vector</code>.ClGet the gamma ramp in form of 3 arrays for a given window\xe2\x80\xa6DkReads from indices in <code>slice</code> to construct a SIMD vector. If \xe2\x80\xa6ClConditionally read elementwise from pointers into a SIMD \xe2\x80\xa6DiLike <code>get_item</code>, but returns a borrowed object, which is a \xe2\x80\xa60EeGets the bits in <code>self</code> from the <code>[start..=end]</code> checked range.00000000000D`Gets a copy of <code>self</code> with only the bits from the \xe2\x80\xa600CaGet the name of the indexed sample chunk decoder.CnValue of bits [31:0] of IA32_PLATFORM_DCA_CAP MSR (address \xe2\x80\xa6CnThis callback is called at the beginning of each packet to \xe2\x80\xa6CmReturns the hash value with lazy mod mapping to the given \xe2\x80\xa6000ChWhether the aspect ratio is maintained on window resize.ClReturns the key-value pair corresponding to the supplied \xe2\x80\xa6CkGets a mutable reference to the key and value in the entry.CnReturn mutable references to the key-value pair stored for \xe2\x80\xa600BjGet the name of the indexed music decoder.CnReturns an exclusive reference to the element at the given \xe2\x80\xa60DkReturns a mutable reference into the given <code>Rc</code>, without any \xe2\x80\xa6DfGet read-write access to the contents of an <code>UnsafePinned</code>.DhReturns a mutable reference into the given <code>Arc</code>, without \xe2\x80\xa6BjReturns the width of the font\xe2\x80\x99s outline.DdGets a reference to the pixel at location <code>(x, y)</code> or \xe2\x80\xa6CfReturns a reference to the element at the given 2D \xe2\x80\xa60ClReturns a raw pointer to an element or subslice, without \xe2\x80\xa6DeGets a mutable reference to the data inside of this <code>Pin</code>.CmReturns a mutable pointer to the output at this location, \xe2\x80\xa60000CnCreate an OpenGL context for an OpenGL window, and make it \xe2\x80\xa6CjUnbinds an OpenGL/ES/ES2 texture from the current context.BcUnloads the current OpenGL library.CgGL_VERSION_STRING from OpenGL. Would be empty on metal.0AgSupports AVX512_4FMAPS.AgSupports AVX512_4VNNIW.AfSupports AVX_VNNI_INT8CmIndicates that TLB flush events, including CR3 writes and \xe2\x80\xa6CkFXSAVE and FXRSTOR Instructions. The FXSAVE and FXRSTOR \xe2\x80\xa6BcHas the window grabbed input focus?AkIs Invariant TSC available?BgSupports L3 Cache Intel RDT Monitoring.CgMONITOR/MWAIT. A value of 1 indicates the processor \xe2\x80\xa6AoNested paging supported if set.CnDefines a constant for every given identifier with a value \xe2\x80\xa60CdThis configures verbose mode for the entire pattern.EfCreates a mismatch where <code>need</code> is an <code>Interval::empty</code>, but \xe2\x80\xa6EfCreates a mismatch where <code>need</code> is an <code>Interval::point</code>, and \xe2\x80\xa6DnReturns the weekday index from <code>Monday=0</code> to <code>Sunday=6</code>.ClGet the index in a channel layout of a channel described \xe2\x80\xa6DnReturns the weekday index from <code>Sunday=0</code> to <code>Monday=6</code>.CmInitial size of the frame pool. If a device type does not \xe2\x80\xa6B`Default size of the input buffer0CcReturns the quotient, rounding ties away from zero.00CkReturns the quotient, rounding ties to the nearest even \xe2\x80\xa600AjReturns the prime factors.00EfComputes the non-negative modulo of <code>self</code> over |<code>modulus</code>|, \xe2\x80\xa600BaCalls `NumInt::int_ref_div_floor.00ChSimilar to int_div_floor, but operates on references \xe2\x80\xa600BaCalls `NumInt::int_ref_factorial.00ChSimilar to int_factorial, but operates on references \xe2\x80\xa600BaCalls `NumInt::int_ref_is_square.00ChSimilar to int_is_square, but operates on references \xe2\x80\xa600BaCalls `NumInt::int_ref_prime_nth.00ChSimilar to int_prime_nth, but operates on references \xe2\x80\xa600BaCalls `NumInt::int_ref_root_ceil.00ChSimilar to int_root_ceil, but operates on references \xe2\x80\xa600BaCalls `NumInt::int_ref_sqrt_ceil.00ChSimilar to int_sqrt_ceil, but operates on references \xe2\x80\xa600CiGiven a previous frame, a current frame, the two next \xe2\x80\xa6DiConverts <code>self</code> into an owned Python object, dropping type \xe2\x80\xa60DdConverts this <code>OsString</code> into a boxed <code>OsStr</code>.BgConvert this value into a deserializer.CmReturn the raw sample buffer with its stride an dimension \xe2\x80\xa6EhReturn a <code>HashMap</code> of keys mapped to <code>Vec</code>s of values. The key \xe2\x80\xa6000DjConstructs a <code>GroupingMap</code> to be used later with one of the \xe2\x80\xa6000AjConvert to an inline tableCiConsume the image and returns a <code>LumaA</code> image.BkMaximum page count for INVLPGB instruction.CmChecks whether this object is an instance of exactly type \xe2\x80\xa60BoWhether the <code>Variant0</code> field is set.BoWhether the <code>Variant1</code> field is set.BoWhether the <code>Variant2</code> field is set.BoWhether the <code>Variant3</code> field is set.BoWhether the <code>Variant4</code> field is set.DeDetermine whether <code>Deserialize</code> implementations should \xe2\x80\xa6DcDetermine whether <code>Serialize</code> implementations should \xe2\x80\xa610DkReturns <code>true</code> if the address is a globally routable unicast \xe2\x80\xa6E`Determines if <code>File</code> has an efficient <code>write_vectored</code> \xe2\x80\xa6EgDetermines if this <code>Write</code>r has an efficient <code>write_vectored</code> \xe2\x80\xa60000BnDetermines if this writer has an efficient \xe2\x80\xa6DaExecutes an operation of the <code>IP_ADD_MEMBERSHIP</code> type.DcExecutes an operation of the <code>IPV6_ADD_MEMBERSHIP</code> type.CiWaits until one of the tasks in the set completes and \xe2\x80\xa6CgSort the k largest elements into a new iterator, in \xe2\x80\xa6000CkReturn the elements producing the k smallest outputs of \xe2\x80\xa6000AkL2 Cache Line size in bytes0CiThe maximum number of listeners that can exist at a time.ChIf this is called from an effect on a spatial track, \xe2\x80\xa6CjLoad data from memory into a register according to a mask.000ChLoads the reference into a register with reversed order.0CiLog function where Category and Priority can be specifiedBkPerforms low-level scaled surface blitting.CcConstructs a new pin by mapping the interior value.DfApply the function <code>f</code> to each channel except the alpha \xe2\x80\xa6CmA precalculated value for the of the line depending. It\xe2\x80\x99\xe2\x80\xa6BlMaximum number of packets that can be probedAn&lt; The maximum texture widthAasubpel ME qualityCf(measureTextFull) Measures all available text metrics.DgComputes the non-negative modulo of <code>self + other</code> over |\xe2\x80\xa6EgComputes the modulo of <code>self + other</code> over <code>modulus</code>, and the \xe2\x80\xa610DgComputes the non-negative modulo of <code>self - other</code> over |\xe2\x80\xa6EgComputes the modulo of <code>self - other</code> over <code>modulus</code>, and the \xe2\x80\xa6BeReturns the Monday based week number.BdMultiply and scale equivalent to \xe2\x80\xa6BeMultiply and scale, equivalent to \xe2\x80\xa6BgPerforms checked integer multiplication00DhGets the value of the <code>IP_MULTICAST_LOOP</code> option for this \xe2\x80\xa6DjGets the value of the <code>IPV6_MULTICAST_LOOP</code> option for this \xe2\x80\xa6CiConstruct from a <code>str</code> using a provided bufferAoCreates an agent with defaults.CnCreate a new built-in function with keywords (*args and/or \xe2\x80\xa6DgThis returns <code>Ok(Some(value))</code> for the next value in the \xe2\x80\xa6CnReturns the smallest power of two greater than or equal to \xe2\x80\xa600000EaImplement <code>next_u32</code> via <code>fill_bytes</code>, little-endian order.EaImplement <code>next_u64</code> via <code>fill_bytes</code>, little-endian order.CmAn unsigned integer which is the nominal frequency of the \xe2\x80\xa6DiEmits a <code>nontemporal</code> store, which gives a hint to the CPU \xe2\x80\xa600BjGet the number of available display modes.DiProvides a default error if the <code>Option</code> is <code>None</code>.0BjOpen a specific audio device for playback.CdDuplicates the top stack element, unchecked version.CnDrops the next of stack element in compile-time, unchecked \xe2\x80\xa6CiPops the top stack element in compile-time, unchecked \xe2\x80\xa6CnRotates the top three stack elements, clockwise, unchecked \xe2\x80\xa6ClReturns a parallel iterator over substrings that match a \xe2\x80\xa60DhReturns a parallel iterator over <code>chunk_size</code> elements of \xe2\x80\xa60CkSorts the slice in parallel, but might not preserve the \xe2\x80\xa60DdReturns an exclusive reference to the <code>nth</code> back element.Ca(query) Queries the status of a given permission.CmIndicate whether a picture is coded as a frame, top field \xe2\x80\xa6BiPolls for the next segment in the stream.AcCenters the window.BiReturns an iterator of pressed scancodes.CfThe position of the listener prior to the last update.DiLike <code>println</code>, but panics on failure instead of returning \xe2\x80\xa6DfReturns an iterator of process containing the given <code>name</code>.Ao&lt; behavior on wrap detectionAcPush a custom event0DnReturns a subslice from <code>start</code> (inclusive) to <code>end</code> \xe2\x80\xa6CmRetrieves the layout metrics and rasterized bitmap at the \xe2\x80\xa6Bdratecontrol override, see RcOverrideCgReads two bytes from the stream and returns them in \xe2\x80\xa6CiReads three bytes from the stream and returns them in \xe2\x80\xa6DcLow lane <code>1.0 / a</code> approximation, other lanes unchanged.0CnReduces the given value to a chain of appropriate prefixes \xe2\x80\xa60ClReduces the given value to a chain of appropriate binary \xe2\x80\xa6ChReduces the given value to a chain of appropriate SI \xe2\x80\xa6AeRefreshes CPUs usage.CkGets all processes and updates their information, along \xe2\x80\xa6CiUpdates the disk\xe2\x80\x99s information corresponding to the \xe2\x80\xa6CmRefreshes the disks\xe2\x80\x99 information according to the given \xe2\x80\xa6DkRefreshes according to the given <code>RefreshKind</code>. It calls the \xe2\x80\xa6AnRemove the entry from the map.CiReplaces the element at the given position within the \xe2\x80\xa6E`Unwraps the contained <code>Ok(state)</code> or provides a <code>default</code>.EbUnwraps the contained <code>Some(state)</code> or provides a <code>default</code>.E`Wraps the <code>state</code> field into an <code>Option</code>, in compile-time.CjGenerate random bytes using a CSPRNG. Not available in \xe2\x80\xa6CiSeek within the buffered data relative to the current \xe2\x80\xa6BhSeek backwards within the buffered data.CfReturns the number of <code>WeakSender</code> handles.CoReturns the number of <code>WeakUnboundedSender</code> handles.1AmSerialize a sequence element.AjSerialize a tuple element.BeMakes window appear on top of others.EhSets the bits in <code>self</code> to 1, from the <code>[start..=end]</code> checked \xe2\x80\xa600000000000CoGet a copy of <code>self</code> with bits set to 1 from the \xe2\x80\xa600Dl<strong>Sets</strong> any combination of OpenGL context configuration flags.Do<strong>Sets</strong> the attribute: whether the output is single or double \xe2\x80\xa6CbSets current global font character rotation steps.BlSets whether to force integer scales for \xe2\x80\xa6CjSet whether to <code>interpolate</code> the scaled pixels.DgSet whether to <code>maintain</code> the aspect ratio on window resize.1CjSet the ISO 8601 week-based year on this broken down time.CnKeyboard grab enables capture of system keyboard shortcuts \xe2\x80\xa6BgSets the width of the font\xe2\x80\x99s outline.CbSets a panic handler based on the chosen strategy.0ChSet the pixel density of the images the encoder will \xe2\x80\xa6BdSets the playback rate of the sound.0DcSets the args into an <code>m128</code>, first arg is the low lane.0CiSet <code>f32</code> args into an <code>m256</code> lane.0C`Sets the write timeout to the timeout specified.0BfSets the write timeout for the socket.0EgShift all <code>u16</code> lanes to the left by the <code>count</code> in the lower \xe2\x80\xa60EnLanewise <code>u16</code> shift left by the lower <code>u64</code> lane of <code>count</code>.0EgShift all <code>u32</code> lanes to the left by the <code>count</code> in the lower \xe2\x80\xa60EoShift all <code>u32</code> lanes left by the lower <code>u64</code> lane of <code>count</code>.0EgShift all <code>u64</code> lanes to the left by the <code>count</code> in the lower \xe2\x80\xa60EoShift all <code>u64</code> lanes left by the lower <code>u64</code> lane of <code>count</code>.0CgShifts all <code>u16</code> lanes left by an immediate.000CgShifts all <code>u32</code> lanes left by an immediate.000ChShifts both <code>u64</code> lanes left by an immediate.0CgShifts all <code>u64</code> lanes left by an immediate.0DjReturns the same as <code>Regex::shortest_match</code>, but starts the \xe2\x80\xa6EhShift each <code>i16</code> lane to the right by the <code>count</code> in the lower \xe2\x80\xa60EoLanewise <code>i16</code> shift right by the lower <code>i64</code> lane of <code>count</code>.0EhShift each <code>i32</code> lane to the right by the <code>count</code> in the lower \xe2\x80\xa60EoLanewise <code>i32</code> shift right by the lower <code>i64</code> lane of <code>count</code>.0EhShift each <code>u16</code> lane to the right by the <code>count</code> in the lower \xe2\x80\xa60EoLanewise <code>u16</code> shift right by the lower <code>u64</code> lane of <code>count</code>.0EhShift each <code>u32</code> lane to the right by the <code>count</code> in the lower \xe2\x80\xa60EoLanewise <code>u32</code> shift right by the lower <code>u64</code> lane of <code>count</code>.0EhShift each <code>u64</code> lane to the right by the <code>count</code> in the lower \xe2\x80\xa60EoLanewise <code>u64</code> shift right by the lower <code>u64</code> lane of <code>count</code>.0ChShifts all <code>i16</code> lanes right by an immediate.0CgShifts all <code>i16</code> lanes left by an immediate.0ChShifts all <code>i32</code> lanes right by an immediate.0CgShifts all <code>i32</code> lanes left by an immediate.0ChShifts all <code>u16</code> lanes right by an immediate.000ChShifts all <code>u32</code> lanes right by an immediate.000CiShifts both <code>u64</code> lanes right by an immediate.0ChShifts all <code>u64</code> lanes right by an immediate.0ClCalculates the offset from a pointer vector elementwise, \xe2\x80\xa600AoWrites to a vector of pointers.00DjReturns a middle subslice of <code>slice</code> with the given maximum \xe2\x80\xa60CmSpawn the blocking code on the blocking threadpool of the \xe2\x80\xa6ChSplat the lowest <code>f32</code> across all four lanes.0BcSplat the 128-bits across 256-bits.0DiReturns an iterator over substrings of <code>self</code> separated on \xe2\x80\xa6Bl<code>static_assertions</code> modificationsBhStores the value to the reference given.0CkStore data from a register into memory according to a mask.000CkStores the low lane value to all lanes of the reference \xe2\x80\xa60BdPerforms checked integer subtraction00CmReturns the fractional second component of this timestamp \xe2\x80\xa6DdReturns the fractional nanosecond for this <code>Zoned</code> value.CkSet the subsecond nanosecond field on a <code>Zoned</code>.CfReturns the parsed subsecond nanosecond, if available.DgReturns the fractional nanosecond for this <code>DateTime</code> value.CnSet the subsecond nanosecond field on a <code>DateTime</code>.DcReturns the fractional nanosecond for this <code>Time</code> value.CjSet the subsecond nanosecond field on a <code>Time</code>.C`Forced subtitle codec_id. Demuxing: Set by user.BeReturns the Sunday based week number.CmRemoves an element from anywhere in the deque and returns \xe2\x80\xa6BaGenerate a channel mixing matrix.CnConvert the samples in the input AVFrame and write them to \xe2\x80\xa6CiAllocate an empty SwsContext. This must be filled and \xe2\x80\xa6CgRequest a horizontal slice of the output data to be \xe2\x80\xa6DgFinds the index of the first character in <code>self</code> that is \xe2\x80\xa6CfReturns the last <code>n</code> elements of the slice.ChSets a custom timeout for a thread in the blocking pool.CbSets the stack size (in bytes) for worker threads.CjDoes a three-way comparison between the two arguments, \xe2\x80\xa600CbMax duration for awaiting a 100-continue response.BlMax duration for receving the response body.CiMax duration for sending a request body (if there is one)CiConverts this C string to a byte slice containing the \xe2\x80\xa6CjA convenience routine for converting an offset on this \xe2\x80\xa6ClConverts this offset to a concrete numeric offset in all \xe2\x80\xa6CdA convenience routine for converting a time zone \xe2\x80\xa6DkThis is like <code>TimeZoneAnnotation::to_time_zone</code>, but permits \xe2\x80\xa6BnReturns the total number of transmitted bytes.CmReturns the number of trailing ones in an unsigned 16-bit \xe2\x80\xa6CmReturns the number of trailing ones in an unsigned 32-bit \xe2\x80\xa6CmReturns the number of trailing ones in an unsigned 64-bit \xe2\x80\xa6CmTransforms each element in the chunk into a new chunk and \xe2\x80\xa6BmTries to acquire a permit from the semaphore.DbAttempts to cast the content type of a <code>Rc&lt;[T]&gt;</code>.0DbAttempts to make a new <code>OwnedRwLockReadGuard</code> for a \xe2\x80\xa6DjAttempts to make a new <code>RwLockReadGuard</code> for a component of \xe2\x80\xa6EeExecutes a fallible <code>OP</code> on a value returned by <code>init</code> with \xe2\x80\xa60EfExecutes a fallible <code>OP</code> on the given <code>init</code> value with each \xe2\x80\xa60DkTries to create a timestamp from milliseconds. Returns <code>None</code>\xe2\x80\xa6CgReturns a time delta corresponding to the number of \xe2\x80\xa6CbThe checked version of <code>from_secs_f32</code>.ClReturns a signed duration corresponding to the number of \xe2\x80\xa62CbThe checked version of <code>from_secs_f64</code>.1CkConstructs a new box with uninitialized contents in the \xe2\x80\xa6DhConstructs a new <code>Rc</code> with uninitialized contents, in the \xe2\x80\xa61DiConstructs a new <code>Arc</code> with uninitialized contents, in the \xe2\x80\xa6DkConstructs a new <code>Box</code> with uninitialized contents, with the \xe2\x80\xa6DjConstructs a new <code>Rc</code> with uninitialized contents, with the \xe2\x80\xa61DkConstructs a new <code>Arc</code> with uninitialized contents, with the \xe2\x80\xa6CfTries to reserve the minimum capacity for at least \xe2\x80\xa600DhInvokes <code>try_reserve_exact</code> on the underlying instance of \xe2\x80\xa6111ChAttempts to reserve the minimum capacity for exactly \xe2\x80\xa6CnTries to acquire a slot in the channel without waiting for \xe2\x80\xa6DcTries to convert this <code>char8</code> to <code>AsciiChar</code>.DdTries to convert this <code>char16</code> to <code>AsciiChar</code>.DhCreates an empty deque with space for at least <code>capacity</code> \xe2\x80\xa6EaConstructs a new, empty <code>Vec&lt;T&gt;</code> with at least the specified \xe2\x80\xa6DgCreates a new empty <code>String</code> with at least the specified \xe2\x80\xa6ClAttempt to construct a new arena with the specified byte \xe2\x80\xa6DcCreate an empty <code>HeaderMap</code> with the specified capacity.CgCreates an unbounded mpsc channel for communicating \xe2\x80\xa6CaSets the underline color to <code>Magenta</code>.BdThe source that did not support seekDiReturns an iterator over substrings of <code>self</code> separated on \xe2\x80\xa6DfUnpack and interleave high lanes of <code>a</code> and <code>b</code>.0CbGet the number of bytes buffered but not yet read.EeReturns a copy of <code>self</code> unsetting the bit at <code>index</code>, checked.00DbA copy of <code>self</code> with the <code>FLAG1</code> field set.0DbA copy of <code>self</code> with the <code>FLAG2</code> field set.0DbA copy of <code>self</code> with the <code>MASK0</code> field set.0CnReturns the total duration of the audio, regardless of its \xe2\x80\xa60CjConvenience function to create an unsupport feature error.CkReturns the contained <code>Some</code> value or a default.ChReturns the contained <code>Ok</code> value or a defaultCkAdd key/value pairs from another dictionary to this one \xe2\x80\xa60EbUnwraps the contained <code>Some(value)</code> or provides a <code>default</code>.E`Unwraps the contained <code>Ok(value)</code> or provides a <code>default</code>.E`Wraps the <code>value</code> field into an <code>Option</code>, in compile-time.CiSize in bytes of each value/item in the underlying slice.BnFill the image with a linear vertical gradientDhReturns a waiting iterator that calls <code>wait_event_timeout()</code>.")