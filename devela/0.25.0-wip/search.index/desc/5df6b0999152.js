rd_("DkCasts <code>self</code> to <code>u64</code> wrapping at the numeric bounds.0DoCasts from <code>i64</code> to <code>u64</code> wrapping at the numeric bounds.DnCasts from <code>u8</code> to <code>u64</code> wrapping at the numeric bounds.EaCasts from <code>isize</code> to <code>u64</code> wrapping at the numeric bounds.DoCasts from <code>u64</code> to <code>u64</code> wrapping at the numeric bounds.DoCasts from <code>u16</code> to <code>u64</code> wrapping at the numeric bounds.DnCasts from <code>i8</code> to <code>u64</code> wrapping at the numeric bounds.E`Casts from <code>u128</code> to <code>u64</code> wrapping at the numeric bounds.DoCasts from <code>i16</code> to <code>u64</code> wrapping at the numeric bounds.DoCasts from <code>i32</code> to <code>u64</code> wrapping at the numeric bounds.E`Casts from <code>i128</code> to <code>u64</code> wrapping at the numeric bounds.EaCasts from <code>usize</code> to <code>u64</code> wrapping at the numeric bounds.DoCasts from <code>u32</code> to <code>u64</code> wrapping at the numeric bounds.DfAn example created with <code>bitfield!</code>, with public custom \xe2\x80\xa6Ca\xf0\x9f\x9a\xa9 A failed conversion between two error types.0Di<code>core</code> A simple wrapper around a type to assert that it is \xe2\x80\xa60Di<code>U+FFFD REPLACEMENT CHARACTER (\xef\xbf\xbd)</code> is used in Unicode to \xe2\x80\xa6C`Block magic-link traversal (procfs-style links).Ea\xf0\x9f\x9a\xa9 <code>core</code> An error returned by <code>RefCell::try_borrow_mut</code>.0BmThreshold for sRGB linear segment (0.0031308)0Df\xf0\x9f\x95\x98 A time split from hours to seconds, normalized <em>(128b </em>\xe2\x80\xa60Cj\xf0\x9f\xa7\xaa Allows a site to access storage without top-level \xe2\x80\xa60CdTrait for lossy compression of wavelet coefficients.0Ca\xe2\x9a\x9b\xef\xb8\x8f <code>core</code> A compiler memory fence.0CnReturns an estimate of the default amount of parallelism a \xe2\x80\xa600EdCounts the number of 0s in <code>bits</code> from the <code>[start..=end]</code> \xe2\x80\xa60EeGets the bits in <code>self</code> from the <code>[start..=end]</code> checked range.0EgSets the bits in <code>self</code> to 1 from the <code>[start..=end]</code> checked \xe2\x80\xa60CoCasts <code>self</code> to <code>isize</code> with range check.0DcCasts from <code>u64</code> to <code>isize</code> with range check.DdCasts from <code>i128</code> to <code>isize</code> with range check.DdCasts from <code>u128</code> to <code>isize</code> with range check.DeCasts from <code>isize</code> to <code>isize</code> with range check.DcCasts from <code>i16</code> to <code>isize</code> with range check.DbCasts from <code>u8</code> to <code>isize</code> with range check.DcCasts from <code>i32</code> to <code>isize</code> with range check.DeCasts from <code>usize</code> to <code>isize</code> with range check.DcCasts from <code>u32</code> to <code>isize</code> with range check.DbCasts from <code>i8</code> to <code>isize</code> with range check.DcCasts from <code>u16</code> to <code>isize</code> with range check.DcCasts from <code>i64</code> to <code>isize</code> with range check.CoCasts <code>self</code> to <code>usize</code> with range check.0DbCasts from <code>u8</code> to <code>usize</code> with range check.DcCasts from <code>i64</code> to <code>usize</code> with range check.DeCasts from <code>isize</code> to <code>usize</code> with range check.DbCasts from <code>i8</code> to <code>usize</code> with range check.DdCasts from <code>i128</code> to <code>usize</code> with range check.DcCasts from <code>i32</code> to <code>usize</code> with range check.DcCasts from <code>u64</code> to <code>usize</code> with range check.DeCasts from <code>usize</code> to <code>usize</code> with range check.DdCasts from <code>u128</code> to <code>usize</code> with range check.DcCasts from <code>i16</code> to <code>usize</code> with range check.DcCasts from <code>u16</code> to <code>usize</code> with range check.DcCasts from <code>u32</code> to <code>usize</code> with range check.ClLanewise <code>a == b</code> with lanes as <code>i16</code>.CiCompare <code>i16</code> lanes for equality, mask output.ClLanewise <code>a == b</code> with lanes as <code>i32</code>.CiCompare <code>i32</code> lanes for equality, mask output.ClLanewise <code>a == b</code> with lanes as <code>i64</code>.CiCompare <code>i64</code> lanes for equality, mask output.DbLanewise <code>a &amp;gt; b</code> with lanes as <code>i16</code>.DjCompare <code>i16</code> lanes for <code>a &amp;gt; b</code>, mask output.DbLanewise <code>a &amp;gt; b</code> with lanes as <code>i32</code>.DjCompare <code>i32</code> lanes for <code>a &amp;gt; b</code>, mask output.DbLanewise <code>a &amp;gt; b</code> with lanes as <code>i64</code>.DjCompare <code>i64</code> lanes for <code>a &amp;gt; b</code>, mask output.DbLanewise <code>a &amp;lt; b</code> with lanes as <code>i16</code>.DbLanewise <code>a &amp;lt; b</code> with lanes as <code>i32</code>.ClLanewise <code>(!a.is_nan()) &amp;amp; (!b.is_nan())</code>.DeLow lane <code>a.is_nan() | b.is_nan()</code>, other lanes unchanged.DkStores a value into the <code>Atomic</code> if the current value is the \xe2\x80\xa6DiStores a value into the <code>bool</code> if the current value is the \xe2\x80\xa6CkStores a value into the pointer if the current value is \xe2\x80\xa6CiStores a value into the atomic integer if the current \xe2\x80\xa60000000CmStores a value into the atomic float if the current value \xe2\x80\xa611011DbCompile-time friendly version of <code>try_from_millis_f64</code>.DhThe nearest integer to itself, rounding ties away from <code>0.0</code>.0DgReturns the nearest integer to <code>x</code>, rounding ties to the \xe2\x80\xa60CkReturns the determinant without checking matrix squareness.0000000Dh(addEventListener) Attaches a JavaScript function <code>event</code> \xe2\x80\xa6Df(removeEventListener) Removes a a Rust function <code>event</code> \xe2\x80\xa6CgExtends the front of the destaque from an iterator, \xe2\x80\xa6DhGets the <code>i32</code> lane requested. Only the lowest 2 bits are \xe2\x80\xa6DdGets the <code>i64</code> lane requested. Only the lowest bit is \xe2\x80\xa6D`Finds the index of the first 0 in <code>self</code> from the \xe2\x80\xa600000000000CiMarks the struct as non-exhaustive, indicating to the \xe2\x80\xa6CkMarks the tuple struct as non-exhaustive, indicating to \xe2\x80\xa6CmMarks the set as non-exhaustive, indicating to the reader \xe2\x80\xa6CnMarks the list as non-exhaustive, indicating to the reader \xe2\x80\xa6CmMarks the map as non-exhaustive, indicating to the reader \xe2\x80\xa6Dkmethod equivalent to <code>From&lt;MismatchedSizes&gt; for IntError</code>.Bg<em>const</em> method equivalent to \xe2\x80\xa60EnConverts a <code>Vec&lt;u8&gt;</code> to a <code>String</code>, substituting invalid UTF-8 \xe2\x80\xa6CnLow lane fused <code>(a * b) + c</code>, other lanes unchangedDdLanewise fused <code>(a * b) addsub c</code> (adds odd lanes and \xe2\x80\xa60CoLow lane fused <code>(a * b) - c</code>, other lanes unchanged.DiLanewise fused <code>(a * b) subadd c</code> (subtracts odd lanes and \xe2\x80\xa60CgThe value at the bit range of <code>FLAG1</code> field.0CgThe value at the bit range of <code>FLAG2</code> field.0CgThe value at the bit range of <code>MASK0</code> field.0DiInserts the default value into the option if it is <code>None</code>, \xe2\x80\xa6Cm(replaceState) Modifies the current history entry without \xe2\x80\xa6CcInserts an <code>m128d</code> to <code>m256d</code>EcInserts an <code>m128i</code> to an <code>m256i</code> at the high or low position.ChReturns the digital root in the given <code>base</code>.00CjWrites the prime factors in the given <code>buffer</code>.00EeComputes the modulo of <code>self + other</code> over |<code>modulus</code>|, and \xe2\x80\xa600000EeComputes the modulo of <code>self - other</code> over |<code>modulus</code>|, and \xe2\x80\xa600BeCalls `NumInt::int_ref_div_ties_away.00ClSimilar to int_div_ties_away, but operates on references \xe2\x80\xa600BeCalls `NumInt::int_ref_div_ties_even.00ClSimilar to int_div_ties_even, but operates on references \xe2\x80\xa600BeCalls `NumInt::int_ref_factors_prime.00ClSimilar to int_factors_prime, but operates on references \xe2\x80\xa600BeCalls `NumInt::int_ref_modulo_cycles.00ClSimilar to int_modulo_cycles, but operates on references \xe2\x80\xa600DcDecomposes a <code>Vec&lt;T&gt;</code> into its raw components: \xe2\x80\xa6DfReturns <code>true</code> if the address is a unicast address with \xe2\x80\xa6CnIterator over generated IDs with <code>SeqCst</code> ordering.CnSort the k smallest elements into a new iterator using the \xe2\x80\xa600DjLoads the reference given and zeroes any <code>i32</code> lanes not in \xe2\x80\xa60DjLoads the reference given and zeroes any <code>i64</code> lanes not in \xe2\x80\xa60ChWhether the aspect ratio is maintained on window resize.DgSet whether to <code>maintain</code> the aspect ratio on window resize.1D`Sets the bits from the <code>[start..=end]</code> checked range.00BnUnsets the bit at <code>index</code>, checked.00BdUnsets the <code>FLAG1</code> field.0BdUnsets the <code>FLAG2</code> field.0BdUnsets the <code>MASK0</code> field.0B`Returns a new rendering backend.DcCreates a <code>PtrNonNull</code> with the given address and no \xe2\x80\xa6CnRotates the top six stack elements, counter-clockwise, two \xe2\x80\xa6DmSaturating convert <code>i32</code> to <code>i16</code>, and pack the values.0DmSaturating convert <code>i32</code> to <code>u16</code>, and pack the values.0CgReturns the physical size of the window in hardware \xe2\x80\xa6DcLike <code>print_bytes</code>, but panics on failure instead of \xe2\x80\xa6DhReplaces the <code>old</code> leading byte with a <code>new</code> byte.D`Reverses the order of the bits in <code>self</code> from the \xe2\x80\xa600000000000DjCasts <code>self</code> to <code>i8</code> clamping at the numeric bounds.0DmCasts from <code>u8</code> to <code>i8</code> clamping at the numeric bounds.E`Casts from <code>isize</code> to <code>i8</code> clamping at the numeric bounds.DnCasts from <code>i64</code> to <code>i8</code> clamping at the numeric bounds.DnCasts from <code>u32</code> to <code>i8</code> clamping at the numeric bounds.DnCasts from <code>i32</code> to <code>i8</code> clamping at the numeric bounds.DoCasts from <code>u128</code> to <code>i8</code> clamping at the numeric bounds.DoCasts from <code>i128</code> to <code>i8</code> clamping at the numeric bounds.DmCasts from <code>i8</code> to <code>i8</code> clamping at the numeric bounds.E`Casts from <code>usize</code> to <code>i8</code> clamping at the numeric bounds.DnCasts from <code>u64</code> to <code>i8</code> clamping at the numeric bounds.DnCasts from <code>u16</code> to <code>i8</code> clamping at the numeric bounds.DnCasts from <code>i16</code> to <code>i8</code> clamping at the numeric bounds.DjCasts <code>self</code> to <code>u8</code> clamping at the numeric bounds.0E`Casts from <code>isize</code> to <code>u8</code> clamping at the numeric bounds.DnCasts from <code>i64</code> to <code>u8</code> clamping at the numeric bounds.DnCasts from <code>u32</code> to <code>u8</code> clamping at the numeric bounds.DnCasts from <code>u16</code> to <code>u8</code> clamping at the numeric bounds.DoCasts from <code>i128</code> to <code>u8</code> clamping at the numeric bounds.DmCasts from <code>i8</code> to <code>u8</code> clamping at the numeric bounds.DnCasts from <code>i32</code> to <code>u8</code> clamping at the numeric bounds.DmCasts from <code>u8</code> to <code>u8</code> clamping at the numeric bounds.E`Casts from <code>usize</code> to <code>u8</code> clamping at the numeric bounds.DnCasts from <code>u64</code> to <code>u8</code> clamping at the numeric bounds.DnCasts from <code>i16</code> to <code>u8</code> clamping at the numeric bounds.DoCasts from <code>u128</code> to <code>u8</code> clamping at the numeric bounds.DjSets the <code>value</code> into the bitrange of <code>FLAG1</code> field.0DjSets the <code>value</code> into the bitrange of <code>FLAG2</code> field.0DjSets the <code>value</code> into the bitrange of <code>MASK0</code> field.0DhSets the value of the <code>IP_MULTICAST_LOOP</code> option for this \xe2\x80\xa6DjSets the value of the <code>IPV6_MULTICAST_LOOP</code> option for this \xe2\x80\xa6DdSets the args into an <code>m128i</code>, first arg is the low lane.CiSet <code>i8</code> args into an <code>m256i</code> lane.EbSets the lowest lane of an <code>m128</code> as all lanes of an <code>m256</code>.DjReturns a mutable middle subslice of <code>slice</code> with the given \xe2\x80\xa60BhStores the value to the reference given.0BgStore data from a register into memory.0CmComputes the determinant of a square matrix using Laplace \xe2\x80\xa60000000BmUnchecked version of <code>swap2_back</code>.D`Returns the last <code>n</code> elements of the exclusive slice.BeReturns if all masked bits are 0, \xe2\x80\xa6DbTries to append the complete <code>string</code> slice to the end.0000EgUnpack and interleave high <code>i16</code> lanes of <code>a</code> and <code>b</code>.0EgUnpack and interleave high <code>i32</code> lanes of <code>a</code> and <code>b</code>.0EgUnpack and interleave high <code>i64</code> lanes of <code>a</code> and <code>b</code>.0Dk<code>core</code> Informs the compiler that the current calling site is \xe2\x80\xa60EgUnwraps the result if the <code>Option</code> is <code>Some</code>, otherwise calls \xe2\x80\xa60BlWebAssembly mouse event callback dispatcher.CmWindow has been restored Right now is only implemented on \xe2\x80\xa600DlCasts <code>self</code> to <code>i128</code> wrapping at the numeric bounds.0E`Casts from <code>u32</code> to <code>i128</code> wrapping at the numeric bounds.E`Casts from <code>i16</code> to <code>i128</code> wrapping at the numeric bounds.DoCasts from <code>u8</code> to <code>i128</code> wrapping at the numeric bounds.E`Casts from <code>u16</code> to <code>i128</code> wrapping at the numeric bounds.E`Casts from <code>i32</code> to <code>i128</code> wrapping at the numeric bounds.EbCasts from <code>isize</code> to <code>i128</code> wrapping at the numeric bounds.EbCasts from <code>usize</code> to <code>i128</code> wrapping at the numeric bounds.E`Casts from <code>u64</code> to <code>i128</code> wrapping at the numeric bounds.E`Casts from <code>i64</code> to <code>i128</code> wrapping at the numeric bounds.DoCasts from <code>i8</code> to <code>i128</code> wrapping at the numeric bounds.EaCasts from <code>i128</code> to <code>i128</code> wrapping at the numeric bounds.EaCasts from <code>u128</code> to <code>i128</code> wrapping at the numeric bounds.DlCasts <code>self</code> to <code>u128</code> wrapping at the numeric bounds.0DoCasts from <code>u8</code> to <code>u128</code> wrapping at the numeric bounds.E`Casts from <code>i16</code> to <code>u128</code> wrapping at the numeric bounds.EbCasts from <code>isize</code> to <code>u128</code> wrapping at the numeric bounds.E`Casts from <code>i64</code> to <code>u128</code> wrapping at the numeric bounds.EaCasts from <code>i128</code> to <code>u128</code> wrapping at the numeric bounds.E`Casts from <code>i32</code> to <code>u128</code> wrapping at the numeric bounds.EbCasts from <code>usize</code> to <code>u128</code> wrapping at the numeric bounds.DoCasts from <code>i8</code> to <code>u128</code> wrapping at the numeric bounds.E`Casts from <code>u32</code> to <code>u128</code> wrapping at the numeric bounds.E`Casts from <code>u64</code> to <code>u128</code> wrapping at the numeric bounds.EaCasts from <code>u128</code> to <code>u128</code> wrapping at the numeric bounds.E`Casts from <code>u16</code> to <code>u128</code> wrapping at the numeric bounds.fU+00170AjStale network file handle.00Dj<code>std</code> An owned permission to join on a scoped thread (block \xe2\x80\xa60Cg\xf0\x9f\x95\x98 A time split from milliseconds to nanoseconds, \xe2\x80\xa60DfPerform the last round of an AES decryption flow on <code>a</code> \xe2\x80\xa6DfPerform the last round of an AES encryption flow on <code>a</code> \xe2\x80\xa6CmProvides shared access to the key and owned access to the \xe2\x80\xa6EcFlips the bits in <code>self</code> from the <code>[start..=end]</code> checked \xe2\x80\xa60DiReturns a bitmask of ones from the <code>[start..=end]</code> checked \xe2\x80\xa60DdBlend the <code>i8</code> lanes according to a runtime varying mask.D`Blend <code>i8</code> lanes according to a runtime varying mask.BiCancels a request for an animation frame.D`Bit-preserving cast to <code>m128</code> from <code>m256</code>.CnReturns the amount of time elapsed from another instant to \xe2\x80\xa6CmReturn an iterator over all windows, wrapping back to the \xe2\x80\xa600ClLanewise <code>(!a.is_nan()) &amp;amp; (!b.is_nan())</code>.DdLow lane <code>a.is_nan() | b.is_nan()</code>, other lane unchanged.DcWrites the color components to a pre-allocated <code>buffer</code>.0FkCopies <code>count * size_of::&lt;T&gt;()</code> bytes from <code>self</code> to <code>dest</code>. The \xe2\x80\xa6DjDecrements the strong reference count on the <code>Arc&lt;T&gt;</code> \xe2\x80\xa6DiDecrements the strong reference count on the <code>Rc&lt;T&gt;</code> \xe2\x80\xa6ClForwards to the method defined on the type <code>Any</code>.CjReturns a mutable reference to the inner value as type \xe2\x80\xa6D`Forwards to the method defined on the type <code>dyn Any</code>.0DbReturns a reference to the inner value as type <code>dyn T</code>.3BaSwitches to the alternate screen.CiExtracts an <code>i32</code> lane from <code>m256i</code>CiExtracts an <code>i64</code> lane from <code>m256i</code>CdExtracts an <code>m128</code> from <code>m256</code>Bg<em>const</em> method equivalent to \xe2\x80\xa6Dkmethod equivalent to <code>From&lt;NonZeroRequired&gt; for IntError</code>.1DdLanewise fused <code>(a * b) addsub c</code> (adds odd lanes and \xe2\x80\xa60BhLanewise fused <code>-(a * b) + c</code>0BhLanewise fused <code>-(a * b) - c</code>0DiLanewise fused <code>(a * b) subadd c</code> (subtracts odd lanes and \xe2\x80\xa60DhReturns the number of IDs generated so far with <code>Acquire</code> \xe2\x80\xa6DjAttempts to get mutable references to <code>N</code> values in the map \xe2\x80\xa60CnReturns an exclusive reference to the element at the given \xe2\x80\xa60CfReturns a reference to the element at the given 2D \xe2\x80\xa60EgCreates a mismatch where <code>need</code> is an <code>Interval::empty_with</code>, \xe2\x80\xa6DjIncrements the strong reference count on the <code>Arc&lt;T&gt;</code> \xe2\x80\xa6DiIncrements the strong reference count on the <code>Rc&lt;T&gt;</code> \xe2\x80\xa6DhWrites the proper factors in <code>fbuf</code>, and the unique prime \xe2\x80\xa600BfCalls `NumInt::int_ref_factors_proper.00CmSimilar to int_factors_proper, but operates on references \xe2\x80\xa600BfCalls `NumInt::int_ref_modulo_add_inv.00CmSimilar to int_modulo_add_inv, but operates on references \xe2\x80\xa600BfCalls `NumInt::int_ref_modulo_mul_inv.00CmSimilar to int_modulo_mul_inv, but operates on references \xe2\x80\xa600BoCount the leading zeroes in a <code>u32</code>.BoCount the leading zeroes in a <code>u64</code>.BaSwitches back to the main screen.BoConverts CIE lightness (L*) to linear luminance0DjLoad an <code>m128d</code> and splat it to the lower and upper half of \xe2\x80\xa6CjLoads the reference into a register, replacing the low \xe2\x80\xa6BoConverts linear luminance to CIE lightness (L*)0CmMin <code>u16</code> value, position, and other lanes zeroed.EhLanewise <code>a * b</code> with lanes as <code>i16</code>, keep the low bits of the \xe2\x80\xa6DeMultiply the <code>i16</code> lanes and keep the low half of each \xe2\x80\xa6DeMultiply the <code>i32</code> lanes and keep the low half of each \xe2\x80\xa6EoMultiply the lower <code>i32</code> within each <code>i64</code> lane, <code>i64</code> output.EoMultiply the lower <code>u32</code> within each <code>u64</code> lane, <code>u64</code> output.DaFlips the bits from the <code>[start..=end]</code> checked range.00BeSets the <code>Variant0</code> field.BeSets the <code>Variant1</code> field.BeSets the <code>Variant2</code> field.BeSets the <code>Variant3</code> field.BeSets the <code>Variant4</code> field.EaGenerates a unique <code>ExampleIdSeqUsize</code> ID with <code>AcqRel</code> \xe2\x80\xa6DhDeposit contiguous low bits from a <code>u32</code> according to a mask.DhDeposit contiguous low bits from a <code>u64</code> according to a mask.CiExtract bits from a <code>u32</code> according to a mask.CiExtract bits from a <code>u64</code> according to a mask.CnReturn the postions of the minimum and maximum elements of \xe2\x80\xa600ClUltra-fast stdout write with newline. Panics if write isn\xe2\x80\xa6DkReturns an exclusive subslice starting from the given <code>start</code>\xe2\x80\xa6CiReturns an exclusive subslice up to and including the \xe2\x80\xa6DeReturns an exclusive subslice up to the given <code>end</code> index.BjReads the CPU\xe2\x80\x99s timestamp counter value.DbLow lane <code>1.0 / sqrt(a)</code> approximation, other lanes \xe2\x80\xa6DgReturns the number of remaining IDs with <code>Acquire</code> ordering.DkCasts <code>self</code> to <code>i16</code> clamping at the numeric bounds.0DoCasts from <code>u32</code> to <code>i16</code> clamping at the numeric bounds.E`Casts from <code>u128</code> to <code>i16</code> clamping at the numeric bounds.DoCasts from <code>u16</code> to <code>i16</code> clamping at the numeric bounds.EaCasts from <code>isize</code> to <code>i16</code> clamping at the numeric bounds.DoCasts from <code>i32</code> to <code>i16</code> clamping at the numeric bounds.DnCasts from <code>u8</code> to <code>i16</code> clamping at the numeric bounds.DoCasts from <code>u64</code> to <code>i16</code> clamping at the numeric bounds.DoCasts from <code>i64</code> to <code>i16</code> clamping at the numeric bounds.DoCasts from <code>i16</code> to <code>i16</code> clamping at the numeric bounds.EaCasts from <code>usize</code> to <code>i16</code> clamping at the numeric bounds.E`Casts from <code>i128</code> to <code>i16</code> clamping at the numeric bounds.DnCasts from <code>i8</code> to <code>i16</code> clamping at the numeric bounds.DkCasts <code>self</code> to <code>i32</code> clamping at the numeric bounds.0DoCasts from <code>u16</code> to <code>i32</code> clamping at the numeric bounds.DoCasts from <code>u32</code> to <code>i32</code> clamping at the numeric bounds.EaCasts from <code>usize</code> to <code>i32</code> clamping at the numeric bounds.E`Casts from <code>i128</code> to <code>i32</code> clamping at the numeric bounds.DnCasts from <code>u8</code> to <code>i32</code> clamping at the numeric bounds.DoCasts from <code>i32</code> to <code>i32</code> clamping at the numeric bounds.E`Casts from <code>u128</code> to <code>i32</code> clamping at the numeric bounds.DoCasts from <code>i64</code> to <code>i32</code> clamping at the numeric bounds.DnCasts from <code>i8</code> to <code>i32</code> clamping at the numeric bounds.DoCasts from <code>u64</code> to <code>i32</code> clamping at the numeric bounds.DoCasts from <code>i16</code> to <code>i32</code> clamping at the numeric bounds.EaCasts from <code>isize</code> to <code>i32</code> clamping at the numeric bounds.DkCasts <code>self</code> to <code>i64</code> clamping at the numeric bounds.0DoCasts from <code>i16</code> to <code>i64</code> clamping at the numeric bounds.DoCasts from <code>i64</code> to <code>i64</code> clamping at the numeric bounds.DoCasts from <code>u32</code> to <code>i64</code> clamping at the numeric bounds.DoCasts from <code>u16</code> to <code>i64</code> clamping at the numeric bounds.DoCasts from <code>i32</code> to <code>i64</code> clamping at the numeric bounds.DnCasts from <code>i8</code> to <code>i64</code> clamping at the numeric bounds.DoCasts from <code>u64</code> to <code>i64</code> clamping at the numeric bounds.EaCasts from <code>usize</code> to <code>i64</code> clamping at the numeric bounds.E`Casts from <code>i128</code> to <code>i64</code> clamping at the numeric bounds.DnCasts from <code>u8</code> to <code>i64</code> clamping at the numeric bounds.EaCasts from <code>isize</code> to <code>i64</code> clamping at the numeric bounds.E`Casts from <code>u128</code> to <code>i64</code> clamping at the numeric bounds.DkCasts <code>self</code> to <code>u16</code> clamping at the numeric bounds.0EaCasts from <code>isize</code> to <code>u16</code> clamping at the numeric bounds.DoCasts from <code>u64</code> to <code>u16</code> clamping at the numeric bounds.DoCasts from <code>u16</code> to <code>u16</code> clamping at the numeric bounds.E`Casts from <code>u128</code> to <code>u16</code> clamping at the numeric bounds.E`Casts from <code>i128</code> to <code>u16</code> clamping at the numeric bounds.DnCasts from <code>i8</code> to <code>u16</code> clamping at the numeric bounds.DnCasts from <code>u8</code> to <code>u16</code> clamping at the numeric bounds.DoCasts from <code>i32</code> to <code>u16</code> clamping at the numeric bounds.DoCasts from <code>i16</code> to <code>u16</code> clamping at the numeric bounds.DoCasts from <code>i64</code> to <code>u16</code> clamping at the numeric bounds.DoCasts from <code>u32</code> to <code>u16</code> clamping at the numeric bounds.EaCasts from <code>usize</code> to <code>u16</code> clamping at the numeric bounds.DkCasts <code>self</code> to <code>u32</code> clamping at the numeric bounds.0EaCasts from <code>usize</code> to <code>u32</code> clamping at the numeric bounds.DnCasts from <code>u8</code> to <code>u32</code> clamping at the numeric bounds.DoCasts from <code>i64</code> to <code>u32</code> clamping at the numeric bounds.DoCasts from <code>u32</code> to <code>u32</code> clamping at the numeric bounds.DoCasts from <code>u16</code> to <code>u32</code> clamping at the numeric bounds.DoCasts from <code>i32</code> to <code>u32</code> clamping at the numeric bounds.E`Casts from <code>u128</code> to <code>u32</code> clamping at the numeric bounds.DoCasts from <code>i16</code> to <code>u32</code> clamping at the numeric bounds.EaCasts from <code>isize</code> to <code>u32</code> clamping at the numeric bounds.E`Casts from <code>i128</code> to <code>u32</code> clamping at the numeric bounds.DoCasts from <code>u64</code> to <code>u32</code> clamping at the numeric bounds.DnCasts from <code>i8</code> to <code>u32</code> clamping at the numeric bounds.DkCasts <code>self</code> to <code>u64</code> clamping at the numeric bounds.0DoCasts from <code>u64</code> to <code>u64</code> clamping at the numeric bounds.DnCasts from <code>u8</code> to <code>u64</code> clamping at the numeric bounds.E`Casts from <code>u128</code> to <code>u64</code> clamping at the numeric bounds.EaCasts from <code>usize</code> to <code>u64</code> clamping at the numeric bounds.DoCasts from <code>u32</code> to <code>u64</code> clamping at the numeric bounds.E`Casts from <code>i128</code> to <code>u64</code> clamping at the numeric bounds.DoCasts from <code>i16</code> to <code>u64</code> clamping at the numeric bounds.DoCasts from <code>u16</code> to <code>u64</code> clamping at the numeric bounds.EaCasts from <code>isize</code> to <code>u64</code> clamping at the numeric bounds.DoCasts from <code>i32</code> to <code>u64</code> clamping at the numeric bounds.DoCasts from <code>i64</code> to <code>u64</code> clamping at the numeric bounds.DnCasts from <code>i8</code> to <code>u64</code> clamping at the numeric bounds.DdSets the args into an <code>m128i</code>, first arg is the low lane.CjSet <code>i16</code> args into an <code>m256i</code> lane.1CjSet <code>i32</code> args into an <code>m256i</code> lane.CjSet <code>i64</code> args into an <code>m256i</code> lane.CeSet <code>m128</code> args into an <code>m256</code>.DjReturns a mutable middle subslice of <code>slice</code> with the given \xe2\x80\xa60CeSort all iterator elements into a new iterator in \xe2\x80\xa600CgSplat the lowest 8-bit lane across the entire 128 bits.D`Stores the <code>i32</code> masked lanes given to the reference.000DaReturns the first <code>n</code> elements of the exclusive slice.ClReturns the slice omitting the last <code>n</code> elements.DoReturns the ASCII representation as a <code>&amp;&#39;static str</code>, or \xe2\x80\xa6CnTruncate the <code>f32</code> lanes to <code>i32</code> lanes.CnWindow has been minimized Right now is only implemented on \xe2\x80\xa600DdCreates a pointer with the given address and no <em>provenance</em>.DmCasts <code>self</code> to <code>isize</code> wrapping at the numeric bounds.0EcCasts from <code>isize</code> to <code>isize</code> wrapping at the numeric bounds.EbCasts from <code>i128</code> to <code>isize</code> wrapping at the numeric bounds.EaCasts from <code>i16</code> to <code>isize</code> wrapping at the numeric bounds.E`Casts from <code>u8</code> to <code>isize</code> wrapping at the numeric bounds.EaCasts from <code>i64</code> to <code>isize</code> wrapping at the numeric bounds.EbCasts from <code>u128</code> to <code>isize</code> wrapping at the numeric bounds.EaCasts from <code>u64</code> to <code>isize</code> wrapping at the numeric bounds.EaCasts from <code>i32</code> to <code>isize</code> wrapping at the numeric bounds.E`Casts from <code>i8</code> to <code>isize</code> wrapping at the numeric bounds.EaCasts from <code>u32</code> to <code>isize</code> wrapping at the numeric bounds.EcCasts from <code>usize</code> to <code>isize</code> wrapping at the numeric bounds.EaCasts from <code>u16</code> to <code>isize</code> wrapping at the numeric bounds.DmCasts <code>self</code> to <code>usize</code> wrapping at the numeric bounds.0EcCasts from <code>usize</code> to <code>usize</code> wrapping at the numeric bounds.EaCasts from <code>i16</code> to <code>usize</code> wrapping at the numeric bounds.EaCasts from <code>u16</code> to <code>usize</code> wrapping at the numeric bounds.E`Casts from <code>u8</code> to <code>usize</code> wrapping at the numeric bounds.EbCasts from <code>i128</code> to <code>usize</code> wrapping at the numeric bounds.EbCasts from <code>u128</code> to <code>usize</code> wrapping at the numeric bounds.EaCasts from <code>u32</code> to <code>usize</code> wrapping at the numeric bounds.EaCasts from <code>u64</code> to <code>usize</code> wrapping at the numeric bounds.EaCasts from <code>i32</code> to <code>usize</code> wrapping at the numeric bounds.EaCasts from <code>i64</code> to <code>usize</code> wrapping at the numeric bounds.E`Casts from <code>i8</code> to <code>usize</code> wrapping at the numeric bounds.EcCasts from <code>isize</code> to <code>usize</code> wrapping at the numeric bounds.fU+001F0fU+001E0DfAn extension trait for miniquad\xe2\x80\x99s <code>MiniquadEventHandler</code>.0DeLanewise saturating <code>a + b</code> with lanes as <code>i8</code>.0DeLanewise saturating <code>a + b</code> with lanes as <code>u8</code>.0CoFinds the index of the last 1 in <code>bits</code> from the \xe2\x80\xa60ClGets the mask of all bits up to and including the lowest \xe2\x80\xa60EaUnsets the bits in <code>self</code> to 0 from the <code>[start..=end]</code> \xe2\x80\xa60DfZero out all high bits in a <code>u32</code> starting at the index \xe2\x80\xa6DfZero out all high bits in a <code>u64</code> starting at the index \xe2\x80\xa6CnShifts all bits in the entire register left by a number of \xe2\x80\xa6CmShifts each <code>u128</code> lane left by a number of bytes.ClShifts all bits in the entire register right by a number \xe2\x80\xa6CnShifts each <code>u128</code> lane right by a number of bytes.D`Bit-preserving cast to <code>m128</code> from <code>m128d</code>D`Bit-preserving cast to <code>m128</code> from <code>m128i</code>D`Bit-preserving cast to <code>m128d</code> from <code>m128</code>D`Bit-preserving cast to <code>m128i</code> from <code>m128</code>DaBit-preserving cast to <code>m256</code> from <code>m256d</code>.DaBit-preserving cast to <code>m256</code> from <code>m256i</code>.DaBit-preserving cast to <code>m256i</code> from <code>m256</code>.0DlLow lane <code>(!a.is_nan()) &amp;amp; (!b.is_nan())</code>, other lanes \xe2\x80\xa6EgReturns the UTF-8 byte length of <code>code</code> <strong>without validation</strong>.EfReturns the default value for this <code>Copy</code> type, or <code>None</code> if \xe2\x80\xa600CeCreate a new zero-sized slice in the provided buffer.EhGets an <code>i8</code> value out of an <code>m256i</code>, returns as <code>i32</code>.Bg<em>const</em> method equivalent to \xe2\x80\xa6CiConverts a mutable slice of bytes to a mutable string \xe2\x80\xa6BhLanewise fused <code>-(a * b) + c</code>0BhLanewise fused <code>-(a * b) - c</code>0DiReturns a copy of <code>self</code> with only the value of the bit at \xe2\x80\xa600EgGets the value of the bits in <code>self</code> from the <code>[start..=end]</code> \xe2\x80\xa600000000000DjGets the value of the bits from the <code>[start..=end]</code> checked \xe2\x80\xa600EhCreates a mismatch where <code>need</code> is an <code>Interval::closed_open</code>, \xe2\x80\xa6ClInsert a key-value pair into the map without checking if \xe2\x80\xa6ChInsert a value the set without checking if the value \xe2\x80\xa6DjConsumes the <code>Box</code>, returning a wrapped raw pointer and the \xe2\x80\xa6DcConsumes the <code>Rc</code>, returning the wrapped pointer and \xe2\x80\xa6DnConsumes the <code>Weak&lt;T&gt;</code>, returning the wrapped pointer and \xe2\x80\xa6DhWhether <code>self</code> is equal to <code>NUM_MAX_POWER_OF_TWO</code>.00CnIterator over generated IDs with <code>AcqRel</code> ordering.CkLoads the reference into a register, replacing the high \xe2\x80\xa6EhComputes the non-negative modulo of <code>self</code> over <code>modulus</code>, and \xe2\x80\xa6EfComputes the non-negative modulo of <code>self</code> over |<code>modulus</code>|, \xe2\x80\xa61011001001EeLanewise <code>a * b</code> with lanes as <code>i16</code>, keep the high bits of \xe2\x80\xa6DfMultiply the <code>i16</code> lanes and keep the high half of each \xe2\x80\xa6DePerforms a \xe2\x80\x9ccarryless\xe2\x80\x9d multiplication of two <code>i64</code> \xe2\x80\xa6EeLanewise <code>a * b</code> with lanes as <code>u16</code>, keep the high bits of \xe2\x80\xa6DfMultiply the <code>u16</code> lanes and keep the high half of each \xe2\x80\xa6EfMultiplies the odd <code>i32</code> lanes and gives the widened (<code>i64</code>) \xe2\x80\xa6EfMultiplies the odd <code>u32</code> lanes and gives the widened (<code>u64</code>) \xe2\x80\xa6CeReturn an iterator adaptor that iterates over the \xe2\x80\xa600BfFlips the <code>Variant0</code> field.BfFlips the <code>Variant1</code> field.BfFlips the <code>Variant2</code> field.BfFlips the <code>Variant3</code> field.BfFlips the <code>Variant4</code> field.DbUnsets the bits from the <code>[start..=end]</code> checked range.00Ce(eventCounts) Retrieves the count of recorded events.Cg(timeOrigin) Retrieves the time origin in milliseconds.DnReturns a subslice from <code>start</code> (inclusive) to <code>end</code> \xe2\x80\xa6Ch(requestAnimationFrame) Requests an animation frame, \xe2\x80\xa6CgConverts the current stack to a different capacity, \xe2\x80\xa6ClConverts the current stack to a different capacity while \xe2\x80\xa6DlCasts <code>self</code> to <code>i128</code> clamping at the numeric bounds.0EaCasts from <code>u128</code> to <code>i128</code> clamping at the numeric bounds.EaCasts from <code>i128</code> to <code>i128</code> clamping at the numeric bounds.DoCasts from <code>i8</code> to <code>i128</code> clamping at the numeric bounds.DoCasts from <code>u8</code> to <code>i128</code> clamping at the numeric bounds.E`Casts from <code>u64</code> to <code>i128</code> clamping at the numeric bounds.EbCasts from <code>isize</code> to <code>i128</code> clamping at the numeric bounds.E`Casts from <code>i64</code> to <code>i128</code> clamping at the numeric bounds.E`Casts from <code>i32</code> to <code>i128</code> clamping at the numeric bounds.E`Casts from <code>u32</code> to <code>i128</code> clamping at the numeric bounds.E`Casts from <code>i16</code> to <code>i128</code> clamping at the numeric bounds.EbCasts from <code>usize</code> to <code>i128</code> clamping at the numeric bounds.E`Casts from <code>u16</code> to <code>i128</code> clamping at the numeric bounds.DlCasts <code>self</code> to <code>u128</code> clamping at the numeric bounds.0EbCasts from <code>isize</code> to <code>u128</code> clamping at the numeric bounds.E`Casts from <code>i32</code> to <code>u128</code> clamping at the numeric bounds.EbCasts from <code>usize</code> to <code>u128</code> clamping at the numeric bounds.DoCasts from <code>u8</code> to <code>u128</code> clamping at the numeric bounds.EaCasts from <code>i128</code> to <code>u128</code> clamping at the numeric bounds.E`Casts from <code>u16</code> to <code>u128</code> clamping at the numeric bounds.E`Casts from <code>i16</code> to <code>u128</code> clamping at the numeric bounds.E`Casts from <code>u64</code> to <code>u128</code> clamping at the numeric bounds.DoCasts from <code>i8</code> to <code>u128</code> clamping at the numeric bounds.E`Casts from <code>i64</code> to <code>u128</code> clamping at the numeric bounds.E`Casts from <code>u32</code> to <code>u128</code> clamping at the numeric bounds.EaCasts from <code>u128</code> to <code>u128</code> clamping at the numeric bounds.EdSets the lowest lane of an <code>m128d</code> as all lanes of an <code>m256d</code>.EgSets the given <code>value</code> into the bits from the <code>[start..=end]</code> \xe2\x80\xa600000000000EcGets a copy of <code>self</code> with the given <code>value</code> set into the \xe2\x80\xa600FbShuffle <code>f32</code> values in <code>a</code> using <code>i32</code> values in <code>v</code>.FaShuffle <code>f32</code> lanes in <code>a</code> using <code>i32</code> values in <code>v</code>.ChSplat the lowest 16-bit lane across the entire 128 bits.ChSplat the lowest 32-bit lane across the entire 128 bits.ChSplat the lowest 64-bit lane across the entire 128 bits.DeLanewise saturating <code>a - b</code> with lanes as <code>i8</code>.0DeLanewise saturating <code>a - b</code> with lanes as <code>u8</code>.0D`Returns the last <code>n</code> elements of the exclusive slice.ClReturns the slice omitting the last <code>n</code> elements.ClConverts a character to its closest ASCII equivalent, or \xe2\x80\xa6CnCounts the number of trailing zero bits in a <code>u32</code>.CnCounts the number of trailing zero bits in a <code>u64</code>.FcTruncate the <code>f64</code> lanes to the lower <code>i32</code> lanes (upper <code>i32</code> \xe2\x80\xa6CaTruncate the lower lane into an <code>i32</code>.CaTruncate the lower lane into an <code>i64</code>.ClConstructs a new boxed slice with uninitialized contents \xe2\x80\xa60CmConverts an address back to a mutable pointer, picking up \xe2\x80\xa6CjConverts an address back to a pointer, picking up some \xe2\x80\xa6fU+00090fU+001C0Di<code>miniquad</code> Low-level interface for rendering operations in \xe2\x80\xa60EgAdd horizontal pairs of <code>i16</code> values, pack the outputs as <code>a</code> \xe2\x80\xa6CmHorizontal <code>a + b</code> with lanes as <code>i16</code>.EgAdd horizontal pairs of <code>i32</code> values, pack the outputs as <code>a</code> \xe2\x80\xa6CmHorizontal <code>a + b</code> with lanes as <code>i32</code>.DfLanewise saturating <code>a + b</code> with lanes as <code>i16</code>.0DfLanewise saturating <code>a + b</code> with lanes as <code>u16</code>.0BfAssist in expanding an AES cipher key.D`Finds the index of the first 1 in <code>bits</code> from the \xe2\x80\xa60CoFinds the index of the last 0 in <code>bits</code> from the \xe2\x80\xa60BcResets (clears) the lowest set bit.0CkGets the value of the lowest set bit in a <code>u32</code>.CkGets the value of the lowest set bit in a <code>u64</code>.DaBit-preserving cast to <code>m128d</code> from <code>m128i</code>DbBit-preserving cast to <code>m128d</code> from <code>m256d</code>.DaBit-preserving cast to <code>m128i</code> from <code>m128d</code>DbBit-preserving cast to <code>m128i</code> from <code>m256i</code>.DbBit-preserving cast to <code>m256d</code> from <code>m256i</code>.DbBit-preserving cast to <code>m256i</code> from <code>m256d</code>.DbCasts <code>self</code> to <code>isize_up</code> with range check.0DhCasts from <code>isize</code> to <code>isize_up</code> with range check.DeCasts from <code>i8</code> to <code>isize_up</code> with range check.DfCasts from <code>i16</code> to <code>isize_up</code> with range check.DfCasts from <code>i64</code> to <code>isize_up</code> with range check.DfCasts from <code>u32</code> to <code>isize_up</code> with range check.DgCasts from <code>u128</code> to <code>isize_up</code> with range check.DgCasts from <code>i128</code> to <code>isize_up</code> with range check.DhCasts from <code>usize</code> to <code>isize_up</code> with range check.DfCasts from <code>u16</code> to <code>isize_up</code> with range check.DeCasts from <code>u8</code> to <code>isize_up</code> with range check.DfCasts from <code>u64</code> to <code>isize_up</code> with range check.DfCasts from <code>i32</code> to <code>isize_up</code> with range check.DbCasts <code>self</code> to <code>usize_up</code> with range check.0DgCasts from <code>i128</code> to <code>usize_up</code> with range check.DfCasts from <code>i32</code> to <code>usize_up</code> with range check.DfCasts from <code>u16</code> to <code>usize_up</code> with range check.DfCasts from <code>u32</code> to <code>usize_up</code> with range check.DhCasts from <code>isize</code> to <code>usize_up</code> with range check.DfCasts from <code>i64</code> to <code>usize_up</code> with range check.DfCasts from <code>i16</code> to <code>usize_up</code> with range check.DeCasts from <code>i8</code> to <code>usize_up</code> with range check.DgCasts from <code>u128</code> to <code>usize_up</code> with range check.DfCasts from <code>u64</code> to <code>usize_up</code> with range check.DhCasts from <code>usize</code> to <code>usize_up</code> with range check.DeCasts from <code>u8</code> to <code>usize_up</code> with range check.DkLow lane <code>(!a.is_nan()) &amp;amp; (!b.is_nan())</code>, other lane \xe2\x80\xa6FjCopies <code>count * size_of::&lt;T&gt;()</code> bytes from <code>src</code> to <code>self</code>. The \xe2\x80\xa6EdCounts the number of 1s in <code>self</code> from the <code>[start..=end]</code> \xe2\x80\xa600000000000BjDuplicate the odd lanes to the even lanes.CbDuplicate the odd-indexed lanes to the even lanes.Cd(addEventListener) Attaches a Rust function as a \xe2\x80\xa6Dj(removeEventListener) Removes a JavaScript function <code>event</code> \xe2\x80\xa6EiGets an <code>i16</code> value out of an <code>m128i</code>, returns as <code>i32</code>.EiGets an <code>i16</code> value out of an <code>m256i</code>, returns as <code>i32</code>.CfExtracts an <code>m128d</code> from <code>m256d</code>CfExtracts an <code>m128i</code> from <code>m256i</code>CjWrites the prime factors in the given <code>buffer</code>.00000000000CcReturns the unique prime factors with its exponent.00000000000Bg<em>const</em> method equivalent to \xe2\x80\xa60000CjLow lane <code>-(a * b) + c</code>, other lanes unchanged.D`Low lane fused <code>-(a * b) - c</code>, other lanes unchanged.CjThe value at the bit range of <code>Variant0</code> field.CjThe value at the bit range of <code>Variant1</code> field.CjThe value at the bit range of <code>Variant2</code> field.CjThe value at the bit range of <code>Variant3</code> field.CjThe value at the bit range of <code>Variant4</code> field.CkCalculates the 1D array index from the given 2D coordinates0BaReturns the unique prime factors.00BhCalls `NumInt::int_ref_digits_base_sign.00CdSimilar to int_digits_base_sign, but operates on \xe2\x80\xa600BhCalls `NumInt::int_ref_div_ties_towards.00CdSimilar to int_div_ties_towards, but operates on \xe2\x80\xa600EcReturns <code>true</code> if <code>self</code> has a negative sign and is not zero.000EcReturns <code>true</code> if <code>self</code> has a positive sign and is not zero.000CnReturn the elements producing the k largest outputs of the \xe2\x80\xa600CkCalculates the modular additive inverse, unchecked version.00000000000ClCalculates the modular multiplicative inverse, unchecked \xe2\x80\xa600000000000BgUnsets the <code>Variant0</code> field.BgUnsets the <code>Variant1</code> field.BgUnsets the <code>Variant2</code> field.BgUnsets the <code>Variant3</code> field.BgUnsets the <code>Variant4</code> field.CmAppends an element and returns a reference to it if there \xe2\x80\xa6DkReturns an exclusive subslice starting from the given <code>start</code>\xe2\x80\xa6CkReads the CPU\xe2\x80\x99s timestamp counter value and store the \xe2\x80\xa6DmCasts <code>self</code> to <code>isize</code> clamping at the numeric bounds.0EaCasts from <code>u16</code> to <code>isize</code> clamping at the numeric bounds.EbCasts from <code>i128</code> to <code>isize</code> clamping at the numeric bounds.EaCasts from <code>i64</code> to <code>isize</code> clamping at the numeric bounds.EcCasts from <code>isize</code> to <code>isize</code> clamping at the numeric bounds.E`Casts from <code>u8</code> to <code>isize</code> clamping at the numeric bounds.EbCasts from <code>u128</code> to <code>isize</code> clamping at the numeric bounds.EcCasts from <code>usize</code> to <code>isize</code> clamping at the numeric bounds.EaCasts from <code>u64</code> to <code>isize</code> clamping at the numeric bounds.EaCasts from <code>u32</code> to <code>isize</code> clamping at the numeric bounds.E`Casts from <code>i8</code> to <code>isize</code> clamping at the numeric bounds.EaCasts from <code>i32</code> to <code>isize</code> clamping at the numeric bounds.EaCasts from <code>i16</code> to <code>isize</code> clamping at the numeric bounds.DmCasts <code>self</code> to <code>usize</code> clamping at the numeric bounds.0EaCasts from <code>u16</code> to <code>usize</code> clamping at the numeric bounds.EaCasts from <code>i16</code> to <code>usize</code> clamping at the numeric bounds.EcCasts from <code>usize</code> to <code>usize</code> clamping at the numeric bounds.EbCasts from <code>u128</code> to <code>usize</code> clamping at the numeric bounds.EcCasts from <code>isize</code> to <code>usize</code> clamping at the numeric bounds.EaCasts from <code>i64</code> to <code>usize</code> clamping at the numeric bounds.EaCasts from <code>i32</code> to <code>usize</code> clamping at the numeric bounds.E`Casts from <code>i8</code> to <code>usize</code> clamping at the numeric bounds.EbCasts from <code>i128</code> to <code>usize</code> clamping at the numeric bounds.E`Casts from <code>u8</code> to <code>usize</code> clamping at the numeric bounds.EaCasts from <code>u64</code> to <code>usize</code> clamping at the numeric bounds.EaCasts from <code>u32</code> to <code>usize</code> clamping at the numeric bounds.DmSets the <code>value</code> into the bitrange of <code>Variant0</code> field.DmSets the <code>value</code> into the bitrange of <code>Variant1</code> field.DmSets the <code>value</code> into the bitrange of <code>Variant2</code> field.DmSets the <code>value</code> into the bitrange of <code>Variant3</code> field.DmSets the <code>value</code> into the bitrange of <code>Variant4</code> field.CgSet <code>m128d</code> args into an <code>m256d</code>.CgSet <code>m128i</code> args into an <code>m256i</code>.FaShuffle the <code>f32</code> lanes from <code>$a</code> and <code>$b</code> together using an \xe2\x80\xa6EdShuffle the <code>i32</code> lanes in <code>$a</code> using an immediate control \xe2\x80\xa6EfShuffle the <code>f64</code> lanes from <code>$a</code> using an immediate control \xe2\x80\xa6EdShuffle the <code>f64</code> lanes in <code>$a</code> using an immediate control \xe2\x80\xa6FbShuffle <code>f32</code> values in <code>a</code> using <code>i32</code> values in <code>v</code>.FlShuffle <code>f64</code> lanes in <code>a</code> using bit 1 of the <code>i64</code> lanes in <code>v</code>FaShuffle <code>i32</code> lanes in <code>a</code> using <code>i32</code> values in <code>v</code>.EoShuffle <code>i8</code> lanes in <code>a</code> using <code>i8</code> values in <code>v</code>.CjForms a mutable raw slice from a mutable pointer and a \xe2\x80\xa6DjSubtract horizontal pairs of <code>i16</code> values, pack the outputs \xe2\x80\xa6CmHorizontal <code>a - b</code> with lanes as <code>i16</code>.DjSubtract horizontal pairs of <code>i32</code> values, pack the outputs \xe2\x80\xa6CmHorizontal <code>a - b</code> with lanes as <code>i32</code>.DfLanewise saturating <code>a - b</code> with lanes as <code>i16</code>.0DfLanewise saturating <code>a - b</code> with lanes as <code>u16</code>.0CjCompute \xe2\x80\x9csum of <code>u8</code> absolute differences\xe2\x80\x9d.0DaReturns the first <code>n</code> elements of the exclusive slice.CgMetal-specific note: if texture was created without \xe2\x80\xa60DfCreates an empty <code>HashMap</code> with the specified capacity, \xe2\x80\xa6DhCreates an empty <code>HashSet</code> with the specified capacity, usingfU+001D0CfPerform the InvMixColumns transform on <code>a</code>.D`Finds the index of the first 0 in <code>bits</code> from the \xe2\x80\xa60D`Reverses the order of the bits in <code>self</code> from the \xe2\x80\xa60CkCalculates the distance between two pointers within the \xe2\x80\xa6CnReturns the smallest power of two greater than or equal to \xe2\x80\xa600000DbCompile-time friendly version of <code>try_from_millis_f64</code>.EdCounts the number of 0s in <code>self</code> from the <code>[start..=end]</code> \xe2\x80\xa600000000000DiDecrements the strong reference count on the <code>Rc&lt;T&gt;</code> \xe2\x80\xa6BjDuplicate the odd lanes to the even lanes.CbDuplicate the even-indexed lanes to the odd lanes.CbDuplicate the odd-indexed lanes to the even lanes.BgCreates a layout, bypassing all checks.CjLow lane <code>-(a * b) + c</code>, other lanes unchanged.D`Low lane fused <code>-(a * b) - c</code>, other lanes unchanged.CkCalculates the 2D coordinates from the given 1D array index0ChWhether the aspect ratio is maintained on window resize.DiIncrements the strong reference count on the <code>Rc&lt;T&gt;</code> \xe2\x80\xa6E`Inserts the low 16 bits of an <code>i32</code> value into an <code>m128i</code>.BiCalls `NumInt::int_ref_digital_root_base.00CeSimilar to int_digital_root_base, but operates on \xe2\x80\xa600BiCalls `NumInt::int_ref_factors_prime_buf.00CeSimilar to int_factors_prime_buf, but operates on \xe2\x80\xa600BiCalls `NumInt::int_ref_modulo_add_cycles.00CeSimilar to int_modulo_add_cycles, but operates on \xe2\x80\xa600BiCalls `NumInt::int_ref_modulo_mul_cycles.00CeSimilar to int_modulo_mul_cycles, but operates on \xe2\x80\xa600BiCalls `NumInt::int_ref_modulo_sub_cycles.00CeSimilar to int_modulo_sub_cycles, but operates on \xe2\x80\xa600DcDecomposes a <code>Vec&lt;T&gt;</code> into its raw components: \xe2\x80\xa6CkReturn the elements producing the k smallest outputs of \xe2\x80\xa600BfLoad data from memory into a register.EfMultiply <code>i16</code> lanes into <code>i32</code> intermediates, keep the high \xe2\x80\xa60DnReturns a subslice from <code>start</code> (inclusive) to <code>end</code> \xe2\x80\xa6CnReturns the amount of time elapsed from another instant to \xe2\x80\xa6DgSet whether to <code>maintain</code> the aspect ratio on window resize.00FaShuffle the <code>f64</code> lanes from <code>$a</code> and <code>$b</code> together using an \xe2\x80\xa6EcShuffle the <code>i32</code> lanes in <code>a</code> using an immediate control \xe2\x80\xa6FmShuffle <code>f64</code> lanes in <code>a</code> using bit 1 of the <code>i64</code> lanes in <code>v</code>.EoShuffle <code>i8</code> lanes in <code>a</code> using <code>i8</code> values in <code>v</code>.E`Casts <code>self</code> to <code>isize_up</code> wrapping at the numeric bounds.0EeCasts from <code>i128</code> to <code>isize_up</code> wrapping at the numeric bounds.EdCasts from <code>u64</code> to <code>isize_up</code> wrapping at the numeric bounds.EdCasts from <code>i16</code> to <code>isize_up</code> wrapping at the numeric bounds.EdCasts from <code>i32</code> to <code>isize_up</code> wrapping at the numeric bounds.EdCasts from <code>u16</code> to <code>isize_up</code> wrapping at the numeric bounds.EcCasts from <code>i8</code> to <code>isize_up</code> wrapping at the numeric bounds.EdCasts from <code>u32</code> to <code>isize_up</code> wrapping at the numeric bounds.EeCasts from <code>u128</code> to <code>isize_up</code> wrapping at the numeric bounds.EdCasts from <code>i64</code> to <code>isize_up</code> wrapping at the numeric bounds.EcCasts from <code>u8</code> to <code>isize_up</code> wrapping at the numeric bounds.EbCasts from <code>usize</code> to <code>isize_up</code> wrapping at the numeric \xe2\x80\xa6EbCasts from <code>isize</code> to <code>isize_up</code> wrapping at the numeric \xe2\x80\xa6E`Casts <code>self</code> to <code>usize_up</code> wrapping at the numeric bounds.0EdCasts from <code>u32</code> to <code>usize_up</code> wrapping at the numeric bounds.EdCasts from <code>i64</code> to <code>usize_up</code> wrapping at the numeric bounds.EdCasts from <code>i32</code> to <code>usize_up</code> wrapping at the numeric bounds.EcCasts from <code>i8</code> to <code>usize_up</code> wrapping at the numeric bounds.EcCasts from <code>u8</code> to <code>usize_up</code> wrapping at the numeric bounds.EdCasts from <code>i16</code> to <code>usize_up</code> wrapping at the numeric bounds.EeCasts from <code>i128</code> to <code>usize_up</code> wrapping at the numeric bounds.EdCasts from <code>u64</code> to <code>usize_up</code> wrapping at the numeric bounds.EeCasts from <code>u128</code> to <code>usize_up</code> wrapping at the numeric bounds.EdCasts from <code>u16</code> to <code>usize_up</code> wrapping at the numeric bounds.EbCasts from <code>usize</code> to <code>usize_up</code> wrapping at the numeric \xe2\x80\xa6EbCasts from <code>isize</code> to <code>usize_up</code> wrapping at the numeric \xe2\x80\xa6DdCasts <code>self</code> to <code>isize_down</code> with range check.0DiCasts from <code>i128</code> to <code>isize_down</code> with range check.DhCasts from <code>i16</code> to <code>isize_down</code> with range check.DgCasts from <code>u8</code> to <code>isize_down</code> with range check.DhCasts from <code>u32</code> to <code>isize_down</code> with range check.DhCasts from <code>i32</code> to <code>isize_down</code> with range check.DjCasts from <code>usize</code> to <code>isize_down</code> with range check.DiCasts from <code>u128</code> to <code>isize_down</code> with range check.DgCasts from <code>i8</code> to <code>isize_down</code> with range check.DhCasts from <code>i64</code> to <code>isize_down</code> with range check.DjCasts from <code>isize</code> to <code>isize_down</code> with range check.DhCasts from <code>u64</code> to <code>isize_down</code> with range check.DhCasts from <code>u16</code> to <code>isize_down</code> with range check.DdCasts <code>self</code> to <code>usize_down</code> with range check.0DjCasts from <code>usize</code> to <code>usize_down</code> with range check.DhCasts from <code>i16</code> to <code>usize_down</code> with range check.DiCasts from <code>i128</code> to <code>usize_down</code> with range check.DhCasts from <code>i64</code> to <code>usize_down</code> with range check.DgCasts from <code>i8</code> to <code>usize_down</code> with range check.DgCasts from <code>u8</code> to <code>usize_down</code> with range check.DiCasts from <code>u128</code> to <code>usize_down</code> with range check.DjCasts from <code>isize</code> to <code>usize_down</code> with range check.DhCasts from <code>u16</code> to <code>usize_down</code> with range check.DhCasts from <code>u32</code> to <code>usize_down</code> with range check.DhCasts from <code>i32</code> to <code>usize_down</code> with range check.DhCasts from <code>u64</code> to <code>usize_down</code> with range check.EcConvert <code>i32</code> to <code>f32</code> and replace the low lane of the input.DfConvert the lowest <code>f32</code> lane to a single <code>f32</code>.DlRounds the two <code>f64</code> lanes to the low two <code>f32</code> lanes.ClConvert <code>f64</code> lanes to be <code>f32</code> lanes.ClConvert <code>f32</code> lanes to be <code>f64</code> lanes.EhCopies the <code>a</code> value and replaces the low lane with the low <code>b</code>\xe2\x80\xa6CkCopy the low lane of the input to both lanes of the output.Cd(addEventListener) Attaches a Rust function as a \xe2\x80\xa6BjReturns the count of unique prime factors.00000000000EeReturns a string from an array of <code>bytes</code>, truncated to <code>n</code> \xe2\x80\xa6000Eamethod equivalent to <code>From&lt;NonNegativeRequired&gt; for IntError</code>\xe2\x80\xa6BjCalls `NumInt::int_ref_factors_proper_buf.00CfSimilar to int_factors_proper_buf, but operates on \xe2\x80\xa600BfLoad data from memory into a register.0DhReturns a subslice up to and including the given <code>end</code> index.EdSets the lowest <code>i8</code> lane of an <code>m128i</code> as all lanes of an \xe2\x80\xa6BgStore data from a register into memory.DfReturns the exclusive slice omitting the last <code>n</code> elements.DbGets the rightwards shifted bits in <code>self</code> from the \xe2\x80\xa60EgSets the given <code>value</code> into the bits from the <code>[start..=end]</code> \xe2\x80\xa60DoReturns the ASCII representation as a <code>&amp;&#39;static str</code>, or \xe2\x80\xa6EfCounts <code>$a</code> as the high bytes and <code>$b</code> as the low bytes then \xe2\x80\xa6DgWorks like <code>combined_byte_shr_imm_m128i</code>, but twice as wide.EcConvert <code>i32</code> to <code>f64</code> and replace the low lane of the input.EcConvert <code>i64</code> to <code>f64</code> and replace the low lane of the input.DfConvert the lowest <code>f64</code> lane to a single <code>f64</code>.DfConvert the lowest <code>i32</code> lane to a single <code>i32</code>.DgGets the <code>i8</code> lane requested. Only the lowest 4 bits are \xe2\x80\xa6CoFinds the index of the last 1 in <code>self</code> from the \xe2\x80\xa600000000000EeReturns a string from an array of <code>bytes</code>, truncated to <code>n</code> \xe2\x80\xa6000EhReturns a weekday from its index, from <code>Monday=0</code> to <code>Sunday=6</code>\xe2\x80\xa6EhReturns a weekday from its index, from <code>Sunday=0</code> to <code>Monday=6</code>\xe2\x80\xa6DkConverts a Vec&lt;u8&gt; to a <code>CString</code> without checking the \xe2\x80\xa6EgComputes the modulo of <code>self + other</code> over <code>modulus</code>, and the \xe2\x80\xa600DgComputes the non-negative modulo of <code>self + other</code> over |\xe2\x80\xa601010010001011010011EgComputes the modulo of <code>self - other</code> over <code>modulus</code>, and the \xe2\x80\xa6DgComputes the non-negative modulo of <code>self - other</code> over |\xe2\x80\xa60100111001EdSets the given <code>value</code> into the <code>[start..=end]</code> checked range.00CgConverts the current stack to a different capacity, \xe2\x80\xa6DnReturns a subslice from <code>start</code> (inclusive) to <code>end</code> \xe2\x80\xa6E`Casts <code>self</code> to <code>isize_up</code> clamping at the numeric bounds.0EdCasts from <code>u64</code> to <code>isize_up</code> clamping at the numeric bounds.EbCasts from <code>usize</code> to <code>isize_up</code> clamping at the numeric \xe2\x80\xa6EdCasts from <code>u16</code> to <code>isize_up</code> clamping at the numeric bounds.EdCasts from <code>u32</code> to <code>isize_up</code> clamping at the numeric bounds.EbCasts from <code>isize</code> to <code>isize_up</code> clamping at the numeric \xe2\x80\xa6EdCasts from <code>i16</code> to <code>isize_up</code> clamping at the numeric bounds.EdCasts from <code>i64</code> to <code>isize_up</code> clamping at the numeric bounds.EeCasts from <code>i128</code> to <code>isize_up</code> clamping at the numeric bounds.EcCasts from <code>i8</code> to <code>isize_up</code> clamping at the numeric bounds.EdCasts from <code>i32</code> to <code>isize_up</code> clamping at the numeric bounds.EeCasts from <code>u128</code> to <code>isize_up</code> clamping at the numeric bounds.EcCasts from <code>u8</code> to <code>isize_up</code> clamping at the numeric bounds.E`Casts <code>self</code> to <code>usize_up</code> clamping at the numeric bounds.0EeCasts from <code>u128</code> to <code>usize_up</code> clamping at the numeric bounds.EdCasts from <code>u64</code> to <code>usize_up</code> clamping at the numeric bounds.EbCasts from <code>isize</code> to <code>usize_up</code> clamping at the numeric \xe2\x80\xa6EcCasts from <code>i8</code> to <code>usize_up</code> clamping at the numeric bounds.EeCasts from <code>i128</code> to <code>usize_up</code> clamping at the numeric bounds.EdCasts from <code>i64</code> to <code>usize_up</code> clamping at the numeric bounds.EdCasts from <code>i16</code> to <code>usize_up</code> clamping at the numeric bounds.EcCasts from <code>u8</code> to <code>usize_up</code> clamping at the numeric bounds.EdCasts from <code>u32</code> to <code>usize_up</code> clamping at the numeric bounds.EdCasts from <code>i32</code> to <code>usize_up</code> clamping at the numeric bounds.EbCasts from <code>usize</code> to <code>usize_up</code> clamping at the numeric \xe2\x80\xa6EdCasts from <code>u16</code> to <code>usize_up</code> clamping at the numeric bounds.EeSets the lowest <code>i16</code> lane of an <code>m128i</code> as all lanes of an \xe2\x80\xa6EeSets the lowest <code>i32</code> lane of an <code>m128i</code> as all lanes of an \xe2\x80\xa6EeSets the lowest <code>i64</code> lane of an <code>m128i</code> as all lanes of an \xe2\x80\xa6EfShuffle 128 bits of integer data from <code>$a</code> and <code>$b</code> using an \xe2\x80\xa6EaShuffle the high <code>i16</code> lanes in <code>$a</code> using an immediate \xe2\x80\xa6EhShuffle the low <code>i16</code> lanes in <code>$a</code> using an immediate control \xe2\x80\xa6BgStore data from a register into memory.0DfReturns the exclusive slice omitting the last <code>n</code> elements.DfCreates an empty <code>HashMap</code> with the specified capacity, \xe2\x80\xa6DhCreates an empty <code>HashSet</code> with the specified capacity, usingCmConverts an address back to a mutable pointer, picking up \xe2\x80\xa6EbCasts <code>self</code> to <code>isize_down</code> wrapping at the numeric bounds.0EdCasts from <code>usize</code> to <code>isize_down</code> wrapping at the numeric \xe2\x80\xa6EbCasts from <code>u64</code> to <code>isize_down</code> wrapping at the numeric \xe2\x80\xa6EbCasts from <code>i16</code> to <code>isize_down</code> wrapping at the numeric \xe2\x80\xa6EeCasts from <code>i8</code> to <code>isize_down</code> wrapping at the numeric bounds.EcCasts from <code>i128</code> to <code>isize_down</code> wrapping at the numeric \xe2\x80\xa6EbCasts from <code>i64</code> to <code>isize_down</code> wrapping at the numeric \xe2\x80\xa6EcCasts from <code>u128</code> to <code>isize_down</code> wrapping at the numeric \xe2\x80\xa6EbCasts from <code>u32</code> to <code>isize_down</code> wrapping at the numeric \xe2\x80\xa6EdCasts from <code>isize</code> to <code>isize_down</code> wrapping at the numeric \xe2\x80\xa6EeCasts from <code>u8</code> to <code>isize_down</code> wrapping at the numeric bounds.EbCasts from <code>u16</code> to <code>isize_down</code> wrapping at the numeric \xe2\x80\xa6EbCasts from <code>i32</code> to <code>isize_down</code> wrapping at the numeric \xe2\x80\xa6EbCasts <code>self</code> to <code>usize_down</code> wrapping at the numeric bounds.0EbCasts from <code>i64</code> to <code>usize_down</code> wrapping at the numeric \xe2\x80\xa6EbCasts from <code>u32</code> to <code>usize_down</code> wrapping at the numeric \xe2\x80\xa6EeCasts from <code>u8</code> to <code>usize_down</code> wrapping at the numeric bounds.EdCasts from <code>usize</code> to <code>usize_down</code> wrapping at the numeric \xe2\x80\xa6EcCasts from <code>u128</code> to <code>usize_down</code> wrapping at the numeric \xe2\x80\xa6EbCasts from <code>u16</code> to <code>usize_down</code> wrapping at the numeric \xe2\x80\xa6EbCasts from <code>u64</code> to <code>usize_down</code> wrapping at the numeric \xe2\x80\xa6EcCasts from <code>i128</code> to <code>usize_down</code> wrapping at the numeric \xe2\x80\xa6EbCasts from <code>i32</code> to <code>usize_down</code> wrapping at the numeric \xe2\x80\xa6EdCasts from <code>isize</code> to <code>usize_down</code> wrapping at the numeric \xe2\x80\xa6EeCasts from <code>i8</code> to <code>usize_down</code> wrapping at the numeric bounds.EbCasts from <code>i16</code> to <code>usize_down</code> wrapping at the numeric \xe2\x80\xa6EdCounts the number of 1s in <code>bits</code> from the <code>[start..=end]</code> \xe2\x80\xa60DiConverts the Unicode scalar <code>code</code> to a UTF-8 encoded byte \xe2\x80\xa6CaCompile-time <code>lightness_to_luminance</code>.0CaCompile-time <code>luminance_to_lightness</code>.0DjWrites the unique prime factors in the given <code>fbuffer</code>, and \xe2\x80\xa600000000000D`Finds the index of the first 1 in <code>self</code> from the \xe2\x80\xa600000000000CoFinds the index of the last 0 in <code>self</code> from the \xe2\x80\xa600000000000DhConverts bytes to an <code>OsString</code> without checking that the \xe2\x80\xa6CkConverts a slice of bytes to an OS string slice without \xe2\x80\xa6CjWrites the prime factors in the given <code>buffer</code>.00BlCalls `NumInt::int_ref_factors_prime_unique.00ChSimilar to int_factors_prime_unique, but operates on \xe2\x80\xa600EgConsumes the <code>Box</code>, returning a wrapped <code>NonNull</code> pointer and \xe2\x80\xa6EeMultiply <code>i16</code> lanes producing <code>i32</code> values, horizontal add \xe2\x80\xa60DeReturns an inclusive subslice up to the given <code>end</code> index.DeSearch for <code>needle</code> in `haystack, with explicit string \xe2\x80\xa6DeSearch for <code>needle</code> in `haystack, with implicit string \xe2\x80\xa6EaShuffle the high <code>i16</code> lanes in <code>$a</code> using an immediate \xe2\x80\xa6EhShuffle the low <code>i16</code> lanes in <code>$a</code> using an immediate control \xe2\x80\xa6EcDecodes a UTF-8 code point from <code>bytes</code>, starting at <code>index</code>.Cm\xf0\x9f\x95\x98\xf0\x9f\x9a\xa9 <code>core</code> Error returned from converting \xe2\x80\xa60EdCounts the number of 0s in <code>bits</code> from the <code>[start..=end]</code> \xe2\x80\xa60DcReturn an iterator that iterates over the <code>k</code>-length \xe2\x80\xa600DhWrites the prime factors in <code>pfbuf</code>, and the unique prime \xe2\x80\xa60DjWrites the prime factors in <code>pfbuf</code>, and the unique factors \xe2\x80\xa6001010110D`Finds the index of the first 0 in <code>self</code> from the \xe2\x80\xa600000000000CfUnsafely creates a C string wrapper from a byte slice.DnReturns a subslice from <code>start</code> (inclusive) to <code>end</code> \xe2\x80\xa6BoFor depth-only render pass returns empty slice.0EbCasts <code>self</code> to <code>isize_down</code> clamping at the numeric bounds.0EcCasts from <code>i128</code> to <code>isize_down</code> clamping at the numeric \xe2\x80\xa6EbCasts from <code>i16</code> to <code>isize_down</code> clamping at the numeric \xe2\x80\xa6EbCasts from <code>i64</code> to <code>isize_down</code> clamping at the numeric \xe2\x80\xa6EdCasts from <code>usize</code> to <code>isize_down</code> clamping at the numeric \xe2\x80\xa6EbCasts from <code>u32</code> to <code>isize_down</code> clamping at the numeric \xe2\x80\xa6EcCasts from <code>u128</code> to <code>isize_down</code> clamping at the numeric \xe2\x80\xa6EbCasts from <code>u64</code> to <code>isize_down</code> clamping at the numeric \xe2\x80\xa6EbCasts from <code>u16</code> to <code>isize_down</code> clamping at the numeric \xe2\x80\xa6EeCasts from <code>i8</code> to <code>isize_down</code> clamping at the numeric bounds.EeCasts from <code>u8</code> to <code>isize_down</code> clamping at the numeric bounds.EdCasts from <code>isize</code> to <code>isize_down</code> clamping at the numeric \xe2\x80\xa6EbCasts from <code>i32</code> to <code>isize_down</code> clamping at the numeric \xe2\x80\xa6EbCasts <code>self</code> to <code>usize_down</code> clamping at the numeric bounds.0EbCasts from <code>i64</code> to <code>usize_down</code> clamping at the numeric \xe2\x80\xa6EbCasts from <code>u16</code> to <code>usize_down</code> clamping at the numeric \xe2\x80\xa6EdCasts from <code>usize</code> to <code>usize_down</code> clamping at the numeric \xe2\x80\xa6EbCasts from <code>u64</code> to <code>usize_down</code> clamping at the numeric \xe2\x80\xa6EbCasts from <code>i32</code> to <code>usize_down</code> clamping at the numeric \xe2\x80\xa6EcCasts from <code>u128</code> to <code>usize_down</code> clamping at the numeric \xe2\x80\xa6EbCasts from <code>i16</code> to <code>usize_down</code> clamping at the numeric \xe2\x80\xa6EbCasts from <code>u32</code> to <code>usize_down</code> clamping at the numeric \xe2\x80\xa6EcCasts from <code>i128</code> to <code>usize_down</code> clamping at the numeric \xe2\x80\xa6EdCasts from <code>isize</code> to <code>usize_down</code> clamping at the numeric \xe2\x80\xa6EeCasts from <code>u8</code> to <code>usize_down</code> clamping at the numeric bounds.EeCasts from <code>i8</code> to <code>usize_down</code> clamping at the numeric bounds.DeSearch for <code>needle</code> in `haystack, with explicit string \xe2\x80\xa6DeSearch for <code>needle</code> in `haystack, with implicit string \xe2\x80\xa6EgConverts the lower <code>f32</code> to <code>f64</code> and replace the low lane of \xe2\x80\xa6EfConverts the low <code>f64</code> to <code>f32</code> and replaces the low lane of \xe2\x80\xa6ClRounds the <code>f32</code> lanes to <code>i32</code> lanes.ClConvert <code>f32</code> lanes to be <code>i32</code> lanes.DfRounds the four <code>i32</code> lanes to four <code>f32</code> lanes.ClConvert <code>i32</code> lanes to be <code>f32</code> lanes.CkSlowly inserts an <code>m128i</code> to <code>m256i</code>.CiReturns an exclusive subslice up to and including the \xe2\x80\xa6CoFinds the index of the last 1 in <code>bits</code> from the \xe2\x80\xa60DlRounds the two <code>f64</code> lanes to the low two <code>i32</code> lanes.ClConvert <code>f64</code> lanes to be <code>i32</code> lanes.ClConvert <code>i32</code> lanes to be <code>f64</code> lanes.DdSets the given checked <code>value</code> into the bits from the \xe2\x80\xa600000000000EgGets a copy of <code>self</code> with the given checked <code>value</code> set into \xe2\x80\xa600D`Finds the index of the first 1 in <code>bits</code> from the \xe2\x80\xa60CoFinds the index of the last 0 in <code>bits</code> from the \xe2\x80\xa60EeGets the <code>f32</code> lane requested. Returns as an <code>i32</code> bit pattern.DjAttempts to get mutable references to <code>N</code> values in the map \xe2\x80\xa6C`Calls `NumInt::int_ref_factors_prime_unique_buf.00ClSimilar to int_factors_prime_unique_buf, but operates on \xe2\x80\xa600DeReturns an inclusive subslice up to the given <code>end</code> index.CkReturns if, among the masked bits, there\xe2\x80\x99s both 0s and 1sD`Finds the index of the first 0 in <code>bits</code> from the \xe2\x80\xa60DlRounds the two <code>f64</code> lanes to the low two <code>f32</code> lanes.CjConvert <code>i8</code> values to <code>i16</code> values.CjConvert <code>u8</code> values to <code>i16</code> values.DkComputes eight <code>u16</code> \xe2\x80\x9csum of absolute difference\xe2\x80\x9d values \xe2\x80\xa60DiAdd horizontal pairs of <code>i16</code> values, saturating, pack the \xe2\x80\xa6DhHorizontal saturating <code>a + b</code> with lanes as <code>i16</code>.DdSets the given checked <code>value</code> into the bits from the \xe2\x80\xa60CkConvert <code>i16</code> values to <code>i32</code> values.CkConvert <code>u16</code> values to <code>i32</code> values.CkConvert <code>i32</code> values to <code>i64</code> values.CkConvert <code>u32</code> values to <code>i64</code> values.EaSets the given checked <code>value</code> into the <code>[start..=end]</code> \xe2\x80\xa600DjSubtract horizontal pairs of <code>i16</code> values, saturating, pack \xe2\x80\xa6DhHorizontal saturating <code>a - b</code> with lanes as <code>i16</code>.DjRounds the lower two <code>i32</code> lanes to two <code>f64</code> lanes.DiConvert <code>f32</code> lanes to <code>i32</code> lanes with truncation.DiConvert <code>f64</code> lanes to <code>i32</code> lanes with truncation.AgThis is dumb and weird.0DnConvert the lower eight <code>i8</code> lanes to eight <code>i16</code> lanes.DbConvert lower 4 <code>u8</code> values to <code>i16</code> values.DbConvert lower 8 <code>u8</code> values to <code>i16</code> values.DlConvert the lower four <code>i8</code> lanes to four <code>i32</code> lanes.DfConvert the lower 8 <code>i8</code> values to <code>i32</code> values.DjConvert the lower two <code>i8</code> lanes to two <code>i64</code> lanes.DfConvert the lower 4 <code>i8</code> values to <code>i64</code> values.DnConvert the lower eight <code>u8</code> lanes to eight <code>u16</code> lanes.DlConvert the lower four <code>u8</code> lanes to four <code>u32</code> lanes.DjConvert the lower two <code>u8</code> lanes to two <code>u64</code> lanes.DkConvert the lower two <code>i64</code> lanes to two <code>i32</code> lanes.DmConvert the lower four <code>i16</code> lanes to four <code>i32</code> lanes.DkConvert the lower two <code>i32</code> lanes to two <code>i64</code> lanes.CkConvert <code>i16</code> values to <code>i64</code> values.CkConvert <code>u16</code> values to <code>i64</code> values.DmConvert the lower four <code>u16</code> lanes to four <code>u32</code> lanes.DkConvert the lower two <code>u16</code> lanes to two <code>u64</code> lanes.DkConvert the lower two <code>u32</code> lanes to two <code>u64</code> lanes.")