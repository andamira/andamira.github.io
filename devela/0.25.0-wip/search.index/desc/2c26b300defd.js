rd_("EeReturns a copy of <code>self</code> unsetting the bit at <code>index</code>, checked.00DbA copy of <code>self</code> with the <code>FLAG1</code> field set.0DbA copy of <code>self</code> with the <code>FLAG2</code> field set.0DbA copy of <code>self</code> with the <code>MASK0</code> field set.0CnReturns the total duration of the audio, regardless of its \xe2\x80\xa60CjConvenience function to create an unsupport feature error.CkReturns the contained <code>Some</code> value or a default.ChReturns the contained <code>Ok</code> value or a defaultCkAdd key/value pairs from another dictionary to this one \xe2\x80\xa60EbUnwraps the contained <code>Some(value)</code> or provides a <code>default</code>.E`Unwraps the contained <code>Ok(value)</code> or provides a <code>default</code>.E`Wraps the <code>value</code> field into an <code>Option</code>, in compile-time.CiSize in bytes of each value/item in the underlying slice.BnFill the image with a linear vertical gradientDhReturns a waiting iterator that calls <code>wait_event_timeout()</code>.ChCreate a tree like postfix parallel iterator from an \xe2\x80\xa6DkAdd an already-built effect and return the <code>MainTrackBuilder</code>\xe2\x80\xa6DkAdd an already-built effect and return the <code>SendTrackBuilder</code>\xe2\x80\xa6DeAdd an already-built effect and return the <code>TrackBuilder</code>.BnAdd an already-built effect and return the \xe2\x80\xa6CdReturn new CpuId struct with custom reader function.EbWhile creating the <code>Key</code>, add <code>Decor</code> to it for between dotsDiRuns the given closure with a <code>BorrowedBuf</code> containing the \xe2\x80\xa6DkSets the value of the \xe2\x80\x9ccpu_usage\xe2\x80\x9d refresh kind to <code>false</code>\xe2\x80\xa6DkSets the value of the \xe2\x80\x9cfrequency\xe2\x80\x9d refresh kind to <code>false</code>\xe2\x80\xa6DhSets the value of the \xe2\x80\x9cprocesses\xe2\x80\x9d refresh kind to <code>None</code>.CmReturns the total number of times the given worker thread \xe2\x80\xa6CkPolls for the result of a JavaScript execution in a worker.DeLike <code>write_at</code>, except that it writes from a slice of \xe2\x80\xa60CeAEAD XChaCha20Poly1305 as specified in the draft RFC.CgZero extend an <code>m128d</code> to <code>m256d</code>0CgZero extend an <code>m128i</code> to <code>m256i</code>0ClReturns the main zodiac name, associated to the start of \xe2\x80\xa6Bb&lt; SMPTE ST 428-1 (CIE 1931 XYZ)Bc&lt; SMPTE ST 431-2 (2011) / DCI P3C`&lt; SMPTE ST 432-1 (2010) / P3 D65 / Display P3Co&lt; reserved for future use by ITU-T and ISO/IEC just like \xe2\x80\xa6Da&lt; \xe2\x80\x9cLogarithmic transfer characteristic (100 * Sqrt(10) : \xe2\x80\xa6Ac&lt; SMPTE ST 428-1Ba&lt; discard all non intra frameskDRM device.CjDifferent data types that can be returned via the AVIO \xe2\x80\xa6Bg@defgroup lavc_parsing Frame parsing @{CmDescriptor that unambiguously describes how the bits of a \xe2\x80\xa6CaStructure describing a single Region Of Interest.AfMute control messages.nDummy message.AcRequest pause/play.jSee above.2Bn&lt; Number of downmix types. Not part of ABI.C`&lt; Use XML non-markup character data escaping.Co&lt; offset must point to a pointer immediately followed by \xe2\x80\xa6l&lt; BI typeAd&lt; Switching IntraAh&lt; Switching PredictedCn&lt; packed RGB 16:16:16, 48bpp, 16B, 16G, 16R, the 2-byte \xe2\x80\xa60Bg&lt; planar GBR 4:4:4 27bpp, big-endianBj&lt; planar GBR 4:4:4 27bpp, little-endianBg&lt;        Y        , 9bpp, big-endianBj&lt;        Y        , 9bpp, little-endianCn&lt; packed RGB 16:16:16, 48bpp, 16R, 16G, 16B, the 2-byte \xe2\x80\xa60Bi&lt; packed YUV 4:2:2, 16bpp, Cb Y0 Cr Y1Da&lt; packed XYZ 4:4:4, 36 bpp, (msb) 12X, 12Y, 12Z (lsb), the \xe2\x80\xa60Da&lt; planar YUV 4:1:0,  9bpp, (1 Cr &amp; Cb sample per 4x4 Y \xe2\x80\xa6Da&lt; planar YUV 4:1:1, 12bpp, (1 Cr &amp; Cb sample per 4x1 Y \xe2\x80\xa6Da&lt; planar YUV 4:2:0, 12bpp, (1 Cr &amp; Cb sample per 2x2 Y \xe2\x80\xa6Da&lt; planar YUV 4:2:2, 16bpp, (1 Cr &amp; Cb sample per 2x1 Y \xe2\x80\xa6Cn&lt; planar YUV 4:4:0 (1 Cr &amp; Cb sample per 1x2 Y samples)Da&lt; planar YUV 4:4:4, 24bpp, (1 Cr &amp; Cb sample per 1x1 Y \xe2\x80\xa6Bi&lt; packed YUV 4:2:2, 16bpp, Y0 Cb Y1 CrBi&lt; packed YUV 4:2:2, 16bpp, Y0 Cr Y1 CbClATSC A53 Part 4 Closed Captions. This metadata should be \xe2\x80\xa6Ac&lt; double, planarAb&lt; float, planarAk&lt; signed 16 bits, planarAk&lt; signed 32 bits, planarAk&lt; signed 64 bits, planarCkA possibly ambiguous <code>Timestamp</code>, created by \xe2\x80\xa6AaInteger overflow.0CiPixels are either black (0) or white (1) and a second \xe2\x80\xa6BfA blinking underscore cursor shape(_).BjUsed by <code>PyTuple::into_iter()</code>.DhUsed to create a default <code>BuildHasher</code> instance for types \xe2\x80\xa600gWavPackCkReturns a slice with the code to move the cursor to the \xe2\x80\xa60DlAugments <code>AllocErr</code> with a <code>CapacityOverflow</code> variant.BmAttempt to connect to a CONNECT proxy failed.CeA deserializer holding a <code>Cow&lt;str&gt;</code>.BgCode to disable the alternative screen.Fa64-bit data <em>type</em>, restricted to <code>Copy</code> variants, with extra <code>T</code>\xe2\x80\xa60EhOptions for <code>DateTime::checked_add</code> and <code>DateTime::checked_sub</code>\xe2\x80\xa6DjOptions for <code>DateTime::since</code> and <code>DateTime::until</code>.EcError returned from parsing a <code>Datetime</code> in the <code>FromStr</code> \xe2\x80\xa6EfDefault hash builder for the <code>S</code> type parameter of <code>HashMap</code> \xe2\x80\xa6fU+00130000BmA command that disables focus event emission.DkError that can be returned when passing <code>DistanceModel</code> with \xe2\x80\xa6EjPrefer <code>libEGL</code>; fall back to <code>libGLX</code> if <code>libEGL</code> is \xe2\x80\xa6CiCode to erase from the cursor to the start of the screen.Ca417 Expectation Failed [RFC9110, Section 15.5.18]BmA command that enables mouse event capturing.BaEnumerate the pixels of an image.ChParallel iterator over pixel refs and their coordinates.DdA callback trait for [<code>EventSubsystem::add_event_watch</code>].AhExecutable file is busy.0000BcExponential distance clamped model.BmFront right-of-centre (right center) channel.CcThe signal failed to be sent to the target process.EjPrefer <code>libGLX</code>; fall back to <code>libEGL</code> if <code>libGLX</code> is \xe2\x80\xa6CjAn error return indicating that not enough content was \xe2\x80\xa6Fb\xf0\x9f\x94\x80 <code>core</code> Create a default [<code>HasherBuild</code>] instance for <code>T:</code>\xe2\x80\xa60BhMainBundle pathForResource returned nullBl\xf0\x9d\x9f\x99 \xf0\x9f\x9a\xa9 The given bounds are incompatible.BdThe given bounds are not compatible.010FaA mutable iterator type over <code>InlineTable</code>\xe2\x80\x99s <code>Key</code>/<code>Value</code> \xe2\x80\xa6CkThe operation would have performed an allocation larger \xe2\x80\xa6CmAn iterator adaptor that alternates elements from the two \xe2\x80\xa60Dj<code>InterleaveShortest</code> is an iterator that works similarly to \xe2\x80\xa6CcA trait for types that can be converted into an \xe2\x80\xa6DfA possible error when converting a <code>HeaderValue</code> from a \xe2\x80\xa6AdInvalid magic number00AgMax distance is &lt; 0.CmScope of an IPv6 multicast address as defined in IETF RFC \xe2\x80\xa600D`\xf0\x9f\x94\x84 <code>std</code> An iterator over the Components of a Path.0BnBy-value <code>RangeInclusive</code> iterator.00De\xf0\x9f\x94\x84 <code>itertools</code> An iterator that can be unzipped into \xe2\x80\xa60CcL2/L3 Cache and TLB Information (LEAF=0x8000_0006).ClThe primary separator of path components for the current \xe2\x80\xa6C`405 Method Not Allowed [RFC9110, Section 15.5.6]BfIncreases the microphone input volume.0Ck\xf0\x9f\xaa\xaa \xf0\x9f\x9a\xa9 The given capacity did not match the required \xe2\x80\xa6Cf\xf0\x9f\x9a\xa9 The given capacity did not match the required \xe2\x80\xa6000100CiA command that moves the terminal cursor up the given \xe2\x80\xa6CkProvides a tool for mutating a byte slice by filling it \xe2\x80\xa6ChThe network containing the remote host is not reachable.0000CfThe represented image can not use this representation.DfAn internal helper for <code>split_off</code> functions indicating \xe2\x80\xa600BfTwo indices provided were overlapping.0000C`308 Permanent Redirect [RFC9110, Section 15.4.8]ClDefines the authentication method that should be used to \xe2\x80\xa6Dh<code>core</code> A marker trait which represents a shared reference \xe2\x80\xa60Dj<code>ParallelDrainRange</code> creates a parallel iterator that moves \xe2\x80\xa60BeDetails how a parameter is malformed.DiThe pixel with an associated <code>ColorType</code>. Not all possible \xe2\x80\xa6BeA command that prints styled content.Ch<code>std</code> An iterator over the command arguments.0Dd<code>std</code> An iterator over the command environment variables.0CnUsed to determine what you want to refresh specifically on \xe2\x80\xa6Dk<code>std</code> A trait for implementing arbitrary return types in the \xe2\x80\xa60BnIntel Processor Trace Information (LEAF=0x14).CmImplementation of functionality for <code>PyByteArray</code>.0CcInitializer for our <code>#[pyclass]</code> system.00DcRetrieve the day component of a <code>PyDateTime_Date</code> or \xe2\x80\xa6EbCheck if <code>op</code>\xe2\x80\x99s type is exactly <code>PyDateTimeAPI.DeltaType</code>.CnRepresents Python\xe2\x80\x99s <code>EnvironmentError</code> exception.DbAllows building a Python <code>frozenset</code> one item at a timeCmImplementation of functionality for <code>PyFrozenSet</code>.0CnRepresents Python\xe2\x80\x99s <code>InterruptedError</code> exception.CbFunction types used to implement Python callables.CmImplementation of functionality for <code>PyTraceback</code>.0CgRepresents a Python <code>weakref.ReferenceType</code>.CaObjects support garbage collection (see objimp.h)CmAdd extra events with [<code>KeyEvent.kind</code>] set to \xe2\x80\xa6CnThe filesystem or storage medium is read-only, but a write \xe2\x80\xa60000CfAn RAII implementation of a \xe2\x80\x9cscoped lock\xe2\x80\x9d of a \xe2\x80\xa6Dm\xf0\x9f\x9a\xa9 <code>core</code> An error returned by <code>RefCell::try_borrow</code>.0fU+005D0000BlGet converted/resampled data from the streamCaAdd data to be converted/resampled to the stream.Bb&lt; no blending dstRGBA = srcRGBACm\\brief The blend operation used when combining source and \xe2\x80\xa6CnCopy an existing surface to a new surface of the specified \xe2\x80\xa6BkCreate a 2D rendering context for a window.AnDestroy the specified texture.Bg\\brief Event subtype for display eventsCkCalculate a minimal rectangle enclosing a set of points \xe2\x80\xa6Am\\brief Window flash operationCeBind an OpenGL/ES/ES2 texture to the current context.BcDynamically load an OpenGL library.CiSet up an OpenGL context for rendering into an OpenGL \xe2\x80\xa6CbConvert a GUID string into a ::SDL_GUID structure.CiUse this function to get the name of a built in audio \xe2\x80\xa6CiThis function is a legacy means of querying the audio \xe2\x80\xa6BnGet information about a specific display mode.BlGet the name of a display in UTF-8 encoding.AoQuery the current event filter.BiGet the boolean value of a hint variable.BjGet a key code from a human-readable name.BfGet the touch ID with the given index.CkGet the finger object for specified touch device ID and \xe2\x80\xa6BhGet the name of a built in video driver.AeGet the window flags.AjGet the title of a window.Bm&lt; Region is normal. No special properties.Ck\\brief A structure containing a template for a Constant \xe2\x80\xa6Ck\\brief A structure containing a template for a Periodic \xe2\x80\xa6CkCalculate the intersection of two rectangles with float \xe2\x80\xa6CcReturn whether the given window is a shaped window.Ce&lt; A new joystick has been inserted into the systemCh\\brief Joystick button event structure (event.jbutton.*)Ch\\brief Joystick device event structure (event.jdevice.*)CaGet the current state of a POV hat on a joystick.BdQuery whether a joystick has an LED.AfStart a rumble effect.B`Update a joystick\xe2\x80\x99s LED color.BoUpdate the current state of the open joysticks.BnGet the priority of a particular log category.BnSet the priority of a particular log category.BcMake a window as large as possible.CiMessageBox structure containing title, text, window, etc.CkGet a pointer to the backing CAMetalLayer for the given \xe2\x80\xa6BnMinimize a window to an iconic representation.BeMix audio data in a specified format.AjCreate a new audio stream.CnUse this function to prepare a read-only memory buffer for \xe2\x80\xa6CiAllocate a set of user-defined events, and return the \xe2\x80\xa6BlDraw a line on the current rendering target.CaDraw a rectangle on the current rendering target.CmFill a rectangle on the current rendering target with the \xe2\x80\xa6CnRender a list of triangles, optionally using a texture and \xe2\x80\xa6BmGet the drawing scale for the current target.CjSet the drawing scale for rendering on the current target.BcToggle VSync of the given renderer.Ac&lt; AC Redo/RepeatCm&lt; Located in the top left corner (on both ANSI and ISO \xe2\x80\xa6Aj&lt; Hangul/English toggleAe&lt; Hanja conversionm&lt; Katakanam&lt; HiraganaAd&lt; Zenkaku/Hankakum&lt; reserved000m&lt; AC PasteCk&lt; The USB document says this is a status flag, not a \xe2\x80\xa6Ad&lt; SC System SleepCn&lt; Accelerometer for left Joy-Con controller and Wii nunchukBo&lt; Accelerometer for right Joy-Con controllerBc&lt; Returned for an invalid sensorAh&lt; Unknown sensor typeChWait until a semaphore has a positive value and then \xe2\x80\xa6ClSet up a filter to process all events before they change \xe2\x80\xa6C`Set the shape and parameters of a shaped window.AjSet the title of a window.AkCreate a modal message box.BjStart accepting Unicode text input events.Ci\\brief Keyboard text input event structure (event.text.*)BjThe function passed to SDL_CreateThread().AhThe SDL thread priority.An&lt; window not created by SDLBj&lt; window should be treated as a tooltipCa&lt; window should be treated as a utility windowAmSize of private SharedSecret.AkShared Secret size (bytes).00CjMatches when the complete needle string is a substring \xe2\x80\xa6BiReturn the index of the last match found.BmA command that sets the the background color.BmA command that sets the the foreground color.BmThis signal doesn\xe2\x80\x99t exist on this platform.ChThe output of the queue. Implements <code>Source</code>.AgControls a mixer track.Ee\xf0\x9f\x95\x98\xf0\x9f\x9a\xa9 <code>std</code> Error returned from the <code>duration_since</code> and \xe2\x80\xa60BjA streaming sound that is not playing yet.BmA deserializer holding a <code>String</code>.ChStatically guarantees that a lane count is marked as \xe2\x80\xa600CiAn interface for types that support synchronized updates.C`307 Temporary Redirect [RFC9110, Section 15.4.7]CnAn iterator adaptor that consumes elements while the given \xe2\x80\xa60Di<code>core</code> A virtual function pointer table that specifies the \xe2\x80\xa60Cc\xf0\x9f\x95\x98 A time split from milliseconds to nanoseconds.0DcAn RFC 9557 time zone annotation, for use with <code>Pieces</code>.CcAn offset along with DST status and a time zone \xe2\x80\xa6BoA representation a single time zone transition.BhThe playback state of a mixer sub-track.BlA trait which indicates that a type is a \xe2\x80\xa6ClAn iterator over the substrings of a string which, after \xe2\x80\xa6mOpaque error.BoThe format of the data has not been recognized.DjA command that holds a target <code>Value</code> and a <code>Tween</code>.CjOn Wayland, specify how to draw client-side decoration \xe2\x80\xa6AnPermission query result state.0AkSee <code>_mm_setcsr</code>00000000htruncate00Aainterval [0.5, 1)00Aainterval [0.5, 2)00hsign = 000444EgReturns the bit in position <code>b</code> of the memory addressed by <code>p</code>\xe2\x80\xa600CjCompute the bitwise OR of 16-bit masks a and b. If the \xe2\x80\xa600CjCompute the bitwise OR of 32-bit masks a and b. If the \xe2\x80\xa600CjCompute the bitwise OR of 64-bit masks a and b. If the \xe2\x80\xa600CiCompute the bitwise OR of 8-bit masks a and b. If the \xe2\x80\xa600000EdConcatenates pairs of 16-byte blocks in <code>a</code> and <code>b</code> into a \xe2\x80\xa600CiConvert scalar half-precision (16-bit) floating-point \xe2\x80\xa600EfBlends packed 16-bit integers from <code>a</code> and <code>b</code> using control \xe2\x80\xa600EfBlends packed 32-bit integers from <code>a</code> and <code>b</code> using control \xe2\x80\xa600ElBlends packed 8-bit integers from <code>a</code> and <code>b</code> using <code>mask</code>.00CkCompare packed double-precision (64-bit) floating-point \xe2\x80\xa600CiCompare packed half-precision (16-bit) floating-point \xe2\x80\xa600CkCompare packed single-precision (32-bit) floating-point \xe2\x80\xa600EbCompares packed 16-bit integers in <code>a</code> and <code>b</code> for equality.00EbCompares packed 32-bit integers in <code>a</code> and <code>b</code> for equality.00EbCompares packed 64-bit integers in <code>a</code> and <code>b</code> for equality.00DlCompares packed 16-bit integers in <code>a</code> and <code>b</code> for \xe2\x80\xa600DlCompares packed 32-bit integers in <code>a</code> and <code>b</code> for \xe2\x80\xa600DlCompares packed 64-bit integers in <code>a</code> and <code>b</code> for \xe2\x80\xa600ChConvert packed signed 16-bit integers in a to packed \xe2\x80\xa600CoConverts packed 32-bit integers in <code>a</code> to packed \xe2\x80\xa600ChConvert packed signed 32-bit integers in a to packed \xe2\x80\xa600111ChConvert packed signed 64-bit integers in a to packed \xe2\x80\xa600000000CjConvert packed unsigned 16-bit integers in a to packed \xe2\x80\xa600CjConvert packed unsigned 32-bit integers in a to packed \xe2\x80\xa600000CjConvert packed unsigned 64-bit integers in a to packed \xe2\x80\xa600000000CiConvert packed half-precision (16-bit) floating-point \xe2\x80\xa600000CkConvert packed single-precision (32-bit) floating-point \xe2\x80\xa600ClConverts packed double-precision (64-bit) floating-point \xe2\x80\xa600CkConvert packed double-precision (64-bit) floating-point \xe2\x80\xa600000000333333333333333333ClConverts packed single-precision (32-bit) floating-point \xe2\x80\xa600333333333CjFix up packed double-precision (64-bit) floating-point \xe2\x80\xa600CjFix up packed single-precision (32-bit) floating-point \xe2\x80\xa600CnMultiplies packed double-precision (64-bit) floating-point \xe2\x80\xa600CjMultiply packed half-precision (16-bit) floating-point \xe2\x80\xa600CnMultiplies packed single-precision (32-bit) floating-point \xe2\x80\xa600222111000DiHorizontally adds adjacent pairs of 16-bit integers in <code>a</code> \xe2\x80\xa600CnHorizontally subtract adjacent pairs of 16-bit integers in \xe2\x80\xa600EfCopies <code>a</code> to result, and inserts the 8-bit integer <code>i</code> into \xe2\x80\xa600CmCopy a to dst, then insert 128 bits (composed of 4 packed \xe2\x80\xa600CmCopy a to dst, then insert 128 bits (composed of 2 packed \xe2\x80\xa600111000CmLoads 256-bits of integer data from unaligned memory into \xe2\x80\xa600CbLoads two 128-bit values (composed of 4 packed \xe2\x80\xa600CnLoad 256-bits (composed of 16 packed 16-bit integers) from \xe2\x80\xa600CmLoad 256-bits (composed of 8 packed 32-bit integers) from \xe2\x80\xa600CmLoad 256-bits (composed of 4 packed 64-bit integers) from \xe2\x80\xa600CkLoads 256-bits of integer data from memory into result. \xe2\x80\xa600CiCounts the number of leading zero bits in each packed \xe2\x80\xa600000CgAdd packed double-precision (64-bit) floating-point \xe2\x80\xa600CnAdd packed half-precision (16-bit) floating-point elements \xe2\x80\xa600CgAdd packed single-precision (32-bit) floating-point \xe2\x80\xa600CfCompute the bitwise AND of packed double-precision \xe2\x80\xa600CfCompute the bitwise AND of packed single-precision \xe2\x80\xa600CjDivide packed double-precision (64-bit) floating-point \xe2\x80\xa600ChDivide packed half-precision (16-bit) floating-point \xe2\x80\xa600CjDivide packed single-precision (32-bit) floating-point \xe2\x80\xa600CkCompare packed double-precision (64-bit) floating-point \xe2\x80\xa600CiCompare packed half-precision (16-bit) floating-point \xe2\x80\xa600CkCompare packed single-precision (32-bit) floating-point \xe2\x80\xa600222111000ChMove packed double-precision (64-bit) floating-point \xe2\x80\xa600ChMove packed single-precision (32-bit) floating-point \xe2\x80\xa600ClMultiply packed double-precision (64-bit) floating-point \xe2\x80\xa600CjMultiply packed half-precision (16-bit) floating-point \xe2\x80\xa600ClMultiply packed single-precision (32-bit) floating-point \xe2\x80\xa600CgCompute the approximate reciprocal of packed 16-bit \xe2\x80\xa600ClSubtract packed double-precision (64-bit) floating-point \xe2\x80\xa600CjSubtract packed half-precision (16-bit) floating-point \xe2\x80\xa600ClSubtract packed single-precision (32-bit) floating-point \xe2\x80\xa600CfCompute the bitwise XOR of packed double-precision \xe2\x80\xa600CfCompute the bitwise XOR of packed single-precision \xe2\x80\xa600CiLoads packed double-precision (64-bit) floating-point \xe2\x80\xa600CiLoads packed single-precision (32-bit) floating-point \xe2\x80\xa600CnCompute the bitwise OR of packed double-precision (64-bit) \xe2\x80\xa600CnCompute the bitwise OR of packed single-precision (32-bit) \xe2\x80\xa600CcDuplicate odd-indexed single-precision (32-bit) \xe2\x80\xa600CdDuplicate even-indexed single-precision (32-bit) \xe2\x80\xa600ChSets each bit of the returned mask based on the most \xe2\x80\xa600000EeMultiplies the packed 16-bit integers in <code>a</code> and <code>b</code>, producing00EhMultiplies the packed unsigned 16-bit integers in <code>a</code> and <code>b</code>, \xe2\x80\xa600111EeMultiplies the packed 32-bit integers in <code>a</code> and <code>b</code>, producing00EcMultiply packed 64-bit integers in <code>a</code> and <code>b</code>, producing \xe2\x80\xa600EdConverts packed 16-bit integers from <code>a</code> and <code>b</code> to packed \xe2\x80\xa600EdConverts packed 32-bit integers from <code>a</code> and <code>b</code> to packed \xe2\x80\xa600CmShuffle double-precision (64-bit) floating-point elements \xe2\x80\xa600CnFor each packed 8-bit integer maps the value to the number \xe2\x80\xa600DhBroadcasts 64-bit integer <code>a</code> to all elements of returned \xe2\x80\xa600CkSets packed 64-bit integers in returned vector with the \xe2\x80\xa600CnConcatenate packed 16-bit integers in a and b producing an \xe2\x80\xa600CnConcatenate packed 32-bit integers in a and b producing an \xe2\x80\xa600CnConcatenate packed 64-bit integers in a and b producing an \xe2\x80\xa600222111000CnConcatenate packed 16-bit integers in b and a producing an \xe2\x80\xa600CnConcatenate packed 32-bit integers in b and a producing an \xe2\x80\xa600CnConcatenate packed 64-bit integers in b and a producing an \xe2\x80\xa600222111000CnStore 256-bits (composed of 8 packed 32-bit integers) from \xe2\x80\xa600CnStore 256-bits (composed of 4 packed 64-bit integers) from \xe2\x80\xa600DdStores 256-bits of integer data from <code>a</code> into memory. \xe2\x80\xa600CnStore 256-bits (composed of 32 packed 8-bit integers) from \xe2\x80\xa600CnComputes the bitwise AND of 256 bits (representing integer \xe2\x80\xa600000CdUnpacks and interleave double-precision (64-bit) \xe2\x80\xa600CdUnpacks and interleave single-precision (32-bit) \xe2\x80\xa600111000CiConcatenate pairs of 16-byte blocks in a and b into a \xe2\x80\xa600CkCompare packed double-precision (64-bit) floating-point \xe2\x80\xa600CiCompare packed half-precision (16-bit) floating-point \xe2\x80\xa600CkCompare packed single-precision (32-bit) floating-point \xe2\x80\xa600ChConvert packed signed 16-bit integers in a to packed \xe2\x80\xa600ChConvert packed signed 32-bit integers in a to packed \xe2\x80\xa600000000ChConvert packed signed 64-bit integers in a to packed \xe2\x80\xa600000000CjConvert packed unsigned 16-bit integers in a to packed \xe2\x80\xa600CjConvert packed unsigned 32-bit integers in a to packed \xe2\x80\xa600000000CjConvert packed unsigned 64-bit integers in a to packed \xe2\x80\xa600000000CkConvert packed single-precision (32-bit) floating-point \xe2\x80\xa600CkConvert packed double-precision (64-bit) floating-point \xe2\x80\xa600000000000CiConvert packed half-precision (16-bit) floating-point \xe2\x80\xa600000000000000000222222222222CjFix up packed double-precision (64-bit) floating-point \xe2\x80\xa600CjFix up packed single-precision (32-bit) floating-point \xe2\x80\xa600ClMultiply packed double-precision (64-bit) floating-point \xe2\x80\xa600CjMultiply packed half-precision (16-bit) floating-point \xe2\x80\xa600ClMultiply packed single-precision (32-bit) floating-point \xe2\x80\xa600222111000CmCopy a to dst, then insert 128 bits (composed of 4 packed \xe2\x80\xa600CmCopy a to dst, then insert 256 bits (composed of 8 packed \xe2\x80\xa600CmCopy a to dst, then insert 128 bits (composed of 2 packed \xe2\x80\xa600CmCopy a to dst, then insert 256 bits (composed of 4 packed \xe2\x80\xa600333222111000CnLoad 512-bits (composed of 32 packed 16-bit integers) from \xe2\x80\xa600CnLoad 512-bits (composed of 16 packed 32-bit integers) from \xe2\x80\xa600CmLoad 512-bits (composed of 8 packed 64-bit integers) from \xe2\x80\xa600CgLoad 512-bits of integer data from memory into dst. \xe2\x80\xa600CiCounts the number of leading zero bits in each packed \xe2\x80\xa600000ClFinds the absolute value of each packed double-precision \xe2\x80\xa600ClFinds the absolute value of each packed single-precision \xe2\x80\xa600CgAdd packed double-precision (64-bit) floating-point \xe2\x80\xa600CnAdd packed half-precision (16-bit) floating-point elements \xe2\x80\xa600CgAdd packed single-precision (32-bit) floating-point \xe2\x80\xa600CfCompute the bitwise AND of packed double-precision \xe2\x80\xa600CfCompute the bitwise AND of packed single-precision \xe2\x80\xa600CjDivide packed double-precision (64-bit) floating-point \xe2\x80\xa600ChDivide packed half-precision (16-bit) floating-point \xe2\x80\xa600CjDivide packed single-precision (32-bit) floating-point \xe2\x80\xa600CkCompare packed double-precision (64-bit) floating-point \xe2\x80\xa600CiCompare packed half-precision (16-bit) floating-point \xe2\x80\xa600CkCompare packed single-precision (32-bit) floating-point \xe2\x80\xa600222111000ChMove packed double-precision (64-bit) floating-point \xe2\x80\xa600ChMove packed single-precision (32-bit) floating-point \xe2\x80\xa600ClMultiply packed double-precision (64-bit) floating-point \xe2\x80\xa600CjMultiply packed half-precision (16-bit) floating-point \xe2\x80\xa600ClMultiply packed single-precision (32-bit) floating-point \xe2\x80\xa600CgCompute the approximate reciprocal of packed 16-bit \xe2\x80\xa600ClSubtract packed double-precision (64-bit) floating-point \xe2\x80\xa600CjSubtract packed half-precision (16-bit) floating-point \xe2\x80\xa600ClSubtract packed single-precision (32-bit) floating-point \xe2\x80\xa600CfCompute the bitwise XOR of packed double-precision \xe2\x80\xa600CfCompute the bitwise XOR of packed single-precision \xe2\x80\xa600CnCompute the bitwise OR of packed double-precision (64-bit) \xe2\x80\xa600CnCompute the bitwise OR of packed single-precision (32-bit) \xe2\x80\xa600CcDuplicate odd-indexed single-precision (32-bit) \xe2\x80\xa600CdDuplicate even-indexed single-precision (32-bit) \xe2\x80\xa600CjMultiply the packed signed 16-bit integers in a and b, \xe2\x80\xa600ClMultiply the packed unsigned 16-bit integers in a and b, \xe2\x80\xa600CmMultiply the packed 16-bit integers in a and b, producing \xe2\x80\xa600CmMultiply the packed 32-bit integers in a and b, producing \xe2\x80\xa600EcMultiply packed 64-bit integers in <code>a</code> and <code>b</code>, producing \xe2\x80\xa600CiConvert packed signed 16-bit integers from a and b to \xe2\x80\xa600CiConvert packed signed 32-bit integers from a and b to \xe2\x80\xa600CmShuffle double-precision (64-bit) floating-point elements \xe2\x80\xa600CnFor each packed 8-bit integer maps the value to the number \xe2\x80\xa600CiSet packed 32-bit integers in dst with the repeated 4 \xe2\x80\xa600CiSet packed 64-bit integers in dst with the repeated 4 \xe2\x80\xa600CnConcatenate packed 16-bit integers in a and b producing an \xe2\x80\xa600CnConcatenate packed 32-bit integers in a and b producing an \xe2\x80\xa600CnConcatenate packed 64-bit integers in a and b producing an \xe2\x80\xa600222111000CnConcatenate packed 16-bit integers in b and a producing an \xe2\x80\xa600CnConcatenate packed 32-bit integers in b and a producing an \xe2\x80\xa600CnConcatenate packed 64-bit integers in b and a producing an \xe2\x80\xa600222111000CjStore 512-bits (composed of 16 packed 32-bit integers) \xe2\x80\xa600CnStore 512-bits (composed of 8 packed 64-bit integers) from \xe2\x80\xa600CfStore 512-bits of integer data from a into memory. \xe2\x80\xa600CnStore 512-bits (composed of 64 packed 8-bit integers) from \xe2\x80\xa600CcUnpack and interleave double-precision (64-bit) \xe2\x80\xa600CcUnpack and interleave single-precision (32-bit) \xe2\x80\xa600111000DfDecrypt 10 rounds of unsigned 8-bit integers in <code>input</code> \xe2\x80\xa600DfDecrypt 14 rounds of unsigned 8-bit integers in <code>input</code> \xe2\x80\xa600DfEncrypt 10 rounds of unsigned 8-bit integers in <code>input</code> \xe2\x80\xa600DfEncrypt 14 rounds of unsigned 8-bit integers in <code>input</code> \xe2\x80\xa600C`Broadcasts the low double-precision (64-bit) \xe2\x80\xa600C`Broadcasts the low single-precision (32-bit) \xe2\x80\xa600CmCompare packed signed 16-bit integers in a and b based on \xe2\x80\xa600CmCompare packed signed 32-bit integers in a and b based on \xe2\x80\xa600CmCompare packed signed 64-bit integers in a and b based on \xe2\x80\xa600ClCompare packed unsigned 16-bit integers in a and b based \xe2\x80\xa600ClCompare packed unsigned 32-bit integers in a and b based \xe2\x80\xa600ClCompare packed unsigned 64-bit integers in a and b based \xe2\x80\xa600CjMultiply the lower complex numbers in a by the complex \xe2\x80\xa600CmTest each 32-bit element of a for equality with all other \xe2\x80\xa600CmTest each 64-bit element of a for equality with all other \xe2\x80\xa600CnConvert the lower double-precision (64-bit) floating-point \xe2\x80\xa600000ClConvert the lower half-precision (16-bit) floating-point \xe2\x80\xa600000CnConvert the lower single-precision (32-bit) floating-point \xe2\x80\xa600000DiSign extend packed 16-bit integers in <code>a</code> to packed 32-bit \xe2\x80\xa600DiSign extend packed 16-bit integers in <code>a</code> to packed 64-bit \xe2\x80\xa600ChConvert packed 32-bit integers in a to packed 16-bit \xe2\x80\xa600DiSign extend packed 32-bit integers in <code>a</code> to packed 64-bit \xe2\x80\xa600ChConvert packed 64-bit integers in a to packed 16-bit \xe2\x80\xa600ChConvert packed 64-bit integers in a to packed 32-bit \xe2\x80\xa600DfZeroes extend packed unsigned 16-bit integers in <code>a</code> to \xe2\x80\xa600000DfZeroes extend packed unsigned 32-bit integers in <code>a</code> to \xe2\x80\xa600CnConvert packed signed 16-bit integers in a to packed 8-bit \xe2\x80\xa600CnConvert packed signed 32-bit integers in a to packed 8-bit \xe2\x80\xa600CnConvert packed signed 64-bit integers in a to packed 8-bit \xe2\x80\xa600BmReturns the lowest element of <code>a</code>.00DjReturns a vector whose lowest element is <code>a</code> and all higher \xe2\x80\xa600C`Multiply the lower double-precision (64-bit) \xe2\x80\xa600CmMultiply the lower half-precision (16-bit) floating-point \xe2\x80\xa600C`Multiply the lower single-precision (32-bit) \xe2\x80\xa600222111000ClMultiply the lower complex numbers in a and b, and store \xe2\x80\xa600CkMultiply packed unsigned 52-bit integers in each 64-bit \xe2\x80\xa600000ClMultiply packed double-precision (64-bit) floating-point \xe2\x80\xa600CjMultiply packed half-precision (16-bit) floating-point \xe2\x80\xa600ClMultiply packed single-precision (32-bit) floating-point \xe2\x80\xa600777666555222111000777666555CfCompute the absolute value of packed signed 16-bit \xe2\x80\xa600CfCompute the absolute value of packed signed 32-bit \xe2\x80\xa600CfCompute the absolute value of packed signed 64-bit \xe2\x80\xa600ChAdd packed 16-bit integers in a and b, and store the \xe2\x80\xa600ChAdd packed 32-bit integers in a and b, and store the \xe2\x80\xa600ChAdd packed 64-bit integers in a and b, and store the \xe2\x80\xa600CeAdd packed signed 8-bit integers in a and b using \xe2\x80\xa600CgAdd packed unsigned 8-bit integers in a and b using \xe2\x80\xa600CjPerforms element-by-element bitwise AND between packed \xe2\x80\xa600CnCompute the bitwise AND of packed 64-bit integers in a and \xe2\x80\xa600CfCompute the bitwise NOT of packed double-precision \xe2\x80\xa600CfCompute the bitwise NOT of packed single-precision \xe2\x80\xa600CkAverage packed unsigned 16-bit integers in a and b, and \xe2\x80\xa600CnConverts packed BF16 (16-bit) floating-point elements in a \xe2\x80\xa600CiConvert packed half-precision (16-bit) floating-point \xe2\x80\xa600CkConvert packed single-precision (32-bit) floating-point \xe2\x80\xa600CmCompute dot-product of BF16 (16-bit) floating-point pairs \xe2\x80\xa600CdLoad contiguous active double-precision (64-bit) \xe2\x80\xa600CdLoad contiguous active single-precision (32-bit) \xe2\x80\xa600CgMultiply packed complex numbers in a by the complex \xe2\x80\xa600CjMultiply the lower complex numbers in a by the complex \xe2\x80\xa600CmMultiply packed complex numbers in a and b, accumulate to \xe2\x80\xa600CmMultiply the lower complex numbers in a and b, accumulate \xe2\x80\xa600ClMultiply packed double-precision (64-bit) floating-point \xe2\x80\xa600CjMultiply packed half-precision (16-bit) floating-point \xe2\x80\xa600ClMultiply packed single-precision (32-bit) floating-point \xe2\x80\xa600C`Multiply the lower double-precision (64-bit) \xe2\x80\xa600CmMultiply the lower half-precision (16-bit) floating-point \xe2\x80\xa600C`Multiply the lower single-precision (32-bit) \xe2\x80\xa600555444333222111000ChConvert the exponent of each packed double-precision \xe2\x80\xa600CfConvert the exponent of each packed half-precision \xe2\x80\xa600ChConvert the exponent of each packed single-precision \xe2\x80\xa600CfConvert the exponent of the lower double-precision \xe2\x80\xa600CmConvert the exponent of the lower half-precision (16-bit) \xe2\x80\xa600CfConvert the exponent of the lower single-precision \xe2\x80\xa600CiCompare packed signed 16-bit integers in a and b, and \xe2\x80\xa600CiCompare packed signed 32-bit integers in a and b, and \xe2\x80\xa600CiCompare packed signed 64-bit integers in a and b, and \xe2\x80\xa600CkCompare packed unsigned 16-bit integers in a and b, and \xe2\x80\xa600CkCompare packed unsigned 32-bit integers in a and b, and \xe2\x80\xa600CkCompare packed unsigned 64-bit integers in a and b, and \xe2\x80\xa600555444333222111000CeMove packed 16-bit integers from a into dst using \xe2\x80\xa600CmMove packed 32-bit integers from a to dst using writemask \xe2\x80\xa600CmMove packed 64-bit integers from a to dst using writemask \xe2\x80\xa600ClMultiply the low signed 32-bit integers from each packed \xe2\x80\xa600CnMultiply the low unsigned 32-bit integers from each packed \xe2\x80\xa600CkExtract the reduced argument of packed double-precision \xe2\x80\xa600CiExtract the reduced argument of packed half-precision \xe2\x80\xa600CkExtract the reduced argument of packed single-precision \xe2\x80\xa600CnExtract the reduced argument of the lower double-precision \xe2\x80\xa600ClExtract the reduced argument of the lower half-precision \xe2\x80\xa600CnExtract the reduced argument of the lower single-precision \xe2\x80\xa600CmRotate the bits in each packed 32-bit integer in a to the \xe2\x80\xa600CmRotate the bits in each packed 64-bit integer in a to the \xe2\x80\xa600111000CmScale the packed double-precision (64-bit) floating-point \xe2\x80\xa600CkScale the packed half-precision (16-bit) floating-point \xe2\x80\xa600CmScale the packed single-precision (32-bit) floating-point \xe2\x80\xa600222000000CjBroadcast 8-bit integer a to all elements of dst using \xe2\x80\xa600CiShift packed 16-bit integers in a left by count while \xe2\x80\xa600CiShift packed 32-bit integers in a left by count while \xe2\x80\xa600CiShift packed 64-bit integers in a left by count while \xe2\x80\xa600CjShift packed 16-bit integers in a right by count while \xe2\x80\xa600CjShift packed 32-bit integers in a right by count while \xe2\x80\xa600CjShift packed 64-bit integers in a right by count while \xe2\x80\xa600222111000CiStore packed double-precision (64-bit) floating-point \xe2\x80\xa600CiStore packed single-precision (32-bit) floating-point \xe2\x80\xa600CkSubtract packed 16-bit integers in b from packed 16-bit \xe2\x80\xa600CkSubtract packed 32-bit integers in b from packed 32-bit \xe2\x80\xa600CkSubtract packed 64-bit integers in b from packed 64-bit \xe2\x80\xa600CjSubtract packed signed 8-bit integers in b from packed \xe2\x80\xa600ClSubtract packed unsigned 8-bit integers in b from packed \xe2\x80\xa600CnCompute the bitwise XOR of packed 32-bit integers in a and \xe2\x80\xa600CnCompute the bitwise XOR of packed 64-bit integers in a and \xe2\x80\xa600CgLoads packed 32-bit integers from memory pointed by \xe2\x80\xa600CgLoads packed 64-bit integers from memory pointed by \xe2\x80\xa600CnCompute the absolute value of packed signed 8-bit integers \xe2\x80\xa600CgAdd packed 8-bit integers in a and b, and store the \xe2\x80\xa600CjAverage packed unsigned 8-bit integers in a and b, and \xe2\x80\xa600CgMultiply packed complex numbers in a by the complex \xe2\x80\xa600CjMultiply the lower complex numbers in a by the complex \xe2\x80\xa600CkCompute the complex conjugates of complex numbers in a, \xe2\x80\xa600CkConvert packed double-precision (64-bit) floating-point \xe2\x80\xa600000CiConvert packed half-precision (16-bit) floating-point \xe2\x80\xa600000CkConvert packed single-precision (32-bit) floating-point \xe2\x80\xa600CnConvert the lower double-precision (64-bit) floating-point \xe2\x80\xa600000ClConvert the lower half-precision (16-bit) floating-point \xe2\x80\xa600000CnConvert the lower single-precision (32-bit) floating-point \xe2\x80\xa600000ClMultiply packed double-precision (64-bit) floating-point \xe2\x80\xa600CjMultiply packed half-precision (16-bit) floating-point \xe2\x80\xa600ClMultiply packed single-precision (32-bit) floating-point \xe2\x80\xa600C`Multiply the lower double-precision (64-bit) \xe2\x80\xa600CmMultiply the lower half-precision (16-bit) floating-point \xe2\x80\xa600C`Multiply the lower single-precision (32-bit) \xe2\x80\xa600555444333222111000CmMultiply packed complex numbers in a and b, and store the \xe2\x80\xa600ClMultiply the lower complex numbers in a and b, and store \xe2\x80\xa600ChLoad packed double-precision (64-bit) floating-point \xe2\x80\xa600ChLoad packed single-precision (32-bit) floating-point \xe2\x80\xa600CnCompare packed signed 8-bit integers in a and b, and store \xe2\x80\xa600CjCompare packed unsigned 8-bit integers in a and b, and \xe2\x80\xa600111000CmMove packed 8-bit integers from a into dst using zeromask \xe2\x80\xa600CmCompute the bitwise OR of packed 32-bit integers in a and \xe2\x80\xa600CmCompute the bitwise OR of packed 64-bit integers in a and \xe2\x80\xa600CiCalculate the max, min, absolute max, or absolute min \xe2\x80\xa600000000000C`Compute the approximate reciprocal of packed \xe2\x80\xa600000CcCompute the approximate reciprocal of the lower \xe2\x80\xa600000ClCompute the approximate reciprocal square root of packed \xe2\x80\xa600CiCompute the approximate reciprocal square root of the \xe2\x80\xa600CiSubtract packed 8-bit integers in b from packed 8-bit \xe2\x80\xa600CnShuffle half-precision (16-bit) floating-point elements in \xe2\x80\xa600666666ChReduce the packed 8-bit integers in a by bitwise OR. \xe2\x80\xa600CjPerforms an intermediate calculation for the next four \xe2\x80\xa600CiPerforms the final calculation for the next four SHA1 \xe2\x80\xa600ClThe intrinsic performs two rounds of SM3 operation using \xe2\x80\xa600CnThis intrinsic performs four rounds of SM4 encryption. The \xe2\x80\xa600CiTests whether the specified bits in a 128-bit integer \xe2\x80\xa600CmCompute the bitwise AND of packed 8-bit integers in a and \xe2\x80\xa600CmUnpacks and interleave 16-bit integers from the high half \xe2\x80\xa600CmUnpacks and interleave 32-bit integers from the high half \xe2\x80\xa600CmUnpacks and interleave 64-bit integers from the high half \xe2\x80\xa600ClUnpacks and interleave 16-bit integers from the low half \xe2\x80\xa600ClUnpacks and interleave 32-bit integers from the low half \xe2\x80\xa600ClUnpacks and interleave 64-bit integers from the low half \xe2\x80\xa600CmLoad tile rows from memory specifieid by base address and \xe2\x80\xa600Dd<strong>Gets</strong> the attribute: whether to require hardware \xe2\x80\xa6CcAcquires <code>n</code> permits from the semaphore.CeWhich multithreading methods are in use by the codec.CmAdd channels starting at from up through to to group tag, \xe2\x80\xa6DjNormalized amplification in <code>[0.0, 1.0]</code> range. This method \xe2\x80\xa60BjAdds a new source to the end of the queue.ChSet a new scissor rectangle. Should be applied after \xe2\x80\xa60000Ck&lt; swr options to use for the auto-inserted aresample \xe2\x80\xa6CeReturn an iterator adaptor that iterates over the \xe2\x80\xa6000CeCasts <code>self</code> to <code>ArrayOfTables</code>ChReturn a view on the raw sample buffer for 8 bit per \xe2\x80\xa6CmReturns an Option containing the KeyEvent if the event is \xe2\x80\xa6CnReturn a mutable reference to an 8bit Grayscale image with \xe2\x80\xa6ClReturns a plain string slice, which is used to implement \xe2\x80\xa60BnType of service that the audio stream conveys.CnAdd an index entry into a sorted list. Update the entry if \xe2\x80\xa6AdFree an AVAudioFifo.AnPeek data from an AVAudioFifo.AnRead data from an AVAudioFifo.ChGet the current number of samples in the AVAudioFifo \xe2\x80\xa6AhFinalize a print buffer.CcAppend a formatted date and time to a print buffer.CkAllocate a new AVBuffer, reusing an old buffer from the \xe2\x80\xa6BbClose the buffer source after EOF.CjOverrides cpu count detection and forces the specified \xe2\x80\xa6BeIterate over all registered demuxers.BcGet dictionary entries as a string.CkTrack the presence of user provided functions and their \xe2\x80\xa6CgTrack the presence of variables and their number of \xe2\x80\xa6CdFeed data from a FIFO into a user-provided callback.0CmDisables cpu detection and forces the specified flags. -1 \xe2\x80\xa6CkGet a seed to use in conjunction with random functions. \xe2\x80\xa6CmReturn the fractional representation of the internal time \xe2\x80\xa6CiCheck if the given sample aspect ratio of an image is \xe2\x80\xa6CnFormat a line of log the same way as the default callback. \xe2\x80\xa6ChCheck whether a particular flag is set in a flags field.BmMove every field in src to dst and reset src.CiSupply a raw video or audio frame to the encoder. Use \xe2\x80\xa6Bd@return AVClass for AVFilterContext.CgInitialize a filter with the supplied dictionary of \xe2\x80\xa6CdFree the link in *link, and set its pointer to NULL.CjGet the AVClass for AVFormatContext. It can be used in \xe2\x80\xa6CjSeek to timestamp ts. Seeking will be done so that the \xe2\x80\xa6ClAllocate and initialize an AVIOContext for buffered I/O. \xe2\x80\xa6ClReturn the written size and a pointer to the buffer. The \xe2\x80\xa6CjReturns the value that would be obtained by taking the \xe2\x80\xa6000000Bkstart rendering to the default frame buffer000Cn\\brief A cutoff alpha value for binarization of the window \xe2\x80\xa6Cknumber of bits the bitstream is allowed to diverge from \xe2\x80\xa6CdBlend the lanes according to a runtime varying mask.000CnVariant of <code>Self::recv_many</code> for blocking contexts.0CiCaptures all the tokens except the first one, as a tuple.0CiGet the channel with the given index in a channel layout.ClCasts <code>self</code> to <code>i8</code> with range check.0DbCasts from <code>isize</code> to <code>i8</code> with range check.D`Casts from <code>i16</code> to <code>i8</code> with range check.D`Casts from <code>u16</code> to <code>i8</code> with range check.DaCasts from <code>u128</code> to <code>i8</code> with range check.DbCasts from <code>usize</code> to <code>i8</code> with range check.D`Casts from <code>u32</code> to <code>i8</code> with range check.D`Casts from <code>u64</code> to <code>i8</code> with range check.DaCasts from <code>i128</code> to <code>i8</code> with range check.CoCasts from <code>i8</code> to <code>i8</code> with range check.D`Casts from <code>i32</code> to <code>i8</code> with range check.CoCasts from <code>u8</code> to <code>i8</code> with range check.D`Casts from <code>i64</code> to <code>i8</code> with range check.ClCasts <code>self</code> to <code>u8</code> with range check.0CoCasts from <code>u8</code> to <code>u8</code> with range check.D`Casts from <code>u32</code> to <code>u8</code> with range check.D`Casts from <code>i32</code> to <code>u8</code> with range check.DbCasts from <code>usize</code> to <code>u8</code> with range check.D`Casts from <code>i64</code> to <code>u8</code> with range check.D`Casts from <code>i16</code> to <code>u8</code> with range check.DbCasts from <code>isize</code> to <code>u8</code> with range check.D`Casts from <code>u16</code> to <code>u8</code> with range check.DaCasts from <code>i128</code> to <code>u8</code> with range check.D`Casts from <code>u64</code> to <code>u8</code> with range check.CoCasts from <code>i8</code> to <code>u8</code> with range check.DaCasts from <code>u128</code> to <code>u8</code> with range check.BcLow lane <code>f64</code> equal to.0CdLow lane <code>a == b</code>, other lanes unchanged.0CcLow lane <code>f64</code> greater than or equal to.0CkLow lane <code>a &amp;gt;= b</code>, other lanes unchanged.CgLow lane <code>a &gt;= b</code>, other lanes unchanged.BgLow lane <code>f64</code> greater than.0CjLow lane <code>a &amp;gt; b</code>, other lanes unchanged.CfLow lane <code>a &gt; b</code>, other lanes unchanged.C`Low lane <code>f64</code> less than or equal to.0CkLow lane <code>a &amp;lt;= b</code>, other lanes unchanged.CgLow lane <code>a &lt;= b</code>, other lanes unchanged.BdLow lane <code>f64</code> less than.0CjLow lane <code>a &amp;lt; b</code>, other lanes unchanged.CfLow lane <code>a &lt; b</code>, other lanes unchanged.AfLow lane not equal to.0AmLanewise <code>a != b</code>.0BgLanewise <code>!(a &amp;gt;= b)</code>.BcLanewise <code>!(a &gt;= b)</code>.BfLanewise <code>!(a &amp;gt; b)</code>.BbLanewise <code>!(a &gt; b)</code>.BgLanewise <code>!(a &amp;lt;= b)</code>.BcLanewise <code>!(a &lt;= b)</code>.BfLanewise <code>!(a &amp;lt; b)</code>.BbLanewise <code>!(a &lt; b)</code>.DhCompare <code>f32</code> lanes according to the operation specified, \xe2\x80\xa60DiConverts the Unicode scalar <code>code</code> to a UTF-8 encoded byte \xe2\x80\xa6BbReturns <code>NotSupported</code>.DgReturns <code>NotSupported</code> since a fixed-size array is never \xe2\x80\xa611EeReturns <code>true</code> if the collection is full, <code>false</code> if it\xe2\x80\x99s \xe2\x80\xa600Cd(contentType) Returns the document\xe2\x80\x99s content type.CiCallback used by devices to communicate with application.CjConverts a string slice to a specified case. Non-ascii \xe2\x80\xa6DiCopies data in both directions between <code>a</code> and <code>b</code>.DhReturns the default value for this type, or <code>None</code> if not \xe2\x80\xa60DfReturns whether the specific value for this type is <code>Copy</code>.ChReturns whether the specific value is <code>Copy</code>.10CdFormat a <code>civil::DateTime</code> into a string.CjForces the lock to be released without dropping the guard.Cldecode error flags of the frame, set to a combination of \xe2\x80\xa6DhHint that the <code>Deserialize</code> type is expecting an optional \xe2\x80\xa60DkHint that the <code>Deserialize</code> type is expecting a string value \xe2\x80\xa60DjHint that the <code>Deserialize</code> type is expecting a struct with \xe2\x80\xa60Ah&lt; human friendly nameCkHash data from a <code>Read</code>` type using BLAKE2b-256.ClReturns the value of the discriminant for the variant in \xe2\x80\xa600BeDowncasts the box to a concrete type.00D`Downcasts the <code>Rc&lt;dyn Any&gt;</code> to a concrete type.111DfConverts this <code>PyAny</code> to a concrete Python type without \xe2\x80\xa60DmDowncasts the <code>Arc&lt;dyn Any + Send + Sync&gt;</code> to a concrete \xe2\x80\xa6ClReturns the contents of a dropped file as a byte vector, \xe2\x80\xa6CcReturns the number of files that have been dropped.DkFormat a <code>SignedDuration</code> into a string using the \xe2\x80\x9cfriendly\xe2\x80\xa6CcFormat a <code>SignedDuration</code> into a string.CkComputes the Levenshtein edit distance between two UTF8 \xe2\x80\xa6BnReturns the effective group ID of the process.ChReturns the required output buffer size for encoding \xe2\x80\xa6000000000CnEnumerates over the rows of the image. The iterator yields \xe2\x80\xa6ChReturns the number of incoming errors since the last \xe2\x80\xa6Dk(addEventListener) Attaches a Rust function <code>event</code> listener \xe2\x80\xa6DfGiven a range <code>src</code>, clones a slice of elements in that \xe2\x80\xa6DeCopies elements from <code>src</code> range to the end of the string.DeCopies elements from <code>src</code> range to the end of the vector.BdVersion Information: Extended FamilyAmExtended Processor Signature.CnReturns the multiplication factor for the binary prefix as \xe2\x80\xa6DhWrites the proper factors in <code>fbuf</code>, and the unique prime \xe2\x80\xa60DkFinds the index of the first character in <code>haystack</code> that is \xe2\x80\xa6ClReturns the glyph metrics of the given character in this \xe2\x80\xa6EcFlips the bits in <code>self</code> from the <code>[start..=end]</code> checked \xe2\x80\xa600000000000DbReturns a copy of <code>self</code> with flipped bits from the \xe2\x80\xa600CjFlip an image horizontally and put the result into the \xe2\x80\xa6ChForces colored output on or off globally, overriding \xe2\x80\xa6D`Called when formatting a datetime with the <code>%r</code> flag.CnFormat this broken down time with a specific configuration \xe2\x80\xa6CdSets the context into \xe2\x80\x9cforward compatible\xe2\x80\x9d mode.ChCreates a Unix socket address in the abstract namespace.CfConvert from a bits value, unsetting any unknown bits.00000000000000000000ClConvert from underlying bit representation, dropping any \xe2\x80\xa60000000Ej<em>const</em> method equivalent to <code>From&lt;DataOverflow&gt; for TimeError</code>\xe2\x80\xa6Bg<em>const</em> method equivalent to \xe2\x80\xa6CdConverts a vector of integers to a mask, where 0 \xe2\x80\xa6CfConstruct a Gregorian date from an ISO 8601 week date.CdRetuns the path of <code>CARGO_MANIFEST_PATH</code>.DjReturns a weekday from its counting number, from <code>Monday=1</code> \xe2\x80\xa6BkForms a mutable slice from a pointer range.0000CfConverts a mutable reference to a non-zero mutable \xe2\x80\xa66CeForms an exclusive slice from a pointer and a length.DjPerforms the same functionality as <code>from_raw_parts</code>, except \xe2\x80\xa60D`Creates a <code>&amp;mut str</code> from a pointer and a length.1011011010EdCreate from a packed <code>u64</code> in <code>0xRRRRGGGGBBBBAAAA</code> format, \xe2\x80\xa6EcCreate from a packed <code>u64</code> in <code>0xRRRRGGGGBBBBAAAA</code> format \xe2\x80\xa610DjReturns a weekday from its counting number, from <code>Sunday=1</code> \xe2\x80\xa6DnConverts a <code>u32</code> to a <code>char</code>, ignoring validity. Use \xe2\x80\xa600E`Decode a UTF-16BE\xe2\x80\x93encoded slice <code>v</code> into a <code>String</code>, \xe2\x80\xa6E`Decode a UTF-16LE\xe2\x80\x93encoded slice <code>v</code> into a <code>String</code>, \xe2\x80\xa6ClConverts a slice of bytes to a string, including invalid \xe2\x80\xa6CmCreates a C-compatible string by consuming a byte vector, \xe2\x80\xa6ChSets the window to fullscreen at the current desktop \xe2\x80\xa6BgLanewise fused <code>(a * b) + c</code>000BgLanewise fused <code>(a * b) - c</code>000DhReturns the number of IDs generated so far with <code>Relaxed</code> \xe2\x80\xa6CnReturns a clone of the element at the given 2D coordinates \xe2\x80\xa6DnA copy of <code>self</code> with only the bits of <code>Variant0</code> field.DnA copy of <code>self</code> with only the bits of <code>Variant1</code> field.DnA copy of <code>self</code> with only the bits of <code>Variant2</code> field.DnA copy of <code>self</code> with only the bits of <code>Variant3</code> field.DnA copy of <code>self</code> with only the bits of <code>Variant4</code> field.CjReturns the hash value with retried mod mapping to the \xe2\x80\xa6000ChGets the list item at the specified index. Undefined \xe2\x80\xa60CiGets the tuple item at the specified index. Undefined \xe2\x80\xa610DhReturns the version of the dynamically linked <code>SDL_image</code> \xe2\x80\xa6DhReturns the version of the dynamically linked <code>SDL_mixer</code> \xe2\x80\xa6DfReturns the version of the dynamically linked <code>SDL_TTF</code> \xe2\x80\xa6DjInserts a value computed from <code>f</code> into the set if the given \xe2\x80\xa60DiInserts a value computed from <code>f</code> into the option if it is \xe2\x80\xa6CjGet a mutable reference to a type, inserting the value \xe2\x80\xa62>CjReturns the number of tasks currently scheduled in the \xe2\x80\xa6BbSignals a memory allocation error.0000AgSupports AVX_NE_CONVERTAgSupports AVX_VNNI_INT16C`Indicates support for the decode assists if set.AdExtended APIC space.CcIndicates support for processor feedback interface.CnINVLPGB support for invalidating guest nested translations \xe2\x80\xa6BcAMD extensions to MMX instructions.BgThe Page Flush MSR is available if set.CnIf true, Indicates that IA32_RTIT_CTL.CR3Filter can be set \xe2\x80\xa6B`Are fast system calls available.BfIA32_TSC_ADJUST MSR is supported if 1.BlSupports XSAVES/XRSTORS and IA32_XSS if set.Cg(pushState) Adds an entry to the session history stack.BgHue rotate the supplied image in place.Dnbase_macros Returns the numbers of both <em>total</em> and <em>unique</em> \xe2\x80\xa60AoCreates an NxN identity matrix.0000000EgCreates a mismatch where <code>need</code> is an <code>Interval::closed</code>, and \xe2\x80\xa6CeGet the index of a given channel in a channel layout.C`Inserts an <code>i8</code> to <code>m256i</code>0AkReturns the proper factors.00BhCalculates the modular additive inverse.00BnCalculates the modular multiplicative inverse.00BbCalls `NumInt::int_ref_modulo_add.00CiSimilar to int_modulo_add, but operates on references \xe2\x80\xa600BbCalls `NumInt::int_ref_modulo_div.00CiSimilar to int_modulo_div, but operates on references \xe2\x80\xa600BbCalls `NumInt::int_ref_modulo_mul.00CiSimilar to int_modulo_mul, but operates on references \xe2\x80\xa600BbCalls `NumInt::int_ref_modulo_sub.00CiSimilar to int_modulo_sub, but operates on references \xe2\x80\xa600BbCalls `NumInt::int_ref_root_floor.00CiSimilar to int_root_floor, but operates on references \xe2\x80\xa600BbCalls `NumInt::int_ref_scale_wrap.00CiSimilar to int_scale_wrap, but operates on references \xe2\x80\xa600BbCalls `NumInt::int_ref_sqrt_floor.00CiSimilar to int_sqrt_floor, but operates on references \xe2\x80\xa600BbCalls `NumInt::int_ref_sqrt_round.00CiSimilar to int_sqrt_round, but operates on references \xe2\x80\xa600CkReturns the interpolated value between the previous and \xe2\x80\xa6BmCustom interrupt callbacks for the I/O layer.DjConverts the <code>OsString</code> into a byte vector.  To convert the \xe2\x80\xa6DhReturns a tuple with <code>Some(value)</code> for the active variant \xe2\x80\xa6Biprecision of the intra DC coefficient - 8DbReturns true if <code>self</code> is an <code>ArrayOfTables</code>CnWhether the bit at <code>index</code> is set, checked version.00DiReturn true if the joystick at index <code>joystick_index</code> is a \xe2\x80\xa6CnReturns true if the call failed because there is currently \xe2\x80\xa6DbReturns <code>self</code> with only the least significant bit set.00000000000ChSort the k smallest elements into a new iterator, in \xe2\x80\xa6000DiSends the given <code>signal</code> to the process.then waits for its \xe2\x80\xa6DbExecutes an operation of the <code>IP_DROP_MEMBERSHIP</code> type.DdExecutes an operation of the <code>IPV6_DROP_MEMBERSHIP</code> type.CkThe maximum size limit in bytes that a visual (picture) \xe2\x80\xa6CkLoads the font at the given index of the file, with the \xe2\x80\xa6ChLoads the reference into a register with reversed order.0CiThe default is true. If enabled, will load glyphs for \xe2\x80\xa6CnLoads an SDL Texture from a buffer that the format must be \xe2\x80\xa6CnFinds the internal glyph index for the given character. If \xe2\x80\xa6B`Configures the main mixer track.DeReturns a new bitmask of ones from the <code>[start..=end]</code> \xe2\x80\xa600000000000000CiMax chunk time in microseconds. Note, not all formats \xe2\x80\xa6CnReports the maximum MBA throttling value supported for the \xe2\x80\xa6CjMaximum amount of memory in bytes to use for buffering \xe2\x80\xa6Ao&lt; The maximum texture heightBiMaximum range (zero-based) of RMID of L3.DhReturns the value of type <code>T</code> represented by the all-zero \xe2\x80\xa600CjMinimum ASID value for an SEV enabled, SEV-ES disabled \xe2\x80\xa6CjReturns the number of modulators that can exist at a time.CjThe maximum number of modulators that can exist at a time.DkThe module path of the message, if it is a <code>&#39;static</code> string.DaSet <code>module_path</code> to a <code>&#39;static</code> stringEcMove the high lanes of <code>b</code> to the low lanes of <code>a</code>, other \xe2\x80\xa60EcMove the low lanes of <code>b</code> to the high lanes of <code>a</code>, other \xe2\x80\xa60CbGathers the <code>i8</code> sign bit of each lane.0DnCreate an <code>i32</code> mask of each sign bit in the <code>i8</code> lanes.0DeOnly leaves the bits both in <code>self</code> and <code>mask</code>.00CcAn explanation of the crate\xe2\x80\x99s naming conventions.BjAmount of entries in @ref coded_side_data.CkReturns a new builder with the current thread scheduler \xe2\x80\xa6EbGenerates a unique <code>ExampleIdSeqUsize</code> ID with <code>Relaxed</code> \xe2\x80\xa6DcCreates a new <code>System</code> instance and refresh the data \xe2\x80\xa6C`Computes <code>&amp;mut self += &amp;rhs</code>.00CgComputes <code>&amp;mut self += rhs;</code> (addition).00C`Computes <code>&amp;mut self /= &amp;rhs</code>.00CgComputes <code>&amp;mut self /= rhs;</code> (division).00C`Computes <code>&amp;mut self *= &amp;rhs</code>.00CmComputes <code>&amp;mut self *= rhs;</code> (multiplication).00C`Computes <code>&amp;mut self %= &amp;rhs</code>.00ChComputes <code>&amp;mut self %= rhs;</code> (remainder).00C`Computes <code>&amp;mut self -= &amp;rhs</code>.00CjComputes <code>&amp;mut self -= rhs;</code> (subtraction).00BkGet the number of available video displays.DoReturns the weekday number from <code>Monday=1</code> to <code>Sunday=7</code>.DoReturns the weekday number from <code>Sunday=1</code> to <code>Monday=7</code>.ClNumber of general-purpose performance monitoring counter \xe2\x80\xa6CkEnsures a value is in the entry by inserting, if empty, \xe2\x80\xa6000CnEnsures a value is in the entry by inserting the result of \xe2\x80\xa6BbDefault size of the output buffer.0CiSwaps the top two pair stack elements, unchecked version.ChDuplicates the top stack pair of elements, unchecked \xe2\x80\xa6CiDrops the pair of next stack elements, unchecked version.C`Duplicates the next of stack element to the top.CjPeeks the top stack element in compile-time, unchecked \xe2\x80\xa6D`Pushes a new <code>element</code> to the top of the stack in \xe2\x80\xa6ClConverts the current stack to a different capacity while \xe2\x80\xa6CmRotates the top six stack elements, clockwise, two times, \xe2\x80\xa6CeSwaps the top two stack elements in compile-time, \xe2\x80\xa6CgDuplicates the top element before the next of stack \xe2\x80\xa6DkReturns the amount of padding we must insert after <code>self</code> to \xe2\x80\xa6CjLike <code>panic_fmt</code>, but for non-unwinding panics.0DfReorders the elements of this iterator <em>in-place</em> according \xe2\x80\xa6000000000000000000000DeReturns an exclusive reference to the <code>nth</code> front element.CnReturn an iterator adaptor that borrows from this iterator \xe2\x80\xa6000CkThis \xe2\x80\x9ccollects\xe2\x80\x9d a slice of pod data into a vec of a \xe2\x80\xa60BlReads the slice into a <code>T</code> value.0CnReturn the postions of the minimum and maximum elements of \xe2\x80\xa6000DjThe <code>prefetch</code> intrinsic is a hint to the code generator to \xe2\x80\xa600AmPrevious token\xe2\x80\x99s end offsetBo\xe2\x80\x98,\xe2\x80\x99 separated list of disallowed protocols.0Bl\xe2\x80\x98,\xe2\x80\x99 separated list of allowed protocols.0CmProvides a value or other type with only static lifetimes \xe2\x80\xa6DnSee documentation of <code>&lt;*const T&gt;::guaranteed_eq</code> for details.00Be&lt; reference dts for wrap detectionDbPushes a new <code>element</code> to the back of the destaque, \xe2\x80\xa6DlSets the <code>quality</code> field to <code>SixelQuality::HighColor</code>.DdReturns a subslice starting from the given <code>start</code> index.CnRetrieves the layout metrics and rasterized bitmap for the \xe2\x80\xa6CgCreate a texture from its raw <code>SDL_Texture</code>.DhReturns a reference to the next <code>len</code> bytes in the buffer \xe2\x80\xa6DfAllocates a <code>String</code> by calling a JS-backed FFI fn that \xe2\x80\xa6BlReturns the destaque\xe2\x80\x99s remaining capacity.BiReturns the stack\xe2\x80\x99s remaining capacity.AoReturns the remaining capacity.BhReturns the remaining capacity in bytes.11DgReturns the number of remaining IDs with <code>Relaxed</code> ordering.CmProvides shared access to the key and owned access to the \xe2\x80\xa6Aedesired sample formatBoRotate an image 180 degrees clockwise in place.ClReads bytes from a stream into a supplied buffer until a \xe2\x80\xa6ChConditionally write pointers elementwise into a SIMD \xe2\x80\xa6Cj(availWidth) (availHeight) The extent of the screen in \xe2\x80\xa60Do<strong>Sets</strong> the attribute: the minimum number of bits for the red \xe2\x80\xa6CgSets the element at the given 2D coordinates in the \xe2\x80\xa6BnChanges distance model associated with effect.DeA copy of <code>self</code> with the <code>Variant0</code> field set.DeA copy of <code>self</code> with the <code>Variant1</code> field set.DeA copy of <code>self</code> with the <code>Variant2</code> field set.DeA copy of <code>self</code> with the <code>Variant3</code> field set.DeA copy of <code>self</code> with the <code>Variant4</code> field set.CmMake the truncated source end with a FadeOut. The fadeout \xe2\x80\xa6CkSet the IANA time zone identifier on this broken down time.DgSimilar to <code>set_mapping()</code> but returned string should be \xe2\x80\xa6CfA thread-unsafe version of <code>set_max_level</code>.CnSimple reverse stereo, swaps left and right channel sound. \xe2\x80\xa6DdSets the args into an <code>m128d</code>, first arg is the low lane.0CjSet <code>f64</code> args into an <code>m256d</code> lane.0=DbSplats the <code>i8</code> to all lanes of the <code>m128i</code>.0CmSplat an <code>i8</code> arg into an <code>m256i</code> lane.0BoSet whether the array will use a trailing commaDeShift <code>u32</code> values to the left by <code>count</code> bits.0FaLanewise <code>u32</code> shift left by the matching <code>i32</code> lane in <code>count</code>.0DeShift <code>u64</code> values to the left by <code>count</code> bits.0FaLanewise <code>u64</code> shift left by the matching <code>u64</code> lane in <code>count</code>.0DfShift <code>i32</code> values to the right by <code>count</code> bits.0FbLanewise <code>i32</code> shift right by the matching <code>i32</code> lane in <code>count</code>.055FbLanewise <code>u32</code> shift right by the matching <code>u32</code> lane in <code>count</code>.044FbLanewise <code>u64</code> shift right by the matching <code>i64</code> lane in <code>count</code>.0BfSkip initial bytes when opening streamDjReturns a middle subslice of <code>slice</code> with the given maximum \xe2\x80\xa60FfTries to convert <code>&amp;[T]</code> to <code>Vec&lt;U&gt;</code> when <code>U</code> implements \xe2\x80\xa60CeSort all iterator elements into a new iterator in \xe2\x80\xa6000CkReturns the remaining spare capacity of the vector as a \xe2\x80\xa60DgReturns vector content as a slice of <code>T</code>, along with the \xe2\x80\xa60Bm<code>stated-scope-guard</code> modificationsBmReturns the product Stock Keeping Unit (SKU).CbStores the high lane value to the reference given.0CkStore data from a register into memory according to a mask.000CiStores the value to the reference given in reverse order.0CnReturns the number of mixer sub-tracks that can exist at a \xe2\x80\xa6CnThe maximum number of mixer sub-tracks that can exist at a \xe2\x80\xa6CjSets the maximum number of sub-tracks this track can have.0CmReturns the maximum number of child tracks this track can \xe2\x80\xa60CmReturns the fractional second component of this timestamp \xe2\x80\xa60CkAbsolute scale factor representing the nominal level of \xe2\x80\xa6CfAllocate SwrContext if needed and set/reset common \xe2\x80\xa6C`Injects the specified number of silence samples.CiCheck whether an swr context has been initialized or not.AgReturn the swr license.CcReturn the @ref LIBSWRESAMPLE_VERSION_INT constant.CkReturn a normalized Gaussian curve used to filter stuff \xe2\x80\xa6EgComputes the alignment score between <code>self</code> and <code>other</code> using \xe2\x80\xa6DkFinds the index of the last character in <code>self</code> that is also \xe2\x80\xa6CgReturns the first <code>n</code> elements of the slice.DfReturns the exclusive slice omitting the last <code>n</code> elements.CkConverts a civil datetime to a possibly ambiguous zoned \xe2\x80\xa6CeMakes a copy of the value in its ASCII lower case \xe2\x80\xa6CiReturns a copy of this string where each character is \xe2\x80\xa611111CeMakes a copy of the value in its ASCII upper case \xe2\x80\xa6100000DfConverts this address to an IPv4-compatible <code>IPv6</code> address.CmSame as to_low_pass but allows the q value (bandwidth) to \xe2\x80\xa6ClConverts to gamma-encoded luma using the specified gamma \xe2\x80\xa60D`Returns a subslice without the given leading <code>byte</code>s.EeTries to pre-allocates space for a <code>Result</code> in this <code>Bump</code>, \xe2\x80\xa6DcAttempts to cast the content type of a <code>Arc&lt;[T]&gt;</code>.0DcAttempts to cast the content type of a <code>Box&lt;[T]&gt;</code>.0ElTry to convert <code>&amp;mut [A]</code> into <code>&amp;mut [B]</code> (possibly with a \xe2\x80\xa60DdCreates a new <code>OwnedFd</code> instance that shares the same \xe2\x80\xa6DaRe-interprets <code>BoxBytes</code> as <code>Box&lt;T&gt;</code>.0DdRe-interprets <code>&amp;mut [u8]</code> as <code>&amp;mut T</code>.0CeReturn an iterator adaptor that iterates over the \xe2\x80\xa6000CaSets the underline color to <code>DarkRed</code>.CgReturns the unpaired surrogate which caused this error.CiUse the current thread as one of the threads in the pool.EcDecodes a UTF-8 code point from <code>bytes</code>, starting at <code>index</code>.CkA method and expected value that may be used to perform \xe2\x80\xa6CnThe input contains a string that lives at least as long as \xe2\x80\xa6CkWaits until the specified timeout (in milliseconds) for \xe2\x80\xa6ChWaits on this condition variable for a notification, \xe2\x80\xa6CkAllows configuring the request behaviour, starting with \xe2\x80\xa6AlSee Python::attach_uncheckedDjSets this numeric offset to use <code>-00:00</code> if and only if the \xe2\x80\xa6CbProvide the codec\xe2\x80\x99s decoded audio sample format.CjSets the value of the \xe2\x80\x9cdisk_usage\xe2\x80\x9d refresh kind to \xe2\x80\xa6CkCreates a pointer with the given address and no provenance.DdCreates a pointer with the given address and no <em>provenance</em>.1CjConverts an address to a pointer without giving it any \xe2\x80\xa60002000020000BiCancels an ongoing JavaScript evaluation.CdAttempts to write multiple buffers into this writer.0000BiWrites the buffer with the given encoder.BlEncode this image with the provided encoder.CiDHKEM(X25519, HKDF-SHA256) as specified in HPKE RFC 9180.AiSupport for PKRU in XCR0.Bj&lt; MPEG-1 4:2:0, JPEG 4:2:0, H.263 4:2:0Da&lt; also ITU-R BT601-6 525 / ITU-R BT1358 525 / ITU-R BT1700 \xe2\x80\xa6Ck&lt; identical to above, also called \xe2\x80\x9cSMPTE C\xe2\x80\x9d even \xe2\x80\xa6Bk&lt; ITU-R BT2020 constant luminance system2Ao&lt; SMPTE 2085, Y\xe2\x80\x99D\xe2\x80\x99zD\xe2\x80\x99xDa&lt; derived from 170M primaries and D65 white point, 170M is \xe2\x80\xa6Bc&lt; ITU-R BT2020 for 10-bit systemBc&lt; ITU-R BT2020 for 12-bit systemD`&lt; also ITU-R BT601-6 525 or 625 / ITU-R BT1358 525 or 625 \xe2\x80\xa6Cg&lt; SMPTE ST 2084 for 10-, 12-, 14- and 16-bit systemsBo@defgroup lavu_frame AVFrame @ingroup lavu_dataAl&lt; full parsing and repackAcRequest pause/play.oStereo downmix.Be&lt; Use auto-selected escaping mode.AmThe mapping must be readable.Dh&lt; packed AYUV 4:4:4,64bpp (1 Cr &amp; Cb sample per 1x1 Y &amp; A \xe2\x80\xa60Ch&lt; packed BGR 4:4:4, 16bpp, (msb)4X 4B 4G 4R(lsb), \xe2\x80\xa60Ch&lt; packed BGR 5:5:5, 16bpp, (msb)1X 5B 5G 5R(lsb), \xe2\x80\xa60Ch&lt; packed BGR 5:6:5, 16bpp, (msb)   5B 6G 5R(lsb), \xe2\x80\xa60D`&lt; packed RGBA 16:16:16:16, 64bpp, 16B, 16G, 16R, 16A, the \xe2\x80\xa60Bg&lt; planar GBR 4:4:4 30bpp, big-endianBj&lt; planar GBR 4:4:4 30bpp, little-endianBg&lt; planar GBR 4:4:4 36bpp, big-endianBj&lt; planar GBR 4:4:4 36bpp, little-endianBg&lt; planar GBR 4:4:4 42bpp, big-endianBj&lt; planar GBR 4:4:4 42bpp, little-endianBg&lt; planar GBR 4:4:4 48bpp, big-endianBj&lt; planar GBR 4:4:4 48bpp, little-endianBh&lt;        Y        , 10bpp, big-endianBk&lt;        Y        , 10bpp, little-endianBh&lt;        Y        , 12bpp, big-endianBk&lt;        Y        , 12bpp, little-endianBh&lt;        Y        , 14bpp, big-endianBk&lt;        Y        , 14bpp, little-endianBh&lt;        Y        , 16bpp, big-endianBk&lt;        Y        , 16bpp, little-endianCh&lt; packed RGB 4:4:4, 16bpp, (msb)4X 4R 4G 4B(lsb), \xe2\x80\xa60Ch&lt; packed RGB 5:5:5, 16bpp, (msb)1X 5R 5G 5B(lsb), \xe2\x80\xa60Ch&lt; packed RGB 5:6:5, 16bpp, (msb)   5R 6G 5B(lsb), \xe2\x80\xa60D`&lt; packed RGBA 16:16:16:16, 64bpp, 16R, 16G, 16B, 16A, the \xe2\x80\xa60Cn&lt; IEEE-754 single precision packed RGB 32:32:32, 96bpp, \xe2\x80\xa60Di&lt; planar YUV 4:2:0, 20bpp, (1 Cr &amp; Cb sample per 2x2 Y &amp; A \xe2\x80\xa6Dh&lt; planar YUV 4:2:2 24bpp, (1 Cr &amp; Cb sample per 2x1 Y &amp; A \xe2\x80\xa6Dh&lt; planar YUV 4:4:4 32bpp, (1 Cr &amp; Cb sample per 1x1 Y &amp; A \xe2\x80\xa6Da&lt; planar YUV 4:1:1, 12bpp, (1 Cr &amp; Cb sample per 4x1 Y \xe2\x80\xa6Co&lt; planar YUV 4:2:0, 12bpp, full scale (JPEG), deprecated \xe2\x80\xa6Co&lt; planar YUV 4:2:2, 16bpp, full scale (JPEG), deprecated \xe2\x80\xa6D`&lt; planar YUV 4:4:0 full scale (JPEG), deprecated in favor \xe2\x80\xa6Co&lt; planar YUV 4:4:4, 24bpp, full scale (JPEG), deprecated \xe2\x80\xa6ClAn AV_PKT_DATA_PALETTE side data packet contains exactly \xe2\x80\xa6AlViews are packed per column.AoProgram argument list too long.0000oMicrosoft ADPCMhMusepackAaPCM A-law (G.711)ChIndicates if the content is expected to be displayed \xe2\x80\xa6BaIterator over caches (LEAF=0x04).fU+000900CfThe type that allows you to build a OpenGL context \xe2\x80\xa6AnSettings for the cpal backend.Ed64-bit data <em>value</em>, restricted to <code>Copy</code> variants, with extra \xe2\x80\xa60AjThe default random source.BnA command that disables mouse event capturing.CbAn iterator able to yield elements from both ends.000000000000000000DhA marker trait to express that a <code>ReverseSearcher</code> can be \xe2\x80\xa60000CfAn error indicating that a nul byte was not in the \xe2\x80\xa600000CiThe error type returned by <code>get_disjoint_mut</code>.0000D`A helper trait for <code>&lt;[T]&gt;::get_disjoint_mut()</code>.0CcMakes the request conditional based on the last \xe2\x80\xa6DjReturns <code>true</code> if this OS is supported. Please refer to the \xe2\x80\xa6CkA Rust type representing an exception defined in Python \xe2\x80\xa6DfA view into a single occupied location in an <code>InlineTable</code>.FcAn owned iterator type over an <code>InlineTable</code>\xe2\x80\x99s <code>Key</code>/<code>Value</code> \xe2\x80\xa6Dg\xf0\x9f\x94\x84 <code>core</code> An iterator able to yield elements from both \xe2\x80\xa60De\xf0\x9f\x94\x84 <code>itertools</code> An iterator that allows peeking at an \xe2\x80\xa60Bh<code>LinuxTermios</code> control flags.0Bf<code>LinuxTermios</code> input flags.0Bf<code>LinuxTermios</code> local flags.0Bg<code>LinuxTermios</code> output flags.0CkThe response header, from status up until body, is too big.Cb421 Misdirected Request [RFC9110, Section 15.5.20]DgError type returned from <code>MacAddr::from_str</code> implementation.CdMemory Bandwidth Allocation Enumeration Sub-leaf \xe2\x80\xa6CcRepresents an open connection to a MIDI input port.AnSettings for the mock backend.fU+00150000Bk\xf0\x9d\x9f\x99 \xf0\x9f\x9a\xa9 A non-negative value is required.BaA non-negative value is required.010Cb412 Precondition Failed [RFC9110, Section 15.5.13]CnContains the credentials to authenticate a user agent to a \xe2\x80\xa6Dh<code>std</code> Wraps a Windows path prefix as well as its unparsed \xe2\x80\xa60ChA specific numeric offset, including the sign of the \xe2\x80\xa6CoRepresents Python\xe2\x80\x99s <code>ChildProcessError</code> exception.ChStructure representing a <code>datetime.datetime</code>.DdRetrieve the year component of a <code>PyDateTime_Date</code> or \xe2\x80\xa6CoRepresents Python\xe2\x80\x99s <code>FileNotFoundError</code> exception.CoRepresents Python\xe2\x80\x99s <code>IsADirectoryError</code> exception.CoRepresents Python\xe2\x80\x99s <code>KeyboardInterrupt</code> exception.EcCheck if <code>op</code>\xe2\x80\x99s type is exactly <code>PyDateTimeAPI.TZInfoType</code>.CoRepresents Python\xe2\x80\x99s <code>UnboundLocalError</code> exception.CoRepresents Python\xe2\x80\x99s <code>ZeroDivisionError</code> exception.BbSet if the type allows subclassingBoSet if the type object is dynamically allocatedCiSet while the type is being \xe2\x80\x98readied\xe2\x80\x99, to prevent \xe2\x80\xa6AlBlock all symlink traversal.ChStrategy for preserving authorization headers during \xe2\x80\xa6BfAddresses as returned by the resolver.D`&lt; The application is being terminated by the OS Called on \xe2\x80\xa6Ak&lt; Terminate the program.Bl&lt; Make the debugger trigger a breakpoint.Bb&lt; Retry the assert immediately.BjAdd a function to watch a particular hint.o&lt; 1, 1, 1, 1Cl&lt; alpha blending dstRGB = (srcRGB * srcA) + (dstRGB * \xe2\x80\xa6Bo&lt; The clipboard or primary selection changedClWait until a condition variable is signaled or a certain \xe2\x80\xa6AcCreate a semaphore.BmRemove a function watching a particular hint.CgDestroy the rendering context for a window and free \xe2\x80\xa6Af&lt; flip horizontallyAdFree an audio streamCjGet the actual value for an attribute from the current \xe2\x80\xa6CfSet an OpenGL window attribute before window creation.AnGet the current render target.BjGet information about a rendering context.BiGet a human-readable name for a scancode.AnGet a window from a stored ID.BoGet driver-specific information about a window.Cl\\brief A structure containing a template for a Condition \xe2\x80\xa6Cd\\brief Structure that represents a haptic direction.Cm\\brief A structure containing a template for a Left/Right \xe2\x80\xa6CaCreate a new haptic effect on a specified device.CfRun the haptic effect on its associated haptic device.BkDetermine whether two rectangles intersect.Cg\\brief Joysick battery level change event structure \xe2\x80\xa6CgGet the current state of an axis control on a joystick.BmGet the ball axis change since the last poll.CgGet the implementation-dependent GUID for the joystick.BcGet the type of an opened joystick.CfGet the number of general axis controls on a joystick.BiGet the number of POV hats on a joystick.CmUse this function to lock out the audio callback function \xe2\x80\xa6BoPerform low-level surface scaled blitting only.Ai&lt; Mouse button pressedBlRGB value used in a message box color schemeCkSDL_MessageBox flags. If supported will display warning \xe2\x80\xa6Cb\\brief Mouse wheel event structure (event.wheel.*)AmOpen a specific audio device.CkDraw a line on the current rendering target at subpixel \xe2\x80\xa6CmDraw a series of connected lines on the current rendering \xe2\x80\xa6BmDraw a point on the current rendering target.CgDraw a rectangle on the current rendering target at \xe2\x80\xa6CkDraw some number of rectangles on the current rendering \xe2\x80\xa6CmFill a rectangle on the current rendering target with the \xe2\x80\xa6CkFill some number of rectangles on the current rendering \xe2\x80\xa6BjGet the window associated with a renderer.n&lt; AC CancelD`&lt; insert on PC, help on some Mac keyboards (but does send \xe2\x80\xa6Ae&lt; linear filteringBnSet a texture as the current rendering target.Ca&lt; Extended keyboard text editing (composition)ChThe texture channel modulation used in SDL_RenderCopy().CgUnlocking for multi-threaded access to the joystick APICkUpdate a rectangle within a planar NV12 or NV21 texture \xe2\x80\xa6CgPerform a scaled surface copy to a destination surface.CiMove the mouse to the given position in global screen \xe2\x80\xa6Cm\\brief A struct that tags the SDL_WindowShapeParams union \xe2\x80\xa6Dchidapi info structure <em>/ /</em>* \\brief  Information about a \xe2\x80\xa6Ca503 Service Unavailable [RFC9110, Section 15.6.4]BjReturn the index of the first match found.Ca101 Switching Protocols [RFC9110, Section 15.2.2]ChIterator that converts from a certain sample rate to \xe2\x80\xa6CaConverts the samples data type to <code>O</code>.BoOptions for <code>SignedDuration::round</code>.BaConfigures a spatial mixer track.BhA buffer of samples treated as a source.AlSettings for a static sound.CeRequired trait for constants used in pattern matches.00CgA lazy iterator producing elements in the symmetric \xe2\x80\xa60000CgOptions for <code>Timestamp::checked_add</code> and \xe2\x80\xa6DlOptions for <code>Timestamp::since</code> and <code>Timestamp::until</code>.DdDetails of the allocation that caused a <code>TryReserveError</code>000CgMethods for segmenting strings according to Unicode \xe2\x80\xa6DgA marker for types which can be used as types of <code>const</code> \xe2\x80\xa6DgDerive macro generating an impl of the trait <code>ConstParamTy</code>.1010BaControls a volume control effect.CfTrait defining essential wavelet transform operations.0CnAn unbounded sender that does not prevent the channel from \xe2\x80\xa6AkSee <code>_mm_setcsr</code>00000BhSee <code>_MM_GET_FLUSH_ZERO_MODE</code>00CmThe gamecontroller structure used to identify an SDL game \xe2\x80\xa6EhFor each character in <code>a</code>, find if it is in <code>b</code> <em>(Default)</em>00CjCompute the bitwise OR of 16-bit masks a and b. If the \xe2\x80\xa600CjCompute the bitwise OR of 32-bit masks a and b. If the \xe2\x80\xa600CjCompute the bitwise OR of 64-bit masks a and b. If the \xe2\x80\xa600222111000CnConcatenate a and b into a 64-byte immediate result, shift \xe2\x80\xa600000CnComputes the bitwise NOT of 256 bits (representing integer \xe2\x80\xa600CiBroadcasts 128 bits from memory (composed of 2 packed \xe2\x80\xa600CiBroadcasts 128 bits from memory (composed of 4 packed \xe2\x80\xa600CiBroadcasts a double-precision (64-bit) floating-point \xe2\x80\xa600CiBroadcasts a single-precision (32-bit) floating-point \xe2\x80\xa600E`Shifts 128-bit lanes in <code>a</code> left by <code>imm8</code> bytes while \xe2\x80\xa600EaShifts 128-bit lanes in <code>a</code> right by <code>imm8</code> bytes while \xe2\x80\xa600BmCasts vector of type __m256d to type __m256i.00DoCast vector of type <code>__m256h</code> to type <code>__m256i</code>. This \xe2\x80\xa600BlCasts vector of type __m256 to type __m256i.00BmCasts vector of type __m256i to type __m256d.00DoCast vector of type <code>__m256i</code> to type <code>__m256h</code>. This \xe2\x80\xa600BlCasts vector of type __m256i to type __m256.00CkConvert packed single-precision (32-bit) floating-point \xe2\x80\xa600ClConverts packed double-precision (64-bit) floating-point \xe2\x80\xa600CkConvert packed double-precision (64-bit) floating-point \xe2\x80\xa600000000CiConvert packed half-precision (16-bit) floating-point \xe2\x80\xa600000000000000000ClConverts packed single-precision (32-bit) floating-point \xe2\x80\xa600444444444CgMultiply groups of 4 adjacent pairs of signed 8-bit \xe2\x80\xa600000CiMultiply groups of 4 adjacent pairs of unsigned 8-bit \xe2\x80\xa600000ChMultiply groups of 2 adjacent pairs of signed 16-bit \xe2\x80\xa600000CjMultiply groups of 2 adjacent pairs of unsigned 16-bit \xe2\x80\xa600000EdExtracts an 8-bit integer from <code>a</code>, selected with <code>INDEX</code>. \xe2\x80\xa600DcReturns values from <code>slice</code> at offsets determined by \xe2\x80\xa600000000000EgCopies <code>a</code> to result, and inserts the 16-bit integer <code>i</code> into \xe2\x80\xa600EgCopies <code>a</code> to result, and inserts the 32-bit integer <code>i</code> into \xe2\x80\xa600EfCopies <code>a</code> to result, and insert the 64-bit integer <code>i</code> into \xe2\x80\xa600CbLoads two 128-bit values (composed of 2 packed \xe2\x80\xa600ClLoads two 128-bit values (composed of integer data) from \xe2\x80\xa600ChLoad packed double-precision (64-bit) floating-point \xe2\x80\xa600ChLoad packed single-precision (32-bit) floating-point \xe2\x80\xa600CmMultiply packed complex numbers in a and b, and store the \xe2\x80\xa600CfCompute the square root of packed double-precision \xe2\x80\xa600CmCompute the square root of packed half-precision (16-bit) \xe2\x80\xa600CfCompute the square root of packed single-precision \xe2\x80\xa600CjStores packed double-precision (64-bit) floating-point \xe2\x80\xa600CjStores packed single-precision (32-bit) floating-point \xe2\x80\xa600CgAdd packed double-precision (64-bit) floating-point \xe2\x80\xa600CnAdd packed half-precision (16-bit) floating-point elements \xe2\x80\xa600CgAdd packed single-precision (32-bit) floating-point \xe2\x80\xa600CfCompute the bitwise AND of packed double-precision \xe2\x80\xa600CfCompute the bitwise AND of packed single-precision \xe2\x80\xa600CjDivide packed double-precision (64-bit) floating-point \xe2\x80\xa600ChDivide packed half-precision (16-bit) floating-point \xe2\x80\xa600CjDivide packed single-precision (32-bit) floating-point \xe2\x80\xa600CkCompare packed double-precision (64-bit) floating-point \xe2\x80\xa600CiCompare packed half-precision (16-bit) floating-point \xe2\x80\xa600CkCompare packed single-precision (32-bit) floating-point \xe2\x80\xa600222111000ChMove packed double-precision (64-bit) floating-point \xe2\x80\xa600ChMove packed single-precision (32-bit) floating-point \xe2\x80\xa600ClMultiply packed double-precision (64-bit) floating-point \xe2\x80\xa600CjMultiply packed half-precision (16-bit) floating-point \xe2\x80\xa600ClMultiply packed single-precision (32-bit) floating-point \xe2\x80\xa600CgCompute the approximate reciprocal of packed 16-bit \xe2\x80\xa600ClSubtract packed double-precision (64-bit) floating-point \xe2\x80\xa600CjSubtract packed half-precision (16-bit) floating-point \xe2\x80\xa600ClSubtract packed single-precision (32-bit) floating-point \xe2\x80\xa600CfCompute the bitwise XOR of packed double-precision \xe2\x80\xa600CfCompute the bitwise XOR of packed single-precision \xe2\x80\xa600CeSet each bit of mask register k based on the most \xe2\x80\xa600CfComputes the sum of absolute differences (SADs) of \xe2\x80\xa600EeMultiplies packed 16-bit integers in <code>a</code> and <code>b</code>, producing \xe2\x80\xa600EdConverts packed 16-bit integers from <code>a</code> and <code>b</code> to packed \xe2\x80\xa600EdConverts packed 32-bit integers from <code>a</code> and <code>b</code> to packed \xe2\x80\xa600ChFor each packed 16-bit integer maps the value to the \xe2\x80\xa600ChFor each packed 32-bit integer maps the value to the \xe2\x80\xa600ChFor each packed 64-bit integer maps the value to the \xe2\x80\xa600DnShuffles bytes from <code>a</code> according to the content of <code>b</code>.00CnStores the high and low 128-bit halves (each composed of 4 \xe2\x80\xa600CjStore 256-bits (composed of 16 packed 16-bit integers) \xe2\x80\xa600CnStore 256-bits (composed of 8 packed 32-bit integers) from \xe2\x80\xa600CnStore 256-bits (composed of 4 packed 64-bit integers) from \xe2\x80\xa600DdStores 256-bits of integer data from <code>a</code> into memory. \xe2\x80\xa600CiMoves integer data from a 256-bit integer vector to a \xe2\x80\xa600DhReturns vector of type <code>__m256d</code> with indeterminate elements.00DcReturn vector of type <code>__m256h</code> with indetermination \xe2\x80\xa600DkReturns vector of type <code>__m256</code> with indeterminate elements. \xe2\x80\xa600CgAdd packed double-precision (64-bit) floating-point \xe2\x80\xa600CnAdd packed half-precision (16-bit) floating-point elements \xe2\x80\xa600CgAdd packed single-precision (32-bit) floating-point \xe2\x80\xa600CiConcatenate a and b into a 128-byte immediate result, \xe2\x80\xa600000CnCompute the bitwise NOT of packed 32-bit integers in a and \xe2\x80\xa600CkCompute the bitwise NOT of 512 bits (composed of packed \xe2\x80\xa600CmCompute the bitwise NOT of 512 bits (representing integer \xe2\x80\xa600CnShift 128-bit lanes in a left by imm8 bytes while shifting \xe2\x80\xa600CfShift 128-bit lanes in a right by imm8 bytes while \xe2\x80\xa600CeCast vector of type __m512d to type __m512i. This \xe2\x80\xa600DoCast vector of type <code>__m512h</code> to type <code>__m512i</code>. This \xe2\x80\xa600CnCast vector of type __m512 to type __m512i. This intrinsic \xe2\x80\xa600CeCast vector of type __m512i to type __m512d. This \xe2\x80\xa600DoCast vector of type <code>__m512i</code> to type <code>__m512h</code>. This \xe2\x80\xa600CnCast vector of type __m512i to type __m512. This intrinsic \xe2\x80\xa600CkConvert packed single-precision (32-bit) floating-point \xe2\x80\xa600CkConvert packed double-precision (64-bit) floating-point \xe2\x80\xa600000000000CiConvert packed half-precision (16-bit) floating-point \xe2\x80\xa600000000000000000222222222222CjDivide packed double-precision (64-bit) floating-point \xe2\x80\xa600ChDivide packed half-precision (16-bit) floating-point \xe2\x80\xa600CjDivide packed single-precision (32-bit) floating-point \xe2\x80\xa600CiMultiply groups of 4 adjacent pairs of unsigned 8-bit \xe2\x80\xa600ChMultiply groups of 2 adjacent pairs of signed 16-bit \xe2\x80\xa600ClGather double-precision (64-bit) floating-point elements \xe2\x80\xa600ClGather single-precision (32-bit) floating-point elements \xe2\x80\xa600111000ChLoad packed double-precision (64-bit) floating-point \xe2\x80\xa600ChLoad packed single-precision (32-bit) floating-point \xe2\x80\xa600CmMultiply packed complex numbers in a and b, and store the \xe2\x80\xa600CfCompute the square root of packed double-precision \xe2\x80\xa600CmCompute the square root of packed half-precision (16-bit) \xe2\x80\xa600CfCompute the square root of packed single-precision \xe2\x80\xa600CgAdd packed double-precision (64-bit) floating-point \xe2\x80\xa600CnAdd packed half-precision (16-bit) floating-point elements \xe2\x80\xa600CgAdd packed single-precision (32-bit) floating-point \xe2\x80\xa600CfCompute the bitwise AND of packed double-precision \xe2\x80\xa600CfCompute the bitwise AND of packed single-precision \xe2\x80\xa600CjDivide packed double-precision (64-bit) floating-point \xe2\x80\xa600ChDivide packed half-precision (16-bit) floating-point \xe2\x80\xa600CjDivide packed single-precision (32-bit) floating-point \xe2\x80\xa600CkCompare packed double-precision (64-bit) floating-point \xe2\x80\xa600CiCompare packed half-precision (16-bit) floating-point \xe2\x80\xa600CkCompare packed single-precision (32-bit) floating-point \xe2\x80\xa600222111000ChMove packed double-precision (64-bit) floating-point \xe2\x80\xa600ChMove packed single-precision (32-bit) floating-point \xe2\x80\xa600ClMultiply packed double-precision (64-bit) floating-point \xe2\x80\xa600CjMultiply packed half-precision (16-bit) floating-point \xe2\x80\xa600ClMultiply packed single-precision (32-bit) floating-point \xe2\x80\xa600CgCompute the approximate reciprocal of packed 16-bit \xe2\x80\xa600ClSubtract packed double-precision (64-bit) floating-point \xe2\x80\xa600CjSubtract packed half-precision (16-bit) floating-point \xe2\x80\xa600ClSubtract packed single-precision (32-bit) floating-point \xe2\x80\xa600CfCompute the bitwise XOR of packed double-precision \xe2\x80\xa600CfCompute the bitwise XOR of packed single-precision \xe2\x80\xa600===<<<;;;===<<<;;;CeSet each bit of mask register k based on the most \xe2\x80\xa600999888777CfMultiply packed signed 16-bit integers in a and b, \xe2\x80\xa600CnMultiplies elements in packed 64-bit integer vectors a and \xe2\x80\xa600CiConvert packed signed 16-bit integers from a and b to \xe2\x80\xa600CiConvert packed signed 32-bit integers from a and b to \xe2\x80\xa600ChFor each packed 16-bit integer maps the value to the \xe2\x80\xa600ChFor each packed 32-bit integer maps the value to the \xe2\x80\xa600ChFor each packed 64-bit integer maps the value to the \xe2\x80\xa600CkShuffle packed 8-bit integers in a according to shuffle \xe2\x80\xa600CjStore 512-bits (composed of 32 packed 16-bit integers) \xe2\x80\xa600CjStore 512-bits (composed of 16 packed 32-bit integers) \xe2\x80\xa600CnStore 512-bits (composed of 8 packed 64-bit integers) from \xe2\x80\xa600CfStore 512-bits of integer data from a into memory. \xe2\x80\xa600CmStore 512-bits of integer data from a into memory using a \xe2\x80\xa600ClSubtract packed double-precision (64-bit) floating-point \xe2\x80\xa600CjSubtract packed half-precision (16-bit) floating-point \xe2\x80\xa600ClSubtract packed single-precision (32-bit) floating-point \xe2\x80\xa600DhReturns vector of type <code>__m512d</code> with indeterminate elements.00DcReturn vector of type <code>__m512h</code> with indetermination \xe2\x80\xa600DkReturns vector of type <code>__m512</code> with indeterminate elements. \xe2\x80\xa600CkBroadcasts the lower 2 packed 32-bit integers from a to \xe2\x80\xa600DfBroadcasts the low packed 8-bit integer from <code>a</code> to all \xe2\x80\xa600CgCompare packed signed 8-bit integers in a and b for \xe2\x80\xa600CiCompare packed unsigned 8-bit integers in a and b for \xe2\x80\xa600111000111000111000111000CkConvert the signed 32-bit integer b to a half-precision \xe2\x80\xa600CmConvert the signed 32-bit integer b to a single-precision \xe2\x80\xa600CmConvert the signed 64-bit integer b to a double-precision \xe2\x80\xa600CkConvert the signed 64-bit integer b to a half-precision \xe2\x80\xa600CmConvert the signed 64-bit integer b to a single-precision \xe2\x80\xa600CnConvert the lower single-precision (32-bit) floating-point \xe2\x80\xa600CnConvert the lower double-precision (64-bit) floating-point \xe2\x80\xa600000000ClConvert the lower half-precision (16-bit) floating-point \xe2\x80\xa600000000000222222222222CmConvert the unsigned 32-bit integer b to a half-precision \xe2\x80\xa600BnConvert the unsigned 32-bit integer b to a \xe2\x80\xa600BnConvert the unsigned 64-bit integer b to a \xe2\x80\xa600CmConvert the unsigned 64-bit integer b to a half-precision \xe2\x80\xa600111CkConvert packed single precision (32-bit) floating-point \xe2\x80\xa600ChConvert packed signed 32-bit integers in a to packed \xe2\x80\xa600ChConvert packed signed 64-bit integers in a to packed \xe2\x80\xa600000CjConvert packed unsigned 16-bit integers in a to packed \xe2\x80\xa600CjConvert packed unsigned 32-bit integers in a to packed \xe2\x80\xa600CjConvert packed unsigned 64-bit integers in a to packed \xe2\x80\xa600CjMultiply the lower complex numbers in a by the complex \xe2\x80\xa600CmMultiply the lower complex numbers in a and b, accumulate \xe2\x80\xa600C`Multiply the lower double-precision (64-bit) \xe2\x80\xa600CmMultiply the lower half-precision (16-bit) floating-point \xe2\x80\xa600C`Multiply the lower single-precision (32-bit) \xe2\x80\xa600222111000ChTest packed double-precision (64-bit) floating-point \xe2\x80\xa600CfTest packed half-precision (16-bit) floating-point \xe2\x80\xa600ChTest packed single-precision (32-bit) floating-point \xe2\x80\xa600CkTest the lower double-precision (64-bit) floating-point \xe2\x80\xa600CiTest the lower half-precision (16-bit) floating-point \xe2\x80\xa600CkTest the lower single-precision (32-bit) floating-point \xe2\x80\xa600CfConvert the exponent of the lower double-precision \xe2\x80\xa600CmConvert the exponent of the lower half-precision (16-bit) \xe2\x80\xa600CfConvert the exponent of the lower single-precision \xe2\x80\xa600DcReturns values from <code>slice</code> at offsets determined by \xe2\x80\xa600000000000CmMultiply packed complex numbers in a and b, accumulate to \xe2\x80\xa600>>>ClMultiply packed double-precision (64-bit) floating-point \xe2\x80\xa600CjMultiply packed half-precision (16-bit) floating-point \xe2\x80\xa600ClMultiply packed single-precision (32-bit) floating-point \xe2\x80\xa600C`Multiply the lower double-precision (64-bit) \xe2\x80\xa600CmMultiply the lower half-precision (16-bit) floating-point \xe2\x80\xa600C`Multiply the lower single-precision (32-bit) \xe2\x80\xa600555444333222111000CfAdd packed signed 16-bit integers in a and b using \xe2\x80\xa600ChAdd packed unsigned 16-bit integers in a and b using \xe2\x80\xa600CjBlend packed 8-bit integers from a and b using control \xe2\x80\xa600CeCompute the sum of absolute differences (SADs) of \xe2\x80\xa600CgMultiply packed complex numbers in a by the complex \xe2\x80\xa600CiMultiply the lower complex number in a by the complex \xe2\x80\xa600CfNormalize the mantissas of packed double-precision \xe2\x80\xa600CmNormalize the mantissas of packed half-precision (16-bit) \xe2\x80\xa600CfNormalize the mantissas of packed single-precision \xe2\x80\xa600CiNormalize the mantissas of the lower double-precision \xe2\x80\xa600CgNormalize the mantissas of the lower half-precision \xe2\x80\xa600CiNormalize the mantissas of the lower single-precision \xe2\x80\xa600CjLoad packed 32-bit integers from memory into dst using \xe2\x80\xa600CjLoad packed 64-bit integers from memory into dst using \xe2\x80\xa600CiLoad packed 8-bit integers from memory into dst using \xe2\x80\xa600CfMultiply packed signed 16-bit integers in a and b, \xe2\x80\xa600CdDuplicate even-indexed double-precision (64-bit) \xe2\x80\xa600CmShuffle double-precision (64-bit) floating-point elements \xe2\x80\xa600CmShuffle single-precision (32-bit) floating-point elements \xe2\x80\xa600CmRotate the bits in each packed 32-bit integer in a to the \xe2\x80\xa600CmRotate the bits in each packed 64-bit integer in a to the \xe2\x80\xa600111000ClCompute the approximate reciprocal square root of packed \xe2\x80\xa600000CiCompute the approximate reciprocal square root of the \xe2\x80\xa600000CkBroadcast 16-bit integer a to all elements of dst using \xe2\x80\xa600CkBroadcast 32-bit integer a to all elements of dst using \xe2\x80\xa600CkBroadcast 64-bit integer a to all elements of dst using \xe2\x80\xa600888777ChShift packed 16-bit integers in a left by imm8 while \xe2\x80\xa600ChShift packed 32-bit integers in a left by imm8 while \xe2\x80\xa600ChShift packed 64-bit integers in a left by imm8 while \xe2\x80\xa600ChShift packed 16-bit integers in a left by the amount \xe2\x80\xa600ChShift packed 32-bit integers in a left by the amount \xe2\x80\xa600ChShift packed 64-bit integers in a left by the amount \xe2\x80\xa600CiShift packed 16-bit integers in a right by imm8 while \xe2\x80\xa600CiShift packed 32-bit integers in a right by imm8 while \xe2\x80\xa600CiShift packed 64-bit integers in a right by imm8 while \xe2\x80\xa600CiShift packed 16-bit integers in a right by the amount \xe2\x80\xa600CiShift packed 32-bit integers in a right by the amount \xe2\x80\xa600CiShift packed 64-bit integers in a right by the amount \xe2\x80\xa600555444333222111000CkSubtract packed signed 16-bit integers in b from packed \xe2\x80\xa600CmSubtract packed unsigned 16-bit integers in b from packed \xe2\x80\xa600DgConditionally store 8-bit integer elements from <code>a</code> into \xe2\x80\xa600DiStores packed 32-bit integers from <code>a</code> into memory pointed \xe2\x80\xa600DiStores packed 64-bit integers from <code>a</code> into memory pointed \xe2\x80\xa600CfCompute the absolute value of packed signed 16-bit \xe2\x80\xa600CfCompute the absolute value of packed signed 32-bit \xe2\x80\xa600CfCompute the absolute value of packed signed 64-bit \xe2\x80\xa600ChAdd packed 16-bit integers in a and b, and store the \xe2\x80\xa600ChAdd packed 32-bit integers in a and b, and store the \xe2\x80\xa600ChAdd packed 64-bit integers in a and b, and store the \xe2\x80\xa600CeAdd packed signed 8-bit integers in a and b using \xe2\x80\xa600CgAdd packed unsigned 8-bit integers in a and b using \xe2\x80\xa600CnCompute the bitwise AND of packed 32-bit integers in a and \xe2\x80\xa600CnCompute the bitwise AND of packed 64-bit integers in a and \xe2\x80\xa600CfCompute the bitwise NOT of packed double-precision \xe2\x80\xa600CfCompute the bitwise NOT of packed single-precision \xe2\x80\xa600CkAverage packed unsigned 16-bit integers in a and b, and \xe2\x80\xa600CnConverts packed BF16 (16-bit) floating-point elements in a \xe2\x80\xa600CiConvert packed half-precision (16-bit) floating-point \xe2\x80\xa600CkConvert packed single-precision (32-bit) floating-point \xe2\x80\xa600CmCompute dot-product of BF16 (16-bit) floating-point pairs \xe2\x80\xa600CdLoad contiguous active double-precision (64-bit) \xe2\x80\xa600CdLoad contiguous active single-precision (32-bit) \xe2\x80\xa600CgMultiply packed complex numbers in a by the complex \xe2\x80\xa600CjMultiply the lower complex numbers in a by the complex \xe2\x80\xa600CmMultiply packed complex numbers in a and b, accumulate to \xe2\x80\xa600CmMultiply the lower complex numbers in a and b, accumulate \xe2\x80\xa600ClMultiply packed double-precision (64-bit) floating-point \xe2\x80\xa600CjMultiply packed half-precision (16-bit) floating-point \xe2\x80\xa600ClMultiply packed single-precision (32-bit) floating-point \xe2\x80\xa600C`Multiply the lower double-precision (64-bit) \xe2\x80\xa600CmMultiply the lower half-precision (16-bit) floating-point \xe2\x80\xa600C`Multiply the lower single-precision (32-bit) \xe2\x80\xa600555444333222111000ChConvert the exponent of each packed double-precision \xe2\x80\xa600CfConvert the exponent of each packed half-precision \xe2\x80\xa600ChConvert the exponent of each packed single-precision \xe2\x80\xa600CfConvert the exponent of the lower double-precision \xe2\x80\xa600CmConvert the exponent of the lower half-precision (16-bit) \xe2\x80\xa600CfConvert the exponent of the lower single-precision \xe2\x80\xa600CiCompare packed signed 16-bit integers in a and b, and \xe2\x80\xa600CiCompare packed signed 32-bit integers in a and b, and \xe2\x80\xa600CiCompare packed signed 64-bit integers in a and b, and \xe2\x80\xa600CkCompare packed unsigned 16-bit integers in a and b, and \xe2\x80\xa600CkCompare packed unsigned 32-bit integers in a and b, and \xe2\x80\xa600CkCompare packed unsigned 64-bit integers in a and b, and \xe2\x80\xa600555444333222111000CnMove packed 16-bit integers from a into dst using zeromask \xe2\x80\xa600CnMove packed 32-bit integers from a into dst using zeromask \xe2\x80\xa600CnMove packed 64-bit integers from a into dst using zeromask \xe2\x80\xa600ClMultiply the low signed 32-bit integers from each packed \xe2\x80\xa600CnMultiply the low unsigned 32-bit integers from each packed \xe2\x80\xa600CkExtract the reduced argument of packed double-precision \xe2\x80\xa600CiExtract the reduced argument of packed half-precision \xe2\x80\xa600CkExtract the reduced argument of packed single-precision \xe2\x80\xa600CnExtract the reduced argument of the lower double-precision \xe2\x80\xa600ClExtract the reduced argument of the lower half-precision \xe2\x80\xa600CnExtract the reduced argument of the lower single-precision \xe2\x80\xa600CmRotate the bits in each packed 32-bit integer in a to the \xe2\x80\xa600CmRotate the bits in each packed 64-bit integer in a to the \xe2\x80\xa600111000CmScale the packed double-precision (64-bit) floating-point \xe2\x80\xa600CkScale the packed half-precision (16-bit) floating-point \xe2\x80\xa600CmScale the packed single-precision (32-bit) floating-point \xe2\x80\xa600222000000CjBroadcast 8-bit integer a to all elements of dst using \xe2\x80\xa600CiShift packed 16-bit integers in a left by count while \xe2\x80\xa600CiShift packed 32-bit integers in a left by count while \xe2\x80\xa600CiShift packed 64-bit integers in a left by count while \xe2\x80\xa600CjShift packed 16-bit integers in a right by count while \xe2\x80\xa600CjShift packed 32-bit integers in a right by count while \xe2\x80\xa600CjShift packed 64-bit integers in a right by count while \xe2\x80\xa600222111000CkSubtract packed 16-bit integers in b from packed 16-bit \xe2\x80\xa600CkSubtract packed 32-bit integers in b from packed 32-bit \xe2\x80\xa600CkSubtract packed 64-bit integers in b from packed 64-bit \xe2\x80\xa600CjSubtract packed signed 8-bit integers in b from packed \xe2\x80\xa600ClSubtract packed unsigned 8-bit integers in b from packed \xe2\x80\xa600CnCompute the bitwise XOR of packed 32-bit integers in a and \xe2\x80\xa600CnCompute the bitwise XOR of packed 64-bit integers in a and \xe2\x80\xa600CmShuffle double-precision (64-bit) floating-point elements \xe2\x80\xa600CnShuffle half-precision (16-bit) floating-point elements in \xe2\x80\xa600CmShuffle single-precision (32-bit) floating-point elements \xe2\x80\xa600CnReduce the packed 8-bit integers in a by addition. Returns \xe2\x80\xa600CiReduce the packed 8-bit integers in a by bitwise AND. \xe2\x80\xa600CmReduce the packed 8-bit integers in a by maximum. Returns \xe2\x80\xa600CnReduce the packed unsigned 8-bit integers in a by maximum. \xe2\x80\xa600CmReduce the packed 8-bit integers in a by minimum. Returns \xe2\x80\xa600CnReduce the packed unsigned 8-bit integers in a by minimum. \xe2\x80\xa600ClReduce the packed 8-bit integers in a by multiplication. \xe2\x80\xa600CiReduce the packed 16-bit integers in a by bitwise OR. \xe2\x80\xa600CnExtract the reduced argument of the lower double-precision \xe2\x80\xa600ClExtract the reduced argument of the lower half-precision \xe2\x80\xa600CnExtract the reduced argument of the lower single-precision \xe2\x80\xa600CmScale the packed double-precision (64-bit) floating-point \xe2\x80\xa600CmScale the packed single-precision (32-bit) floating-point \xe2\x80\xa600000ChCalculate SHA1 state variable E after four rounds of \xe2\x80\xa600CkPerforms four rounds of SHA1 operation using an initial \xe2\x80\xa600DhShuffles 16-bit integers in the high 64 bits of <code>a</code> using \xe2\x80\xa600DkShuffles 16-bit integers in the low 64 bits of <code>a</code> using the \xe2\x80\xa600CnCompute the bitwise AND of packed 16-bit integers in a and \xe2\x80\xa600CnCompute the bitwise AND of packed 32-bit integers in a and \xe2\x80\xa600CnCompute the bitwise AND of packed 64-bit integers in a and \xe2\x80\xa600CnCompute the bitwise NAND of packed 8-bit integers in a and \xe2\x80\xa600CeReturns vector of type __m128i with indeterminate \xe2\x80\xa600BdAdds an effect to the feedback loop.EcAdd each lane horizontally, pack the outputs as <code>a</code> then <code>b</code>.0BdAdd adjacent <code>f32</code> lanes.0CmAttribute macro applied to a function to register it as a \xe2\x80\xa600000000000000AmAlphabetic baseline position.0CgChecks whether ansi color sequences are disabled by \xe2\x80\xa6DfApply the function <code>f</code> to each channel except the alpha \xe2\x80\xa6BmGet an <code>AudioBufferRef</code> reference.ChReturn a view on the raw sample buffer for 32bit per \xe2\x80\xa6BoReturn a mutable view on the raw sample buffer.CiReturn a view on the raw sample buffer for 16 bit per \xe2\x80\xa6C`Casts <code>self</code> to mutable inline table.0DjReturns an Option containing the <code>KeyEvent</code> if the event is \xe2\x80\xa6CjReturn a mutable reference to an 16bit Grayscale image \xe2\x80\xa6DkReturns the <code>ClockSpeed</code> as a number of seconds between each \xe2\x80\xa6DdReturns the <code>ClockSpeed</code> as a number of ticks per minute.DdReturns the <code>ClockSpeed</code> as a number of ticks per second.CeReturns a unique reference to a slice of possibly \xe2\x80\xa6CjDeprecated version of <code>Python::assume_attached</code>kAsync drop.00CjAuthenticate and verify a message using BLAKE2b-256 in \xe2\x80\xa6AhAllocate an AVAudioFifo.AoDrain data from an AVAudioFifo.AmReset the AVAudioFifo buffer.ChGet the current number of samples in the AVAudioFifo \xe2\x80\xa6AmWrite data to an AVAudioFifo.BfAllocate and initialize a buffer pool.Ci@return a non-zero number if codec is a decoder, zero \xe2\x80\xa6Cj@return a non-zero number if codec is an encoder, zero \xe2\x80\xa6Ch@return the name for provided color range or NULL if \xe2\x80\xa6Ch@return the name for provided color space or NULL if \xe2\x80\xa6CdGet a DV profile for the provided stream parameters.CcGet a DV profile for the provided compressed frame.CkInitialize an AVFifoBuffer. @param nmemb number of elementsCnFind the \xe2\x80\x9cbest\xe2\x80\x9d stream in the file. The best stream is \xe2\x80\xa6C`Copy only \xe2\x80\x9cmetadata\xe2\x80\x9d fields from src to dst.BoAllocate new buffer(s) for audio or video data.B`Get the name of a given channel.CjCompute what kind of losses will occur when converting \xe2\x80\xa6CjReturn the short name for a pixel format, NULL in case \xe2\x80\xa6CfReturn a name for the specified profile, if available.CcGet the current time in microseconds since some \xe2\x80\xa6CiGuess the frame rate, based on both the container and \xe2\x80\xa6CjFinalize the context before use. This function must be \xe2\x80\xa6CnCheck if the given dimension of an image is valid, meaning \xe2\x80\xa6ClCopy image plane from src to dst. That is, copy \xe2\x80\x9cheight\xe2\x80\xa6CmOverwrite the image data with black. This is suitable for \xe2\x80\xa6CnFormat a line of log the same way as the default callback. \xe2\x80\xa6AhSet the logging callbackCaFree an AVOptionRanges struct and set it to NULL.Cl@param[out] out_val The returned dictionary is a copy of \xe2\x80\xa6CbGet a list of allowed ranges for the given option.CjSet the values of all AVOption fields to their default \xe2\x80\xa6Cn@note Any old dictionary present is discarded and replaced \xe2\x80\xa6ClInitialize a reference-counted packet from av_malloc()ed \xe2\x80\xa6CaParse str and store the detected values in *rate.CnParse str and put in width_ptr and height_ptr the detected \xe2\x80\xa6Ch@return a pixel format descriptor for provided pixel \xe2\x80\xa6CjRead a line from an image, and write the values of the \xe2\x80\xa6CcGet the AVClass for AVStream. It can be used in \xe2\x80\xa6BmSupply raw packet data as input to a decoder.CiDump a graph into a human-readable string representation.ClFree a graph, destroy its links, and set *graph to NULL. \xe2\x80\xa6CmFree the supplied list of AVFilterInOut and set *inout to \xe2\x80\xa6BaAdd a new stream to a media file.ClOpen an input stream and read the header. The codecs are \xe2\x80\xa6BmIterate through names of available protocols.ChRead contents of h into print buffer, up to max_size \xe2\x80\xa6BlMaps axis dpad events to button dpad events.DbGets the rightwards shifted bits in <code>self</code> from the \xe2\x80\xa60EgSets the given <code>value</code> into the bits from the <code>[start..=end]</code> \xe2\x80\xa60CdThe size in bits of the <code>Variant0</code> field.CdThe size in bits of the <code>Variant1</code> field.CdThe size in bits of the <code>Variant2</code> field.CdThe size in bits of the <code>Variant3</code> field.CdThe size in bits of the <code>Variant4</code> field.CnThis is the number of valid bits in each output sample. If \xe2\x80\xa6CmBits per sample/pixel of internal libavcodec pixel/sample \xe2\x80\xa6DbBlends the <code>i16</code> lanes according to the immediate mask.0DcBlends the <code>i16</code> lanes according to the immediate value.0EkBlends the <code>i32</code> lanes in <code>a</code> and <code>b</code> into a single value.0DcBlends the <code>i32</code> lanes according to the immediate value.0CdBlend the lanes according to a runtime varying mask.000DjWhether the event loop should block until <code>schedule_update</code> \xe2\x80\xa6EhReturns <code>true</code> if the event loop blocks until <code>schedule_update</code>\xe2\x80\xa6EfIf <code>true</code>, the event loop will block until <code>schedule_update</code> \xe2\x80\xa600DdBlockingly locks this <code>Mutex</code>. When the lock has been \xe2\x80\xa6DhConverts an <code>Rgb</code> into unweighted brightness by averaging \xe2\x80\xa600CdThis is an identity function used as part of the \xe2\x80\xa60DjLike <code>cast_unchecked</code> but takes ownership of <code>self</code>.BlGet a channel described by the given string.CmCasts <code>self</code> to <code>i16</code> with range check.0DbCasts from <code>i128</code> to <code>i16</code> with range check.DaCasts from <code>u32</code> to <code>i16</code> with range check.D`Casts from <code>u8</code> to <code>i16</code> with range check.DaCasts from <code>i16</code> to <code>i16</code> with range check.DaCasts from <code>i32</code> to <code>i16</code> with range check.DcCasts from <code>usize</code> to <code>i16</code> with range check.DaCasts from <code>u16</code> to <code>i16</code> with range check.DbCasts from <code>u128</code> to <code>i16</code> with range check.D`Casts from <code>i8</code> to <code>i16</code> with range check.DaCasts from <code>i64</code> to <code>i16</code> with range check.DaCasts from <code>u64</code> to <code>i16</code> with range check.DcCasts from <code>isize</code> to <code>i16</code> with range check.CmCasts <code>self</code> to <code>i32</code> with range check.0DaCasts from <code>i64</code> to <code>i32</code> with range check.DaCasts from <code>u16</code> to <code>i32</code> with range check.D`Casts from <code>u8</code> to <code>i32</code> with range check.DaCasts from <code>i16</code> to <code>i32</code> with range check.DaCasts from <code>u32</code> to <code>i32</code> with range check.DaCasts from <code>i32</code> to <code>i32</code> with range check.DcCasts from <code>isize</code> to <code>i32</code> with range check.DaCasts from <code>u64</code> to <code>i32</code> with range check.DcCasts from <code>usize</code> to <code>i32</code> with range check.D`Casts from <code>i8</code> to <code>i32</code> with range check.DbCasts from <code>i128</code> to <code>i32</code> with range check.DbCasts from <code>u128</code> to <code>i32</code> with range check.CmCasts <code>self</code> to <code>i64</code> with range check.0DaCasts from <code>u16</code> to <code>i64</code> with range check.DaCasts from <code>u64</code> to <code>i64</code> with range check.DbCasts from <code>i128</code> to <code>i64</code> with range check.DaCasts from <code>i32</code> to <code>i64</code> with range check.D`Casts from <code>i8</code> to <code>i64</code> with range check.DcCasts from <code>isize</code> to <code>i64</code> with range check.DaCasts from <code>u32</code> to <code>i64</code> with range check.DaCasts from <code>i64</code> to <code>i64</code> with range check.D`Casts from <code>u8</code> to <code>i64</code> with range check.DcCasts from <code>usize</code> to <code>i64</code> with range check.DaCasts from <code>i16</code> to <code>i64</code> with range check.DbCasts from <code>u128</code> to <code>i64</code> with range check.CmCasts <code>self</code> to <code>u16</code> with range check.0DaCasts from <code>u32</code> to <code>u16</code> with range check.DcCasts from <code>usize</code> to <code>u16</code> with range check.DaCasts from <code>i64</code> to <code>u16</code> with range check.DbCasts from <code>u128</code> to <code>u16</code> with range check.D`Casts from <code>i8</code> to <code>u16</code> with range check.D`Casts from <code>u8</code> to <code>u16</code> with range check.DcCasts from <code>isize</code> to <code>u16</code> with range check.DbCasts from <code>i128</code> to <code>u16</code> with range check.DaCasts from <code>u64</code> to <code>u16</code> with range check.DaCasts from <code>u16</code> to <code>u16</code> with range check.DaCasts from <code>i16</code> to <code>u16</code> with range check.DaCasts from <code>i32</code> to <code>u16</code> with range check.CmCasts <code>self</code> to <code>u32</code> with range check.0DcCasts from <code>usize</code> to <code>u32</code> with range check.DcCasts from <code>isize</code> to <code>u32</code> with range check.DaCasts from <code>u32</code> to <code>u32</code> with range check.DaCasts from <code>u64</code> to <code>u32</code> with range check.DaCasts from <code>i32</code> to <code>u32</code> with range check.D`Casts from <code>u8</code> to <code>u32</code> with range check.DaCasts from <code>i16</code> to <code>u32</code> with range check.D`Casts from <code>i8</code> to <code>u32</code> with range check.DbCasts from <code>u128</code> to <code>u32</code> with range check.DbCasts from <code>i128</code> to <code>u32</code> with range check.DaCasts from <code>i64</code> to <code>u32</code> with range check.DaCasts from <code>u16</code> to <code>u32</code> with range check.CmCasts <code>self</code> to <code>u64</code> with range check.0DaCasts from <code>u16</code> to <code>u64</code> with range check.DcCasts from <code>isize</code> to <code>u64</code> with range check.DaCasts from <code>u64</code> to <code>u64</code> with range check.DaCasts from <code>u32</code> to <code>u64</code> with range check.DcCasts from <code>usize</code> to <code>u64</code> with range check.D`Casts from <code>i8</code> to <code>u64</code> with range check.DaCasts from <code>i64</code> to <code>u64</code> with range check.DaCasts from <code>i16</code> to <code>u64</code> with range check.DaCasts from <code>i32</code> to <code>u64</code> with range check.DbCasts from <code>i128</code> to <code>u64</code> with range check.D`Casts from <code>u8</code> to <code>u64</code> with range check.DbCasts from <code>u128</code> to <code>u64</code> with range check.CiIterate over the AVClasses corresponding to potential \xe2\x80\xa6B`custom intra quantization matrixCdLow lane <code>a == b</code>, other lanes unchanged.0CkLow lane <code>a &amp;gt;= b</code>, other lanes unchanged.CgLow lane <code>a &gt;= b</code>, other lanes unchanged.CjLow lane <code>a &amp;gt; b</code>, other lanes unchanged.CfLow lane <code>a &gt; b</code>, other lanes unchanged.CkLow lane <code>a &amp;lt;= b</code>, other lanes unchanged.CgLow lane <code>a &lt;= b</code>, other lanes unchanged.CiLow lane <code>a &amp;lt; b</code>, other lane unchanged.CeLow lane <code>a &lt; b</code>, other lane unchanged.BdLow lane <code>f64</code> less than.0CdLow lane <code>a != b</code>, other lanes unchanged.0CnLow lane <code>!(a &amp;gt;= b)</code>, other lanes unchanged.CjLow lane <code>!(a &gt;= b)</code>, other lanes unchanged.CmLow lane <code>!(a &amp;gt; b)</code>, other lanes unchanged.CiLow lane <code>!(a &gt; b)</code>, other lanes unchanged.CnLow lane <code>!(a &amp;lt;= b)</code>, other lanes unchanged.CjLow lane <code>!(a &lt;= b)</code>, other lanes unchanged.CmLow lane <code>!(a &amp;lt; b)</code>, other lanes unchanged.CiLow lane <code>!(a &lt; b)</code>, other lanes unchanged.DhCompare <code>f64</code> lanes according to the operation specified, \xe2\x80\xa60BnLanewise <code>a.is_nan() | b.is_nan()</code>.0BgSystem Coherency Line Size (Bits 11-00)BbReturns <code>NotSupported</code>.CmThe capacity of a fixed-size array is always equal to its \xe2\x80\xa611CeReturns the reserved capacity for elements in the \xe2\x80\xa6002DeThis is less efficent than <code>HashSet::contains</code> for not \xe2\x80\xa6DfThis is less efficent than <code>BTreeSet::contains</code> for not \xe2\x80\xa6EdReturns <code>true</code> if the collection contains the given <code>element</code>.00DgReturns <code>NotSupported</code> since a fixed-size array is never \xe2\x80\xa6EfReturns <code>true</code> if the collection is empty, <code>false</code> if it\xe2\x80\x99s \xe2\x80\xa600CgDescribe a column-major image packed in all directions.EcCreates a new mask from the elements of <code>first</code> and <code>second</code>.00FjCopies <code>count * size_of::&lt;T&gt;()</code> bytes from <code>src</code> to <code>dst</code>. Must \xe2\x80\xa6BkThis is an accidentally-stable alias to \xe2\x80\xa6FiCopies <code>count * size_of::&lt;T&gt;()</code> bytes from <code>src</code> to <code>dst</code>. The \xe2\x80\xa61010BbCorrect single timestamp overflowsCmReturns the number of threads in the current registry. If \xe2\x80\xa6CkReturns the (current) number of threads in the thread pool.AnCurrent token\xe2\x80\x99s start offsetCgReturns the ordinal day of the year that this zoned \xe2\x80\xa6DiSet the day field on a <code>Zoned</code> via the ordinal number of a \xe2\x80\xa6CnReturns the ordinal day of the year that this date resides \xe2\x80\xa6DhSet the day field on a <code>Date</code> via the ordinal number of a \xe2\x80\xa6CjReturns the ordinal day of the year that this datetime \xe2\x80\xa6DjSet the day field on a <code>DateTime</code> via the ordinal number of \xe2\x80\xa6ClRemove duplicates from sections of consecutive identical \xe2\x80\xa6000CmReturn orientation of a display or Unknown if orientation \xe2\x80\xa6DiFormat a <code>Timestamp</code> datetime into a string with the given \xe2\x80\xa6DjLike <code>downcast_exact</code> but takes ownership of <code>self</code>.0C`Create a new empty string with a provided bufferAjEnables focus change mode.CaAllow the screen to be blanked by a screen saver.DeEquivalent to <code>Self::encap()</code>, but with a one-time use \xe2\x80\xa6CeGiven the EncapsulationKey and securely generated \xe2\x80\xa6DhGiven the EncapsulationKey and randomness <code>m</code>, generate a \xe2\x80\xa600CfConvenience function to create an end-of-stream error.CnGets an <code>m128i</code> value out of an <code>m256i</code>.0BgReturns whether the font is monospaced.BcReturns the count of prime factors.0CnA file has been dropped over the application. Applications \xe2\x80\xa6000EjImplement <code>fill_bytes</code> via <code>next_u64</code> and <code>next_u32</code>, \xe2\x80\xa6DgImplement <code>fill_bytes</code> by reading chunks from the output \xe2\x80\xa60CoFinds the index of the last 1 in <code>self</code> from the \xe2\x80\xa600000000000EaReturns a copy of <code>self</code> with the <code>Variant0</code> field flipped.EaReturns a copy of <code>self</code> with the <code>Variant1</code> field flipped.EaReturns a copy of <code>self</code> with the <code>Variant2</code> field flipped.EaReturns a copy of <code>self</code> with the <code>Variant3</code> field flipped.EaReturns a copy of <code>self</code> with the <code>Variant4</code> field flipped.CnConvert from underlying bit representation, preserving all \xe2\x80\xa60000000CmCreates a C string wrapper from a byte slice with exactly \xe2\x80\xa6ClCalculate a minimal rectangle enclosing a set of points. \xe2\x80\xa60CdAttempts to create a Python string from a Python \xe2\x80\xa6DjLike <code>ParserError::from_input</code> but also include an external \xe2\x80\xa6CmCreate a new error from an input position and an external \xe2\x80\xa6Edreturns low <code>i16</code> of <code>i32</code>, saturating values that are too \xe2\x80\xa6Egreturns low <code>i16</code> of <code>i32</code>, truncating the upper bits if they \xe2\x80\xa6BlCreate a delay from a ratio of milliseconds.DhConverts a vector of bytes to a <code>String</code> without checking \xe2\x80\xa6CgConverts a slice of bytes to a string slice without \xe2\x80\xa6010000BgLanewise fused <code>(a * b) + c</code>000BgLanewise fused <code>(a * b) - c</code>000CkChecks whether the standard library\xe2\x80\x99s panic hook will \xe2\x80\xa6CjGets the low lane as an individual <code>f32</code> value.0CnReturns information provided by the hypervisor, if running \xe2\x80\xa6DkConverts the low lane to <code>i32</code> and extracts as an individual \xe2\x80\xa60DkConverts the low lane to <code>i64</code> and extracts as an individual \xe2\x80\xa6CkCalculates the 1D array index from the given 2D coordinates0CkGets the mutable reference of the contents of the cell, \xe2\x80\xa60CeContains SoC vendor specific information (LEAF=0x17).CmGet the position of the window. TODO: implement for other \xe2\x80\xa6BnGets the pointer to the named OpenGL function.ClConvert the supplied image to a grayscale image with the \xe2\x80\xa60BmIf there are any samples aliasing each other.0oAVX512VPOPCNTDQBiIs there support for execute disable bit.BmSupport for MWAITX and MONITORX instructions.BhChecks if mutable-globals are available.AoSupports Intel Processor Trace.BgSupports Enhanced REP MOVSB/STOSB if 1.CiQuery whether a game controller has rumble support on \xe2\x80\xa6ChQuery whether a joystick has rumble support on triggers.BmIndicates support for VMCB clean bits if set.C`Fill the image with a linear horizontal gradientDgCreates a \xe2\x80\x9cfork-join\xe2\x80\x9d scope <code>s</code> with FIFO order, and \xe2\x80\xa6CmCreates a scope that spawns work into this thread pool in \xe2\x80\xa6CkReturns a mutable reference to the unfilled part of the \xe2\x80\xa6EaInserts a lane from <code>$b</code> into <code>$a</code>, optionally at a new \xe2\x80\xa60CaInserts an <code>i16</code> to <code>m256i</code>0CaInserts an <code>i32</code> to <code>m256i</code>0CaInserts an <code>i64</code> to <code>m256i</code>0ClInserts a new value for the <code>i64</code> lane specified.0CaInserts an <code>m128</code> to <code>m256</code>0BcCalls `NumInt::int_ref_combine_rep.00CjSimilar to int_combine_rep, but operates on references \xe2\x80\xa600BcCalls `NumInt::int_ref_digits_base.00CjSimilar to int_digits_base, but operates on references \xe2\x80\xa600BcCalls `NumInt::int_ref_digits_sign.00CjSimilar to int_digits_sign, but operates on references \xe2\x80\xa600BcCalls `NumInt::int_ref_factors_buf.00CjSimilar to int_factors_buf, but operates on references \xe2\x80\xa600BcCalls `NumInt::int_ref_permute_rep.00CjSimilar to int_permute_rep, but operates on references \xe2\x80\xa600ClAlternate elements from two iterators until at least one \xe2\x80\xa6000CmInterleaves elements of this iterator and the other given \xe2\x80\xa60CnSample from an image using coordinates in [0, w-1] and [0, \xe2\x80\xa6CmConverts the vector into <code>&amp;&#39;bump mut [T]</code>.DdEquivalent to <code>CString::into_bytes()</code> except that the \xe2\x80\xa6CnReturns a tuple with the active variant\xe2\x80\x99s inner value in \xe2\x80\xa6E`Whether <code>SetError</code> is <code>SetError::AlreadyInitializedError</code>.DfReturns <code>true</code> if operations on values of this type are \xe2\x80\xa6000000000000000CnReturns true when the compacted format of an XSAVE area is \xe2\x80\xa6DiWhether <code>SetError</code> is <code>SetError::InitializingError</code>DdWhether <code>self</code> is equal to <code>NUM_MAX_NEGATIVE</code>.00FdWhether <code>self</code> is equal to <code>Some(</code><code>NUM_MIN_POSITIVE</code><code>)</code>.00BfTells whether the raw mode is enabled.BhReturns true if the scancode is pressed.DaReturns <code>self</code> with only the most significant bit set.00000000000CoIterator over generated IDs with <code>Relaxed</code> ordering.Dh<code>core</code> Creates an iterator where each iteration calls the \xe2\x80\xa60CeProvides kernel version following this string format:CjIf the left value is not present, replace it the value \xe2\x80\xa6AcLinear Address BitsDbLoads the <code>f32</code> reference into all lanes of a register.0DkLoad an <code>f32</code> and splat it to all lanes of an <code>m256d</code>0BdLoads the reference into a register.0BfLoad data from memory into a register.0AcManufacturer StringClMaximum number of addressable IDs for logical processors \xe2\x80\xa60CeAttempts to grow the default linear memory by the \xe2\x80\xa6Dg<strong>Gets</strong> the attribute: the number of buffers used for \xe2\x80\xa6Dn<strong>Gets</strong> the attribute: the number of samples used around the \xe2\x80\xa6EoConvert <code>&amp;mut [A]</code> into <code>&amp;mut [B]</code> (possibly with a change in \xe2\x80\xa6DfOnly leaves the bits both in <code>self</code> and <code>other</code>.00BlSets the bit at <code>index</code>, checked.00BbSets the <code>FLAG1</code> field.0BbSets the <code>FLAG2</code> field.0BbSets the <code>MASK0</code> field.0EeSets the given <code>value</code> into the <code>[start..=end]</code> range. Sets \xe2\x80\xa600ClSame as \xe2\x80\x9cnew_render_pass\xe2\x80\x9d, but allows multiple color \xe2\x80\xa6000ClConstructs a new boxed slice with uninitialized contents \xe2\x80\xa6CaConstructs a new reference-counted slice with \xe2\x80\xa61ClConstructs a new atomically reference-counted slice with \xe2\x80\xa6DcConstructs a new capsule whose contents are <code>value</code>, \xe2\x80\xa63231CnSame as Gilrs::next_event, but blocks the thread it is run \xe2\x80\xa6AcNodes per processorDfNormalize a path, including <code>..</code> without traversing the \xe2\x80\xa6Bl&lt; The number of available texture formatsCmCalled whenever a new batch of audio samples is requested \xe2\x80\xa6CkCalled by the backend when it\xe2\x80\x99s time to process a new \xe2\x80\xa6EaCalls the <code>on_start_processing</code> callback of the <code>Renderer</code>.22ChReturns the color type of the image file before decodingCiDuplicates the next of stack pair of elements to the top.CjSwaps the top two pair stack elements in compile-time, \xe2\x80\xa6CjDuplicates the top pair of elements before the next of \xe2\x80\xa6CjReturns the number of outcoming packets since the last \xe2\x80\xa6CgTell user application that palette has changed from \xe2\x80\xa6CkReturns a parallel iterator over subslices separated by \xe2\x80\xa60CnReturns a parallel iterator over substrings separated by a \xe2\x80\xa60cWIPDkReturns the number of physical cores on the CPU or <code>None</code> if \xe2\x80\xa6DgLike <code>poll_write</code>, except that it writes from a slice of \xe2\x80\xa6CeReturn the position of the maximum element in the \xe2\x80\xa6000CeReturn the position of the minimum element in the \xe2\x80\xa6000DkIf a <code>FormatReader</code> requires a seek index, but the container \xe2\x80\xa60DjThe <code>prefetch</code> intrinsic is a hint to the code generator to \xe2\x80\xa600BlUnchecked version of <code>push_back</code>.DcPushes a new <code>element</code> to the front of the destaque, \xe2\x80\xa6BmRender triangles, optionally using a texture.Cmpanics for depth-only or multiple color attachment render \xe2\x80\xa60000CkDoes current rendering backend support automatic resolve of0DjFinds the index of the last character in <code>haystack</code> that is \xe2\x80\xa6DgReturns the nearest integer to an <code>f16</code>. Rounds half-way \xe2\x80\xa600DgReturns the nearest integer to an <code>f32</code>. Rounds half-way \xe2\x80\xa600DgReturns the nearest integer to an <code>f64</code>. Rounds half-way \xe2\x80\xa600CcSample aspect ratio for the video frame, 0/1 if \xe2\x80\xa6CiVideo only. The aspect ratio (width / height) which a \xe2\x80\xa6Cmsample aspect ratio (0 if unknown) That is the width of a \xe2\x80\xa6Bd&lt; agreed upon sample aspect ratioBlVideo only, the sample (pixel) aspect ratio.Bbsample aspect ratio (0 if unknown)jVideo only00CmReturns the number of mixer send tracks that can exist at \xe2\x80\xa6CmThe maximum number of mixer send tracks that can exist at \xe2\x80\xa6CbReturns the number of <code>Sender</code> handles.CkReturns the number of <code>UnboundedSender</code> handles.1Dk<strong>Sets</strong> the attribute: the minimum number of bits for the \xe2\x80\xa6CmSets how much time it takes for the volume attenuation to \xe2\x80\xa6CnConfigures whether the default panic hook will capture and \xe2\x80\xa6Db<strong>Sets</strong> the attribute: type of GL context (Core, \xe2\x80\xa6Db<strong>Sets</strong> the OpenGL context major and minor versions.CjStart a rumble effect in the game controller\xe2\x80\x99s triggers.CcStart a rumble effect in the joystick\xe2\x80\x99s triggers.DcSplats the <code>i16</code> to all lanes of the <code>m128i</code>.0CnSplat an <code>i16</code> arg into an <code>m256i</code> lane.0DcSplats the <code>i32</code> to all lanes of the <code>m128i</code>.0CnSplat an <code>i32</code> arg into an <code>m256i</code> lane.0DdSplats the <code>i64</code> to both lanes of the <code>m128i</code>.0CnSplat an <code>i64</code> arg into an <code>m256i</code> lane.0DkShifts the mask elements to the left by <code>OFFSET</code>, filling in \xe2\x80\xa6DjShifts the vector elements to the left by <code>OFFSET</code>, filling \xe2\x80\xa6CkShuts down the runtime, without waiting for any spawned \xe2\x80\xa6EmApplies the sign of <code>i8</code> values in <code>b</code> to the values in <code>a</code>.0DaLanewise <code>a * signum(b)</code> with lanes as <code>i8</code>0CdDetermines if the <code>0</code> flag was specified.BgSets or unsets the <code>0</code> flag.CcAdds two simd vectors elementwise, with saturation.00ChSubtracts two simd vectors elementwise, with saturation.00B`Selects elements from a bitmask.00CnTakes a substring based on a range that corresponds to the \xe2\x80\xa6EhProjects to the <code>index</code>-th element of <code>slice_ptr</code>, as the same \xe2\x80\xa600CnPerforms bilinear scaling between two surfaces of the same \xe2\x80\xa6DiSplat the lower <code>f64</code> across both lanes of <code>m128d</code>.0CcStart time of the stream in real world time, in \xe2\x80\xa6ClReturns the total number of capturing groups that appear \xe2\x80\xa6DgSubtract each lane horizontally, pack the outputs as <code>a</code> \xe2\x80\xa60BiSubtract adjacent <code>f32</code> lanes.0CnNumber of C0 sub C-states supported using MWAIT (Bits 03 - \xe2\x80\xa6CnNumber of C1 sub C-states supported using MWAIT (Bits 07 - \xe2\x80\xa6CnNumber of C2 sub C-states supported using MWAIT (Bits 11 - \xe2\x80\xa6CnNumber of C3 sub C-states supported using MWAIT (Bits 15 - \xe2\x80\xa6CnNumber of C4 sub C-states supported using MWAIT (Bits 19 - \xe2\x80\xa6CnNumber of C5 sub C-states supported using MWAIT (Bits 23 - \xe2\x80\xa6CnNumber of C6 sub C-states supported using MWAIT (Bits 27 - \xe2\x80\xa6CnNumber of C7 sub C-states supported using MWAIT (Bits 31 - \xe2\x80\xa6BlUnchecked version of <code>swap_back</code>.EhSwaps the two regions of memory beginning at <code>x</code> and <code>y</code>. Must \xe2\x80\xa6EaSwaps <code>count * size_of::&lt;T&gt;()</code> bytes between the two regions \xe2\x80\xa600CfAllocate SwrContext if needed and set/reset common \xe2\x80\xa6CnFind an upper bound on the number of samples that the next \xe2\x80\xa6DbReturn a pointer to yuv&lt;-&gt;rgb coefficients for the given \xe2\x80\xa6CkReturns an iterator over all non-overlapping matches of \xe2\x80\xa6ClMixes this sound fading out with another sound fading in \xe2\x80\xa60D`This contains the bitfields <code>tcpi_snd_wscale</code> and \xe2\x80\xa6AhTests if all bits are 1.0BmFormat a <code>TimeZone</code> into a string.CgFormat a <code>Timestamp</code> datetime into a string.0CnSame as to_high_pass but allows the q value (bandwidth) to \xe2\x80\xa6AnTotal number of written bytes.DgLike <code>transmute</code>, but even less checked at compile-time: \xe2\x80\xa600CnTranspose four <code>m128</code> as if they were a 4x4 matrix.0DkTries to create a timestamp from milliseconds. Returns <code>None</code>\xe2\x80\xa6CgReturns a time delta corresponding to the number of \xe2\x80\xa6CbSets the underline color to <code>DarkBlue</code>.CbSets the underline color to <code>DarkCyan</code>.CbSets the underline color to <code>DarkGrey</code>.EeUnpack and interleave low <code>i8</code> lanes of <code>a</code> and <code>b</code>.000EbUnsets the bits in <code>self</code> to 0, from the <code>[start..=end]</code> \xe2\x80\xa600000000000DeReturns a copy of <code>self</code> with unset bits to 0 from the \xe2\x80\xa600DjSame as <code>update_window</code>, but only update the parts included \xe2\x80\xa6DaEquivalent to the appropriate <code>llvm.memset.p0i8.*</code> \xe2\x80\xa600CnLoads the Vulkan library using a platform-dependent Vulkan \xe2\x80\xa6BlWebAssembly mouse event callback dispatcher.ClOn Wayland, specifies how to draw client-side decoration \xe2\x80\xa600C`Get the pixel format associated with the window.AkProvide the channel layout.BmCreate the header dynamically for each image.DoReturns a new <code>ExampleEnumSet</code> with <code>Variant0</code> field set.DoReturns a new <code>ExampleEnumSet</code> with <code>Variant1</code> field set.DoReturns a new <code>ExampleEnumSet</code> with <code>Variant2</code> field set.DoReturns a new <code>ExampleEnumSet</code> with <code>Variant3</code> field set.DoReturns a new <code>ExampleEnumSet</code> with <code>Variant4</code> field set.CmMake a format guess based on the content, replacing it on \xe2\x80\xa6EfTemporarily sets the target of <code>Canvas</code> to a <code>Texture</code>. This \xe2\x80\xa6DjSets the time zone annotation on this <code>Pieces</code> to the given \xe2\x80\xa6BiSends a message to a specific Web Worker.DjCasts <code>self</code> to <code>i8</code> wrapping at the numeric bounds.0DnCasts from <code>i32</code> to <code>i8</code> wrapping at the numeric bounds.DnCasts from <code>i64</code> to <code>i8</code> wrapping at the numeric bounds.DmCasts from <code>u8</code> to <code>i8</code> wrapping at the numeric bounds.DnCasts from <code>i16</code> to <code>i8</code> wrapping at the numeric bounds.DoCasts from <code>i128</code> to <code>i8</code> wrapping at the numeric bounds.DoCasts from <code>u128</code> to <code>i8</code> wrapping at the numeric bounds.DnCasts from <code>u16</code> to <code>i8</code> wrapping at the numeric bounds.DnCasts from <code>u32</code> to <code>i8</code> wrapping at the numeric bounds.E`Casts from <code>usize</code> to <code>i8</code> wrapping at the numeric bounds.E`Casts from <code>isize</code> to <code>i8</code> wrapping at the numeric bounds.DmCasts from <code>i8</code> to <code>i8</code> wrapping at the numeric bounds.DnCasts from <code>u64</code> to <code>i8</code> wrapping at the numeric bounds.DjCasts <code>self</code> to <code>u8</code> wrapping at the numeric bounds.0E`Casts from <code>isize</code> to <code>u8</code> wrapping at the numeric bounds.DnCasts from <code>u64</code> to <code>u8</code> wrapping at the numeric bounds.DnCasts from <code>i16</code> to <code>u8</code> wrapping at the numeric bounds.DoCasts from <code>u128</code> to <code>u8</code> wrapping at the numeric bounds.DoCasts from <code>i128</code> to <code>u8</code> wrapping at the numeric bounds.DnCasts from <code>u32</code> to <code>u8</code> wrapping at the numeric bounds.DmCasts from <code>i8</code> to <code>u8</code> wrapping at the numeric bounds.DmCasts from <code>u8</code> to <code>u8</code> wrapping at the numeric bounds.DnCasts from <code>i32</code> to <code>u8</code> wrapping at the numeric bounds.DnCasts from <code>i64</code> to <code>u8</code> wrapping at the numeric bounds.DnCasts from <code>u16</code> to <code>u8</code> wrapping at the numeric bounds.E`Casts from <code>usize</code> to <code>u8</code> wrapping at the numeric bounds.CmWrites a length prefix into this hasher, as part of being \xe2\x80\xa600000Cl&lt; ITU-R 601, SMPTE 274M 296M S314M(DV 4:1:1), mpeg2 4:2:2Bo&lt; ITU-R BT2020 non-constant luminance systemBg&lt; ITU-R BT1361 Extended Colour GamutAeDRM frame descriptor.AeDRM layer descriptor.AeDRM plane descriptor.CaA parsed representation of a filtergraph segment.Bi&lt; Usually treated as AVMEDIA_TYPE_DATAC`@defgroup lavc_packet_side_data AVPacketSideDataAfMute control messages.jSee above.Ah&lt; not part of ABI/APIBf&lt; Lo/Ro 2-channel downmix (Stereo).Ch&lt; Lt/Rt 2-channel downmix, Dolby Surround compatible.Ao&lt; Use single-quote escaping.ChATSC A53 Part 4 Closed Captions. A53 CC bitstream is \xe2\x80\xa6AnThe mapping must be writeable.n&lt; UndefinedC`&lt; packed RGB 1:2:1,  8bpp, (msb)1B 2G 1R(lsb)CiDRM-managed buffers exposed through PRIME buffer sharing.Cn&lt; HW decoding through DXVA2, Picture.data[3] contains a \xe2\x80\xa6Bi&lt; planar GBR 4:4:4:4 40bpp, big-endianBl&lt; planar GBR 4:4:4:4 40bpp, little-endianBi&lt; planar GBR 4:4:4:4 48bpp, big-endianBl&lt; planar GBR 4:4:4:4 48bpp, little-endianBi&lt; planar GBR 4:4:4:4 56bpp, big-endianBl&lt; planar GBR 4:4:4:4 56bpp, little-endianBj&lt; planar GBRA 4:4:4:4 64bpp, big-endianBm&lt; planar GBRA 4:4:4:4 64bpp, little-endianCo&lt; IEEE-754 single precision planar GBR 4:4:4,     96bpp, \xe2\x80\xa60Cc&lt; IEEE-754 single precision Y, 32bpp, big-endianCf&lt; IEEE-754 single precision Y, 32bpp, little-endianDa&lt;        Y        ,  1bpp, 0 is black, 1 is white, in each \xe2\x80\xa6Da&lt;        Y        ,  1bpp, 0 is white, 1 is black, in each \xe2\x80\xa6C`&lt; packed RGB 1:2:1,  8bpp, (msb)1R 2G 1B(lsb)D`&lt; IEEE-754 half precision packed RGBA 16:16:16:16, 64bpp, \xe2\x80\xa60Ck&lt; IEEE-754 single precision packed RGBA 32:32:32:32, \xe2\x80\xa60Bo&lt; packed YUV 4:1:1, 12bpp, Cb Y0 Y1 Cr Y2 Y3Cn&lt; packed BGR 10:10:10, 30bpp, (msb)2X 10B 10G 10R(lsb), \xe2\x80\xa60Cn&lt; packed RGB 10:10:10, 30bpp, (msb)2X 10R 10G 10B(lsb), \xe2\x80\xa60CkThis side data should be associated with a video stream \xe2\x80\xa6EdFlag telling rescaling functions to pass <code>INT64_MIN</code>/<code>MAX</code> \xe2\x80\xa6DhAn iterator type over <code>ArrayOfTables</code>\xe2\x80\x99s <code>Table</code>sDcSimilar to <code>std::sync::MutexGuard</code>, but for use with \xe2\x80\xa6BjSettings for an <code>AudioManager</code>.ClAutomatic Gain Control filter for maintaining consistent \xe2\x80\xa6C`PCM 32-bit big-endian floating point interleavedCcPCM 32-bit little-endian floating point interleavedC`PCM 64-bit big-endian floating point interleavedCcPCM 64-bit little-endian floating point interleavedAbPCM Mu-law (G.711)BhPCM signed 16-bit big-endian interleavedBkPCM signed 16-bit little-endian interleavedBhPCM signed 24-bit big-endian interleavedBkPCM signed 24-bit little-endian interleavedBhPCM signed 32-bit big-endian interleavedBkPCM signed 32-bit little-endian interleavedBjPCM unsigned 16-bit big-endian interleavedBmPCM unsigned 16-bit little-endian interleavedBjPCM unsigned 24-bit big-endian interleavedBmPCM unsigned 24-bit little-endian interleavedBjPCM unsigned 32-bit big-endian interleavedBmPCM unsigned 32-bit little-endian interleavedCnThe version of SDL that was used to generate the bindings. \xe2\x80\xa6CaThe color format did not match the channel count.EkAssociated type for <code>&lt;&amp;[char; N] as Pattern&gt;::Searcher&lt;&#39;a&gt;</code>.0000ClAn iterator over all windows, wrapping back to the first \xe2\x80\xa60DgThe maximum length of <code>export</code> secret that may be requested.BlA command that enables bracketed paste mode.BlA command that switches to alternate screen.DeAn example created with <code>bitfield!</code>, with public extra \xe2\x80\xa6BmWhat kidn of extended register state this is.BgInformation about topology (LEAF=0x0B).ChThe distance of the current spatial track to a listener.Db<code>FromParallelIterator</code> implements the creation of a \xe2\x80\xa60C`507 Insufficient Storage [RFC4918, Section 11.5]Dd<code>IntoParallelIterator</code> implements the conversion to a \xe2\x80\xa60AjDistance model is invalid.AiRolloff factor is &lt; 0.C`A command that switches back to the main screen.CaEncrypted Memory Capabilities (LEAF=0x8000_001F).BfDecreases the microphone input volume.0CdRepresents an open connection to a MIDI output port.Dj<code>miniquad</code> Defines how an application responds to events in \xe2\x80\xa60Cm\xf0\x9f\xaa\xaa \xf0\x9f\x9a\xa9 The dimensions given did not match the elements \xe2\x80\xa60E`\xf0\x9f\x9a\xa9+ <code>std</code> Possible errors that made [<code>recv_timeout</code>][\xe2\x80\xa60CnThe maximum representable power of two within the type\xe2\x80\x99s \xe2\x80\xa60DgTurns off the <code>Frame</code> and <code>Encircled</code> attributes.ChOwned RAII structure used to release the shared read \xe2\x80\xa6BcAn owned permit from the semaphore.BbControls a panning control effect.Eg\xf0\x9f\x9a\xa9 <code>std</code> An error returned from <code>Path::strip_prefix</code> if the \xe2\x80\xa60CdZero-sized type used to mark a type parameter as \xe2\x80\xa600C`Processor name (LEAF=0x8000_0002..=0x8000_0004).DeRetrieve the month component of a <code>PyDateTime_Date</code> or \xe2\x80\xa6D`Represents Python\xe2\x80\x99s <code>DeprecationWarning</code> exception.D`Represents Python\xe2\x80\x99s <code>FloatingPointError</code> exception.D`Represents Python\xe2\x80\x99s <code>NotADirectoryError</code> exception.D`Represents Python\xe2\x80\x99s <code>ProcessLookupError</code> exception.D`Represents Python\xe2\x80\x99s <code>StopAsyncIteration</code> exception.D`Represents Python\xe2\x80\x99s <code>UnicodeDecodeError</code> exception.D`Represents Python\xe2\x80\x99s <code>UnicodeEncodeError</code> exception.CmAn error that is returned when a resource cannot be added \xe2\x80\xa6Ag&lt; Ignore the assert.Bd&lt; A new audio device is availableCbA callback that fires when an SDL assertion fails.Ce\\brief Audio device event structure (event.adevice.*)CjClear any pending data in the stream without converting itChTell the stream that you\xe2\x80\x99re done sending data, and \xe2\x80\xa6o&lt; 0, 0, 0, 0ClDismiss the composition window/IME without disabling the \xe2\x80\xa6ChDrop any queued audio data waiting to be sent to the \xe2\x80\xa6CmUse this function to shut down audio processing and close \xe2\x80\xa6AkAllocate a new RGB surface.CdCreate an SDL window from an existing native window.AdDestroy a semaphore.CnCreate an OpenGL context for an OpenGL window, and make it \xe2\x80\xa6AiDelete an OpenGL context.CiUnbind an OpenGL/ES/ES2 texture from the current context.CbUnload the OpenGL library previously loaded by \xe2\x80\xa6CjGet UTF-8 text from the clipboard, which must be freed \xe2\x80\xa6AgGet the default cursor.BnGet the desktop area represented by a display.ChGet the window that currently has an input grab enabled.CdQuery the window which currently has keyboard focus.CdGet a snapshot of the current state of the keyboard.AlGet the opacity of a window.BoGet the SDL surface associated with the window.CdGet the number of effects a haptic device can store.CfInitialize a haptic device for simple rumble playback.BnRun a simple rumble effect on a haptic device.BjStop the simple rumble on a haptic device.CgStop the haptic effect on its associated haptic device.CeQuery whether the clipboard exists and contains a \xe2\x80\xa6CiDetermine whether two rectangles intersect with float \xe2\x80\xa6ChCheck if the given joystick is supported by the game \xe2\x80\xa6CfReturns if an IME Composite or Candidate window is \xe2\x80\xa6Bh&lt; An opened joystick has been removedBhQuery if a joystick has haptic features.BkGet the number of trackballs on a joystick.Aa&lt; error dialogClCreate a CAMetalLayer-backed NSView/UIView and attach it \xe2\x80\xa6Cd\\brief Mouse button event structure (event.button.*)Cd\\brief Mouse motion event structure (event.motion.*)Bg&lt; Planar mode: Y + U + V  (3 planes)Ca&lt; Planar mode: Y + U/V interleaved  (2 planes)Ca&lt; Planar mode: Y + V/U interleaved  (2 planes)Bg&lt; Packed mode: U0+Y0+V0+Y1 (1 plane)Bg&lt; Packed mode: Y0+U0+Y1+V0 (1 plane)Bg&lt; Planar mode: Y + V + U  (3 planes)Bg&lt; Packed mode: Y0+V0+Y1+U0 (1 plane)CnUse this function to pause and unpause audio playback on a \xe2\x80\xa6BkPremultiply the alpha on a block of pixels.CmDraw a series of connected lines on the current rendering \xe2\x80\xa6ClDraw a point on the current rendering target at subpixel \xe2\x80\xa6CeDraw multiple points on the current rendering target.CkDraw some number of rectangles on the current rendering \xe2\x80\xa6CkFill some number of rectangles on the current rendering \xe2\x80\xa6CmRead pixels from the current rendering target to an array \xe2\x80\xa6l&lt; AC Backl&lt; AC Homel&lt; AC StopBd&lt; Used for rejecting phone calls.CcReport the alignment this system needs for SIMD \xe2\x80\xa6Ba&lt; Slashed circle or crossbonesAk&lt; nearest pixel samplingBbPut UTF-8 text into the clipboard.BcSet a range of colors in a palette.CcSet the rectangle used to type Unicode text inputs.CjProvide a callback that decides if a window region has \xe2\x80\xa6AmSet the opacity for a window.Ck\\brief Keyboard text editing event structure (event.edit.*)Ce\\brief Touch finger event structure (event.tfinger.*)CkUpdate a rectangle within a planar YV12 or IYUV texture \xe2\x80\xa6o&lt; Never usedAh&lt; window is maximizedAh&lt; window is minimizedAj&lt; window can be resizedCnWait until the specified timeout (in milliseconds) for the \xe2\x80\xa6CdRead an Input report from a HID device with timeout.CjThe |Sec-WebSocket-Accept| header field is used in the \xe2\x80\xa6DjType returned from <code>serialize_tuple_struct</code> for serializing \xe2\x80\xa6CnReturned from <code>Serializer::serialize_tuple_struct</code>.1CmAn iterator over the non-ASCII-whitespace substrings of a \xe2\x80\xa600ChParallel iterator over substrings separated by ASCII \xe2\x80\xa611AkControls a streaming sound.BfError when initializing a thread pool.Df\xf0\x9f\x95\x98 A time split from hours to seconds, normalized <em>(128b </em>\xe2\x80\xa60Dc\xf0\x9f\x95\x98 A time split from years to days, normalized <em>(128b </em>\xe2\x80\xa60Df\xf0\x9f\x95\x98 A time split from years to seconds, normalized <em>(128b </em>\xe2\x80\xa60Cc422 Unprocessable Entity [RFC9110, Section 15.5.21]BfDetails what feature is not supported.BcConfigures a volume control effect.AkSee <code>_mm_setcsr</code>00Bmuse MXCSR.RC and suppress exceptions; see \xe2\x80\xa600Ajdo not suppress exceptions00EeStructure representing a <code>datetime.time</code> without a <code>tzinfo</code> \xe2\x80\xa6DbThe strings defined by <code>a</code> and <code>b</code> are equal00ChPerforms one round of an AES decryption flow on each \xe2\x80\xa600ChPerforms one round of an AES encryption flow on each \xe2\x80\xa600CnConvert scalar BF16 (16-bit) floating point element stored \xe2\x80\xa600ClCompare packed signed 8-bit integers in a and b based on \xe2\x80\xa600CnCompare packed unsigned 8-bit integers in a and b based on \xe2\x80\xa600CgConvert packed 16-bit integers in a to packed 8-bit \xe2\x80\xa600CgConvert packed 32-bit integers in a to packed 8-bit \xe2\x80\xa600CgConvert packed 64-bit integers in a to packed 8-bit \xe2\x80\xa600BnSign-extend 8-bit integers to 16-bit integers.00BnSign-extend 8-bit integers to 32-bit integers.00BnSign-extend 8-bit integers to 64-bit integers.00DcZero-extend unsigned 8-bit integers in <code>a</code> to 16-bit \xe2\x80\xa600DiZero-extend the lower eight unsigned 8-bit integers in <code>a</code> \xe2\x80\xa600DkZero-extend the lower four unsigned 8-bit integers in <code>a</code> to \xe2\x80\xa600ClConvert packed BF16 (16-bit) floating-point even-indexed \xe2\x80\xa600CkConvert packed BF16 (16-bit) floating-point odd-indexed \xe2\x80\xa600DhReturns the first element of the input vector of <code>[8 x i32]</code>.00CgMultiply groups of 4 adjacent pairs of signed 8-bit \xe2\x80\xa600000CiMultiply groups of 4 adjacent pairs of unsigned 8-bit \xe2\x80\xa600000ChMultiply groups of 2 adjacent pairs of signed 16-bit \xe2\x80\xa600000CjMultiply groups of 2 adjacent pairs of unsigned 16-bit \xe2\x80\xa600000EdExtracts a 16-bit integer from <code>a</code>, selected with <code>INDEX</code>. \xe2\x80\xa600E`Extracts a 32-bit integer from <code>a</code>, selected with <code>INDEX</code>.00E`Extracts a 64-bit integer from <code>a</code>, selected with <code>INDEX</code>.00CmPerforms a multiplication in GF(2^8) on the packed bytes. \xe2\x80\xa600CnStores 4 double-precision (64-bit) floating-point elements \xe2\x80\xa600CnStores 8 single-precision (32-bit) floating-point elements \xe2\x80\xa600111CnStores 4 single-precision (32-bit) floating-point elements \xe2\x80\xa600DiCopies <code>a</code> to result, then inserts 128 bits (composed of 2 \xe2\x80\xa600DiCopies <code>a</code> to result, then inserts 128 bits (composed of 4 \xe2\x80\xa600DiVertically multiplies each unsigned 8-bit integer from <code>a</code> \xe2\x80\xa600CnCompute the absolute value of packed signed 8-bit integers \xe2\x80\xa600CgAdd packed 8-bit integers in a and b, and store the \xe2\x80\xa600CjAverage packed unsigned 8-bit integers in a and b, and \xe2\x80\xa600CiBlend packed double-precision (64-bit) floating-point \xe2\x80\xa600CgBlend packed half-precision (16-bit) floating-point \xe2\x80\xa600CiBlend packed single-precision (32-bit) floating-point \xe2\x80\xa600CgMultiply packed complex numbers in a by the complex \xe2\x80\xa600CkCompute the complex conjugates of complex numbers in a, \xe2\x80\xa600CkConvert packed double-precision (64-bit) floating-point \xe2\x80\xa600000CiConvert packed half-precision (16-bit) floating-point \xe2\x80\xa600000CkConvert packed single-precision (32-bit) floating-point \xe2\x80\xa600ClMultiply packed double-precision (64-bit) floating-point \xe2\x80\xa600CjMultiply packed half-precision (16-bit) floating-point \xe2\x80\xa600ClMultiply packed single-precision (32-bit) floating-point \xe2\x80\xa600222111000CmMultiply packed complex numbers in a and b, and store the \xe2\x80\xa600ChLoad packed double-precision (64-bit) floating-point \xe2\x80\xa600ChLoad packed single-precision (32-bit) floating-point \xe2\x80\xa600CnCompare packed signed 8-bit integers in a and b, and store \xe2\x80\xa600CjCompare packed unsigned 8-bit integers in a and b, and \xe2\x80\xa600111000CnMove packed 8-bit integers from a into dst using writemask \xe2\x80\xa600CmCompute the bitwise OR of packed 32-bit integers in a and \xe2\x80\xa600CmCompute the bitwise OR of packed 64-bit integers in a and \xe2\x80\xa600CiCalculate the max, min, absolute max, or absolute min \xe2\x80\xa600000C`Compute the approximate reciprocal of packed \xe2\x80\xa600000ClCompute the approximate reciprocal square root of packed \xe2\x80\xa600CiStore packed double-precision (64-bit) floating-point \xe2\x80\xa600CiStore packed single-precision (32-bit) floating-point \xe2\x80\xa600CiSubtract packed 8-bit integers in b from packed 8-bit \xe2\x80\xa600<<<;;;===CfCompute the square root of packed double-precision \xe2\x80\xa600CmCompute the square root of packed half-precision (16-bit) \xe2\x80\xa600CfCompute the square root of packed single-precision \xe2\x80\xa600ClCreates mask from the most significant bit of each 8-bit \xe2\x80\xa600CeSet each bit of mask register k based on the most \xe2\x80\xa600000000CnShuffles double-precision (64-bit) floating-point elements \xe2\x80\xa600CnShuffles single-precision (32-bit) floating-point elements \xe2\x80\xa600ClReduce the packed half-precision (16-bit) floating-point \xe2\x80\xa600000000000CiRound packed double-precision (64-bit) floating-point \xe2\x80\xa600CgRound packed half-precision (16-bit) floating-point \xe2\x80\xa600CiRound packed single-precision (32-bit) floating-point \xe2\x80\xa600CkReturns vector of type __m256i with all elements set to \xe2\x80\xa600DiShuffles 32-bit integers in 128-bit lanes of <code>a</code> using the \xe2\x80\xa600CmShuffle 128-bits (composed of 4 single-precision (32-bit) \xe2\x80\xa600CmShuffle 128-bits (composed of 2 double-precision (64-bit) \xe2\x80\xa600CmShuffle 128-bits (composed of 4 32-bit integers) selected \xe2\x80\xa600CmShuffle 128-bits (composed of 2 64-bit integers) selected \xe2\x80\xa600CmThis intrinsic performs four rounds of SM4 key expansion. \xe2\x80\xa600CnStores the high and low 128-bit halves (each composed of 2 \xe2\x80\xa600ClStores the high and low 128-bit halves (each composed of \xe2\x80\xa600CnComputes the bitwise AND of 256 bits (representing integer \xe2\x80\xa600ClUnpacks and interleave 8-bit integers from the high half \xe2\x80\xa600CnUnpacks and interleave 8-bit integers from the low half of \xe2\x80\xa600ChPerforms one round of an AES decryption flow on each \xe2\x80\xa600ChPerforms one round of an AES encryption flow on each \xe2\x80\xa600ClCompare packed signed 8-bit integers in a and b based on \xe2\x80\xa600CnCompare packed unsigned 8-bit integers in a and b based on \xe2\x80\xa600CkCompare packed double-precision (64-bit) floating-point \xe2\x80\xa600CkCompare packed single-precision (32-bit) floating-point \xe2\x80\xa600111000111000CgConvert packed 16-bit integers in a to packed 8-bit \xe2\x80\xa600CgConvert packed 32-bit integers in a to packed 8-bit \xe2\x80\xa600ClPerforms element-by-element conversion of the lower half \xe2\x80\xa600CgConvert packed 64-bit integers in a to packed 8-bit \xe2\x80\xa600CkSign extend packed 8-bit integers in a to packed 16-bit \xe2\x80\xa600CkSign extend packed 8-bit integers in a to packed 32-bit \xe2\x80\xa600CmSign extend packed 8-bit integers in the low 8 bytes of a \xe2\x80\xa600444CmZero extend packed unsigned 8-bit integers in a to packed \xe2\x80\xa600000CkZero extend packed unsigned 8-bit integers in the low 8 \xe2\x80\xa600BjCopy the lower 32-bit integer in a to dst.00CiMultiply groups of 4 adjacent pairs of unsigned 8-bit \xe2\x80\xa600ChMultiply groups of 2 adjacent pairs of signed 16-bit \xe2\x80\xa600CmPerforms a multiplication in GF(2^8) on the packed bytes. \xe2\x80\xa600CmScatter double-precision (64-bit) floating-point elements \xe2\x80\xa600CmScatter single-precision (32-bit) floating-point elements \xe2\x80\xa600111000CjVertically multiply each unsigned 8-bit integer from a \xe2\x80\xa600CnCompute the absolute value of packed signed 8-bit integers \xe2\x80\xa600CgAdd packed 8-bit integers in a and b, and store the \xe2\x80\xa600CjAverage packed unsigned 8-bit integers in a and b, and \xe2\x80\xa600CiBlend packed double-precision (64-bit) floating-point \xe2\x80\xa600CgBlend packed half-precision (16-bit) floating-point \xe2\x80\xa600CiBlend packed single-precision (32-bit) floating-point \xe2\x80\xa600CgMultiply packed complex numbers in a by the complex \xe2\x80\xa600CkCompute the complex conjugates of complex numbers in a, \xe2\x80\xa600CkConvert packed double-precision (64-bit) floating-point \xe2\x80\xa600000CiConvert packed half-precision (16-bit) floating-point \xe2\x80\xa600000CkConvert packed single-precision (32-bit) floating-point \xe2\x80\xa600000ClMultiply packed double-precision (64-bit) floating-point \xe2\x80\xa600CjMultiply packed half-precision (16-bit) floating-point \xe2\x80\xa600ClMultiply packed single-precision (32-bit) floating-point \xe2\x80\xa600222111000CmMultiply packed complex numbers in a and b, and store the \xe2\x80\xa600ChLoad packed double-precision (64-bit) floating-point \xe2\x80\xa600ChLoad packed single-precision (32-bit) floating-point \xe2\x80\xa600CnCompare packed signed 8-bit integers in a and b, and store \xe2\x80\xa600CjCompare packed unsigned 8-bit integers in a and b, and \xe2\x80\xa600111000CnMove packed 8-bit integers from a into dst using writemask \xe2\x80\xa600CmCompute the bitwise OR of packed 32-bit integers in a and \xe2\x80\xa600CmCompute the bitwise OR of packed 64-bit integers in a and \xe2\x80\xa600CiCalculate the max, min, absolute max, or absolute min \xe2\x80\xa600000C`Compute the approximate reciprocal of packed \xe2\x80\xa600000ClCompute the approximate reciprocal square root of packed \xe2\x80\xa600CiStore packed double-precision (64-bit) floating-point \xe2\x80\xa600CiStore packed single-precision (32-bit) floating-point \xe2\x80\xa600CiSubtract packed 8-bit integers in b from packed 8-bit \xe2\x80\xa600<<<;;;===CfCompute the square root of packed double-precision \xe2\x80\xa600CmCompute the square root of packed half-precision (16-bit) \xe2\x80\xa600CfCompute the square root of packed single-precision \xe2\x80\xa600CeSet each bit of mask register k based on the most \xe2\x80\xa600000000CmMultiply the packed complex numbers in a and b, and store \xe2\x80\xa600CmShuffle double-precision (64-bit) floating-point elements \xe2\x80\xa600CmShuffle single-precision (32-bit) floating-point elements \xe2\x80\xa600CnReduce the packed double-precision (64-bit) floating-point \xe2\x80\xa600ClReduce the packed half-precision (16-bit) floating-point \xe2\x80\xa600CnReduce the packed single-precision (32-bit) floating-point \xe2\x80\xa600222111000222111000222111000CiRound packed double-precision (64-bit) floating-point \xe2\x80\xa600CgRound packed half-precision (16-bit) floating-point \xe2\x80\xa600CiRound packed single-precision (32-bit) floating-point \xe2\x80\xa600DgReturn vector of type <code>__m512i</code> with all elements set to \xe2\x80\xa600DhReturns vector of type <code>__m512i</code> with all elements set to \xe2\x80\xa600888CmShuffle 128-bits (composed of 4 single-precision (32-bit) \xe2\x80\xa600CmShuffle 128-bits (composed of 2 double-precision (64-bit) \xe2\x80\xa600CmShuffle 128-bits (composed of 4 32-bit integers) selected \xe2\x80\xa600CmShuffle 128-bits (composed of 2 64-bit integers) selected \xe2\x80\xa600CfCompute the square root of packed double-precision \xe2\x80\xa600CmCompute the square root of packed half-precision (16-bit) \xe2\x80\xa600CfCompute the square root of packed single-precision \xe2\x80\xa600CnUnpack and interleave 8-bit integers from the high half of \xe2\x80\xa600CmUnpack and interleave 8-bit integers from the low half of \xe2\x80\xa600CmPerforms the last round of an AES decryption flow on data \xe2\x80\xa600CmPerforms the last round of an AES encryption flow on data \xe2\x80\xa600DgBroadcasts the low packed 32-bit integer from <code>a</code> to all \xe2\x80\xa600DgBroadcasts the low packed 64-bit integer from <code>a</code> to all \xe2\x80\xa600CjBroadcasts the low packed 16-bit integer from a to all \xe2\x80\xa600CfPerforms a carry-less multiplication of two 64-bit \xe2\x80\xa600ChCompare packed signed 16-bit integers in a and b for \xe2\x80\xa600CkCompare packed 32-bit integers in a and b for equality, \xe2\x80\xa600CkCompare packed 64-bit integers in a and b for equality, \xe2\x80\xa600CjCompare packed unsigned 16-bit integers in a and b for \xe2\x80\xa600CjCompare packed unsigned 32-bit integers in a and b for \xe2\x80\xa600CjCompare packed unsigned 64-bit integers in a and b for \xe2\x80\xa600555ChCompare packed signed 32-bit integers in a and b for \xe2\x80\xa600ChCompare packed signed 64-bit integers in a and b for \xe2\x80\xa600444333222777111000444333222777111000444333222777111000444333222CgCompare packed signed 8-bit integers in a and b for \xe2\x80\xa600CiCompare packed unsigned 8-bit integers in a and b for \xe2\x80\xa600CnConvert the lower double-precision (64-bit) floating-point \xe2\x80\xa600000CmConvert the signed 32-bit integer b to a single-precision \xe2\x80\xa600CmConvert the signed 64-bit integer b to a double-precision \xe2\x80\xa600CmConvert the signed 64-bit integer b to a single-precision \xe2\x80\xa600CnConvert the lower single-precision (32-bit) floating-point \xe2\x80\xa600000444444444444ClConvert the lower half-precision (16-bit) floating-point \xe2\x80\xa600000000000111111111111CjConvert packed unsigned 32-bit integers in a to packed \xe2\x80\xa600CjConvert packed unsigned 64-bit integers in a to packed \xe2\x80\xa600000CiMultiply groups of 4 adjacent pairs of unsigned 8-bit \xe2\x80\xa600ChMultiply groups of 2 adjacent pairs of signed 16-bit \xe2\x80\xa600ChWrap a 128-bit AES key into a 384-bit key handle and \xe2\x80\xa600ChWrap a 256-bit AES key into a 512-bit key handle and \xe2\x80\xa600CiMultiply the lower complex number in a by the complex \xe2\x80\xa600CiNormalize the mantissas of the lower double-precision \xe2\x80\xa600CgNormalize the mantissas of the lower half-precision \xe2\x80\xa600CiNormalize the mantissas of the lower single-precision \xe2\x80\xa600CnStores 4 32-bit integer elements from a to memory starting \xe2\x80\xa600CnStores 2 64-bit integer elements from a to memory starting \xe2\x80\xa600CnStores 2 32-bit integer elements from a to memory starting \xe2\x80\xa600111CgMultiply packed complex numbers in a by the complex \xe2\x80\xa600777CiConcatenate pairs of 16-byte blocks in a and b into a \xe2\x80\xa600CkBlend packed 16-bit integers from a and b using control \xe2\x80\xa600CkBlend packed 32-bit integers from a and b using control \xe2\x80\xa600CkBlend packed 64-bit integers from a and b using control \xe2\x80\xa600CkCompare packed double-precision (64-bit) floating-point \xe2\x80\xa600CiCompare packed half-precision (16-bit) floating-point \xe2\x80\xa600CkCompare packed single-precision (32-bit) floating-point \xe2\x80\xa600CnCompare the lower double-precision (64-bit) floating-point \xe2\x80\xa600ClCompare the lower half-precision (16-bit) floating-point \xe2\x80\xa600CnCompare the lower single-precision (32-bit) floating-point \xe2\x80\xa600CkContiguously store the active double-precision (64-bit) \xe2\x80\xa600CkContiguously store the active single-precision (32-bit) \xe2\x80\xa600ChConvert packed signed 16-bit integers in a to packed \xe2\x80\xa600ChConvert packed signed 32-bit integers in a to packed \xe2\x80\xa600000000ChConvert packed signed 64-bit integers in a to packed \xe2\x80\xa600000000CjConvert packed unsigned 16-bit integers in a to packed \xe2\x80\xa600CjConvert packed unsigned 32-bit integers in a to packed \xe2\x80\xa600000CjConvert packed unsigned 64-bit integers in a to packed \xe2\x80\xa600000000ClConverts packed single-precision (32-bit) floating-point \xe2\x80\xa600CkConvert packed double-precision (64-bit) floating-point \xe2\x80\xa600000000000CiConvert packed half-precision (16-bit) floating-point \xe2\x80\xa600000000000000000CkConvert packed single-precision (32-bit) floating-point \xe2\x80\xa600000000000ClLoad contiguous active 8-bit integers from a (those with \xe2\x80\xa600CjFix up packed double-precision (64-bit) floating-point \xe2\x80\xa600CjFix up packed single-precision (32-bit) floating-point \xe2\x80\xa600CmFix up the lower double-precision (64-bit) floating-point \xe2\x80\xa600CmFix up the lower single-precision (32-bit) floating-point \xe2\x80\xa600ClMultiply packed double-precision (64-bit) floating-point \xe2\x80\xa600CjMultiply packed half-precision (16-bit) floating-point \xe2\x80\xa600ClMultiply packed single-precision (32-bit) floating-point \xe2\x80\xa600222111000CjLoad packed 16-bit integers from memory into dst using \xe2\x80\xa600CjLoad packed 32-bit integers from memory into dst using \xe2\x80\xa600CjLoad packed 64-bit integers from memory into dst using \xe2\x80\xa600CiCounts the number of leading zero bits in each packed \xe2\x80\xa600000CcDuplicate odd-indexed single-precision (32-bit) \xe2\x80\xa600CdDuplicate even-indexed single-precision (32-bit) \xe2\x80\xa600CjMultiply the packed signed 16-bit integers in a and b, \xe2\x80\xa600ClMultiply the packed unsigned 16-bit integers in a and b, \xe2\x80\xa600CmMultiply the packed 16-bit integers in a and b, producing \xe2\x80\xa600CmMultiply the packed 32-bit integers in a and b, producing \xe2\x80\xa600EcMultiply packed 64-bit integers in <code>a</code> and <code>b</code>, producing \xe2\x80\xa600CiConvert packed signed 16-bit integers from a and b to \xe2\x80\xa600CiConvert packed signed 32-bit integers from a and b to \xe2\x80\xa600CnFor each packed 8-bit integer maps the value to the number \xe2\x80\xa600CnConcatenate packed 16-bit integers in a and b producing an \xe2\x80\xa600CnConcatenate packed 32-bit integers in a and b producing an \xe2\x80\xa600CnConcatenate packed 64-bit integers in a and b producing an \xe2\x80\xa600222111000CnConcatenate packed 16-bit integers in b and a producing an \xe2\x80\xa600CnConcatenate packed 32-bit integers in b and a producing an \xe2\x80\xa600CnConcatenate packed 64-bit integers in b and a producing an \xe2\x80\xa600222111000CiStore packed 32-bit integers from a into memory using \xe2\x80\xa600CiStore packed 64-bit integers from a into memory using \xe2\x80\xa600ChStore packed 8-bit integers from a into memory using \xe2\x80\xa600CcUnpack and interleave double-precision (64-bit) \xe2\x80\xa600CcUnpack and interleave single-precision (32-bit) \xe2\x80\xa600111000CfAdd packed signed 16-bit integers in a and b using \xe2\x80\xa600ChAdd packed unsigned 16-bit integers in a and b using \xe2\x80\xa600CeCompute the sum of absolute differences (SADs) of \xe2\x80\xa600CgMultiply packed complex numbers in a by the complex \xe2\x80\xa600CiMultiply the lower complex number in a by the complex \xe2\x80\xa600CfNormalize the mantissas of packed double-precision \xe2\x80\xa600CmNormalize the mantissas of packed half-precision (16-bit) \xe2\x80\xa600CfNormalize the mantissas of packed single-precision \xe2\x80\xa600CiNormalize the mantissas of the lower double-precision \xe2\x80\xa600CgNormalize the mantissas of the lower half-precision \xe2\x80\xa600CiNormalize the mantissas of the lower single-precision \xe2\x80\xa600CjLoad packed 32-bit integers from memory into dst using \xe2\x80\xa600CjLoad packed 64-bit integers from memory into dst using \xe2\x80\xa600CiLoad packed 8-bit integers from memory into dst using \xe2\x80\xa600CfMultiply packed signed 16-bit integers in a and b, \xe2\x80\xa600CdDuplicate even-indexed double-precision (64-bit) \xe2\x80\xa600CmShuffle double-precision (64-bit) floating-point elements \xe2\x80\xa600CmShuffle single-precision (32-bit) floating-point elements \xe2\x80\xa600CmRotate the bits in each packed 32-bit integer in a to the \xe2\x80\xa600CmRotate the bits in each packed 64-bit integer in a to the \xe2\x80\xa600111000ClCompute the approximate reciprocal square root of packed \xe2\x80\xa600000CiCompute the approximate reciprocal square root of the \xe2\x80\xa600000CiBroadcast the low packed 16-bit integer from a to all \xe2\x80\xa600CkBroadcast 32-bit integer a to all elements of dst using \xe2\x80\xa600CkBroadcast 64-bit integer a to all elements of dst using \xe2\x80\xa600888777ChShift packed 16-bit integers in a left by imm8 while \xe2\x80\xa600ChShift packed 32-bit integers in a left by imm8 while \xe2\x80\xa600ChShift packed 64-bit integers in a left by imm8 while \xe2\x80\xa600ChShift packed 16-bit integers in a left by the amount \xe2\x80\xa600ChShift packed 32-bit integers in a left by the amount \xe2\x80\xa600ChShift packed 64-bit integers in a left by the amount \xe2\x80\xa600CiShift packed 16-bit integers in a right by imm8 while \xe2\x80\xa600CiShift packed 32-bit integers in a right by imm8 while \xe2\x80\xa600CiShift packed 64-bit integers in a right by imm8 while \xe2\x80\xa600CiShift packed 16-bit integers in a right by the amount \xe2\x80\xa600CiShift packed 32-bit integers in a right by the amount \xe2\x80\xa600CiShift packed 64-bit integers in a right by the amount \xe2\x80\xa600555444333222111000CkSubtract packed signed 16-bit integers in b from packed \xe2\x80\xa600CmSubtract packed unsigned 16-bit integers in b from packed \xe2\x80\xa600CfShuffle 8-bit integers in a across lanes using the \xe2\x80\xa600CgReduce the packed 16-bit integers in a by addition. \xe2\x80\xa600CjReduce the packed 16-bit integers in a by bitwise AND. \xe2\x80\xa600CnReduce the packed 16-bit integers in a by maximum. Returns \xe2\x80\xa600CfReduce the packed unsigned 16-bit integers in a by \xe2\x80\xa600CnReduce the packed 16-bit integers in a by minimum. Returns \xe2\x80\xa600111CmReduce the packed 16-bit integers in a by multiplication. \xe2\x80\xa600CjPerforms an intermediate calculation for the next four \xe2\x80\xa600CkPerforms the final calculation for the next four SHA256 \xe2\x80\xa600CkCompute the bitwise NAND of packed 16-bit integers in a \xe2\x80\xa600CkCompute the bitwise NAND of packed 32-bit integers in a \xe2\x80\xa600CkCompute the bitwise NAND of packed 64-bit integers in a \xe2\x80\xa600BoReturns the total accumulated CPU usage (in \xe2\x80\xa6EcAdd each lane horizontally, pack the outputs as <code>a</code> then <code>b</code>.0BdAdd adjacent <code>f64</code> lanes.0BbGets the buffer memory as a slice.DjReturns an Option containing the <code>KeyEvent</code> if the event is \xe2\x80\xa6DmReturns a tuple with <code>Some(&amp;value)</code> for the active variant \xe2\x80\xa6CcAsserts the approximate equality of a series of \xe2\x80\xa60DhAsserts that the memory alignment of the <code>Candidate</code> type \xe2\x80\xa60CjSets how the emitter\xe2\x80\x99s volume will change with distance.BnAllocate bytes in the buffer for external use.Ce@return the opaque parameter set by av_buffer_create.CmAllocate and initialize a buffer pool with a more complex \xe2\x80\xa6AgReturn the context nameCmParse the key/value pairs list and add the parsed entries \xe2\x80\xa6ClGet a DV profile for the provided stream parameters. The \xe2\x80\xa6CkFeed data from an AVFifoBuffer to a user-supplied callback.0CkFind AVInputFormat based on the short name of the input \xe2\x80\xa6BdCheck if the frame data is writable.CnFinalize the device context before use. This function must \xe2\x80\xa6ChAllocate an AVHWFramesContext tied to a given device \xe2\x80\xa6CnCheck if the given dimension of an image is valid, meaning \xe2\x80\xa6CfSetup the data pointers and linesizes based on the \xe2\x80\xa6ChExtract a key-value pair from the beginning of a string.CjSet the values of all AVOption fields to their default \xe2\x80\xa6CbCopy only \xe2\x80\x9cproperties\xe2\x80\x9d fields from src to dst.CmConvert valid timing fields (timestamps / durations) in a \xe2\x80\xa6CfIterate over all pixel format descriptors known to \xe2\x80\xa6CbFree the parser and everything associated with it.CnAllocate and initialize the Vorbis parser using headers in \xe2\x80\xa6CmWrite the values from src to the pixel format component c \xe2\x80\xa6CcFind a registered decoder with a matching codec ID.CcFind a registered encoder with a matching codec ID.ClFree the codec context and everything associated with it \xe2\x80\xa6BiA function pointer passed to the @ref \xe2\x80\xa6C`Get a filter definition matching the given name.AhAllocate a filter graph.BmAdd a graph described by a string to a graph.CmAllocate a single AVFilterInOut entry. Must be freed with \xe2\x80\xa6CnClose an opened input AVFormatContext. Free it and all its \xe2\x80\xa6CnAllocate the stream private data and initialize the codec, \xe2\x80\xa6BnTest if the given container can store a codec.BnReturn the libavutil build-time configuration.DdBinary searches this <code>VecDeque</code> with a key extraction \xe2\x80\xa6EdCounts the number of 1s in <code>bits</code> from the <code>[start..=end]</code> \xe2\x80\xa60B`Length of the capacity bit mask.0DoCasts the <code>Py&lt;T&gt;</code> to a concrete Python object type without \xe2\x80\xa6FaAdds a <code>Duration</code> to this <code>TimeDelta</code>. Returns <code>None</code> if the \xe2\x80\xa6CnCasts <code>self</code> to <code>i128</code> with range check.0DbCasts from <code>i16</code> to <code>i128</code> with range check.DbCasts from <code>u64</code> to <code>i128</code> with range check.DdCasts from <code>isize</code> to <code>i128</code> with range check.DbCasts from <code>u16</code> to <code>i128</code> with range check.DbCasts from <code>i32</code> to <code>i128</code> with range check.DbCasts from <code>u32</code> to <code>i128</code> with range check.DbCasts from <code>i64</code> to <code>i128</code> with range check.DaCasts from <code>i8</code> to <code>i128</code> with range check.DdCasts from <code>usize</code> to <code>i128</code> with range check.DaCasts from <code>u8</code> to <code>i128</code> with range check.DcCasts from <code>i128</code> to <code>i128</code> with range check.DcCasts from <code>u128</code> to <code>i128</code> with range check.CnCasts <code>self</code> to <code>u128</code> with range check.0DdCasts from <code>isize</code> to <code>u128</code> with range check.DbCasts from <code>u64</code> to <code>u128</code> with range check.DbCasts from <code>i32</code> to <code>u128</code> with range check.DdCasts from <code>usize</code> to <code>u128</code> with range check.DbCasts from <code>i16</code> to <code>u128</code> with range check.DaCasts from <code>i8</code> to <code>u128</code> with range check.DaCasts from <code>u8</code> to <code>u128</code> with range check.DbCasts from <code>u32</code> to <code>u128</code> with range check.DcCasts from <code>i128</code> to <code>u128</code> with range check.DcCasts from <code>u128</code> to <code>u128</code> with range check.DbCasts from <code>u16</code> to <code>u128</code> with range check.DbCasts from <code>i64</code> to <code>u128</code> with range check.FdSubtracts a <code>Duration</code> from this <code>TimeDelta</code>. Returns <code>None</code> if \xe2\x80\xa6CdGet the closest match to the requested display mode.CkLanewise <code>a == b</code> with lanes as <code>i8</code>.0ChCompare <code>i8</code> lanes for equality, mask output.0DaLanewise <code>a &amp;gt; b</code> with lanes as <code>i8</code>.CmLanewise <code>a &gt; b</code> with lanes as <code>i8</code>.DiCompare <code>i8</code> lanes for <code>a &amp;gt; b</code>, mask output.DeCompare <code>i8</code> lanes for <code>a &gt; b</code>, mask output.DaLanewise <code>a &amp;lt; b</code> with lanes as <code>i8</code>.CmLanewise <code>a &lt; b</code> with lanes as <code>i8</code>.CcLow lane <code>a != b</code>, other lane unchanged.0CmLow lane <code>!(a &amp;gt;= b)</code>, other lane unchanged.CiLow lane <code>!(a &gt;= b)</code>, other lane unchanged.ClLow lane <code>!(a &amp;gt; b)</code>, other lane unchanged.ChLow lane <code>!(a &gt; b)</code>, other lane unchanged.CmLow lane <code>!(a &amp;lt;= b)</code>, other lane unchanged.CiLow lane <code>!(a &lt;= b)</code>, other lane unchanged.ClLow lane <code>!(a &amp;lt; b)</code>, other lane unchanged.ChLow lane <code>!(a &lt; b)</code>, other lane unchanged.BnLanewise <code>a.is_nan() | b.is_nan()</code>.0Bapicture number in bitstream orderCaReturns a vector containing the color components.00DdReturns <code>true</code> if the alpha component is the absolute \xe2\x80\xa600DhCopies all audio data from the source <code>AudioBufferRef</code> in \xe2\x80\xa60BlReturns a copy of the next new random state.BoGet information about the current display mode.CnIf called from a Rayon worker thread, returns the index of \xe2\x80\xa6CmIf called from a Rayon worker thread in this thread pool, \xe2\x80\xa6CgGet the name of the currently initialized video driver.CkReturns whether all values represented by this type are \xe2\x80\xa6CaReturns whether all values are <code>Copy</code>.10AlL1 data cache associativity.AlL1 data cache lines per tag.ChAsserts that an expression matches the provided pattern.00ChReturns the required output buffer size for decoding \xe2\x80\xa6000000000ChGet the default channel layout for a given number of \xe2\x80\xa6DiHint that the <code>Deserialize</code> type is expecting a byte array \xe2\x80\xa60CcGet information about the desktop\xe2\x80\x99s display mode.AkDisables focus change mode.ChPrevent the screen from being blanked by a screen saver.CnReturns the distribution ids of operating systems that are \xe2\x80\xa6ClThis configures dot-matches-new-line mode for the entire \xe2\x80\xa6ClDrops the top of stack element, replacing the underlying \xe2\x80\xa6CiEnumerates over the pixels of the image. The iterator \xe2\x80\xa6CiChecks that two strings are an ASCII case-insensitive \xe2\x80\xa6C`Checks that two (string) slices are an ASCII \xe2\x80\xa6CkChecks that two values are an ASCII case-insensitive match.CfExtends the back of the destaque from an iterator, \xe2\x80\xa6CkEnumeration of Monitor-Mwait extensions (beyond EAX and \xe2\x80\xa6BaReturns the unique prime factors.0D`Finds the index of the first 1 in <code>self</code> from the \xe2\x80\xa600000000000CoFinds the index of the last 0 in <code>self</code> from the \xe2\x80\xa600000000000DkReturns a string from an array of <code>bytes</code> that must be valid \xe2\x80\xa60CiCreates a C string wrapper from a byte slice with any \xe2\x80\xa6CnCreates a new surface from an existing buffer, using pixel \xe2\x80\xa6DhCreate an <code>UnsupportedError</code> for an image with details on \xe2\x80\xa6Ebconverts <code>i16</code> to <code>i8</code>, saturating values that are too largeEgconverts <code>i16</code> to <code>i8</code>, truncating the upper bits if they are \xe2\x80\xa6DoReturns a <code>Month</code> from its index, from <code>January=0</code> to \xe2\x80\xa6Bg<em>const</em> method equivalent to \xe2\x80\xa60DiExtracts <code>Self</code> from the bound smart pointer <code>obj</code>.CiGets the fully qualified name of the <code>PyType</code>.00CnLow lane fused <code>(a * b) + c</code>, other lanes unchanged0CoLow lane fused <code>(a * b) - c</code>, other lanes unchanged.0DgReturns the number of IDs generated so far with <code>SeqCst</code> \xe2\x80\xa6CdRetrieve more elaborate information about caches \xe2\x80\xa6CkCalculates the 2D coordinates from the given 1D array index0CaGets the lower lane as an <code>f64</code> value.0CeConverts the lower lane to an <code>i32</code> value.000CeConverts the lower lane to an <code>i64</code> value.000C`Retrieve serial number of processor (LEAF=0x03).CmThe full history of uris, including the request and final \xe2\x80\xa6CeSet the swap interval for the current OpenGL context.CeReturns whether library has been initialized already.DdReturns <code>true</code> if there is still budget left on the task.CnComplex Cache Indexing (Bit 2) False: Direct mapped cache. \xe2\x80\xa6CmThe processor supports performance-energy bias preference \xe2\x80\xa6CmHWP Capabilities. Highest Performance change is supported \xe2\x80\xa6ClHWP Notification. IA32_HWP_INTERRUPT MSR is supported if \xe2\x80\xa6CmIf true, Generated packets which contain IP payloads have \xe2\x80\xa6CaDisallowing IBS use by the host supported if set.CgSYSENTER and SYSEXIT Instructions. The SYSENTER and \xe2\x80\xa6DeComputes a hash of a byte slice using a <strong>custom seed</strong>.00CiHash and verify a password using Argon2i. The Argon2i \xe2\x80\xa6CeWhether to treat 4xx and 5xx HTTP status codes as \xe2\x80\xa60AkSupport for PT in IA32_XSS.BcL1 instruction cache associativity.BcL1 instruction cache lines per tag.AnIdeographic baseline position.0ClInserts a new value for the <code>i32</code> lane specified.0ClInserts a new value for the <code>i64</code> lane specified.0ClReturns the number of digits in the given <code>base</code>.00CfReturns the quotient, rounding ties towards from zero.00BdCalls `NumInt::int_ref_digital_root.00CkSimilar to int_digital_root, but operates on references \xe2\x80\xa600BdCalls `NumInt::int_ref_div_ties_odd.00CkSimilar to int_div_ties_odd, but operates on references \xe2\x80\xa600BdCalls `NumInt::int_ref_subfactorial.00CkSimilar to int_subfactorial, but operates on references \xe2\x80\xa600CnDetermines how often modulators and clocks will be updated \xe2\x80\xa6CnLinearly sample from an image using coordinates in [0, w-1]\xe2\x80\xa6CkConverts a civil datetime to a possibly ambiguous zoned \xe2\x80\xa6CeCasts <code>self</code> to <code>ArrayOfTables</code>DjConstructs a <code>GroupingMap</code> to be used later with one of the \xe2\x80\xa6000EdUnwraps this <code>Pin&lt;Ptr&gt;</code>, returning the underlying <code>Ptr</code>.ClConverts the type into an <code>Option&lt;Region&gt;</code>.CnGets whether the element specified in the format string is \xe2\x80\xa6CjChecks if any conversion is needed. i.e. if the buffer \xe2\x80\xa6DkChecks whether this object is an instance of exactly type <code>T</code>\xe2\x80\xa60AkFully associative structureAgFully Associative cacheD`Report whether the <code>Stream</code> is can ever be incomplete0CcSelf Initializing cache level (does not need SW \xe2\x80\xa6CkIf this function returns true, then it must be valid to \xe2\x80\xa60CmSort the k largest elements into a new iterator using the \xe2\x80\xa6000CnLargest monitor-line size in bytes (default is processor\xe2\x80\x99\xe2\x80\xa6Ceamount of previous MV predictors (2a+1 x 2a+1 square)ClThe maximum size limit in bytes that a tag may occupy in \xe2\x80\xa6DoReturns a mutable reference to the <strong>linear-light perceptual</strong> \xe2\x80\xa600000DbLoads the <code>f64</code> reference into all lanes of a register.0DkLoad an <code>f64</code> and splat it to all lanes of an <code>m256d</code>0CjLoads a font from the given SDL2 rwops object with the \xe2\x80\xa6DiLoad an <code>m128</code> and splat it to the lower and upper half of \xe2\x80\xa60BdLoads the reference into a register.000BfLoad data from memory into a register.000CkConverts this string to its ASCII lower case equivalent \xe2\x80\xa6CiConverts this type to its ASCII lower case equivalent \xe2\x80\xa6CkConverts this string to its ASCII upper case equivalent \xe2\x80\xa6CiConverts this type to its ASCII upper case equivalent \xe2\x80\xa6CmMaximum duration (in AV_TIME_BASE units) of the data read \xe2\x80\xa6CmSpecifies the limit for additional threads spawned by the \xe2\x80\xa6CdNumber of encrypted guests supported simultaneouslysBnMax number of idle pooled connections overall.0BlMaximum buffering duration for interleaving.DgComputes the non-negative modulo of <code>self + other</code> over |\xe2\x80\xa6DoComputes the modulo of <code>self + other</code> over <code>modulus</code>, \xe2\x80\xa6EbComputes <code>self / other</code> over |<code>modulus</code>|, unchecked version.E`Computes <code>self / other</code> over <code>modulus</code>, unchecked version.32DoComputes the modulo of <code>self - other</code> over <code>modulus</code>, \xe2\x80\xa6EaComputes the modulo of <code>self - other</code> over |<code>modulus</code>|, \xe2\x80\xa6BmFlips the bit at <code>index</code>, checked.00BcFlips the <code>FLAG1</code> field.0BcFlips the <code>FLAG2</code> field.0BcFlips the <code>MASK0</code> field.0CdCreate a new <code>Packet</code> from a boxed slice.EaGenerates a unique <code>ExampleIdSeqUsize</code> ID with <code>SeqCst</code> \xe2\x80\xa6ChCalled when deserializing a variant with a single value.BjSplit off a slice of tokens from the input0CnReturns the \xe2\x80\x9cnth\xe2\x80\x9d weekday from the beginning or end of \xe2\x80\xa600CkCalculates the distance between two pointers within the \xe2\x80\xa6CoDrops the top <code>n</code> stack elements, unchecked version.ClRotates the top three stack elements, counter-clockwise, \xe2\x80\xa6DlSaturating convert <code>i16</code> to <code>i8</code>, and pack the values.000DlSaturating convert <code>i16</code> to <code>u8</code>, and pack the values.000DhReturns a parallel iterator over <code>chunk_size</code> elements of \xe2\x80\xa60CmReturns a parallel iterator over the pixels of this image \xe2\x80\xa6CkSorts the slice in parallel with a comparator function, \xe2\x80\xa60CkReturns a parallel iterator over substrings terminated by a0ChReturns a parallel iterator over the sub-slices of a \xe2\x80\xa60DiParses a string representing a time zone into a <code>TimeZone</code> \xe2\x80\xa6DiApproximates the partial derivative of the 2D function <code>f</code> \xe2\x80\xa600000==CgCount the number of bits set within an <code>i32</code>0CgCount the number of bits set within an <code>i64</code>0CfThe rotation of the listener prior to the last update.Bf\xf0\x9d\x9f\x99 The prime number theorem formula.0ChUltra-fast stdout write. Panics if not all bytes are \xe2\x80\xa6BmUnchecked version of <code>push_front</code>.CmAppends an element if there is sufficient spare capacity, \xe2\x80\xa60CiThis event is sent when the userclicks the window\xe2\x80\x99s \xe2\x80\xa6000CjReturns a subslice up to the given <code>end</code> index.BeReads all available bytes from stdin.CbLanewise <code>1.0 / sqrt(a)</code> approximation.0BeReciprocal of <code>f32</code> lanes.0DfReturns the number of remaining IDs with <code>SeqCst</code> ordering.CkIf the right value is not present, replace it the value \xe2\x80\xa6DhRotates the mask such that the first <code>OFFSET</code> elements of \xe2\x80\xa6DjRotates the vector such that the first <code>OFFSET</code> elements of \xe2\x80\xa6DhReturns the nearest integer to an <code>f128</code>. Rounds half-way \xe2\x80\xa600ClIf a seek index needs to be built, this value determines \xe2\x80\xa60EcReturns either <code>true_val</code> or <code>false_val</code> depending on the \xe2\x80\xa6DoReturns either <code>true_val</code> or <code>false_val</code> depending on \xe2\x80\xa610110Dk<strong>Sets</strong> the attribute: the minimum number of bits for the \xe2\x80\xa60CkRegisters a custom allocation error hook, replacing any \xe2\x80\xa6CaSet the allocation limit in bytes for this arena.CgWhen channel playback is halted, then the specified \xe2\x80\xa6Dh<strong>Sets</strong> the attribute: disables OpenGL error checking; \xe2\x80\xa6CkSets the position of the sound emitter in 3 dimensional \xe2\x80\xa6DgSets the value of the <code>IP_MULTICAST_TTL</code> option for this \xe2\x80\xa6CiThis function is only used on Linux targets, when the \xe2\x80\xa6CmSets how much time it takes for the volume attenuation to \xe2\x80\xa6DiShifts the mask elements to the right by <code>OFFSET</code>, filling \xe2\x80\xa6DkShifts the vector elements to the right by <code>OFFSET</code>, filling \xe2\x80\xa6EnApplies the sign of <code>i16</code> values in <code>b</code> to the values in <code>a</code>.0DbLanewise <code>a * signum(b)</code> with lanes as <code>i16</code>0EnApplies the sign of <code>i32</code> values in <code>b</code> to the values in <code>a</code>.0DbLanewise <code>a * signum(b)</code> with lanes as <code>i32</code>0ClRounds each element to the closest integer-valued float. \xe2\x80\xa600CjCreates a non-null raw slice from a thin pointer and a \xe2\x80\xa6BnForms a raw slice from a pointer and a length.000CeSort all iterator elements into a new iterator in \xe2\x80\xa6000Blspatial complexity masking (0-&gt; disabled)BhStores the value to the reference given.000BgStore data from a register into memory.0DgSubtract each lane horizontally, pack the outputs as <code>a</code> \xe2\x80\xa60BiSubtract adjacent <code>f64</code> lanes.0D`&lt; array of supported framerates, or NULL if any, array is \xe2\x80\xa6BmUnchecked version of <code>swap2_back</code>.BmUnchecked version of <code>swap_front</code>.DjIndices in the range <code>[0, 15]</code> will select the i-th element \xe2\x80\xa60C`Activate resampling compensation (\xe2\x80\x9csoft\xe2\x80\x9d \xe2\x80\xa6CnCheck if context can be reused, otherwise reallocate a new \xe2\x80\xa6CkReturn a positive value if pix_fmt is a supported input \xe2\x80\xa6ClVisits the values representing the symmetric difference, \xe2\x80\xa6CnVisits the elements representing the symmetric difference, \xe2\x80\xa6DfThe bitwise exclusive-or (<code>^</code>) of the bits in two flags \xe2\x80\xa600000000000000000000DkReturns the symmetric difference between the flags in <code>self</code> \xe2\x80\xa600000003CkReturns an iterator over all non-overlapping matches of \xe2\x80\xa6ClReturns an iterator adaptor that consumes elements while \xe2\x80\xa6000CmReturns the time zone annotation in this <code>Pieces</code>.CmMax duration for sending the request, but not the request \xe2\x80\xa6BbReturns this weekday as an offset.0DeLike <code>alloc_slice_copy</code>, but does not panic in case of \xe2\x80\xa6CnImmutably borrows the wrapped value, returning an error if \xe2\x80\xa6CmConstructs a new boxed slice with uninitialized contents. \xe2\x80\xa60CmConstructs a new boxed slice with uninitialized contents, \xe2\x80\xa60DjConstructs a new, empty <code>Vec&lt;T, A&gt;</code> with at least the \xe2\x80\xa6DkAllocates a <code>Box&lt;[T]&gt;</code> with all contents being zeroed out.0ClInstantiate a DecapsulationKey with only key-checks from \xe2\x80\xa600CcSets the underline color to <code>DarkGreen</code>.DiReturns an iterator over the words of <code>self</code>, separated on \xe2\x80\xa6EfUnpack and interleave high <code>i8</code> lanes of <code>a</code> and <code>b</code>.000EfUnpack and interleave low <code>i16</code> lanes of <code>a</code> and <code>b</code>.000EfUnpack and interleave low <code>i32</code> lanes of <code>a</code> and <code>b</code>.000EfUnpack and interleave low <code>i64</code> lanes of <code>a</code> and <code>b</code>.000EmReturn the object as byte slice. <strong><strong>Warning</strong></strong>: Should not be \xe2\x80\xa600000000000000000000000EmReturn the password hash as byte slice. <strong><strong>Warning</strong></strong>: Should \xe2\x80\xa611DeA copy of <code>self</code> with the <code>Variant0</code> field set.DeA copy of <code>self</code> with the <code>Variant1</code> field set.DeA copy of <code>self</code> with the <code>Variant2</code> field set.DeA copy of <code>self</code> with the <code>Variant3</code> field set.DeA copy of <code>self</code> with the <code>Variant4</code> field set.EhReturns the contained <code>Err</code> value, consuming the <code>self</code> value, \xe2\x80\xa6CjUpgrade the weakref to a direct Bound object reference \xe2\x80\xa60DiUnwraps the contained <code>Ok(value)</code> or panics with the given \xe2\x80\xa6CjThe input contains a byte array that lives at least as \xe2\x80\xa6BdThe input contains a newtype struct.Ee<code>visit_table_mut</code> and <code>visit_inline_table_mut</code> both recurse \xe2\x80\xa6DfEquivalent to the appropriate <code>llvm.memmove.p0i8.0i8.*</code> \xe2\x80\xa600CfGet the size of the window\xe2\x80\x99s underlying drawable \xe2\x80\xa6EgCreates an owned <code>PathBuf</code> like <code>self</code> but with the extension \xe2\x80\xa6CeProvide the bit per sample of a decoded audio sample.FmIf <code>true</code>, use <code>axis_dpad_to_button</code>, <code>Jitter</code> and <code>deadzone</code> \xe2\x80\xa6CgAdds an effect to the feedback loop and returns the \xe2\x80\xa6DkCasts <code>self</code> to <code>i16</code> wrapping at the numeric bounds.0DnCasts from <code>i8</code> to <code>i16</code> wrapping at the numeric bounds.DoCasts from <code>i16</code> to <code>i16</code> wrapping at the numeric bounds.DoCasts from <code>i64</code> to <code>i16</code> wrapping at the numeric bounds.DoCasts from <code>u16</code> to <code>i16</code> wrapping at the numeric bounds.DoCasts from <code>u32</code> to <code>i16</code> wrapping at the numeric bounds.EaCasts from <code>usize</code> to <code>i16</code> wrapping at the numeric bounds.DoCasts from <code>i32</code> to <code>i16</code> wrapping at the numeric bounds.DoCasts from <code>u64</code> to <code>i16</code> wrapping at the numeric bounds.E`Casts from <code>u128</code> to <code>i16</code> wrapping at the numeric bounds.DnCasts from <code>u8</code> to <code>i16</code> wrapping at the numeric bounds.E`Casts from <code>i128</code> to <code>i16</code> wrapping at the numeric bounds.EaCasts from <code>isize</code> to <code>i16</code> wrapping at the numeric bounds.DkCasts <code>self</code> to <code>i32</code> wrapping at the numeric bounds.0DoCasts from <code>i64</code> to <code>i32</code> wrapping at the numeric bounds.DoCasts from <code>u16</code> to <code>i32</code> wrapping at the numeric bounds.EaCasts from <code>usize</code> to <code>i32</code> wrapping at the numeric bounds.EaCasts from <code>isize</code> to <code>i32</code> wrapping at the numeric bounds.DoCasts from <code>u64</code> to <code>i32</code> wrapping at the numeric bounds.DnCasts from <code>i8</code> to <code>i32</code> wrapping at the numeric bounds.DnCasts from <code>u8</code> to <code>i32</code> wrapping at the numeric bounds.DoCasts from <code>i32</code> to <code>i32</code> wrapping at the numeric bounds.DoCasts from <code>u32</code> to <code>i32</code> wrapping at the numeric bounds.DoCasts from <code>i16</code> to <code>i32</code> wrapping at the numeric bounds.E`Casts from <code>i128</code> to <code>i32</code> wrapping at the numeric bounds.E`Casts from <code>u128</code> to <code>i32</code> wrapping at the numeric bounds.DkCasts <code>self</code> to <code>i64</code> wrapping at the numeric bounds.0DoCasts from <code>i32</code> to <code>i64</code> wrapping at the numeric bounds.DoCasts from <code>i64</code> to <code>i64</code> wrapping at the numeric bounds.DoCasts from <code>i16</code> to <code>i64</code> wrapping at the numeric bounds.DoCasts from <code>u64</code> to <code>i64</code> wrapping at the numeric bounds.DnCasts from <code>i8</code> to <code>i64</code> wrapping at the numeric bounds.E`Casts from <code>i128</code> to <code>i64</code> wrapping at the numeric bounds.EaCasts from <code>usize</code> to <code>i64</code> wrapping at the numeric bounds.DoCasts from <code>u32</code> to <code>i64</code> wrapping at the numeric bounds.DoCasts from <code>u16</code> to <code>i64</code> wrapping at the numeric bounds.E`Casts from <code>u128</code> to <code>i64</code> wrapping at the numeric bounds.DnCasts from <code>u8</code> to <code>i64</code> wrapping at the numeric bounds.EaCasts from <code>isize</code> to <code>i64</code> wrapping at the numeric bounds.DkCasts <code>self</code> to <code>u16</code> wrapping at the numeric bounds.0E`Casts from <code>i128</code> to <code>u16</code> wrapping at the numeric bounds.DoCasts from <code>u32</code> to <code>u16</code> wrapping at the numeric bounds.DoCasts from <code>i16</code> to <code>u16</code> wrapping at the numeric bounds.DnCasts from <code>i8</code> to <code>u16</code> wrapping at the numeric bounds.E`Casts from <code>u128</code> to <code>u16</code> wrapping at the numeric bounds.DoCasts from <code>i32</code> to <code>u16</code> wrapping at the numeric bounds.DoCasts from <code>u16</code> to <code>u16</code> wrapping at the numeric bounds.DnCasts from <code>u8</code> to <code>u16</code> wrapping at the numeric bounds.EaCasts from <code>isize</code> to <code>u16</code> wrapping at the numeric bounds.DoCasts from <code>u64</code> to <code>u16</code> wrapping at the numeric bounds.DoCasts from <code>i64</code> to <code>u16</code> wrapping at the numeric bounds.EaCasts from <code>usize</code> to <code>u16</code> wrapping at the numeric bounds.DkCasts <code>self</code> to <code>u32</code> wrapping at the numeric bounds.0EaCasts from <code>usize</code> to <code>u32</code> wrapping at the numeric bounds.DoCasts from <code>u16</code> to <code>u32</code> wrapping at the numeric bounds.E`Casts from <code>u128</code> to <code>u32</code> wrapping at the numeric bounds.EaCasts from <code>isize</code> to <code>u32</code> wrapping at the numeric bounds.DoCasts from <code>i32</code> to <code>u32</code> wrapping at the numeric bounds.DoCasts from <code>u64</code> to <code>u32</code> wrapping at the numeric bounds.DnCasts from <code>i8</code> to <code>u32</code> wrapping at the numeric bounds.E`Casts from <code>i128</code> to <code>u32</code> wrapping at the numeric bounds.DoCasts from <code>u32</code> to <code>u32</code> wrapping at the numeric bounds.DoCasts from <code>i64</code> to <code>u32</code> wrapping at the numeric bounds.DoCasts from <code>i16</code> to <code>u32</code> wrapping at the numeric bounds.DnCasts from <code>u8</code> to <code>u32</code> wrapping at the numeric bounds.DkCasts <code>self</code> to <code>u64</code> wrapping at the numeric bounds.0E`Casts from <code>u128</code> to <code>u64</code> wrapping at the numeric bounds.DnCasts from <code>i8</code> to <code>u64</code> wrapping at the numeric bounds.DoCasts from <code>i32</code> to <code>u64</code> wrapping at the numeric bounds.DoCasts from <code>u16</code> to <code>u64</code> wrapping at the numeric bounds.DoCasts from <code>i16</code> to <code>u64</code> wrapping at the numeric bounds.DnCasts from <code>u8</code> to <code>u64</code> wrapping at the numeric bounds.DoCasts from <code>i64</code> to <code>u64</code> wrapping at the numeric bounds.E`Casts from <code>i128</code> to <code>u64</code> wrapping at the numeric bounds.DoCasts from <code>u32</code> to <code>u64</code> wrapping at the numeric bounds.EaCasts from <code>isize</code> to <code>u64</code> wrapping at the numeric bounds.DoCasts from <code>u64</code> to <code>u64</code> wrapping at the numeric bounds.EaCasts from <code>usize</code> to <code>u64</code> wrapping at the numeric bounds.AiMessage types used by \xe2\x80\xa6CiThis structure contains the parameters describing the \xe2\x80\xa6AfDRM object descriptor.2CfLists of formats / etc. supported by an end of a link.ClThis struct describes the constraints on hardware frames \xe2\x80\xa6ChRange of channels between AV_CHAN_AMBISONIC_BASE and \xe2\x80\xa6jSee above.Cl&lt; Lt/Rt 2-channel downmix, Dolby Pro Logic II compatible.CgThe data is the AVPanScan struct defined in libavcodec.CkThe mapping must be direct.  That is, there must not be \xe2\x80\xa6Co&lt; IEEE-754 single precision planar GBRA 4:4:4:4, 128bpp, \xe2\x80\xa60Bi&lt; hardware decoding through MediaCodecDc&lt; planar YUV 4:2:0, 13.5bpp, (1 Cr &amp; Cb sample per 2x2 Y \xe2\x80\xa60Da&lt; planar YUV 4:2:2, 18bpp, (1 Cr &amp; Cb sample per 2x1 Y \xe2\x80\xa60Da&lt; planar YUV 4:4:4, 27bpp, (1 Cr &amp; Cb sample per 1x1 Y \xe2\x80\xa60AkDOVI configuration ref: \xe2\x80\xa6CkThis side data should be associated with a video stream \xe2\x80\xa6AoViews are on top of each other.BbFrame contains only the left view.DhAn iterator type over <code>ArrayOfTables</code>\xe2\x80\x99s <code>Table</code>sBnUsed by <code>PyTuple::iter_borrowed()</code>.kG.722 ADPCMkG.726 ADPCMBoAdaptive Transform Acoustic Coding 3+ (ATRAC3+)CjIterator that converts from a certain channel count to \xe2\x80\xa6DnAssociated type for <code>&lt;F as Pattern&gt;::Searcher&lt;&#39;a&gt;</code>.0000BeConnector for CONNECT proxy settings.BeDirect cache access info (LEAF=0x09).BmA command that disables bracketed paste mode.CbA command that instructs the terminal to end a \xe2\x80\xa6CgParallel iterator over mutable pixel refs and their \xe2\x80\xa6DfAn example created with <code>bitfield!</code>, with public custom \xe2\x80\xa6CjGives information about the current level in the topology.Ca\xf0\x9f\x9a\xa9 A failed conversion between two error types.0CfAn error indicating that a nul byte was not in the \xe2\x80\xa600000BaThe nonce size for IETF ChaCha20.Cc500 Internal Server Error [RFC9110, Section 15.6.1]AgPossible divide by zeroDgError type returned from <code>MacAddr::from_str</code> implementation.C`A deserializer holding a <code>MapAccess</code>.CnRAII structure used to release the shared read access of a \xe2\x80\xa600CfA default audio output device could not be determined.DgA owned handle to a held <code>Mutex</code> that has had a function \xe2\x80\xa6ClOwned RAII structure used to release the exclusive write \xe2\x80\xa6Bn428 Precondition Required [RFC6585, Section 3]Di<code>core</code> A simple wrapper around a type to assert that it is \xe2\x80\xa60BdConfigures a panning control effect.CbProcessor Topology Information (LEAF=0x8000_001E).EeCheck if <code>op</code>\xe2\x80\x99s type is exactly <code>PyDateTimeAPI.DateTimeType</code>.D`Implementation of functionality for <code>PyMappingProxy</code>.DaRepresents Python\xe2\x80\x99s <code>ModuleNotFoundError</code> exception.DaRepresents Python\xe2\x80\x99s <code>NotImplementedError</code> exception.Cd416 Range Not Satisfiable [RFC9110, Section 15.5.17]Di<code>U+FFFD REPLACEMENT CHARACTER (\xef\xbf\xbd)</code> is used in Unicode to \xe2\x80\xa6Di<code>U+FFFD REPLACEMENT CHARACTER</code> (\xef\xbf\xbd) is used in Unicode to \xe2\x80\xa600ClSend alternate keycodes in addition to the base keycode. \xe2\x80\xa6C`Block magic-link traversal (procfs-style links).Ea\xf0\x9f\x9a\xa9 <code>core</code> An error returned by <code>RefCell::try_borrow_mut</code>.0AfCreate a color cursor.o&lt; Never usedCaAllow the screen to be blanked by a screen saver.AoGet an OpenGL function by name.CcGet the number of outstanding (unfreed) allocationsAnObsolete function, do not use.AmGet the position of a window.Bc&lt; Region can drag entire window.CkCheck whether or not Unicode text input events are enabled.Bb&lt; Joystick battery level changeC`Get the current state of a button on a joystick.CjGet the serial number of an opened joystick, if available.CjGet the USB vendor ID of an opened joystick, if available.BlQuery whether a joystick has rumble support.CmQuery whether or not the joystick at a given device index \xe2\x80\xa6CcThe prototype for the log output callback function.BgSet the priority of all log categories.Bc&lt; The scroll direction is normalBiDestroy an existing SDL_MetalView object.Cg\\brief Multiple Finger Gesture Event (event.mgesture.*)Bh&lt; The renderer is a software fallbackCkDraw multiple points on the current rendering target at \xe2\x80\xa6CnRender a list of triangles, optionally using a texture and \xe2\x80\xa6BnGet the clip rectangle for the current target.BlGet the drawing area for the current target.CiSet the clip rectangle for rendering on the specified \xe2\x80\xa6CiSet the drawing area for rendering on the current target.o&lt; Erase-EazeDa&lt; Usually situated below the display on phones and used as \xe2\x80\xa6BbSet the palette used by a surface.BhSet the priority for the current thread.BaSet the border state of a window.BmSet the window as a modal for another window.AmSet the position of a window.CmPerform bilinear scaling between two surfaces of the same \xe2\x80\xa6CkUse this function to unlock the audio callback function \xe2\x80\xa6Cj&lt; The window manager requests that the window be closedBb&lt; Window has gained mouse focusB`&lt; Window has lost mouse focusBj&lt; Window has been moved to data1, data2Aj&lt; Window has been shownAi&lt; no window decorationAf&lt; fullscreen windowBm&lt; window should be treated as a popup menuCjMove the mouse cursor to the given position within the \xe2\x80\xa6Ch\\brief A union containing parameters for shaped windows.CkThe |Sec-WebSocket-Version| header field is used in the \xe2\x80\xa6BmThreshold for sRGB linear segment (0.0031308)0j&lt; CubicC`A deserializer holding a <code>SeqAccess</code>.DkType returned from <code>serialize_tuple_variant</code> for serializing \xe2\x80\xa6CoReturned from <code>Serializer::serialize_tuple_variant</code>.1ChThe distances from a listener at which an emitter is \xe2\x80\xa6Df\xf0\x9f\x95\x98 A time split from hours to seconds, normalized <em>(128b </em>\xe2\x80\xa60Cj\xf0\x9f\xa7\xaa Allows a site to access storage without top-level \xe2\x80\xa60CdAn error which can be returned when converting a \xe2\x80\xa600CkExternal iterator for sentence boundaries and byte offsets.DfAn iterator that reads from a <code>Source</code> and converts the \xe2\x80\xa6CkThe reason we are terminating the process during unwinding.00CdTrait for lossy compression of wavelet coefficients.0jround down00hround up00AkSee <code>_mm_setcsr</code>00Adinterval [0.75, 1.5)00111111EgReturns the bit in position <code>b</code> of the memory addressed by <code>p</code>\xe2\x80\xa600C`Broadcasts the low double-precision (64-bit) \xe2\x80\xa600C`Broadcasts the low single-precision (32-bit) \xe2\x80\xa600CmCompare packed signed 16-bit integers in a and b based on \xe2\x80\xa600CmCompare packed signed 32-bit integers in a and b based on \xe2\x80\xa600CmCompare packed signed 64-bit integers in a and b based on \xe2\x80\xa600ClCompare packed unsigned 16-bit integers in a and b based \xe2\x80\xa600ClCompare packed unsigned 32-bit integers in a and b based \xe2\x80\xa600ClCompare packed unsigned 64-bit integers in a and b based \xe2\x80\xa600CmTest each 32-bit element of a for equality with all other \xe2\x80\xa600CmTest each 64-bit element of a for equality with all other \xe2\x80\xa600BoSign-extend 16-bit integers to 32-bit integers.00BoSign-extend 16-bit integers to 64-bit integers.00ChConvert packed 32-bit integers in a to packed 16-bit \xe2\x80\xa600BoSign-extend 32-bit integers to 64-bit integers.00ChConvert packed 64-bit integers in a to packed 16-bit \xe2\x80\xa600ChConvert packed 64-bit integers in a to packed 32-bit \xe2\x80\xa600DfZeroes extend packed unsigned 16-bit integers in <code>a</code> to \xe2\x80\xa600DiZero-extend the lower four unsigned 16-bit integers in <code>a</code> \xe2\x80\xa600DdZero-extend unsigned 32-bit integers in <code>a</code> to 64-bit \xe2\x80\xa600CnConvert packed signed 16-bit integers in a to packed 8-bit \xe2\x80\xa600CnConvert packed signed 32-bit integers in a to packed 8-bit \xe2\x80\xa600CnConvert packed signed 64-bit integers in a to packed 8-bit \xe2\x80\xa600ClExtracts 128 bits (composed of 2 packed double-precision \xe2\x80\xa600ClExtracts 128 bits (composed of 4 packed single-precision \xe2\x80\xa600CkMultiply packed unsigned 52-bit integers in each 64-bit \xe2\x80\xa600000ClMultiply packed double-precision (64-bit) floating-point \xe2\x80\xa600CjMultiply packed half-precision (16-bit) floating-point \xe2\x80\xa600ClMultiply packed single-precision (32-bit) floating-point \xe2\x80\xa600222111000CfCompute the absolute value of packed signed 16-bit \xe2\x80\xa600CfCompute the absolute value of packed signed 32-bit \xe2\x80\xa600CfCompute the absolute value of packed signed 64-bit \xe2\x80\xa600ChAdd packed 16-bit integers in a and b, and store the \xe2\x80\xa600ChAdd packed 32-bit integers in a and b, and store the \xe2\x80\xa600ChAdd packed 64-bit integers in a and b, and store the \xe2\x80\xa600CeAdd packed signed 8-bit integers in a and b using \xe2\x80\xa600CgAdd packed unsigned 8-bit integers in a and b using \xe2\x80\xa600CjPerforms element-by-element bitwise AND between packed \xe2\x80\xa600CnCompute the bitwise AND of packed 64-bit integers in a and \xe2\x80\xa600CfCompute the bitwise NOT of packed double-precision \xe2\x80\xa600CfCompute the bitwise NOT of packed single-precision \xe2\x80\xa600CkAverage packed unsigned 16-bit integers in a and b, and \xe2\x80\xa600CnConverts packed BF16 (16-bit) floating-point elements in a \xe2\x80\xa600CiConvert packed half-precision (16-bit) floating-point \xe2\x80\xa600CkConvert packed single-precision (32-bit) floating-point \xe2\x80\xa600CmCompute dot-product of BF16 (16-bit) floating-point pairs \xe2\x80\xa600CdLoad contiguous active double-precision (64-bit) \xe2\x80\xa600CdLoad contiguous active single-precision (32-bit) \xe2\x80\xa600CgMultiply packed complex numbers in a by the complex \xe2\x80\xa600CmMultiply packed complex numbers in a and b, accumulate to \xe2\x80\xa600ClMultiply packed double-precision (64-bit) floating-point \xe2\x80\xa600CjMultiply packed half-precision (16-bit) floating-point \xe2\x80\xa600ClMultiply packed single-precision (32-bit) floating-point \xe2\x80\xa600222111000ChConvert the exponent of each packed double-precision \xe2\x80\xa600CfConvert the exponent of each packed half-precision \xe2\x80\xa600ChConvert the exponent of each packed single-precision \xe2\x80\xa600CiCompare packed signed 16-bit integers in a and b, and \xe2\x80\xa600CiCompare packed signed 32-bit integers in a and b, and \xe2\x80\xa600CiCompare packed signed 64-bit integers in a and b, and \xe2\x80\xa600CkCompare packed unsigned 16-bit integers in a and b, and \xe2\x80\xa600CkCompare packed unsigned 32-bit integers in a and b, and \xe2\x80\xa600CkCompare packed unsigned 64-bit integers in a and b, and \xe2\x80\xa600555444333222111000CeMove packed 16-bit integers from a into dst using \xe2\x80\xa600CmMove packed 32-bit integers from a to dst using writemask \xe2\x80\xa600CmMove packed 64-bit integers from a to dst using writemask \xe2\x80\xa600ClMultiply the low signed 32-bit integers from each packed \xe2\x80\xa600CnMultiply the low unsigned 32-bit integers from each packed \xe2\x80\xa600CkExtract the reduced argument of packed double-precision \xe2\x80\xa600CiExtract the reduced argument of packed half-precision \xe2\x80\xa600CkExtract the reduced argument of packed single-precision \xe2\x80\xa600CmRotate the bits in each packed 32-bit integer in a to the \xe2\x80\xa600CmRotate the bits in each packed 64-bit integer in a to the \xe2\x80\xa600111000CmScale the packed double-precision (64-bit) floating-point \xe2\x80\xa600CkScale the packed half-precision (16-bit) floating-point \xe2\x80\xa600CmScale the packed single-precision (32-bit) floating-point \xe2\x80\xa600CjBroadcast 8-bit integer a to all elements of dst using \xe2\x80\xa600CiShift packed 16-bit integers in a left by count while \xe2\x80\xa600CiShift packed 32-bit integers in a left by count while \xe2\x80\xa600CiShift packed 64-bit integers in a left by count while \xe2\x80\xa600CjShift packed 16-bit integers in a right by count while \xe2\x80\xa600CjShift packed 32-bit integers in a right by count while \xe2\x80\xa600CjShift packed 64-bit integers in a right by count while \xe2\x80\xa600222111000CiStore packed double-precision (64-bit) floating-point \xe2\x80\xa600CiStore packed single-precision (32-bit) floating-point \xe2\x80\xa600CkSubtract packed 16-bit integers in b from packed 16-bit \xe2\x80\xa600CkSubtract packed 32-bit integers in b from packed 32-bit \xe2\x80\xa600CkSubtract packed 64-bit integers in b from packed 64-bit \xe2\x80\xa600CjSubtract packed signed 8-bit integers in b from packed \xe2\x80\xa600ClSubtract packed unsigned 8-bit integers in b from packed \xe2\x80\xa600CnCompute the bitwise XOR of packed 32-bit integers in a and \xe2\x80\xa600CnCompute the bitwise XOR of packed 64-bit integers in a and \xe2\x80\xa600CgLoads packed 32-bit integers from memory pointed by \xe2\x80\xa600CgLoads packed 64-bit integers from memory pointed by \xe2\x80\xa600CnCompute the absolute value of packed signed 8-bit integers \xe2\x80\xa600CgAdd packed 8-bit integers in a and b, and store the \xe2\x80\xa600CjAverage packed unsigned 8-bit integers in a and b, and \xe2\x80\xa600CgMultiply packed complex numbers in a by the complex \xe2\x80\xa600CkCompute the complex conjugates of complex numbers in a, \xe2\x80\xa600CkConvert packed double-precision (64-bit) floating-point \xe2\x80\xa600000CiConvert packed half-precision (16-bit) floating-point \xe2\x80\xa600000CkConvert packed single-precision (32-bit) floating-point \xe2\x80\xa600ClMultiply packed double-precision (64-bit) floating-point \xe2\x80\xa600CjMultiply packed half-precision (16-bit) floating-point \xe2\x80\xa600ClMultiply packed single-precision (32-bit) floating-point \xe2\x80\xa600222111000CmMultiply packed complex numbers in a and b, and store the \xe2\x80\xa600ChLoad packed double-precision (64-bit) floating-point \xe2\x80\xa600ChLoad packed single-precision (32-bit) floating-point \xe2\x80\xa600CnCompare packed signed 8-bit integers in a and b, and store \xe2\x80\xa600CjCompare packed unsigned 8-bit integers in a and b, and \xe2\x80\xa600111000CmMove packed 8-bit integers from a into dst using zeromask \xe2\x80\xa600CmCompute the bitwise OR of packed 32-bit integers in a and \xe2\x80\xa600CmCompute the bitwise OR of packed 64-bit integers in a and \xe2\x80\xa600CiCalculate the max, min, absolute max, or absolute min \xe2\x80\xa600000C`Compute the approximate reciprocal of packed \xe2\x80\xa600000ClCompute the approximate reciprocal square root of packed \xe2\x80\xa600CiSubtract packed 8-bit integers in b from packed 8-bit \xe2\x80\xa600DjShuffles 64-bit floating-point elements in <code>a</code> across lanes \xe2\x80\xa600CkShuffle 64-bit integers in a within 256-bit lanes using \xe2\x80\xa600CmShuffle double-precision (64-bit) floating-point elements \xe2\x80\xa600CnShuffle half-precision (16-bit) floating-point elements in \xe2\x80\xa600CmShuffle single-precision (32-bit) floating-point elements \xe2\x80\xa600ChReduce the packed 8-bit integers in a by bitwise OR. \xe2\x80\xa600CnThis intrinsic performs four rounds of SM4 encryption. The \xe2\x80\xa600CmCompute the bitwise AND of packed 8-bit integers in a and \xe2\x80\xa600CmUnpacks and interleave 16-bit integers from the high half \xe2\x80\xa600CmUnpacks and interleave 32-bit integers from the high half \xe2\x80\xa600CmUnpacks and interleave 64-bit integers from the high half \xe2\x80\xa600ClUnpacks and interleave 16-bit integers from the low half \xe2\x80\xa600ClUnpacks and interleave 32-bit integers from the low half \xe2\x80\xa600ClUnpacks and interleave 64-bit integers from the low half \xe2\x80\xa600CnBroadcast the low double-precision (64-bit) floating-point \xe2\x80\xa600CnBroadcast the low single-precision (32-bit) floating-point \xe2\x80\xa600CmCompare packed signed 16-bit integers in a and b based on \xe2\x80\xa600CmCompare packed signed 32-bit integers in a and b based on \xe2\x80\xa600CmCompare packed signed 64-bit integers in a and b based on \xe2\x80\xa600ClCompare packed unsigned 16-bit integers in a and b based \xe2\x80\xa600ClCompare packed unsigned 32-bit integers in a and b based \xe2\x80\xa600ClCompare packed unsigned 64-bit integers in a and b based \xe2\x80\xa600CkCompare packed double-precision (64-bit) floating-point \xe2\x80\xa600CkCompare packed single-precision (32-bit) floating-point \xe2\x80\xa600111000111000111000CgMultiply packed complex numbers in a by the complex \xe2\x80\xa600CmTest each 32-bit element of a for equality with all other \xe2\x80\xa600CmTest each 64-bit element of a for equality with all other \xe2\x80\xa600CkConvert packed double-precision (64-bit) floating-point \xe2\x80\xa600000CiConvert packed half-precision (16-bit) floating-point \xe2\x80\xa600000CkConvert packed single-precision (32-bit) floating-point \xe2\x80\xa600000ClSign extend packed 16-bit integers in a to packed 32-bit \xe2\x80\xa600ClSign extend packed 16-bit integers in a to packed 64-bit \xe2\x80\xa600ChConvert packed 32-bit integers in a to packed 16-bit \xe2\x80\xa600ClSign extend packed 32-bit integers in a to packed 64-bit \xe2\x80\xa600ChConvert packed 64-bit integers in a to packed 16-bit \xe2\x80\xa600ChConvert packed 64-bit integers in a to packed 32-bit \xe2\x80\xa600CnZero extend packed unsigned 16-bit integers in a to packed \xe2\x80\xa600000CnZero extend packed unsigned 32-bit integers in a to packed \xe2\x80\xa600CnConvert packed signed 16-bit integers in a to packed 8-bit \xe2\x80\xa600CnConvert packed signed 32-bit integers in a to packed 8-bit \xe2\x80\xa600CnConvert packed signed 64-bit integers in a to packed 8-bit \xe2\x80\xa600ClMultiply packed double-precision (64-bit) floating-point \xe2\x80\xa600CjMultiply packed half-precision (16-bit) floating-point \xe2\x80\xa600ClMultiply packed single-precision (32-bit) floating-point \xe2\x80\xa600222111000CmMultiply packed complex numbers in a and b, and store the \xe2\x80\xa600CmLoads 8 double-precision (64-bit) floating-point elements \xe2\x80\xa600CkMultiply packed unsigned 52-bit integers in each 64-bit \xe2\x80\xa600000555444333555444333CfCompute the absolute value of packed signed 16-bit \xe2\x80\xa600DjComputes the absolute value of packed 32-bit integers in <code>a</code>\xe2\x80\xa600CfCompute the absolute value of packed signed 64-bit \xe2\x80\xa600ChAdd packed 16-bit integers in a and b, and store the \xe2\x80\xa600ChAdd packed 32-bit integers in a and b, and store the \xe2\x80\xa600ChAdd packed 64-bit integers in a and b, and store the \xe2\x80\xa600CeAdd packed signed 8-bit integers in a and b using \xe2\x80\xa600CgAdd packed unsigned 8-bit integers in a and b using \xe2\x80\xa600CjPerforms element-by-element bitwise AND between packed \xe2\x80\xa600CnCompute the bitwise AND of packed 64-bit integers in a and \xe2\x80\xa600CfCompute the bitwise NOT of packed double-precision \xe2\x80\xa600CfCompute the bitwise NOT of packed single-precision \xe2\x80\xa600CkAverage packed unsigned 16-bit integers in a and b, and \xe2\x80\xa600CnConverts packed BF16 (16-bit) floating-point elements in a \xe2\x80\xa600CiConvert packed half-precision (16-bit) floating-point \xe2\x80\xa600CkConvert packed single-precision (32-bit) floating-point \xe2\x80\xa600CmCompute dot-product of BF16 (16-bit) floating-point pairs \xe2\x80\xa600CdLoad contiguous active double-precision (64-bit) \xe2\x80\xa600CdLoad contiguous active single-precision (32-bit) \xe2\x80\xa600CgMultiply packed complex numbers in a by the complex \xe2\x80\xa600CmMultiply packed complex numbers in a and b, accumulate to \xe2\x80\xa600ClMultiply packed double-precision (64-bit) floating-point \xe2\x80\xa600CjMultiply packed half-precision (16-bit) floating-point \xe2\x80\xa600ClMultiply packed single-precision (32-bit) floating-point \xe2\x80\xa600222111000ChConvert the exponent of each packed double-precision \xe2\x80\xa600CfConvert the exponent of each packed half-precision \xe2\x80\xa600ChConvert the exponent of each packed single-precision \xe2\x80\xa600CiCompare packed signed 16-bit integers in a and b, and \xe2\x80\xa600CiCompare packed signed 32-bit integers in a and b, and \xe2\x80\xa600CiCompare packed signed 64-bit integers in a and b, and \xe2\x80\xa600CkCompare packed unsigned 16-bit integers in a and b, and \xe2\x80\xa600CkCompare packed unsigned 32-bit integers in a and b, and \xe2\x80\xa600CkCompare packed unsigned 64-bit integers in a and b, and \xe2\x80\xa600555444333222111000CeMove packed 16-bit integers from a into dst using \xe2\x80\xa600CmMove packed 32-bit integers from a to dst using writemask \xe2\x80\xa600CmMove packed 64-bit integers from a to dst using writemask \xe2\x80\xa600ClMultiply the low signed 32-bit integers from each packed \xe2\x80\xa600CnMultiply the low unsigned 32-bit integers from each packed \xe2\x80\xa600CkExtract the reduced argument of packed double-precision \xe2\x80\xa600CiExtract the reduced argument of packed half-precision \xe2\x80\xa600CkExtract the reduced argument of packed single-precision \xe2\x80\xa600CmRotate the bits in each packed 32-bit integer in a to the \xe2\x80\xa600CmRotate the bits in each packed 64-bit integer in a to the \xe2\x80\xa600111000CmScale the packed double-precision (64-bit) floating-point \xe2\x80\xa600CkScale the packed half-precision (16-bit) floating-point \xe2\x80\xa600CmScale the packed single-precision (32-bit) floating-point \xe2\x80\xa600CjBroadcast 8-bit integer a to all elements of dst using \xe2\x80\xa600CiShift packed 16-bit integers in a left by count while \xe2\x80\xa600CiShift packed 32-bit integers in a left by count while \xe2\x80\xa600CiShift packed 64-bit integers in a left by count while \xe2\x80\xa600CjShift packed 16-bit integers in a right by count while \xe2\x80\xa600CjShift packed 32-bit integers in a right by count while \xe2\x80\xa600CjShift packed 64-bit integers in a right by count while \xe2\x80\xa600222111000CiStore packed double-precision (64-bit) floating-point \xe2\x80\xa600CiStore packed single-precision (32-bit) floating-point \xe2\x80\xa600CkSubtract packed 16-bit integers in b from packed 16-bit \xe2\x80\xa600CkSubtract packed 32-bit integers in b from packed 32-bit \xe2\x80\xa600CkSubtract packed 64-bit integers in b from packed 64-bit \xe2\x80\xa600CjSubtract packed signed 8-bit integers in b from packed \xe2\x80\xa600ClSubtract packed unsigned 8-bit integers in b from packed \xe2\x80\xa600CnCompute the bitwise XOR of packed 32-bit integers in a and \xe2\x80\xa600CnCompute the bitwise XOR of packed 64-bit integers in a and \xe2\x80\xa600CnCompute the absolute value of packed signed 8-bit integers \xe2\x80\xa600CgAdd packed 8-bit integers in a and b, and store the \xe2\x80\xa600CjAverage packed unsigned 8-bit integers in a and b, and \xe2\x80\xa600CgMultiply packed complex numbers in a by the complex \xe2\x80\xa600CkCompute the complex conjugates of complex numbers in a, \xe2\x80\xa600CkConvert packed double-precision (64-bit) floating-point \xe2\x80\xa600000CiConvert packed half-precision (16-bit) floating-point \xe2\x80\xa600000CkConvert packed single-precision (32-bit) floating-point \xe2\x80\xa600000ClMultiply packed double-precision (64-bit) floating-point \xe2\x80\xa600CjMultiply packed half-precision (16-bit) floating-point \xe2\x80\xa600ClMultiply packed single-precision (32-bit) floating-point \xe2\x80\xa600222111000CmMultiply packed complex numbers in a and b, and store the \xe2\x80\xa600ChLoad packed double-precision (64-bit) floating-point \xe2\x80\xa600ChLoad packed single-precision (32-bit) floating-point \xe2\x80\xa600CnCompare packed signed 8-bit integers in a and b, and store \xe2\x80\xa600CjCompare packed unsigned 8-bit integers in a and b, and \xe2\x80\xa600111000CmMove packed 8-bit integers from a into dst using zeromask \xe2\x80\xa600CmCompute the bitwise OR of packed 32-bit integers in a and \xe2\x80\xa600CmCompute the bitwise OR of packed 64-bit integers in a and \xe2\x80\xa600CiCalculate the max, min, absolute max, or absolute min \xe2\x80\xa600000C`Compute the approximate reciprocal of packed \xe2\x80\xa600000ClCompute the approximate reciprocal square root of packed \xe2\x80\xa600CiSubtract packed 8-bit integers in b from packed 8-bit \xe2\x80\xa600CkShuffle 64-bit integers in a within 256-bit lanes using \xe2\x80\xa600CmShuffle double-precision (64-bit) floating-point elements \xe2\x80\xa600CnShuffle half-precision (16-bit) floating-point elements in \xe2\x80\xa600CmShuffle single-precision (32-bit) floating-point elements \xe2\x80\xa600777777CmCompute the bitwise AND of packed 8-bit integers in a and \xe2\x80\xa600ClUnpack and interleave 16-bit integers from the high half \xe2\x80\xa600ClUnpack and interleave 32-bit integers from the high half \xe2\x80\xa600ClUnpack and interleave 64-bit integers from the high half \xe2\x80\xa600CnUnpack and interleave 16-bit integers from the low half of \xe2\x80\xa600CnUnpack and interleave 32-bit integers from the low half of \xe2\x80\xa600CnUnpack and interleave 64-bit integers from the low half of \xe2\x80\xa600ClBroadcast the low 8-bits from input mask k to all 64-bit \xe2\x80\xa600CmBroadcast the low 16-bits from input mask k to all 32-bit \xe2\x80\xa600CnCompare the lower double-precision (64-bit) floating-point \xe2\x80\xa600ClCompare the lower half-precision (16-bit) floating-point \xe2\x80\xa600CnCompare the lower single-precision (32-bit) floating-point \xe2\x80\xa600ChCompare packed signed 16-bit integers in a and b for \xe2\x80\xa600ClCompare packed 32-bit integers in a and b for not-equal, \xe2\x80\xa600ChCompare packed signed 64-bit integers in a and b for \xe2\x80\xa600CjCompare packed unsigned 16-bit integers in a and b for \xe2\x80\xa600CjCompare packed unsigned 32-bit integers in a and b for \xe2\x80\xa600CjCompare packed unsigned 64-bit integers in a and b for \xe2\x80\xa600CnConvert the lower double-precision (64-bit) floating-point \xe2\x80\xa600000CnConvert the lower single-precision (32-bit) floating-point \xe2\x80\xa600000CiMultiply groups of 4 adjacent pairs of unsigned 8-bit \xe2\x80\xa600ChMultiply groups of 2 adjacent pairs of signed 16-bit \xe2\x80\xa600CmFix up the lower double-precision (64-bit) floating-point \xe2\x80\xa600CmFix up the lower single-precision (32-bit) floating-point \xe2\x80\xa600ClMultiply packed single-precision (32-bit) floating-point \xe2\x80\xa600CjMultiply packed half-precision (16-bit) floating-point \xe2\x80\xa600111ClMultiply packed double-precision (64-bit) floating-point \xe2\x80\xa600111222CjAdd the lower double-precision (64-bit) floating-point \xe2\x80\xa600ChAdd the lower half-precision (16-bit) floating-point \xe2\x80\xa600CjAdd the lower single-precision (32-bit) floating-point \xe2\x80\xa600CnConcatenate a and b into a 32-byte immediate result, shift \xe2\x80\xa600000CnCompute the bitwise NOT of packed 32-bit integers in a and \xe2\x80\xa600CnCompute the bitwise NOT of packed 64-bit integers in a and \xe2\x80\xa600CkConvert packed single-precision (32-bit) floating-point \xe2\x80\xa600CkConvert packed double-precision (64-bit) floating-point \xe2\x80\xa600000000000CiConvert packed half-precision (16-bit) floating-point \xe2\x80\xa600000000000000000222222CkConvert packed double-precision (32-bit) floating-point \xe2\x80\xa600333CmDivide the lower double-precision (64-bit) floating-point \xe2\x80\xa600CkDivide the lower half-precision (16-bit) floating-point \xe2\x80\xa600CmDivide the lower single-precision (32-bit) floating-point \xe2\x80\xa600CiMultiply groups of 4 adjacent pairs of unsigned 8-bit \xe2\x80\xa600ChMultiply groups of 2 adjacent pairs of signed 16-bit \xe2\x80\xa600CmLoad contiguous active 16-bit integers from a (those with \xe2\x80\xa600CmLoad contiguous active 32-bit integers from a (those with \xe2\x80\xa600CmLoad contiguous active 64-bit integers from a (those with \xe2\x80\xa600DcReturns values from <code>slice</code> at offsets determined by \xe2\x80\xa600000000000CnCompare the lower double-precision (64-bit) floating-point \xe2\x80\xa600ClCompare the lower half-precision (16-bit) floating-point \xe2\x80\xa600CnCompare the lower single-precision (32-bit) floating-point \xe2\x80\xa600222111000C`Multiply the lower double-precision (64-bit) \xe2\x80\xa600CmMultiply the lower half-precision (16-bit) floating-point \xe2\x80\xa600C`Multiply the lower single-precision (32-bit) \xe2\x80\xa600CfMultiply packed signed 16-bit integers in a and b, \xe2\x80\xa600CiConvert packed signed 16-bit integers from a and b to \xe2\x80\xa600CiConvert packed signed 32-bit integers from a and b to \xe2\x80\xa600ChFor each packed 16-bit integer maps the value to the \xe2\x80\xa600ChFor each packed 32-bit integer maps the value to the \xe2\x80\xa600ChFor each packed 64-bit integer maps the value to the \xe2\x80\xa600CnShuffle 8-bit integers in a within 128-bit lanes using the \xe2\x80\xa600CiStore packed 16-bit integers from a into memory using \xe2\x80\xa600CiStore packed 32-bit integers from a into memory using \xe2\x80\xa600CiStore packed 64-bit integers from a into memory using \xe2\x80\xa600C`Subtract the lower double-precision (64-bit) \xe2\x80\xa600CmSubtract the lower half-precision (16-bit) floating-point \xe2\x80\xa600C`Subtract the lower single-precision (32-bit) \xe2\x80\xa600CiConcatenate pairs of 16-byte blocks in a and b into a \xe2\x80\xa600CkContiguously store the active double-precision (64-bit) \xe2\x80\xa600CkContiguously store the active single-precision (32-bit) \xe2\x80\xa600ChConvert packed signed 16-bit integers in a to packed \xe2\x80\xa600ChConvert packed signed 32-bit integers in a to packed \xe2\x80\xa600000000ChConvert packed signed 64-bit integers in a to packed \xe2\x80\xa600000000CjConvert packed unsigned 16-bit integers in a to packed \xe2\x80\xa600CjConvert packed unsigned 32-bit integers in a to packed \xe2\x80\xa600000CjConvert packed unsigned 64-bit integers in a to packed \xe2\x80\xa600000000ClConverts packed single-precision (32-bit) floating-point \xe2\x80\xa600CkConvert packed double-precision (64-bit) floating-point \xe2\x80\xa600000000000CiConvert packed half-precision (16-bit) floating-point \xe2\x80\xa600000000000000000CkConvert packed single-precision (32-bit) floating-point \xe2\x80\xa600000000000ClLoad contiguous active 8-bit integers from a (those with \xe2\x80\xa600CjFix up packed double-precision (64-bit) floating-point \xe2\x80\xa600CjFix up packed single-precision (32-bit) floating-point \xe2\x80\xa600CmFix up the lower double-precision (64-bit) floating-point \xe2\x80\xa600CmFix up the lower single-precision (32-bit) floating-point \xe2\x80\xa600ClMultiply packed double-precision (64-bit) floating-point \xe2\x80\xa600CjMultiply packed half-precision (16-bit) floating-point \xe2\x80\xa600ClMultiply packed single-precision (32-bit) floating-point \xe2\x80\xa600222111000CjLoad packed 16-bit integers from memory into dst using \xe2\x80\xa600CjLoad packed 32-bit integers from memory into dst using \xe2\x80\xa600CjLoad packed 64-bit integers from memory into dst using \xe2\x80\xa600CiCounts the number of leading zero bits in each packed \xe2\x80\xa600000CcDuplicate odd-indexed single-precision (32-bit) \xe2\x80\xa600CdDuplicate even-indexed single-precision (32-bit) \xe2\x80\xa600CjMultiply the packed signed 16-bit integers in a and b, \xe2\x80\xa600ClMultiply the packed unsigned 16-bit integers in a and b, \xe2\x80\xa600CmMultiply the packed 16-bit integers in a and b, producing \xe2\x80\xa600CmMultiply the packed 32-bit integers in a and b, producing \xe2\x80\xa600EcMultiply packed 64-bit integers in <code>a</code> and <code>b</code>, producing \xe2\x80\xa600CiConvert packed signed 16-bit integers from a and b to \xe2\x80\xa600CiConvert packed signed 32-bit integers from a and b to \xe2\x80\xa600CnFor each packed 8-bit integer maps the value to the number \xe2\x80\xa600CnConcatenate packed 16-bit integers in a and b producing an \xe2\x80\xa600CnConcatenate packed 32-bit integers in a and b producing an \xe2\x80\xa600CnConcatenate packed 64-bit integers in a and b producing an \xe2\x80\xa600222111000CnConcatenate packed 16-bit integers in b and a producing an \xe2\x80\xa600CnConcatenate packed 32-bit integers in b and a producing an \xe2\x80\xa600CnConcatenate packed 64-bit integers in b and a producing an \xe2\x80\xa600222111000CcUnpack and interleave double-precision (64-bit) \xe2\x80\xa600CcUnpack and interleave single-precision (32-bit) \xe2\x80\xa600111000ClShuffle 8-bit integers in a and b across lanes using the \xe2\x80\xa600CgShuffle 16-bit integers in a across lanes using the \xe2\x80\xa600CjPerforms 2 rounds of SHA256 operation using an initial \xe2\x80\xa600CgLoad 128-bits of integer data from memory into dst. \xe2\x80\xa600C`If true, will add SDL mappings included from \xe2\x80\xa6AoAdds a spatial mixer sub-track.BiAdds a spatial child track to this track.0EbAllocates a new slice of size <code>len</code> into this <code>Bump</code> and \xe2\x80\xa6EhAllocates a new slice of size <code>len</code> slice into this <code>Bump</code> and \xe2\x80\xa61CmReturns a plain mutable slice, which is used to implement \xe2\x80\xa60Ca\xe2\x9a\x9b\xef\xb8\x8f <code>core</code> A compiler memory fence.0AnPeek data from an AVAudioFifo.AjReallocate an AVAudioFifo.CnEncrypt or decrypt a buffer using a previously initialized \xe2\x80\xa6AnAppend data to a print buffer.Cm@return 1 if the caller may write to the data referred to \xe2\x80\xa6CiMark the pool as being available for freeing. It will \xe2\x80\xa6CkSame behaviour av_fast_malloc but the buffer has additionalCkFeed data from a user-supplied callback to an AVFifoBuffer.CeWrite data from a user-provided callback into a FIFO.CiFind the value in a list of rationals nearest a given \xe2\x80\xa6CnFill the provided buffer with a string containing a FourCC \xe2\x80\xa6DbReturn the planar&lt;-&gt;packed alternative form of the given \xe2\x80\xa6CiReturn the number of bits per pixel used by the pixel \xe2\x80\xa6ClReturn a channel layout id that matches name, or 0 if no \xe2\x80\xa6CmPrint in buf the string corresponding to the pixel format \xe2\x80\xa6ChAllocate an AVHWDeviceContext for a given hardware type.BnAllocate a new frame attached to the given \xe2\x80\xa6ClCopy image data located in uncacheable (e.g. GPU mapped) \xe2\x80\xa6CmCompute the size of an image line with format pix_fmt and \xe2\x80\xa6BmSeed the state of the ALFG using binary data.CfLike av_probe_input_buffer2() but returns 0 on successAfGuess the file format.CnParse the key/value pairs list in opts. For each key/value \xe2\x80\xa6CbGet the AVStereo3DType form a human-readable name.CgProvide a human-readable name of a given stereo3d type.CgReturns the pts of the last muxed packet + its durationCdConvert sei info to SMPTE 12M binary representation.BeGet the duration for a Vorbis packet.AnReturns available color count.CnReturns an estimate of the default amount of parallelism a \xe2\x80\xa6000BoReturn the libavcodec build-time configuration.ClReset the internal codec state / flush internal buffers. \xe2\x80\xa6CgRetrieve supported hardware configurations for a codec.CnReturn decoded output data from a decoder or encoder (when \xe2\x80\xa6mList devices.CiInitialize libavdevice and register all the input and \xe2\x80\xa6CmNegotiate the media format, dimensions, etc of all inputs \xe2\x80\xa6CiA function executing multiple jobs, possibly in parallel.CmCheck validity and configure all the links and formats in \xe2\x80\xa6BmAdd a graph described by a string to a graph.AoGet the name of an AVFilterPad.AoGet the type of an AVFilterPad.CiFree an AVFormatContext and all its streams. @param s \xe2\x80\xa6CjDo global initialization of network libraries. This is \xe2\x80\xa6CiAllocate the stream private data and write the stream \xe2\x80\xa6Cjframe timestamp estimated using various heuristics, in \xe2\x80\xa6EdCounts the number of 0s in <code>bits</code> from the <code>[start..=end]</code> \xe2\x80\xa60EeGets the bits in <code>self</code> from the <code>[start..=end]</code> checked range.0EgSets the bits in <code>self</code> to 1 from the <code>[start..=end]</code> checked \xe2\x80\xa60C`The number of bits per sample in the codedwords.Cfbits per sample/pixel from the demuxer (needed for \xe2\x80\xa6C`The number of bits per one encoded audio sample.CaDivides an iterator into sequential blocks of \xe2\x80\xa60DbSimilar to <code>call_once</code>, but releases the Python GIL \xe2\x80\xa6CkAbsolute scale factor representing the nominal level of \xe2\x80\xa6CoCasts <code>self</code> to <code>isize</code> with range check.0DdCasts from <code>i128</code> to <code>isize</code> with range check.DdCasts from <code>u128</code> to <code>isize</code> with range check.DcCasts from <code>u16</code> to <code>isize</code> with range check.DbCasts from <code>u8</code> to <code>isize</code> with range check.DcCasts from <code>i16</code> to <code>isize</code> with range check.DcCasts from <code>i32</code> to <code>isize</code> with range check.DbCasts from <code>i8</code> to <code>isize</code> with range check.DcCasts from <code>u64</code> to <code>isize</code> with range check.DeCasts from <code>usize</code> to <code>isize</code> with range check.DcCasts from <code>i64</code> to <code>isize</code> with range check.DcCasts from <code>u32</code> to <code>isize</code> with range check.DeCasts from <code>isize</code> to <code>isize</code> with range check.CoCasts <code>self</code> to <code>usize</code> with range check.0DcCasts from <code>u32</code> to <code>usize</code> with range check.DeCasts from <code>usize</code> to <code>usize</code> with range check.DcCasts from <code>i32</code> to <code>usize</code> with range check.DdCasts from <code>i128</code> to <code>usize</code> with range check.DcCasts from <code>i16</code> to <code>usize</code> with range check.DeCasts from <code>isize</code> to <code>usize</code> with range check.DbCasts from <code>u8</code> to <code>usize</code> with range check.DcCasts from <code>u64</code> to <code>usize</code> with range check.DbCasts from <code>i8</code> to <code>usize</code> with range check.DcCasts from <code>i64</code> to <code>usize</code> with range check.DcCasts from <code>u16</code> to <code>usize</code> with range check.DdCasts from <code>u128</code> to <code>usize</code> with range check.ClLanewise <code>a == b</code> with lanes as <code>i16</code>.0CiCompare <code>i16</code> lanes for equality, mask output.0ClLanewise <code>a == b</code> with lanes as <code>i32</code>.0CiCompare <code>i32</code> lanes for equality, mask output.0ClLanewise <code>a == b</code> with lanes as <code>i64</code>.0CiCompare <code>i64</code> lanes for equality, mask output.0DbLanewise <code>a &amp;gt; b</code> with lanes as <code>i16</code>.CnLanewise <code>a &gt; b</code> with lanes as <code>i16</code>.DjCompare <code>i16</code> lanes for <code>a &amp;gt; b</code>, mask output.DfCompare <code>i16</code> lanes for <code>a &gt; b</code>, mask output.DbLanewise <code>a &amp;gt; b</code> with lanes as <code>i32</code>.CnLanewise <code>a &gt; b</code> with lanes as <code>i32</code>.DjCompare <code>i32</code> lanes for <code>a &amp;gt; b</code>, mask output.DfCompare <code>i32</code> lanes for <code>a &gt; b</code>, mask output.DbLanewise <code>a &amp;gt; b</code> with lanes as <code>i64</code>.CnLanewise <code>a &gt; b</code> with lanes as <code>i64</code>.DjCompare <code>i64</code> lanes for <code>a &amp;gt; b</code>, mask output.DfCompare <code>i64</code> lanes for <code>a &gt; b</code>, mask output.DbLanewise <code>a &amp;lt; b</code> with lanes as <code>i16</code>.CnLanewise <code>a &lt; b</code> with lanes as <code>i16</code>.DbLanewise <code>a &amp;lt; b</code> with lanes as <code>i32</code>.CnLanewise <code>a &lt; b</code> with lanes as <code>i32</code>.ClLanewise <code>(!a.is_nan()) &amp;amp; (!b.is_nan())</code>.ChLanewise <code>(!a.is_nan()) &amp; (!b.is_nan())</code>.DeLow lane <code>a.is_nan() | b.is_nan()</code>, other lanes unchanged.0DkStores a value into the <code>Atomic</code> if the current value is the \xe2\x80\xa6DiStores a value into the <code>bool</code> if the current value is the \xe2\x80\xa6CkStores a value into the pointer if the current value is \xe2\x80\xa6CiStores a value into the atomic integer if the current \xe2\x80\xa60000000CmStores a value into the atomic float if the current value \xe2\x80\xa611011321111111111DbCompile-time friendly version of <code>try_from_millis_f64</code>.DhThe nearest integer to itself, rounding ties away from <code>0.0</code>.DgReturns the nearest integer to <code>x</code>, rounding ties to the \xe2\x80\xa6Da<strong>Gets</strong> the attribute: OpenGL context major versionDa<strong>Gets</strong> the attribute: OpenGL context minor versionCmCopies the buffer elements to the specified slice. If the \xe2\x80\xa6AaShorthand for \xe2\x80\xa60CkReturns the determinant without checking matrix squareness.0000000CeGet the usable desktop area represented by a display.BdData TLB associativity for 4K pages.BgL2 Data TLB associativity for 4K pages.CfComputes the Levenshtein edit distance between two \xe2\x80\xa6CiReturns the number of outcoming errors since the last \xe2\x80\xa6DiEstablish session keys with a client. This moves <code>self</code> to \xe2\x80\xa6DiEstablish session keys with a server. This moves <code>self</code> to \xe2\x80\xa6Dh(addEventListener) Attaches a JavaScript function <code>event</code> \xe2\x80\xa6Df(removeEventListener) Removes a a Rust function <code>event</code> \xe2\x80\xa6CgExtends the front of the destaque from an iterator, \xe2\x80\xa6DhGets the <code>i32</code> lane requested. Only the lowest 2 bits are \xe2\x80\xa60DdGets the <code>i64</code> lane requested. Only the lowest bit is \xe2\x80\xa60D`Finds the index of the first 0 in <code>self</code> from the \xe2\x80\xa600000000000CiMarks the struct as non-exhaustive, indicating to the \xe2\x80\xa6CkMarks the tuple struct as non-exhaustive, indicating to \xe2\x80\xa6CmMarks the set as non-exhaustive, indicating to the reader \xe2\x80\xa6CnMarks the list as non-exhaustive, indicating to the reader \xe2\x80\xa6CmMarks the map as non-exhaustive, indicating to the reader \xe2\x80\xa6Bg<em>const</em> method equivalent to \xe2\x80\xa60EeConstructs a new <code>Bound&lt;&#39;py, PyAny&gt;</code> from a pointer. Returns \xe2\x80\xa6DoCreate a <code>Py&lt;T&gt;</code> instance by taking ownership of the given \xe2\x80\xa610EnConverts a <code>Vec&lt;u8&gt;</code> to a <code>String</code>, substituting invalid UTF-8 \xe2\x80\xa6CnLow lane fused <code>(a * b) + c</code>, other lanes unchanged0DdLanewise fused <code>(a * b) addsub c</code> (adds odd lanes and \xe2\x80\xa6000CoLow lane fused <code>(a * b) - c</code>, other lanes unchanged.0DiLanewise fused <code>(a * b) subadd c</code> (subtracts odd lanes and \xe2\x80\xa6000CgThe value at the bit range of <code>FLAG1</code> field.0CgThe value at the bit range of <code>FLAG2</code> field.0CgThe value at the bit range of <code>MASK0</code> field.0DiInserts the default value into the option if it is <code>None</code>, \xe2\x80\xa6CmGet a mutable reference to a type, inserting the type\xe2\x80\x99s \xe2\x80\xa6DiGets a reference to the mutable pixel at location <code>(x, y)</code> \xe2\x80\xa6BcGet the user\xe2\x80\x99s preferred locales.BnTLB 1-GiB Pages Information (LEAF=0x8000_0019)CfSets the number of scheduler ticks after which the \xe2\x80\xa6CgComputes the Hamming edit distance between two UTF8 \xe2\x80\xa6EdWhen host <code>CR4.MCE=1</code> and guest <code>CR4.MCE=0</code>, machine check \xe2\x80\xa6BiHardware Coordination Feedback CapabilityBfHWP PECI override is supported if set.CaInstruction Retired Counter MSR available if set.CmSupport of Power Event Trace. Writes can set IA32_RTIT_CTL\xe2\x80\xa6Cm(replaceState) Modifies the current history entry without \xe2\x80\xa6DiFormats the span or duration into a <code>HH:MM:SS[.fffffffff]</code> \xe2\x80\xa6AlSupport for HDC in IA32_XSS.CgIf set, don\xe2\x80\x99t call write_data_type separately for \xe2\x80\xa6CgGet the theoretical position of sample (x, y, channel).CgGet the theoretical position of sample (channel, x, y).oInitial APIC IDCcInserts an <code>m128d</code> to <code>m256d</code>0EcInserts an <code>m128i</code> to an <code>m256i</code> at the high or low position.0ChReturns the digital root in the given <code>base</code>.00CjWrites the prime factors in the given <code>buffer</code>.00EeComputes the modulo of <code>self + other</code> over |<code>modulus</code>|, and \xe2\x80\xa600000EeComputes the modulo of <code>self - other</code> over |<code>modulus</code>|, and \xe2\x80\xa600BeCalls `NumInt::int_ref_div_ties_away.00ClSimilar to int_div_ties_away, but operates on references \xe2\x80\xa600BeCalls `NumInt::int_ref_div_ties_even.00ClSimilar to int_div_ties_even, but operates on references \xe2\x80\xa600BeCalls `NumInt::int_ref_factors_prime.00ClSimilar to int_factors_prime, but operates on references \xe2\x80\xa600BeCalls `NumInt::int_ref_modulo_cycles.00ClSimilar to int_modulo_cycles, but operates on references \xe2\x80\xa600CnReturns the interpolated position between the previous and \xe2\x80\xa6DcDecomposes a <code>Vec&lt;T&gt;</code> into its raw components: \xe2\x80\xa6ClReturns true if it is known that this time zone database \xe2\x80\xa6CjGets whether the buffer is contiguous in Fortran-style \xe2\x80\xa6DfReturns <code>true</code> if the address is a unicast address with \xe2\x80\xa6CkReturns an iterator over each chunk of allocated memory \xe2\x80\xa6CnIterator over generated IDs with <code>SeqCst</code> ordering.BkInstruction TLB associativity for 4K pages.BnL2 Instruction TLB associativity for 4K pages.CnSort the k smallest elements into a new iterator using the \xe2\x80\xa6000AfL2 Associativity fieldAgL2 cache lines per tag.10DeLoad controller input mappings from an SDL <code>RWops</code> object.DjLoads the reference given and zeroes any <code>i32</code> lanes not in \xe2\x80\xa6000DjLoads the reference given and zeroes any <code>i64</code> lanes not in \xe2\x80\xa6000DkReads contiguous elements from <code>slice</code>. Each element is read \xe2\x80\xa6ChWhether the aspect ratio is maintained on window resize.DgSet whether to <code>maintain</code> the aspect ratio on window resize.1ClMaximum number of addressable IDs for processor cores in \xe2\x80\xa6CcThe maximum number of frames a packet will contain.D`Sets the bits from the <code>[start..=end]</code> checked range.00BnUnsets the bit at <code>index</code>, checked.00BdUnsets the <code>FLAG1</code> field.0BdUnsets the <code>FLAG2</code> field.0BdUnsets the <code>MASK0</code> field.0B`Returns a new rendering backend.kThe same asDcCreates a <code>PtrNonNull</code> with the given address and no \xe2\x80\xa6CkCalled by the backend when the sample rate of the audio \xe2\x80\xa6CgCalled when the sample rate of the renderer is changed.DiAttempt to open the joystick at index <code>joystick_index</code> and \xe2\x80\xa6CkPicture number incremented in presentation or output order.CnRotates the top six stack elements, counter-clockwise, two \xe2\x80\xa6DmSaturating convert <code>i32</code> to <code>i16</code>, and pack the values.000DmSaturating convert <code>i32</code> to <code>u16</code>, and pack the values.000BmThe demuxer guarantees packet data integrity.DhReturns a parallel iterator over <code>chunk_size</code> elements of \xe2\x80\xa60AePhysical Address BitsBmReturns an iterator of pressed mouse buttons.0DcLike <code>print_bytes</code>, but panics on failure instead of \xe2\x80\xa6DcHow to handle <code>Authorization</code> headers when following \xe2\x80\xa60BeRefreshes CPUs frequency information.BdRefreshes CPUs specific information.AgRegister a custom eventDhReplaces the <code>old</code> leading byte with a <code>new</code> byte.D`Reverses the order of the bits in <code>self</code> from the \xe2\x80\xa600000000000DiRotates the mask such that the first <code>self.len() - OFFSET</code> \xe2\x80\xa6DkRotates the vector such that the first <code>self.len() - OFFSET</code> \xe2\x80\xa6DjCasts <code>self</code> to <code>i8</code> clamping at the numeric bounds.0DoCasts from <code>i128</code> to <code>i8</code> clamping at the numeric bounds.DnCasts from <code>i16</code> to <code>i8</code> clamping at the numeric bounds.DmCasts from <code>i8</code> to <code>i8</code> clamping at the numeric bounds.DmCasts from <code>u8</code> to <code>i8</code> clamping at the numeric bounds.DoCasts from <code>u128</code> to <code>i8</code> clamping at the numeric bounds.DnCasts from <code>i32</code> to <code>i8</code> clamping at the numeric bounds.DnCasts from <code>u16</code> to <code>i8</code> clamping at the numeric bounds.DnCasts from <code>u32</code> to <code>i8</code> clamping at the numeric bounds.E`Casts from <code>isize</code> to <code>i8</code> clamping at the numeric bounds.E`Casts from <code>usize</code> to <code>i8</code> clamping at the numeric bounds.DnCasts from <code>u64</code> to <code>i8</code> clamping at the numeric bounds.DnCasts from <code>i64</code> to <code>i8</code> clamping at the numeric bounds.DjCasts <code>self</code> to <code>u8</code> clamping at the numeric bounds.0E`Casts from <code>isize</code> to <code>u8</code> clamping at the numeric bounds.DmCasts from <code>i8</code> to <code>u8</code> clamping at the numeric bounds.DnCasts from <code>u16</code> to <code>u8</code> clamping at the numeric bounds.DmCasts from <code>u8</code> to <code>u8</code> clamping at the numeric bounds.DoCasts from <code>u128</code> to <code>u8</code> clamping at the numeric bounds.DnCasts from <code>i16</code> to <code>u8</code> clamping at the numeric bounds.DnCasts from <code>i64</code> to <code>u8</code> clamping at the numeric bounds.DoCasts from <code>i128</code> to <code>u8</code> clamping at the numeric bounds.DnCasts from <code>u32</code> to <code>u8</code> clamping at the numeric bounds.E`Casts from <code>usize</code> to <code>u8</code> clamping at the numeric bounds.DnCasts from <code>i32</code> to <code>u8</code> clamping at the numeric bounds.DnCasts from <code>u64</code> to <code>u8</code> clamping at the numeric bounds.CmIf we should record a history of every redirect location, \xe2\x80\xa60EkSerialize a unit struct like <code>struct Unit</code> or <code>PhantomData&lt;T&gt;</code>.0DjSets the <code>value</code> into the bitrange of <code>FLAG1</code> field.0DjSets the <code>value</code> into the bitrange of <code>FLAG2</code> field.0DjSets the <code>value</code> into the bitrange of <code>MASK0</code> field.0CiSets the position of the left ear in 3 dimensional space.CgChange gamepad position used by force feedback effects.BaSet the Monday based week number.DhSets the value of the <code>IP_MULTICAST_LOOP</code> option for this \xe2\x80\xa6DjSets the value of the <code>IPV6_MULTICAST_LOOP</code> option for this \xe2\x80\xa6CcA hint that overrides the user\xe2\x80\x99s locale settings.DdSets the args into an <code>m128i</code>, first arg is the low lane.0CiSet <code>i8</code> args into an <code>m256i</code> lane.0EbSets the lowest lane of an <code>m128</code> as all lanes of an <code>m256</code>.0CfSet the subsecond nanosecond on this broken down time.BaSet the Sunday based week number.DjReturns a mutable middle subslice of <code>slice</code> with the given \xe2\x80\xa60ClSmallest monitor-line size in bytes (default is processor\xe2\x80\xa6DiReturns an iterator over substrings of <code>self</code> separated on \xe2\x80\xa6BhStores the value to the reference given.000BgStore data from a register into memory.000Bkstrictly follow the standard (MPEG-4, \xe2\x80\xa6).CfAllow non-standard and experimental extension @see \xe2\x80\xa6CmComputes the determinant of a square matrix using Laplace \xe2\x80\xa60000000Ci&lt; array of supported audio samplerates, or NULL if \xe2\x80\xa6BmUnchecked version of <code>swap2_back</code>.ClReturn a positive value if pix_fmt is a supported output \xe2\x80\xa6BoReturn the libswscale build-time configuration.DkFinds the index of the first character in <code>self</code> that is not \xe2\x80\xa6ClUnregisters the current allocation error hook, returning \xe2\x80\xa6CfReturns the last <code>n</code> elements of the slice.Bntemporary complexity masking (0-&gt; disabled)BeReturns if all masked bits are 0, \xe2\x80\xa6DjReturns if all masked bits are 0, <code>(a &amp; mask) as u128 == 0</code>ClMax duration for receiving the response headers, but not \xe2\x80\xa6BbReturns this weekday as an offset.CnFormat this broken down time with a specific configuration \xe2\x80\xa61DbLike <code>alloc_slice_clone</code> but does not panic on failure.CfTries to join one of the tasks in the set that has \xe2\x80\xa6DbTries to append the complete <code>string</code> slice to the end.0CdSets the underline color to <code>DarkYellow</code>.EgUnpack and interleave high <code>i16</code> lanes of <code>a</code> and <code>b</code>.000EgUnpack and interleave high <code>i32</code> lanes of <code>a</code> and <code>b</code>.000EgUnpack and interleave high <code>i64</code> lanes of <code>a</code> and <code>b</code>.000Dk<code>core</code> Informs the compiler that the current calling site is \xe2\x80\xa60ClInforms the compiler that the site which is calling this \xe2\x80\xa6000EgUnwraps the result if the <code>Option</code> is <code>Some</code>, otherwise calls \xe2\x80\xa60CnNew line metrics for fonts that append characters to lines \xe2\x80\xa6BoCreate a Vulkan rendering surface for a window.BcUnloads the current Vulkan library.BlWebAssembly mouse event callback dispatcher.CmWindow has been restored Right now is only implemented on \xe2\x80\xa6000CmExecutes a closure with a Python critical section held on \xe2\x80\xa6C`Provide the maximum number of frames per packet.DjSets the time zone annotation on this <code>Pieces</code> to the given \xe2\x80\xa6DlCasts <code>self</code> to <code>i128</code> wrapping at the numeric bounds.0E`Casts from <code>u64</code> to <code>i128</code> wrapping at the numeric bounds.E`Casts from <code>u32</code> to <code>i128</code> wrapping at the numeric bounds.DoCasts from <code>i8</code> to <code>i128</code> wrapping at the numeric bounds.EbCasts from <code>isize</code> to <code>i128</code> wrapping at the numeric bounds.EaCasts from <code>u128</code> to <code>i128</code> wrapping at the numeric bounds.E`Casts from <code>i64</code> to <code>i128</code> wrapping at the numeric bounds.EbCasts from <code>usize</code> to <code>i128</code> wrapping at the numeric bounds.DoCasts from <code>u8</code> to <code>i128</code> wrapping at the numeric bounds.EaCasts from <code>i128</code> to <code>i128</code> wrapping at the numeric bounds.E`Casts from <code>i32</code> to <code>i128</code> wrapping at the numeric bounds.E`Casts from <code>i16</code> to <code>i128</code> wrapping at the numeric bounds.E`Casts from <code>u16</code> to <code>i128</code> wrapping at the numeric bounds.DlCasts <code>self</code> to <code>u128</code> wrapping at the numeric bounds.0EaCasts from <code>i128</code> to <code>u128</code> wrapping at the numeric bounds.DoCasts from <code>i8</code> to <code>u128</code> wrapping at the numeric bounds.EbCasts from <code>usize</code> to <code>u128</code> wrapping at the numeric bounds.DoCasts from <code>u8</code> to <code>u128</code> wrapping at the numeric bounds.EaCasts from <code>u128</code> to <code>u128</code> wrapping at the numeric bounds.E`Casts from <code>u16</code> to <code>u128</code> wrapping at the numeric bounds.EbCasts from <code>isize</code> to <code>u128</code> wrapping at the numeric bounds.E`Casts from <code>u64</code> to <code>u128</code> wrapping at the numeric bounds.E`Casts from <code>i16</code> to <code>u128</code> wrapping at the numeric bounds.E`Casts from <code>u32</code> to <code>u128</code> wrapping at the numeric bounds.E`Casts from <code>i64</code> to <code>u128</code> wrapping at the numeric bounds.E`Casts from <code>i32</code> to <code>u128</code> wrapping at the numeric bounds.B`Support for AVX 256-bit in XCR0.B`Support for SSE 128-bit in XCR0.CmIndicates how long the results of a preflight request can \xe2\x80\xa6Cb&lt; ARIB STD-B67, known as \xe2\x80\x9cHybrid log-gamma\xe2\x80\x9dBa&lt; IEC 61966-2-1 (sRGB or sYCC)Ab&lt; IEC 61966-2-4CeThe state of the following union is determined by \xe2\x80\xa6Bdthe default value for scalar optionsBg&lt; Only parse headers, do not repack.AiGet volume/mute messages.BiImmediately push the frame to the output.ChRange of channels between AV_CHAN_AMBISONIC_BASE and \xe2\x80\xa6jSee above.ChStereoscopic 3d metadata. The data is the AVStereo3D \xe2\x80\xa6Cb&lt; offset must point to two consecutive integersBd&lt; offset must point to AVRationalCn&lt; bayer, BGBG..(odd line), GRGR..(even line), 8-bit samplesCn&lt; bayer, GBGB..(odd line), RGRG..(even line), 8-bit samplesCn&lt; bayer, GRGR..(odd line), BGBG..(even line), 8-bit samplesCn&lt; bayer, RGRG..(odd line), GBGB..(even line), 8-bit samplesDa&lt; HW decoding through Direct3D11 via old API, Picture.data[\xe2\x80\xa6Da&lt; planar YUV 4:2:0, 15bpp, (1 Cr &amp; Cb sample per 2x2 Y \xe2\x80\xa60D`&lt; planar YUV 4:2:0,18bpp, (1 Cr &amp; Cb sample per 2x2 Y \xe2\x80\xa60D`&lt; planar YUV 4:2:0,21bpp, (1 Cr &amp; Cb sample per 2x2 Y \xe2\x80\xa60Da&lt; planar YUV 4:2:0, 24bpp, (1 Cr &amp; Cb sample per 2x2 Y \xe2\x80\xa60Da&lt; planar YUV 4:2:2, 20bpp, (1 Cr &amp; Cb sample per 2x1 Y \xe2\x80\xa60D`&lt; planar YUV 4:2:2,24bpp, (1 Cr &amp; Cb sample per 2x1 Y \xe2\x80\xa60D`&lt; planar YUV 4:2:2,28bpp, (1 Cr &amp; Cb sample per 2x1 Y \xe2\x80\xa60Da&lt; planar YUV 4:2:2, 32bpp, (1 Cr &amp; Cb sample per 2x1 Y \xe2\x80\xa60D`&lt; planar YUV 4:4:0,20bpp, (1 Cr &amp; Cb sample per 1x2 Y \xe2\x80\xa60D`&lt; planar YUV 4:4:0,24bpp, (1 Cr &amp; Cb sample per 1x2 Y \xe2\x80\xa60Da&lt; planar YUV 4:4:4, 30bpp, (1 Cr &amp; Cb sample per 1x1 Y \xe2\x80\xa60D`&lt; planar YUV 4:4:4,36bpp, (1 Cr &amp; Cb sample per 1x1 Y \xe2\x80\xa60D`&lt; planar YUV 4:4:4,42bpp, (1 Cr &amp; Cb sample per 1x1 Y \xe2\x80\xa60Da&lt; planar YUV 4:4:4, 48bpp, (1 Cr &amp; Cb sample per 1x1 Y \xe2\x80\xa60Dh&lt; planar YUV 4:2:0 22.5bpp, (1 Cr &amp; Cb sample per 2x2 Y &amp; \xe2\x80\xa60Dh&lt; planar YUV 4:2:2 27bpp, (1 Cr &amp; Cb sample per 2x1 Y &amp; A \xe2\x80\xa60Dh&lt; planar YUV 4:4:4 36bpp, (1 Cr &amp; Cb sample per 1x1 Y &amp; A \xe2\x80\xa60ClThis side data should be associated with an audio stream \xe2\x80\xa6AmViews are next to each other.BcFrame contains only the right view.DjPyO3 implementation of an iterator for a Python <code>frozenset</code> \xe2\x80\xa6fU+00170000CbA deserializer holding an <code>EnumAccess</code>.CiA key pair used to establish shared keys for a single \xe2\x80\xa60AiFloating point exception.CaAn error indicating that no nul byte was present.00000CnThis trait allows the user to customize the heuristic used \xe2\x80\xa6CmRAII structure used to release the exclusive write access \xe2\x80\xa600BlProcessor Frequency Information (LEAF=0x16).DbRepresents Python\xe2\x80\x99s <code>ConnectionResetError</code> exception.2Bf&lt; An audio device has been removed.Bj&lt; dst + src: supported by all renderersBd&lt; Game controller button releasedCcCalculate a 256 entry gamma ramp for a gamma value.CiCreate a window that can be shaped with the specified \xe2\x80\xa6AgCreate a system cursor.ChPrevent the screen from being blanked by a screen saver.Aj\\brief Display orientationBn\\brief Dollar Gesture Event (event.dgesture.*)CkGet the size of a window\xe2\x80\x99s underlying drawable in pixels.CeGet the swap interval for the current OpenGL context.CiReset all previously set OpenGL context attributes to \xe2\x80\xa6CeSet the swap interval for the current OpenGL context.BlThe list of axes available from a controllerClGet the implementation-dependent name for an opened game \xe2\x80\xa6AoOpen a game controller for use.ClGet the implementation-dependent path for an opened game \xe2\x80\xa6BeGet a list of all assertion failures.CgGet the human-readable name of a specific audio device.CjGet the preferred audio format of a specific audio device.ChGet the key code corresponding to the given scancode \xe2\x80\xa6BkGet the current set of SDL memory functionsBiGet the number of built-in audio devices.CiUse this function to get the number of built-in audio \xe2\x80\xa6BjGet the number of available display modes.BkGet the number of registered touch devices.CjGet the number of active fingers for a given touch device.CbGet the number of video drivers compiled into SDL.BnGet the human readable name of a pixel format.BnGet the number of bytes of still-queued audio.CmGet the color used for drawing operations (Rect, Line and \xe2\x80\xa6ChGet the scancode corresponding to the given key code \xe2\x80\xa6CgGet the additional alpha value used in blit operations.CgGet the additional color value multiplied into blit \xe2\x80\xa6CnGet the additional alpha value multiplied into render copy \xe2\x80\xa6CnGet the additional color value multiplied into render copy \xe2\x80\xa6ChGet the user-specified pointer associated with a textureBgGet the type of the given touch device.CbGet the gamma ramp for a given window\xe2\x80\x99s display.BaGet a window\xe2\x80\x99s mouse grab mode.C`Get the mouse confinement rectangle of a window.BcUpdate the properties of an effect.BfEnable/disable joystick event polling.CkGet the USB product ID of an opened joystick, if available.BjGet the instance ID of an opened joystick.BhGet the number of buttons on a joystick.BfSend a joystick specific effect packetB`Reset all priorities to default.Ac&lt; warning dialogBn&lt; The scroll direction is flipped / naturalB`&lt; Plugged in, battery chargedBb&lt; cannot determine power statusn&lt; AC SearchCk&lt; Located at the lower left of the return key on ISO \xe2\x80\xa6Co&lt; ISO USB keyboards actually use this code instead of 49 \xe2\x80\xa6Da&lt; Usually situated below the display on phones and used as \xe2\x80\xa6i&lt; Handi&lt; WaitC`Save a currently loaded Dollar Gesture template.CmReplace SDL\xe2\x80\x99s memory allocation functions with a custom \xe2\x80\xa6CmSet the color used for drawing operations (Rect, Line and \xe2\x80\xa6CfSet an additional alpha value used in blit operations.CfSet an additional color value multiplied into blit \xe2\x80\xa6CmSet an additional alpha value multiplied into render copy \xe2\x80\xa6CmSet an additional color value multiplied into render copy \xe2\x80\xa6CbAssociate a user-specified pointer with a texture.ChSet the gamma ramp for the display that owns a given \xe2\x80\xa6BaSet a window\xe2\x80\x99s mouse grab mode.CfConfines the cursor to the specified area of a window.BiSet the user-resizable state of a window.BkDynamically load the Vulkan loader library.Ak&lt; Window has been hiddenAk&lt; window has input focusAk&lt; window has mouse focusClThe |Sec-WebSocket-Protocol| header field is used in the \xe2\x80\xa6Ai&lt; Kaiser windowed sincD`Type returned from <code>serialize_struct_variant</code> for \xe2\x80\xa6D`Returned from <code>Serializer::serialize_struct_variant</code>.1Ck\\brief A binarized alpha cutoff with a given integer value.AjStale network file handle.0000AoSettings for a streaming sound.Dj<code>std</code> An owned permission to join on a scoped thread (block \xe2\x80\xa60Cg\xf0\x9f\x95\x98 A time split from milliseconds to nanoseconds, \xe2\x80\xa60CmThe kind of time zone found in an RFC 9557 timestamp, for \xe2\x80\xa6CeA time zone annotation parsed from a datetime string.Ce415 Unsupported Media Type [RFC9110, Section 15.5.16]CkPrefer Wayland, fall back to X11 if Wayland is unavailable.CgPrefer X11, fall back to Wayland if X11 is unavailable.CmMarker used by the server to indicate that the MIME types \xe2\x80\xa6AiControls DNS prefetching.AkSee <code>_mm_setcsr</code>00DhThe <code>MM_MANTISSA_NORM_ENUM</code> type used to specify mantissa \xe2\x80\xa600DhThe <code>MM_MANTISSA_SIGN_ENUM</code> type used to specify mantissa \xe2\x80\xa600222Cl<strong>Index only</strong>: return the most significant bit00CkBroadcasts the lower 2 packed single-precision (32-bit) \xe2\x80\xa600CdBroadcast the 4 packed single-precision (32-bit) \xe2\x80\xa600CeBroadcasts the 2 packed double-precision (64-bit) \xe2\x80\xa600CkBroadcasts the lower 2 packed 32-bit integers from a to \xe2\x80\xa600ChBroadcast the 4 packed 32-bit integers from a to all \xe2\x80\xa600CiBroadcasts the 2 packed 64-bit integers from a to all \xe2\x80\xa600DfBroadcasts the low packed 8-bit integer from <code>a</code> to all \xe2\x80\xa600CkCasts vector of type __m128d to type __m256d; the upper \xe2\x80\xa600BmCasts vector of type __m256d to type __m128d.00EfCast vector of type <code>__m128h</code> to type <code>__m256h</code>. The upper 8 \xe2\x80\xa600DoCast vector of type <code>__m256h</code> to type <code>__m128h</code>. This \xe2\x80\xa600CmCasts vector of type __m128 to type __m256; the upper 128 \xe2\x80\xa600BkCasts vector of type __m256 to type __m128.00CkCasts vector of type __m128i to type __m256i; the upper \xe2\x80\xa600BmCasts vector of type __m256i to type __m128i.00CgCompare packed signed 8-bit integers in a and b for \xe2\x80\xa600CiCompare packed unsigned 8-bit integers in a and b for \xe2\x80\xa600111000111000111000111000CkConvert packed single precision (32-bit) floating-point \xe2\x80\xa600ChConvert packed signed 32-bit integers in a to packed \xe2\x80\xa600ChConvert packed signed 64-bit integers in a to packed \xe2\x80\xa600000CjConvert packed unsigned 16-bit integers in a to packed \xe2\x80\xa600CjConvert packed unsigned 32-bit integers in a to packed \xe2\x80\xa600CjConvert packed unsigned 64-bit integers in a to packed \xe2\x80\xa600CkExtract 128 bits (composed of 4 packed single-precision \xe2\x80\xa600ClExtracts 128 bits (composed of 2 packed double-precision \xe2\x80\xa600ChTest packed double-precision (64-bit) floating-point \xe2\x80\xa600CfTest packed half-precision (16-bit) floating-point \xe2\x80\xa600ChTest packed single-precision (32-bit) floating-point \xe2\x80\xa600DcReturns values from <code>slice</code> at offsets determined by \xe2\x80\xa600000000000CmMultiply packed complex numbers in a and b, accumulate to \xe2\x80\xa600ClMultiply packed double-precision (64-bit) floating-point \xe2\x80\xa600CjMultiply packed half-precision (16-bit) floating-point \xe2\x80\xa600ClMultiply packed single-precision (32-bit) floating-point \xe2\x80\xa600222111000CfAdd packed signed 16-bit integers in a and b using \xe2\x80\xa600ChAdd packed unsigned 16-bit integers in a and b using \xe2\x80\xa600CjBlend packed 8-bit integers from a and b using control \xe2\x80\xa600CeCompute the sum of absolute differences (SADs) of \xe2\x80\xa600CgMultiply packed complex numbers in a by the complex \xe2\x80\xa600CfNormalize the mantissas of packed double-precision \xe2\x80\xa600CmNormalize the mantissas of packed half-precision (16-bit) \xe2\x80\xa600CfNormalize the mantissas of packed single-precision \xe2\x80\xa600CjLoad packed 32-bit integers from memory into dst using \xe2\x80\xa600CjLoad packed 64-bit integers from memory into dst using \xe2\x80\xa600CiLoad packed 8-bit integers from memory into dst using \xe2\x80\xa600CfMultiply packed signed 16-bit integers in a and b, \xe2\x80\xa600CdDuplicate even-indexed double-precision (64-bit) \xe2\x80\xa600CmShuffle double-precision (64-bit) floating-point elements \xe2\x80\xa600CmShuffle single-precision (32-bit) floating-point elements \xe2\x80\xa600CmRotate the bits in each packed 32-bit integer in a to the \xe2\x80\xa600CmRotate the bits in each packed 64-bit integer in a to the \xe2\x80\xa600111000ClCompute the approximate reciprocal square root of packed \xe2\x80\xa600000CkBroadcast 16-bit integer a to all elements of dst using \xe2\x80\xa600CkBroadcast 32-bit integer a to all elements of dst using \xe2\x80\xa600CkBroadcast 64-bit integer a to all elements of dst using \xe2\x80\xa600777666ChShift packed 16-bit integers in a left by imm8 while \xe2\x80\xa600ChShift packed 32-bit integers in a left by imm8 while \xe2\x80\xa600ChShift packed 64-bit integers in a left by imm8 while \xe2\x80\xa600ChShift packed 16-bit integers in a left by the amount \xe2\x80\xa600ChShift packed 32-bit integers in a left by the amount \xe2\x80\xa600ChShift packed 64-bit integers in a left by the amount \xe2\x80\xa600CiShift packed 16-bit integers in a right by imm8 while \xe2\x80\xa600CiShift packed 32-bit integers in a right by imm8 while \xe2\x80\xa600CiShift packed 64-bit integers in a right by imm8 while \xe2\x80\xa600CiShift packed 16-bit integers in a right by the amount \xe2\x80\xa600CiShift packed 32-bit integers in a right by the amount \xe2\x80\xa600CiShift packed 64-bit integers in a right by the amount \xe2\x80\xa600555444333222111000CkSubtract packed signed 16-bit integers in b from packed \xe2\x80\xa600CmSubtract packed unsigned 16-bit integers in b from packed \xe2\x80\xa600DiStores packed 32-bit integers from <code>a</code> into memory pointed \xe2\x80\xa600DiStores packed 64-bit integers from <code>a</code> into memory pointed \xe2\x80\xa600CfCompute the absolute value of packed signed 16-bit \xe2\x80\xa600CfCompute the absolute value of packed signed 32-bit \xe2\x80\xa600CfCompute the absolute value of packed signed 64-bit \xe2\x80\xa600ChAdd packed 16-bit integers in a and b, and store the \xe2\x80\xa600ChAdd packed 32-bit integers in a and b, and store the \xe2\x80\xa600ChAdd packed 64-bit integers in a and b, and store the \xe2\x80\xa600CeAdd packed signed 8-bit integers in a and b using \xe2\x80\xa600CgAdd packed unsigned 8-bit integers in a and b using \xe2\x80\xa600CnCompute the bitwise AND of packed 32-bit integers in a and \xe2\x80\xa600CnCompute the bitwise AND of packed 64-bit integers in a and \xe2\x80\xa600CfCompute the bitwise NOT of packed double-precision \xe2\x80\xa600CfCompute the bitwise NOT of packed single-precision \xe2\x80\xa600CkAverage packed unsigned 16-bit integers in a and b, and \xe2\x80\xa600CnConverts packed BF16 (16-bit) floating-point elements in a \xe2\x80\xa600CiConvert packed half-precision (16-bit) floating-point \xe2\x80\xa600CkConvert packed single-precision (32-bit) floating-point \xe2\x80\xa600CmCompute dot-product of BF16 (16-bit) floating-point pairs \xe2\x80\xa600CdLoad contiguous active double-precision (64-bit) \xe2\x80\xa600CdLoad contiguous active single-precision (32-bit) \xe2\x80\xa600CgMultiply packed complex numbers in a by the complex \xe2\x80\xa600CmMultiply packed complex numbers in a and b, accumulate to \xe2\x80\xa600ClMultiply packed double-precision (64-bit) floating-point \xe2\x80\xa600CjMultiply packed half-precision (16-bit) floating-point \xe2\x80\xa600ClMultiply packed single-precision (32-bit) floating-point \xe2\x80\xa600222111000ChConvert the exponent of each packed double-precision \xe2\x80\xa600CfConvert the exponent of each packed half-precision \xe2\x80\xa600ChConvert the exponent of each packed single-precision \xe2\x80\xa600CiCompare packed signed 16-bit integers in a and b, and \xe2\x80\xa600CiCompare packed signed 32-bit integers in a and b, and \xe2\x80\xa600CiCompare packed signed 64-bit integers in a and b, and \xe2\x80\xa600CkCompare packed unsigned 16-bit integers in a and b, and \xe2\x80\xa600CkCompare packed unsigned 32-bit integers in a and b, and \xe2\x80\xa600CkCompare packed unsigned 64-bit integers in a and b, and \xe2\x80\xa600555444333222111000CnMove packed 16-bit integers from a into dst using zeromask \xe2\x80\xa600CnMove packed 32-bit integers from a into dst using zeromask \xe2\x80\xa600CnMove packed 64-bit integers from a into dst using zeromask \xe2\x80\xa600ClMultiply the low signed 32-bit integers from each packed \xe2\x80\xa600CnMultiply the low unsigned 32-bit integers from each packed \xe2\x80\xa600CkExtract the reduced argument of packed double-precision \xe2\x80\xa600CiExtract the reduced argument of packed half-precision \xe2\x80\xa600CkExtract the reduced argument of packed single-precision \xe2\x80\xa600CmRotate the bits in each packed 32-bit integer in a to the \xe2\x80\xa600CmRotate the bits in each packed 64-bit integer in a to the \xe2\x80\xa600111000CmScale the packed double-precision (64-bit) floating-point \xe2\x80\xa600CkScale the packed half-precision (16-bit) floating-point \xe2\x80\xa600CmScale the packed single-precision (32-bit) floating-point \xe2\x80\xa600CjBroadcast 8-bit integer a to all elements of dst using \xe2\x80\xa600CiShift packed 16-bit integers in a left by count while \xe2\x80\xa600CiShift packed 32-bit integers in a left by count while \xe2\x80\xa600CiShift packed 64-bit integers in a left by count while \xe2\x80\xa600CjShift packed 16-bit integers in a right by count while \xe2\x80\xa600CjShift packed 32-bit integers in a right by count while \xe2\x80\xa600CjShift packed 64-bit integers in a right by count while \xe2\x80\xa600222111000CkSubtract packed 16-bit integers in b from packed 16-bit \xe2\x80\xa600CkSubtract packed 32-bit integers in b from packed 32-bit \xe2\x80\xa600CkSubtract packed 64-bit integers in b from packed 64-bit \xe2\x80\xa600CjSubtract packed signed 8-bit integers in b from packed \xe2\x80\xa600ClSubtract packed unsigned 8-bit integers in b from packed \xe2\x80\xa600CnCompute the bitwise XOR of packed 32-bit integers in a and \xe2\x80\xa600CnCompute the bitwise XOR of packed 64-bit integers in a and \xe2\x80\xa600ClShuffles 256 bits (composed of 4 packed double-precision \xe2\x80\xa600ClShuffles 256 bits (composed of 8 packed single-precision \xe2\x80\xa600CmShuffle double-precision (64-bit) floating-point elements \xe2\x80\xa600CnShuffle half-precision (16-bit) floating-point elements in \xe2\x80\xa600CmShuffle single-precision (32-bit) floating-point elements \xe2\x80\xa600CnReduce the packed 8-bit integers in a by addition. Returns \xe2\x80\xa600CiReduce the packed 8-bit integers in a by bitwise AND. \xe2\x80\xa600CmReduce the packed 8-bit integers in a by maximum. Returns \xe2\x80\xa600CnReduce the packed unsigned 8-bit integers in a by maximum. \xe2\x80\xa600CmReduce the packed 8-bit integers in a by minimum. Returns \xe2\x80\xa600CnReduce the packed unsigned 8-bit integers in a by minimum. \xe2\x80\xa600ClReduce the packed 8-bit integers in a by multiplication. \xe2\x80\xa600CiReduce the packed 16-bit integers in a by bitwise OR. \xe2\x80\xa600CkShuffles 16-bit integers in the high 64 bits of 128-bit \xe2\x80\xa600CjShuffles 16-bit integers in the low 64 bits of 128-bit \xe2\x80\xa600CnCompute the bitwise AND of packed 16-bit integers in a and \xe2\x80\xa600CnCompute the bitwise AND of packed 32-bit integers in a and \xe2\x80\xa600CnCompute the bitwise AND of packed 64-bit integers in a and \xe2\x80\xa600CnCompute the bitwise NAND of packed 8-bit integers in a and \xe2\x80\xa600CjReturns vector of type __m256i with with indeterminate \xe2\x80\xa600DkConstructs a 256-bit floating-point vector of <code>[4 x double]</code> \xe2\x80\xa600EfCast vector of type <code>__m256h</code> to type <code>__m128h</code>. The upper 8 \xe2\x80\xa600DjConstructs a 256-bit floating-point vector of <code>[8 x float]</code> \xe2\x80\xa600CnConstructs a 256-bit integer vector from a 128-bit integer \xe2\x80\xa600CkBroadcasts the lower 2 packed single-precision (32-bit) \xe2\x80\xa600CdBroadcast the 4 packed single-precision (32-bit) \xe2\x80\xa600CeBroadcasts the 8 packed single-precision (32-bit) \xe2\x80\xa600CeBroadcasts the 2 packed double-precision (64-bit) \xe2\x80\xa600CdBroadcast the 4 packed double-precision (64-bit) \xe2\x80\xa600CkBroadcasts the lower 2 packed 32-bit integers from a to \xe2\x80\xa600ChBroadcast the 4 packed 32-bit integers from a to all \xe2\x80\xa600CiBroadcasts the 8 packed 32-bit integers from a to all \xe2\x80\xa600CiBroadcasts the 2 packed 64-bit integers from a to all \xe2\x80\xa600ChBroadcast the 4 packed 64-bit integers from a to all \xe2\x80\xa600ChBroadcast the low packed 8-bit integer from a to all \xe2\x80\xa600CnCast vector of type __m128d to type __m512d; the upper 384 \xe2\x80\xa600CnCast vector of type __m256d to type __m512d; the upper 256 \xe2\x80\xa600CeCast vector of type __m512d to type __m128d. This \xe2\x80\xa600CeCast vector of type __m512d to type __m256d. This \xe2\x80\xa600EgCast vector of type <code>__m128h</code> to type <code>__m512h</code>. The upper 24 \xe2\x80\xa600EgCast vector of type <code>__m256h</code> to type <code>__m512h</code>. The upper 16 \xe2\x80\xa600DoCast vector of type <code>__m512h</code> to type <code>__m128h</code>. This \xe2\x80\xa600DoCast vector of type <code>__m512h</code> to type <code>__m256h</code>. This \xe2\x80\xa600ClCast vector of type __m128 to type __m512; the upper 384 \xe2\x80\xa600ClCast vector of type __m256 to type __m512; the upper 256 \xe2\x80\xa600CmCast vector of type __m512 to type __m128. This intrinsic \xe2\x80\xa600CmCast vector of type __m512 to type __m256. This intrinsic \xe2\x80\xa600CnCast vector of type __m128i to type __m512i; the upper 384 \xe2\x80\xa600CnCast vector of type __m256i to type __m512i; the upper 256 \xe2\x80\xa600CeCast vector of type __m512i to type __m128i. This \xe2\x80\xa600CeCast vector of type __m512i to type __m256i. This \xe2\x80\xa600CgCompare packed signed 8-bit integers in a and b for \xe2\x80\xa600CiCompare packed unsigned 8-bit integers in a and b for \xe2\x80\xa600111000111000111000111000ChConvert packed signed 32-bit integers in a to packed \xe2\x80\xa600ChConvert packed signed 64-bit integers in a to packed \xe2\x80\xa600000CjConvert packed unsigned 16-bit integers in a to packed \xe2\x80\xa600CjConvert packed unsigned 32-bit integers in a to packed \xe2\x80\xa600CjConvert packed unsigned 64-bit integers in a to packed \xe2\x80\xa600CiConvert packed half-precision (16-bit) floating-point \xe2\x80\xa600CkConvert packed single-precision (32-bit) floating-point \xe2\x80\xa600CkExtract 128 bits (composed of 4 packed single-precision \xe2\x80\xa600ClExtracts 256 bits (composed of 8 packed single-precision \xe2\x80\xa600ClExtracts 128 bits (composed of 2 packed double-precision \xe2\x80\xa600CkExtract 256 bits (composed of 4 packed double-precision \xe2\x80\xa600CgMultiply packed complex numbers in a by the complex \xe2\x80\xa600CmMultiply packed complex numbers in a and b, accumulate to \xe2\x80\xa600ClMultiply packed double-precision (64-bit) floating-point \xe2\x80\xa600CjMultiply packed half-precision (16-bit) floating-point \xe2\x80\xa600ClMultiply packed single-precision (32-bit) floating-point \xe2\x80\xa600222111000ChTest packed double-precision (64-bit) floating-point \xe2\x80\xa600CfTest packed half-precision (16-bit) floating-point \xe2\x80\xa600ChTest packed single-precision (32-bit) floating-point \xe2\x80\xa600ChConvert the exponent of each packed double-precision \xe2\x80\xa600CfConvert the exponent of each packed half-precision \xe2\x80\xa600ChConvert the exponent of each packed single-precision \xe2\x80\xa600ClGather 32-bit integers from memory using 32-bit indices. \xe2\x80\xa600ClGather 64-bit integers from memory using 32-bit indices. \xe2\x80\xa600CnStores 8 double-precision (64-bit) floating-point elements \xe2\x80\xa600ClGather 32-bit integers from memory using 64-bit indices. \xe2\x80\xa600ClGather 64-bit integers from memory using 64-bit indices. \xe2\x80\xa600>>>===<<<;;;===<<<;;;CfAdd packed signed 16-bit integers in a and b using \xe2\x80\xa600ChAdd packed unsigned 16-bit integers in a and b using \xe2\x80\xa600CjBlend packed 8-bit integers from a and b using control \xe2\x80\xa600CgPerforms an element-by-element conversion of packed \xe2\x80\xa600ClPerforms element-by-element conversion of the lower half \xe2\x80\xa600CeCompute the sum of absolute differences (SADs) of \xe2\x80\xa600CgMultiply packed complex numbers in a by the complex \xe2\x80\xa600CfNormalize the mantissas of packed double-precision \xe2\x80\xa600CmNormalize the mantissas of packed half-precision (16-bit) \xe2\x80\xa600CfNormalize the mantissas of packed single-precision \xe2\x80\xa600CjLoad packed 32-bit integers from memory into dst using \xe2\x80\xa600CjLoad packed 64-bit integers from memory into dst using \xe2\x80\xa600CiLoad packed 8-bit integers from memory into dst using \xe2\x80\xa600CfMultiply packed signed 16-bit integers in a and b, \xe2\x80\xa600CdDuplicate even-indexed double-precision (64-bit) \xe2\x80\xa600CmShuffle double-precision (64-bit) floating-point elements \xe2\x80\xa600CmShuffle single-precision (32-bit) floating-point elements \xe2\x80\xa600CmRotate the bits in each packed 32-bit integer in a to the \xe2\x80\xa600CmRotate the bits in each packed 64-bit integer in a to the \xe2\x80\xa600111000ClCompute the approximate reciprocal square root of packed \xe2\x80\xa600000CkBroadcast 16-bit integer a to all elements of dst using \xe2\x80\xa600CkBroadcast 32-bit integer a to all elements of dst using \xe2\x80\xa600CkBroadcast 64-bit integer a to all elements of dst using \xe2\x80\xa600777666ChShift packed 16-bit integers in a left by imm8 while \xe2\x80\xa600ChShift packed 32-bit integers in a left by imm8 while \xe2\x80\xa600ChShift packed 64-bit integers in a left by imm8 while \xe2\x80\xa600ChShift packed 16-bit integers in a left by the amount \xe2\x80\xa600ChShift packed 32-bit integers in a left by the amount \xe2\x80\xa600ChShift packed 64-bit integers in a left by the amount \xe2\x80\xa600CiShift packed 16-bit integers in a right by imm8 while \xe2\x80\xa600CiShift packed 32-bit integers in a right by imm8 while \xe2\x80\xa600CiShift packed 64-bit integers in a right by imm8 while \xe2\x80\xa600CiShift packed 16-bit integers in a right by the amount \xe2\x80\xa600CiShift packed 32-bit integers in a right by the amount \xe2\x80\xa600CiShift packed 64-bit integers in a right by the amount \xe2\x80\xa600555444333222111000CkSubtract packed signed 16-bit integers in b from packed \xe2\x80\xa600CmSubtract packed unsigned 16-bit integers in b from packed \xe2\x80\xa600CfCompute the absolute value of packed signed 16-bit \xe2\x80\xa600DjComputes the absolute value of packed 32-bit integers in <code>a</code>\xe2\x80\xa600CfCompute the absolute value of packed signed 64-bit \xe2\x80\xa600ChAdd packed 16-bit integers in a and b, and store the \xe2\x80\xa600ChAdd packed 32-bit integers in a and b, and store the \xe2\x80\xa600ChAdd packed 64-bit integers in a and b, and store the \xe2\x80\xa600CeAdd packed signed 8-bit integers in a and b using \xe2\x80\xa600CgAdd packed unsigned 8-bit integers in a and b using \xe2\x80\xa600CnCompute the bitwise AND of packed 32-bit integers in a and \xe2\x80\xa600CnCompute the bitwise AND of packed 64-bit integers in a and \xe2\x80\xa600CfCompute the bitwise NOT of packed double-precision \xe2\x80\xa600CfCompute the bitwise NOT of packed single-precision \xe2\x80\xa600CkAverage packed unsigned 16-bit integers in a and b, and \xe2\x80\xa600CnConverts packed BF16 (16-bit) floating-point elements in a \xe2\x80\xa600CiConvert packed half-precision (16-bit) floating-point \xe2\x80\xa600CkConvert packed single-precision (32-bit) floating-point \xe2\x80\xa600CmCompute dot-product of BF16 (16-bit) floating-point pairs \xe2\x80\xa600CdLoad contiguous active double-precision (64-bit) \xe2\x80\xa600CdLoad contiguous active single-precision (32-bit) \xe2\x80\xa600CgMultiply packed complex numbers in a by the complex \xe2\x80\xa600CmMultiply packed complex numbers in a and b, accumulate to \xe2\x80\xa600ClMultiply packed double-precision (64-bit) floating-point \xe2\x80\xa600CjMultiply packed half-precision (16-bit) floating-point \xe2\x80\xa600ClMultiply packed single-precision (32-bit) floating-point \xe2\x80\xa600222111000ChConvert the exponent of each packed double-precision \xe2\x80\xa600CfConvert the exponent of each packed half-precision \xe2\x80\xa600ChConvert the exponent of each packed single-precision \xe2\x80\xa600CiCompare packed signed 16-bit integers in a and b, and \xe2\x80\xa600CiCompare packed signed 32-bit integers in a and b, and \xe2\x80\xa600CiCompare packed signed 64-bit integers in a and b, and \xe2\x80\xa600CkCompare packed unsigned 16-bit integers in a and b, and \xe2\x80\xa600CkCompare packed unsigned 32-bit integers in a and b, and \xe2\x80\xa600CkCompare packed unsigned 64-bit integers in a and b, and \xe2\x80\xa600555444333222111000CnMove packed 16-bit integers from a into dst using zeromask \xe2\x80\xa600CnMove packed 32-bit integers from a into dst using zeromask \xe2\x80\xa600CnMove packed 64-bit integers from a into dst using zeromask \xe2\x80\xa600ClMultiply the low signed 32-bit integers from each packed \xe2\x80\xa600CnMultiply the low unsigned 32-bit integers from each packed \xe2\x80\xa600CkExtract the reduced argument of packed double-precision \xe2\x80\xa600CiExtract the reduced argument of packed half-precision \xe2\x80\xa600CkExtract the reduced argument of packed single-precision \xe2\x80\xa600CmRotate the bits in each packed 32-bit integer in a to the \xe2\x80\xa600CmRotate the bits in each packed 64-bit integer in a to the \xe2\x80\xa600111000CmScale the packed double-precision (64-bit) floating-point \xe2\x80\xa600CkScale the packed half-precision (16-bit) floating-point \xe2\x80\xa600CmScale the packed single-precision (32-bit) floating-point \xe2\x80\xa600CjBroadcast 8-bit integer a to all elements of dst using \xe2\x80\xa600CiShift packed 16-bit integers in a left by count while \xe2\x80\xa600CiShift packed 32-bit integers in a left by count while \xe2\x80\xa600CiShift packed 64-bit integers in a left by count while \xe2\x80\xa600CjShift packed 16-bit integers in a right by count while \xe2\x80\xa600CjShift packed 32-bit integers in a right by count while \xe2\x80\xa600CjShift packed 64-bit integers in a right by count while \xe2\x80\xa600222111000CkSubtract packed 16-bit integers in b from packed 16-bit \xe2\x80\xa600CkSubtract packed 32-bit integers in b from packed 32-bit \xe2\x80\xa600CkSubtract packed 64-bit integers in b from packed 64-bit \xe2\x80\xa600CjSubtract packed signed 8-bit integers in b from packed \xe2\x80\xa600ClSubtract packed unsigned 8-bit integers in b from packed \xe2\x80\xa600CnCompute the bitwise XOR of packed 32-bit integers in a and \xe2\x80\xa600CnCompute the bitwise XOR of packed 64-bit integers in a and \xe2\x80\xa600CmShuffle double-precision (64-bit) floating-point elements \xe2\x80\xa600CnShuffle half-precision (16-bit) floating-point elements in \xe2\x80\xa600CmShuffle single-precision (32-bit) floating-point elements \xe2\x80\xa600CiReduce the packed 32-bit integers in a by bitwise OR. \xe2\x80\xa600CiReduce the packed 64-bit integers in a by bitwise OR. \xe2\x80\xa600CkExtract the reduced argument of packed double-precision \xe2\x80\xa600CiExtract the reduced argument of packed half-precision \xe2\x80\xa600CkExtract the reduced argument of packed single-precision \xe2\x80\xa600CmScale the packed double-precision (64-bit) floating-point \xe2\x80\xa600CkScale the packed half-precision (16-bit) floating-point \xe2\x80\xa600CmScale the packed single-precision (32-bit) floating-point \xe2\x80\xa600CjShuffle 16-bit integers in the high 64 bits of 128-bit \xe2\x80\xa600CiShuffle 16-bit integers in the low 64 bits of 128-bit \xe2\x80\xa600CnCompute the bitwise AND of packed 16-bit integers in a and \xe2\x80\xa600CnCompute the bitwise AND of packed 32-bit integers in a and \xe2\x80\xa600CnCompute the bitwise AND of packed 64-bit integers in a and \xe2\x80\xa600CnCompute the bitwise NAND of packed 8-bit integers in a and \xe2\x80\xa600CnReturn vector of type __m512i with indeterminate elements. \xe2\x80\xa600CnCast vector of type __m128d to type __m512d; the upper 384 \xe2\x80\xa600CnCast vector of type __m256d to type __m512d; the upper 256 \xe2\x80\xa600EgCast vector of type <code>__m128h</code> to type <code>__m512h</code>. The upper 24 \xe2\x80\xa600EgCast vector of type <code>__m256h</code> to type <code>__m512h</code>. The upper 16 \xe2\x80\xa600ClCast vector of type __m128 to type __m512; the upper 384 \xe2\x80\xa600ClCast vector of type __m256 to type __m512; the upper 256 \xe2\x80\xa600CnCast vector of type __m128i to type __m512i; the upper 384 \xe2\x80\xa600CnCast vector of type __m256i to type __m512i; the upper 256 \xe2\x80\xa600ClDecrypt 10 rounds of 8 groups of unsigned 8-bit integers \xe2\x80\xa600ClDecrypt 14 rounds of 8 groups of unsigned 8-bit integers \xe2\x80\xa600ClEncrypt 10 rounds of 8 groups of unsigned 8-bit integers \xe2\x80\xa600ClEncrypt 14 rounds of 8 groups of unsigned 8-bit integers \xe2\x80\xa600CkMultiply packed unsigned 52-bit integers in each 64-bit \xe2\x80\xa600000ClCompare packed signed 8-bit integers in a and b based on \xe2\x80\xa600CnCompare packed unsigned 8-bit integers in a and b based on \xe2\x80\xa600ClContiguously store the active 8-bit integers in a (those \xe2\x80\xa600CgConvert packed 16-bit integers in a to packed 8-bit \xe2\x80\xa600CgConvert packed 32-bit integers in a to packed 8-bit \xe2\x80\xa600CgConvert packed 64-bit integers in a to packed 8-bit \xe2\x80\xa600CkSign extend packed 8-bit integers in a to packed 16-bit \xe2\x80\xa600CkSign extend packed 8-bit integers in a to packed 32-bit \xe2\x80\xa600CmSign extend packed 8-bit integers in the low 2 bytes of a \xe2\x80\xa600CmZero extend packed unsigned 8-bit integers in a to packed \xe2\x80\xa600CkZero extend packed unsigned 8-bit integers in the low 4 \xe2\x80\xa600CkZero extend packed unsigned 8-bit integers in the low 2 \xe2\x80\xa600CiMultiply groups of 4 adjacent pairs of unsigned 8-bit \xe2\x80\xa6")